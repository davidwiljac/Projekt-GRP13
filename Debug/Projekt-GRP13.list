
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800455c  0800455c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800455c  0800455c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  080045f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080045f4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6cf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002258  00000000  00000000  0002d78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c0  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a357  00000000  00000000  00035130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a782  00000000  00000000  0003f487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00099c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  00099c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009c388  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004294 	.word	0x08004294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08004294 	.word	0x08004294

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <uart_get_char+0x48>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d011      	beq.n	8000890 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <uart_get_char+0x4c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	b2d1      	uxtb	r1, r2
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <uart_get_char+0x4c>)
 8000878:	7011      	strb	r1, [r2, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <uart_get_char+0x50>)
 800087e:	5c9b      	ldrb	r3, [r3, r2]
 8000880:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <uart_get_char+0x48>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <uart_get_char+0x48>)
 800088e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200001ae 	.word	0x200001ae
 80008a4:	200001ad 	.word	0x200001ad
 80008a8:	200000ac 	.word	0x200000ac

080008ac <uart_put_char>:

void uart_put_char(uint8_t c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <uart_put_char+0x30>)
 80008be:	f7ff fef3 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008c2:	bf00      	nop
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <uart_put_char+0x30>)
 80008c8:	f7ff ff42 	bl	8000750 <USART_GetFlagStatus>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f8      	beq.n	80008c4 <uart_put_char+0x18>
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400

080008e0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e012      	b.n	800091a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b0a      	cmp	r3, #10
 80008fe:	d102      	bne.n	8000906 <_write_r+0x26>
            uart_put_char('\r');
 8000900:	200d      	movs	r0, #13
 8000902:	f7ff ffd3 	bl	80008ac <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffcc 	bl	80008ac <uart_put_char>
    for (n = 0; n < len; n++) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	dbe8      	blt.n	80008f4 <_write_r+0x14>
    }

    return len;
 8000922:	683b      	ldr	r3, [r7, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000930:	4915      	ldr	r1, [pc, #84]	; (8000988 <USART2_IRQHandler+0x5c>)
 8000932:	4816      	ldr	r0, [pc, #88]	; (800098c <USART2_IRQHandler+0x60>)
 8000934:	f7ff ff25 	bl	8000782 <USART_GetITStatus>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d021      	beq.n	8000982 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <USART2_IRQHandler+0x60>)
 8000940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000942:	b299      	uxth	r1, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <USART2_IRQHandler+0x64>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d0      	uxtb	r0, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <USART2_IRQHandler+0x64>)
 8000950:	7010      	strb	r0, [r2, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <USART2_IRQHandler+0x68>)
 8000958:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <USART2_IRQHandler+0x6c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d107      	bne.n	8000974 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <USART2_IRQHandler+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <USART2_IRQHandler+0x70>)
 8000970:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000972:	e006      	b.n	8000982 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	00050105 	.word	0x00050105
 800098c:	40004400 	.word	0x40004400
 8000990:	200001ac 	.word	0x200001ac
 8000994:	200000ac 	.word	0x200000ac
 8000998:	200001ae 	.word	0x200001ae
 800099c:	200001ad 	.word	0x200001ad

080009a0 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009a8:	4b86      	ldr	r3, [pc, #536]	; (8000bc4 <uart_init+0x224>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fc35 	bl	8003220 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009b6:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <uart_init+0x224>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fc2e 	bl	8003220 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009c4:	4b80      	ldr	r3, [pc, #512]	; (8000bc8 <uart_init+0x228>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a7f      	ldr	r2, [pc, #508]	; (8000bc8 <uart_init+0x228>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009d0:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <uart_init+0x228>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a7c      	ldr	r2, [pc, #496]	; (8000bc8 <uart_init+0x228>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80009ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a0a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a16:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a1a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a36:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a3a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a48:	f023 030c 	bic.w	r3, r3, #12
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	8892      	ldrh	r2, [r2, #4]
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a7c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a98:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a9c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <uart_init+0x22c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <uart_init+0x22c>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <uart_init+0x22c>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <uart_init+0x22c>)
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ab6:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <uart_init+0x22c>)
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <uart_init+0x22c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <uart_init+0x22c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <uart_init+0x22c>)
 8000ac4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ac8:	f023 030c 	bic.w	r3, r3, #12
 8000acc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <uart_init+0x22c>)
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <uart_init+0x22c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <uart_init+0x22c>)
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <uart_init+0x22c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <uart_init+0x22c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <uart_init+0x22c>)
 8000ae4:	f043 030c 	orr.w	r3, r3, #12
 8000ae8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <uart_init+0x22c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4a37      	ldr	r2, [pc, #220]	; (8000bcc <uart_init+0x22c>)
 8000af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000af4:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <uart_init+0x22c>)
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <uart_init+0x22c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
 8000b06:	2300      	movs	r3, #0
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fbb6 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <uart_init+0x22c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d010      	beq.n	8000b46 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	005a      	lsls	r2, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	fb01 f202 	mul.w	r2, r1, r2
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b44:	e00d      	b.n	8000b62 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	fb01 f202 	mul.w	r2, r1, r2
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <uart_init+0x1d2>
        divider++;
 8000b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <uart_init+0x22c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b8a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b8e:	4013      	ands	r3, r2
 8000b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b92:	4313      	orrs	r3, r2
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <uart_init+0x22c>)
 8000b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b9a:	b292      	uxth	r2, r2
 8000b9c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <uart_init+0x22c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <uart_init+0x22c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000baa:	2201      	movs	r2, #1
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <uart_init+0x230>)
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <uart_init+0x22c>)
 8000bb0:	f7ff fd8c 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f7ff fe35 	bl	8000824 <NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	00050105 	.word	0x00050105

08000bd4 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000bde:	2316      	movs	r3, #22
 8000be0:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d904      	bls.n	8000bf2 <fgcolor+0x1e>
	  type = 1;                // bold text
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	331e      	adds	r3, #30
 8000bf8:	211b      	movs	r1, #27
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <fgcolor+0x34>)
 8000bfc:	f002 fa64 	bl	80030c8 <iprintf>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080042ac 	.word	0x080042ac

08000c0c <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8000c10:	211b      	movs	r1, #27
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <clrscr+0x18>)
 8000c14:	f002 fa58 	bl	80030c8 <iprintf>
    printf("%c[J", ESC);
 8000c18:	211b      	movs	r1, #27
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <clrscr+0x1c>)
 8000c1c:	f002 fa54 	bl	80030c8 <iprintf>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	080042d8 	.word	0x080042d8
 8000c28:	080042e0 	.word	0x080042e0

08000c2c <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	211b      	movs	r1, #27
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <gotoxy+0x20>)
 8000c3e:	f002 fa43 	bl	80030c8 <iprintf>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080042f0 	.word	0x080042f0

08000c50 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d15e      	bne.n	8000d22 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	e019      	b.n	8000c9e <drawBox+0x4e>
			 gotoxy(x1,y);
 8000c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff ffdd 	bl	8000c2c <gotoxy>
			 if (y==y1){
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d103      	bne.n	8000c82 <drawBox+0x32>
				printf("%c", 201);
 8000c7a:	20c9      	movs	r0, #201	; 0xc9
 8000c7c:	f002 fa3c 	bl	80030f8 <putchar>
 8000c80:	e00a      	b.n	8000c98 <drawBox+0x48>
			 }
			 else if(y==y2){
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d103      	bne.n	8000c92 <drawBox+0x42>
				printf("%c", 200);
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f002 fa34 	bl	80030f8 <putchar>
 8000c90:	e002      	b.n	8000c98 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000c92:	20ba      	movs	r0, #186	; 0xba
 8000c94:	f002 fa30 	bl	80030f8 <putchar>
		 for(int y = y1; y <= y2; y++){
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dde1      	ble.n	8000c6a <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	e014      	b.n	8000cd6 <drawBox+0x86>
   			 if(x!=x1){
 8000cac:	6a3a      	ldr	r2, [r7, #32]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d00d      	beq.n	8000cd0 <drawBox+0x80>
				 gotoxy(x,y1);
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6a38      	ldr	r0, [r7, #32]
 8000cb8:	f7ff ffb8 	bl	8000c2c <gotoxy>
				 printf("%c", 205);
 8000cbc:	20cd      	movs	r0, #205	; 0xcd
 8000cbe:	f002 fa1b 	bl	80030f8 <putchar>
				 gotoxy(x,y2);
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	6a38      	ldr	r0, [r7, #32]
 8000cc6:	f7ff ffb1 	bl	8000c2c <gotoxy>
				 printf("%c", 205);
 8000cca:	20cd      	movs	r0, #205	; 0xcd
 8000ccc:	f002 fa14 	bl	80030f8 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
 8000cd6:	6a3a      	ldr	r2, [r7, #32]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dde6      	ble.n	8000cac <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e019      	b.n	8000d18 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000ce4:	69f9      	ldr	r1, [r7, #28]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa0 	bl	8000c2c <gotoxy>
   			 if (y==y1){
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d103      	bne.n	8000cfc <drawBox+0xac>
				printf("%c", 187);
 8000cf4:	20bb      	movs	r0, #187	; 0xbb
 8000cf6:	f002 f9ff 	bl	80030f8 <putchar>
 8000cfa:	e00a      	b.n	8000d12 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d103      	bne.n	8000d0c <drawBox+0xbc>
				printf("%c", 188);
 8000d04:	20bc      	movs	r0, #188	; 0xbc
 8000d06:	f002 f9f7 	bl	80030f8 <putchar>
 8000d0a:	e002      	b.n	8000d12 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000d0c:	20ba      	movs	r0, #186	; 0xba
 8000d0e:	f002 f9f3 	bl	80030f8 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dde1      	ble.n	8000ce4 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8000d20:	e05d      	b.n	8000dde <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e019      	b.n	8000d5c <drawBox+0x10c>
			 gotoxy(x1,y);
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff ff7e 	bl	8000c2c <gotoxy>
			 if (y==y1){
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d103      	bne.n	8000d40 <drawBox+0xf0>
				printf("%c", 218);
 8000d38:	20da      	movs	r0, #218	; 0xda
 8000d3a:	f002 f9dd 	bl	80030f8 <putchar>
 8000d3e:	e00a      	b.n	8000d56 <drawBox+0x106>
			 else if(y==y2){
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d103      	bne.n	8000d50 <drawBox+0x100>
				printf("%c", 192);
 8000d48:	20c0      	movs	r0, #192	; 0xc0
 8000d4a:	f002 f9d5 	bl	80030f8 <putchar>
 8000d4e:	e002      	b.n	8000d56 <drawBox+0x106>
				printf("%c", 179);
 8000d50:	20b3      	movs	r0, #179	; 0xb3
 8000d52:	f002 f9d1 	bl	80030f8 <putchar>
		for(int y = y1; y <= y2; y++){
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dde1      	ble.n	8000d28 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e014      	b.n	8000d94 <drawBox+0x144>
			if(x!=x1){
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d00d      	beq.n	8000d8e <drawBox+0x13e>
				 gotoxy(x,y1);
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ff59 	bl	8000c2c <gotoxy>
				 printf("%c", 196);
 8000d7a:	20c4      	movs	r0, #196	; 0xc4
 8000d7c:	f002 f9bc 	bl	80030f8 <putchar>
				 gotoxy(x,y2);
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff52 	bl	8000c2c <gotoxy>
				 printf("%c", 196);
 8000d88:	20c4      	movs	r0, #196	; 0xc4
 8000d8a:	f002 f9b5 	bl	80030f8 <putchar>
		for(int x = x1; x <= x2; x++){
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dde6      	ble.n	8000d6a <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e019      	b.n	8000dd6 <drawBox+0x186>
			 gotoxy(x2,y);
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff41 	bl	8000c2c <gotoxy>
			if (y==y1){
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d103      	bne.n	8000dba <drawBox+0x16a>
				printf("%c", 191);
 8000db2:	20bf      	movs	r0, #191	; 0xbf
 8000db4:	f002 f9a0 	bl	80030f8 <putchar>
 8000db8:	e00a      	b.n	8000dd0 <drawBox+0x180>
			 else if(y==y2){
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d103      	bne.n	8000dca <drawBox+0x17a>
				printf("%c", 217);
 8000dc2:	20d9      	movs	r0, #217	; 0xd9
 8000dc4:	f002 f998 	bl	80030f8 <putchar>
 8000dc8:	e002      	b.n	8000dd0 <drawBox+0x180>
				printf("%c", 179);
 8000dca:	20b3      	movs	r0, #179	; 0xb3
 8000dcc:	f002 f994 	bl	80030f8 <putchar>
		for(int y = y1; y <= y2; y++){
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dde1      	ble.n	8000da2 <drawBox+0x152>
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000df4:	e010      	b.n	8000e18 <updateBullets+0x32>
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	441a      	add	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1eb      	bne.n	8000df6 <updateBullets+0x10>
	}
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	bulletNode_t* current = gameState->bulletLL;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e3a:	e00f      	b.n	8000e5c <detectBulletHit+0x30>


		if(fpToInt(current->bullet.nextPosition.y)<=1){ //TODO: add other boundaries
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fb8d 	bl	8001560 <fpToInt>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	dc04      	bgt.n	8000e56 <detectBulletHit+0x2a>
			deleteBulletNode(&(gameState->bulletLL), current);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fa69 	bl	8002328 <deleteBulletNode>
		}
		current = current->nextBulletAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1ec      	bne.n	8000e3c <detectBulletHit+0x10>

	}
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <drawBullets>:

void drawBullets(gameState_t* gameState){
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e7a:	e030      	b.n	8000ede <drawBullets+0x72>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fb6d 	bl	8001560 <fpToInt>
 8000e86:	4604      	mov	r4, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fb67 	bl	8001560 <fpToInt>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fec8 	bl	8000c2c <gotoxy>
		printf(" ");
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f002 f92b 	bl	80030f8 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fb5a 	bl	8001560 <fpToInt>
 8000eac:	4604      	mov	r4, r0
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fb54 	bl	8001560 <fpToInt>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff feb5 	bl	8000c2c <gotoxy>
		printf("O");
 8000ec2:	204f      	movs	r0, #79	; 0x4f
 8000ec4:	f002 f918 	bl	80030f8 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1cb      	bne.n	8000e7c <drawBullets+0x10>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}
	...

08000ef0 <NVIC_EnableIRQ>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2201      	movs	r2, #1
 8000f02:	fa02 f103 	lsl.w	r1, r2, r3
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <NVIC_EnableIRQ+0x30>)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	095b      	lsrs	r3, r3, #5
 8000f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da0b      	bge.n	8000f50 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <NVIC_SetPriority+0x4c>)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	3b04      	subs	r3, #4
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000f4e:	e009      	b.n	8000f64 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <NVIC_SetPriority+0x50>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <initJoystick+0x120>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <initJoystick+0x120>)
 8000f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f86:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <initJoystick+0x120>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a42      	ldr	r2, [pc, #264]	; (8001098 <initJoystick+0x120>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <initJoystick+0x120>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a3f      	ldr	r2, [pc, #252]	; (8001098 <initJoystick+0x120>)
 8000f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f9e:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <initJoystick+0x124>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <initJoystick+0x124>)
 8000fa6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000faa:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <initJoystick+0x124>)
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <initJoystick+0x124>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <initJoystick+0x124>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a38      	ldr	r2, [pc, #224]	; (800109c <initJoystick+0x124>)
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <initJoystick+0x124>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a35      	ldr	r2, [pc, #212]	; (800109c <initJoystick+0x124>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fda:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <initJoystick+0x124>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a23      	ldr	r2, [pc, #140]	; (800109c <initJoystick+0x124>)
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <initJoystick+0x124>)
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <initJoystick+0x124>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <initJoystick+0x124>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <initJoystick+0x124>)
 8001022:	f023 0303 	bic.w	r3, r3, #3
 8001026:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <initJoystick+0x124>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <initJoystick+0x124>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <initJoystick+0x128>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <initJoystick+0x128>)
 800103a:	f023 030c 	bic.w	r3, r3, #12
 800103e:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <initJoystick+0x128>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <initJoystick+0x128>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <initJoystick+0x128>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <initJoystick+0x128>)
 800104e:	f023 0303 	bic.w	r3, r3, #3
 8001052:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <initJoystick+0x128>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <initJoystick+0x128>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <initJoystick+0x128>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <initJoystick+0x128>)
 8001066:	f023 0303 	bic.w	r3, r3, #3
 800106a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <initJoystick+0x128>)
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <initJoystick+0x128>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <initJoystick+0x128>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <initJoystick+0x128>)
 800107a:	f023 0303 	bic.w	r3, r3, #3
 800107e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <initJoystick+0x128>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <initJoystick+0x128>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	60d3      	str	r3, [r2, #12]

}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800

080010a4 <centerIsPressed>:



uint8_t centerIsPressed(){
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <centerIsPressed+0x50>)
 80010aa:	8a1b      	ldrh	r3, [r3, #16]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <centerIsPressed+0x2c>
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <centerIsPressed+0x54>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <centerIsPressed+0x58>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b1e      	cmp	r3, #30
 80010c2:	d905      	bls.n	80010d0 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <centerIsPressed+0x54>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <centerIsPressed+0x58>)
 80010ca:	6013      	str	r3, [r2, #0]
		 return 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e00c      	b.n	80010ea <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <centerIsPressed+0x50>)
 80010d2:	8a1b      	ldrh	r3, [r3, #16]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <centerIsPressed+0x54>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b1e      	subs	r3, #30
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <centerIsPressed+0x58>)
 80010e6:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80010e8:	2300      	movs	r3, #0
	 }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	48000400 	.word	0x48000400
 80010f8:	200001c8 	.word	0x200001c8
 80010fc:	200001b0 	.word	0x200001b0

08001100 <upIsPressed>:

uint8_t upIsPressed(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001108:	8a1b      	ldrh	r3, [r3, #16]
 800110a:	b29b      	uxth	r3, r3
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <upIsPressed+0x2e>
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <upIsPressed+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <upIsPressed+0x58>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b1e      	cmp	r3, #30
 8001120:	d905      	bls.n	800112e <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <upIsPressed+0x54>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <upIsPressed+0x58>)
 8001128:	6013      	str	r3, [r2, #0]
			 return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e00d      	b.n	800114a <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800112e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001132:	8a1b      	ldrh	r3, [r3, #16]
 8001134:	b29b      	uxth	r3, r3
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <upIsPressed+0x54>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b1e      	subs	r3, #30
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <upIsPressed+0x58>)
 8001146:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001148:	2300      	movs	r3, #0
		 }
	 }
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200001c8 	.word	0x200001c8
 8001158:	200001b4 	.word	0x200001b4

0800115c <downIsPressed>:

uint8_t downIsPressed(){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <downIsPressed+0x50>)
 8001162:	8a1b      	ldrh	r3, [r3, #16]
 8001164:	b29b      	uxth	r3, r3
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00c      	beq.n	8001188 <downIsPressed+0x2c>
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <downIsPressed+0x54>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <downIsPressed+0x58>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b1e      	cmp	r3, #30
 800117a:	d905      	bls.n	8001188 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <downIsPressed+0x54>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <downIsPressed+0x58>)
 8001182:	6013      	str	r3, [r2, #0]
			 return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e00c      	b.n	80011a2 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <downIsPressed+0x50>)
 800118a:	8a1b      	ldrh	r3, [r3, #16]
 800118c:	b29b      	uxth	r3, r3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d104      	bne.n	80011a0 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <downIsPressed+0x54>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b1e      	subs	r3, #30
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <downIsPressed+0x58>)
 800119e:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80011a0:	2300      	movs	r3, #0
		 }
	 }
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	48000400 	.word	0x48000400
 80011b0:	200001c8 	.word	0x200001c8
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <initTimer+0x60>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <initTimer+0x60>)
 80011c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c6:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <initTimer+0x64>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <initTimer+0x64>)
 80011d0:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	b29b      	uxth	r3, r3
 80011da:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <initTimer+0x64>)
 80011de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <initTimer+0x64>)
 80011e6:	2209      	movs	r2, #9
 80011e8:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <initTimer+0x64>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <initTimer+0x64>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <initTimer+0x64>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <initTimer+0x64>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001206:	2100      	movs	r1, #0
 8001208:	2018      	movs	r0, #24
 800120a:	f7ff fe8b 	bl	8000f24 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800120e:	2018      	movs	r0, #24
 8001210:	f7ff fe6e 	bl	8000ef0 <NVIC_EnableIRQ>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	40014000 	.word	0x40014000

08001220 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	runtime++;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a06      	ldr	r2, [pc, #24]	; (8001244 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800122c:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6113      	str	r3, [r2, #16]
 }
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200001c8 	.word	0x200001c8
 8001248:	40014000 	.word	0x40014000

0800124c <I2C_init>:

    return val;
}

void I2C_init()
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <I2C_init+0x144>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <I2C_init+0x144>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125a:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 800125c:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <I2C_init+0x148>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <I2C_init+0x148>)
 8001262:	f023 030f 	bic.w	r3, r3, #15
 8001266:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <I2C_init+0x148>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <I2C_init+0x148>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <I2C_init+0x148>)
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	4a46      	ldr	r2, [pc, #280]	; (8001394 <I2C_init+0x148>)
 800127a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <I2C_init+0x148>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	4a43      	ldr	r2, [pc, #268]	; (8001394 <I2C_init+0x148>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <I2C_init+0x148>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a40      	ldr	r2, [pc, #256]	; (8001394 <I2C_init+0x148>)
 8001292:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001296:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <I2C_init+0x148>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <I2C_init+0x148>)
 800129e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80012a2:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <I2C_init+0x148>)
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <I2C_init+0x148>)
 80012ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <I2C_init+0x148>)
 80012b6:	889b      	ldrh	r3, [r3, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4a36      	ldr	r2, [pc, #216]	; (8001394 <I2C_init+0x148>)
 80012bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <I2C_init+0x148>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <I2C_init+0x148>)
 80012ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80012ce:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <I2C_init+0x148>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <I2C_init+0x148>)
 80012d6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80012da:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <I2C_init+0x148>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <I2C_init+0x148>)
 80012e2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80012e6:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <I2C_init+0x148>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <I2C_init+0x148>)
 80012ee:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80012f2:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <I2C_init+0x144>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <I2C_init+0x144>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <I2C_init+0x14c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a24      	ldr	r2, [pc, #144]	; (8001398 <I2C_init+0x14c>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <I2C_init+0x14c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4921      	ldr	r1, [pc, #132]	; (8001398 <I2C_init+0x14c>)
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <I2C_init+0x150>)
 8001314:	4013      	ands	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <I2C_init+0x14c>)
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <I2C_init+0x14c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <I2C_init+0x14c>)
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <I2C_init+0x14c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <I2C_init+0x14c>)
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <I2C_init+0x154>)
 800132c:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <I2C_init+0x14c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <I2C_init+0x14c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <I2C_init+0x14c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <I2C_init+0x14c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <I2C_init+0x14c>)
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <I2C_init+0x14c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <I2C_init+0x14c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <I2C_init+0x14c>)
 8001354:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001358:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <I2C_init+0x14c>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <I2C_init+0x14c>)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <I2C_init+0x14c>)
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <I2C_init+0x14c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <I2C_init+0x14c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <I2C_init+0x14c>)
 8001374:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800137c:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <I2C_init+0x14c>)
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <I2C_init+0x14c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	6053      	str	r3, [r2, #4]
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400
 8001398:	40005400 	.word	0x40005400
 800139c:	00cfe0ff 	.word	0x00cfe0ff
 80013a0:	10805e89 	.word	0x10805e89

080013a4 <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 33;      // Returns a pseudo-random integer [0:32].
 80013ac:	f001 fee8 	bl	8003180 <rand>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <spawnEnemy+0xc0>)
 80013b4:	fb83 1302 	smull	r1, r3, r3, r2
 80013b8:	10d9      	asrs	r1, r3, #3
 80013ba:	17d3      	asrs	r3, r2, #31
 80013bc:	1ac9      	subs	r1, r1, r3
 80013be:	460b      	mov	r3, r1
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	440b      	add	r3, r1
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d145      	bne.n	800145a <spawnEnemy+0xb6>
		//int8_t enemyPos = rand() % 156;
		//TODO: Fix tilfældighedsgenerator
		uint8_t enemyPos = 70;
 80013ce:	2346      	movs	r3, #70	; 0x46
 80013d0:	76fb      	strb	r3, [r7, #27]


		enemy_t* enemy = malloc(sizeof(enemy_t));
 80013d2:	2010      	movs	r0, #16
 80013d4:	f001 fdb6 	bl	8002f44 <malloc>
 80013d8:	4603      	mov	r3, r0
 80013da:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2202      	movs	r2, #2
 80013e0:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 80013e2:	2008      	movs	r0, #8
 80013e4:	f001 fdae 	bl	8002f44 <malloc>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 80013ec:	7efb      	ldrb	r3, [r7, #27]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f8a0 	bl	8001536 <intToFp>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f000 f89a 	bl	8001536 <intToFp>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 800140e:	2008      	movs	r0, #8
 8001410:	f001 fd98 	bl	8002f44 <malloc>
 8001414:	4603      	mov	r3, r0
 8001416:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f88c 	bl	8001536 <intToFp>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800142a:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8001432:	2008      	movs	r0, #8
 8001434:	f001 fd86 	bl	8002f44 <malloc>
 8001438:	4603      	mov	r3, r0
 800143a:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	605a      	str	r2, [r3, #4]

		appendEnemy(gameState, enemy);
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fee6 	bl	8002226 <appendEnemy>
	}
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	3e0f83e1 	.word	0x3e0f83e1

08001468 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0){
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <updateEnemy+0x4e>
			thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	440a      	add	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
			thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	440a      	add	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <updateEnemy+0x5e>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 80014c4:	e7d7      	b.n	8001476 <updateEnemy+0xe>
			break;
 80014c6:	bf00      	nop
	}
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <detectCityHit>:

void shootEnemy(gameState_t* gameState){

}

void detectCityHit(gameState_t* gameState){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0 && fpToInt(thisNode->enemy->position->y) >= 40){
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <detectCityHit+0x48>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f832 	bl	8001560 <fpToInt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b27      	cmp	r3, #39	; 0x27
 8001500:	dd0c      	ble.n	800151c <detectCityHit+0x48>
			gameState->cityLives--;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001508:	3b01      	subs	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			deleteEnemyNode(gameState, thisNode);
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 feb3 	bl	8002280 <deleteEnemyNode>
			break;
 800151a:	e008      	b.n	800152e <detectCityHit+0x5a>
		}
		if(thisNode->nextEnemyNode == 0){
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <detectCityHit+0x58>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0 && fpToInt(thisNode->enemy->position->y) >= 40){
 800152a:	e7da      	b.n	80014e2 <detectCityHit+0xe>
			break;
 800152c:	bf00      	nop
	}
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
	output+=n;
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
	output<<=16;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
	return output;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	60bb      	str	r3, [r7, #8]
	int output=0;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001576:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	607b      	str	r3, [r7, #4]
	output+=fp;
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da03      	bge.n	8001594 <fpToInt+0x34>
		output-=65536;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001592:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8001594:	68fb      	ldr	r3, [r7, #12]

}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <drawbackground>:
 */
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"

void drawbackground(){
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 80015a6:	2123      	movs	r1, #35	; 0x23
 80015a8:	2037      	movs	r0, #55	; 0x37
 80015aa:	f7ff fb3f 	bl	8000c2c <gotoxy>
	printf("*");
 80015ae:	202a      	movs	r0, #42	; 0x2a
 80015b0:	f001 fda2 	bl	80030f8 <putchar>
	gotoxy(63,27);
 80015b4:	211b      	movs	r1, #27
 80015b6:	203f      	movs	r0, #63	; 0x3f
 80015b8:	f7ff fb38 	bl	8000c2c <gotoxy>
	printf("*");
 80015bc:	202a      	movs	r0, #42	; 0x2a
 80015be:	f001 fd9b 	bl	80030f8 <putchar>
	gotoxy(10,15);
 80015c2:	210f      	movs	r1, #15
 80015c4:	200a      	movs	r0, #10
 80015c6:	f7ff fb31 	bl	8000c2c <gotoxy>
	printf("*");
 80015ca:	202a      	movs	r0, #42	; 0x2a
 80015cc:	f001 fd94 	bl	80030f8 <putchar>
	gotoxy(20,40);
 80015d0:	2128      	movs	r1, #40	; 0x28
 80015d2:	2014      	movs	r0, #20
 80015d4:	f7ff fb2a 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80015d8:	202b      	movs	r0, #43	; 0x2b
 80015da:	f001 fd8d 	bl	80030f8 <putchar>

	gotoxy(155,37);
 80015de:	2125      	movs	r1, #37	; 0x25
 80015e0:	209b      	movs	r0, #155	; 0x9b
 80015e2:	f7ff fb23 	bl	8000c2c <gotoxy>
	printf("*");
 80015e6:	202a      	movs	r0, #42	; 0x2a
 80015e8:	f001 fd86 	bl	80030f8 <putchar>
	gotoxy(110,28);
 80015ec:	211c      	movs	r1, #28
 80015ee:	206e      	movs	r0, #110	; 0x6e
 80015f0:	f7ff fb1c 	bl	8000c2c <gotoxy>
	printf("*");
 80015f4:	202a      	movs	r0, #42	; 0x2a
 80015f6:	f001 fd7f 	bl	80030f8 <putchar>
	gotoxy(95,13);
 80015fa:	210d      	movs	r1, #13
 80015fc:	205f      	movs	r0, #95	; 0x5f
 80015fe:	f7ff fb15 	bl	8000c2c <gotoxy>
	printf("*");
 8001602:	202a      	movs	r0, #42	; 0x2a
 8001604:	f001 fd78 	bl	80030f8 <putchar>
	gotoxy(130,19);
 8001608:	2113      	movs	r1, #19
 800160a:	2082      	movs	r0, #130	; 0x82
 800160c:	f7ff fb0e 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001610:	202b      	movs	r0, #43	; 0x2b
 8001612:	f001 fd71 	bl	80030f8 <putchar>

	gotoxy(5,27);
 8001616:	211b      	movs	r1, #27
 8001618:	2005      	movs	r0, #5
 800161a:	f7ff fb07 	bl	8000c2c <gotoxy>
	printf("*");
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f001 fd6a 	bl	80030f8 <putchar>
	gotoxy(6,5);
 8001624:	2105      	movs	r1, #5
 8001626:	2006      	movs	r0, #6
 8001628:	f7ff fb00 	bl	8000c2c <gotoxy>
	printf("*");
 800162c:	202a      	movs	r0, #42	; 0x2a
 800162e:	f001 fd63 	bl	80030f8 <putchar>
	gotoxy(13,13);
 8001632:	210d      	movs	r1, #13
 8001634:	200d      	movs	r0, #13
 8001636:	f7ff faf9 	bl	8000c2c <gotoxy>
	printf("*");
 800163a:	202a      	movs	r0, #42	; 0x2a
 800163c:	f001 fd5c 	bl	80030f8 <putchar>
	gotoxy(60,7);
 8001640:	2107      	movs	r1, #7
 8001642:	203c      	movs	r0, #60	; 0x3c
 8001644:	f7ff faf2 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001648:	202b      	movs	r0, #43	; 0x2b
 800164a:	f001 fd55 	bl	80030f8 <putchar>

	gotoxy(140,3);
 800164e:	2103      	movs	r1, #3
 8001650:	208c      	movs	r0, #140	; 0x8c
 8001652:	f7ff faeb 	bl	8000c2c <gotoxy>
	printf("*");
 8001656:	202a      	movs	r0, #42	; 0x2a
 8001658:	f001 fd4e 	bl	80030f8 <putchar>
	gotoxy(120,5);
 800165c:	2105      	movs	r1, #5
 800165e:	2078      	movs	r0, #120	; 0x78
 8001660:	f7ff fae4 	bl	8000c2c <gotoxy>
	printf("*");
 8001664:	202a      	movs	r0, #42	; 0x2a
 8001666:	f001 fd47 	bl	80030f8 <putchar>
	gotoxy(110,7);
 800166a:	2107      	movs	r1, #7
 800166c:	206e      	movs	r0, #110	; 0x6e
 800166e:	f7ff fadd 	bl	8000c2c <gotoxy>
	printf("*");
 8001672:	202a      	movs	r0, #42	; 0x2a
 8001674:	f001 fd40 	bl	80030f8 <putchar>
	gotoxy(70,30);
 8001678:	211e      	movs	r1, #30
 800167a:	2046      	movs	r0, #70	; 0x46
 800167c:	f7ff fad6 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001680:	202b      	movs	r0, #43	; 0x2b
 8001682:	f001 fd39 	bl	80030f8 <putchar>

	gotoxy(135,33);
 8001686:	2121      	movs	r1, #33	; 0x21
 8001688:	2087      	movs	r0, #135	; 0x87
 800168a:	f7ff facf 	bl	8000c2c <gotoxy>
	printf("*");
 800168e:	202a      	movs	r0, #42	; 0x2a
 8001690:	f001 fd32 	bl	80030f8 <putchar>
	gotoxy(123,36);
 8001694:	2124      	movs	r1, #36	; 0x24
 8001696:	207b      	movs	r0, #123	; 0x7b
 8001698:	f7ff fac8 	bl	8000c2c <gotoxy>
	printf("*");
 800169c:	202a      	movs	r0, #42	; 0x2a
 800169e:	f001 fd2b 	bl	80030f8 <putchar>
	gotoxy(138,40);
 80016a2:	2128      	movs	r1, #40	; 0x28
 80016a4:	208a      	movs	r0, #138	; 0x8a
 80016a6:	f7ff fac1 	bl	8000c2c <gotoxy>
	printf("*");
 80016aa:	202a      	movs	r0, #42	; 0x2a
 80016ac:	f001 fd24 	bl	80030f8 <putchar>
	gotoxy(127,25);
 80016b0:	2119      	movs	r1, #25
 80016b2:	207f      	movs	r0, #127	; 0x7f
 80016b4:	f7ff faba 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80016b8:	202b      	movs	r0, #43	; 0x2b
 80016ba:	f001 fd1d 	bl	80030f8 <putchar>

	gotoxy(105,32);
 80016be:	2120      	movs	r1, #32
 80016c0:	2069      	movs	r0, #105	; 0x69
 80016c2:	f7ff fab3 	bl	8000c2c <gotoxy>
	printf("%c",42);
 80016c6:	202a      	movs	r0, #42	; 0x2a
 80016c8:	f001 fd16 	bl	80030f8 <putchar>
	gotoxy(106,33);
 80016cc:	2121      	movs	r1, #33	; 0x21
 80016ce:	206a      	movs	r0, #106	; 0x6a
 80016d0:	f7ff faac 	bl	8000c2c <gotoxy>
	printf("%c",92);
 80016d4:	205c      	movs	r0, #92	; 0x5c
 80016d6:	f001 fd0f 	bl	80030f8 <putchar>
	gotoxy(107,34);
 80016da:	2122      	movs	r1, #34	; 0x22
 80016dc:	206b      	movs	r0, #107	; 0x6b
 80016de:	f7ff faa5 	bl	8000c2c <gotoxy>
	printf("%c",92);
 80016e2:	205c      	movs	r0, #92	; 0x5c
 80016e4:	f001 fd08 	bl	80030f8 <putchar>

	gotoxy(23,15);
 80016e8:	210f      	movs	r1, #15
 80016ea:	2017      	movs	r0, #23
 80016ec:	f7ff fa9e 	bl	8000c2c <gotoxy>
	printf("*");
 80016f0:	202a      	movs	r0, #42	; 0x2a
 80016f2:	f001 fd01 	bl	80030f8 <putchar>
	gotoxy(37,21);
 80016f6:	2115      	movs	r1, #21
 80016f8:	2025      	movs	r0, #37	; 0x25
 80016fa:	f7ff fa97 	bl	8000c2c <gotoxy>
	printf("*");
 80016fe:	202a      	movs	r0, #42	; 0x2a
 8001700:	f001 fcfa 	bl	80030f8 <putchar>
	gotoxy(26,24);
 8001704:	2118      	movs	r1, #24
 8001706:	201a      	movs	r0, #26
 8001708:	f7ff fa90 	bl	8000c2c <gotoxy>
	printf("*");
 800170c:	202a      	movs	r0, #42	; 0x2a
 800170e:	f001 fcf3 	bl	80030f8 <putchar>
	gotoxy(30,29);
 8001712:	211d      	movs	r1, #29
 8001714:	201e      	movs	r0, #30
 8001716:	f7ff fa89 	bl	8000c2c <gotoxy>
	printf("%c",43);
 800171a:	202b      	movs	r0, #43	; 0x2b
 800171c:	f001 fcec 	bl	80030f8 <putchar>

	gotoxy(25,6);
 8001720:	2106      	movs	r1, #6
 8001722:	2019      	movs	r0, #25
 8001724:	f7ff fa82 	bl	8000c2c <gotoxy>
	printf("*");
 8001728:	202a      	movs	r0, #42	; 0x2a
 800172a:	f001 fce5 	bl	80030f8 <putchar>
	gotoxy(39,7);
 800172e:	2107      	movs	r1, #7
 8001730:	2027      	movs	r0, #39	; 0x27
 8001732:	f7ff fa7b 	bl	8000c2c <gotoxy>
	printf("*");
 8001736:	202a      	movs	r0, #42	; 0x2a
 8001738:	f001 fcde 	bl	80030f8 <putchar>
	gotoxy(41,3);
 800173c:	2103      	movs	r1, #3
 800173e:	2029      	movs	r0, #41	; 0x29
 8001740:	f7ff fa74 	bl	8000c2c <gotoxy>
	printf("*");
 8001744:	202a      	movs	r0, #42	; 0x2a
 8001746:	f001 fcd7 	bl	80030f8 <putchar>
	gotoxy(75,10);
 800174a:	210a      	movs	r1, #10
 800174c:	204b      	movs	r0, #75	; 0x4b
 800174e:	f7ff fa6d 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001752:	202b      	movs	r0, #43	; 0x2b
 8001754:	f001 fcd0 	bl	80030f8 <putchar>

	gotoxy(100,20);
 8001758:	2114      	movs	r1, #20
 800175a:	2064      	movs	r0, #100	; 0x64
 800175c:	f7ff fa66 	bl	8000c2c <gotoxy>
	printf("%c",197);
 8001760:	20c5      	movs	r0, #197	; 0xc5
 8001762:	f001 fcc9 	bl	80030f8 <putchar>
	gotoxy(135,12);
 8001766:	210c      	movs	r1, #12
 8001768:	2087      	movs	r0, #135	; 0x87
 800176a:	f7ff fa5f 	bl	8000c2c <gotoxy>
	printf("%c",197);
 800176e:	20c5      	movs	r0, #197	; 0xc5
 8001770:	f001 fcc2 	bl	80030f8 <putchar>
	gotoxy(30,5);
 8001774:	2105      	movs	r1, #5
 8001776:	201e      	movs	r0, #30
 8001778:	f7ff fa58 	bl	8000c2c <gotoxy>
	printf("%c",197);
 800177c:	20c5      	movs	r0, #197	; 0xc5
 800177e:	f001 fcbb 	bl	80030f8 <putchar>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	460a      	mov	r2, r1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	4613      	mov	r3, r2
 8001794:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	3303      	adds	r3, #3
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fa43 	bl	8000c2c <gotoxy>
	printf("_");
 80017a6:	205f      	movs	r0, #95	; 0x5f
 80017a8:	f001 fca6 	bl	80030f8 <putchar>
	gotoxy(X,Y+3);
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	3303      	adds	r3, #3
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f7ff fa39 	bl	8000c2c <gotoxy>
	printf("_");
 80017ba:	205f      	movs	r0, #95	; 0x5f
 80017bc:	f001 fc9c 	bl	80030f8 <putchar>
	gotoxy(X+1,Y+3);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	3303      	adds	r3, #3
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fa2e 	bl	8000c2c <gotoxy>
	printf("_");
 80017d0:	205f      	movs	r0, #95	; 0x5f
 80017d2:	f001 fc91 	bl	80030f8 <putchar>
	gotoxy(X-2,Y+3);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	1e9a      	subs	r2, r3, #2
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	3303      	adds	r3, #3
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f7ff fa23 	bl	8000c2c <gotoxy>
	printf("(");
 80017e6:	2028      	movs	r0, #40	; 0x28
 80017e8:	f001 fc86 	bl	80030f8 <putchar>
	gotoxy(X+2,Y+3);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	1c9a      	adds	r2, r3, #2
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	3303      	adds	r3, #3
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff fa18 	bl	8000c2c <gotoxy>
	printf(")");
 80017fc:	2029      	movs	r0, #41	; 0x29
 80017fe:	f001 fc7b 	bl	80030f8 <putchar>

	gotoxy(X+3,Y+2);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	1cda      	adds	r2, r3, #3
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	3302      	adds	r3, #2
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7ff fa0d 	bl	8000c2c <gotoxy>
	printf("_");
 8001812:	205f      	movs	r0, #95	; 0x5f
 8001814:	f001 fc70 	bl	80030f8 <putchar>
	gotoxy(X-3,Y+2);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	1eda      	subs	r2, r3, #3
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	3302      	adds	r3, #2
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f7ff fa02 	bl	8000c2c <gotoxy>
	printf("_");
 8001828:	205f      	movs	r0, #95	; 0x5f
 800182a:	f001 fc65 	bl	80030f8 <putchar>
	gotoxy(X+4,Y+2);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	1d1a      	adds	r2, r3, #4
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	3302      	adds	r3, #2
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7ff f9f7 	bl	8000c2c <gotoxy>
	printf("(");
 800183e:	2028      	movs	r0, #40	; 0x28
 8001840:	f001 fc5a 	bl	80030f8 <putchar>
	gotoxy(X-4,Y+2);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	1f1a      	subs	r2, r3, #4
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	3302      	adds	r3, #2
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff f9ec 	bl	8000c2c <gotoxy>
	printf(")");
 8001854:	2029      	movs	r0, #41	; 0x29
 8001856:	f001 fc4f 	bl	80030f8 <putchar>

	gotoxy(X-5,Y+1);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	1f5a      	subs	r2, r3, #5
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	3301      	adds	r3, #1
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f7ff f9e1 	bl	8000c2c <gotoxy>
	printf("(");
 800186a:	2028      	movs	r0, #40	; 0x28
 800186c:	f001 fc44 	bl	80030f8 <putchar>
	gotoxy(X+5,Y+1);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	1d5a      	adds	r2, r3, #5
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	3301      	adds	r3, #1
 8001878:	4619      	mov	r1, r3
 800187a:	4610      	mov	r0, r2
 800187c:	f7ff f9d6 	bl	8000c2c <gotoxy>
	printf("(");
 8001880:	2028      	movs	r0, #40	; 0x28
 8001882:	f001 fc39 	bl	80030f8 <putchar>
	gotoxy(X-6,Y);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3b06      	subs	r3, #6
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f9cc 	bl	8000c2c <gotoxy>
	printf("(");
 8001894:	2028      	movs	r0, #40	; 0x28
 8001896:	f001 fc2f 	bl	80030f8 <putchar>
	gotoxy(X+6,Y);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	3306      	adds	r3, #6
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f9c2 	bl	8000c2c <gotoxy>
	printf(")");
 80018a8:	2029      	movs	r0, #41	; 0x29
 80018aa:	f001 fc25 	bl	80030f8 <putchar>

	gotoxy(X-5,Y-1);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	1f5a      	subs	r2, r3, #5
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f7ff f9b7 	bl	8000c2c <gotoxy>
	printf("(");
 80018be:	2028      	movs	r0, #40	; 0x28
 80018c0:	f001 fc1a 	bl	80030f8 <putchar>
	gotoxy(X+5,Y-1);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	1d5a      	adds	r2, r3, #5
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f7ff f9ac 	bl	8000c2c <gotoxy>
	printf(")");
 80018d4:	2029      	movs	r0, #41	; 0x29
 80018d6:	f001 fc0f 	bl	80030f8 <putchar>
	gotoxy(X-4,Y-2);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	1f1a      	subs	r2, r3, #4
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	3b02      	subs	r3, #2
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff f9a1 	bl	8000c2c <gotoxy>
	printf("(");
 80018ea:	2028      	movs	r0, #40	; 0x28
 80018ec:	f001 fc04 	bl	80030f8 <putchar>
	gotoxy(X+4,Y-2);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	3b02      	subs	r3, #2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff f996 	bl	8000c2c <gotoxy>
	printf(")");
 8001900:	2029      	movs	r0, #41	; 0x29
 8001902:	f001 fbf9 	bl	80030f8 <putchar>

	gotoxy(X-3,Y-3);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	1eda      	subs	r2, r3, #3
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	3b03      	subs	r3, #3
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f7ff f98b 	bl	8000c2c <gotoxy>
	printf("_");
 8001916:	205f      	movs	r0, #95	; 0x5f
 8001918:	f001 fbee 	bl	80030f8 <putchar>
	gotoxy(X+3,Y-3);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	1cda      	adds	r2, r3, #3
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	3b03      	subs	r3, #3
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f7ff f980 	bl	8000c2c <gotoxy>
	printf("_");
 800192c:	205f      	movs	r0, #95	; 0x5f
 800192e:	f001 fbe3 	bl	80030f8 <putchar>
	gotoxy(X-2,Y-3);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	1e9a      	subs	r2, r3, #2
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	3b03      	subs	r3, #3
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff f975 	bl	8000c2c <gotoxy>
	printf("(");
 8001942:	2028      	movs	r0, #40	; 0x28
 8001944:	f001 fbd8 	bl	80030f8 <putchar>
	gotoxy(X+2,Y-3);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	1c9a      	adds	r2, r3, #2
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	3b03      	subs	r3, #3
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f7ff f96a 	bl	8000c2c <gotoxy>
	printf(")");
 8001958:	2029      	movs	r0, #41	; 0x29
 800195a:	f001 fbcd 	bl	80030f8 <putchar>

	gotoxy(X-1,Y-4);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	3b04      	subs	r3, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f7ff f95f 	bl	8000c2c <gotoxy>
	printf("_");
 800196e:	205f      	movs	r0, #95	; 0x5f
 8001970:	f001 fbc2 	bl	80030f8 <putchar>
	gotoxy(X,Y-4);
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	3b04      	subs	r3, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff f955 	bl	8000c2c <gotoxy>
	printf("_");
 8001982:	205f      	movs	r0, #95	; 0x5f
 8001984:	f001 fbb8 	bl	80030f8 <putchar>
	gotoxy(X+1,Y-4);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	3b04      	subs	r3, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f7ff f94a 	bl	8000c2c <gotoxy>
	printf("_");
 8001998:	205f      	movs	r0, #95	; 0x5f
 800199a:	f001 fbad 	bl	80030f8 <putchar>

	gotoxy(X-2,Y);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3b02      	subs	r3, #2
 80019a2:	79ba      	ldrb	r2, [r7, #6]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f940 	bl	8000c2c <gotoxy>
	printf("O");
 80019ac:	204f      	movs	r0, #79	; 0x4f
 80019ae:	f001 fba3 	bl	80030f8 <putchar>
	gotoxy(X+1,Y+2);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	3302      	adds	r3, #2
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7ff f935 	bl	8000c2c <gotoxy>
	printf("o");
 80019c2:	206f      	movs	r0, #111	; 0x6f
 80019c4:	f001 fb98 	bl	80030f8 <putchar>
	gotoxy(X+3,Y-1);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	1cda      	adds	r2, r3, #3
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f7ff f92a 	bl	8000c2c <gotoxy>
	printf("O");
 80019d8:	204f      	movs	r0, #79	; 0x4f
 80019da:	f001 fb8d 	bl	80030f8 <putchar>

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <drawhearth>:


void drawhearth(gameState_t* gameState){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 80019f0:	2101      	movs	r1, #1
 80019f2:	200f      	movs	r0, #15
 80019f4:	f7ff f91a 	bl	8000c2c <gotoxy>
	printf("           ");
 80019f8:	483b      	ldr	r0, [pc, #236]	; (8001ae8 <drawhearth+0x100>)
 80019fa:	f001 fb65 	bl	80030c8 <iprintf>
	gotoxy(15,2);
 80019fe:	2102      	movs	r1, #2
 8001a00:	200f      	movs	r0, #15
 8001a02:	f7ff f913 	bl	8000c2c <gotoxy>
	printf("           ");
 8001a06:	4838      	ldr	r0, [pc, #224]	; (8001ae8 <drawhearth+0x100>)
 8001a08:	f001 fb5e 	bl	80030c8 <iprintf>
	fgcolor(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff f8e1 	bl	8000bd4 <fgcolor>

	if(gameState->cityLives >= 1){
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <drawhearth+0x6c>
		gotoxy(15,1);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f7ff f904 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001a24:	20db      	movs	r0, #219	; 0xdb
 8001a26:	f001 fb67 	bl	80030f8 <putchar>
		gotoxy(17,1);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	f7ff f8fd 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001a32:	20db      	movs	r0, #219	; 0xdb
 8001a34:	f001 fb60 	bl	80030f8 <putchar>
		gotoxy(16,2);
 8001a38:	2102      	movs	r1, #2
 8001a3a:	2010      	movs	r0, #16
 8001a3c:	f7ff f8f6 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001a40:	20df      	movs	r0, #223	; 0xdf
 8001a42:	f001 fb59 	bl	80030f8 <putchar>
		gotoxy(16,1);
 8001a46:	2101      	movs	r1, #1
 8001a48:	2010      	movs	r0, #16
 8001a4a:	f7ff f8ef 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001a4e:	20dc      	movs	r0, #220	; 0xdc
 8001a50:	f001 fb52 	bl	80030f8 <putchar>
	}
	if(gameState->cityLives >= 2){
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d91b      	bls.n	8001a96 <drawhearth+0xae>
		gotoxy(19,1);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2013      	movs	r0, #19
 8001a62:	f7ff f8e3 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001a66:	20db      	movs	r0, #219	; 0xdb
 8001a68:	f001 fb46 	bl	80030f8 <putchar>
		gotoxy(21,1);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2015      	movs	r0, #21
 8001a70:	f7ff f8dc 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001a74:	20db      	movs	r0, #219	; 0xdb
 8001a76:	f001 fb3f 	bl	80030f8 <putchar>
		gotoxy(20,2);
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	2014      	movs	r0, #20
 8001a7e:	f7ff f8d5 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001a82:	20df      	movs	r0, #223	; 0xdf
 8001a84:	f001 fb38 	bl	80030f8 <putchar>
		gotoxy(20,1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2014      	movs	r0, #20
 8001a8c:	f7ff f8ce 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001a90:	20dc      	movs	r0, #220	; 0xdc
 8001a92:	f001 fb31 	bl	80030f8 <putchar>

	}
	if(gameState->cityLives >= 3){
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d91b      	bls.n	8001ad8 <drawhearth+0xf0>
		gotoxy(23,1);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	2017      	movs	r0, #23
 8001aa4:	f7ff f8c2 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001aa8:	20db      	movs	r0, #219	; 0xdb
 8001aaa:	f001 fb25 	bl	80030f8 <putchar>
		gotoxy(25,1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2019      	movs	r0, #25
 8001ab2:	f7ff f8bb 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001ab6:	20db      	movs	r0, #219	; 0xdb
 8001ab8:	f001 fb1e 	bl	80030f8 <putchar>
		gotoxy(24,2);
 8001abc:	2102      	movs	r1, #2
 8001abe:	2018      	movs	r0, #24
 8001ac0:	f7ff f8b4 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001ac4:	20df      	movs	r0, #223	; 0xdf
 8001ac6:	f001 fb17 	bl	80030f8 <putchar>
		gotoxy(24,1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	2018      	movs	r0, #24
 8001ace:	f7ff f8ad 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001ad2:	20dc      	movs	r0, #220	; 0xdc
 8001ad4:	f001 fb10 	bl	80030f8 <putchar>
	}
	fgcolor(15);
 8001ad8:	200f      	movs	r0, #15
 8001ada:	f7ff f87b 	bl	8000bd4 <fgcolor>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800432c 	.word	0x0800432c

08001aec <drawEnemy>:
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	int isLastElement = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

	while(1){
		if(thisNode->enemy->position->x != 0){
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d03d      	beq.n	8001b86 <drawEnemy+0x9a>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fd24 	bl	8001560 <fpToInt>
 8001b18:	4604      	mov	r4, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fd1c 	bl	8001560 <fpToInt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff f87d 	bl	8000c2c <gotoxy>
			//printf("%d %d", fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
			printf("  ");
 8001b32:	481b      	ldr	r0, [pc, #108]	; (8001ba0 <drawEnemy+0xb4>)
 8001b34:	f001 fac8 	bl	80030c8 <iprintf>
			gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd0d 	bl	8001560 <fpToInt>
 8001b46:	4604      	mov	r4, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fd05 	bl	8001560 <fpToInt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff f866 	bl	8000c2c <gotoxy>
			printf(":E");
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <drawEnemy+0xb8>)
 8001b62:	f001 fab1 	bl	80030c8 <iprintf>
			thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	601a      	str	r2, [r3, #0]
			thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6852      	ldr	r2, [r2, #4]
 8001b84:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <drawEnemy+0xaa>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 8001b94:	e7b3      	b.n	8001afe <drawEnemy+0x12>
			break;
 8001b96:	bf00      	nop
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	08004338 	.word	0x08004338
 8001ba4:	0800433c 	.word	0x0800433c

08001ba8 <drawCity>:
//47 92


}

void drawCity(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

	gotoxy(14,44);
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	200e      	movs	r0, #14
 8001bb0:	f7ff f83c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001bb4:	20db      	movs	r0, #219	; 0xdb
 8001bb6:	f001 fa9f 	bl	80030f8 <putchar>

	gotoxy(16,44);
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	2010      	movs	r0, #16
 8001bbe:	f7ff f835 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001bc2:	20db      	movs	r0, #219	; 0xdb
 8001bc4:	f001 fa98 	bl	80030f8 <putchar>

	gotoxy(17,44);
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	2011      	movs	r0, #17
 8001bcc:	f7ff f82e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001bd0:	20db      	movs	r0, #219	; 0xdb
 8001bd2:	f001 fa91 	bl	80030f8 <putchar>
	gotoxy(17,43);
 8001bd6:	212b      	movs	r1, #43	; 0x2b
 8001bd8:	2011      	movs	r0, #17
 8001bda:	f7ff f827 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001bde:	20db      	movs	r0, #219	; 0xdb
 8001be0:	f001 fa8a 	bl	80030f8 <putchar>

	gotoxy(19,44);
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	2013      	movs	r0, #19
 8001be8:	f7ff f820 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001bec:	20dc      	movs	r0, #220	; 0xdc
 8001bee:	f001 fa83 	bl	80030f8 <putchar>

	gotoxy(21,44);
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	2015      	movs	r0, #21
 8001bf6:	f7ff f819 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001bfa:	20db      	movs	r0, #219	; 0xdb
 8001bfc:	f001 fa7c 	bl	80030f8 <putchar>

	gotoxy(23,44);
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	2017      	movs	r0, #23
 8001c04:	f7ff f812 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c08:	20db      	movs	r0, #219	; 0xdb
 8001c0a:	f001 fa75 	bl	80030f8 <putchar>
	gotoxy(23,43);
 8001c0e:	212b      	movs	r1, #43	; 0x2b
 8001c10:	2017      	movs	r0, #23
 8001c12:	f7ff f80b 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001c16:	20dc      	movs	r0, #220	; 0xdc
 8001c18:	f001 fa6e 	bl	80030f8 <putchar>

	gotoxy(25,44);
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	2019      	movs	r0, #25
 8001c20:	f7ff f804 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c24:	20db      	movs	r0, #219	; 0xdb
 8001c26:	f001 fa67 	bl	80030f8 <putchar>
	gotoxy(25,43);
 8001c2a:	212b      	movs	r1, #43	; 0x2b
 8001c2c:	2019      	movs	r0, #25
 8001c2e:	f7fe fffd 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c32:	20db      	movs	r0, #219	; 0xdb
 8001c34:	f001 fa60 	bl	80030f8 <putchar>
	gotoxy(25,42);
 8001c38:	212a      	movs	r1, #42	; 0x2a
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f7fe fff6 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c40:	20db      	movs	r0, #219	; 0xdb
 8001c42:	f001 fa59 	bl	80030f8 <putchar>

	gotoxy(27,44);
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	201b      	movs	r0, #27
 8001c4a:	f7fe ffef 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c4e:	20db      	movs	r0, #219	; 0xdb
 8001c50:	f001 fa52 	bl	80030f8 <putchar>
	gotoxy(27,43);
 8001c54:	212b      	movs	r1, #43	; 0x2b
 8001c56:	201b      	movs	r0, #27
 8001c58:	f7fe ffe8 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001c5c:	20dc      	movs	r0, #220	; 0xdc
 8001c5e:	f001 fa4b 	bl	80030f8 <putchar>

	gotoxy(28,44);
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	201c      	movs	r0, #28
 8001c66:	f7fe ffe1 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c6a:	20db      	movs	r0, #219	; 0xdb
 8001c6c:	f001 fa44 	bl	80030f8 <putchar>

	gotoxy(36,44);
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	2024      	movs	r0, #36	; 0x24
 8001c74:	f7fe ffda 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c78:	20db      	movs	r0, #219	; 0xdb
 8001c7a:	f001 fa3d 	bl	80030f8 <putchar>
	gotoxy(36,43);
 8001c7e:	212b      	movs	r1, #43	; 0x2b
 8001c80:	2024      	movs	r0, #36	; 0x24
 8001c82:	f7fe ffd3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c86:	20db      	movs	r0, #219	; 0xdb
 8001c88:	f001 fa36 	bl	80030f8 <putchar>

	gotoxy(37,44);
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	2025      	movs	r0, #37	; 0x25
 8001c90:	f7fe ffcc 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c94:	20db      	movs	r0, #219	; 0xdb
 8001c96:	f001 fa2f 	bl	80030f8 <putchar>

	gotoxy(38,44);
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	2026      	movs	r0, #38	; 0x26
 8001c9e:	f7fe ffc5 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001ca2:	20dc      	movs	r0, #220	; 0xdc
 8001ca4:	f001 fa28 	bl	80030f8 <putchar>

	gotoxy(40,44);
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	2028      	movs	r0, #40	; 0x28
 8001cac:	f7fe ffbe 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001cb0:	20db      	movs	r0, #219	; 0xdb
 8001cb2:	f001 fa21 	bl	80030f8 <putchar>
	gotoxy(40,43);
 8001cb6:	212b      	movs	r1, #43	; 0x2b
 8001cb8:	2028      	movs	r0, #40	; 0x28
 8001cba:	f7fe ffb7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001cbe:	20db      	movs	r0, #219	; 0xdb
 8001cc0:	f001 fa1a 	bl	80030f8 <putchar>

	gotoxy(41,43);
 8001cc4:	212b      	movs	r1, #43	; 0x2b
 8001cc6:	2029      	movs	r0, #41	; 0x29
 8001cc8:	f7fe ffb0 	bl	8000c2c <gotoxy>
	printf("%c",205);
 8001ccc:	20cd      	movs	r0, #205	; 0xcd
 8001cce:	f001 fa13 	bl	80030f8 <putchar>

	gotoxy(42,44);
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	202a      	movs	r0, #42	; 0x2a
 8001cd6:	f7fe ffa9 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001cda:	20db      	movs	r0, #219	; 0xdb
 8001cdc:	f001 fa0c 	bl	80030f8 <putchar>
	gotoxy(42,43);
 8001ce0:	212b      	movs	r1, #43	; 0x2b
 8001ce2:	202a      	movs	r0, #42	; 0x2a
 8001ce4:	f7fe ffa2 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ce8:	20db      	movs	r0, #219	; 0xdb
 8001cea:	f001 fa05 	bl	80030f8 <putchar>

	gotoxy(45,44);
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	202d      	movs	r0, #45	; 0x2d
 8001cf2:	f7fe ff9b 	bl	8000c2c <gotoxy>
	printf("%c",186);
 8001cf6:	20ba      	movs	r0, #186	; 0xba
 8001cf8:	f001 f9fe 	bl	80030f8 <putchar>

	gotoxy(47,44);
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	202f      	movs	r0, #47	; 0x2f
 8001d00:	f7fe ff94 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d04:	20dc      	movs	r0, #220	; 0xdc
 8001d06:	f001 f9f7 	bl	80030f8 <putchar>

	gotoxy(55,44);
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	2037      	movs	r0, #55	; 0x37
 8001d0e:	f7fe ff8d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d12:	20db      	movs	r0, #219	; 0xdb
 8001d14:	f001 f9f0 	bl	80030f8 <putchar>
	gotoxy(55,43);
 8001d18:	212b      	movs	r1, #43	; 0x2b
 8001d1a:	2037      	movs	r0, #55	; 0x37
 8001d1c:	f7fe ff86 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d20:	20dc      	movs	r0, #220	; 0xdc
 8001d22:	f001 f9e9 	bl	80030f8 <putchar>

	gotoxy(58,44);
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	203a      	movs	r0, #58	; 0x3a
 8001d2a:	f7fe ff7f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d2e:	20db      	movs	r0, #219	; 0xdb
 8001d30:	f001 f9e2 	bl	80030f8 <putchar>
	gotoxy(58,43);
 8001d34:	212b      	movs	r1, #43	; 0x2b
 8001d36:	203a      	movs	r0, #58	; 0x3a
 8001d38:	f7fe ff78 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d3c:	20db      	movs	r0, #219	; 0xdb
 8001d3e:	f001 f9db 	bl	80030f8 <putchar>
	gotoxy(58,42);
 8001d42:	212a      	movs	r1, #42	; 0x2a
 8001d44:	203a      	movs	r0, #58	; 0x3a
 8001d46:	f7fe ff71 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d4a:	20dc      	movs	r0, #220	; 0xdc
 8001d4c:	f001 f9d4 	bl	80030f8 <putchar>

	gotoxy(59,44);
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	203b      	movs	r0, #59	; 0x3b
 8001d54:	f7fe ff6a 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d58:	20db      	movs	r0, #219	; 0xdb
 8001d5a:	f001 f9cd 	bl	80030f8 <putchar>
	gotoxy(59,43);
 8001d5e:	212b      	movs	r1, #43	; 0x2b
 8001d60:	203b      	movs	r0, #59	; 0x3b
 8001d62:	f7fe ff63 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d66:	20dc      	movs	r0, #220	; 0xdc
 8001d68:	f001 f9c6 	bl	80030f8 <putchar>

	gotoxy(60,44);
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	203c      	movs	r0, #60	; 0x3c
 8001d70:	f7fe ff5c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d74:	20db      	movs	r0, #219	; 0xdb
 8001d76:	f001 f9bf 	bl	80030f8 <putchar>

	gotoxy(61,44);
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	203d      	movs	r0, #61	; 0x3d
 8001d7e:	f7fe ff55 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d82:	20db      	movs	r0, #219	; 0xdb
 8001d84:	f001 f9b8 	bl	80030f8 <putchar>
	gotoxy(61,43);
 8001d88:	212b      	movs	r1, #43	; 0x2b
 8001d8a:	203d      	movs	r0, #61	; 0x3d
 8001d8c:	f7fe ff4e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d90:	20db      	movs	r0, #219	; 0xdb
 8001d92:	f001 f9b1 	bl	80030f8 <putchar>

	gotoxy(63,44);
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	203f      	movs	r0, #63	; 0x3f
 8001d9a:	f7fe ff47 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d9e:	20db      	movs	r0, #219	; 0xdb
 8001da0:	f001 f9aa 	bl	80030f8 <putchar>

	gotoxy(64,44);
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	2040      	movs	r0, #64	; 0x40
 8001da8:	f7fe ff40 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001dac:	20dc      	movs	r0, #220	; 0xdc
 8001dae:	f001 f9a3 	bl	80030f8 <putchar>

	gotoxy(65,44);
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	2041      	movs	r0, #65	; 0x41
 8001db6:	f7fe ff39 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001dba:	20db      	movs	r0, #219	; 0xdb
 8001dbc:	f001 f99c 	bl	80030f8 <putchar>

	gotoxy(67,44);
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	2043      	movs	r0, #67	; 0x43
 8001dc4:	f7fe ff32 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001dc8:	20db      	movs	r0, #219	; 0xdb
 8001dca:	f001 f995 	bl	80030f8 <putchar>
	gotoxy(67,43);
 8001dce:	212b      	movs	r1, #43	; 0x2b
 8001dd0:	2043      	movs	r0, #67	; 0x43
 8001dd2:	f7fe ff2b 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001dd6:	20db      	movs	r0, #219	; 0xdb
 8001dd8:	f001 f98e 	bl	80030f8 <putchar>
	gotoxy(67,42);
 8001ddc:	212a      	movs	r1, #42	; 0x2a
 8001dde:	2043      	movs	r0, #67	; 0x43
 8001de0:	f7fe ff24 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001de4:	20db      	movs	r0, #219	; 0xdb
 8001de6:	f001 f987 	bl	80030f8 <putchar>

	gotoxy(69,44);
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	2045      	movs	r0, #69	; 0x45
 8001dee:	f7fe ff1d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001df2:	20db      	movs	r0, #219	; 0xdb
 8001df4:	f001 f980 	bl	80030f8 <putchar>
	gotoxy(69,43);
 8001df8:	212b      	movs	r1, #43	; 0x2b
 8001dfa:	2045      	movs	r0, #69	; 0x45
 8001dfc:	f7fe ff16 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e00:	20db      	movs	r0, #219	; 0xdb
 8001e02:	f001 f979 	bl	80030f8 <putchar>
	gotoxy(69,42);
 8001e06:	212a      	movs	r1, #42	; 0x2a
 8001e08:	2045      	movs	r0, #69	; 0x45
 8001e0a:	f7fe ff0f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e0e:	20db      	movs	r0, #219	; 0xdb
 8001e10:	f001 f972 	bl	80030f8 <putchar>

	gotoxy(71,44);
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	2047      	movs	r0, #71	; 0x47
 8001e18:	f7fe ff08 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e1c:	20db      	movs	r0, #219	; 0xdb
 8001e1e:	f001 f96b 	bl	80030f8 <putchar>
	gotoxy(71,43);
 8001e22:	212b      	movs	r1, #43	; 0x2b
 8001e24:	2047      	movs	r0, #71	; 0x47
 8001e26:	f7fe ff01 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e2a:	20db      	movs	r0, #219	; 0xdb
 8001e2c:	f001 f964 	bl	80030f8 <putchar>
	gotoxy(71,42);
 8001e30:	212a      	movs	r1, #42	; 0x2a
 8001e32:	2047      	movs	r0, #71	; 0x47
 8001e34:	f7fe fefa 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e38:	20db      	movs	r0, #219	; 0xdb
 8001e3a:	f001 f95d 	bl	80030f8 <putchar>

	gotoxy(73,44);
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	2049      	movs	r0, #73	; 0x49
 8001e42:	f7fe fef3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e46:	20db      	movs	r0, #219	; 0xdb
 8001e48:	f001 f956 	bl	80030f8 <putchar>
	gotoxy(73,43);
 8001e4c:	212b      	movs	r1, #43	; 0x2b
 8001e4e:	2049      	movs	r0, #73	; 0x49
 8001e50:	f7fe feec 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e54:	20db      	movs	r0, #219	; 0xdb
 8001e56:	f001 f94f 	bl	80030f8 <putchar>

	gotoxy(74,44);
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	204a      	movs	r0, #74	; 0x4a
 8001e5e:	f7fe fee5 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e62:	20db      	movs	r0, #219	; 0xdb
 8001e64:	f001 f948 	bl	80030f8 <putchar>

	gotoxy(76,44);
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	204c      	movs	r0, #76	; 0x4c
 8001e6c:	f7fe fede 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e70:	20db      	movs	r0, #219	; 0xdb
 8001e72:	f001 f941 	bl	80030f8 <putchar>

	gotoxy(77,44);
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	204d      	movs	r0, #77	; 0x4d
 8001e7a:	f7fe fed7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e7e:	20db      	movs	r0, #219	; 0xdb
 8001e80:	f001 f93a 	bl	80030f8 <putchar>
	gotoxy(77,43);
 8001e84:	212b      	movs	r1, #43	; 0x2b
 8001e86:	204d      	movs	r0, #77	; 0x4d
 8001e88:	f7fe fed0 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e8c:	20db      	movs	r0, #219	; 0xdb
 8001e8e:	f001 f933 	bl	80030f8 <putchar>

	gotoxy(79,44);
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	204f      	movs	r0, #79	; 0x4f
 8001e96:	f7fe fec9 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e9a:	20db      	movs	r0, #219	; 0xdb
 8001e9c:	f001 f92c 	bl	80030f8 <putchar>
	gotoxy(79,44);
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	204f      	movs	r0, #79	; 0x4f
 8001ea4:	f7fe fec2 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001ea8:	20dc      	movs	r0, #220	; 0xdc
 8001eaa:	f001 f925 	bl	80030f8 <putchar>

	gotoxy(81,44);
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	2051      	movs	r0, #81	; 0x51
 8001eb2:	f7fe febb 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001eb6:	20db      	movs	r0, #219	; 0xdb
 8001eb8:	f001 f91e 	bl	80030f8 <putchar>
	gotoxy(81,43);
 8001ebc:	212b      	movs	r1, #43	; 0x2b
 8001ebe:	2051      	movs	r0, #81	; 0x51
 8001ec0:	f7fe feb4 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ec4:	20db      	movs	r0, #219	; 0xdb
 8001ec6:	f001 f917 	bl	80030f8 <putchar>

	gotoxy(82,44);
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	2052      	movs	r0, #82	; 0x52
 8001ece:	f7fe fead 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ed2:	20db      	movs	r0, #219	; 0xdb
 8001ed4:	f001 f910 	bl	80030f8 <putchar>

	gotoxy(85,44);
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	2055      	movs	r0, #85	; 0x55
 8001edc:	f7fe fea6 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ee0:	20db      	movs	r0, #219	; 0xdb
 8001ee2:	f001 f909 	bl	80030f8 <putchar>
	gotoxy(85,43);
 8001ee6:	212b      	movs	r1, #43	; 0x2b
 8001ee8:	2055      	movs	r0, #85	; 0x55
 8001eea:	f7fe fe9f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001eee:	20db      	movs	r0, #219	; 0xdb
 8001ef0:	f001 f902 	bl	80030f8 <putchar>
	gotoxy(85,42);
 8001ef4:	212a      	movs	r1, #42	; 0x2a
 8001ef6:	2055      	movs	r0, #85	; 0x55
 8001ef8:	f7fe fe98 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001efc:	20dc      	movs	r0, #220	; 0xdc
 8001efe:	f001 f8fb 	bl	80030f8 <putchar>

	gotoxy(86,44);
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	2056      	movs	r0, #86	; 0x56
 8001f06:	f7fe fe91 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f0a:	20db      	movs	r0, #219	; 0xdb
 8001f0c:	f001 f8f4 	bl	80030f8 <putchar>

	gotoxy(87,44);
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	2057      	movs	r0, #87	; 0x57
 8001f14:	f7fe fe8a 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f18:	20dc      	movs	r0, #220	; 0xdc
 8001f1a:	f001 f8ed 	bl	80030f8 <putchar>

	gotoxy(88,44);
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	2058      	movs	r0, #88	; 0x58
 8001f22:	f7fe fe83 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f26:	20db      	movs	r0, #219	; 0xdb
 8001f28:	f001 f8e6 	bl	80030f8 <putchar>
	gotoxy(88,43);
 8001f2c:	212b      	movs	r1, #43	; 0x2b
 8001f2e:	2058      	movs	r0, #88	; 0x58
 8001f30:	f7fe fe7c 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f34:	20dc      	movs	r0, #220	; 0xdc
 8001f36:	f001 f8df 	bl	80030f8 <putchar>

	gotoxy(93,44);
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	205d      	movs	r0, #93	; 0x5d
 8001f3e:	f7fe fe75 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f42:	20db      	movs	r0, #219	; 0xdb
 8001f44:	f001 f8d8 	bl	80030f8 <putchar>

	gotoxy(94,44);
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	205e      	movs	r0, #94	; 0x5e
 8001f4c:	f7fe fe6e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f50:	20db      	movs	r0, #219	; 0xdb
 8001f52:	f001 f8d1 	bl	80030f8 <putchar>
	gotoxy(94,43);
 8001f56:	212b      	movs	r1, #43	; 0x2b
 8001f58:	205e      	movs	r0, #94	; 0x5e
 8001f5a:	f7fe fe67 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f5e:	20dc      	movs	r0, #220	; 0xdc
 8001f60:	f001 f8ca 	bl	80030f8 <putchar>

	gotoxy(95,44);
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	205f      	movs	r0, #95	; 0x5f
 8001f68:	f7fe fe60 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f6c:	20dc      	movs	r0, #220	; 0xdc
 8001f6e:	f001 f8c3 	bl	80030f8 <putchar>

	gotoxy(96,44);
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	2060      	movs	r0, #96	; 0x60
 8001f76:	f7fe fe59 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f7a:	20db      	movs	r0, #219	; 0xdb
 8001f7c:	f001 f8bc 	bl	80030f8 <putchar>

	gotoxy(98,44);
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	2062      	movs	r0, #98	; 0x62
 8001f84:	f7fe fe52 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f88:	20db      	movs	r0, #219	; 0xdb
 8001f8a:	f001 f8b5 	bl	80030f8 <putchar>
	gotoxy(98,43);
 8001f8e:	212b      	movs	r1, #43	; 0x2b
 8001f90:	2062      	movs	r0, #98	; 0x62
 8001f92:	f7fe fe4b 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f96:	20dc      	movs	r0, #220	; 0xdc
 8001f98:	f001 f8ae 	bl	80030f8 <putchar>

	gotoxy(99,44);
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	2063      	movs	r0, #99	; 0x63
 8001fa0:	f7fe fe44 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fa4:	20db      	movs	r0, #219	; 0xdb
 8001fa6:	f001 f8a7 	bl	80030f8 <putchar>

	gotoxy(103,44);
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	2067      	movs	r0, #103	; 0x67
 8001fae:	f7fe fe3d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fb2:	20db      	movs	r0, #219	; 0xdb
 8001fb4:	f001 f8a0 	bl	80030f8 <putchar>

	gotoxy(104,44);
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	2068      	movs	r0, #104	; 0x68
 8001fbc:	f7fe fe36 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001fc0:	20dc      	movs	r0, #220	; 0xdc
 8001fc2:	f001 f899 	bl	80030f8 <putchar>

	gotoxy(107,44);
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	206b      	movs	r0, #107	; 0x6b
 8001fca:	f7fe fe2f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fce:	20db      	movs	r0, #219	; 0xdb
 8001fd0:	f001 f892 	bl	80030f8 <putchar>

	gotoxy(108,44);
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	206c      	movs	r0, #108	; 0x6c
 8001fd8:	f7fe fe28 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fdc:	20db      	movs	r0, #219	; 0xdb
 8001fde:	f001 f88b 	bl	80030f8 <putchar>
	gotoxy(108,43);
 8001fe2:	212b      	movs	r1, #43	; 0x2b
 8001fe4:	206c      	movs	r0, #108	; 0x6c
 8001fe6:	f7fe fe21 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fea:	20db      	movs	r0, #219	; 0xdb
 8001fec:	f001 f884 	bl	80030f8 <putchar>

	gotoxy(109,44);
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	206d      	movs	r0, #109	; 0x6d
 8001ff4:	f7fe fe1a 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001ff8:	20dc      	movs	r0, #220	; 0xdc
 8001ffa:	f001 f87d 	bl	80030f8 <putchar>

	gotoxy(112,44);
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	2070      	movs	r0, #112	; 0x70
 8002002:	f7fe fe13 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002006:	20db      	movs	r0, #219	; 0xdb
 8002008:	f001 f876 	bl	80030f8 <putchar>

	gotoxy(113,44);
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	2071      	movs	r0, #113	; 0x71
 8002010:	f7fe fe0c 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002014:	20dc      	movs	r0, #220	; 0xdc
 8002016:	f001 f86f 	bl	80030f8 <putchar>

	gotoxy(114,44);
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	2072      	movs	r0, #114	; 0x72
 800201e:	f7fe fe05 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002022:	20db      	movs	r0, #219	; 0xdb
 8002024:	f001 f868 	bl	80030f8 <putchar>
	gotoxy(114,43);
 8002028:	212b      	movs	r1, #43	; 0x2b
 800202a:	2072      	movs	r0, #114	; 0x72
 800202c:	f7fe fdfe 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002030:	20db      	movs	r0, #219	; 0xdb
 8002032:	f001 f861 	bl	80030f8 <putchar>

	gotoxy(115,44);
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	2073      	movs	r0, #115	; 0x73
 800203a:	f7fe fdf7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800203e:	20db      	movs	r0, #219	; 0xdb
 8002040:	f001 f85a 	bl	80030f8 <putchar>

	gotoxy(120,44);
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	2078      	movs	r0, #120	; 0x78
 8002048:	f7fe fdf0 	bl	8000c2c <gotoxy>
	printf("%c",47);
 800204c:	202f      	movs	r0, #47	; 0x2f
 800204e:	f001 f853 	bl	80030f8 <putchar>
	gotoxy(121,43);
 8002052:	212b      	movs	r1, #43	; 0x2b
 8002054:	2079      	movs	r0, #121	; 0x79
 8002056:	f7fe fde9 	bl	8000c2c <gotoxy>
	printf("%c",47);
 800205a:	202f      	movs	r0, #47	; 0x2f
 800205c:	f001 f84c 	bl	80030f8 <putchar>
	gotoxy(122,43);
 8002060:	212b      	movs	r1, #43	; 0x2b
 8002062:	207a      	movs	r0, #122	; 0x7a
 8002064:	f7fe fde2 	bl	8000c2c <gotoxy>
	printf("%c",223);
 8002068:	20df      	movs	r0, #223	; 0xdf
 800206a:	f001 f845 	bl	80030f8 <putchar>
	gotoxy(122,42);
 800206e:	212a      	movs	r1, #42	; 0x2a
 8002070:	207a      	movs	r0, #122	; 0x7a
 8002072:	f7fe fddb 	bl	8000c2c <gotoxy>
	printf("%c",168);
 8002076:	20a8      	movs	r0, #168	; 0xa8
 8002078:	f001 f83e 	bl	80030f8 <putchar>
	gotoxy(123,43);
 800207c:	212b      	movs	r1, #43	; 0x2b
 800207e:	207b      	movs	r0, #123	; 0x7b
 8002080:	f7fe fdd4 	bl	8000c2c <gotoxy>
	printf("%c",92);
 8002084:	205c      	movs	r0, #92	; 0x5c
 8002086:	f001 f837 	bl	80030f8 <putchar>
	gotoxy(124,44);
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	207c      	movs	r0, #124	; 0x7c
 800208e:	f7fe fdcd 	bl	8000c2c <gotoxy>
	printf("%c",92);
 8002092:	205c      	movs	r0, #92	; 0x5c
 8002094:	f001 f830 	bl	80030f8 <putchar>

	gotoxy(127,44);
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	207f      	movs	r0, #127	; 0x7f
 800209c:	f7fe fdc6 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020a0:	20db      	movs	r0, #219	; 0xdb
 80020a2:	f001 f829 	bl	80030f8 <putchar>
	gotoxy(127,43);
 80020a6:	212b      	movs	r1, #43	; 0x2b
 80020a8:	207f      	movs	r0, #127	; 0x7f
 80020aa:	f7fe fdbf 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020ae:	20db      	movs	r0, #219	; 0xdb
 80020b0:	f001 f822 	bl	80030f8 <putchar>
	gotoxy(127,42);
 80020b4:	212a      	movs	r1, #42	; 0x2a
 80020b6:	207f      	movs	r0, #127	; 0x7f
 80020b8:	f7fe fdb8 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020bc:	20db      	movs	r0, #219	; 0xdb
 80020be:	f001 f81b 	bl	80030f8 <putchar>

	gotoxy(129,44);
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	2081      	movs	r0, #129	; 0x81
 80020c6:	f7fe fdb1 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020ca:	20db      	movs	r0, #219	; 0xdb
 80020cc:	f001 f814 	bl	80030f8 <putchar>
	gotoxy(129,43);
 80020d0:	212b      	movs	r1, #43	; 0x2b
 80020d2:	2081      	movs	r0, #129	; 0x81
 80020d4:	f7fe fdaa 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80020d8:	20dc      	movs	r0, #220	; 0xdc
 80020da:	f001 f80d 	bl	80030f8 <putchar>

	gotoxy(130,44);
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	2082      	movs	r0, #130	; 0x82
 80020e2:	f7fe fda3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020e6:	20db      	movs	r0, #219	; 0xdb
 80020e8:	f001 f806 	bl	80030f8 <putchar>

	gotoxy(131,44);
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	2083      	movs	r0, #131	; 0x83
 80020f0:	f7fe fd9c 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80020f4:	20dc      	movs	r0, #220	; 0xdc
 80020f6:	f000 ffff 	bl	80030f8 <putchar>

	gotoxy(132,44);
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	2084      	movs	r0, #132	; 0x84
 80020fe:	f7fe fd95 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002102:	20db      	movs	r0, #219	; 0xdb
 8002104:	f000 fff8 	bl	80030f8 <putchar>

	gotoxy(133,44);
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	2085      	movs	r0, #133	; 0x85
 800210c:	f7fe fd8e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002110:	20db      	movs	r0, #219	; 0xdb
 8002112:	f000 fff1 	bl	80030f8 <putchar>
	gotoxy(133,43);
 8002116:	212b      	movs	r1, #43	; 0x2b
 8002118:	2085      	movs	r0, #133	; 0x85
 800211a:	f7fe fd87 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800211e:	20db      	movs	r0, #219	; 0xdb
 8002120:	f000 ffea 	bl	80030f8 <putchar>

	gotoxy(134,44);
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	2086      	movs	r0, #134	; 0x86
 8002128:	f7fe fd80 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800212c:	20db      	movs	r0, #219	; 0xdb
 800212e:	f000 ffe3 	bl	80030f8 <putchar>

	gotoxy(135,44);
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	2087      	movs	r0, #135	; 0x87
 8002136:	f7fe fd79 	bl	8000c2c <gotoxy>
	printf("%c",220);
 800213a:	20dc      	movs	r0, #220	; 0xdc
 800213c:	f000 ffdc 	bl	80030f8 <putchar>

	gotoxy(137,44);
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	2089      	movs	r0, #137	; 0x89
 8002144:	f7fe fd72 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002148:	20dc      	movs	r0, #220	; 0xdc
 800214a:	f000 ffd5 	bl	80030f8 <putchar>

	gotoxy(139,44);
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	208b      	movs	r0, #139	; 0x8b
 8002152:	f7fe fd6b 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002156:	20dc      	movs	r0, #220	; 0xdc
 8002158:	f000 ffce 	bl	80030f8 <putchar>

	gotoxy(141,44);
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	208d      	movs	r0, #141	; 0x8d
 8002160:	f7fe fd64 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002164:	20db      	movs	r0, #219	; 0xdb
 8002166:	f000 ffc7 	bl	80030f8 <putchar>

	gotoxy(142,44);
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	208e      	movs	r0, #142	; 0x8e
 800216e:	f7fe fd5d 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002172:	20dc      	movs	r0, #220	; 0xdc
 8002174:	f000 ffc0 	bl	80030f8 <putchar>


}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 800217c:	b084      	sub	sp, #16
 800217e:	b5b0      	push	{r4, r5, r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	f107 0418 	add.w	r4, r7, #24
 8002188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 800218c:	201c      	movs	r0, #28
 800218e:	f000 fed9 	bl	8002f44 <malloc>
 8002192:	4603      	mov	r3, r0
 8002194:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	461d      	mov	r5, r3
 800219a:	f107 0418 	add.w	r4, r7, #24
 800219e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a6:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    return newNode;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021bc:	b004      	add	sp, #16
 80021be:	4770      	bx	lr

080021c0 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 80021c0:	b084      	sub	sp, #16
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	f107 001c 	add.w	r0, r7, #28
 80021ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 80021d2:	466a      	mov	r2, sp
 80021d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e6:	f7ff ffc9 	bl	800217c <createBulletNode>
 80021ea:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <appendBullet+0x3c>
        *head = newNode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 80021fa:	e00d      	b.n	8002218 <appendBullet+0x58>
        bulletNode_t* current = *head;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8002202:	e002      	b.n	800220a <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f8      	bne.n	8002204 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	619a      	str	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002222:	b004      	add	sp, #16
 8002224:	4770      	bx	lr

08002226 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8002230:	2008      	movs	r0, #8
 8002232:	f000 fe87 	bl	8002f44 <malloc>
 8002236:	4603      	mov	r3, r0
 8002238:	60fb      	str	r3, [r7, #12]
	newEnemy->enemy = enemy;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	617b      	str	r3, [r7, #20]
	int8_t isEndOfList = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
	while(isEndOfList == 0){
 8002250:	e00c      	b.n	800226c <appendEnemy+0x46>
		if(thisNode->nextEnemyNode == 0){
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <appendEnemy+0x40>
			isEndOfList = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	74fb      	strb	r3, [r7, #19]
			thisNode->nextEnemyNode = newEnemy;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	e002      	b.n	800226c <appendEnemy+0x46>
		}else{
			thisNode = thisNode->nextEnemyNode;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	617b      	str	r3, [r7, #20]
	while(isEndOfList == 0){
 800226c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <appendEnemy+0x2c>
		}
	}
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = gameState->enemyLL;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL->nextEnemyNode;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60bb      	str	r3, [r7, #8]

	while(1){
		if(thisNode == enemy){
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d132      	bne.n	8002306 <deleteEnemyNode+0x86>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f959 	bl	8001560 <fpToInt>
 80022ae:	4604      	mov	r4, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f951 	bl	8001560 <fpToInt>
 80022be:	4603      	mov	r3, r0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7fe fcb2 	bl	8000c2c <gotoxy>
			printf("  ");
 80022c8:	4816      	ldr	r0, [pc, #88]	; (8002324 <deleteEnemyNode+0xa4>)
 80022ca:	f000 fefd 	bl	80030c8 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fe39 	bl	8002f54 <free>
			free(thisNode->enemy->position);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fe33 	bl	8002f54 <free>
			free(thisNode->enemy->velocity);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fe2d 	bl	8002f54 <free>
			free(thisNode->enemy);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fe28 	bl	8002f54 <free>
			break;
 8002304:	e00a      	b.n	800231c <deleteEnemyNode+0x9c>
		}
		if(thisNode->nextEnemyNode == 0){
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <deleteEnemyNode+0x9a>
			break;
		}
		preNode = thisNode;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60bb      	str	r3, [r7, #8]
		if(thisNode == enemy){
 8002318:	e7be      	b.n	8002298 <deleteEnemyNode+0x18>
			break;
 800231a:	bf00      	nop
	}
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	08004340 	.word	0x08004340

08002328 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d039      	beq.n	80023ae <deleteBulletNode+0x86>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d036      	beq.n	80023ae <deleteBulletNode+0x86>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f90b 	bl	8001560 <fpToInt>
 800234a:	4604      	mov	r4, r0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f905 	bl	8001560 <fpToInt>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	4620      	mov	r0, r4
 800235c:	f7fe fc66 	bl	8000c2c <gotoxy>
    printf(" ");
 8002360:	2020      	movs	r0, #32
 8002362:	f000 fec9 	bl	80030f8 <putchar>

    if (*head == nodeToDelete) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <deleteBulletNode+0x58>
        *head = nodeToDelete->nextBulletAddress;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f000 fdeb 	bl	8002f54 <free>
        return;
 800237e:	e017      	b.n	80023b0 <deleteBulletNode+0x88>
    }

    bulletNode_t* current = *head;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8002386:	e002      	b.n	800238e <deleteBulletNode+0x66>
        current = current->nextBulletAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <deleteBulletNode+0x76>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d1f4      	bne.n	8002388 <deleteBulletNode+0x60>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	f000 fdd4 	bl	8002f54 <free>
 80023ac:	e000      	b.n	80023b0 <deleteBulletNode+0x88>
        return;
 80023ae:	bf00      	nop
}
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 80023b6:	b5b0      	push	{r4, r5, r7, lr}
 80023b8:	b08c      	sub	sp, #48	; 0x30
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42)}, {intToFp(2), intToFp(42)}, 1, 20, 0};
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	615a      	str	r2, [r3, #20]
 80023d0:	2002      	movs	r0, #2
 80023d2:	f7ff f8b0 	bl	8001536 <intToFp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	202a      	movs	r0, #42	; 0x2a
 80023dc:	f7ff f8ab 	bl	8001536 <intToFp>
 80023e0:	4603      	mov	r3, r0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	2002      	movs	r0, #2
 80023e6:	f7ff f8a6 	bl	8001536 <intToFp>
 80023ea:	4603      	mov	r3, r0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	202a      	movs	r0, #42	; 0x2a
 80023f0:	f7ff f8a1 	bl	8001536 <intToFp>
 80023f4:	4603      	mov	r3, r0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	2301      	movs	r3, #1
 80023fa:	773b      	strb	r3, [r7, #28]
 80023fc:	2314      	movs	r3, #20
 80023fe:	777b      	strb	r3, [r7, #29]

	enemyNode_t* node = malloc(sizeof(enemyNode_t));
 8002400:	2008      	movs	r0, #8
 8002402:	f000 fd9f 	bl	8002f44 <malloc>
 8002406:	4603      	mov	r3, r0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
	enemy_t* enemy = malloc(sizeof(enemy_t));
 800240a:	2010      	movs	r0, #16
 800240c:	f000 fd9a 	bl	8002f44 <malloc>
 8002410:	4603      	mov	r3, r0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
	position_t* pos = malloc(sizeof(position_t));
 8002414:	2008      	movs	r0, #8
 8002416:	f000 fd95 	bl	8002f44 <malloc>
 800241a:	4603      	mov	r3, r0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

	node->enemy = enemy;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002422:	601a      	str	r2, [r3, #0]
	pos->x = 0;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
	enemy->position = pos;
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	601a      	str	r2, [r3, #0]
	node->enemy = enemy;
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002434:	601a      	str	r2, [r3, #0]
	node->nextEnemyNode = 0;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
	gameState->enemyLL = node;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002440:	605a      	str	r2, [r3, #4]

	gameState->bulletLL = NULL;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 040c 	add.w	r4, r3, #12
 800247c:	f107 050c 	add.w	r5, r7, #12
 8002480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002484:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002488:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//TODO: continue to initialize everything
}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	; 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bdb0      	pop	{r4, r5, r7, pc}

0800249c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f859 	bl	8001560 <fpToInt>
 80024ae:	4604      	mov	r4, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f853 	bl	8001560 <fpToInt>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	4620      	mov	r0, r4
 80024c0:	f7fe fbb4 	bl	8000c2c <gotoxy>
	printf(" ");
 80024c4:	2020      	movs	r0, #32
 80024c6:	f000 fe17 	bl	80030f8 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f846 	bl	8001560 <fpToInt>
 80024d4:	4604      	mov	r4, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f840 	bl	8001560 <fpToInt>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7fe fba1 	bl	8000c2c <gotoxy>
	printf("A");
 80024ea:	2041      	movs	r0, #65	; 0x41
 80024ec:	f000 fe04 	bl	80030f8 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	3214      	adds	r2, #20
 80024f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024fc:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff faf3 	bl	8001aec <drawEnemy>
	drawBullets(gameState);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fcb0 	bl	8000e6c <drawBullets>

	drawhearth(gameState);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fa6b 	bl	80019e8 <drawhearth>
	drawMoon(51,17); // moon graphics
 8002512:	2111      	movs	r1, #17
 8002514:	2033      	movs	r0, #51	; 0x33
 8002516:	f7ff f936 	bl	8001786 <drawMoon>
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
	...

08002524 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 800252c:	f7fe f994 	bl	8000858 <uart_get_char>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b66      	cmp	r3, #102	; 0x66
 8002538:	d111      	bne.n	800255e <bossKey+0x3a>
		if(gameState->bossMode == 0){
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <bossKey+0x2e>
			clrscr();
 8002544:	f7fe fb62 	bl	8000c0c <clrscr>
			gameState->bossMode = 1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002550:	e005      	b.n	800255e <bossKey+0x3a>
		}else{
			gameState->bossMode = 0;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			return 2;
 800255a:	2302      	movs	r3, #2
 800255c:	e00e      	b.n	800257c <bossKey+0x58>
		}
	}

	if(gameState->bossMode == 1){
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <bossKey+0x56>
		gotoxy(0,0);
 8002568:	2100      	movs	r1, #0
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe fb5e 	bl	8000c2c <gotoxy>
		printf("Noget meget vigtigt!");
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <bossKey+0x60>)
 8002572:	f000 fda9 	bl	80030c8 <iprintf>
		return 1;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <bossKey+0x58>
	}
	return 0;
 800257a:	2300      	movs	r3, #0
	uart_clear();
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08004344 	.word	0x08004344

08002588 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	if(gameState->cityLives == 0){
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <main>:

int main(void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b09a      	sub	sp, #104	; 0x68
 80025b4:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 80025b6:	4acb      	ldr	r2, [pc, #812]	; (80028e4 <main+0x334>)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025be:	e883 0003 	stmia.w	r3, {r0, r1}
 80025c2:	4ac9      	ldr	r2, [pc, #804]	; (80028e8 <main+0x338>)
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80025d0:	4ac6      	ldr	r2, [pc, #792]	; (80028ec <main+0x33c>)
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025da:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 80025de:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 80025e2:	f7fe f9dd 	bl	80009a0 <uart_init>
	initVariables(&gameState);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fee3 	bl	80023b6 <initVariables>
	initTimer();
 80025f0:	f7fe fde2 	bl	80011b8 <initTimer>
	initJoystick();
 80025f4:	f7fe fcc0 	bl	8000f78 <initJoystick>
	I2C_init();
 80025f8:	f7fe fe28 	bl	800124c <I2C_init>
	srand(time(NULL));   //RNG
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 fedd 	bl	80033bc <time>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4613      	mov	r3, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fd8b 	bl	8003124 <srand>



	while(1){
		switch(gameState.activeScreen){
 800260e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002612:	2b03      	cmp	r3, #3
 8002614:	d8fb      	bhi.n	800260e <main+0x5e>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <main+0x6c>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	080027d5 	.word	0x080027d5
 8002624:	080028ad 	.word	0x080028ad
 8002628:	08002945 	.word	0x08002945
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 800262c:	f7fe faee 	bl	8000c0c <clrscr>
			drawWindow();
 8002630:	f000 fa62 	bl	8002af8 <drawWindow>
			drawbackground(); // stars in background
 8002634:	f7fe ffb5 	bl	80015a2 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 8002638:	f107 021c 	add.w	r2, r7, #28
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa1f 	bl	8002a84 <drawMenuScreen>


			while(gameState.activeScreen==0){
 8002646:	e0bf      	b.n	80027c8 <main+0x218>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff69 	bl	8002524 <bossKey>
 8002652:	4603      	mov	r3, r0
 8002654:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(bossKeyChange == 1) continue;
 8002656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d100      	bne.n	800265e <main+0xae>
 800265c:	e0b4      	b.n	80027c8 <main+0x218>
				else if(bossKeyChange == 2){
 800265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002660:	2b02      	cmp	r3, #2
 8002662:	d114      	bne.n	800268e <main+0xde>
					//Initialize window agian
					clrscr();
 8002664:	f7fe fad2 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	232b      	movs	r3, #43	; 0x2b
 800266e:	229c      	movs	r2, #156	; 0x9c
 8002670:	2101      	movs	r1, #1
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe faec 	bl	8000c50 <drawBox>
					drawbackground(); // stars in background
 8002678:	f7fe ff93 	bl	80015a2 <drawbackground>
					drawWindow();
 800267c:	f000 fa3c 	bl	8002af8 <drawWindow>
					drawMenuScreen(btnList, &gameState);
 8002680:	f107 021c 	add.w	r2, r7, #28
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f9fb 	bl	8002a84 <drawMenuScreen>
				}

				if(downIsPressed()){
 800268e:	f7fe fd65 	bl	800115c <downIsPressed>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d025      	beq.n	80026e4 <main+0x134>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002698:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026a2:	4413      	add	r3, r2
 80026a4:	3b5c      	subs	r3, #92	; 0x5c
 80026a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026aa:	f000 f9cb 	bl	8002a44 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 80026ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	4b8e      	ldr	r3, [pc, #568]	; (80028f0 <main+0x340>)
 80026b6:	fb83 3102 	smull	r3, r1, r3, r2
 80026ba:	17d3      	asrs	r3, r2, #31
 80026bc:	1ac9      	subs	r1, r1, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	1ad1      	subs	r1, r2, r3
 80026c6:	b2cb      	uxtb	r3, r1
 80026c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80026cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d6:	4413      	add	r3, r2
 80026d8:	3b5c      	subs	r3, #92	; 0x5c
 80026da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026de:	f000 f991 	bl	8002a04 <drawBtnAsSelected>
 80026e2:	e028      	b.n	8002736 <main+0x186>
				}
				else if(upIsPressed()){
 80026e4:	f7fe fd0c 	bl	8001100 <upIsPressed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d023      	beq.n	8002736 <main+0x186>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80026ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026f8:	4413      	add	r3, r2
 80026fa:	3b5c      	subs	r3, #92	; 0x5c
 80026fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002700:	f000 f9a0 	bl	8002a44 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8002704:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <main+0x164>
 800270c:	2302      	movs	r3, #2
 800270e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002712:	e005      	b.n	8002720 <main+0x170>
					else gameState.btnSelected=gameState.btnSelected-1;
 8002714:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002718:	3b01      	subs	r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8002720:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800272a:	4413      	add	r3, r2
 800272c:	3b5c      	subs	r3, #92	; 0x5c
 800272e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002732:	f000 f967 	bl	8002a04 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8002736:	f7fe fcb5 	bl	80010a4 <centerIsPressed>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d043      	beq.n	80027c8 <main+0x218>
					if(gameState.btnSelected==0){ //START BUTTON
 8002740:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <main+0x1a0>
						gameState.activeScreen=1; //Game screen
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800274e:	e03b      	b.n	80027c8 <main+0x218>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8002750:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002754:	2b01      	cmp	r3, #1
 8002756:	d130      	bne.n	80027ba <main+0x20a>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8002758:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <main+0x340>)
 8002760:	fb83 3102 	smull	r3, r1, r3, r2
 8002764:	17d3      	asrs	r3, r2, #31
 8002766:	1ac9      	subs	r1, r1, r3
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	1ad1      	subs	r1, r2, r3
 8002770:	b2cb      	uxtb	r3, r1
 8002772:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <main+0x338>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	330f      	adds	r3, #15
 800277c:	4a5a      	ldr	r2, [pc, #360]	; (80028e8 <main+0x338>)
 800277e:	7852      	ldrb	r2, [r2, #1]
 8002780:	3201      	adds	r2, #1
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fa51 	bl	8000c2c <gotoxy>
						if(gameState.difficulty==0){
 800278a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <main+0x1ea>
							printf("EASY  ");
 8002792:	4858      	ldr	r0, [pc, #352]	; (80028f4 <main+0x344>)
 8002794:	f000 fc98 	bl	80030c8 <iprintf>
 8002798:	e016      	b.n	80027c8 <main+0x218>
						} else if(gameState.difficulty==1){
 800279a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d103      	bne.n	80027aa <main+0x1fa>
							printf("MEDIUM");
 80027a2:	4855      	ldr	r0, [pc, #340]	; (80028f8 <main+0x348>)
 80027a4:	f000 fc90 	bl	80030c8 <iprintf>
 80027a8:	e00e      	b.n	80027c8 <main+0x218>
						} else if(gameState.difficulty==2){
 80027aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d10a      	bne.n	80027c8 <main+0x218>
							printf("HARD  ");
 80027b2:	4852      	ldr	r0, [pc, #328]	; (80028fc <main+0x34c>)
 80027b4:	f000 fc88 	bl	80030c8 <iprintf>
 80027b8:	e006      	b.n	80027c8 <main+0x218>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 80027ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d102      	bne.n	80027c8 <main+0x218>
						gameState.activeScreen=2;// help screen
 80027c2:	2302      	movs	r3, #2
 80027c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==0){
 80027c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f43f af3b 	beq.w	8002648 <main+0x98>
					}
				}
			}
			break;
 80027d2:	e0e8      	b.n	80029a6 <main+0x3f6>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 80027d4:	f7fe fa1a 	bl	8000c0c <clrscr>
			printf("GAME SCREEN");
 80027d8:	4849      	ldr	r0, [pc, #292]	; (8002900 <main+0x350>)
 80027da:	f000 fc75 	bl	80030c8 <iprintf>
			uint32_t frameLastUpdated=0;
 80027de:	2300      	movs	r3, #0
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t dir = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	70fb      	strb	r3, [r7, #3]
			gameState.spaceship.lastShotTime=runtime;
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <main+0x354>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
			drawMoon(51,17);
 80027ec:	2111      	movs	r1, #17
 80027ee:	2033      	movs	r0, #51	; 0x33
 80027f0:	f7fe ffc9 	bl	8001786 <drawMoon>
			drawhearth(&gameState);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f8f5 	bl	80019e8 <drawhearth>
			drawCity();
 80027fe:	f7ff f9d3 	bl	8001ba8 <drawCity>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 8002802:	e04e      	b.n	80028a2 <main+0x2f2>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe8b 	bl	8002524 <bossKey>
 800280e:	4603      	mov	r3, r0
 8002810:	653b      	str	r3, [r7, #80]	; 0x50
				if(bossKeyChange == 1) continue;
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002814:	2b01      	cmp	r3, #1
 8002816:	d100      	bne.n	800281a <main+0x26a>
 8002818:	e043      	b.n	80028a2 <main+0x2f2>
				else if(bossKeyChange == 2){
 800281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281c:	2b02      	cmp	r3, #2
 800281e:	d108      	bne.n	8002832 <main+0x282>
					//Initialize window agian
					clrscr();
 8002820:	f7fe f9f4 	bl	8000c0c <clrscr>
					gotoxy(0,0);
 8002824:	2100      	movs	r1, #0
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe fa00 	bl	8000c2c <gotoxy>
					printf("GAME SCREEN");
 800282c:	4834      	ldr	r0, [pc, #208]	; (8002900 <main+0x350>)
 800282e:	f000 fc4b 	bl	80030c8 <iprintf>
				}

				if(runtime-frameLastUpdated>=framePeriod){//
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <main+0x354>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d931      	bls.n	80028a2 <main+0x2f2>
					updateSpaceship(&gameState, &dir);
 800283e:	1cfa      	adds	r2, r7, #3
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f964 	bl	8002b14 <updateSpaceship>
					spawnEnemy(&gameState);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fda7 	bl	80013a4 <spawnEnemy>
					updateEnemy(&gameState);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fe04 	bl	8001468 <updateEnemy>
					shootSpaceship(&gameState);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f98d 	bl	8002b84 <shootSpaceship>
//					shootEnemy(&gameState);
					updateBullets(&gameState);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fab9 	bl	8000de6 <updateBullets>
					detectBulletHit(&gameState);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fad7 	bl	8000e2c <detectBulletHit>
					detectCityHit(&gameState);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fe26 	bl	80014d4 <detectCityHit>
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
					checkIfDead(&gameState);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fe7b 	bl	8002588 <checkIfDead>
					drawScreen(&gameState);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fe00 	bl	800249c <drawScreen>
					frameLastUpdated=runtime;
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <main+0x354>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	65fb      	str	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==1){
 80028a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d0ac      	beq.n	8002804 <main+0x254>
				}
		}
			break;
 80028aa:	e07c      	b.n	80029a6 <main+0x3f6>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80028ac:	f7fe f9ae 	bl	8000c0c <clrscr>
			drawWindow();
 80028b0:	f000 f922 	bl	8002af8 <drawWindow>
			drawBox(1,1,156,43,0);//window
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	232b      	movs	r3, #43	; 0x2b
 80028ba:	229c      	movs	r2, #156	; 0x9c
 80028bc:	2101      	movs	r1, #1
 80028be:	2001      	movs	r0, #1
 80028c0:	f7fe f9c6 	bl	8000c50 <drawBox>
			drawbackground(); // stars in background
 80028c4:	f7fe fe6d 	bl	80015a2 <drawbackground>
			drawHelpScreen();
 80028c8:	f000 f900 	bl	8002acc <drawHelpScreen>
			while(gameState.activeScreen==2){
 80028cc:	e035      	b.n	800293a <main+0x38a>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fe26 	bl	8002524 <bossKey>
 80028d8:	4603      	mov	r3, r0
 80028da:	657b      	str	r3, [r7, #84]	; 0x54
				if(bossKeyChange == 1) continue;
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d112      	bne.n	8002908 <main+0x358>
 80028e2:	e02a      	b.n	800293a <main+0x38a>
 80028e4:	080043f8 	.word	0x080043f8
 80028e8:	08004400 	.word	0x08004400
 80028ec:	08004408 	.word	0x08004408
 80028f0:	55555556 	.word	0x55555556
 80028f4:	0800435c 	.word	0x0800435c
 80028f8:	08004364 	.word	0x08004364
 80028fc:	0800436c 	.word	0x0800436c
 8002900:	08004374 	.word	0x08004374
 8002904:	200001c8 	.word	0x200001c8
				else if(bossKeyChange == 2){
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	2b02      	cmp	r3, #2
 800290c:	d10d      	bne.n	800292a <main+0x37a>
					//Initialize window agian
					clrscr();
 800290e:	f7fe f97d 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	232b      	movs	r3, #43	; 0x2b
 8002918:	229c      	movs	r2, #156	; 0x9c
 800291a:	2101      	movs	r1, #1
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe f997 	bl	8000c50 <drawBox>
					drawbackground(); // stars in background
 8002922:	f7fe fe3e 	bl	80015a2 <drawbackground>
					drawHelpScreen();
 8002926:	f000 f8d1 	bl	8002acc <drawHelpScreen>
				}

				if(centerIsPressed()){
 800292a:	f7fe fbbb 	bl	80010a4 <centerIsPressed>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <main+0x38a>
					gameState.activeScreen=0;//MENU SCREEN
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==2){
 800293a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800293e:	2b02      	cmp	r3, #2
 8002940:	d0c5      	beq.n	80028ce <main+0x31e>
				}
			}
			break;
 8002942:	e030      	b.n	80029a6 <main+0x3f6>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8002944:	f7fe f962 	bl	8000c0c <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8002948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800294c:	4619      	mov	r1, r3
 800294e:	4816      	ldr	r0, [pc, #88]	; (80029a8 <main+0x3f8>)
 8002950:	f000 fbba 	bl	80030c8 <iprintf>
			while(gameState.activeScreen==3){
 8002954:	e022      	b.n	800299c <main+0x3ec>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fde2 	bl	8002524 <bossKey>
 8002960:	4603      	mov	r3, r0
 8002962:	65bb      	str	r3, [r7, #88]	; 0x58
				if(bossKeyChange == 1) continue;
 8002964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002966:	2b01      	cmp	r3, #1
 8002968:	d100      	bne.n	800296c <main+0x3bc>
 800296a:	e017      	b.n	800299c <main+0x3ec>
				else if(bossKeyChange == 2){
 800296c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800296e:	2b02      	cmp	r3, #2
 8002970:	d107      	bne.n	8002982 <main+0x3d2>
					//Initialize window agian
					clrscr();
 8002972:	f7fe f94b 	bl	8000c0c <clrscr>
					printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8002976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800297a:	4619      	mov	r1, r3
 800297c:	480a      	ldr	r0, [pc, #40]	; (80029a8 <main+0x3f8>)
 800297e:	f000 fba3 	bl	80030c8 <iprintf>
				}
				if(centerIsPressed()){
 8002982:	f7fe fb8f 	bl	80010a4 <centerIsPressed>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <main+0x3ec>
					initVariables(&gameState);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fd10 	bl	80023b6 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8002996:	2300      	movs	r3, #0
 8002998:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==3){
 800299c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d0d8      	beq.n	8002956 <main+0x3a6>
				}
			}
			break;
 80029a4:	bf00      	nop
		switch(gameState.activeScreen){
 80029a6:	e632      	b.n	800260e <main+0x5e>
 80029a8:	08004380 	.word	0x08004380

080029ac <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	463b      	mov	r3, r7
 80029b4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc08 	bl	80001d0 <strlen>
 80029c0:	4603      	mov	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80029c4:	783b      	ldrb	r3, [r7, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	461c      	mov	r4, r3
 80029cc:	783b      	ldrb	r3, [r7, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	1d5a      	adds	r2, r3, #5
 80029d6:	787b      	ldrb	r3, [r7, #1]
 80029d8:	3302      	adds	r3, #2
 80029da:	2100      	movs	r1, #0
 80029dc:	9100      	str	r1, [sp, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	f7fe f936 	bl	8000c50 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80029e4:	783b      	ldrb	r3, [r7, #0]
 80029e6:	3303      	adds	r3, #3
 80029e8:	787a      	ldrb	r2, [r7, #1]
 80029ea:	3201      	adds	r2, #1
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f91c 	bl	8000c2c <gotoxy>
	printf(btn.text);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fb66 	bl	80030c8 <iprintf>
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fbdc 	bl	80001d0 <strlen>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8002a1c:	783b      	ldrb	r3, [r7, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	461c      	mov	r4, r3
 8002a24:	783b      	ldrb	r3, [r7, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	1d5a      	adds	r2, r3, #5
 8002a2e:	787b      	ldrb	r3, [r7, #1]
 8002a30:	3302      	adds	r3, #2
 8002a32:	2101      	movs	r1, #1
 8002a34:	9100      	str	r1, [sp, #0]
 8002a36:	4621      	mov	r1, r4
 8002a38:	f7fe f90a 	bl	8000c50 <drawBox>
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}

08002a44 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fbbc 	bl	80001d0 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8002a5c:	783b      	ldrb	r3, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	461c      	mov	r4, r3
 8002a64:	783b      	ldrb	r3, [r7, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	1d5a      	adds	r2, r3, #5
 8002a6e:	787b      	ldrb	r3, [r7, #1]
 8002a70:	3302      	adds	r3, #2
 8002a72:	2100      	movs	r1, #0
 8002a74:	9100      	str	r1, [sp, #0]
 8002a76:	4621      	mov	r1, r4
 8002a78:	f7fe f8ea 	bl	8000c50 <drawBox>
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a94:	f7ff ff8a 	bl	80029ac <drawButton>
	drawButton(btnList[1]);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002aa0:	f7ff ff84 	bl	80029ac <drawButton>
	drawButton(btnList[2]);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002aac:	f7ff ff7e 	bl	80029ac <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ac0:	f7ff ffa0 	bl	8002a04 <drawBtnAsSelected>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <drawHelpScreen>:


void drawHelpScreen(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	2046      	movs	r0, #70	; 0x46
 8002ad4:	f7fe f8aa 	bl	8000c2c <gotoxy>
	printf("HELP SCREEN");
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <drawHelpScreen+0x24>)
 8002ada:	f000 faf5 	bl	80030c8 <iprintf>
	gotoxy(60,7);
 8002ade:	2107      	movs	r1, #7
 8002ae0:	203c      	movs	r0, #60	; 0x3c
 8002ae2:	f7fe f8a3 	bl	8000c2c <gotoxy>
	printf("Tag dig dog sammen mand!");
 8002ae6:	4803      	ldr	r0, [pc, #12]	; (8002af4 <drawHelpScreen+0x28>)
 8002ae8:	f000 faee 	bl	80030c8 <iprintf>

}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	080043d0 	.word	0x080043d0
 8002af4:	080043dc 	.word	0x080043dc

08002af8 <drawWindow>:

void drawWindow(){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8002afe:	2300      	movs	r3, #0
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	232b      	movs	r3, #43	; 0x2b
 8002b04:	229c      	movs	r2, #156	; 0x9c
 8002b06:	2101      	movs	r1, #1
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7fe f8a1 	bl	8000c50 <drawBox>
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState, uint8_t* dir){
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]

	if(fpToInt(gameState->spaceship.position.x)>=screenWidth-1){
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fd1c 	bl	8001560 <fpToInt>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b9a      	cmp	r3, #154	; 0x9a
 8002b2c:	dd03      	ble.n	8002b36 <updateSpaceship+0x22>
		*dir =1;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e00a      	b.n	8002b4c <updateSpaceship+0x38>
	} else if(fpToInt(gameState->spaceship.position.x)<=2){
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fd10 	bl	8001560 <fpToInt>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	dc02      	bgt.n	8002b4c <updateSpaceship+0x38>
		*dir =0;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
	}
	if(*dir==0){
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <updateSpaceship+0x54>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68dc      	ldr	r4, [r3, #12]
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7fe fcec 	bl	8001536 <intToFp>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	18e2      	adds	r2, r4, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	615a      	str	r2, [r3, #20]
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
}
 8002b66:	e008      	b.n	8002b7a <updateSpaceship+0x66>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68dc      	ldr	r4, [r3, #12]
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f7fe fce2 	bl	8001536 <intToFp>
 8002b72:	4603      	mov	r3, r0
 8002b74:	1ae2      	subs	r2, r4, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
	...

08002b84 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b092      	sub	sp, #72	; 0x48
 8002b88:	af04      	add	r7, sp, #16
 8002b8a:	6078      	str	r0, [r7, #4]
	uint8_t firingPeriod = gameState->spaceship.firingPeriod;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7f5b      	ldrb	r3, [r3, #29]
 8002b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	if(runtime-gameState->spaceship.lastShotTime>=firingPeriod){//
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <shootSpaceship+0xac>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	1ad2      	subs	r2, r2, r3
 8002b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d33f      	bcc.n	8002c26 <shootSpaceship+0xa2>
		gameState->spaceship.lastShotTime = runtime;
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <shootSpaceship+0xac>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),intToFp(-3)};
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe fcc1 	bl	8001536 <intToFp>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb8:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8002bbc:	f7fe fcbb 	bl	8001536 <intToFp>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691c      	ldr	r4, [r3, #16]
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fe fcb1 	bl	8001536 <intToFp>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	1ae3      	subs	r3, r4, r3
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002be6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bf6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c06:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 8002c0a:	687d      	ldr	r5, [r7, #4]
 8002c0c:	466c      	mov	r4, sp
 8002c0e:	f107 0318 	add.w	r3, r7, #24
 8002c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff facd 	bl	80021c0 <appendBullet>
	}
}
 8002c26:	bf00      	nop
 8002c28:	3738      	adds	r7, #56	; 0x38
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200001c8 	.word	0x200001c8

08002c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
	return 1;
 8002c38:	2301      	movs	r3, #1
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_kill>:

int _kill(int pid, int sig)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c4e:	f000 f94f 	bl	8002ef0 <__errno>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2216      	movs	r2, #22
 8002c56:	601a      	str	r2, [r3, #0]
	return -1;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_exit>:

void _exit (int status)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ffe7 	bl	8002c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c76:	e7fe      	b.n	8002c76 <_exit+0x12>

08002c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e00a      	b.n	8002ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c8a:	f3af 8000 	nop.w
 8002c8e:	4601      	mov	r1, r0
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	b2ca      	uxtb	r2, r1
 8002c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dbf0      	blt.n	8002c8a <_read+0x12>
	}

return len;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cda:	605a      	str	r2, [r3, #4]
	return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_isatty>:

int _isatty(int file)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x50>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x16>
		heap_end = &end;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <_sbrk+0x50>)
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <_sbrk+0x54>)
 8002d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <_sbrk+0x50>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <_sbrk+0x50>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	466a      	mov	r2, sp
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d907      	bls.n	8002d56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d46:	f000 f8d3 	bl	8002ef0 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d54:	e006      	b.n	8002d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <_sbrk+0x50>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <_sbrk+0x50>)
 8002d60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200001bc 	.word	0x200001bc
 8002d70:	200001e0 	.word	0x200001e0

08002d74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <SystemInit+0x84>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <SystemInit+0x84>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <SystemInit+0x88>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <SystemInit+0x88>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <SystemInit+0x88>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4918      	ldr	r1, [pc, #96]	; (8002dfc <SystemInit+0x88>)
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <SystemInit+0x8c>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <SystemInit+0x88>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <SystemInit+0x88>)
 8002da6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <SystemInit+0x88>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <SystemInit+0x88>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <SystemInit+0x88>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <SystemInit+0x88>)
 8002dc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002dc6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <SystemInit+0x88>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <SystemInit+0x88>)
 8002dce:	f023 030f 	bic.w	r3, r3, #15
 8002dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <SystemInit+0x88>)
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	4908      	ldr	r1, [pc, #32]	; (8002dfc <SystemInit+0x88>)
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <SystemInit+0x90>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SystemInit+0x88>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002de6:	f000 f80f 	bl	8002e08 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002dea:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <SystemInit+0x84>)
 8002dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002df0:	609a      	str	r2, [r3, #8]
#endif  
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000ed00 	.word	0xe000ed00
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	f87fc00c 	.word	0xf87fc00c
 8002e04:	ff00fccc 	.word	0xff00fccc

08002e08 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <SetSysClock+0x8c>)
 8002e0e:	2212      	movs	r2, #18
 8002e10:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <SetSysClock+0x90>)
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <SetSysClock+0x90>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <SetSysClock+0x90>)
 8002e1c:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <SetSysClock+0x90>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <SetSysClock+0x90>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <SetSysClock+0x90>)
 8002e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <SetSysClock+0x90>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <SetSysClock+0x90>)
 8002e34:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e38:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <SetSysClock+0x90>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <SetSysClock+0x90>)
 8002e40:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002e44:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <SetSysClock+0x90>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <SetSysClock+0x90>)
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e52:	bf00      	nop
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <SetSysClock+0x90>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f9      	beq.n	8002e54 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <SetSysClock+0x90>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <SetSysClock+0x90>)
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <SetSysClock+0x90>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <SetSysClock+0x90>)
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002e78:	bf00      	nop
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <SetSysClock+0x90>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d1f9      	bne.n	8002e7a <SetSysClock+0x72>
  {
  }
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40022000 	.word	0x40022000
 8002e98:	40021000 	.word	0x40021000

08002e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e9c:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ea2:	490e      	ldr	r1, [pc, #56]	; (8002edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <LoopForever+0xe>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb8:	4c0b      	ldr	r4, [pc, #44]	; (8002ee8 <LoopForever+0x16>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ec6:	f7ff ff55 	bl	8002d74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002eca:	f000 f817 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ece:	f7ff fb6f 	bl	80025b0 <main>

08002ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ed2:	e7fe      	b.n	8002ed2 <LoopForever>
  ldr   r0, =_estack
 8002ed4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002edc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002ee0:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 8002ee4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002ee8:	200001dc 	.word	0x200001dc

08002eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eec:	e7fe      	b.n	8002eec <ADC1_2_IRQHandler>
	...

08002ef0 <__errno>:
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <__errno+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000002c 	.word	0x2000002c

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	; (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	; (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x44>)
 8002f10:	f001 f9c0 	bl	8004294 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	0800455c 	.word	0x0800455c
 8002f38:	0800455c 	.word	0x0800455c
 8002f3c:	0800455c 	.word	0x0800455c
 8002f40:	08004560 	.word	0x08004560

08002f44 <malloc>:
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <malloc+0xc>)
 8002f46:	4601      	mov	r1, r0
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f000 b863 	b.w	8003014 <_malloc_r>
 8002f4e:	bf00      	nop
 8002f50:	2000002c 	.word	0x2000002c

08002f54 <free>:
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <free+0xc>)
 8002f56:	4601      	mov	r1, r0
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	f000 b80b 	b.w	8002f74 <_free_r>
 8002f5e:	bf00      	nop
 8002f60:	2000002c 	.word	0x2000002c

08002f64 <memset>:
 8002f64:	4402      	add	r2, r0
 8002f66:	4603      	mov	r3, r0
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <memset+0xa>
 8002f6c:	4770      	bx	lr
 8002f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f72:	e7f9      	b.n	8002f68 <memset+0x4>

08002f74 <_free_r>:
 8002f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f76:	2900      	cmp	r1, #0
 8002f78:	d048      	beq.n	800300c <_free_r+0x98>
 8002f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f7e:	9001      	str	r0, [sp, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f1a1 0404 	sub.w	r4, r1, #4
 8002f86:	bfb8      	it	lt
 8002f88:	18e4      	addlt	r4, r4, r3
 8002f8a:	f000 fc93 	bl	80038b4 <__malloc_lock>
 8002f8e:	4a20      	ldr	r2, [pc, #128]	; (8003010 <_free_r+0x9c>)
 8002f90:	9801      	ldr	r0, [sp, #4]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	4615      	mov	r5, r2
 8002f96:	b933      	cbnz	r3, 8002fa6 <_free_r+0x32>
 8002f98:	6063      	str	r3, [r4, #4]
 8002f9a:	6014      	str	r4, [r2, #0]
 8002f9c:	b003      	add	sp, #12
 8002f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fa2:	f000 bc8d 	b.w	80038c0 <__malloc_unlock>
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	d90b      	bls.n	8002fc2 <_free_r+0x4e>
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	1862      	adds	r2, r4, r1
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bf04      	itt	eq
 8002fb2:	681a      	ldreq	r2, [r3, #0]
 8002fb4:	685b      	ldreq	r3, [r3, #4]
 8002fb6:	6063      	str	r3, [r4, #4]
 8002fb8:	bf04      	itt	eq
 8002fba:	1852      	addeq	r2, r2, r1
 8002fbc:	6022      	streq	r2, [r4, #0]
 8002fbe:	602c      	str	r4, [r5, #0]
 8002fc0:	e7ec      	b.n	8002f9c <_free_r+0x28>
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b10b      	cbz	r3, 8002fcc <_free_r+0x58>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d9fa      	bls.n	8002fc2 <_free_r+0x4e>
 8002fcc:	6811      	ldr	r1, [r2, #0]
 8002fce:	1855      	adds	r5, r2, r1
 8002fd0:	42a5      	cmp	r5, r4
 8002fd2:	d10b      	bne.n	8002fec <_free_r+0x78>
 8002fd4:	6824      	ldr	r4, [r4, #0]
 8002fd6:	4421      	add	r1, r4
 8002fd8:	1854      	adds	r4, r2, r1
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	6011      	str	r1, [r2, #0]
 8002fde:	d1dd      	bne.n	8002f9c <_free_r+0x28>
 8002fe0:	681c      	ldr	r4, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	6053      	str	r3, [r2, #4]
 8002fe6:	4421      	add	r1, r4
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	e7d7      	b.n	8002f9c <_free_r+0x28>
 8002fec:	d902      	bls.n	8002ff4 <_free_r+0x80>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	6003      	str	r3, [r0, #0]
 8002ff2:	e7d3      	b.n	8002f9c <_free_r+0x28>
 8002ff4:	6825      	ldr	r5, [r4, #0]
 8002ff6:	1961      	adds	r1, r4, r5
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	bf04      	itt	eq
 8002ffc:	6819      	ldreq	r1, [r3, #0]
 8002ffe:	685b      	ldreq	r3, [r3, #4]
 8003000:	6063      	str	r3, [r4, #4]
 8003002:	bf04      	itt	eq
 8003004:	1949      	addeq	r1, r1, r5
 8003006:	6021      	streq	r1, [r4, #0]
 8003008:	6054      	str	r4, [r2, #4]
 800300a:	e7c7      	b.n	8002f9c <_free_r+0x28>
 800300c:	b003      	add	sp, #12
 800300e:	bd30      	pop	{r4, r5, pc}
 8003010:	200001c0 	.word	0x200001c0

08003014 <_malloc_r>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	1ccd      	adds	r5, r1, #3
 8003018:	f025 0503 	bic.w	r5, r5, #3
 800301c:	3508      	adds	r5, #8
 800301e:	2d0c      	cmp	r5, #12
 8003020:	bf38      	it	cc
 8003022:	250c      	movcc	r5, #12
 8003024:	2d00      	cmp	r5, #0
 8003026:	4606      	mov	r6, r0
 8003028:	db01      	blt.n	800302e <_malloc_r+0x1a>
 800302a:	42a9      	cmp	r1, r5
 800302c:	d903      	bls.n	8003036 <_malloc_r+0x22>
 800302e:	230c      	movs	r3, #12
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	2000      	movs	r0, #0
 8003034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003036:	f000 fc3d 	bl	80038b4 <__malloc_lock>
 800303a:	4921      	ldr	r1, [pc, #132]	; (80030c0 <_malloc_r+0xac>)
 800303c:	680a      	ldr	r2, [r1, #0]
 800303e:	4614      	mov	r4, r2
 8003040:	b99c      	cbnz	r4, 800306a <_malloc_r+0x56>
 8003042:	4f20      	ldr	r7, [pc, #128]	; (80030c4 <_malloc_r+0xb0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b923      	cbnz	r3, 8003052 <_malloc_r+0x3e>
 8003048:	4621      	mov	r1, r4
 800304a:	4630      	mov	r0, r6
 800304c:	f000 f8d8 	bl	8003200 <_sbrk_r>
 8003050:	6038      	str	r0, [r7, #0]
 8003052:	4629      	mov	r1, r5
 8003054:	4630      	mov	r0, r6
 8003056:	f000 f8d3 	bl	8003200 <_sbrk_r>
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	d123      	bne.n	80030a6 <_malloc_r+0x92>
 800305e:	230c      	movs	r3, #12
 8003060:	6033      	str	r3, [r6, #0]
 8003062:	4630      	mov	r0, r6
 8003064:	f000 fc2c 	bl	80038c0 <__malloc_unlock>
 8003068:	e7e3      	b.n	8003032 <_malloc_r+0x1e>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	1b5b      	subs	r3, r3, r5
 800306e:	d417      	bmi.n	80030a0 <_malloc_r+0x8c>
 8003070:	2b0b      	cmp	r3, #11
 8003072:	d903      	bls.n	800307c <_malloc_r+0x68>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	441c      	add	r4, r3
 8003078:	6025      	str	r5, [r4, #0]
 800307a:	e004      	b.n	8003086 <_malloc_r+0x72>
 800307c:	6863      	ldr	r3, [r4, #4]
 800307e:	42a2      	cmp	r2, r4
 8003080:	bf0c      	ite	eq
 8003082:	600b      	streq	r3, [r1, #0]
 8003084:	6053      	strne	r3, [r2, #4]
 8003086:	4630      	mov	r0, r6
 8003088:	f000 fc1a 	bl	80038c0 <__malloc_unlock>
 800308c:	f104 000b 	add.w	r0, r4, #11
 8003090:	1d23      	adds	r3, r4, #4
 8003092:	f020 0007 	bic.w	r0, r0, #7
 8003096:	1ac2      	subs	r2, r0, r3
 8003098:	d0cc      	beq.n	8003034 <_malloc_r+0x20>
 800309a:	1a1b      	subs	r3, r3, r0
 800309c:	50a3      	str	r3, [r4, r2]
 800309e:	e7c9      	b.n	8003034 <_malloc_r+0x20>
 80030a0:	4622      	mov	r2, r4
 80030a2:	6864      	ldr	r4, [r4, #4]
 80030a4:	e7cc      	b.n	8003040 <_malloc_r+0x2c>
 80030a6:	1cc4      	adds	r4, r0, #3
 80030a8:	f024 0403 	bic.w	r4, r4, #3
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d0e3      	beq.n	8003078 <_malloc_r+0x64>
 80030b0:	1a21      	subs	r1, r4, r0
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 f8a4 	bl	8003200 <_sbrk_r>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d1dd      	bne.n	8003078 <_malloc_r+0x64>
 80030bc:	e7cf      	b.n	800305e <_malloc_r+0x4a>
 80030be:	bf00      	nop
 80030c0:	200001c0 	.word	0x200001c0
 80030c4:	200001c4 	.word	0x200001c4

080030c8 <iprintf>:
 80030c8:	b40f      	push	{r0, r1, r2, r3}
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <iprintf+0x2c>)
 80030cc:	b513      	push	{r0, r1, r4, lr}
 80030ce:	681c      	ldr	r4, [r3, #0]
 80030d0:	b124      	cbz	r4, 80030dc <iprintf+0x14>
 80030d2:	69a3      	ldr	r3, [r4, #24]
 80030d4:	b913      	cbnz	r3, 80030dc <iprintf+0x14>
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 fac2 	bl	8003660 <__sinit>
 80030dc:	ab05      	add	r3, sp, #20
 80030de:	9a04      	ldr	r2, [sp, #16]
 80030e0:	68a1      	ldr	r1, [r4, #8]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	4620      	mov	r0, r4
 80030e6:	f000 fc1b 	bl	8003920 <_vfiprintf_r>
 80030ea:	b002      	add	sp, #8
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f0:	b004      	add	sp, #16
 80030f2:	4770      	bx	lr
 80030f4:	2000002c 	.word	0x2000002c

080030f8 <putchar>:
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <putchar+0x28>)
 80030fa:	b513      	push	{r0, r1, r4, lr}
 80030fc:	681c      	ldr	r4, [r3, #0]
 80030fe:	4601      	mov	r1, r0
 8003100:	b134      	cbz	r4, 8003110 <putchar+0x18>
 8003102:	69a3      	ldr	r3, [r4, #24]
 8003104:	b923      	cbnz	r3, 8003110 <putchar+0x18>
 8003106:	9001      	str	r0, [sp, #4]
 8003108:	4620      	mov	r0, r4
 800310a:	f000 faa9 	bl	8003660 <__sinit>
 800310e:	9901      	ldr	r1, [sp, #4]
 8003110:	68a2      	ldr	r2, [r4, #8]
 8003112:	4620      	mov	r0, r4
 8003114:	b002      	add	sp, #8
 8003116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800311a:	f000 bec5 	b.w	8003ea8 <_putc_r>
 800311e:	bf00      	nop
 8003120:	2000002c 	.word	0x2000002c

08003124 <srand>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <srand+0x44>)
 8003128:	681d      	ldr	r5, [r3, #0]
 800312a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800312c:	4604      	mov	r4, r0
 800312e:	b9b3      	cbnz	r3, 800315e <srand+0x3a>
 8003130:	2018      	movs	r0, #24
 8003132:	f7ff ff07 	bl	8002f44 <malloc>
 8003136:	4602      	mov	r2, r0
 8003138:	63a8      	str	r0, [r5, #56]	; 0x38
 800313a:	b920      	cbnz	r0, 8003146 <srand+0x22>
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <srand+0x48>)
 800313e:	480c      	ldr	r0, [pc, #48]	; (8003170 <srand+0x4c>)
 8003140:	2142      	movs	r1, #66	; 0x42
 8003142:	f000 f955 	bl	80033f0 <__assert_func>
 8003146:	490b      	ldr	r1, [pc, #44]	; (8003174 <srand+0x50>)
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <srand+0x54>)
 800314a:	e9c0 1300 	strd	r1, r3, [r0]
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <srand+0x58>)
 8003150:	6083      	str	r3, [r0, #8]
 8003152:	230b      	movs	r3, #11
 8003154:	8183      	strh	r3, [r0, #12]
 8003156:	2100      	movs	r1, #0
 8003158:	2001      	movs	r0, #1
 800315a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800315e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003160:	2200      	movs	r2, #0
 8003162:	611c      	str	r4, [r3, #16]
 8003164:	615a      	str	r2, [r3, #20]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	2000002c 	.word	0x2000002c
 800316c:	08004414 	.word	0x08004414
 8003170:	0800442b 	.word	0x0800442b
 8003174:	abcd330e 	.word	0xabcd330e
 8003178:	e66d1234 	.word	0xe66d1234
 800317c:	0005deec 	.word	0x0005deec

08003180 <rand>:
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <rand+0x60>)
 8003182:	b510      	push	{r4, lr}
 8003184:	681c      	ldr	r4, [r3, #0]
 8003186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003188:	b9b3      	cbnz	r3, 80031b8 <rand+0x38>
 800318a:	2018      	movs	r0, #24
 800318c:	f7ff feda 	bl	8002f44 <malloc>
 8003190:	63a0      	str	r0, [r4, #56]	; 0x38
 8003192:	b928      	cbnz	r0, 80031a0 <rand+0x20>
 8003194:	4602      	mov	r2, r0
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <rand+0x64>)
 8003198:	4813      	ldr	r0, [pc, #76]	; (80031e8 <rand+0x68>)
 800319a:	214e      	movs	r1, #78	; 0x4e
 800319c:	f000 f928 	bl	80033f0 <__assert_func>
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <rand+0x6c>)
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <rand+0x70>)
 80031a4:	e9c0 2300 	strd	r2, r3, [r0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <rand+0x74>)
 80031aa:	6083      	str	r3, [r0, #8]
 80031ac:	230b      	movs	r3, #11
 80031ae:	8183      	strh	r3, [r0, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	2300      	movs	r3, #0
 80031b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80031b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031ba:	480f      	ldr	r0, [pc, #60]	; (80031f8 <rand+0x78>)
 80031bc:	690a      	ldr	r2, [r1, #16]
 80031be:	694b      	ldr	r3, [r1, #20]
 80031c0:	4c0e      	ldr	r4, [pc, #56]	; (80031fc <rand+0x7c>)
 80031c2:	4350      	muls	r0, r2
 80031c4:	fb04 0003 	mla	r0, r4, r3, r0
 80031c8:	fba2 3404 	umull	r3, r4, r2, r4
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	4404      	add	r4, r0
 80031d0:	f144 0000 	adc.w	r0, r4, #0
 80031d4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80031d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	bf00      	nop
 80031e0:	2000002c 	.word	0x2000002c
 80031e4:	08004414 	.word	0x08004414
 80031e8:	0800442b 	.word	0x0800442b
 80031ec:	abcd330e 	.word	0xabcd330e
 80031f0:	e66d1234 	.word	0xe66d1234
 80031f4:	0005deec 	.word	0x0005deec
 80031f8:	5851f42d 	.word	0x5851f42d
 80031fc:	4c957f2d 	.word	0x4c957f2d

08003200 <_sbrk_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4d06      	ldr	r5, [pc, #24]	; (800321c <_sbrk_r+0x1c>)
 8003204:	2300      	movs	r3, #0
 8003206:	4604      	mov	r4, r0
 8003208:	4608      	mov	r0, r1
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	f7ff fd86 	bl	8002d1c <_sbrk>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_sbrk_r+0x1a>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	b103      	cbz	r3, 800321a <_sbrk_r+0x1a>
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	200001d8 	.word	0x200001d8

08003220 <setbuf>:
 8003220:	2900      	cmp	r1, #0
 8003222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003226:	bf0c      	ite	eq
 8003228:	2202      	moveq	r2, #2
 800322a:	2200      	movne	r2, #0
 800322c:	f000 b800 	b.w	8003230 <setvbuf>

08003230 <setvbuf>:
 8003230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003234:	461d      	mov	r5, r3
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <setvbuf+0x17c>)
 8003238:	681f      	ldr	r7, [r3, #0]
 800323a:	4604      	mov	r4, r0
 800323c:	460e      	mov	r6, r1
 800323e:	4690      	mov	r8, r2
 8003240:	b127      	cbz	r7, 800324c <setvbuf+0x1c>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	b913      	cbnz	r3, 800324c <setvbuf+0x1c>
 8003246:	4638      	mov	r0, r7
 8003248:	f000 fa0a 	bl	8003660 <__sinit>
 800324c:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <setvbuf+0x180>)
 800324e:	429c      	cmp	r4, r3
 8003250:	d167      	bne.n	8003322 <setvbuf+0xf2>
 8003252:	687c      	ldr	r4, [r7, #4]
 8003254:	f1b8 0f02 	cmp.w	r8, #2
 8003258:	d006      	beq.n	8003268 <setvbuf+0x38>
 800325a:	f1b8 0f01 	cmp.w	r8, #1
 800325e:	f200 809f 	bhi.w	80033a0 <setvbuf+0x170>
 8003262:	2d00      	cmp	r5, #0
 8003264:	f2c0 809c 	blt.w	80033a0 <setvbuf+0x170>
 8003268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800326a:	07db      	lsls	r3, r3, #31
 800326c:	d405      	bmi.n	800327a <setvbuf+0x4a>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	0598      	lsls	r0, r3, #22
 8003272:	d402      	bmi.n	800327a <setvbuf+0x4a>
 8003274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003276:	f000 fab6 	bl	80037e6 <__retarget_lock_acquire_recursive>
 800327a:	4621      	mov	r1, r4
 800327c:	4638      	mov	r0, r7
 800327e:	f000 f95b 	bl	8003538 <_fflush_r>
 8003282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003284:	b141      	cbz	r1, 8003298 <setvbuf+0x68>
 8003286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800328a:	4299      	cmp	r1, r3
 800328c:	d002      	beq.n	8003294 <setvbuf+0x64>
 800328e:	4638      	mov	r0, r7
 8003290:	f7ff fe70 	bl	8002f74 <_free_r>
 8003294:	2300      	movs	r3, #0
 8003296:	6363      	str	r3, [r4, #52]	; 0x34
 8003298:	2300      	movs	r3, #0
 800329a:	61a3      	str	r3, [r4, #24]
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	0619      	lsls	r1, r3, #24
 80032a2:	d503      	bpl.n	80032ac <setvbuf+0x7c>
 80032a4:	6921      	ldr	r1, [r4, #16]
 80032a6:	4638      	mov	r0, r7
 80032a8:	f7ff fe64 	bl	8002f74 <_free_r>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	f1b8 0f02 	cmp.w	r8, #2
 80032ba:	81a3      	strh	r3, [r4, #12]
 80032bc:	d06c      	beq.n	8003398 <setvbuf+0x168>
 80032be:	ab01      	add	r3, sp, #4
 80032c0:	466a      	mov	r2, sp
 80032c2:	4621      	mov	r1, r4
 80032c4:	4638      	mov	r0, r7
 80032c6:	f000 fa90 	bl	80037ea <__swhatbuf_r>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	4318      	orrs	r0, r3
 80032ce:	81a0      	strh	r0, [r4, #12]
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	d130      	bne.n	8003336 <setvbuf+0x106>
 80032d4:	9d00      	ldr	r5, [sp, #0]
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7ff fe34 	bl	8002f44 <malloc>
 80032dc:	4606      	mov	r6, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d155      	bne.n	800338e <setvbuf+0x15e>
 80032e2:	f8dd 9000 	ldr.w	r9, [sp]
 80032e6:	45a9      	cmp	r9, r5
 80032e8:	d14a      	bne.n	8003380 <setvbuf+0x150>
 80032ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80032ee:	2200      	movs	r2, #0
 80032f0:	60a2      	str	r2, [r4, #8]
 80032f2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80032f6:	6022      	str	r2, [r4, #0]
 80032f8:	6122      	str	r2, [r4, #16]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003300:	6162      	str	r2, [r4, #20]
 8003302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	07d2      	lsls	r2, r2, #31
 800330a:	81a3      	strh	r3, [r4, #12]
 800330c:	d405      	bmi.n	800331a <setvbuf+0xea>
 800330e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003312:	d102      	bne.n	800331a <setvbuf+0xea>
 8003314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003316:	f000 fa67 	bl	80037e8 <__retarget_lock_release_recursive>
 800331a:	4628      	mov	r0, r5
 800331c:	b003      	add	sp, #12
 800331e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <setvbuf+0x184>)
 8003324:	429c      	cmp	r4, r3
 8003326:	d101      	bne.n	800332c <setvbuf+0xfc>
 8003328:	68bc      	ldr	r4, [r7, #8]
 800332a:	e793      	b.n	8003254 <setvbuf+0x24>
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <setvbuf+0x188>)
 800332e:	429c      	cmp	r4, r3
 8003330:	bf08      	it	eq
 8003332:	68fc      	ldreq	r4, [r7, #12]
 8003334:	e78e      	b.n	8003254 <setvbuf+0x24>
 8003336:	2e00      	cmp	r6, #0
 8003338:	d0cd      	beq.n	80032d6 <setvbuf+0xa6>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	b913      	cbnz	r3, 8003344 <setvbuf+0x114>
 800333e:	4638      	mov	r0, r7
 8003340:	f000 f98e 	bl	8003660 <__sinit>
 8003344:	f1b8 0f01 	cmp.w	r8, #1
 8003348:	bf08      	it	eq
 800334a:	89a3      	ldrheq	r3, [r4, #12]
 800334c:	6026      	str	r6, [r4, #0]
 800334e:	bf04      	itt	eq
 8003350:	f043 0301 	orreq.w	r3, r3, #1
 8003354:	81a3      	strheq	r3, [r4, #12]
 8003356:	89a2      	ldrh	r2, [r4, #12]
 8003358:	f012 0308 	ands.w	r3, r2, #8
 800335c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003360:	d01c      	beq.n	800339c <setvbuf+0x16c>
 8003362:	07d3      	lsls	r3, r2, #31
 8003364:	bf41      	itttt	mi
 8003366:	2300      	movmi	r3, #0
 8003368:	426d      	negmi	r5, r5
 800336a:	60a3      	strmi	r3, [r4, #8]
 800336c:	61a5      	strmi	r5, [r4, #24]
 800336e:	bf58      	it	pl
 8003370:	60a5      	strpl	r5, [r4, #8]
 8003372:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003374:	f015 0501 	ands.w	r5, r5, #1
 8003378:	d115      	bne.n	80033a6 <setvbuf+0x176>
 800337a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800337e:	e7c8      	b.n	8003312 <setvbuf+0xe2>
 8003380:	4648      	mov	r0, r9
 8003382:	f7ff fddf 	bl	8002f44 <malloc>
 8003386:	4606      	mov	r6, r0
 8003388:	2800      	cmp	r0, #0
 800338a:	d0ae      	beq.n	80032ea <setvbuf+0xba>
 800338c:	464d      	mov	r5, r9
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	e7d0      	b.n	800333a <setvbuf+0x10a>
 8003398:	2500      	movs	r5, #0
 800339a:	e7a8      	b.n	80032ee <setvbuf+0xbe>
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	e7e8      	b.n	8003372 <setvbuf+0x142>
 80033a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80033a4:	e7b9      	b.n	800331a <setvbuf+0xea>
 80033a6:	2500      	movs	r5, #0
 80033a8:	e7b7      	b.n	800331a <setvbuf+0xea>
 80033aa:	bf00      	nop
 80033ac:	2000002c 	.word	0x2000002c
 80033b0:	080044e8 	.word	0x080044e8
 80033b4:	08004508 	.word	0x08004508
 80033b8:	080044c8 	.word	0x080044c8

080033bc <time>:
 80033bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <time+0x30>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	4669      	mov	r1, sp
 80033c4:	4604      	mov	r4, r0
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	f000 f9fa 	bl	80037c0 <_gettimeofday_r>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	bfbe      	ittt	lt
 80033d0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80033d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033d8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80033dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033e0:	b10c      	cbz	r4, 80033e6 <time+0x2a>
 80033e2:	e9c4 0100 	strd	r0, r1, [r4]
 80033e6:	b004      	add	sp, #16
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	bf00      	nop
 80033ec:	2000002c 	.word	0x2000002c

080033f0 <__assert_func>:
 80033f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033f2:	4614      	mov	r4, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <__assert_func+0x2c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4605      	mov	r5, r0
 80033fc:	68d8      	ldr	r0, [r3, #12]
 80033fe:	b14c      	cbz	r4, 8003414 <__assert_func+0x24>
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <__assert_func+0x30>)
 8003402:	9100      	str	r1, [sp, #0]
 8003404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <__assert_func+0x34>)
 800340a:	462b      	mov	r3, r5
 800340c:	f000 f9a6 	bl	800375c <fiprintf>
 8003410:	f000 fe96 	bl	8004140 <abort>
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <__assert_func+0x38>)
 8003416:	461c      	mov	r4, r3
 8003418:	e7f3      	b.n	8003402 <__assert_func+0x12>
 800341a:	bf00      	nop
 800341c:	2000002c 	.word	0x2000002c
 8003420:	0800448a 	.word	0x0800448a
 8003424:	08004497 	.word	0x08004497
 8003428:	080044c5 	.word	0x080044c5

0800342c <__sflush_r>:
 800342c:	898a      	ldrh	r2, [r1, #12]
 800342e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003432:	4605      	mov	r5, r0
 8003434:	0710      	lsls	r0, r2, #28
 8003436:	460c      	mov	r4, r1
 8003438:	d458      	bmi.n	80034ec <__sflush_r+0xc0>
 800343a:	684b      	ldr	r3, [r1, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	dc05      	bgt.n	800344c <__sflush_r+0x20>
 8003440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	dc02      	bgt.n	800344c <__sflush_r+0x20>
 8003446:	2000      	movs	r0, #0
 8003448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800344c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800344e:	2e00      	cmp	r6, #0
 8003450:	d0f9      	beq.n	8003446 <__sflush_r+0x1a>
 8003452:	2300      	movs	r3, #0
 8003454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003458:	682f      	ldr	r7, [r5, #0]
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	d032      	beq.n	80034c4 <__sflush_r+0x98>
 800345e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	075a      	lsls	r2, r3, #29
 8003464:	d505      	bpl.n	8003472 <__sflush_r+0x46>
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	1ac0      	subs	r0, r0, r3
 800346a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800346c:	b10b      	cbz	r3, 8003472 <__sflush_r+0x46>
 800346e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003470:	1ac0      	subs	r0, r0, r3
 8003472:	2300      	movs	r3, #0
 8003474:	4602      	mov	r2, r0
 8003476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003478:	6a21      	ldr	r1, [r4, #32]
 800347a:	4628      	mov	r0, r5
 800347c:	47b0      	blx	r6
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	d106      	bne.n	8003492 <__sflush_r+0x66>
 8003484:	6829      	ldr	r1, [r5, #0]
 8003486:	291d      	cmp	r1, #29
 8003488:	d82c      	bhi.n	80034e4 <__sflush_r+0xb8>
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <__sflush_r+0x108>)
 800348c:	40ca      	lsrs	r2, r1
 800348e:	07d6      	lsls	r6, r2, #31
 8003490:	d528      	bpl.n	80034e4 <__sflush_r+0xb8>
 8003492:	2200      	movs	r2, #0
 8003494:	6062      	str	r2, [r4, #4]
 8003496:	04d9      	lsls	r1, r3, #19
 8003498:	6922      	ldr	r2, [r4, #16]
 800349a:	6022      	str	r2, [r4, #0]
 800349c:	d504      	bpl.n	80034a8 <__sflush_r+0x7c>
 800349e:	1c42      	adds	r2, r0, #1
 80034a0:	d101      	bne.n	80034a6 <__sflush_r+0x7a>
 80034a2:	682b      	ldr	r3, [r5, #0]
 80034a4:	b903      	cbnz	r3, 80034a8 <__sflush_r+0x7c>
 80034a6:	6560      	str	r0, [r4, #84]	; 0x54
 80034a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034aa:	602f      	str	r7, [r5, #0]
 80034ac:	2900      	cmp	r1, #0
 80034ae:	d0ca      	beq.n	8003446 <__sflush_r+0x1a>
 80034b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034b4:	4299      	cmp	r1, r3
 80034b6:	d002      	beq.n	80034be <__sflush_r+0x92>
 80034b8:	4628      	mov	r0, r5
 80034ba:	f7ff fd5b 	bl	8002f74 <_free_r>
 80034be:	2000      	movs	r0, #0
 80034c0:	6360      	str	r0, [r4, #52]	; 0x34
 80034c2:	e7c1      	b.n	8003448 <__sflush_r+0x1c>
 80034c4:	6a21      	ldr	r1, [r4, #32]
 80034c6:	2301      	movs	r3, #1
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b0      	blx	r6
 80034cc:	1c41      	adds	r1, r0, #1
 80034ce:	d1c7      	bne.n	8003460 <__sflush_r+0x34>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0c4      	beq.n	8003460 <__sflush_r+0x34>
 80034d6:	2b1d      	cmp	r3, #29
 80034d8:	d001      	beq.n	80034de <__sflush_r+0xb2>
 80034da:	2b16      	cmp	r3, #22
 80034dc:	d101      	bne.n	80034e2 <__sflush_r+0xb6>
 80034de:	602f      	str	r7, [r5, #0]
 80034e0:	e7b1      	b.n	8003446 <__sflush_r+0x1a>
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	e7ad      	b.n	8003448 <__sflush_r+0x1c>
 80034ec:	690f      	ldr	r7, [r1, #16]
 80034ee:	2f00      	cmp	r7, #0
 80034f0:	d0a9      	beq.n	8003446 <__sflush_r+0x1a>
 80034f2:	0793      	lsls	r3, r2, #30
 80034f4:	680e      	ldr	r6, [r1, #0]
 80034f6:	bf08      	it	eq
 80034f8:	694b      	ldreq	r3, [r1, #20]
 80034fa:	600f      	str	r7, [r1, #0]
 80034fc:	bf18      	it	ne
 80034fe:	2300      	movne	r3, #0
 8003500:	eba6 0807 	sub.w	r8, r6, r7
 8003504:	608b      	str	r3, [r1, #8]
 8003506:	f1b8 0f00 	cmp.w	r8, #0
 800350a:	dd9c      	ble.n	8003446 <__sflush_r+0x1a>
 800350c:	6a21      	ldr	r1, [r4, #32]
 800350e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003510:	4643      	mov	r3, r8
 8003512:	463a      	mov	r2, r7
 8003514:	4628      	mov	r0, r5
 8003516:	47b0      	blx	r6
 8003518:	2800      	cmp	r0, #0
 800351a:	dc06      	bgt.n	800352a <__sflush_r+0xfe>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003528:	e78e      	b.n	8003448 <__sflush_r+0x1c>
 800352a:	4407      	add	r7, r0
 800352c:	eba8 0800 	sub.w	r8, r8, r0
 8003530:	e7e9      	b.n	8003506 <__sflush_r+0xda>
 8003532:	bf00      	nop
 8003534:	20400001 	.word	0x20400001

08003538 <_fflush_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	690b      	ldr	r3, [r1, #16]
 800353c:	4605      	mov	r5, r0
 800353e:	460c      	mov	r4, r1
 8003540:	b913      	cbnz	r3, 8003548 <_fflush_r+0x10>
 8003542:	2500      	movs	r5, #0
 8003544:	4628      	mov	r0, r5
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	b118      	cbz	r0, 8003552 <_fflush_r+0x1a>
 800354a:	6983      	ldr	r3, [r0, #24]
 800354c:	b90b      	cbnz	r3, 8003552 <_fflush_r+0x1a>
 800354e:	f000 f887 	bl	8003660 <__sinit>
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <_fflush_r+0x6c>)
 8003554:	429c      	cmp	r4, r3
 8003556:	d11b      	bne.n	8003590 <_fflush_r+0x58>
 8003558:	686c      	ldr	r4, [r5, #4]
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ef      	beq.n	8003542 <_fflush_r+0xa>
 8003562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003564:	07d0      	lsls	r0, r2, #31
 8003566:	d404      	bmi.n	8003572 <_fflush_r+0x3a>
 8003568:	0599      	lsls	r1, r3, #22
 800356a:	d402      	bmi.n	8003572 <_fflush_r+0x3a>
 800356c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356e:	f000 f93a 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8003572:	4628      	mov	r0, r5
 8003574:	4621      	mov	r1, r4
 8003576:	f7ff ff59 	bl	800342c <__sflush_r>
 800357a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357c:	07da      	lsls	r2, r3, #31
 800357e:	4605      	mov	r5, r0
 8003580:	d4e0      	bmi.n	8003544 <_fflush_r+0xc>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	d4dd      	bmi.n	8003544 <_fflush_r+0xc>
 8003588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358a:	f000 f92d 	bl	80037e8 <__retarget_lock_release_recursive>
 800358e:	e7d9      	b.n	8003544 <_fflush_r+0xc>
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <_fflush_r+0x70>)
 8003592:	429c      	cmp	r4, r3
 8003594:	d101      	bne.n	800359a <_fflush_r+0x62>
 8003596:	68ac      	ldr	r4, [r5, #8]
 8003598:	e7df      	b.n	800355a <_fflush_r+0x22>
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <_fflush_r+0x74>)
 800359c:	429c      	cmp	r4, r3
 800359e:	bf08      	it	eq
 80035a0:	68ec      	ldreq	r4, [r5, #12]
 80035a2:	e7da      	b.n	800355a <_fflush_r+0x22>
 80035a4:	080044e8 	.word	0x080044e8
 80035a8:	08004508 	.word	0x08004508
 80035ac:	080044c8 	.word	0x080044c8

080035b0 <std>:
 80035b0:	2300      	movs	r3, #0
 80035b2:	b510      	push	{r4, lr}
 80035b4:	4604      	mov	r4, r0
 80035b6:	e9c0 3300 	strd	r3, r3, [r0]
 80035ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035be:	6083      	str	r3, [r0, #8]
 80035c0:	8181      	strh	r1, [r0, #12]
 80035c2:	6643      	str	r3, [r0, #100]	; 0x64
 80035c4:	81c2      	strh	r2, [r0, #14]
 80035c6:	6183      	str	r3, [r0, #24]
 80035c8:	4619      	mov	r1, r3
 80035ca:	2208      	movs	r2, #8
 80035cc:	305c      	adds	r0, #92	; 0x5c
 80035ce:	f7ff fcc9 	bl	8002f64 <memset>
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <std+0x38>)
 80035d4:	6263      	str	r3, [r4, #36]	; 0x24
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <std+0x3c>)
 80035d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <std+0x40>)
 80035dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <std+0x44>)
 80035e0:	6224      	str	r4, [r4, #32]
 80035e2:	6323      	str	r3, [r4, #48]	; 0x30
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	08003f39 	.word	0x08003f39
 80035ec:	08003f5b 	.word	0x08003f5b
 80035f0:	08003f93 	.word	0x08003f93
 80035f4:	08003fb7 	.word	0x08003fb7

080035f8 <_cleanup_r>:
 80035f8:	4901      	ldr	r1, [pc, #4]	; (8003600 <_cleanup_r+0x8>)
 80035fa:	f000 b8c1 	b.w	8003780 <_fwalk_reent>
 80035fe:	bf00      	nop
 8003600:	08003539 	.word	0x08003539

08003604 <__sfmoreglue>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	1e4a      	subs	r2, r1, #1
 8003608:	2568      	movs	r5, #104	; 0x68
 800360a:	4355      	muls	r5, r2
 800360c:	460e      	mov	r6, r1
 800360e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003612:	f7ff fcff 	bl	8003014 <_malloc_r>
 8003616:	4604      	mov	r4, r0
 8003618:	b140      	cbz	r0, 800362c <__sfmoreglue+0x28>
 800361a:	2100      	movs	r1, #0
 800361c:	e9c0 1600 	strd	r1, r6, [r0]
 8003620:	300c      	adds	r0, #12
 8003622:	60a0      	str	r0, [r4, #8]
 8003624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003628:	f7ff fc9c 	bl	8002f64 <memset>
 800362c:	4620      	mov	r0, r4
 800362e:	bd70      	pop	{r4, r5, r6, pc}

08003630 <__sfp_lock_acquire>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__sfp_lock_acquire+0x8>)
 8003632:	f000 b8d8 	b.w	80037e6 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	200001d4 	.word	0x200001d4

0800363c <__sfp_lock_release>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__sfp_lock_release+0x8>)
 800363e:	f000 b8d3 	b.w	80037e8 <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	200001d4 	.word	0x200001d4

08003648 <__sinit_lock_acquire>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__sinit_lock_acquire+0x8>)
 800364a:	f000 b8cc 	b.w	80037e6 <__retarget_lock_acquire_recursive>
 800364e:	bf00      	nop
 8003650:	200001cf 	.word	0x200001cf

08003654 <__sinit_lock_release>:
 8003654:	4801      	ldr	r0, [pc, #4]	; (800365c <__sinit_lock_release+0x8>)
 8003656:	f000 b8c7 	b.w	80037e8 <__retarget_lock_release_recursive>
 800365a:	bf00      	nop
 800365c:	200001cf 	.word	0x200001cf

08003660 <__sinit>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	f7ff fff0 	bl	8003648 <__sinit_lock_acquire>
 8003668:	69a3      	ldr	r3, [r4, #24]
 800366a:	b11b      	cbz	r3, 8003674 <__sinit+0x14>
 800366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003670:	f7ff bff0 	b.w	8003654 <__sinit_lock_release>
 8003674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003678:	6523      	str	r3, [r4, #80]	; 0x50
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <__sinit+0x68>)
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <__sinit+0x6c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	62a2      	str	r2, [r4, #40]	; 0x28
 8003682:	42a3      	cmp	r3, r4
 8003684:	bf04      	itt	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	61a3      	streq	r3, [r4, #24]
 800368a:	4620      	mov	r0, r4
 800368c:	f000 f820 	bl	80036d0 <__sfp>
 8003690:	6060      	str	r0, [r4, #4]
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f81c 	bl	80036d0 <__sfp>
 8003698:	60a0      	str	r0, [r4, #8]
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f818 	bl	80036d0 <__sfp>
 80036a0:	2200      	movs	r2, #0
 80036a2:	60e0      	str	r0, [r4, #12]
 80036a4:	2104      	movs	r1, #4
 80036a6:	6860      	ldr	r0, [r4, #4]
 80036a8:	f7ff ff82 	bl	80035b0 <std>
 80036ac:	68a0      	ldr	r0, [r4, #8]
 80036ae:	2201      	movs	r2, #1
 80036b0:	2109      	movs	r1, #9
 80036b2:	f7ff ff7d 	bl	80035b0 <std>
 80036b6:	68e0      	ldr	r0, [r4, #12]
 80036b8:	2202      	movs	r2, #2
 80036ba:	2112      	movs	r1, #18
 80036bc:	f7ff ff78 	bl	80035b0 <std>
 80036c0:	2301      	movs	r3, #1
 80036c2:	61a3      	str	r3, [r4, #24]
 80036c4:	e7d2      	b.n	800366c <__sinit+0xc>
 80036c6:	bf00      	nop
 80036c8:	08004410 	.word	0x08004410
 80036cc:	080035f9 	.word	0x080035f9

080036d0 <__sfp>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	4607      	mov	r7, r0
 80036d4:	f7ff ffac 	bl	8003630 <__sfp_lock_acquire>
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <__sfp+0x84>)
 80036da:	681e      	ldr	r6, [r3, #0]
 80036dc:	69b3      	ldr	r3, [r6, #24]
 80036de:	b913      	cbnz	r3, 80036e6 <__sfp+0x16>
 80036e0:	4630      	mov	r0, r6
 80036e2:	f7ff ffbd 	bl	8003660 <__sinit>
 80036e6:	3648      	adds	r6, #72	; 0x48
 80036e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	d503      	bpl.n	80036f8 <__sfp+0x28>
 80036f0:	6833      	ldr	r3, [r6, #0]
 80036f2:	b30b      	cbz	r3, 8003738 <__sfp+0x68>
 80036f4:	6836      	ldr	r6, [r6, #0]
 80036f6:	e7f7      	b.n	80036e8 <__sfp+0x18>
 80036f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036fc:	b9d5      	cbnz	r5, 8003734 <__sfp+0x64>
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <__sfp+0x88>)
 8003700:	60e3      	str	r3, [r4, #12]
 8003702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003706:	6665      	str	r5, [r4, #100]	; 0x64
 8003708:	f000 f86c 	bl	80037e4 <__retarget_lock_init_recursive>
 800370c:	f7ff ff96 	bl	800363c <__sfp_lock_release>
 8003710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003718:	6025      	str	r5, [r4, #0]
 800371a:	61a5      	str	r5, [r4, #24]
 800371c:	2208      	movs	r2, #8
 800371e:	4629      	mov	r1, r5
 8003720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003724:	f7ff fc1e 	bl	8002f64 <memset>
 8003728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800372c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003730:	4620      	mov	r0, r4
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003734:	3468      	adds	r4, #104	; 0x68
 8003736:	e7d9      	b.n	80036ec <__sfp+0x1c>
 8003738:	2104      	movs	r1, #4
 800373a:	4638      	mov	r0, r7
 800373c:	f7ff ff62 	bl	8003604 <__sfmoreglue>
 8003740:	4604      	mov	r4, r0
 8003742:	6030      	str	r0, [r6, #0]
 8003744:	2800      	cmp	r0, #0
 8003746:	d1d5      	bne.n	80036f4 <__sfp+0x24>
 8003748:	f7ff ff78 	bl	800363c <__sfp_lock_release>
 800374c:	230c      	movs	r3, #12
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	e7ee      	b.n	8003730 <__sfp+0x60>
 8003752:	bf00      	nop
 8003754:	08004410 	.word	0x08004410
 8003758:	ffff0001 	.word	0xffff0001

0800375c <fiprintf>:
 800375c:	b40e      	push	{r1, r2, r3}
 800375e:	b503      	push	{r0, r1, lr}
 8003760:	4601      	mov	r1, r0
 8003762:	ab03      	add	r3, sp, #12
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <fiprintf+0x20>)
 8003766:	f853 2b04 	ldr.w	r2, [r3], #4
 800376a:	6800      	ldr	r0, [r0, #0]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f000 f8d7 	bl	8003920 <_vfiprintf_r>
 8003772:	b002      	add	sp, #8
 8003774:	f85d eb04 	ldr.w	lr, [sp], #4
 8003778:	b003      	add	sp, #12
 800377a:	4770      	bx	lr
 800377c:	2000002c 	.word	0x2000002c

08003780 <_fwalk_reent>:
 8003780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003784:	4606      	mov	r6, r0
 8003786:	4688      	mov	r8, r1
 8003788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800378c:	2700      	movs	r7, #0
 800378e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003792:	f1b9 0901 	subs.w	r9, r9, #1
 8003796:	d505      	bpl.n	80037a4 <_fwalk_reent+0x24>
 8003798:	6824      	ldr	r4, [r4, #0]
 800379a:	2c00      	cmp	r4, #0
 800379c:	d1f7      	bne.n	800378e <_fwalk_reent+0xe>
 800379e:	4638      	mov	r0, r7
 80037a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a4:	89ab      	ldrh	r3, [r5, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d907      	bls.n	80037ba <_fwalk_reent+0x3a>
 80037aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ae:	3301      	adds	r3, #1
 80037b0:	d003      	beq.n	80037ba <_fwalk_reent+0x3a>
 80037b2:	4629      	mov	r1, r5
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	4307      	orrs	r7, r0
 80037ba:	3568      	adds	r5, #104	; 0x68
 80037bc:	e7e9      	b.n	8003792 <_fwalk_reent+0x12>
	...

080037c0 <_gettimeofday_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d07      	ldr	r5, [pc, #28]	; (80037e0 <_gettimeofday_r+0x20>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	f000 fd59 	bl	8004284 <_gettimeofday>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d102      	bne.n	80037dc <_gettimeofday_r+0x1c>
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	b103      	cbz	r3, 80037dc <_gettimeofday_r+0x1c>
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	bd38      	pop	{r3, r4, r5, pc}
 80037de:	bf00      	nop
 80037e0:	200001d8 	.word	0x200001d8

080037e4 <__retarget_lock_init_recursive>:
 80037e4:	4770      	bx	lr

080037e6 <__retarget_lock_acquire_recursive>:
 80037e6:	4770      	bx	lr

080037e8 <__retarget_lock_release_recursive>:
 80037e8:	4770      	bx	lr

080037ea <__swhatbuf_r>:
 80037ea:	b570      	push	{r4, r5, r6, lr}
 80037ec:	460e      	mov	r6, r1
 80037ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f2:	2900      	cmp	r1, #0
 80037f4:	b096      	sub	sp, #88	; 0x58
 80037f6:	4614      	mov	r4, r2
 80037f8:	461d      	mov	r5, r3
 80037fa:	da07      	bge.n	800380c <__swhatbuf_r+0x22>
 80037fc:	2300      	movs	r3, #0
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	89b3      	ldrh	r3, [r6, #12]
 8003802:	061a      	lsls	r2, r3, #24
 8003804:	d410      	bmi.n	8003828 <__swhatbuf_r+0x3e>
 8003806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380a:	e00e      	b.n	800382a <__swhatbuf_r+0x40>
 800380c:	466a      	mov	r2, sp
 800380e:	f000 fcaf 	bl	8004170 <_fstat_r>
 8003812:	2800      	cmp	r0, #0
 8003814:	dbf2      	blt.n	80037fc <__swhatbuf_r+0x12>
 8003816:	9a01      	ldr	r2, [sp, #4]
 8003818:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800381c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003820:	425a      	negs	r2, r3
 8003822:	415a      	adcs	r2, r3
 8003824:	602a      	str	r2, [r5, #0]
 8003826:	e7ee      	b.n	8003806 <__swhatbuf_r+0x1c>
 8003828:	2340      	movs	r3, #64	; 0x40
 800382a:	2000      	movs	r0, #0
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	b016      	add	sp, #88	; 0x58
 8003830:	bd70      	pop	{r4, r5, r6, pc}
	...

08003834 <__smakebuf_r>:
 8003834:	898b      	ldrh	r3, [r1, #12]
 8003836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003838:	079d      	lsls	r5, r3, #30
 800383a:	4606      	mov	r6, r0
 800383c:	460c      	mov	r4, r1
 800383e:	d507      	bpl.n	8003850 <__smakebuf_r+0x1c>
 8003840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	6123      	str	r3, [r4, #16]
 8003848:	2301      	movs	r3, #1
 800384a:	6163      	str	r3, [r4, #20]
 800384c:	b002      	add	sp, #8
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	ab01      	add	r3, sp, #4
 8003852:	466a      	mov	r2, sp
 8003854:	f7ff ffc9 	bl	80037ea <__swhatbuf_r>
 8003858:	9900      	ldr	r1, [sp, #0]
 800385a:	4605      	mov	r5, r0
 800385c:	4630      	mov	r0, r6
 800385e:	f7ff fbd9 	bl	8003014 <_malloc_r>
 8003862:	b948      	cbnz	r0, 8003878 <__smakebuf_r+0x44>
 8003864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003868:	059a      	lsls	r2, r3, #22
 800386a:	d4ef      	bmi.n	800384c <__smakebuf_r+0x18>
 800386c:	f023 0303 	bic.w	r3, r3, #3
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	e7e3      	b.n	8003840 <__smakebuf_r+0xc>
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <__smakebuf_r+0x7c>)
 800387a:	62b3      	str	r3, [r6, #40]	; 0x28
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	6020      	str	r0, [r4, #0]
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	9b00      	ldr	r3, [sp, #0]
 8003888:	6163      	str	r3, [r4, #20]
 800388a:	9b01      	ldr	r3, [sp, #4]
 800388c:	6120      	str	r0, [r4, #16]
 800388e:	b15b      	cbz	r3, 80038a8 <__smakebuf_r+0x74>
 8003890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003894:	4630      	mov	r0, r6
 8003896:	f000 fc7d 	bl	8004194 <_isatty_r>
 800389a:	b128      	cbz	r0, 80038a8 <__smakebuf_r+0x74>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	89a0      	ldrh	r0, [r4, #12]
 80038aa:	4305      	orrs	r5, r0
 80038ac:	81a5      	strh	r5, [r4, #12]
 80038ae:	e7cd      	b.n	800384c <__smakebuf_r+0x18>
 80038b0:	080035f9 	.word	0x080035f9

080038b4 <__malloc_lock>:
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <__malloc_lock+0x8>)
 80038b6:	f7ff bf96 	b.w	80037e6 <__retarget_lock_acquire_recursive>
 80038ba:	bf00      	nop
 80038bc:	200001d0 	.word	0x200001d0

080038c0 <__malloc_unlock>:
 80038c0:	4801      	ldr	r0, [pc, #4]	; (80038c8 <__malloc_unlock+0x8>)
 80038c2:	f7ff bf91 	b.w	80037e8 <__retarget_lock_release_recursive>
 80038c6:	bf00      	nop
 80038c8:	200001d0 	.word	0x200001d0

080038cc <__sfputc_r>:
 80038cc:	6893      	ldr	r3, [r2, #8]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	b410      	push	{r4}
 80038d4:	6093      	str	r3, [r2, #8]
 80038d6:	da08      	bge.n	80038ea <__sfputc_r+0x1e>
 80038d8:	6994      	ldr	r4, [r2, #24]
 80038da:	42a3      	cmp	r3, r4
 80038dc:	db01      	blt.n	80038e2 <__sfputc_r+0x16>
 80038de:	290a      	cmp	r1, #10
 80038e0:	d103      	bne.n	80038ea <__sfputc_r+0x1e>
 80038e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038e6:	f000 bb6b 	b.w	8003fc0 <__swbuf_r>
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	1c58      	adds	r0, r3, #1
 80038ee:	6010      	str	r0, [r2, #0]
 80038f0:	7019      	strb	r1, [r3, #0]
 80038f2:	4608      	mov	r0, r1
 80038f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <__sfputs_r>:
 80038fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	4614      	mov	r4, r2
 8003902:	18d5      	adds	r5, r2, r3
 8003904:	42ac      	cmp	r4, r5
 8003906:	d101      	bne.n	800390c <__sfputs_r+0x12>
 8003908:	2000      	movs	r0, #0
 800390a:	e007      	b.n	800391c <__sfputs_r+0x22>
 800390c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003910:	463a      	mov	r2, r7
 8003912:	4630      	mov	r0, r6
 8003914:	f7ff ffda 	bl	80038cc <__sfputc_r>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d1f3      	bne.n	8003904 <__sfputs_r+0xa>
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003920 <_vfiprintf_r>:
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	460d      	mov	r5, r1
 8003926:	b09d      	sub	sp, #116	; 0x74
 8003928:	4614      	mov	r4, r2
 800392a:	4698      	mov	r8, r3
 800392c:	4606      	mov	r6, r0
 800392e:	b118      	cbz	r0, 8003938 <_vfiprintf_r+0x18>
 8003930:	6983      	ldr	r3, [r0, #24]
 8003932:	b90b      	cbnz	r3, 8003938 <_vfiprintf_r+0x18>
 8003934:	f7ff fe94 	bl	8003660 <__sinit>
 8003938:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <_vfiprintf_r+0x240>)
 800393a:	429d      	cmp	r5, r3
 800393c:	d11b      	bne.n	8003976 <_vfiprintf_r+0x56>
 800393e:	6875      	ldr	r5, [r6, #4]
 8003940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003942:	07d9      	lsls	r1, r3, #31
 8003944:	d405      	bmi.n	8003952 <_vfiprintf_r+0x32>
 8003946:	89ab      	ldrh	r3, [r5, #12]
 8003948:	059a      	lsls	r2, r3, #22
 800394a:	d402      	bmi.n	8003952 <_vfiprintf_r+0x32>
 800394c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800394e:	f7ff ff4a 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	d501      	bpl.n	800395c <_vfiprintf_r+0x3c>
 8003958:	692b      	ldr	r3, [r5, #16]
 800395a:	b9eb      	cbnz	r3, 8003998 <_vfiprintf_r+0x78>
 800395c:	4629      	mov	r1, r5
 800395e:	4630      	mov	r0, r6
 8003960:	f000 fb80 	bl	8004064 <__swsetup_r>
 8003964:	b1c0      	cbz	r0, 8003998 <_vfiprintf_r+0x78>
 8003966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003968:	07dc      	lsls	r4, r3, #31
 800396a:	d50e      	bpl.n	800398a <_vfiprintf_r+0x6a>
 800396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003970:	b01d      	add	sp, #116	; 0x74
 8003972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003976:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <_vfiprintf_r+0x244>)
 8003978:	429d      	cmp	r5, r3
 800397a:	d101      	bne.n	8003980 <_vfiprintf_r+0x60>
 800397c:	68b5      	ldr	r5, [r6, #8]
 800397e:	e7df      	b.n	8003940 <_vfiprintf_r+0x20>
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <_vfiprintf_r+0x248>)
 8003982:	429d      	cmp	r5, r3
 8003984:	bf08      	it	eq
 8003986:	68f5      	ldreq	r5, [r6, #12]
 8003988:	e7da      	b.n	8003940 <_vfiprintf_r+0x20>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	0598      	lsls	r0, r3, #22
 800398e:	d4ed      	bmi.n	800396c <_vfiprintf_r+0x4c>
 8003990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003992:	f7ff ff29 	bl	80037e8 <__retarget_lock_release_recursive>
 8003996:	e7e9      	b.n	800396c <_vfiprintf_r+0x4c>
 8003998:	2300      	movs	r3, #0
 800399a:	9309      	str	r3, [sp, #36]	; 0x24
 800399c:	2320      	movs	r3, #32
 800399e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a6:	2330      	movs	r3, #48	; 0x30
 80039a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b6c <_vfiprintf_r+0x24c>
 80039ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b0:	f04f 0901 	mov.w	r9, #1
 80039b4:	4623      	mov	r3, r4
 80039b6:	469a      	mov	sl, r3
 80039b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039bc:	b10a      	cbz	r2, 80039c2 <_vfiprintf_r+0xa2>
 80039be:	2a25      	cmp	r2, #37	; 0x25
 80039c0:	d1f9      	bne.n	80039b6 <_vfiprintf_r+0x96>
 80039c2:	ebba 0b04 	subs.w	fp, sl, r4
 80039c6:	d00b      	beq.n	80039e0 <_vfiprintf_r+0xc0>
 80039c8:	465b      	mov	r3, fp
 80039ca:	4622      	mov	r2, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff ff93 	bl	80038fa <__sfputs_r>
 80039d4:	3001      	adds	r0, #1
 80039d6:	f000 80aa 	beq.w	8003b2e <_vfiprintf_r+0x20e>
 80039da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039dc:	445a      	add	r2, fp
 80039de:	9209      	str	r2, [sp, #36]	; 0x24
 80039e0:	f89a 3000 	ldrb.w	r3, [sl]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a2 	beq.w	8003b2e <_vfiprintf_r+0x20e>
 80039ea:	2300      	movs	r3, #0
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f4:	f10a 0a01 	add.w	sl, sl, #1
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	9307      	str	r3, [sp, #28]
 80039fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a00:	931a      	str	r3, [sp, #104]	; 0x68
 8003a02:	4654      	mov	r4, sl
 8003a04:	2205      	movs	r2, #5
 8003a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0a:	4858      	ldr	r0, [pc, #352]	; (8003b6c <_vfiprintf_r+0x24c>)
 8003a0c:	f7fc fbe8 	bl	80001e0 <memchr>
 8003a10:	9a04      	ldr	r2, [sp, #16]
 8003a12:	b9d8      	cbnz	r0, 8003a4c <_vfiprintf_r+0x12c>
 8003a14:	06d1      	lsls	r1, r2, #27
 8003a16:	bf44      	itt	mi
 8003a18:	2320      	movmi	r3, #32
 8003a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a1e:	0713      	lsls	r3, r2, #28
 8003a20:	bf44      	itt	mi
 8003a22:	232b      	movmi	r3, #43	; 0x2b
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a28:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2e:	d015      	beq.n	8003a5c <_vfiprintf_r+0x13c>
 8003a30:	9a07      	ldr	r2, [sp, #28]
 8003a32:	4654      	mov	r4, sl
 8003a34:	2000      	movs	r0, #0
 8003a36:	f04f 0c0a 	mov.w	ip, #10
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a40:	3b30      	subs	r3, #48	; 0x30
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	d94e      	bls.n	8003ae4 <_vfiprintf_r+0x1c4>
 8003a46:	b1b0      	cbz	r0, 8003a76 <_vfiprintf_r+0x156>
 8003a48:	9207      	str	r2, [sp, #28]
 8003a4a:	e014      	b.n	8003a76 <_vfiprintf_r+0x156>
 8003a4c:	eba0 0308 	sub.w	r3, r0, r8
 8003a50:	fa09 f303 	lsl.w	r3, r9, r3
 8003a54:	4313      	orrs	r3, r2
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	46a2      	mov	sl, r4
 8003a5a:	e7d2      	b.n	8003a02 <_vfiprintf_r+0xe2>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	1d19      	adds	r1, r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	9103      	str	r1, [sp, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bfbb      	ittet	lt
 8003a68:	425b      	neglt	r3, r3
 8003a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a6e:	9307      	strge	r3, [sp, #28]
 8003a70:	9307      	strlt	r3, [sp, #28]
 8003a72:	bfb8      	it	lt
 8003a74:	9204      	strlt	r2, [sp, #16]
 8003a76:	7823      	ldrb	r3, [r4, #0]
 8003a78:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7a:	d10c      	bne.n	8003a96 <_vfiprintf_r+0x176>
 8003a7c:	7863      	ldrb	r3, [r4, #1]
 8003a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a80:	d135      	bne.n	8003aee <_vfiprintf_r+0x1ce>
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	9203      	str	r2, [sp, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfb8      	it	lt
 8003a8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a92:	3402      	adds	r4, #2
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b7c <_vfiprintf_r+0x25c>
 8003a9a:	7821      	ldrb	r1, [r4, #0]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4650      	mov	r0, sl
 8003aa0:	f7fc fb9e 	bl	80001e0 <memchr>
 8003aa4:	b140      	cbz	r0, 8003ab8 <_vfiprintf_r+0x198>
 8003aa6:	2340      	movs	r3, #64	; 0x40
 8003aa8:	eba0 000a 	sub.w	r0, r0, sl
 8003aac:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	4303      	orrs	r3, r0
 8003ab4:	3401      	adds	r4, #1
 8003ab6:	9304      	str	r3, [sp, #16]
 8003ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abc:	482c      	ldr	r0, [pc, #176]	; (8003b70 <_vfiprintf_r+0x250>)
 8003abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac2:	2206      	movs	r2, #6
 8003ac4:	f7fc fb8c 	bl	80001e0 <memchr>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d03f      	beq.n	8003b4c <_vfiprintf_r+0x22c>
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <_vfiprintf_r+0x254>)
 8003ace:	bb1b      	cbnz	r3, 8003b18 <_vfiprintf_r+0x1f8>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	3308      	adds	r3, #8
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ade:	443b      	add	r3, r7
 8003ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae2:	e767      	b.n	80039b4 <_vfiprintf_r+0x94>
 8003ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae8:	460c      	mov	r4, r1
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7a5      	b.n	8003a3a <_vfiprintf_r+0x11a>
 8003aee:	2300      	movs	r3, #0
 8003af0:	3401      	adds	r4, #1
 8003af2:	9305      	str	r3, [sp, #20]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0c0a 	mov.w	ip, #10
 8003afa:	4620      	mov	r0, r4
 8003afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b00:	3a30      	subs	r2, #48	; 0x30
 8003b02:	2a09      	cmp	r2, #9
 8003b04:	d903      	bls.n	8003b0e <_vfiprintf_r+0x1ee>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c5      	beq.n	8003a96 <_vfiprintf_r+0x176>
 8003b0a:	9105      	str	r1, [sp, #20]
 8003b0c:	e7c3      	b.n	8003a96 <_vfiprintf_r+0x176>
 8003b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b12:	4604      	mov	r4, r0
 8003b14:	2301      	movs	r3, #1
 8003b16:	e7f0      	b.n	8003afa <_vfiprintf_r+0x1da>
 8003b18:	ab03      	add	r3, sp, #12
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <_vfiprintf_r+0x258>)
 8003b20:	a904      	add	r1, sp, #16
 8003b22:	4630      	mov	r0, r6
 8003b24:	f3af 8000 	nop.w
 8003b28:	4607      	mov	r7, r0
 8003b2a:	1c78      	adds	r0, r7, #1
 8003b2c:	d1d6      	bne.n	8003adc <_vfiprintf_r+0x1bc>
 8003b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b30:	07d9      	lsls	r1, r3, #31
 8003b32:	d405      	bmi.n	8003b40 <_vfiprintf_r+0x220>
 8003b34:	89ab      	ldrh	r3, [r5, #12]
 8003b36:	059a      	lsls	r2, r3, #22
 8003b38:	d402      	bmi.n	8003b40 <_vfiprintf_r+0x220>
 8003b3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b3c:	f7ff fe54 	bl	80037e8 <__retarget_lock_release_recursive>
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	065b      	lsls	r3, r3, #25
 8003b44:	f53f af12 	bmi.w	800396c <_vfiprintf_r+0x4c>
 8003b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b4a:	e711      	b.n	8003970 <_vfiprintf_r+0x50>
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <_vfiprintf_r+0x258>)
 8003b54:	a904      	add	r1, sp, #16
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 f880 	bl	8003c5c <_printf_i>
 8003b5c:	e7e4      	b.n	8003b28 <_vfiprintf_r+0x208>
 8003b5e:	bf00      	nop
 8003b60:	080044e8 	.word	0x080044e8
 8003b64:	08004508 	.word	0x08004508
 8003b68:	080044c8 	.word	0x080044c8
 8003b6c:	08004528 	.word	0x08004528
 8003b70:	08004532 	.word	0x08004532
 8003b74:	00000000 	.word	0x00000000
 8003b78:	080038fb 	.word	0x080038fb
 8003b7c:	0800452e 	.word	0x0800452e

08003b80 <_printf_common>:
 8003b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	4616      	mov	r6, r2
 8003b86:	4699      	mov	r9, r3
 8003b88:	688a      	ldr	r2, [r1, #8]
 8003b8a:	690b      	ldr	r3, [r1, #16]
 8003b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bfb8      	it	lt
 8003b94:	4613      	movlt	r3, r2
 8003b96:	6033      	str	r3, [r6, #0]
 8003b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	b10a      	cbz	r2, 8003ba6 <_printf_common+0x26>
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	0699      	lsls	r1, r3, #26
 8003baa:	bf42      	ittt	mi
 8003bac:	6833      	ldrmi	r3, [r6, #0]
 8003bae:	3302      	addmi	r3, #2
 8003bb0:	6033      	strmi	r3, [r6, #0]
 8003bb2:	6825      	ldr	r5, [r4, #0]
 8003bb4:	f015 0506 	ands.w	r5, r5, #6
 8003bb8:	d106      	bne.n	8003bc8 <_printf_common+0x48>
 8003bba:	f104 0a19 	add.w	sl, r4, #25
 8003bbe:	68e3      	ldr	r3, [r4, #12]
 8003bc0:	6832      	ldr	r2, [r6, #0]
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	42ab      	cmp	r3, r5
 8003bc6:	dc26      	bgt.n	8003c16 <_printf_common+0x96>
 8003bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bcc:	1e13      	subs	r3, r2, #0
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	bf18      	it	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	0692      	lsls	r2, r2, #26
 8003bd6:	d42b      	bmi.n	8003c30 <_printf_common+0xb0>
 8003bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4638      	mov	r0, r7
 8003be0:	47c0      	blx	r8
 8003be2:	3001      	adds	r0, #1
 8003be4:	d01e      	beq.n	8003c24 <_printf_common+0xa4>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	68e5      	ldr	r5, [r4, #12]
 8003bea:	6832      	ldr	r2, [r6, #0]
 8003bec:	f003 0306 	and.w	r3, r3, #6
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	bf08      	it	eq
 8003bf4:	1aad      	subeq	r5, r5, r2
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	6922      	ldr	r2, [r4, #16]
 8003bfa:	bf0c      	ite	eq
 8003bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c00:	2500      	movne	r5, #0
 8003c02:	4293      	cmp	r3, r2
 8003c04:	bfc4      	itt	gt
 8003c06:	1a9b      	subgt	r3, r3, r2
 8003c08:	18ed      	addgt	r5, r5, r3
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	341a      	adds	r4, #26
 8003c0e:	42b5      	cmp	r5, r6
 8003c10:	d11a      	bne.n	8003c48 <_printf_common+0xc8>
 8003c12:	2000      	movs	r0, #0
 8003c14:	e008      	b.n	8003c28 <_printf_common+0xa8>
 8003c16:	2301      	movs	r3, #1
 8003c18:	4652      	mov	r2, sl
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	47c0      	blx	r8
 8003c20:	3001      	adds	r0, #1
 8003c22:	d103      	bne.n	8003c2c <_printf_common+0xac>
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2c:	3501      	adds	r5, #1
 8003c2e:	e7c6      	b.n	8003bbe <_printf_common+0x3e>
 8003c30:	18e1      	adds	r1, r4, r3
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	2030      	movs	r0, #48	; 0x30
 8003c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3a:	4422      	add	r2, r4
 8003c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c44:	3302      	adds	r3, #2
 8003c46:	e7c7      	b.n	8003bd8 <_printf_common+0x58>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	4638      	mov	r0, r7
 8003c50:	47c0      	blx	r8
 8003c52:	3001      	adds	r0, #1
 8003c54:	d0e6      	beq.n	8003c24 <_printf_common+0xa4>
 8003c56:	3601      	adds	r6, #1
 8003c58:	e7d9      	b.n	8003c0e <_printf_common+0x8e>
	...

08003c5c <_printf_i>:
 8003c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c60:	460c      	mov	r4, r1
 8003c62:	4691      	mov	r9, r2
 8003c64:	7e27      	ldrb	r7, [r4, #24]
 8003c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c68:	2f78      	cmp	r7, #120	; 0x78
 8003c6a:	4680      	mov	r8, r0
 8003c6c:	469a      	mov	sl, r3
 8003c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c72:	d807      	bhi.n	8003c84 <_printf_i+0x28>
 8003c74:	2f62      	cmp	r7, #98	; 0x62
 8003c76:	d80a      	bhi.n	8003c8e <_printf_i+0x32>
 8003c78:	2f00      	cmp	r7, #0
 8003c7a:	f000 80d8 	beq.w	8003e2e <_printf_i+0x1d2>
 8003c7e:	2f58      	cmp	r7, #88	; 0x58
 8003c80:	f000 80a3 	beq.w	8003dca <_printf_i+0x16e>
 8003c84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c8c:	e03a      	b.n	8003d04 <_printf_i+0xa8>
 8003c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c92:	2b15      	cmp	r3, #21
 8003c94:	d8f6      	bhi.n	8003c84 <_printf_i+0x28>
 8003c96:	a001      	add	r0, pc, #4	; (adr r0, 8003c9c <_printf_i+0x40>)
 8003c98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c9c:	08003cf5 	.word	0x08003cf5
 8003ca0:	08003d09 	.word	0x08003d09
 8003ca4:	08003c85 	.word	0x08003c85
 8003ca8:	08003c85 	.word	0x08003c85
 8003cac:	08003c85 	.word	0x08003c85
 8003cb0:	08003c85 	.word	0x08003c85
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003c85 	.word	0x08003c85
 8003cbc:	08003c85 	.word	0x08003c85
 8003cc0:	08003c85 	.word	0x08003c85
 8003cc4:	08003c85 	.word	0x08003c85
 8003cc8:	08003e15 	.word	0x08003e15
 8003ccc:	08003d39 	.word	0x08003d39
 8003cd0:	08003df7 	.word	0x08003df7
 8003cd4:	08003c85 	.word	0x08003c85
 8003cd8:	08003c85 	.word	0x08003c85
 8003cdc:	08003e37 	.word	0x08003e37
 8003ce0:	08003c85 	.word	0x08003c85
 8003ce4:	08003d39 	.word	0x08003d39
 8003ce8:	08003c85 	.word	0x08003c85
 8003cec:	08003c85 	.word	0x08003c85
 8003cf0:	08003dff 	.word	0x08003dff
 8003cf4:	680b      	ldr	r3, [r1, #0]
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	600a      	str	r2, [r1, #0]
 8003cfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0a3      	b.n	8003e50 <_printf_i+0x1f4>
 8003d08:	6825      	ldr	r5, [r4, #0]
 8003d0a:	6808      	ldr	r0, [r1, #0]
 8003d0c:	062e      	lsls	r6, r5, #24
 8003d0e:	f100 0304 	add.w	r3, r0, #4
 8003d12:	d50a      	bpl.n	8003d2a <_printf_i+0xce>
 8003d14:	6805      	ldr	r5, [r0, #0]
 8003d16:	600b      	str	r3, [r1, #0]
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	da03      	bge.n	8003d24 <_printf_i+0xc8>
 8003d1c:	232d      	movs	r3, #45	; 0x2d
 8003d1e:	426d      	negs	r5, r5
 8003d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d24:	485e      	ldr	r0, [pc, #376]	; (8003ea0 <_printf_i+0x244>)
 8003d26:	230a      	movs	r3, #10
 8003d28:	e019      	b.n	8003d5e <_printf_i+0x102>
 8003d2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d2e:	6805      	ldr	r5, [r0, #0]
 8003d30:	600b      	str	r3, [r1, #0]
 8003d32:	bf18      	it	ne
 8003d34:	b22d      	sxthne	r5, r5
 8003d36:	e7ef      	b.n	8003d18 <_printf_i+0xbc>
 8003d38:	680b      	ldr	r3, [r1, #0]
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	1d18      	adds	r0, r3, #4
 8003d3e:	6008      	str	r0, [r1, #0]
 8003d40:	0628      	lsls	r0, r5, #24
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0xec>
 8003d44:	681d      	ldr	r5, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0xf2>
 8003d48:	0669      	lsls	r1, r5, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0xe8>
 8003d4c:	881d      	ldrh	r5, [r3, #0]
 8003d4e:	4854      	ldr	r0, [pc, #336]	; (8003ea0 <_printf_i+0x244>)
 8003d50:	2f6f      	cmp	r7, #111	; 0x6f
 8003d52:	bf0c      	ite	eq
 8003d54:	2308      	moveq	r3, #8
 8003d56:	230a      	movne	r3, #10
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d5e:	6866      	ldr	r6, [r4, #4]
 8003d60:	60a6      	str	r6, [r4, #8]
 8003d62:	2e00      	cmp	r6, #0
 8003d64:	bfa2      	ittt	ge
 8003d66:	6821      	ldrge	r1, [r4, #0]
 8003d68:	f021 0104 	bicge.w	r1, r1, #4
 8003d6c:	6021      	strge	r1, [r4, #0]
 8003d6e:	b90d      	cbnz	r5, 8003d74 <_printf_i+0x118>
 8003d70:	2e00      	cmp	r6, #0
 8003d72:	d04d      	beq.n	8003e10 <_printf_i+0x1b4>
 8003d74:	4616      	mov	r6, r2
 8003d76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d7e:	5dc7      	ldrb	r7, [r0, r7]
 8003d80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d84:	462f      	mov	r7, r5
 8003d86:	42bb      	cmp	r3, r7
 8003d88:	460d      	mov	r5, r1
 8003d8a:	d9f4      	bls.n	8003d76 <_printf_i+0x11a>
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10b      	bne.n	8003da8 <_printf_i+0x14c>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	07df      	lsls	r7, r3, #31
 8003d94:	d508      	bpl.n	8003da8 <_printf_i+0x14c>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	6861      	ldr	r1, [r4, #4]
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	bfde      	ittt	le
 8003d9e:	2330      	movle	r3, #48	; 0x30
 8003da0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003da4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003da8:	1b92      	subs	r2, r2, r6
 8003daa:	6122      	str	r2, [r4, #16]
 8003dac:	f8cd a000 	str.w	sl, [sp]
 8003db0:	464b      	mov	r3, r9
 8003db2:	aa03      	add	r2, sp, #12
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7ff fee2 	bl	8003b80 <_printf_common>
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d14c      	bne.n	8003e5a <_printf_i+0x1fe>
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc4:	b004      	add	sp, #16
 8003dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dca:	4835      	ldr	r0, [pc, #212]	; (8003ea0 <_printf_i+0x244>)
 8003dcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	680e      	ldr	r6, [r1, #0]
 8003dd4:	061f      	lsls	r7, r3, #24
 8003dd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dda:	600e      	str	r6, [r1, #0]
 8003ddc:	d514      	bpl.n	8003e08 <_printf_i+0x1ac>
 8003dde:	07d9      	lsls	r1, r3, #31
 8003de0:	bf44      	itt	mi
 8003de2:	f043 0320 	orrmi.w	r3, r3, #32
 8003de6:	6023      	strmi	r3, [r4, #0]
 8003de8:	b91d      	cbnz	r5, 8003df2 <_printf_i+0x196>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	f023 0320 	bic.w	r3, r3, #32
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	2310      	movs	r3, #16
 8003df4:	e7b0      	b.n	8003d58 <_printf_i+0xfc>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	2378      	movs	r3, #120	; 0x78
 8003e00:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <_printf_i+0x248>)
 8003e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e06:	e7e3      	b.n	8003dd0 <_printf_i+0x174>
 8003e08:	065e      	lsls	r6, r3, #25
 8003e0a:	bf48      	it	mi
 8003e0c:	b2ad      	uxthmi	r5, r5
 8003e0e:	e7e6      	b.n	8003dde <_printf_i+0x182>
 8003e10:	4616      	mov	r6, r2
 8003e12:	e7bb      	b.n	8003d8c <_printf_i+0x130>
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	6826      	ldr	r6, [r4, #0]
 8003e18:	6960      	ldr	r0, [r4, #20]
 8003e1a:	1d1d      	adds	r5, r3, #4
 8003e1c:	600d      	str	r5, [r1, #0]
 8003e1e:	0635      	lsls	r5, r6, #24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	d501      	bpl.n	8003e28 <_printf_i+0x1cc>
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	e002      	b.n	8003e2e <_printf_i+0x1d2>
 8003e28:	0671      	lsls	r1, r6, #25
 8003e2a:	d5fb      	bpl.n	8003e24 <_printf_i+0x1c8>
 8003e2c:	8018      	strh	r0, [r3, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6123      	str	r3, [r4, #16]
 8003e32:	4616      	mov	r6, r2
 8003e34:	e7ba      	b.n	8003dac <_printf_i+0x150>
 8003e36:	680b      	ldr	r3, [r1, #0]
 8003e38:	1d1a      	adds	r2, r3, #4
 8003e3a:	600a      	str	r2, [r1, #0]
 8003e3c:	681e      	ldr	r6, [r3, #0]
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7fc f9cc 	bl	80001e0 <memchr>
 8003e48:	b108      	cbz	r0, 8003e4e <_printf_i+0x1f2>
 8003e4a:	1b80      	subs	r0, r0, r6
 8003e4c:	6060      	str	r0, [r4, #4]
 8003e4e:	6863      	ldr	r3, [r4, #4]
 8003e50:	6123      	str	r3, [r4, #16]
 8003e52:	2300      	movs	r3, #0
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e58:	e7a8      	b.n	8003dac <_printf_i+0x150>
 8003e5a:	6923      	ldr	r3, [r4, #16]
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4640      	mov	r0, r8
 8003e62:	47d0      	blx	sl
 8003e64:	3001      	adds	r0, #1
 8003e66:	d0ab      	beq.n	8003dc0 <_printf_i+0x164>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	079b      	lsls	r3, r3, #30
 8003e6c:	d413      	bmi.n	8003e96 <_printf_i+0x23a>
 8003e6e:	68e0      	ldr	r0, [r4, #12]
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	4298      	cmp	r0, r3
 8003e74:	bfb8      	it	lt
 8003e76:	4618      	movlt	r0, r3
 8003e78:	e7a4      	b.n	8003dc4 <_printf_i+0x168>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	4649      	mov	r1, r9
 8003e80:	4640      	mov	r0, r8
 8003e82:	47d0      	blx	sl
 8003e84:	3001      	adds	r0, #1
 8003e86:	d09b      	beq.n	8003dc0 <_printf_i+0x164>
 8003e88:	3501      	adds	r5, #1
 8003e8a:	68e3      	ldr	r3, [r4, #12]
 8003e8c:	9903      	ldr	r1, [sp, #12]
 8003e8e:	1a5b      	subs	r3, r3, r1
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	dcf2      	bgt.n	8003e7a <_printf_i+0x21e>
 8003e94:	e7eb      	b.n	8003e6e <_printf_i+0x212>
 8003e96:	2500      	movs	r5, #0
 8003e98:	f104 0619 	add.w	r6, r4, #25
 8003e9c:	e7f5      	b.n	8003e8a <_printf_i+0x22e>
 8003e9e:	bf00      	nop
 8003ea0:	08004539 	.word	0x08004539
 8003ea4:	0800454a 	.word	0x0800454a

08003ea8 <_putc_r>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	460d      	mov	r5, r1
 8003eac:	4614      	mov	r4, r2
 8003eae:	4606      	mov	r6, r0
 8003eb0:	b118      	cbz	r0, 8003eba <_putc_r+0x12>
 8003eb2:	6983      	ldr	r3, [r0, #24]
 8003eb4:	b90b      	cbnz	r3, 8003eba <_putc_r+0x12>
 8003eb6:	f7ff fbd3 	bl	8003660 <__sinit>
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <_putc_r+0x84>)
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d124      	bne.n	8003f0a <_putc_r+0x62>
 8003ec0:	6874      	ldr	r4, [r6, #4]
 8003ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec4:	07d8      	lsls	r0, r3, #31
 8003ec6:	d405      	bmi.n	8003ed4 <_putc_r+0x2c>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	0599      	lsls	r1, r3, #22
 8003ecc:	d402      	bmi.n	8003ed4 <_putc_r+0x2c>
 8003ece:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ed0:	f7ff fc89 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8003ed4:	68a3      	ldr	r3, [r4, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	da05      	bge.n	8003eea <_putc_r+0x42>
 8003ede:	69a2      	ldr	r2, [r4, #24]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	db1c      	blt.n	8003f1e <_putc_r+0x76>
 8003ee4:	b2eb      	uxtb	r3, r5
 8003ee6:	2b0a      	cmp	r3, #10
 8003ee8:	d019      	beq.n	8003f1e <_putc_r+0x76>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	6022      	str	r2, [r4, #0]
 8003ef0:	701d      	strb	r5, [r3, #0]
 8003ef2:	b2ed      	uxtb	r5, r5
 8003ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef6:	07da      	lsls	r2, r3, #31
 8003ef8:	d405      	bmi.n	8003f06 <_putc_r+0x5e>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	059b      	lsls	r3, r3, #22
 8003efe:	d402      	bmi.n	8003f06 <_putc_r+0x5e>
 8003f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f02:	f7ff fc71 	bl	80037e8 <__retarget_lock_release_recursive>
 8003f06:	4628      	mov	r0, r5
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <_putc_r+0x88>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d101      	bne.n	8003f14 <_putc_r+0x6c>
 8003f10:	68b4      	ldr	r4, [r6, #8]
 8003f12:	e7d6      	b.n	8003ec2 <_putc_r+0x1a>
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_putc_r+0x8c>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	bf08      	it	eq
 8003f1a:	68f4      	ldreq	r4, [r6, #12]
 8003f1c:	e7d1      	b.n	8003ec2 <_putc_r+0x1a>
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4622      	mov	r2, r4
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f84c 	bl	8003fc0 <__swbuf_r>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	e7e3      	b.n	8003ef4 <_putc_r+0x4c>
 8003f2c:	080044e8 	.word	0x080044e8
 8003f30:	08004508 	.word	0x08004508
 8003f34:	080044c8 	.word	0x080044c8

08003f38 <__sread>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f40:	f000 f94a 	bl	80041d8 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	bfab      	itete	ge
 8003f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f4c:	181b      	addge	r3, r3, r0
 8003f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f52:	bfac      	ite	ge
 8003f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f56:	81a3      	strhlt	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__swrite>:
 8003f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	461f      	mov	r7, r3
 8003f60:	898b      	ldrh	r3, [r1, #12]
 8003f62:	05db      	lsls	r3, r3, #23
 8003f64:	4605      	mov	r5, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	4616      	mov	r6, r2
 8003f6a:	d505      	bpl.n	8003f78 <__swrite+0x1e>
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	2302      	movs	r3, #2
 8003f72:	2200      	movs	r2, #0
 8003f74:	f000 f91e 	bl	80041b4 <_lseek_r>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	4632      	mov	r2, r6
 8003f86:	463b      	mov	r3, r7
 8003f88:	4628      	mov	r0, r5
 8003f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8e:	f7fc bca7 	b.w	80008e0 <_write_r>

08003f92 <__sseek>:
 8003f92:	b510      	push	{r4, lr}
 8003f94:	460c      	mov	r4, r1
 8003f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9a:	f000 f90b 	bl	80041b4 <_lseek_r>
 8003f9e:	1c43      	adds	r3, r0, #1
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	bf15      	itete	ne
 8003fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fae:	81a3      	strheq	r3, [r4, #12]
 8003fb0:	bf18      	it	ne
 8003fb2:	81a3      	strhne	r3, [r4, #12]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <__sclose>:
 8003fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fba:	f000 b8c9 	b.w	8004150 <_close_r>
	...

08003fc0 <__swbuf_r>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	b118      	cbz	r0, 8003fd2 <__swbuf_r+0x12>
 8003fca:	6983      	ldr	r3, [r0, #24]
 8003fcc:	b90b      	cbnz	r3, 8003fd2 <__swbuf_r+0x12>
 8003fce:	f7ff fb47 	bl	8003660 <__sinit>
 8003fd2:	4b21      	ldr	r3, [pc, #132]	; (8004058 <__swbuf_r+0x98>)
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d12b      	bne.n	8004030 <__swbuf_r+0x70>
 8003fd8:	686c      	ldr	r4, [r5, #4]
 8003fda:	69a3      	ldr	r3, [r4, #24]
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	071a      	lsls	r2, r3, #28
 8003fe2:	d52f      	bpl.n	8004044 <__swbuf_r+0x84>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	b36b      	cbz	r3, 8004044 <__swbuf_r+0x84>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	1ac0      	subs	r0, r0, r3
 8003fee:	6963      	ldr	r3, [r4, #20]
 8003ff0:	b2f6      	uxtb	r6, r6
 8003ff2:	4283      	cmp	r3, r0
 8003ff4:	4637      	mov	r7, r6
 8003ff6:	dc04      	bgt.n	8004002 <__swbuf_r+0x42>
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff fa9c 	bl	8003538 <_fflush_r>
 8004000:	bb30      	cbnz	r0, 8004050 <__swbuf_r+0x90>
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	3b01      	subs	r3, #1
 8004006:	60a3      	str	r3, [r4, #8]
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	6022      	str	r2, [r4, #0]
 800400e:	701e      	strb	r6, [r3, #0]
 8004010:	6963      	ldr	r3, [r4, #20]
 8004012:	3001      	adds	r0, #1
 8004014:	4283      	cmp	r3, r0
 8004016:	d004      	beq.n	8004022 <__swbuf_r+0x62>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	07db      	lsls	r3, r3, #31
 800401c:	d506      	bpl.n	800402c <__swbuf_r+0x6c>
 800401e:	2e0a      	cmp	r6, #10
 8004020:	d104      	bne.n	800402c <__swbuf_r+0x6c>
 8004022:	4621      	mov	r1, r4
 8004024:	4628      	mov	r0, r5
 8004026:	f7ff fa87 	bl	8003538 <_fflush_r>
 800402a:	b988      	cbnz	r0, 8004050 <__swbuf_r+0x90>
 800402c:	4638      	mov	r0, r7
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <__swbuf_r+0x9c>)
 8004032:	429c      	cmp	r4, r3
 8004034:	d101      	bne.n	800403a <__swbuf_r+0x7a>
 8004036:	68ac      	ldr	r4, [r5, #8]
 8004038:	e7cf      	b.n	8003fda <__swbuf_r+0x1a>
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <__swbuf_r+0xa0>)
 800403c:	429c      	cmp	r4, r3
 800403e:	bf08      	it	eq
 8004040:	68ec      	ldreq	r4, [r5, #12]
 8004042:	e7ca      	b.n	8003fda <__swbuf_r+0x1a>
 8004044:	4621      	mov	r1, r4
 8004046:	4628      	mov	r0, r5
 8004048:	f000 f80c 	bl	8004064 <__swsetup_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	d0cb      	beq.n	8003fe8 <__swbuf_r+0x28>
 8004050:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004054:	e7ea      	b.n	800402c <__swbuf_r+0x6c>
 8004056:	bf00      	nop
 8004058:	080044e8 	.word	0x080044e8
 800405c:	08004508 	.word	0x08004508
 8004060:	080044c8 	.word	0x080044c8

08004064 <__swsetup_r>:
 8004064:	4b32      	ldr	r3, [pc, #200]	; (8004130 <__swsetup_r+0xcc>)
 8004066:	b570      	push	{r4, r5, r6, lr}
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	4606      	mov	r6, r0
 800406c:	460c      	mov	r4, r1
 800406e:	b125      	cbz	r5, 800407a <__swsetup_r+0x16>
 8004070:	69ab      	ldr	r3, [r5, #24]
 8004072:	b913      	cbnz	r3, 800407a <__swsetup_r+0x16>
 8004074:	4628      	mov	r0, r5
 8004076:	f7ff faf3 	bl	8003660 <__sinit>
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <__swsetup_r+0xd0>)
 800407c:	429c      	cmp	r4, r3
 800407e:	d10f      	bne.n	80040a0 <__swsetup_r+0x3c>
 8004080:	686c      	ldr	r4, [r5, #4]
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004088:	0719      	lsls	r1, r3, #28
 800408a:	d42c      	bmi.n	80040e6 <__swsetup_r+0x82>
 800408c:	06dd      	lsls	r5, r3, #27
 800408e:	d411      	bmi.n	80040b4 <__swsetup_r+0x50>
 8004090:	2309      	movs	r3, #9
 8004092:	6033      	str	r3, [r6, #0]
 8004094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800409e:	e03e      	b.n	800411e <__swsetup_r+0xba>
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <__swsetup_r+0xd4>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d101      	bne.n	80040aa <__swsetup_r+0x46>
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	e7eb      	b.n	8004082 <__swsetup_r+0x1e>
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <__swsetup_r+0xd8>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	bf08      	it	eq
 80040b0:	68ec      	ldreq	r4, [r5, #12]
 80040b2:	e7e6      	b.n	8004082 <__swsetup_r+0x1e>
 80040b4:	0758      	lsls	r0, r3, #29
 80040b6:	d512      	bpl.n	80040de <__swsetup_r+0x7a>
 80040b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ba:	b141      	cbz	r1, 80040ce <__swsetup_r+0x6a>
 80040bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c0:	4299      	cmp	r1, r3
 80040c2:	d002      	beq.n	80040ca <__swsetup_r+0x66>
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7fe ff55 	bl	8002f74 <_free_r>
 80040ca:	2300      	movs	r3, #0
 80040cc:	6363      	str	r3, [r4, #52]	; 0x34
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	2300      	movs	r3, #0
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	f043 0308 	orr.w	r3, r3, #8
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	b94b      	cbnz	r3, 80040fe <__swsetup_r+0x9a>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f4:	d003      	beq.n	80040fe <__swsetup_r+0x9a>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4630      	mov	r0, r6
 80040fa:	f7ff fb9b 	bl	8003834 <__smakebuf_r>
 80040fe:	89a0      	ldrh	r0, [r4, #12]
 8004100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004104:	f010 0301 	ands.w	r3, r0, #1
 8004108:	d00a      	beq.n	8004120 <__swsetup_r+0xbc>
 800410a:	2300      	movs	r3, #0
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	6963      	ldr	r3, [r4, #20]
 8004110:	425b      	negs	r3, r3
 8004112:	61a3      	str	r3, [r4, #24]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b943      	cbnz	r3, 800412a <__swsetup_r+0xc6>
 8004118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800411c:	d1ba      	bne.n	8004094 <__swsetup_r+0x30>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	0781      	lsls	r1, r0, #30
 8004122:	bf58      	it	pl
 8004124:	6963      	ldrpl	r3, [r4, #20]
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	e7f4      	b.n	8004114 <__swsetup_r+0xb0>
 800412a:	2000      	movs	r0, #0
 800412c:	e7f7      	b.n	800411e <__swsetup_r+0xba>
 800412e:	bf00      	nop
 8004130:	2000002c 	.word	0x2000002c
 8004134:	080044e8 	.word	0x080044e8
 8004138:	08004508 	.word	0x08004508
 800413c:	080044c8 	.word	0x080044c8

08004140 <abort>:
 8004140:	b508      	push	{r3, lr}
 8004142:	2006      	movs	r0, #6
 8004144:	f000 f882 	bl	800424c <raise>
 8004148:	2001      	movs	r0, #1
 800414a:	f7fe fd8b 	bl	8002c64 <_exit>
	...

08004150 <_close_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d06      	ldr	r5, [pc, #24]	; (800416c <_close_r+0x1c>)
 8004154:	2300      	movs	r3, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	f7fe fda9 	bl	8002cb2 <_close>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_close_r+0x1a>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	b103      	cbz	r3, 800416a <_close_r+0x1a>
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	200001d8 	.word	0x200001d8

08004170 <_fstat_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d07      	ldr	r5, [pc, #28]	; (8004190 <_fstat_r+0x20>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	f7fe fda4 	bl	8002cca <_fstat>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d102      	bne.n	800418c <_fstat_r+0x1c>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	b103      	cbz	r3, 800418c <_fstat_r+0x1c>
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	200001d8 	.word	0x200001d8

08004194 <_isatty_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4d06      	ldr	r5, [pc, #24]	; (80041b0 <_isatty_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	f7fe fda3 	bl	8002cea <_isatty>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_isatty_r+0x1a>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_isatty_r+0x1a>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200001d8 	.word	0x200001d8

080041b4 <_lseek_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_lseek_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fe fd9c 	bl	8002d00 <_lseek>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_lseek_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_lseek_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200001d8 	.word	0x200001d8

080041d8 <_read_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_read_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fe fd46 	bl	8002c78 <_read>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_read_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_read_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200001d8 	.word	0x200001d8

080041fc <_raise_r>:
 80041fc:	291f      	cmp	r1, #31
 80041fe:	b538      	push	{r3, r4, r5, lr}
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	d904      	bls.n	8004210 <_raise_r+0x14>
 8004206:	2316      	movs	r3, #22
 8004208:	6003      	str	r3, [r0, #0]
 800420a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004212:	b112      	cbz	r2, 800421a <_raise_r+0x1e>
 8004214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004218:	b94b      	cbnz	r3, 800422e <_raise_r+0x32>
 800421a:	4620      	mov	r0, r4
 800421c:	f000 f830 	bl	8004280 <_getpid_r>
 8004220:	462a      	mov	r2, r5
 8004222:	4601      	mov	r1, r0
 8004224:	4620      	mov	r0, r4
 8004226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422a:	f000 b817 	b.w	800425c <_kill_r>
 800422e:	2b01      	cmp	r3, #1
 8004230:	d00a      	beq.n	8004248 <_raise_r+0x4c>
 8004232:	1c59      	adds	r1, r3, #1
 8004234:	d103      	bne.n	800423e <_raise_r+0x42>
 8004236:	2316      	movs	r3, #22
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	2001      	movs	r0, #1
 800423c:	e7e7      	b.n	800420e <_raise_r+0x12>
 800423e:	2400      	movs	r4, #0
 8004240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004244:	4628      	mov	r0, r5
 8004246:	4798      	blx	r3
 8004248:	2000      	movs	r0, #0
 800424a:	e7e0      	b.n	800420e <_raise_r+0x12>

0800424c <raise>:
 800424c:	4b02      	ldr	r3, [pc, #8]	; (8004258 <raise+0xc>)
 800424e:	4601      	mov	r1, r0
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	f7ff bfd3 	b.w	80041fc <_raise_r>
 8004256:	bf00      	nop
 8004258:	2000002c 	.word	0x2000002c

0800425c <_kill_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4d07      	ldr	r5, [pc, #28]	; (800427c <_kill_r+0x20>)
 8004260:	2300      	movs	r3, #0
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	f7fe fceb 	bl	8002c44 <_kill>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d102      	bne.n	8004278 <_kill_r+0x1c>
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	b103      	cbz	r3, 8004278 <_kill_r+0x1c>
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	200001d8 	.word	0x200001d8

08004280 <_getpid_r>:
 8004280:	f7fe bcd8 	b.w	8002c34 <_getpid>

08004284 <_gettimeofday>:
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <_gettimeofday+0xc>)
 8004286:	2258      	movs	r2, #88	; 0x58
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800428e:	4770      	bx	lr
 8004290:	200001d8 	.word	0x200001d8

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
