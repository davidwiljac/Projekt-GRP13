
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000787c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008288  08008288  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008290  08008290  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000094  0800832c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800832c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014666  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317a  00000000  00000000  0003472a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000378a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00038610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d7d  00000000  00000000  00039200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a31  00000000  00000000  0004bf7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c801  00000000  00000000  0005c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b91af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000438c  00000000  00000000  000b9204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079f4 	.word	0x080079f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080079f4 	.word	0x080079f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4611      	mov	r1, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	460b      	mov	r3, r1
 8000d68:	70bb      	strb	r3, [r7, #2]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000d76:	78bb      	ldrb	r3, [r7, #2]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d821      	bhi.n	8000dc0 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000d82:	78ba      	ldrb	r2, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	231f      	movs	r3, #31
 8000d90:	4093      	lsls	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000d9e:	78f9      	ldrb	r1, [r7, #3]
 8000da0:	78ba      	ldrb	r2, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	e074      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000dc0:	78bb      	ldrb	r3, [r7, #2]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	d823      	bhi.n	8000e0e <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000dcc:	78bb      	ldrb	r3, [r7, #2]
 8000dce:	1f5a      	subs	r2, r3, #5
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	461a      	mov	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000dea:	78f9      	ldrb	r1, [r7, #3]
 8000dec:	78bb      	ldrb	r3, [r7, #2]
 8000dee:	1f5a      	subs	r2, r3, #5
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0c:	e04d      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	2b0e      	cmp	r3, #14
 8000e12:	d825      	bhi.n	8000e60 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000e1a:	78bb      	ldrb	r3, [r7, #2]
 8000e1c:	f1a3 020a 	sub.w	r2, r3, #10
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	461a      	mov	r2, r3
 8000e2a:	231f      	movs	r3, #31
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000e3a:	78f9      	ldrb	r1, [r7, #3]
 8000e3c:	78bb      	ldrb	r3, [r7, #2]
 8000e3e:	f1a3 020a 	sub.w	r2, r3, #10
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e024      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000e66:	78bb      	ldrb	r3, [r7, #2]
 8000e68:	f1a3 020f 	sub.w	r2, r3, #15
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	461a      	mov	r2, r3
 8000e76:	231f      	movs	r3, #31
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4013      	ands	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000e86:	78f9      	ldrb	r1, [r7, #3]
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	f1a3 020f 	sub.w	r2, r3, #15
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	d923      	bls.n	8000ef8 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f1a3 020a 	sub.w	r2, r3, #10
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6999      	ldr	r1, [r3, #24]
 8000edc:	7878      	ldrb	r0, [r7, #1]
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	f1a3 020a 	sub.w	r2, r3, #10
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	fa00 f303 	lsl.w	r3, r0, r3
 8000eee:	ea41 0203 	orr.w	r2, r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000ef6:	e01f      	b.n	8000f38 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	2238      	movs	r2, #56	; 0x38
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6959      	ldr	r1, [r3, #20]
 8000f22:	7878      	ldrb	r0, [r7, #1]
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f30:	ea41 0203 	orr.w	r2, r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f043 0204 	orr.w	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	b29b      	uxth	r3, r3
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <FLASH_Unlock+0x2c>)
 8000fc4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <FLASH_Unlock+0x30>)
 8000fca:	605a      	str	r2, [r3, #4]
  }  
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000
 8000fdc:	45670123 	.word	0x45670123
 8000fe0:	cdef89ab 	.word	0xcdef89ab

08000fe4 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <FLASH_Lock+0x1c>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <FLASH_Lock+0x1c>)
 8000fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff2:	6113      	str	r3, [r2, #16]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40022000 	.word	0x40022000

08001004 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800100c:	2304      	movs	r3, #4
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001010:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001014:	f000 f892 	bl	800113c <FLASH_WaitForLastOperation>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d11a      	bne.n	8001058 <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <FLASH_ErasePage+0x60>)
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <FLASH_ErasePage+0x60>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 800102e:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <FLASH_ErasePage+0x60>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <FLASH_ErasePage+0x60>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FLASH_ErasePage+0x60>)
 800103a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103e:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001040:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001044:	f000 f87a 	bl	800113c <FLASH_WaitForLastOperation>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <FLASH_ErasePage+0x60>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <FLASH_ErasePage+0x60>)
 8001052:	f023 0302 	bic.w	r3, r3, #2
 8001056:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8001074:	2304      	movs	r3, #4
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001078:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800107c:	f000 f85e 	bl	800113c <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d114      	bne.n	80010b4 <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800109c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80010a0:	f000 f84c 	bl	800113c <FLASH_WaitForLastOperation>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <FLASH_ClearFlag+0x1c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60d3      	str	r3, [r2, #12]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <FLASH_GetStatus+0x54>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 80010fa:	2301      	movs	r3, #1
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	e013      	b.n	8001128 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <FLASH_GetStatus+0x54>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 800110c:	2302      	movs	r3, #2
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e00a      	b.n	8001128 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <FLASH_GetStatus+0x54>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 800111e:	2303      	movs	r3, #3
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8001124:	2304      	movs	r3, #4
 8001126:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001144:	2304      	movs	r3, #4
 8001146:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8001148:	f7ff ffcc 	bl	80010e4 <FLASH_GetStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001150:	e006      	b.n	8001160 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 8001152:	f7ff ffc7 	bl	80010e4 <FLASH_GetStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b01      	subs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <FLASH_WaitForLastOperation+0x30>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f2      	bne.n	8001152 <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001172:	2305      	movs	r3, #5
 8001174:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001198:	787a      	ldrb	r2, [r7, #1]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	210f      	movs	r1, #15
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	8879      	ldrh	r1, [r7, #2]
 80011ca:	08c9      	lsrs	r1, r1, #3
 80011cc:	b289      	uxth	r1, r1
 80011ce:	4608      	mov	r0, r1
 80011d0:	ea02 0103 	and.w	r1, r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f100 0208 	add.w	r2, r0, #8
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	817b      	strh	r3, [r7, #10]
 8001222:	4613      	mov	r3, r2
 8001224:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <I2C_TransferHandling+0x54>)
 8001234:	4013      	ands	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	431a      	orrs	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4313      	orrs	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	605a      	str	r2, [r3, #4]
}  
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	fc009800 	.word	0xfc009800

0800126c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001278:	78fa      	ldrb	r2, [r7, #3]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	b2db      	uxtb	r3, r3
}  
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}  
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	61da      	str	r2, [r3, #28]
  }
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001300:	b480      	push	{r7}
 8001302:	b08b      	sub	sp, #44	; 0x2c
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001328:	4b91      	ldr	r3, [pc, #580]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d011      	beq.n	800135c <RCC_GetClocksFreq+0x5c>
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d837      	bhi.n	80013ae <RCC_GetClocksFreq+0xae>
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <RCC_GetClocksFreq+0x4c>
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d004      	beq.n	8001354 <RCC_GetClocksFreq+0x54>
 800134a:	e030      	b.n	80013ae <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a89      	ldr	r2, [pc, #548]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e030      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001358:	601a      	str	r2, [r3, #0]
      break;
 800135a:	e02c      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001364:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001366:	4b82      	ldr	r3, [pc, #520]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3302      	adds	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4a7d      	ldr	r2, [pc, #500]	; (8001578 <RCC_GetClocksFreq+0x278>)
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	e00d      	b.n	80013a6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fbb2 f2f3 	udiv	r2, r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	601a      	str	r2, [r3, #0]
      break;
 80013ac:	e003      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a70      	ldr	r2, [pc, #448]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80013b2:	601a      	str	r2, [r3, #0]
      break;
 80013b4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80013c6:	4a6d      	ldr	r2, [pc, #436]	; (800157c <RCC_GetClocksFreq+0x27c>)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	40da      	lsrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013e6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80013ee:	4a63      	ldr	r2, [pc, #396]	; (800157c <RCC_GetClocksFreq+0x27c>)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	40da      	lsrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800140e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	0adb      	lsrs	r3, r3, #11
 8001414:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001416:	4a59      	ldr	r2, [pc, #356]	; (800157c <RCC_GetClocksFreq+0x27c>)
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	40da      	lsrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001436:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800143e:	4a50      	ldr	r2, [pc, #320]	; (8001580 <RCC_GetClocksFreq+0x280>)
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001446:	b29b      	uxth	r3, r3
 8001448:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fbb2 f2f3 	udiv	r2, r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e003      	b.n	800146a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001472:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800147a:	4a41      	ldr	r2, [pc, #260]	; (8001580 <RCC_GetClocksFreq+0x280>)
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001482:	b29b      	uxth	r3, r3
 8001484:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fbb2 f2f3 	udiv	r2, r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	e003      	b.n	80014a6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d003      	beq.n	80014ba <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	e003      	b.n	80014c2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d003      	beq.n	80014d6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	e003      	b.n	80014de <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ea:	d10d      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d108      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d104      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]
 8001506:	e003      	b.n	8001510 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151c:	d10d      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	429a      	cmp	r2, r3
 8001526:	d108      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d104      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	005a      	lsls	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
 8001538:	e003      	b.n	8001542 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
 8001556:	e029      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10f      	bne.n	8001584 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
 800156c:	e01e      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	007a1200 	.word	0x007a1200
 8001578:	003d0900 	.word	0x003d0900
 800157c:	20000000 	.word	0x20000000
 8001580:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d104      	bne.n	800159a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
 8001598:	e008      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d102      	bne.n	80015ac <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <RCC_GetClocksFreq+0x424>)
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80015ac:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d104      	bne.n	80015c2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c0:	e021      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80015c2:	4b57      	ldr	r3, [pc, #348]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ce:	d104      	bne.n	80015da <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d8:	e015      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e6:	d104      	bne.n	80015f2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f0:	e009      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015fe:	d102      	bne.n	8001606 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a48      	ldr	r2, [pc, #288]	; (8001724 <RCC_GetClocksFreq+0x424>)
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d104      	bne.n	800161c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
 800161a:	e021      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001628:	d104      	bne.n	8001634 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
 8001632:	e015      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800163c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001640:	d104      	bne.n	800164c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e009      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001654:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001658:	d102      	bne.n	8001660 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a31      	ldr	r2, [pc, #196]	; (8001724 <RCC_GetClocksFreq+0x424>)
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d104      	bne.n	8001676 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
 8001674:	e021      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800167e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001682:	d104      	bne.n	800168e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
 800168c:	e015      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800169a:	d104      	bne.n	80016a6 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
 80016a4:	e009      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016b2:	d102      	bne.n	80016ba <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <RCC_GetClocksFreq+0x424>)
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80016ce:	e021      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016dc:	d104      	bne.n	80016e8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016e6:	e015      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016f4:	d104      	bne.n	8001700 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016fe:	e009      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800170c:	d102      	bne.n	8001714 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <RCC_GetClocksFreq+0x424>)
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001714:	bf00      	nop
 8001716:	372c      	adds	r7, #44	; 0x2c
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	007a1200 	.word	0x007a1200

08001728 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	b29b      	uxth	r3, r3
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d103      	bne.n	8001796 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e005      	b.n	80017a2 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d102      	bne.n	80017a2 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3308      	adds	r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017b4:	e006      	b.n	80017c4 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43da      	mvns	r2, r3
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e001      	b.n	80017f4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001802:	b480      	push	{r7}
 8001804:	b087      	sub	sp, #28
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800182c:	2201      	movs	r2, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4013      	ands	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e00d      	b.n	8001864 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d105      	bne.n	800185a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e004      	b.n	8001864 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800186a:	2201      	movs	r2, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <USART_GetITStatus+0x8e>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	e001      	b.n	8001894 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001894:	7cfb      	ldrb	r3, [r7, #19]
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f103 	lsl.w	r1, r2, r3
 80018ba:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <NVIC_EnableIRQ+0x30>)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <uart_get_char+0x48>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d011      	beq.n	8001910 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <uart_get_char+0x4c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	b2d1      	uxtb	r1, r2
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <uart_get_char+0x4c>)
 80018f8:	7011      	strb	r1, [r2, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <uart_get_char+0x50>)
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <uart_get_char+0x48>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <uart_get_char+0x48>)
 800190e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001910:	79fb      	ldrb	r3, [r7, #7]
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200001b2 	.word	0x200001b2
 8001924:	200001b1 	.word	0x200001b1
 8001928:	200000b0 	.word	0x200000b0

0800192c <uart_put_char>:

void uart_put_char(uint8_t c) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <uart_put_char+0x30>)
 800193e:	f7ff fef3 	bl	8001728 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001942:	bf00      	nop
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <uart_put_char+0x30>)
 8001948:	f7ff ff42 	bl	80017d0 <USART_GetFlagStatus>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f8      	beq.n	8001944 <uart_put_char+0x18>
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400

08001960 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e012      	b.n	800199a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b0a      	cmp	r3, #10
 800197e:	d102      	bne.n	8001986 <_write_r+0x26>
            uart_put_char('\r');
 8001980:	200d      	movs	r0, #13
 8001982:	f7ff ffd3 	bl	800192c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ffcc 	bl	800192c <uart_put_char>
    for (n = 0; n < len; n++) {
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbe8      	blt.n	8001974 <_write_r+0x14>
    }

    return len;
 80019a2:	683b      	ldr	r3, [r7, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80019b0:	4915      	ldr	r1, [pc, #84]	; (8001a08 <USART2_IRQHandler+0x5c>)
 80019b2:	4816      	ldr	r0, [pc, #88]	; (8001a0c <USART2_IRQHandler+0x60>)
 80019b4:	f7ff ff25 	bl	8001802 <USART_GetITStatus>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d021      	beq.n	8001a02 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <USART2_IRQHandler+0x60>)
 80019c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019c2:	b299      	uxth	r1, r3
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <USART2_IRQHandler+0x64>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	b2d0      	uxtb	r0, r2
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <USART2_IRQHandler+0x64>)
 80019d0:	7010      	strb	r0, [r2, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	b2c9      	uxtb	r1, r1
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <USART2_IRQHandler+0x68>)
 80019d8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <USART2_IRQHandler+0x6c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d107      	bne.n	80019f4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <USART2_IRQHandler+0x70>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <USART2_IRQHandler+0x70>)
 80019f0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80019f2:	e006      	b.n	8001a02 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <USART2_IRQHandler+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <USART2_IRQHandler+0x6c>)
 8001a00:	701a      	strb	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	00050105 	.word	0x00050105
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	200001b0 	.word	0x200001b0
 8001a14:	200000b0 	.word	0x200000b0
 8001a18:	200001b2 	.word	0x200001b2
 8001a1c:	200001b1 	.word	0x200001b1

08001a20 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <uart_init+0x224>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 ffdd 	bl	80069f0 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <uart_init+0x224>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 ffd6 	bl	80069f0 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001a44:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <uart_init+0x228>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4a7f      	ldr	r2, [pc, #508]	; (8001c48 <uart_init+0x228>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001a50:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <uart_init+0x228>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	4a7c      	ldr	r2, [pc, #496]	; (8001c48 <uart_init+0x228>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a8a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a96:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001a9a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ab6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001aba:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ac8:	f023 030c 	bic.w	r3, r3, #12
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001ad0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ad8:	8892      	ldrh	r2, [r2, #4]
 8001ada:	b292      	uxth	r2, r2
 8001adc:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aec:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001af8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001afc:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b18:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001b1c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <uart_init+0x22c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <uart_init+0x22c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <uart_init+0x22c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <uart_init+0x22c>)
 8001b30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b34:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <uart_init+0x22c>)
 8001b38:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <uart_init+0x22c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <uart_init+0x22c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a42      	ldr	r2, [pc, #264]	; (8001c4c <uart_init+0x22c>)
 8001b44:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b48:	f023 030c 	bic.w	r3, r3, #12
 8001b4c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <uart_init+0x22c>)
 8001b50:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <uart_init+0x22c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <uart_init+0x22c>)
 8001b58:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <uart_init+0x22c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <uart_init+0x22c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <uart_init+0x22c>)
 8001b64:	f043 030c 	orr.w	r3, r3, #12
 8001b68:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <uart_init+0x22c>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <uart_init+0x22c>)
 8001b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b74:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <uart_init+0x22c>)
 8001b78:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <uart_init+0x22c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b82:	2300      	movs	r3, #0
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
 8001b86:	2300      	movs	r3, #0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbb6 	bl	8001300 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <uart_init+0x22c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba6:	005a      	lsls	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc4:	e00d      	b.n	8001be2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	fb01 f202 	mul.w	r2, r1, r2
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d302      	bcc.n	8001bf2 <uart_init+0x1d2>
        divider++;
 8001bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <uart_init+0x22c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c0a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001c0e:	4013      	ands	r3, r2
 8001c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c12:	4313      	orrs	r3, r2
 8001c14:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <uart_init+0x22c>)
 8001c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <uart_init+0x22c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <uart_init+0x22c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4908      	ldr	r1, [pc, #32]	; (8001c50 <uart_init+0x230>)
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <uart_init+0x22c>)
 8001c30:	f7ff fd8c 	bl	800174c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f7ff fe35 	bl	80018a4 <NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	; 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000030 	.word	0x20000030
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	00050105 	.word	0x00050105

08001c54 <fgcolor>:
/**
  * @brief  Sets the foreground color of text TODO:REF
  * @param  the color to be set
  * @retval None
  */
void fgcolor(uint8_t foreground) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8001c5e:	2316      	movs	r3, #22
 8001c60:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d904      	bls.n	8001c72 <fgcolor+0x1e>
	  type = 1;                // bold text
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	331e      	adds	r3, #30
 8001c78:	211b      	movs	r1, #27
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <fgcolor+0x34>)
 8001c7c:	f004 fd96 	bl	80067ac <iprintf>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	08007a0c 	.word	0x08007a0c

08001c8c <clrscr>:
/**
  * @brief  clears the screen TODO:REF
  * @param  None
  * @retval None
  */
void clrscr(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001c90:	211b      	movs	r1, #27
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <clrscr+0x18>)
 8001c94:	f004 fd8a 	bl	80067ac <iprintf>
    printf("%c[J", ESC);
 8001c98:	211b      	movs	r1, #27
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <clrscr+0x1c>)
 8001c9c:	f004 fd86 	bl	80067ac <iprintf>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	08007a38 	.word	0x08007a38
 8001ca8:	08007a40 	.word	0x08007a40

08001cac <gotoxy>:
/**
  * @brief  Sends cursor to the given coordinate TODO:REF
  * @param  x: x-part, y: y-part
  * @retval None
  */
void gotoxy(int x, int y){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	211b      	movs	r1, #27
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <gotoxy+0x20>)
 8001cbe:	f004 fd75 	bl	80067ac <iprintf>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08007a48 	.word	0x08007a48

08001cd0 <drawBox>:
/**
  * @brief  Draws a box from given coordiantes TODO:REF
  * @param  x1: x of top left, y1: y of top left, x2: x of bottom right, y2: y of bottom right, style: the style of box 0=thin 1=bold
  * @retval None
  */
void drawBox(int x1, int y1, int x2, int y2, int style) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d15e      	bne.n	8001da2 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e019      	b.n	8001d1e <drawBox+0x4e>
			 gotoxy(x1,y);
 8001cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff ffdd 	bl	8001cac <gotoxy>
			 if (y==y1){
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d103      	bne.n	8001d02 <drawBox+0x32>
				printf("%c", 201);
 8001cfa:	20c9      	movs	r0, #201	; 0xc9
 8001cfc:	f004 fd6e 	bl	80067dc <putchar>
 8001d00:	e00a      	b.n	8001d18 <drawBox+0x48>
			 }
			 else if(y==y2){
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d103      	bne.n	8001d12 <drawBox+0x42>
				printf("%c", 200);
 8001d0a:	20c8      	movs	r0, #200	; 0xc8
 8001d0c:	f004 fd66 	bl	80067dc <putchar>
 8001d10:	e002      	b.n	8001d18 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001d12:	20ba      	movs	r0, #186	; 0xba
 8001d14:	f004 fd62 	bl	80067dc <putchar>
		 for(int y = y1; y <= y2; y++){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dde1      	ble.n	8001cea <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	e014      	b.n	8001d56 <drawBox+0x86>
   			 if(x!=x1){
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d00d      	beq.n	8001d50 <drawBox+0x80>
				 gotoxy(x,y1);
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f7ff ffb8 	bl	8001cac <gotoxy>
				 printf("%c", 205);
 8001d3c:	20cd      	movs	r0, #205	; 0xcd
 8001d3e:	f004 fd4d 	bl	80067dc <putchar>
				 gotoxy(x,y2);
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6a38      	ldr	r0, [r7, #32]
 8001d46:	f7ff ffb1 	bl	8001cac <gotoxy>
				 printf("%c", 205);
 8001d4a:	20cd      	movs	r0, #205	; 0xcd
 8001d4c:	f004 fd46 	bl	80067dc <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	3301      	adds	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dde6      	ble.n	8001d2c <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e019      	b.n	8001d98 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001d64:	69f9      	ldr	r1, [r7, #28]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa0 	bl	8001cac <gotoxy>
   			 if (y==y1){
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d103      	bne.n	8001d7c <drawBox+0xac>
				printf("%c", 187);
 8001d74:	20bb      	movs	r0, #187	; 0xbb
 8001d76:	f004 fd31 	bl	80067dc <putchar>
 8001d7a:	e00a      	b.n	8001d92 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d103      	bne.n	8001d8c <drawBox+0xbc>
				printf("%c", 188);
 8001d84:	20bc      	movs	r0, #188	; 0xbc
 8001d86:	f004 fd29 	bl	80067dc <putchar>
 8001d8a:	e002      	b.n	8001d92 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001d8c:	20ba      	movs	r0, #186	; 0xba
 8001d8e:	f004 fd25 	bl	80067dc <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dde1      	ble.n	8001d64 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001da0:	e05d      	b.n	8001e5e <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	e019      	b.n	8001ddc <drawBox+0x10c>
			 gotoxy(x1,y);
 8001da8:	69b9      	ldr	r1, [r7, #24]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff7e 	bl	8001cac <gotoxy>
			 if (y==y1){
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d103      	bne.n	8001dc0 <drawBox+0xf0>
				printf("%c", 218);
 8001db8:	20da      	movs	r0, #218	; 0xda
 8001dba:	f004 fd0f 	bl	80067dc <putchar>
 8001dbe:	e00a      	b.n	8001dd6 <drawBox+0x106>
			 else if(y==y2){
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d103      	bne.n	8001dd0 <drawBox+0x100>
				printf("%c", 192);
 8001dc8:	20c0      	movs	r0, #192	; 0xc0
 8001dca:	f004 fd07 	bl	80067dc <putchar>
 8001dce:	e002      	b.n	8001dd6 <drawBox+0x106>
				printf("%c", 179);
 8001dd0:	20b3      	movs	r0, #179	; 0xb3
 8001dd2:	f004 fd03 	bl	80067dc <putchar>
		for(int y = y1; y <= y2; y++){
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dde1      	ble.n	8001da8 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e014      	b.n	8001e14 <drawBox+0x144>
			if(x!=x1){
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00d      	beq.n	8001e0e <drawBox+0x13e>
				 gotoxy(x,y1);
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7ff ff59 	bl	8001cac <gotoxy>
				 printf("%c", 196);
 8001dfa:	20c4      	movs	r0, #196	; 0xc4
 8001dfc:	f004 fcee 	bl	80067dc <putchar>
				 gotoxy(x,y2);
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff52 	bl	8001cac <gotoxy>
				 printf("%c", 196);
 8001e08:	20c4      	movs	r0, #196	; 0xc4
 8001e0a:	f004 fce7 	bl	80067dc <putchar>
		for(int x = x1; x <= x2; x++){
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dde6      	ble.n	8001dea <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e019      	b.n	8001e56 <drawBox+0x186>
			 gotoxy(x2,y);
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff41 	bl	8001cac <gotoxy>
			if (y==y1){
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d103      	bne.n	8001e3a <drawBox+0x16a>
				printf("%c", 191);
 8001e32:	20bf      	movs	r0, #191	; 0xbf
 8001e34:	f004 fcd2 	bl	80067dc <putchar>
 8001e38:	e00a      	b.n	8001e50 <drawBox+0x180>
			 else if(y==y2){
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d103      	bne.n	8001e4a <drawBox+0x17a>
				printf("%c", 217);
 8001e42:	20d9      	movs	r0, #217	; 0xd9
 8001e44:	f004 fcca 	bl	80067dc <putchar>
 8001e48:	e002      	b.n	8001e50 <drawBox+0x180>
				printf("%c", 179);
 8001e4a:	20b3      	movs	r0, #179	; 0xb3
 8001e4c:	f004 fcc6 	bl	80067dc <putchar>
		for(int y = y1; y <= y2; y++){
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3301      	adds	r3, #1
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dde1      	ble.n	8001e22 <drawBox+0x152>
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <updateBullets>:
/**
  * @brief  Updates the position of all the bullets according to their velocities and thier velocities according the gravity from the moon
  * @param  gamestate: the current state of the game
  * @retval None
  */
void updateBullets(gameState_t* gameState){
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b089      	sub	sp, #36	; 0x24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61fb      	str	r3, [r7, #28]
	//Loops though the bullet linked list
	while (current != NULL) {
 8001e74:	e073      	b.n	8001f5e <updateBullets+0xf8>
		//Gravity calculations for bullets
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y}; //Creates a vector from bullet to the moon
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7b1b      	ldrb	r3, [r3, #12]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fa8a 	bl	8003396 <intToFp>
 8001e82:	4602      	mov	r2, r0
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7b5b      	ldrb	r3, [r3, #13]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fa7f 	bl	8003396 <intToFp>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); //Approximates the distance to the moon by multiplying the sum of the vector-coordinates by 2/sqrt(2)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fb17 	bl	80034d8 <fpAbs>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fb12 	bl	80034d8 <fpAbs>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4423      	add	r3, r4
 8001eb8:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 faa0 	bl	8003402 <fpMultiply>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon)); //scales the vector to a length of 1
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f001 fa64 	bl	8003396 <intToFp>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f001 fab4 	bl	8003444 <fpDivide>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f107 0014 	add.w	r0, r7, #20
 8001ee2:	f107 0214 	add.w	r2, r7, #20
 8001ee6:	ca06      	ldmia	r2, {r1, r2}
 8001ee8:	f001 fad4 	bl	8003494 <scaleVector>
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon))); //Scale the vector proportional to the distance to the moon
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7b9b      	ldrb	r3, [r3, #14]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fa4f 	bl	8003396 <intToFp>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f001 fa7c 	bl	8003402 <fpMultiply>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f001 fa98 	bl	8003444 <fpDivide>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f107 000c 	add.w	r0, r7, #12
 8001f1a:	f107 0214 	add.w	r2, r7, #20
 8001f1e:	ca06      	ldmia	r2, {r1, r2}
 8001f20:	f001 fab8 	bl	8003494 <scaleVector>

		//Adds acceleration to the bullets velocity
		current->bullet.velocity.x+=accVec.x;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	441a      	add	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	615a      	str	r2, [r3, #20]

		//Adds velocity to the bullets position
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	441a      	add	r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	441a      	add	r2, r3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d188      	bne.n	8001e76 <updateBullets+0x10>
	}

}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}

08001f6e <detectBulletHit>:
/**
  * @brief  Checks if a bullets has hit something
  * @param  gamestate: the current state of the game
  * @retval None
  */
void detectBulletHit(gameState_t* gameState){
 8001f6e:	b590      	push	{r4, r7, lr}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
	//Loops over all bullets
	while (current != NULL) {
 8001f7c:	e1a1      	b.n	80022c2 <detectBulletHit+0x354>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fa1c 	bl	80033c0 <fpToInt>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	72fb      	strb	r3, [r7, #11]

		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fa15 	bl	80033c0 <fpToInt>
 8001f96:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	dd1a      	ble.n	8001fd2 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 fa0d 	bl	80033c0 <fpToInt>
 8001fa6:	4603      	mov	r3, r0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001fa8:	2b55      	cmp	r3, #85	; 0x55
 8001faa:	dc12      	bgt.n	8001fd2 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fa05 	bl	80033c0 <fpToInt>
 8001fb6:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	dd0a      	ble.n	8001fd2 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f9fd 	bl	80033c0 <fpToInt>
 8001fc6:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001fc8:	2b9b      	cmp	r3, #155	; 0x9b
 8001fca:	dc02      	bgt.n	8001fd2 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d801      	bhi.n	8001fd6 <detectBulletHit+0x68>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <detectBulletHit+0x6a>
 8001fd6:	2300      	movs	r3, #0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001fd8:	72bb      	strb	r3, [r7, #10]
				distToMoon<=6;

		//Checks if the bullet hit the moon or a wall
		if(hitInertObject){
 8001fda:	7abb      	ldrb	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <detectBulletHit+0x84>
			deleteBulletNode(&(gameState->bulletLL), current);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fe73 	bl	8004cd0 <deleteBulletNode>
			current = current->nextBulletAddress;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	617b      	str	r3, [r7, #20]
			continue;
 8001ff0:	e167      	b.n	80022c2 <detectBulletHit+0x354>
		}

		//Checks if the bullet hit the spaceship
		uint8_t hitSpaceship;
		if(gameState->spaceship.numberOfParts==1){
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d131      	bne.n	8002060 <detectBulletHit+0xf2>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f001 f9dd 	bl	80033c0 <fpToInt>
 8002006:	4604      	mov	r4, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4618      	mov	r0, r3
 800200e:	f001 f9d7 	bl	80033c0 <fpToInt>
 8002012:	4603      	mov	r3, r0
 8002014:	3b01      	subs	r3, #1
 8002016:	429c      	cmp	r4, r3
 8002018:	db1f      	blt.n	800205a <detectBulletHit+0xec>
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f001 f9ce 	bl	80033c0 <fpToInt>
 8002024:	4604      	mov	r4, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f9c8 	bl	80033c0 <fpToInt>
 8002030:	4603      	mov	r3, r0
 8002032:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002034:	429c      	cmp	r4, r3
 8002036:	db10      	blt.n	800205a <detectBulletHit+0xec>
						fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+1);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f9bf 	bl	80033c0 <fpToInt>
 8002042:	4604      	mov	r4, r0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f9b9 	bl	80033c0 <fpToInt>
 800204e:	4603      	mov	r3, r0
 8002050:	3301      	adds	r3, #1
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8002052:	429c      	cmp	r4, r3
 8002054:	dc01      	bgt.n	800205a <detectBulletHit+0xec>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <detectBulletHit+0xee>
 800205a:	2300      	movs	r3, #0
 800205c:	74fb      	strb	r3, [r7, #19]
 800205e:	e06c      	b.n	800213a <detectBulletHit+0x1cc>
		}
		else if(gameState->spaceship.numberOfParts==2){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	d131      	bne.n	80020ce <detectBulletHit+0x160>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f001 f9a6 	bl	80033c0 <fpToInt>
 8002074:	4604      	mov	r4, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f9a0 	bl	80033c0 <fpToInt>
 8002080:	4603      	mov	r3, r0
 8002082:	3b01      	subs	r3, #1
 8002084:	429c      	cmp	r4, r3
 8002086:	db1f      	blt.n	80020c8 <detectBulletHit+0x15a>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f001 f997 	bl	80033c0 <fpToInt>
 8002092:	4604      	mov	r4, r0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f991 	bl	80033c0 <fpToInt>
 800209e:	4603      	mov	r3, r0
 80020a0:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020a2:	429c      	cmp	r4, r3
 80020a4:	db10      	blt.n	80020c8 <detectBulletHit+0x15a>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 f988 	bl	80033c0 <fpToInt>
 80020b0:	4604      	mov	r4, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 f982 	bl	80033c0 <fpToInt>
 80020bc:	4603      	mov	r3, r0
 80020be:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 80020c0:	429c      	cmp	r4, r3
 80020c2:	dc01      	bgt.n	80020c8 <detectBulletHit+0x15a>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <detectBulletHit+0x15c>
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
 80020cc:	e035      	b.n	800213a <detectBulletHit+0x1cc>
		}
		else if(gameState->spaceship.numberOfParts==3){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d130      	bne.n	800213a <detectBulletHit+0x1cc>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f96f 	bl	80033c0 <fpToInt>
 80020e2:	4604      	mov	r4, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f969 	bl	80033c0 <fpToInt>
 80020ee:	4603      	mov	r3, r0
 80020f0:	3b01      	subs	r3, #1
 80020f2:	429c      	cmp	r4, r3
 80020f4:	db1f      	blt.n	8002136 <detectBulletHit+0x1c8>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 f960 	bl	80033c0 <fpToInt>
 8002100:	4604      	mov	r4, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4618      	mov	r0, r3
 8002108:	f001 f95a 	bl	80033c0 <fpToInt>
 800210c:	4603      	mov	r3, r0
 800210e:	3b09      	subs	r3, #9
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002110:	429c      	cmp	r4, r3
 8002112:	db10      	blt.n	8002136 <detectBulletHit+0x1c8>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f001 f951 	bl	80033c0 <fpToInt>
 800211e:	4604      	mov	r4, r0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 f94b 	bl	80033c0 <fpToInt>
 800212a:	4603      	mov	r3, r0
 800212c:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 800212e:	429c      	cmp	r4, r3
 8002130:	dc01      	bgt.n	8002136 <detectBulletHit+0x1c8>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <detectBulletHit+0x1ca>
 8002136:	2300      	movs	r3, #0
 8002138:	74fb      	strb	r3, [r7, #19]
		}

		//If a hit deletes a part of the spaceship
		if(hitSpaceship){
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d055      	beq.n	80021ec <detectBulletHit+0x27e>
			gameState->soundToPlay = 4;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

			if(gameState->spaceship.numberOfParts==3){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800214e:	2b03      	cmp	r3, #3
 8002150:	d11f      	bne.n	8002192 <detectBulletHit+0x224>
				deleteMe(fpToInt(gameState->spaceship.position.x)-7, fpToInt(gameState->spaceship.position.y)/yScale);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f932 	bl	80033c0 <fpToInt>
 800215c:	4603      	mov	r3, r0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b07      	subs	r3, #7
 8002162:	b2dc      	uxtb	r4, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4618      	mov	r0, r3
 800216a:	f001 f929 	bl	80033c0 <fpToInt>
 800216e:	4603      	mov	r3, r0
 8002170:	0fda      	lsrs	r2, r3, #31
 8002172:	4413      	add	r3, r2
 8002174:	105b      	asrs	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	4620      	mov	r0, r4
 800217c:	f002 f865 	bl	800424a <deleteMe>
				gameState->spaceship.numberOfParts--;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b2da      	uxtb	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002190:	e023      	b.n	80021da <detectBulletHit+0x26c>
			} else if(gameState->spaceship.numberOfParts==2){
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002198:	2b02      	cmp	r3, #2
 800219a:	d11e      	bne.n	80021da <detectBulletHit+0x26c>
				deleteMe(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y)/yScale);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f90d 	bl	80033c0 <fpToInt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3307      	adds	r3, #7
 80021ac:	b2dc      	uxtb	r4, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 f904 	bl	80033c0 <fpToInt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	0fda      	lsrs	r2, r3, #31
 80021bc:	4413      	add	r3, r2
 80021be:	105b      	asrs	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f002 f840 	bl	800424a <deleteMe>
				gameState->spaceship.numberOfParts--;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}

			deleteBulletNode(&(gameState->bulletLL), current);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6979      	ldr	r1, [r7, #20]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fd76 	bl	8004cd0 <deleteBulletNode>
			current = current->nextBulletAddress;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	617b      	str	r3, [r7, #20]
			continue;
 80021ea:	e06a      	b.n	80022c2 <detectBulletHit+0x354>
		}


		//Loops over all the enemies and checks for hits
		enemyNode_t* currentEnemy = gameState->enemyLL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80021f2:	e060      	b.n	80022b6 <detectBulletHit+0x348>
			uint8_t hitEnemy = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	727b      	strb	r3, [r7, #9]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f8df 	bl	80033c0 <fpToInt>
 8002202:	4604      	mov	r4, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f001 f8d7 	bl	80033c0 <fpToInt>
 8002212:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8002214:	429c      	cmp	r4, r3
 8002216:	db33      	blt.n	8002280 <detectBulletHit+0x312>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f001 f8cf 	bl	80033c0 <fpToInt>
 8002222:	4604      	mov	r4, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 f8c7 	bl	80033c0 <fpToInt>
 8002232:	4603      	mov	r3, r0
 8002234:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8002236:	429c      	cmp	r4, r3
 8002238:	dc22      	bgt.n	8002280 <detectBulletHit+0x312>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f8be 	bl	80033c0 <fpToInt>
 8002244:	4604      	mov	r4, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f001 f8b6 	bl	80033c0 <fpToInt>
 8002254:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8002256:	429c      	cmp	r4, r3
 8002258:	db12      	blt.n	8002280 <detectBulletHit+0x312>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f8ae 	bl	80033c0 <fpToInt>
 8002264:	4604      	mov	r4, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f8a6 	bl	80033c0 <fpToInt>
 8002274:	4603      	mov	r3, r0
 8002276:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8002278:	429c      	cmp	r4, r3
 800227a:	dc01      	bgt.n	8002280 <detectBulletHit+0x312>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <detectBulletHit+0x314>
 8002280:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8002282:	727b      	strb	r3, [r7, #9]
			if(hitEnemy == 1){
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d112      	bne.n	80022b0 <detectBulletHit+0x342>
				gameState->score += 10;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800228e:	330a      	adds	r3, #10
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	865a      	strh	r2, [r3, #50]	; 0x32
				drawScore(gameState);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f001 ff62 	bl	8004160 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6979      	ldr	r1, [r7, #20]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fd15 	bl	8004cd0 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f002 fc5d 	bl	8004b68 <deleteEnemyNode>
				break;
 80022ae:	e005      	b.n	80022bc <detectBulletHit+0x34e>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d19b      	bne.n	80021f4 <detectBulletHit+0x286>
		}
		current = current->nextBulletAddress;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f ae5a 	bne.w	8001f7e <detectBulletHit+0x10>
	}
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}

080022d4 <drawBullets>:
/**
  * @brief  draws all the bullets to the screen
  * @param  gamestate: the current state of the game
  * @retval None
  */
void drawBullets(gameState_t* gameState){
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 80022e2:	e036      	b.n	8002352 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f869 	bl	80033c0 <fpToInt>
 80022ee:	4604      	mov	r4, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f001 f863 	bl	80033c0 <fpToInt>
 80022fa:	4603      	mov	r3, r0
 80022fc:	0fda      	lsrs	r2, r3, #31
 80022fe:	4413      	add	r3, r2
 8002300:	105b      	asrs	r3, r3, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fcd1 	bl	8001cac <gotoxy>
		printf(" ");
 800230a:	2020      	movs	r0, #32
 800230c:	f004 fa66 	bl	80067dc <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f001 f853 	bl	80033c0 <fpToInt>
 800231a:	4604      	mov	r4, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f84d 	bl	80033c0 <fpToInt>
 8002326:	4603      	mov	r3, r0
 8002328:	0fda      	lsrs	r2, r3, #31
 800232a:	4413      	add	r3, r2
 800232c:	105b      	asrs	r3, r3, #1
 800232e:	4619      	mov	r1, r3
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fcbb 	bl	8001cac <gotoxy>
		printf("O");
 8002336:	204f      	movs	r0, #79	; 0x4f
 8002338:	f004 fa50 	bl	80067dc <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1c5      	bne.n	80022e4 <drawBullets+0x10>
	}
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
	...

08002364 <NVIC_EnableIRQ>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2201      	movs	r2, #1
 8002376:	fa02 f103 	lsl.w	r1, r2, r3
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <NVIC_EnableIRQ+0x30>)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da0b      	bge.n	80023c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <NVIC_SetPriority+0x4c>)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	3b04      	subs	r3, #4
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80023c2:	e009      	b.n	80023d8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <NVIC_SetPriority+0x50>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	e000e100 	.word	0xe000e100

080023ec <initJoystick>:
/**
  * @brief  Sets up the pins for the joystick TODO: REF
  * @param  None
  * @retval None
  */
void initJoystick(){
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80023f0:	4b46      	ldr	r3, [pc, #280]	; (800250c <initJoystick+0x120>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	4a45      	ldr	r2, [pc, #276]	; (800250c <initJoystick+0x120>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fa:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80023fc:	4b43      	ldr	r3, [pc, #268]	; (800250c <initJoystick+0x120>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4a42      	ldr	r2, [pc, #264]	; (800250c <initJoystick+0x120>)
 8002402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002406:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8002408:	4b40      	ldr	r3, [pc, #256]	; (800250c <initJoystick+0x120>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4a3f      	ldr	r2, [pc, #252]	; (800250c <initJoystick+0x120>)
 800240e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002412:	6153      	str	r3, [r2, #20]

	//CENTER B5
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <initJoystick+0x124>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3d      	ldr	r2, [pc, #244]	; (8002510 <initJoystick+0x124>)
 800241a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800241e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 – Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <initJoystick+0x124>)
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <initJoystick+0x124>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <initJoystick+0x124>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a38      	ldr	r2, [pc, #224]	; (8002510 <initJoystick+0x124>)
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <initJoystick+0x124>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a35      	ldr	r2, [pc, #212]	; (8002510 <initJoystick+0x124>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]

	 //UP A4
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2));
 8002440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800244a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2));
 8002450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002454:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2));
 800245c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2));
 800246c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	60d3      	str	r3, [r2, #12]

	 //down B0
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2));
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <initJoystick+0x124>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a23      	ldr	r2, [pc, #140]	; (8002510 <initJoystick+0x124>)
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2));
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <initJoystick+0x124>)
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <initJoystick+0x124>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2));
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <initJoystick+0x124>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <initJoystick+0x124>)
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2));
 800249c:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <initJoystick+0x124>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <initJoystick+0x124>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]

	 //left C1
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2));
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <initJoystick+0x128>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <initJoystick+0x128>)
 80024ae:	f023 030c 	bic.w	r3, r3, #12
 80024b2:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2));
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <initJoystick+0x128>)
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <initJoystick+0x128>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2));
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <initJoystick+0x128>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <initJoystick+0x128>)
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2));
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <initJoystick+0x128>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <initJoystick+0x128>)
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	60d3      	str	r3, [r2, #12]

	 //right C0
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2));
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <initJoystick+0x128>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <initJoystick+0x128>)
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2));
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <initJoystick+0x128>)
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <initJoystick+0x128>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2));
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <initJoystick+0x128>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <initJoystick+0x128>)
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2));
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <initJoystick+0x128>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <initJoystick+0x128>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	60d3      	str	r3, [r2, #12]

}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800

08002518 <centerIsPressed>:
/**
  * @brief  Reads the if the center of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t centerIsPressed(){
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <centerIsPressed+0x50>)
 800251e:	8a1b      	ldrh	r3, [r3, #16]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <centerIsPressed+0x2c>
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <centerIsPressed+0x54>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <centerIsPressed+0x58>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b1e      	cmp	r3, #30
 8002536:	d905      	bls.n	8002544 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <centerIsPressed+0x54>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <centerIsPressed+0x58>)
 800253e:	6013      	str	r3, [r2, #0]
		 return 1;
 8002540:	2301      	movs	r3, #1
 8002542:	e00c      	b.n	800255e <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <centerIsPressed+0x50>)
 8002546:	8a1b      	ldrh	r3, [r3, #16]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <centerIsPressed+0x54>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3b1e      	subs	r3, #30
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <centerIsPressed+0x58>)
 800255a:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 800255c:	2300      	movs	r3, #0
	 }
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	48000400 	.word	0x48000400
 800256c:	200001d8 	.word	0x200001d8
 8002570:	200001b4 	.word	0x200001b4

08002574 <upIsPressed>:
/**
  * @brief  Reads the if the up of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t upIsPressed(){
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8002578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800257c:	8a1b      	ldrh	r3, [r3, #16]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <upIsPressed+0x2e>
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <upIsPressed+0x54>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <upIsPressed+0x58>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b1e      	cmp	r3, #30
 8002594:	d905      	bls.n	80025a2 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <upIsPressed+0x54>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <upIsPressed+0x58>)
 800259c:	6013      	str	r3, [r2, #0]
			 return 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00d      	b.n	80025be <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 80025a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025a6:	8a1b      	ldrh	r3, [r3, #16]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d104      	bne.n	80025bc <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <upIsPressed+0x54>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3b1e      	subs	r3, #30
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <upIsPressed+0x58>)
 80025ba:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80025bc:	2300      	movs	r3, #0
		 }
	 }
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	200001d8 	.word	0x200001d8
 80025cc:	200001b8 	.word	0x200001b8

080025d0 <downIsPressed>:
/**
  * @brief  Reads the if the down of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t downIsPressed(){
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <downIsPressed+0x50>)
 80025d6:	8a1b      	ldrh	r3, [r3, #16]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <downIsPressed+0x2c>
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <downIsPressed+0x54>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <downIsPressed+0x58>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b1e      	cmp	r3, #30
 80025ee:	d905      	bls.n	80025fc <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <downIsPressed+0x54>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <downIsPressed+0x58>)
 80025f6:	6013      	str	r3, [r2, #0]
			 return 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e00c      	b.n	8002616 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <downIsPressed+0x50>)
 80025fe:	8a1b      	ldrh	r3, [r3, #16]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <downIsPressed+0x54>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3b1e      	subs	r3, #30
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <downIsPressed+0x58>)
 8002612:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8002614:	2300      	movs	r3, #0
		 }
	 }
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	48000400 	.word	0x48000400
 8002624:	200001d8 	.word	0x200001d8
 8002628:	200001bc 	.word	0x200001bc

0800262c <initTimer>:
/**
  * @brief  Sets up timer 15 to a period of 0.01s and timer 2 to be configured later for the buzzer TODO: REF
  * @param  None
  * @retval None
  */
void initTimer(){ //period = 0,01 sec
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <initTimer+0x108>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <initTimer+0x108>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 800263c:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <initTimer+0x10c>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <initTimer+0x10c>)
 8002644:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8002648:	f023 030f 	bic.w	r3, r3, #15
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <initTimer+0x10c>)
 8002652:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8002658:	4b37      	ldr	r3, [pc, #220]	; (8002738 <initTimer+0x10c>)
 800265a:	2209      	movs	r2, #9
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <initTimer+0x10c>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4a34      	ldr	r2, [pc, #208]	; (8002738 <initTimer+0x10c>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <initTimer+0x10c>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <initTimer+0x10c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800267a:	2100      	movs	r1, #0
 800267c:	2018      	movs	r0, #24
 800267e:	f7ff fe8b 	bl	8002398 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8002682:	2018      	movs	r0, #24
 8002684:	f7ff fe6e 	bl	8002364 <NVIC_EnableIRQ>


	 //BUZZER timer (TIM2)vvvvvvvvvvvvvvvv
	 RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <initTimer+0x108>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <initTimer+0x108>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	61d3      	str	r3, [r2, #28]
	 TIM2->CR1 &= 0xF400; // Configure timer 2
 8002694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026a0:	f423 633f 	bic.w	r3, r3, #3056	; 0xbf0
 80026a4:	f023 030f 	bic.w	r3, r3, #15
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8013      	strh	r3, [r2, #0]
	 TIM2->PSC = 9;
 80026ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b0:	2209      	movs	r2, #9
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 80026b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c2:	6213      	str	r3, [r2, #32]
	 TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 80026c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6213      	str	r3, [r2, #32]
	 TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 80026d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 80026e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 80026f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002702:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8002704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270e:	f023 0308 	bic.w	r3, r3, #8
 8002712:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8002714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	61d3      	str	r3, [r2, #28]
	 TIM2->CCR3 = 63999 / 2; // Set duty cycle to 50 %
 8002724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002728:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40014000 	.word	0x40014000

0800273c <TIM1_BRK_TIM15_IRQHandler>:
/**
  * @brief  When timer 15 interrupts (every 0.01s) adds 1 to runtime
  * @param  None
  * @retval None
  */
void TIM1_BRK_TIM15_IRQHandler(void) {
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	runtime++;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002748:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6113      	str	r3, [r2, #16]
 }
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	200001d8 	.word	0x200001d8
 8002764:	40014000 	.word	0x40014000

08002768 <initBuzzerPin>:
/**
  * @brief  Sets up the pin controlling the buzzer
  * @param  None
  * @retval None
  */
void initBuzzerPin(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <initBuzzerPin+0x68>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <initBuzzerPin+0x68>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6153      	str	r3, [r2, #20]

	GPIOB->OSPEEDR &= ~(0x00000003 << (2*10));
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <initBuzzerPin+0x6c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <initBuzzerPin+0x6c>)
 800277e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002782:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*10));  //Low speed
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <initBuzzerPin+0x6c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <initBuzzerPin+0x6c>)
 800278a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278e:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (10));
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <initBuzzerPin+0x6c>)
 8002792:	889b      	ldrh	r3, [r3, #4]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <initBuzzerPin+0x6c>)
 8002798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279c:	b29b      	uxth	r3, r3
 800279e:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= 0x0000 << (10); //Push-pull
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <initBuzzerPin+0x6c>)
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <initBuzzerPin+0x6c>)
 80027a4:	8892      	ldrh	r2, [r2, #4]
 80027a6:	b292      	uxth	r2, r2
 80027a8:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*10));
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <initBuzzerPin+0x6c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <initBuzzerPin+0x6c>)
 80027b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027b4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000002 << (2*10); //Alternate function
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <initBuzzerPin+0x6c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <initBuzzerPin+0x6c>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c0:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 80027c2:	2201      	movs	r2, #1
 80027c4:	210a      	movs	r1, #10
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <initBuzzerPin+0x6c>)
 80027c8:	f7fe fcda 	bl	8001180 <GPIO_PinAFConfig>
}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	48000400 	.word	0x48000400

080027d8 <I2C_Write>:
/**
  * @brief  Writes a byte on I2C bus TODO: REF
  * @param  address: the I2C adress to writer on, reg: the register to write to, val: the byte to write
  * @retval None
  */
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af02      	add	r7, sp, #8
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	460b      	mov	r3, r1
 80027e4:	717b      	strb	r3, [r7, #5]
 80027e6:	4613      	mov	r3, r2
 80027e8:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80027ea:	bf00      	nop
 80027ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f0:	4825      	ldr	r0, [pc, #148]	; (8002888 <I2C_Write+0xb0>)
 80027f2:	f7fe fd57 	bl	80012a4 <I2C_GetFlagStatus>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d0f7      	beq.n	80027ec <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80027fc:	88f9      	ldrh	r1, [r7, #6]
 80027fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002808:	2201      	movs	r2, #1
 800280a:	481f      	ldr	r0, [pc, #124]	; (8002888 <I2C_Write+0xb0>)
 800280c:	f7fe fd02 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8002810:	bf00      	nop
 8002812:	2102      	movs	r1, #2
 8002814:	481c      	ldr	r0, [pc, #112]	; (8002888 <I2C_Write+0xb0>)
 8002816:	f7fe fd45 	bl	80012a4 <I2C_GetFlagStatus>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f8      	beq.n	8002812 <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 8002820:	797b      	ldrb	r3, [r7, #5]
 8002822:	4619      	mov	r1, r3
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <I2C_Write+0xb0>)
 8002826:	f7fe fd21 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 800282a:	bf00      	nop
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	4816      	ldr	r0, [pc, #88]	; (8002888 <I2C_Write+0xb0>)
 8002830:	f7fe fd38 	bl	80012a4 <I2C_GetFlagStatus>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f8      	beq.n	800282c <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 800283a:	88f9      	ldrh	r1, [r7, #6]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	2201      	movs	r2, #1
 8002846:	4810      	ldr	r0, [pc, #64]	; (8002888 <I2C_Write+0xb0>)
 8002848:	f7fe fce4 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 800284c:	bf00      	nop
 800284e:	2102      	movs	r1, #2
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <I2C_Write+0xb0>)
 8002852:	f7fe fd27 	bl	80012a4 <I2C_GetFlagStatus>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f8      	beq.n	800284e <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 800285c:	793b      	ldrb	r3, [r7, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	4809      	ldr	r0, [pc, #36]	; (8002888 <I2C_Write+0xb0>)
 8002862:	f7fe fd03 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8002866:	bf00      	nop
 8002868:	2120      	movs	r1, #32
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <I2C_Write+0xb0>)
 800286c:	f7fe fd1a 	bl	80012a4 <I2C_GetFlagStatus>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f8      	beq.n	8002868 <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8002876:	2120      	movs	r1, #32
 8002878:	4803      	ldr	r0, [pc, #12]	; (8002888 <I2C_Write+0xb0>)
 800287a:	f7fe fd32 	bl	80012e2 <I2C_ClearFlag>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40005400 	.word	0x40005400

0800288c <I2C_Read>:
/**
  * @brief  Reads data from the I2C bus TODO: REF
  * @param  address: the I2C adress to writer on, reg: the register to write to, vals: the bytes to read, n: the amout of bytes to read
  * @retval None
  */
uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	af02      	add	r7, sp, #8
 8002892:	603a      	str	r2, [r7, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	460b      	mov	r3, r1
 800289c:	717b      	strb	r3, [r7, #5]
 800289e:	4613      	mov	r3, r2
 80028a0:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80028a6:	bf00      	nop
 80028a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ac:	4830      	ldr	r0, [pc, #192]	; (8002970 <I2C_Read+0xe4>)
 80028ae:	f7fe fcf9 	bl	80012a4 <I2C_GetFlagStatus>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d0f7      	beq.n	80028a8 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80028b8:	88f9      	ldrh	r1, [r7, #6]
 80028ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2300      	movs	r3, #0
 80028c2:	2201      	movs	r2, #1
 80028c4:	482a      	ldr	r0, [pc, #168]	; (8002970 <I2C_Read+0xe4>)
 80028c6:	f7fe fca5 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80028ca:	bf00      	nop
 80028cc:	2102      	movs	r1, #2
 80028ce:	4828      	ldr	r0, [pc, #160]	; (8002970 <I2C_Read+0xe4>)
 80028d0:	f7fe fce8 	bl	80012a4 <I2C_GetFlagStatus>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f8      	beq.n	80028cc <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 80028da:	797b      	ldrb	r3, [r7, #5]
 80028dc:	4619      	mov	r1, r3
 80028de:	4824      	ldr	r0, [pc, #144]	; (8002970 <I2C_Read+0xe4>)
 80028e0:	f7fe fcc4 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 80028e4:	bf00      	nop
 80028e6:	2140      	movs	r1, #64	; 0x40
 80028e8:	4821      	ldr	r0, [pc, #132]	; (8002970 <I2C_Read+0xe4>)
 80028ea:	f7fe fcdb 	bl	80012a4 <I2C_GetFlagStatus>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f8      	beq.n	80028e6 <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 80028f4:	793a      	ldrb	r2, [r7, #4]
 80028f6:	88f9      	ldrh	r1, [r7, #6]
 80028f8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002902:	481b      	ldr	r0, [pc, #108]	; (8002970 <I2C_Read+0xe4>)
 8002904:	f7fe fc86 	bl	8001214 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 8002908:	2300      	movs	r3, #0
 800290a:	73bb      	strb	r3, [r7, #14]
 800290c:	e01b      	b.n	8002946 <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 800290e:	bf00      	nop
 8002910:	2104      	movs	r1, #4
 8002912:	4817      	ldr	r0, [pc, #92]	; (8002970 <I2C_Read+0xe4>)
 8002914:	f7fe fcc6 	bl	80012a4 <I2C_GetFlagStatus>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f8      	beq.n	8002910 <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 800291e:	793b      	ldrb	r3, [r7, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d908      	bls.n	8002936 <I2C_Read+0xaa>
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	18d4      	adds	r4, r2, r3
 800292a:	4811      	ldr	r0, [pc, #68]	; (8002970 <I2C_Read+0xe4>)
 800292c:	f7fe fcad 	bl	800128a <I2C_ReceiveData>
 8002930:	4603      	mov	r3, r0
 8002932:	7023      	strb	r3, [r4, #0]
 8002934:	e004      	b.n	8002940 <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 8002936:	480e      	ldr	r0, [pc, #56]	; (8002970 <I2C_Read+0xe4>)
 8002938:	f7fe fca7 	bl	800128a <I2C_ReceiveData>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	3301      	adds	r3, #1
 8002944:	73bb      	strb	r3, [r7, #14]
 8002946:	7bba      	ldrb	r2, [r7, #14]
 8002948:	793b      	ldrb	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3df      	bcc.n	800290e <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 800294e:	bf00      	nop
 8002950:	2120      	movs	r1, #32
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <I2C_Read+0xe4>)
 8002954:	f7fe fca6 	bl	80012a4 <I2C_GetFlagStatus>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f8      	beq.n	8002950 <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800295e:	2120      	movs	r1, #32
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <I2C_Read+0xe4>)
 8002962:	f7fe fcbe 	bl	80012e2 <I2C_ClearFlag>

    return val;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	40005400 	.word	0x40005400

08002974 <I2C_init>:
  * @brief  Sets up the I2C bus TODO: REF
  * @param  None
  * @retval None
  */
void I2C_init()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <I2C_init+0x15c>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <I2C_init+0x15c>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002982:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <I2C_init+0x160>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <I2C_init+0x160>)
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <I2C_init+0x160>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <I2C_init+0x160>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <I2C_init+0x160>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4a4c      	ldr	r2, [pc, #304]	; (8002ad4 <I2C_init+0x160>)
 80029a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <I2C_init+0x160>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	4a49      	ldr	r2, [pc, #292]	; (8002ad4 <I2C_init+0x160>)
 80029ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80029b4:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <I2C_init+0x160>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <I2C_init+0x160>)
 80029ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80029be:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80029c0:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <I2C_init+0x160>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <I2C_init+0x160>)
 80029c6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80029ca:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <I2C_init+0x160>)
 80029ce:	889b      	ldrh	r3, [r3, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <I2C_init+0x160>)
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <I2C_init+0x160>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4a3c      	ldr	r2, [pc, #240]	; (8002ad4 <I2C_init+0x160>)
 80029e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <I2C_init+0x160>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <I2C_init+0x160>)
 80029f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80029f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <I2C_init+0x160>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <I2C_init+0x160>)
 80029fe:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8002a02:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <I2C_init+0x160>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <I2C_init+0x160>)
 8002a0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002a0e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <I2C_init+0x160>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <I2C_init+0x160>)
 8002a16:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002a1a:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <I2C_init+0x15c>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <I2C_init+0x15c>)
 8002a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a26:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <I2C_init+0x164>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <I2C_init+0x164>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <I2C_init+0x164>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4927      	ldr	r1, [pc, #156]	; (8002ad8 <I2C_init+0x164>)
 8002a3a:	4b28      	ldr	r3, [pc, #160]	; (8002adc <I2C_init+0x168>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <I2C_init+0x164>)
 8002a42:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <I2C_init+0x164>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <I2C_init+0x164>)
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <I2C_init+0x164>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <I2C_init+0x164>)
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <I2C_init+0x16c>)
 8002a54:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <I2C_init+0x164>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <I2C_init+0x164>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <I2C_init+0x164>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <I2C_init+0x164>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <I2C_init+0x164>)
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <I2C_init+0x164>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <I2C_init+0x164>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <I2C_init+0x164>)
 8002a7c:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002a80:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <I2C_init+0x164>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <I2C_init+0x164>)
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8c:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <I2C_init+0x164>)
 8002a90:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <I2C_init+0x164>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <I2C_init+0x164>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <I2C_init+0x164>)
 8002a9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aa4:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <I2C_init+0x164>)
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <I2C_init+0x164>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2107      	movs	r1, #7
 8002ab2:	2098      	movs	r0, #152	; 0x98
 8002ab4:	f7ff fe90 	bl	80027d8 <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 8002ab8:	2200      	movs	r2, #0
 8002aba:	210a      	movs	r1, #10
 8002abc:	2098      	movs	r0, #152	; 0x98
 8002abe:	f7ff fe8b 	bl	80027d8 <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 8002ac2:	221f      	movs	r2, #31
 8002ac4:	2109      	movs	r1, #9
 8002ac6:	2098      	movs	r0, #152	; 0x98
 8002ac8:	f7ff fe86 	bl	80027d8 <I2C_Write>
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	00cfe0ff 	.word	0x00cfe0ff
 8002ae0:	10805e89 	.word	0x10805e89

08002ae4 <analogConfigPorts>:
/**
  * @brief  Sets up the analog ports for the potentiometers TODO: REF
  * @param  None
  * @retval None
  */
void analogConfigPorts(){
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <analogConfigPorts+0x140>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <analogConfigPorts+0x140>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	0052      	lsls	r2, r2, #1
 8002b04:	2103      	movs	r1, #3
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	43d2      	mvns	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b12:	400b      	ands	r3, r1
 8002b14:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8002b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8002b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	0052      	lsls	r2, r2, #1
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	43d2      	mvns	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8002b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	2103      	movs	r1, #3
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <analogConfigPorts+0x140>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <analogConfigPorts+0x140>)
 8002b5e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <analogConfigPorts+0x140>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <analogConfigPorts+0x140>)
 8002b6a:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8002b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <analogConfigPorts+0x140>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <analogConfigPorts+0x140>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <analogConfigPorts+0x144>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b9e:	f023 030f 	bic.w	r3, r3, #15
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002ba4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <analogConfigPorts+0xdc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	dbf8      	blt.n	8002bba <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd6:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002bd8:	bf00      	nop
 8002bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	dafa      	bge.n	8002bda <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e002      	b.n	8002bf0 <analogConfigPorts+0x10c>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b63      	cmp	r3, #99	; 0x63
 8002bf4:	ddf9      	ble.n	8002bea <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8002c06:	bf00      	nop
 8002c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f8      	beq.n	8002c08 <analogConfigPorts+0x124>
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	fdffc007 	.word	0xfdffc007

08002c2c <readPotentiometer>:
/**
  * @brief  Reads the left potentiometer TODO: REF
  * @param  None
  * @retval A value between 0 and 4096 from the potentiometers
  */
uint16_t readPotentiometer(){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8002c32:	2300      	movs	r3, #0
 8002c34:	2201      	movs	r2, #1
 8002c36:	2101      	movs	r1, #1
 8002c38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c3c:	f7fe f88a 	bl	8000d54 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002c40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c44:	f7fe f97e 	bl	8000f44 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002c48:	bf00      	nop
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c50:	f7fe f995 	bl	8000f7e <ADC_GetFlagStatus>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f7      	beq.n	8002c4a <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8002c5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c5e:	f7fe f981 	bl	8000f64 <ADC_GetConversionValue>
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002c66:	88fb      	ldrh	r3, [r7, #6]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <initRGB>:
/**
  * @brief  Sets up the pins for RGB TODO: REF
  * @param  None
  * @retval None
  */
void initRGB(){
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
	uint8_t pin = 9;
 8002c76:	2309      	movs	r3, #9
 8002c78:	71fb      	strb	r3, [r7, #7]
	GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	0052      	lsls	r2, r2, #1
 8002c84:	2103      	movs	r1, #3
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	43d2      	mvns	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c92:	400b      	ands	r3, r1
 8002c94:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8002c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	0052      	lsls	r2, r2, #1
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~(0x0001 << (pin));
 8002cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb4:	889b      	ldrh	r3, [r3, #4]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b21a      	sxth	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	809a      	strh	r2, [r3, #4]
	GPIOA->OTYPER |= 0x0000 << (pin);
 8002cd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cdc:	8892      	ldrh	r2, [r2, #4]
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	809a      	strh	r2, [r3, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002ce2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	79fa      	ldrb	r2, [r7, #7]
 8002cea:	0052      	lsls	r2, r2, #1
 8002cec:	2103      	movs	r1, #3
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	43d2      	mvns	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000001 << (2*pin);
 8002cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	0052      	lsls	r2, r2, #1
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6013      	str	r3, [r2, #0]

	//setup PC7 (Green)
	pin = 7;
 8002d18:	2307      	movs	r3, #7
 8002d1a:	71fb      	strb	r3, [r7, #7]
	GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <initRGB+0x1c8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	0052      	lsls	r2, r2, #1
 8002d24:	2103      	movs	r1, #3
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	43d2      	mvns	r2, r2
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <initRGB+0x1c8>)
 8002d30:	400b      	ands	r3, r1
 8002d32:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8002d34:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <initRGB+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	0052      	lsls	r2, r2, #1
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4611      	mov	r1, r2
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <initRGB+0x1c8>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~(0x0001 << (pin));
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <initRGB+0x1c8>)
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	4013      	ands	r3, r2
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <initRGB+0x1c8>)
 8002d66:	b292      	uxth	r2, r2
 8002d68:	809a      	strh	r2, [r3, #4]
	GPIOC->OTYPER |= 0x0000 << (pin);
 8002d6a:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <initRGB+0x1c8>)
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <initRGB+0x1c8>)
 8002d6e:	8892      	ldrh	r2, [r2, #4]
 8002d70:	b292      	uxth	r2, r2
 8002d72:	809a      	strh	r2, [r3, #4]
	GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <initRGB+0x1c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	0052      	lsls	r2, r2, #1
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	43d2      	mvns	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <initRGB+0x1c8>)
 8002d88:	400b      	ands	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00000001 << (2*pin);
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <initRGB+0x1c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	0052      	lsls	r2, r2, #1
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <initRGB+0x1c8>)
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6013      	str	r3, [r2, #0]

	//setup PB4 (Red)
	pin = 4;
 8002da2:	2304      	movs	r3, #4
 8002da4:	71fb      	strb	r3, [r7, #7]
	GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002da6:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <initRGB+0x1cc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	0052      	lsls	r2, r2, #1
 8002dae:	2103      	movs	r1, #3
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	43d2      	mvns	r2, r2
 8002db6:	4611      	mov	r1, r2
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <initRGB+0x1cc>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <initRGB+0x1cc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	0052      	lsls	r2, r2, #1
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <initRGB+0x1cc>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (pin));
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <initRGB+0x1cc>)
 8002dd6:	889b      	ldrh	r3, [r3, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4013      	ands	r3, r2
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <initRGB+0x1cc>)
 8002df0:	b292      	uxth	r2, r2
 8002df2:	809a      	strh	r2, [r3, #4]
	GPIOB->OTYPER |= 0x0000 << (pin);
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <initRGB+0x1cc>)
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <initRGB+0x1cc>)
 8002df8:	8892      	ldrh	r2, [r2, #4]
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <initRGB+0x1cc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	0052      	lsls	r2, r2, #1
 8002e06:	2103      	movs	r1, #3
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	43d2      	mvns	r2, r2
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <initRGB+0x1cc>)
 8002e12:	400b      	ands	r3, r1
 8002e14:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000001 << (2*pin);
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <initRGB+0x1cc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	0052      	lsls	r2, r2, #1
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <initRGB+0x1cc>)
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	48000400 	.word	0x48000400

08002e40 <RGBColor>:
/**
  * @brief Sets the color of the LED based on an array [R, G, B] TODO: REF
  * @param  color: array with 3 elements for R,G and B
  * @retval None
  */
void RGBColor(uint8_t color[]){
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <RGBColor+0x88>)
 8002e4a:	8a9b      	ldrh	r3, [r3, #20]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <RGBColor+0x88>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <RGBColor+0x8c>)
 8002e5a:	8a9b      	ldrh	r3, [r3, #20]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <RGBColor+0x8c>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e6c:	8a9b      	ldrh	r3, [r3, #20]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d104      	bne.n	8002e8e <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <RGBColor+0x88>)
 8002e86:	8a9b      	ldrh	r3, [r3, #20]
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <RGBColor+0x88>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3301      	adds	r3, #1
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d104      	bne.n	8002ea2 <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <RGBColor+0x8c>)
 8002e9a:	8a9b      	ldrh	r3, [r3, #20]
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <RGBColor+0x8c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eb0:	8a9b      	ldrh	r3, [r3, #20]
 8002eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	829a      	strh	r2, [r3, #20]
	}
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	48000800 	.word	0x48000800

08002ed0 <writeToFlash>:
/**
  * @brief  writes some data to a given address TODO: REF
  * @param  data: the 2 bytes to the write, address: the address to write to
  * @retval None
  */
void writeToFlash(uint16_t data, uint32_t address){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8002edc:	f7fe f868 	bl	8000fb0 <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8002ee0:	2034      	movs	r0, #52	; 0x34
 8002ee2:	f7fe f8ef 	bl	80010c4 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 8002ee6:	6838      	ldr	r0, [r7, #0]
 8002ee8:	f7fe f88c 	bl	8001004 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f7fe f8b9 	bl	8001068 <FLASH_ProgramHalfWord>
	FLASH_Lock();
 8002ef6:	f7fe f875 	bl	8000fe4 <FLASH_Lock>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <readFromFlash>:
/**
  * @brief  Reads data from flash memory TODO: REF
  * @param  address: the address to write to
  * @retval 2 bytes from memory
  */
uint16_t readFromFlash(uint32_t address){
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	0000      	movs	r0, r0
 8002f1c:	0000      	movs	r0, r0
	...

08002f20 <setFreq>:
/**
  * @brief  Sets the frequenc of the buzzer TODO: REF
  * @param  freq: the frequency the buzzer should play [Hz]
  * @retval None
  */
void setFreq(uint16_t freq) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
	uint32_t reload = 64e6 / freq / (9 + 1) - 1;
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd faf9 	bl	8000524 <__aeabi_i2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	a11c      	add	r1, pc, #112	; (adr r1, 8002fa8 <setFreq+0x88>)
 8002f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f3c:	f7fd fc86 	bl	800084c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <setFreq+0x80>)
 8002f4e:	f7fd fc7d 	bl	800084c <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <setFreq+0x84>)
 8002f60:	f7fd f992 	bl	8000288 <__aeabi_dsub>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fd56 	bl	8000a1c <__aeabi_d2uiz>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
	TIM2->ARR = reload; // Set auto reload value
 8002f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR3 = reload/2; // Set compare register
 8002f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->EGR |= 0x01;
 8002f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6153      	str	r3, [r2, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40240000 	.word	0x40240000
 8002fa4:	3ff00000 	.word	0x3ff00000
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	418e8480 	.word	0x418e8480

08002fb0 <toggleBuzzer>:
/**
  * @brief  (de)activates the buzzer TODO: REF
  * @param  on: 1 = turn on, everything else = turn off
  * @retval None
  */
void toggleBuzzer(uint8_t on){
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	if(on == 1){
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10a      	bne.n	8002fd6 <toggleBuzzer+0x26>
		TIM2->CR1 |= 0x0001; //enable
 8002fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]
	}else{
		TIM2->CR1 &= ~(0x0001); //disable
	}
}
 8002fd4:	e009      	b.n	8002fea <toggleBuzzer+0x3a>
		TIM2->CR1 &= ~(0x0001); //disable
 8002fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <xValIsValid>:
/**
  * @brief  ensure powerups and enemies dont spawn over the moon
  * @param  xVal: the position of the objects, objectWidth: the width of the object
  * @retval 1 = valid, 0 = non-valid
  */
uint8_t xValIsValid(uint8_t xVal, uint8_t objectWidth){
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460a      	mov	r2, r1
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	4613      	mov	r3, r2
 8003004:	71bb      	strb	r3, [r7, #6]
	if ((xVal>=2 && xVal<=63-objectWidth) || (xVal>=77 && xVal<=screenWidth)){
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d905      	bls.n	8003018 <xValIsValid+0x22>
 800300c:	79fa      	ldrb	r2, [r7, #7]
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003014:	429a      	cmp	r2, r3
 8003016:	dd05      	ble.n	8003024 <xValIsValid+0x2e>
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b4c      	cmp	r3, #76	; 0x4c
 800301c:	d904      	bls.n	8003028 <xValIsValid+0x32>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b9c      	cmp	r3, #156	; 0x9c
 8003022:	d801      	bhi.n	8003028 <xValIsValid+0x32>
		return 1;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <xValIsValid+0x34>
	} else {
		return 0;
 8003028:	2300      	movs	r3, #0
	}
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <spawnEnemy>:
/**
  * @brief  Checks if it should spawn a new enemy, and if so spawns one
  * @param  gameState: the current state of the game
  * @retval None
  */
void spawnEnemy(gameState_t* gameState){
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	//Checks if a enemy should spawn
	if(runtime >= gameState->nextEnemySpawn){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <spawnEnemy+0x170>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	f200 80a9 	bhi.w	80031a0 <spawnEnemy+0x168>
		uint16_t enemyPos = (rand() % 149) + 1; //x-position between 1 and 149
 800304e:	f003 fc7f 	bl	8006950 <rand>
 8003052:	4603      	mov	r3, r0
 8003054:	4a55      	ldr	r2, [pc, #340]	; (80031ac <spawnEnemy+0x174>)
 8003056:	fb82 1203 	smull	r1, r2, r2, r3
 800305a:	10d1      	asrs	r1, r2, #3
 800305c:	17da      	asrs	r2, r3, #31
 800305e:	1a8a      	subs	r2, r1, r2
 8003060:	2195      	movs	r1, #149	; 0x95
 8003062:	fb01 f202 	mul.w	r2, r1, r2
 8003066:	1a9a      	subs	r2, r3, r2
 8003068:	b293      	uxth	r3, r2
 800306a:	3301      	adds	r3, #1
 800306c:	83fb      	strh	r3, [r7, #30]

		//Recalculates if position is non-valid
		while(!xValIsValid(enemyPos, 7)){
 800306e:	e00f      	b.n	8003090 <spawnEnemy+0x58>
			enemyPos  = (rand() % 149) + 1;
 8003070:	f003 fc6e 	bl	8006950 <rand>
 8003074:	4603      	mov	r3, r0
 8003076:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <spawnEnemy+0x174>)
 8003078:	fb82 1203 	smull	r1, r2, r2, r3
 800307c:	10d1      	asrs	r1, r2, #3
 800307e:	17da      	asrs	r2, r3, #31
 8003080:	1a8a      	subs	r2, r1, r2
 8003082:	2195      	movs	r1, #149	; 0x95
 8003084:	fb01 f202 	mul.w	r2, r1, r2
 8003088:	1a9a      	subs	r2, r3, r2
 800308a:	b293      	uxth	r3, r2
 800308c:	3301      	adds	r3, #1
 800308e:	83fb      	strh	r3, [r7, #30]
		while(!xValIsValid(enemyPos, 7)){
 8003090:	8bfb      	ldrh	r3, [r7, #30]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2107      	movs	r1, #7
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ffad 	bl	8002ff6 <xValIsValid>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0e6      	beq.n	8003070 <spawnEnemy+0x38>
		}

		//Generates a new enemy and appends to the linked list of enemies
		enemy_t* enemy = malloc(sizeof(enemy_t));
 80030a2:	2014      	movs	r0, #20
 80030a4:	f003 fac0 	bl	8006628 <malloc>
 80030a8:	4603      	mov	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 80030ac:	2008      	movs	r0, #8
 80030ae:	f003 fabb 	bl	8006628 <malloc>
 80030b2:	4603      	mov	r3, r0
 80030b4:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 80030b6:	8bfb      	ldrh	r3, [r7, #30]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f96c 	bl	8003396 <intToFp>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 80030c4:	2006      	movs	r0, #6
 80030c6:	f000 f966 	bl	8003396 <intToFp>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	601a      	str	r2, [r3, #0]

		uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100) + intToFp(gameState->difficulty), 0x00004000) + intToFp(1); //(score/100 + difficulty) * 0.25 + 1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030da:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <spawnEnemy+0x178>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f956 	bl	8003396 <intToFp>
 80030ea:	4604      	mov	r4, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f94e 	bl	8003396 <intToFp>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4423      	add	r3, r4
 80030fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f97d 	bl	8003402 <fpMultiply>
 8003108:	4604      	mov	r4, r0
 800310a:	2001      	movs	r0, #1
 800310c:	f000 f943 	bl	8003396 <intToFp>
 8003110:	4603      	mov	r3, r0
 8003112:	4423      	add	r3, r4
 8003114:	613b      	str	r3, [r7, #16]
		vector_t* vEnemy = malloc(sizeof(vector_t));
 8003116:	2008      	movs	r0, #8
 8003118:	f003 fa86 	bl	8006628 <malloc>
 800311c:	4603      	mov	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 8003120:	2000      	movs	r0, #0
 8003122:	f000 f938 	bl	8003396 <intToFp>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]
		vEnemy->y = fpMultiply((0x00004000 * yScale), levelMultiplier); //0.25 * multiplier
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003132:	f000 f966 	bl	8003402 <fpMultiply>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8003142:	2008      	movs	r0, #8
 8003144:	f003 fa70 	bl	8006628 <malloc>
 8003148:	4603      	mov	r3, r0
 800314a:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <spawnEnemy+0x170>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100; //A second every seconds
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2264      	movs	r2, #100	; 0x64
 800316e:	731a      	strb	r2, [r3, #12]

		gameState->nextEnemySpawn = runtime + (rand()%200) + 100; //spawns the next enemy after between 100 and 300 centiseconds
 8003170:	f003 fbee 	bl	8006950 <rand>
 8003174:	4603      	mov	r3, r0
 8003176:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <spawnEnemy+0x178>)
 8003178:	fb82 1203 	smull	r1, r2, r2, r3
 800317c:	1191      	asrs	r1, r2, #6
 800317e:	17da      	asrs	r2, r3, #31
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	21c8      	movs	r1, #200	; 0xc8
 8003184:	fb01 f202 	mul.w	r2, r1, r2
 8003188:	1a9a      	subs	r2, r3, r2
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <spawnEnemy+0x170>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4413      	add	r3, r2
 8003190:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]
		appendEnemy(gameState, enemy);
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f001 fcb6 	bl	8004b0c <appendEnemy>
	}
}
 80031a0:	bf00      	nop
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	200001d8 	.word	0x200001d8
 80031ac:	0dbeb61f 	.word	0x0dbeb61f
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <updateEnemy>:
/**
  * @brief  Loops over all the enemies and updates their position based on their velocities
  * @param  gameState: the current state of the game
  * @retval None
  */
void updateEnemy(gameState_t* gameState){
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80031c2:	e01c      	b.n	80031fe <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	440a      	add	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	440a      	add	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1df      	bne.n	80031c4 <updateEnemy+0x10>
	}
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <shootEnemy>:
/**
  * @brief  Loops over all the enemies and shoots a bullet based on firingRate
  * @param  gameState: the current state of the game
  * @retval None
  */
void shootEnemy(gameState_t* gameState){
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b092      	sub	sp, #72	; 0x48
 8003218:	af04      	add	r7, sp, #16
 800321a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8003222:	e05a      	b.n	80032da <shootEnemy+0xc6>
		//If enough time has passed shoot
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	7b12      	ldrb	r2, [r2, #12]
 8003230:	441a      	add	r2, r3
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <shootEnemy+0xd8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d24c      	bcs.n	80032d4 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 800323a:	2000      	movs	r0, #0
 800323c:	f000 f8ab 	bl	8003396 <intToFp>
 8003240:	4603      	mov	r3, r0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003244:	2002      	movs	r0, #2
 8003246:	f000 f8a6 	bl	8003396 <intToFp>
 800324a:	4603      	mov	r3, r0
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685c      	ldr	r4, [r3, #4]
 8003260:	2004      	movs	r0, #4
 8003262:	f000 f898 	bl	8003396 <intToFp>
 8003266:	4603      	mov	r3, r0
 8003268:	4423      	add	r3, r4
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	619a      	str	r2, [r3, #24]
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800328c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800329c:	e883 0003 	stmia.w	r3, {r0, r1}
 80032a0:	f107 0318 	add.w	r3, r7, #24
 80032a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80032a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ac:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 80032b0:	687d      	ldr	r5, [r7, #4]
 80032b2:	466c      	mov	r4, sp
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c4:	4628      	mov	r0, r5
 80032c6:	f001 fbe9 	bl	8004a9c <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <shootEnemy+0xd8>)
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1a1      	bne.n	8003224 <shootEnemy+0x10>
	}
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3738      	adds	r7, #56	; 0x38
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001d8 	.word	0x200001d8

080032f0 <detectCityHit>:
/**
  * @brief  Detects if an enemy has hit the bottom of the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void detectCityHit(gameState_t* gameState){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 80032fe:	e042      	b.n	8003386 <detectCityHit+0x96>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f859 	bl	80033c0 <fpToInt>
 800330e:	4603      	mov	r3, r0
 8003310:	2b4f      	cmp	r3, #79	; 0x4f
 8003312:	dd35      	ble.n	8003380 <detectCityHit+0x90>
			gameState->cityLives--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331a:	3b01      	subs	r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

			if(gameState->cityLives == 2){
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800332a:	2b02      	cmp	r3, #2
 800332c:	d10f      	bne.n	800334e <detectCityHit+0x5e>
				gotoxy(1, 42);
 800332e:	212a      	movs	r1, #42	; 0x2a
 8003330:	2001      	movs	r0, #1
 8003332:	f7fe fcbb 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e005      	b.n	8003348 <detectCityHit+0x58>
					printf(" ");
 800333c:	2020      	movs	r0, #32
 800333e:	f003 fa4d 	bl	80067dc <putchar>
				for(int i = 0; i<screenWidth;i++){
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	3301      	adds	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b9b      	cmp	r3, #155	; 0x9b
 800334c:	ddf6      	ble.n	800333c <detectCityHit+0x4c>
				}
			}
			if(gameState->cityLives == 1){
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10f      	bne.n	8003378 <detectCityHit+0x88>
				gotoxy(1, 43);
 8003358:	212b      	movs	r1, #43	; 0x2b
 800335a:	2001      	movs	r0, #1
 800335c:	f7fe fca6 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e005      	b.n	8003372 <detectCityHit+0x82>
					printf(" ");
 8003366:	2020      	movs	r0, #32
 8003368:	f003 fa38 	bl	80067dc <putchar>
				for(int i = 0; i<screenWidth;i++){
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b9b      	cmp	r3, #155	; 0x9b
 8003376:	ddf6      	ble.n	8003366 <detectCityHit+0x76>
				}
			}
			deleteEnemyNode(gameState, thisNode);
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 fbf4 	bl	8004b68 <deleteEnemyNode>
		}
		thisNode = thisNode->nextEnemyNode;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1b9      	bne.n	8003300 <detectCityHit+0x10>
	}
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <intToFp>:
/**
  * @brief  Converts uint_t to fixed point 16.16 format type uint32_t
  * @param  n: an unsigned 16 bit integer
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t intToFp(uint16_t n){
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
	output+=n;
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
	output<<=16;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	60fb      	str	r3, [r7, #12]
	return output;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <fpToInt>:
/**
  * @brief  Converts fixed point 16.16 format to normal integer and rounds correctly
  * @param  fp: a 16.16 32-bit fixed point number in 2' complement
  * @retval an integer
  */
int fpToInt(uint32_t fp){
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60bb      	str	r3, [r7, #8]
	int output=0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80033d6:	607b      	str	r3, [r7, #4]
	fp>>=16;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	607b      	str	r3, [r7, #4]
	output+=fp;
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da03      	bge.n	80033f4 <fpToInt+0x34>
		output-=65536;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80033f2:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80033f4:	68fb      	ldr	r3, [r7, #12]

}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <fpMultiply>:
/**
  * @brief  Multiplies 2 fixed-point values
  * @param  n: first number, m: second number
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	n>>=8;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	607b      	str	r3, [r7, #4]
	m>>=8;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <fpDivide>:
/**
  * @brief  Divides 2 fixed-point values
  * @param  n: first number, m: second number
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t fpDivide(uint32_t n, uint32_t m){
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
    uint64_t numerator = (long long)n << 16;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4608      	mov	r0, r1
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0c03      	lsrs	r3, r0, #16
 8003458:	0402      	lsls	r2, r0, #16
 800345a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800346c:	1884      	adds	r4, r0, r2
 800346e:	eb41 0503 	adc.w	r5, r1, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fd faed 	bl	8000a5c <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4613      	mov	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    return result;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bdb0      	pop	{r4, r5, r7, pc}

08003494 <scaleVector>:
/**
  * @brief  Scale a vector with a given factor
  * @param  vectorIn: The vector to be scaled, fpScalar: The amount to scale
  * @retval The scaled vector
  */
vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	1d38      	adds	r0, r7, #4
 800349e:	e880 0006 	stmia.w	r0, {r1, r2}
 80034a2:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ffaa 	bl	8003402 <fpMultiply>
 80034ae:	4603      	mov	r3, r0
 80034b0:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ffa3 	bl	8003402 <fpMultiply>
 80034bc:	4603      	mov	r3, r0
 80034be:	617b      	str	r3, [r7, #20]
	return vectorOut;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <fpAbs>:
/**
  * @brief Gives the absolute value of a fixed point value
  * @param  n: the 16.16 element to get the abs of
  * @retval A positive 16.16 number
  */
uint32_t fpAbs(uint32_t n){
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da02      	bge.n	80034f0 <fpAbs+0x18>
			output=(~output)+1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	425b      	negs	r3, r3
 80034ee:	60fb      	str	r3, [r7, #12]
		}
	return output;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <drawbackground>:
/**
  * @brief Draws the stary background of the screen
  * @param  None
  * @retval None
  */
void drawbackground(){
 80034fe:	b580      	push	{r7, lr}
 8003500:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8003502:	2123      	movs	r1, #35	; 0x23
 8003504:	2037      	movs	r0, #55	; 0x37
 8003506:	f7fe fbd1 	bl	8001cac <gotoxy>
	printf("*");
 800350a:	202a      	movs	r0, #42	; 0x2a
 800350c:	f003 f966 	bl	80067dc <putchar>
	gotoxy(63,27);
 8003510:	211b      	movs	r1, #27
 8003512:	203f      	movs	r0, #63	; 0x3f
 8003514:	f7fe fbca 	bl	8001cac <gotoxy>
	printf("*");
 8003518:	202a      	movs	r0, #42	; 0x2a
 800351a:	f003 f95f 	bl	80067dc <putchar>
	gotoxy(10,15);
 800351e:	210f      	movs	r1, #15
 8003520:	200a      	movs	r0, #10
 8003522:	f7fe fbc3 	bl	8001cac <gotoxy>
	printf("*");
 8003526:	202a      	movs	r0, #42	; 0x2a
 8003528:	f003 f958 	bl	80067dc <putchar>
	gotoxy(20,40);
 800352c:	2128      	movs	r1, #40	; 0x28
 800352e:	2014      	movs	r0, #20
 8003530:	f7fe fbbc 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003534:	202b      	movs	r0, #43	; 0x2b
 8003536:	f003 f951 	bl	80067dc <putchar>

	gotoxy(155,37);
 800353a:	2125      	movs	r1, #37	; 0x25
 800353c:	209b      	movs	r0, #155	; 0x9b
 800353e:	f7fe fbb5 	bl	8001cac <gotoxy>
	printf("*");
 8003542:	202a      	movs	r0, #42	; 0x2a
 8003544:	f003 f94a 	bl	80067dc <putchar>
	gotoxy(110,28);
 8003548:	211c      	movs	r1, #28
 800354a:	206e      	movs	r0, #110	; 0x6e
 800354c:	f7fe fbae 	bl	8001cac <gotoxy>
	printf("*");
 8003550:	202a      	movs	r0, #42	; 0x2a
 8003552:	f003 f943 	bl	80067dc <putchar>
	gotoxy(95,13);
 8003556:	210d      	movs	r1, #13
 8003558:	205f      	movs	r0, #95	; 0x5f
 800355a:	f7fe fba7 	bl	8001cac <gotoxy>
	printf("*");
 800355e:	202a      	movs	r0, #42	; 0x2a
 8003560:	f003 f93c 	bl	80067dc <putchar>
	gotoxy(130,19);
 8003564:	2113      	movs	r1, #19
 8003566:	2082      	movs	r0, #130	; 0x82
 8003568:	f7fe fba0 	bl	8001cac <gotoxy>
	printf("%c",43);
 800356c:	202b      	movs	r0, #43	; 0x2b
 800356e:	f003 f935 	bl	80067dc <putchar>

	gotoxy(5,27);
 8003572:	211b      	movs	r1, #27
 8003574:	2005      	movs	r0, #5
 8003576:	f7fe fb99 	bl	8001cac <gotoxy>
	printf("*");
 800357a:	202a      	movs	r0, #42	; 0x2a
 800357c:	f003 f92e 	bl	80067dc <putchar>
	gotoxy(6,5);
 8003580:	2105      	movs	r1, #5
 8003582:	2006      	movs	r0, #6
 8003584:	f7fe fb92 	bl	8001cac <gotoxy>
	printf("*");
 8003588:	202a      	movs	r0, #42	; 0x2a
 800358a:	f003 f927 	bl	80067dc <putchar>
	gotoxy(13,13);
 800358e:	210d      	movs	r1, #13
 8003590:	200d      	movs	r0, #13
 8003592:	f7fe fb8b 	bl	8001cac <gotoxy>
	printf("*");
 8003596:	202a      	movs	r0, #42	; 0x2a
 8003598:	f003 f920 	bl	80067dc <putchar>
	gotoxy(60,7);
 800359c:	2107      	movs	r1, #7
 800359e:	203c      	movs	r0, #60	; 0x3c
 80035a0:	f7fe fb84 	bl	8001cac <gotoxy>
	printf("%c",43);
 80035a4:	202b      	movs	r0, #43	; 0x2b
 80035a6:	f003 f919 	bl	80067dc <putchar>

	gotoxy(140,3);
 80035aa:	2103      	movs	r1, #3
 80035ac:	208c      	movs	r0, #140	; 0x8c
 80035ae:	f7fe fb7d 	bl	8001cac <gotoxy>
	printf("*");
 80035b2:	202a      	movs	r0, #42	; 0x2a
 80035b4:	f003 f912 	bl	80067dc <putchar>
	gotoxy(120,5);
 80035b8:	2105      	movs	r1, #5
 80035ba:	2078      	movs	r0, #120	; 0x78
 80035bc:	f7fe fb76 	bl	8001cac <gotoxy>
	printf("*");
 80035c0:	202a      	movs	r0, #42	; 0x2a
 80035c2:	f003 f90b 	bl	80067dc <putchar>
	gotoxy(110,7);
 80035c6:	2107      	movs	r1, #7
 80035c8:	206e      	movs	r0, #110	; 0x6e
 80035ca:	f7fe fb6f 	bl	8001cac <gotoxy>
	printf("*");
 80035ce:	202a      	movs	r0, #42	; 0x2a
 80035d0:	f003 f904 	bl	80067dc <putchar>
	gotoxy(70,30);
 80035d4:	211e      	movs	r1, #30
 80035d6:	2046      	movs	r0, #70	; 0x46
 80035d8:	f7fe fb68 	bl	8001cac <gotoxy>
	printf("%c",43);
 80035dc:	202b      	movs	r0, #43	; 0x2b
 80035de:	f003 f8fd 	bl	80067dc <putchar>

	gotoxy(135,33);
 80035e2:	2121      	movs	r1, #33	; 0x21
 80035e4:	2087      	movs	r0, #135	; 0x87
 80035e6:	f7fe fb61 	bl	8001cac <gotoxy>
	printf("*");
 80035ea:	202a      	movs	r0, #42	; 0x2a
 80035ec:	f003 f8f6 	bl	80067dc <putchar>
	gotoxy(123,36);
 80035f0:	2124      	movs	r1, #36	; 0x24
 80035f2:	207b      	movs	r0, #123	; 0x7b
 80035f4:	f7fe fb5a 	bl	8001cac <gotoxy>
	printf("*");
 80035f8:	202a      	movs	r0, #42	; 0x2a
 80035fa:	f003 f8ef 	bl	80067dc <putchar>
	gotoxy(138,40);
 80035fe:	2128      	movs	r1, #40	; 0x28
 8003600:	208a      	movs	r0, #138	; 0x8a
 8003602:	f7fe fb53 	bl	8001cac <gotoxy>
	printf("*");
 8003606:	202a      	movs	r0, #42	; 0x2a
 8003608:	f003 f8e8 	bl	80067dc <putchar>
	gotoxy(127,25);
 800360c:	2119      	movs	r1, #25
 800360e:	207f      	movs	r0, #127	; 0x7f
 8003610:	f7fe fb4c 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003614:	202b      	movs	r0, #43	; 0x2b
 8003616:	f003 f8e1 	bl	80067dc <putchar>

	gotoxy(105,32);
 800361a:	2120      	movs	r1, #32
 800361c:	2069      	movs	r0, #105	; 0x69
 800361e:	f7fe fb45 	bl	8001cac <gotoxy>
	printf("%c",42);
 8003622:	202a      	movs	r0, #42	; 0x2a
 8003624:	f003 f8da 	bl	80067dc <putchar>
	gotoxy(106,33);
 8003628:	2121      	movs	r1, #33	; 0x21
 800362a:	206a      	movs	r0, #106	; 0x6a
 800362c:	f7fe fb3e 	bl	8001cac <gotoxy>
	printf("%c",92);
 8003630:	205c      	movs	r0, #92	; 0x5c
 8003632:	f003 f8d3 	bl	80067dc <putchar>
	gotoxy(107,34);
 8003636:	2122      	movs	r1, #34	; 0x22
 8003638:	206b      	movs	r0, #107	; 0x6b
 800363a:	f7fe fb37 	bl	8001cac <gotoxy>
	printf("%c",92);
 800363e:	205c      	movs	r0, #92	; 0x5c
 8003640:	f003 f8cc 	bl	80067dc <putchar>

	gotoxy(23,15);
 8003644:	210f      	movs	r1, #15
 8003646:	2017      	movs	r0, #23
 8003648:	f7fe fb30 	bl	8001cac <gotoxy>
	printf("*");
 800364c:	202a      	movs	r0, #42	; 0x2a
 800364e:	f003 f8c5 	bl	80067dc <putchar>
	gotoxy(37,21);
 8003652:	2115      	movs	r1, #21
 8003654:	2025      	movs	r0, #37	; 0x25
 8003656:	f7fe fb29 	bl	8001cac <gotoxy>
	printf("*");
 800365a:	202a      	movs	r0, #42	; 0x2a
 800365c:	f003 f8be 	bl	80067dc <putchar>
	gotoxy(26,24);
 8003660:	2118      	movs	r1, #24
 8003662:	201a      	movs	r0, #26
 8003664:	f7fe fb22 	bl	8001cac <gotoxy>
	printf("*");
 8003668:	202a      	movs	r0, #42	; 0x2a
 800366a:	f003 f8b7 	bl	80067dc <putchar>
	gotoxy(30,29);
 800366e:	211d      	movs	r1, #29
 8003670:	201e      	movs	r0, #30
 8003672:	f7fe fb1b 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003676:	202b      	movs	r0, #43	; 0x2b
 8003678:	f003 f8b0 	bl	80067dc <putchar>

	gotoxy(25,6);
 800367c:	2106      	movs	r1, #6
 800367e:	2019      	movs	r0, #25
 8003680:	f7fe fb14 	bl	8001cac <gotoxy>
	printf("*");
 8003684:	202a      	movs	r0, #42	; 0x2a
 8003686:	f003 f8a9 	bl	80067dc <putchar>
	gotoxy(39,7);
 800368a:	2107      	movs	r1, #7
 800368c:	2027      	movs	r0, #39	; 0x27
 800368e:	f7fe fb0d 	bl	8001cac <gotoxy>
	printf("*");
 8003692:	202a      	movs	r0, #42	; 0x2a
 8003694:	f003 f8a2 	bl	80067dc <putchar>
	gotoxy(41,3);
 8003698:	2103      	movs	r1, #3
 800369a:	2029      	movs	r0, #41	; 0x29
 800369c:	f7fe fb06 	bl	8001cac <gotoxy>
	printf("*");
 80036a0:	202a      	movs	r0, #42	; 0x2a
 80036a2:	f003 f89b 	bl	80067dc <putchar>
	gotoxy(75,10);
 80036a6:	210a      	movs	r1, #10
 80036a8:	204b      	movs	r0, #75	; 0x4b
 80036aa:	f7fe faff 	bl	8001cac <gotoxy>
	printf("%c",43);
 80036ae:	202b      	movs	r0, #43	; 0x2b
 80036b0:	f003 f894 	bl	80067dc <putchar>

	gotoxy(100,20);
 80036b4:	2114      	movs	r1, #20
 80036b6:	2064      	movs	r0, #100	; 0x64
 80036b8:	f7fe faf8 	bl	8001cac <gotoxy>
	printf("%c",197);
 80036bc:	20c5      	movs	r0, #197	; 0xc5
 80036be:	f003 f88d 	bl	80067dc <putchar>
	gotoxy(135,12);
 80036c2:	210c      	movs	r1, #12
 80036c4:	2087      	movs	r0, #135	; 0x87
 80036c6:	f7fe faf1 	bl	8001cac <gotoxy>
	printf("%c",197);
 80036ca:	20c5      	movs	r0, #197	; 0xc5
 80036cc:	f003 f886 	bl	80067dc <putchar>
	gotoxy(30,5);
 80036d0:	2105      	movs	r1, #5
 80036d2:	201e      	movs	r0, #30
 80036d4:	f7fe faea 	bl	8001cac <gotoxy>
	printf("%c",197);
 80036d8:	20c5      	movs	r0, #197	; 0xc5
 80036da:	f003 f87f 	bl	80067dc <putchar>
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <drawMoon>:
/**
  * @brief Draws the moon
  * @param  x: x-coordinate, y: y-coordinate
  * @retval None
  */
void drawMoon(uint8_t X, uint8_t Y){
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	460a      	mov	r2, r1
 80036ec:	71fb      	strb	r3, [r7, #7]
 80036ee:	4613      	mov	r3, r2
 80036f0:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 80036f2:	79bb      	ldrb	r3, [r7, #6]
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	71bb      	strb	r3, [r7, #6]
	gotoxy(X-1,Y+3);
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	79bb      	ldrb	r3, [r7, #6]
 80036fe:	3303      	adds	r3, #3
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7fe fad2 	bl	8001cac <gotoxy>
	printf("_");
 8003708:	205f      	movs	r0, #95	; 0x5f
 800370a:	f003 f867 	bl	80067dc <putchar>
	gotoxy(X,Y+3);
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	79bb      	ldrb	r3, [r7, #6]
 8003712:	3303      	adds	r3, #3
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f7fe fac8 	bl	8001cac <gotoxy>
	printf("_");
 800371c:	205f      	movs	r0, #95	; 0x5f
 800371e:	f003 f85d 	bl	80067dc <putchar>
	gotoxy(X+1,Y+3);
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	79bb      	ldrb	r3, [r7, #6]
 8003728:	3303      	adds	r3, #3
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7fe fabd 	bl	8001cac <gotoxy>
	printf("_");
 8003732:	205f      	movs	r0, #95	; 0x5f
 8003734:	f003 f852 	bl	80067dc <putchar>
	gotoxy(X-2,Y+3);
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	1e9a      	subs	r2, r3, #2
 800373c:	79bb      	ldrb	r3, [r7, #6]
 800373e:	3303      	adds	r3, #3
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f7fe fab2 	bl	8001cac <gotoxy>
	printf("(");
 8003748:	2028      	movs	r0, #40	; 0x28
 800374a:	f003 f847 	bl	80067dc <putchar>
	gotoxy(X+2,Y+3);
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	1c9a      	adds	r2, r3, #2
 8003752:	79bb      	ldrb	r3, [r7, #6]
 8003754:	3303      	adds	r3, #3
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fe faa7 	bl	8001cac <gotoxy>
	printf(")");
 800375e:	2029      	movs	r0, #41	; 0x29
 8003760:	f003 f83c 	bl	80067dc <putchar>

	gotoxy(X+3,Y+2);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	1cda      	adds	r2, r3, #3
 8003768:	79bb      	ldrb	r3, [r7, #6]
 800376a:	3302      	adds	r3, #2
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe fa9c 	bl	8001cac <gotoxy>
	printf("_");
 8003774:	205f      	movs	r0, #95	; 0x5f
 8003776:	f003 f831 	bl	80067dc <putchar>
	gotoxy(X-3,Y+2);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	1eda      	subs	r2, r3, #3
 800377e:	79bb      	ldrb	r3, [r7, #6]
 8003780:	3302      	adds	r3, #2
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f7fe fa91 	bl	8001cac <gotoxy>
	printf("_");
 800378a:	205f      	movs	r0, #95	; 0x5f
 800378c:	f003 f826 	bl	80067dc <putchar>
	gotoxy(X+4,Y+2);
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	79bb      	ldrb	r3, [r7, #6]
 8003796:	3302      	adds	r3, #2
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f7fe fa86 	bl	8001cac <gotoxy>
	printf("(");
 80037a0:	2028      	movs	r0, #40	; 0x28
 80037a2:	f003 f81b 	bl	80067dc <putchar>
	gotoxy(X-4,Y+2);
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	1f1a      	subs	r2, r3, #4
 80037aa:	79bb      	ldrb	r3, [r7, #6]
 80037ac:	3302      	adds	r3, #2
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe fa7b 	bl	8001cac <gotoxy>
	printf(")");
 80037b6:	2029      	movs	r0, #41	; 0x29
 80037b8:	f003 f810 	bl	80067dc <putchar>

	gotoxy(X-5,Y+1);
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	1f5a      	subs	r2, r3, #5
 80037c0:	79bb      	ldrb	r3, [r7, #6]
 80037c2:	3301      	adds	r3, #1
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7fe fa70 	bl	8001cac <gotoxy>
	printf("(");
 80037cc:	2028      	movs	r0, #40	; 0x28
 80037ce:	f003 f805 	bl	80067dc <putchar>
	gotoxy(X+5,Y+1);
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	1d5a      	adds	r2, r3, #5
 80037d6:	79bb      	ldrb	r3, [r7, #6]
 80037d8:	3301      	adds	r3, #1
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe fa65 	bl	8001cac <gotoxy>
	printf("(");
 80037e2:	2028      	movs	r0, #40	; 0x28
 80037e4:	f002 fffa 	bl	80067dc <putchar>
	gotoxy(X-6,Y);
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	3b06      	subs	r3, #6
 80037ec:	79ba      	ldrb	r2, [r7, #6]
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fa5b 	bl	8001cac <gotoxy>
	printf("(");
 80037f6:	2028      	movs	r0, #40	; 0x28
 80037f8:	f002 fff0 	bl	80067dc <putchar>
	gotoxy(X+6,Y);
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	3306      	adds	r3, #6
 8003800:	79ba      	ldrb	r2, [r7, #6]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fa51 	bl	8001cac <gotoxy>
	printf(")");
 800380a:	2029      	movs	r0, #41	; 0x29
 800380c:	f002 ffe6 	bl	80067dc <putchar>

	gotoxy(X-5,Y-1);
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	1f5a      	subs	r2, r3, #5
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	3b01      	subs	r3, #1
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f7fe fa46 	bl	8001cac <gotoxy>
	printf("(");
 8003820:	2028      	movs	r0, #40	; 0x28
 8003822:	f002 ffdb 	bl	80067dc <putchar>
	gotoxy(X+5,Y-1);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	1d5a      	adds	r2, r3, #5
 800382a:	79bb      	ldrb	r3, [r7, #6]
 800382c:	3b01      	subs	r3, #1
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fe fa3b 	bl	8001cac <gotoxy>
	printf(")");
 8003836:	2029      	movs	r0, #41	; 0x29
 8003838:	f002 ffd0 	bl	80067dc <putchar>
	gotoxy(X-4,Y-2);
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	1f1a      	subs	r2, r3, #4
 8003840:	79bb      	ldrb	r3, [r7, #6]
 8003842:	3b02      	subs	r3, #2
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7fe fa30 	bl	8001cac <gotoxy>
	printf("(");
 800384c:	2028      	movs	r0, #40	; 0x28
 800384e:	f002 ffc5 	bl	80067dc <putchar>
	gotoxy(X+4,Y-2);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	1d1a      	adds	r2, r3, #4
 8003856:	79bb      	ldrb	r3, [r7, #6]
 8003858:	3b02      	subs	r3, #2
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe fa25 	bl	8001cac <gotoxy>
	printf(")");
 8003862:	2029      	movs	r0, #41	; 0x29
 8003864:	f002 ffba 	bl	80067dc <putchar>

	gotoxy(X-3,Y-3);
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	1eda      	subs	r2, r3, #3
 800386c:	79bb      	ldrb	r3, [r7, #6]
 800386e:	3b03      	subs	r3, #3
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7fe fa1a 	bl	8001cac <gotoxy>
	printf("_");
 8003878:	205f      	movs	r0, #95	; 0x5f
 800387a:	f002 ffaf 	bl	80067dc <putchar>
	gotoxy(X+3,Y-3);
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	1cda      	adds	r2, r3, #3
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	3b03      	subs	r3, #3
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe fa0f 	bl	8001cac <gotoxy>
	printf("_");
 800388e:	205f      	movs	r0, #95	; 0x5f
 8003890:	f002 ffa4 	bl	80067dc <putchar>
	gotoxy(X-2,Y-3);
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	1e9a      	subs	r2, r3, #2
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	3b03      	subs	r3, #3
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fe fa04 	bl	8001cac <gotoxy>
	printf("(");
 80038a4:	2028      	movs	r0, #40	; 0x28
 80038a6:	f002 ff99 	bl	80067dc <putchar>
	gotoxy(X+2,Y-3);
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7fe f9f9 	bl	8001cac <gotoxy>
	printf(")");
 80038ba:	2029      	movs	r0, #41	; 0x29
 80038bc:	f002 ff8e 	bl	80067dc <putchar>

	gotoxy(X-1,Y-4);
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	79bb      	ldrb	r3, [r7, #6]
 80038c6:	3b04      	subs	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe f9ee 	bl	8001cac <gotoxy>
	printf("_");
 80038d0:	205f      	movs	r0, #95	; 0x5f
 80038d2:	f002 ff83 	bl	80067dc <putchar>
	gotoxy(X,Y-4);
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	79bb      	ldrb	r3, [r7, #6]
 80038da:	3b04      	subs	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe f9e4 	bl	8001cac <gotoxy>
	printf("_");
 80038e4:	205f      	movs	r0, #95	; 0x5f
 80038e6:	f002 ff79 	bl	80067dc <putchar>
	gotoxy(X+1,Y-4);
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	79bb      	ldrb	r3, [r7, #6]
 80038f0:	3b04      	subs	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe f9d9 	bl	8001cac <gotoxy>
	printf("_");
 80038fa:	205f      	movs	r0, #95	; 0x5f
 80038fc:	f002 ff6e 	bl	80067dc <putchar>

	gotoxy(X-2,Y);
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	3b02      	subs	r3, #2
 8003904:	79ba      	ldrb	r2, [r7, #6]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f9cf 	bl	8001cac <gotoxy>
	printf("O");
 800390e:	204f      	movs	r0, #79	; 0x4f
 8003910:	f002 ff64 	bl	80067dc <putchar>
	gotoxy(X+1,Y+2);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	79bb      	ldrb	r3, [r7, #6]
 800391a:	3302      	adds	r3, #2
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f7fe f9c4 	bl	8001cac <gotoxy>
	printf("o");
 8003924:	206f      	movs	r0, #111	; 0x6f
 8003926:	f002 ff59 	bl	80067dc <putchar>
	gotoxy(X+3,Y-1);
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	1cda      	adds	r2, r3, #3
 800392e:	79bb      	ldrb	r3, [r7, #6]
 8003930:	3b01      	subs	r3, #1
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe f9b9 	bl	8001cac <gotoxy>
	printf("O");
 800393a:	204f      	movs	r0, #79	; 0x4f
 800393c:	f002 ff4e 	bl	80067dc <putchar>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <drawhearth>:
/**
  * @brief Draws the hearts indicating the number of lives
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawhearth(gameState_t* gameState){
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8003950:	2101      	movs	r1, #1
 8003952:	200f      	movs	r0, #15
 8003954:	f7fe f9aa 	bl	8001cac <gotoxy>
	printf("           ");
 8003958:	483b      	ldr	r0, [pc, #236]	; (8003a48 <drawhearth+0x100>)
 800395a:	f002 ff27 	bl	80067ac <iprintf>
	gotoxy(15,2);
 800395e:	2102      	movs	r1, #2
 8003960:	200f      	movs	r0, #15
 8003962:	f7fe f9a3 	bl	8001cac <gotoxy>
	printf("           ");
 8003966:	4838      	ldr	r0, [pc, #224]	; (8003a48 <drawhearth+0x100>)
 8003968:	f002 ff20 	bl	80067ac <iprintf>
	fgcolor(1);
 800396c:	2001      	movs	r0, #1
 800396e:	f7fe f971 	bl	8001c54 <fgcolor>

	if(gameState->cityLives >= 1){
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <drawhearth+0x6c>
		gotoxy(15,1);
 800397c:	2101      	movs	r1, #1
 800397e:	200f      	movs	r0, #15
 8003980:	f7fe f994 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003984:	20db      	movs	r0, #219	; 0xdb
 8003986:	f002 ff29 	bl	80067dc <putchar>
		gotoxy(17,1);
 800398a:	2101      	movs	r1, #1
 800398c:	2011      	movs	r0, #17
 800398e:	f7fe f98d 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003992:	20db      	movs	r0, #219	; 0xdb
 8003994:	f002 ff22 	bl	80067dc <putchar>
		gotoxy(16,2);
 8003998:	2102      	movs	r1, #2
 800399a:	2010      	movs	r0, #16
 800399c:	f7fe f986 	bl	8001cac <gotoxy>
		printf("%c",223);
 80039a0:	20df      	movs	r0, #223	; 0xdf
 80039a2:	f002 ff1b 	bl	80067dc <putchar>
		gotoxy(16,1);
 80039a6:	2101      	movs	r1, #1
 80039a8:	2010      	movs	r0, #16
 80039aa:	f7fe f97f 	bl	8001cac <gotoxy>
		printf("%c",220);
 80039ae:	20dc      	movs	r0, #220	; 0xdc
 80039b0:	f002 ff14 	bl	80067dc <putchar>
	}
	if(gameState->cityLives >= 2){
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d91b      	bls.n	80039f6 <drawhearth+0xae>
		gotoxy(19,1);
 80039be:	2101      	movs	r1, #1
 80039c0:	2013      	movs	r0, #19
 80039c2:	f7fe f973 	bl	8001cac <gotoxy>
		printf("%c",219);
 80039c6:	20db      	movs	r0, #219	; 0xdb
 80039c8:	f002 ff08 	bl	80067dc <putchar>
		gotoxy(21,1);
 80039cc:	2101      	movs	r1, #1
 80039ce:	2015      	movs	r0, #21
 80039d0:	f7fe f96c 	bl	8001cac <gotoxy>
		printf("%c",219);
 80039d4:	20db      	movs	r0, #219	; 0xdb
 80039d6:	f002 ff01 	bl	80067dc <putchar>
		gotoxy(20,2);
 80039da:	2102      	movs	r1, #2
 80039dc:	2014      	movs	r0, #20
 80039de:	f7fe f965 	bl	8001cac <gotoxy>
		printf("%c",223);
 80039e2:	20df      	movs	r0, #223	; 0xdf
 80039e4:	f002 fefa 	bl	80067dc <putchar>
		gotoxy(20,1);
 80039e8:	2101      	movs	r1, #1
 80039ea:	2014      	movs	r0, #20
 80039ec:	f7fe f95e 	bl	8001cac <gotoxy>
		printf("%c",220);
 80039f0:	20dc      	movs	r0, #220	; 0xdc
 80039f2:	f002 fef3 	bl	80067dc <putchar>

	}
	if(gameState->cityLives >= 3){
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d91b      	bls.n	8003a38 <drawhearth+0xf0>
		gotoxy(23,1);
 8003a00:	2101      	movs	r1, #1
 8003a02:	2017      	movs	r0, #23
 8003a04:	f7fe f952 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003a08:	20db      	movs	r0, #219	; 0xdb
 8003a0a:	f002 fee7 	bl	80067dc <putchar>
		gotoxy(25,1);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	2019      	movs	r0, #25
 8003a12:	f7fe f94b 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003a16:	20db      	movs	r0, #219	; 0xdb
 8003a18:	f002 fee0 	bl	80067dc <putchar>
		gotoxy(24,2);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	2018      	movs	r0, #24
 8003a20:	f7fe f944 	bl	8001cac <gotoxy>
		printf("%c",223);
 8003a24:	20df      	movs	r0, #223	; 0xdf
 8003a26:	f002 fed9 	bl	80067dc <putchar>
		gotoxy(24,1);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2018      	movs	r0, #24
 8003a2e:	f7fe f93d 	bl	8001cac <gotoxy>
		printf("%c",220);
 8003a32:	20dc      	movs	r0, #220	; 0xdc
 8003a34:	f002 fed2 	bl	80067dc <putchar>
	}
	fgcolor(15);
 8003a38:	200f      	movs	r0, #15
 8003a3a:	f7fe f90b 	bl	8001c54 <fgcolor>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08007a54 	.word	0x08007a54

08003a4c <drawEnemy>:
/**
  * @brief Loops over all the enemies and draws them to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawEnemy(gameState_t* gameState){
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8003a5a:	e087      	b.n	8003b6c <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fcab 	bl	80033c0 <fpToInt>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fca3 	bl	80033c0 <fpToInt>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	0fda      	lsrs	r2, r3, #31
 8003a7e:	4413      	add	r3, r2
 8003a80:	105b      	asrs	r3, r3, #1
 8003a82:	4619      	mov	r1, r3
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7fe f911 	bl	8001cac <gotoxy>
		printf("       ");
 8003a8a:	483d      	ldr	r0, [pc, #244]	; (8003b80 <drawEnemy+0x134>)
 8003a8c:	f002 fe8e 	bl	80067ac <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fc91 	bl	80033c0 <fpToInt>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fc89 	bl	80033c0 <fpToInt>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	0fda      	lsrs	r2, r3, #31
 8003ab4:	4413      	add	r3, r2
 8003ab6:	105b      	asrs	r3, r3, #1
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7fe f8f6 	bl	8001cac <gotoxy>
		printf("       ");
 8003ac0:	482f      	ldr	r0, [pc, #188]	; (8003b80 <drawEnemy+0x134>)
 8003ac2:	f002 fe73 	bl	80067ac <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fc76 	bl	80033c0 <fpToInt>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fc6e 	bl	80033c0 <fpToInt>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	0fda      	lsrs	r2, r3, #31
 8003ae8:	4413      	add	r3, r2
 8003aea:	105b      	asrs	r3, r3, #1
 8003aec:	4619      	mov	r1, r3
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7fe f8dc 	bl	8001cac <gotoxy>
		printf("  o o  ");
 8003af4:	4823      	ldr	r0, [pc, #140]	; (8003b84 <drawEnemy+0x138>)
 8003af6:	f002 fe59 	bl	80067ac <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fc5c 	bl	80033c0 <fpToInt>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fc54 	bl	80033c0 <fpToInt>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	0fda      	lsrs	r2, r3, #31
 8003b1e:	4413      	add	r3, r2
 8003b20:	105b      	asrs	r3, r3, #1
 8003b22:	4619      	mov	r1, r3
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7fe f8c1 	bl	8001cac <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8003b2a:	23bb      	movs	r3, #187	; 0xbb
 8003b2c:	9303      	str	r3, [sp, #12]
 8003b2e:	23cd      	movs	r3, #205	; 0xcd
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	23cd      	movs	r3, #205	; 0xcd
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	23cd      	movs	r3, #205	; 0xcd
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	23cd      	movs	r3, #205	; 0xcd
 8003b3c:	22cd      	movs	r2, #205	; 0xcd
 8003b3e:	21c9      	movs	r1, #201	; 0xc9
 8003b40:	4811      	ldr	r0, [pc, #68]	; (8003b88 <drawEnemy+0x13c>)
 8003b42:	f002 fe33 	bl	80067ac <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6852      	ldr	r2, [r2, #4]
 8003b64:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f47f af74 	bne.w	8003a5c <drawEnemy+0x10>
	}
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08007a60 	.word	0x08007a60
 8003b84:	08007a68 	.word	0x08007a68
 8003b88:	08007a70 	.word	0x08007a70

08003b8c <drawCity>:
/**
  * @brief Draw the city at the bottom of the screen
  * @param  None
  * @retval None
  */
void drawCity(){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	200e      	movs	r0, #14
 8003b94:	f7fe f88a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003b98:	20db      	movs	r0, #219	; 0xdb
 8003b9a:	f002 fe1f 	bl	80067dc <putchar>

	gotoxy(16,44);
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	2010      	movs	r0, #16
 8003ba2:	f7fe f883 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ba6:	20db      	movs	r0, #219	; 0xdb
 8003ba8:	f002 fe18 	bl	80067dc <putchar>

	gotoxy(17,44);
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	2011      	movs	r0, #17
 8003bb0:	f7fe f87c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bb4:	20db      	movs	r0, #219	; 0xdb
 8003bb6:	f002 fe11 	bl	80067dc <putchar>
	gotoxy(17,43);
 8003bba:	212b      	movs	r1, #43	; 0x2b
 8003bbc:	2011      	movs	r0, #17
 8003bbe:	f7fe f875 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bc2:	20db      	movs	r0, #219	; 0xdb
 8003bc4:	f002 fe0a 	bl	80067dc <putchar>

	gotoxy(19,44);
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	2013      	movs	r0, #19
 8003bcc:	f7fe f86e 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003bd0:	20dc      	movs	r0, #220	; 0xdc
 8003bd2:	f002 fe03 	bl	80067dc <putchar>

	gotoxy(21,44);
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	2015      	movs	r0, #21
 8003bda:	f7fe f867 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bde:	20db      	movs	r0, #219	; 0xdb
 8003be0:	f002 fdfc 	bl	80067dc <putchar>

	gotoxy(23,44);
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	2017      	movs	r0, #23
 8003be8:	f7fe f860 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bec:	20db      	movs	r0, #219	; 0xdb
 8003bee:	f002 fdf5 	bl	80067dc <putchar>
	gotoxy(23,43);
 8003bf2:	212b      	movs	r1, #43	; 0x2b
 8003bf4:	2017      	movs	r0, #23
 8003bf6:	f7fe f859 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003bfa:	20dc      	movs	r0, #220	; 0xdc
 8003bfc:	f002 fdee 	bl	80067dc <putchar>

	gotoxy(25,44);
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	2019      	movs	r0, #25
 8003c04:	f7fe f852 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c08:	20db      	movs	r0, #219	; 0xdb
 8003c0a:	f002 fde7 	bl	80067dc <putchar>
	gotoxy(25,43);
 8003c0e:	212b      	movs	r1, #43	; 0x2b
 8003c10:	2019      	movs	r0, #25
 8003c12:	f7fe f84b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c16:	20db      	movs	r0, #219	; 0xdb
 8003c18:	f002 fde0 	bl	80067dc <putchar>
	gotoxy(25,42);
 8003c1c:	212a      	movs	r1, #42	; 0x2a
 8003c1e:	2019      	movs	r0, #25
 8003c20:	f7fe f844 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c24:	20db      	movs	r0, #219	; 0xdb
 8003c26:	f002 fdd9 	bl	80067dc <putchar>

	gotoxy(27,44);
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	201b      	movs	r0, #27
 8003c2e:	f7fe f83d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c32:	20db      	movs	r0, #219	; 0xdb
 8003c34:	f002 fdd2 	bl	80067dc <putchar>
	gotoxy(27,43);
 8003c38:	212b      	movs	r1, #43	; 0x2b
 8003c3a:	201b      	movs	r0, #27
 8003c3c:	f7fe f836 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003c40:	20dc      	movs	r0, #220	; 0xdc
 8003c42:	f002 fdcb 	bl	80067dc <putchar>

	gotoxy(28,44);
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	201c      	movs	r0, #28
 8003c4a:	f7fe f82f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c4e:	20db      	movs	r0, #219	; 0xdb
 8003c50:	f002 fdc4 	bl	80067dc <putchar>

	gotoxy(36,44);
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	2024      	movs	r0, #36	; 0x24
 8003c58:	f7fe f828 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c5c:	20db      	movs	r0, #219	; 0xdb
 8003c5e:	f002 fdbd 	bl	80067dc <putchar>
	gotoxy(36,43);
 8003c62:	212b      	movs	r1, #43	; 0x2b
 8003c64:	2024      	movs	r0, #36	; 0x24
 8003c66:	f7fe f821 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c6a:	20db      	movs	r0, #219	; 0xdb
 8003c6c:	f002 fdb6 	bl	80067dc <putchar>

	gotoxy(37,44);
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	2025      	movs	r0, #37	; 0x25
 8003c74:	f7fe f81a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c78:	20db      	movs	r0, #219	; 0xdb
 8003c7a:	f002 fdaf 	bl	80067dc <putchar>

	gotoxy(38,44);
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	2026      	movs	r0, #38	; 0x26
 8003c82:	f7fe f813 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003c86:	20dc      	movs	r0, #220	; 0xdc
 8003c88:	f002 fda8 	bl	80067dc <putchar>

	gotoxy(40,44);
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	2028      	movs	r0, #40	; 0x28
 8003c90:	f7fe f80c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c94:	20db      	movs	r0, #219	; 0xdb
 8003c96:	f002 fda1 	bl	80067dc <putchar>
	gotoxy(40,43);
 8003c9a:	212b      	movs	r1, #43	; 0x2b
 8003c9c:	2028      	movs	r0, #40	; 0x28
 8003c9e:	f7fe f805 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ca2:	20db      	movs	r0, #219	; 0xdb
 8003ca4:	f002 fd9a 	bl	80067dc <putchar>

	gotoxy(41,43);
 8003ca8:	212b      	movs	r1, #43	; 0x2b
 8003caa:	2029      	movs	r0, #41	; 0x29
 8003cac:	f7fd fffe 	bl	8001cac <gotoxy>
	printf("%c",205);
 8003cb0:	20cd      	movs	r0, #205	; 0xcd
 8003cb2:	f002 fd93 	bl	80067dc <putchar>

	gotoxy(42,44);
 8003cb6:	212c      	movs	r1, #44	; 0x2c
 8003cb8:	202a      	movs	r0, #42	; 0x2a
 8003cba:	f7fd fff7 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003cbe:	20db      	movs	r0, #219	; 0xdb
 8003cc0:	f002 fd8c 	bl	80067dc <putchar>
	gotoxy(42,43);
 8003cc4:	212b      	movs	r1, #43	; 0x2b
 8003cc6:	202a      	movs	r0, #42	; 0x2a
 8003cc8:	f7fd fff0 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ccc:	20db      	movs	r0, #219	; 0xdb
 8003cce:	f002 fd85 	bl	80067dc <putchar>

	gotoxy(45,44);
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	202d      	movs	r0, #45	; 0x2d
 8003cd6:	f7fd ffe9 	bl	8001cac <gotoxy>
	printf("%c",186);
 8003cda:	20ba      	movs	r0, #186	; 0xba
 8003cdc:	f002 fd7e 	bl	80067dc <putchar>

	gotoxy(47,44);
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	202f      	movs	r0, #47	; 0x2f
 8003ce4:	f7fd ffe2 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003ce8:	20dc      	movs	r0, #220	; 0xdc
 8003cea:	f002 fd77 	bl	80067dc <putchar>

	gotoxy(55,44);
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	2037      	movs	r0, #55	; 0x37
 8003cf2:	f7fd ffdb 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003cf6:	20db      	movs	r0, #219	; 0xdb
 8003cf8:	f002 fd70 	bl	80067dc <putchar>
	gotoxy(55,43);
 8003cfc:	212b      	movs	r1, #43	; 0x2b
 8003cfe:	2037      	movs	r0, #55	; 0x37
 8003d00:	f7fd ffd4 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d04:	20dc      	movs	r0, #220	; 0xdc
 8003d06:	f002 fd69 	bl	80067dc <putchar>

	gotoxy(58,44);
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	203a      	movs	r0, #58	; 0x3a
 8003d0e:	f7fd ffcd 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d12:	20db      	movs	r0, #219	; 0xdb
 8003d14:	f002 fd62 	bl	80067dc <putchar>
	gotoxy(58,43);
 8003d18:	212b      	movs	r1, #43	; 0x2b
 8003d1a:	203a      	movs	r0, #58	; 0x3a
 8003d1c:	f7fd ffc6 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d20:	20db      	movs	r0, #219	; 0xdb
 8003d22:	f002 fd5b 	bl	80067dc <putchar>
	gotoxy(58,42);
 8003d26:	212a      	movs	r1, #42	; 0x2a
 8003d28:	203a      	movs	r0, #58	; 0x3a
 8003d2a:	f7fd ffbf 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d2e:	20dc      	movs	r0, #220	; 0xdc
 8003d30:	f002 fd54 	bl	80067dc <putchar>

	gotoxy(59,44);
 8003d34:	212c      	movs	r1, #44	; 0x2c
 8003d36:	203b      	movs	r0, #59	; 0x3b
 8003d38:	f7fd ffb8 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d3c:	20db      	movs	r0, #219	; 0xdb
 8003d3e:	f002 fd4d 	bl	80067dc <putchar>
	gotoxy(59,43);
 8003d42:	212b      	movs	r1, #43	; 0x2b
 8003d44:	203b      	movs	r0, #59	; 0x3b
 8003d46:	f7fd ffb1 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d4a:	20dc      	movs	r0, #220	; 0xdc
 8003d4c:	f002 fd46 	bl	80067dc <putchar>

	gotoxy(60,44);
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	203c      	movs	r0, #60	; 0x3c
 8003d54:	f7fd ffaa 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d58:	20db      	movs	r0, #219	; 0xdb
 8003d5a:	f002 fd3f 	bl	80067dc <putchar>

	gotoxy(61,44);
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	203d      	movs	r0, #61	; 0x3d
 8003d62:	f7fd ffa3 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d66:	20db      	movs	r0, #219	; 0xdb
 8003d68:	f002 fd38 	bl	80067dc <putchar>
	gotoxy(61,43);
 8003d6c:	212b      	movs	r1, #43	; 0x2b
 8003d6e:	203d      	movs	r0, #61	; 0x3d
 8003d70:	f7fd ff9c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d74:	20db      	movs	r0, #219	; 0xdb
 8003d76:	f002 fd31 	bl	80067dc <putchar>

	gotoxy(63,44);
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	203f      	movs	r0, #63	; 0x3f
 8003d7e:	f7fd ff95 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d82:	20db      	movs	r0, #219	; 0xdb
 8003d84:	f002 fd2a 	bl	80067dc <putchar>

	gotoxy(64,44);
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	2040      	movs	r0, #64	; 0x40
 8003d8c:	f7fd ff8e 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d90:	20dc      	movs	r0, #220	; 0xdc
 8003d92:	f002 fd23 	bl	80067dc <putchar>

	gotoxy(65,44);
 8003d96:	212c      	movs	r1, #44	; 0x2c
 8003d98:	2041      	movs	r0, #65	; 0x41
 8003d9a:	f7fd ff87 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d9e:	20db      	movs	r0, #219	; 0xdb
 8003da0:	f002 fd1c 	bl	80067dc <putchar>

	gotoxy(67,44);
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	2043      	movs	r0, #67	; 0x43
 8003da8:	f7fd ff80 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dac:	20db      	movs	r0, #219	; 0xdb
 8003dae:	f002 fd15 	bl	80067dc <putchar>
	gotoxy(67,43);
 8003db2:	212b      	movs	r1, #43	; 0x2b
 8003db4:	2043      	movs	r0, #67	; 0x43
 8003db6:	f7fd ff79 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dba:	20db      	movs	r0, #219	; 0xdb
 8003dbc:	f002 fd0e 	bl	80067dc <putchar>
	gotoxy(67,42);
 8003dc0:	212a      	movs	r1, #42	; 0x2a
 8003dc2:	2043      	movs	r0, #67	; 0x43
 8003dc4:	f7fd ff72 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dc8:	20db      	movs	r0, #219	; 0xdb
 8003dca:	f002 fd07 	bl	80067dc <putchar>

	gotoxy(69,44);
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	2045      	movs	r0, #69	; 0x45
 8003dd2:	f7fd ff6b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dd6:	20db      	movs	r0, #219	; 0xdb
 8003dd8:	f002 fd00 	bl	80067dc <putchar>
	gotoxy(69,43);
 8003ddc:	212b      	movs	r1, #43	; 0x2b
 8003dde:	2045      	movs	r0, #69	; 0x45
 8003de0:	f7fd ff64 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003de4:	20db      	movs	r0, #219	; 0xdb
 8003de6:	f002 fcf9 	bl	80067dc <putchar>
	gotoxy(69,42);
 8003dea:	212a      	movs	r1, #42	; 0x2a
 8003dec:	2045      	movs	r0, #69	; 0x45
 8003dee:	f7fd ff5d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003df2:	20db      	movs	r0, #219	; 0xdb
 8003df4:	f002 fcf2 	bl	80067dc <putchar>

	gotoxy(71,44);
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	2047      	movs	r0, #71	; 0x47
 8003dfc:	f7fd ff56 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e00:	20db      	movs	r0, #219	; 0xdb
 8003e02:	f002 fceb 	bl	80067dc <putchar>
	gotoxy(71,43);
 8003e06:	212b      	movs	r1, #43	; 0x2b
 8003e08:	2047      	movs	r0, #71	; 0x47
 8003e0a:	f7fd ff4f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e0e:	20db      	movs	r0, #219	; 0xdb
 8003e10:	f002 fce4 	bl	80067dc <putchar>
	gotoxy(71,42);
 8003e14:	212a      	movs	r1, #42	; 0x2a
 8003e16:	2047      	movs	r0, #71	; 0x47
 8003e18:	f7fd ff48 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e1c:	20db      	movs	r0, #219	; 0xdb
 8003e1e:	f002 fcdd 	bl	80067dc <putchar>

	gotoxy(73,44);
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	2049      	movs	r0, #73	; 0x49
 8003e26:	f7fd ff41 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e2a:	20db      	movs	r0, #219	; 0xdb
 8003e2c:	f002 fcd6 	bl	80067dc <putchar>
	gotoxy(73,43);
 8003e30:	212b      	movs	r1, #43	; 0x2b
 8003e32:	2049      	movs	r0, #73	; 0x49
 8003e34:	f7fd ff3a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e38:	20db      	movs	r0, #219	; 0xdb
 8003e3a:	f002 fccf 	bl	80067dc <putchar>

	gotoxy(74,44);
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	204a      	movs	r0, #74	; 0x4a
 8003e42:	f7fd ff33 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e46:	20db      	movs	r0, #219	; 0xdb
 8003e48:	f002 fcc8 	bl	80067dc <putchar>

	gotoxy(76,44);
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	204c      	movs	r0, #76	; 0x4c
 8003e50:	f7fd ff2c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e54:	20db      	movs	r0, #219	; 0xdb
 8003e56:	f002 fcc1 	bl	80067dc <putchar>

	gotoxy(77,44);
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	204d      	movs	r0, #77	; 0x4d
 8003e5e:	f7fd ff25 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e62:	20db      	movs	r0, #219	; 0xdb
 8003e64:	f002 fcba 	bl	80067dc <putchar>
	gotoxy(77,43);
 8003e68:	212b      	movs	r1, #43	; 0x2b
 8003e6a:	204d      	movs	r0, #77	; 0x4d
 8003e6c:	f7fd ff1e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e70:	20db      	movs	r0, #219	; 0xdb
 8003e72:	f002 fcb3 	bl	80067dc <putchar>

	gotoxy(79,44);
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	204f      	movs	r0, #79	; 0x4f
 8003e7a:	f7fd ff17 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e7e:	20db      	movs	r0, #219	; 0xdb
 8003e80:	f002 fcac 	bl	80067dc <putchar>
	gotoxy(79,44);
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	204f      	movs	r0, #79	; 0x4f
 8003e88:	f7fd ff10 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003e8c:	20dc      	movs	r0, #220	; 0xdc
 8003e8e:	f002 fca5 	bl	80067dc <putchar>

	gotoxy(81,44);
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	2051      	movs	r0, #81	; 0x51
 8003e96:	f7fd ff09 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e9a:	20db      	movs	r0, #219	; 0xdb
 8003e9c:	f002 fc9e 	bl	80067dc <putchar>
	gotoxy(81,43);
 8003ea0:	212b      	movs	r1, #43	; 0x2b
 8003ea2:	2051      	movs	r0, #81	; 0x51
 8003ea4:	f7fd ff02 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ea8:	20db      	movs	r0, #219	; 0xdb
 8003eaa:	f002 fc97 	bl	80067dc <putchar>

	gotoxy(82,44);
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	2052      	movs	r0, #82	; 0x52
 8003eb2:	f7fd fefb 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003eb6:	20db      	movs	r0, #219	; 0xdb
 8003eb8:	f002 fc90 	bl	80067dc <putchar>

	gotoxy(85,44);
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	2055      	movs	r0, #85	; 0x55
 8003ec0:	f7fd fef4 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ec4:	20db      	movs	r0, #219	; 0xdb
 8003ec6:	f002 fc89 	bl	80067dc <putchar>
	gotoxy(85,43);
 8003eca:	212b      	movs	r1, #43	; 0x2b
 8003ecc:	2055      	movs	r0, #85	; 0x55
 8003ece:	f7fd feed 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ed2:	20db      	movs	r0, #219	; 0xdb
 8003ed4:	f002 fc82 	bl	80067dc <putchar>
	gotoxy(85,42);
 8003ed8:	212a      	movs	r1, #42	; 0x2a
 8003eda:	2055      	movs	r0, #85	; 0x55
 8003edc:	f7fd fee6 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003ee0:	20dc      	movs	r0, #220	; 0xdc
 8003ee2:	f002 fc7b 	bl	80067dc <putchar>

	gotoxy(86,44);
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	2056      	movs	r0, #86	; 0x56
 8003eea:	f7fd fedf 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003eee:	20db      	movs	r0, #219	; 0xdb
 8003ef0:	f002 fc74 	bl	80067dc <putchar>

	gotoxy(87,44);
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	2057      	movs	r0, #87	; 0x57
 8003ef8:	f7fd fed8 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003efc:	20dc      	movs	r0, #220	; 0xdc
 8003efe:	f002 fc6d 	bl	80067dc <putchar>

	gotoxy(88,44);
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	2058      	movs	r0, #88	; 0x58
 8003f06:	f7fd fed1 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f0a:	20db      	movs	r0, #219	; 0xdb
 8003f0c:	f002 fc66 	bl	80067dc <putchar>
	gotoxy(88,43);
 8003f10:	212b      	movs	r1, #43	; 0x2b
 8003f12:	2058      	movs	r0, #88	; 0x58
 8003f14:	f7fd feca 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f18:	20dc      	movs	r0, #220	; 0xdc
 8003f1a:	f002 fc5f 	bl	80067dc <putchar>

	gotoxy(93,44);
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	205d      	movs	r0, #93	; 0x5d
 8003f22:	f7fd fec3 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f26:	20db      	movs	r0, #219	; 0xdb
 8003f28:	f002 fc58 	bl	80067dc <putchar>

	gotoxy(94,44);
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	205e      	movs	r0, #94	; 0x5e
 8003f30:	f7fd febc 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f34:	20db      	movs	r0, #219	; 0xdb
 8003f36:	f002 fc51 	bl	80067dc <putchar>
	gotoxy(94,43);
 8003f3a:	212b      	movs	r1, #43	; 0x2b
 8003f3c:	205e      	movs	r0, #94	; 0x5e
 8003f3e:	f7fd feb5 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f42:	20dc      	movs	r0, #220	; 0xdc
 8003f44:	f002 fc4a 	bl	80067dc <putchar>

	gotoxy(95,44);
 8003f48:	212c      	movs	r1, #44	; 0x2c
 8003f4a:	205f      	movs	r0, #95	; 0x5f
 8003f4c:	f7fd feae 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f50:	20dc      	movs	r0, #220	; 0xdc
 8003f52:	f002 fc43 	bl	80067dc <putchar>

	gotoxy(96,44);
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	2060      	movs	r0, #96	; 0x60
 8003f5a:	f7fd fea7 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f5e:	20db      	movs	r0, #219	; 0xdb
 8003f60:	f002 fc3c 	bl	80067dc <putchar>

	gotoxy(98,44);
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	2062      	movs	r0, #98	; 0x62
 8003f68:	f7fd fea0 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f6c:	20db      	movs	r0, #219	; 0xdb
 8003f6e:	f002 fc35 	bl	80067dc <putchar>
	gotoxy(98,43);
 8003f72:	212b      	movs	r1, #43	; 0x2b
 8003f74:	2062      	movs	r0, #98	; 0x62
 8003f76:	f7fd fe99 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f7a:	20dc      	movs	r0, #220	; 0xdc
 8003f7c:	f002 fc2e 	bl	80067dc <putchar>

	gotoxy(99,44);
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	2063      	movs	r0, #99	; 0x63
 8003f84:	f7fd fe92 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f88:	20db      	movs	r0, #219	; 0xdb
 8003f8a:	f002 fc27 	bl	80067dc <putchar>

	gotoxy(103,44);
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	2067      	movs	r0, #103	; 0x67
 8003f92:	f7fd fe8b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f96:	20db      	movs	r0, #219	; 0xdb
 8003f98:	f002 fc20 	bl	80067dc <putchar>

	gotoxy(104,44);
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	2068      	movs	r0, #104	; 0x68
 8003fa0:	f7fd fe84 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003fa4:	20dc      	movs	r0, #220	; 0xdc
 8003fa6:	f002 fc19 	bl	80067dc <putchar>

	gotoxy(107,44);
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	206b      	movs	r0, #107	; 0x6b
 8003fae:	f7fd fe7d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fb2:	20db      	movs	r0, #219	; 0xdb
 8003fb4:	f002 fc12 	bl	80067dc <putchar>

	gotoxy(108,44);
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	206c      	movs	r0, #108	; 0x6c
 8003fbc:	f7fd fe76 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fc0:	20db      	movs	r0, #219	; 0xdb
 8003fc2:	f002 fc0b 	bl	80067dc <putchar>
	gotoxy(108,43);
 8003fc6:	212b      	movs	r1, #43	; 0x2b
 8003fc8:	206c      	movs	r0, #108	; 0x6c
 8003fca:	f7fd fe6f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fce:	20db      	movs	r0, #219	; 0xdb
 8003fd0:	f002 fc04 	bl	80067dc <putchar>

	gotoxy(109,44);
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	206d      	movs	r0, #109	; 0x6d
 8003fd8:	f7fd fe68 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003fdc:	20dc      	movs	r0, #220	; 0xdc
 8003fde:	f002 fbfd 	bl	80067dc <putchar>

	gotoxy(112,44);
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	2070      	movs	r0, #112	; 0x70
 8003fe6:	f7fd fe61 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fea:	20db      	movs	r0, #219	; 0xdb
 8003fec:	f002 fbf6 	bl	80067dc <putchar>

	gotoxy(113,44);
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	2071      	movs	r0, #113	; 0x71
 8003ff4:	f7fd fe5a 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003ff8:	20dc      	movs	r0, #220	; 0xdc
 8003ffa:	f002 fbef 	bl	80067dc <putchar>

	gotoxy(114,44);
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	2072      	movs	r0, #114	; 0x72
 8004002:	f7fd fe53 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004006:	20db      	movs	r0, #219	; 0xdb
 8004008:	f002 fbe8 	bl	80067dc <putchar>
	gotoxy(114,43);
 800400c:	212b      	movs	r1, #43	; 0x2b
 800400e:	2072      	movs	r0, #114	; 0x72
 8004010:	f7fd fe4c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004014:	20db      	movs	r0, #219	; 0xdb
 8004016:	f002 fbe1 	bl	80067dc <putchar>

	gotoxy(115,44);
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	2073      	movs	r0, #115	; 0x73
 800401e:	f7fd fe45 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004022:	20db      	movs	r0, #219	; 0xdb
 8004024:	f002 fbda 	bl	80067dc <putchar>

	gotoxy(120,44);
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	2078      	movs	r0, #120	; 0x78
 800402c:	f7fd fe3e 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004030:	202f      	movs	r0, #47	; 0x2f
 8004032:	f002 fbd3 	bl	80067dc <putchar>
	gotoxy(121,43);
 8004036:	212b      	movs	r1, #43	; 0x2b
 8004038:	2079      	movs	r0, #121	; 0x79
 800403a:	f7fd fe37 	bl	8001cac <gotoxy>
	printf("%c",47);
 800403e:	202f      	movs	r0, #47	; 0x2f
 8004040:	f002 fbcc 	bl	80067dc <putchar>
	gotoxy(122,43);
 8004044:	212b      	movs	r1, #43	; 0x2b
 8004046:	207a      	movs	r0, #122	; 0x7a
 8004048:	f7fd fe30 	bl	8001cac <gotoxy>
	printf("%c",223);
 800404c:	20df      	movs	r0, #223	; 0xdf
 800404e:	f002 fbc5 	bl	80067dc <putchar>
	gotoxy(122,42);
 8004052:	212a      	movs	r1, #42	; 0x2a
 8004054:	207a      	movs	r0, #122	; 0x7a
 8004056:	f7fd fe29 	bl	8001cac <gotoxy>
	printf("%c",168);
 800405a:	20a8      	movs	r0, #168	; 0xa8
 800405c:	f002 fbbe 	bl	80067dc <putchar>
	gotoxy(123,43);
 8004060:	212b      	movs	r1, #43	; 0x2b
 8004062:	207b      	movs	r0, #123	; 0x7b
 8004064:	f7fd fe22 	bl	8001cac <gotoxy>
	printf("%c",92);
 8004068:	205c      	movs	r0, #92	; 0x5c
 800406a:	f002 fbb7 	bl	80067dc <putchar>
	gotoxy(124,44);
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	207c      	movs	r0, #124	; 0x7c
 8004072:	f7fd fe1b 	bl	8001cac <gotoxy>
	printf("%c",92);
 8004076:	205c      	movs	r0, #92	; 0x5c
 8004078:	f002 fbb0 	bl	80067dc <putchar>

	gotoxy(127,44);
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	207f      	movs	r0, #127	; 0x7f
 8004080:	f7fd fe14 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004084:	20db      	movs	r0, #219	; 0xdb
 8004086:	f002 fba9 	bl	80067dc <putchar>
	gotoxy(127,43);
 800408a:	212b      	movs	r1, #43	; 0x2b
 800408c:	207f      	movs	r0, #127	; 0x7f
 800408e:	f7fd fe0d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004092:	20db      	movs	r0, #219	; 0xdb
 8004094:	f002 fba2 	bl	80067dc <putchar>
	gotoxy(127,42);
 8004098:	212a      	movs	r1, #42	; 0x2a
 800409a:	207f      	movs	r0, #127	; 0x7f
 800409c:	f7fd fe06 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040a0:	20db      	movs	r0, #219	; 0xdb
 80040a2:	f002 fb9b 	bl	80067dc <putchar>

	gotoxy(129,44);
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	2081      	movs	r0, #129	; 0x81
 80040aa:	f7fd fdff 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040ae:	20db      	movs	r0, #219	; 0xdb
 80040b0:	f002 fb94 	bl	80067dc <putchar>
	gotoxy(129,43);
 80040b4:	212b      	movs	r1, #43	; 0x2b
 80040b6:	2081      	movs	r0, #129	; 0x81
 80040b8:	f7fd fdf8 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040bc:	20dc      	movs	r0, #220	; 0xdc
 80040be:	f002 fb8d 	bl	80067dc <putchar>

	gotoxy(130,44);
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	2082      	movs	r0, #130	; 0x82
 80040c6:	f7fd fdf1 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040ca:	20db      	movs	r0, #219	; 0xdb
 80040cc:	f002 fb86 	bl	80067dc <putchar>

	gotoxy(131,44);
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	2083      	movs	r0, #131	; 0x83
 80040d4:	f7fd fdea 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040d8:	20dc      	movs	r0, #220	; 0xdc
 80040da:	f002 fb7f 	bl	80067dc <putchar>

	gotoxy(132,44);
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	2084      	movs	r0, #132	; 0x84
 80040e2:	f7fd fde3 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040e6:	20db      	movs	r0, #219	; 0xdb
 80040e8:	f002 fb78 	bl	80067dc <putchar>

	gotoxy(133,44);
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	2085      	movs	r0, #133	; 0x85
 80040f0:	f7fd fddc 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040f4:	20db      	movs	r0, #219	; 0xdb
 80040f6:	f002 fb71 	bl	80067dc <putchar>
	gotoxy(133,43);
 80040fa:	212b      	movs	r1, #43	; 0x2b
 80040fc:	2085      	movs	r0, #133	; 0x85
 80040fe:	f7fd fdd5 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004102:	20db      	movs	r0, #219	; 0xdb
 8004104:	f002 fb6a 	bl	80067dc <putchar>

	gotoxy(134,44);
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	2086      	movs	r0, #134	; 0x86
 800410c:	f7fd fdce 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004110:	20db      	movs	r0, #219	; 0xdb
 8004112:	f002 fb63 	bl	80067dc <putchar>

	gotoxy(135,44);
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	2087      	movs	r0, #135	; 0x87
 800411a:	f7fd fdc7 	bl	8001cac <gotoxy>
	printf("%c",220);
 800411e:	20dc      	movs	r0, #220	; 0xdc
 8004120:	f002 fb5c 	bl	80067dc <putchar>

	gotoxy(137,44);
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	2089      	movs	r0, #137	; 0x89
 8004128:	f7fd fdc0 	bl	8001cac <gotoxy>
	printf("%c",220);
 800412c:	20dc      	movs	r0, #220	; 0xdc
 800412e:	f002 fb55 	bl	80067dc <putchar>

	gotoxy(139,44);
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	208b      	movs	r0, #139	; 0x8b
 8004136:	f7fd fdb9 	bl	8001cac <gotoxy>
	printf("%c",220);
 800413a:	20dc      	movs	r0, #220	; 0xdc
 800413c:	f002 fb4e 	bl	80067dc <putchar>

	gotoxy(141,44);
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	208d      	movs	r0, #141	; 0x8d
 8004144:	f7fd fdb2 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004148:	20db      	movs	r0, #219	; 0xdb
 800414a:	f002 fb47 	bl	80067dc <putchar>

	gotoxy(142,44);
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	208e      	movs	r0, #142	; 0x8e
 8004152:	f7fd fdab 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004156:	20dc      	movs	r0, #220	; 0xdc
 8004158:	f002 fb40 	bl	80067dc <putchar>
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}

08004160 <drawScore>:
/**
  * @brief Writes the score and level at top right level of screen
  * @param  the current state of the game
  * @retval None
  */
void drawScore(gameState_t* gameState){
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 8004168:	2100      	movs	r1, #0
 800416a:	208c      	movs	r0, #140	; 0x8c
 800416c:	f7fd fd9e 	bl	8001cac <gotoxy>
	printf("Your score is: %d", gameState->score);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004174:	4619      	mov	r1, r3
 8004176:	480d      	ldr	r0, [pc, #52]	; (80041ac <drawScore+0x4c>)
 8004178:	f002 fb18 	bl	80067ac <iprintf>
	gotoxy(140,1*yScale);
 800417c:	2102      	movs	r1, #2
 800417e:	208c      	movs	r0, #140	; 0x8c
 8004180:	f7fd fd94 	bl	8001cac <gotoxy>
	printf("Level: %d", gameState->score/100 + gameState->difficulty);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <drawScore+0x50>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800419a:	4413      	add	r3, r2
 800419c:	4619      	mov	r1, r3
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <drawScore+0x54>)
 80041a0:	f002 fb04 	bl	80067ac <iprintf>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	08007a80 	.word	0x08007a80
 80041b0:	51eb851f 	.word	0x51eb851f
 80041b4:	08007a94 	.word	0x08007a94

080041b8 <drawMe>:
/**
  * @brief Draws the player at some coordinates
  * @param  X: x-coordinate, Y: y-coordinate
  * @retval None
  */
void drawMe(uint8_t X, uint8_t Y){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	460a      	mov	r2, r1
 80041c2:	71fb      	strb	r3, [r7, #7]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	79ba      	ldrb	r2, [r7, #6]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fd6c 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041d4:	20db      	movs	r0, #219	; 0xdb
 80041d6:	f002 fb01 	bl	80067dc <putchar>
	gotoxy(X-1,Y);
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	3b01      	subs	r3, #1
 80041de:	79ba      	ldrb	r2, [r7, #6]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fd62 	bl	8001cac <gotoxy>
	printf("%c",220);
 80041e8:	20dc      	movs	r0, #220	; 0xdc
 80041ea:	f002 faf7 	bl	80067dc <putchar>
	gotoxy(X+1,Y);
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	3301      	adds	r3, #1
 80041f2:	79ba      	ldrb	r2, [r7, #6]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd fd58 	bl	8001cac <gotoxy>
	printf("%c",220);
 80041fc:	20dc      	movs	r0, #220	; 0xdc
 80041fe:	f002 faed 	bl	80067dc <putchar>
	gotoxy(X-1,Y+1);
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	79bb      	ldrb	r3, [r7, #6]
 8004208:	3301      	adds	r3, #1
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fd fd4d 	bl	8001cac <gotoxy>
	printf("%c",223);
 8004212:	20df      	movs	r0, #223	; 0xdf
 8004214:	f002 fae2 	bl	80067dc <putchar>
	gotoxy(X+1,Y+1);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	3301      	adds	r3, #1
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fd fd42 	bl	8001cac <gotoxy>
	printf("%c",223);
 8004228:	20df      	movs	r0, #223	; 0xdf
 800422a:	f002 fad7 	bl	80067dc <putchar>
	gotoxy(X,Y-1);
 800422e:	79fa      	ldrb	r2, [r7, #7]
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	3b01      	subs	r3, #1
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7fd fd38 	bl	8001cac <gotoxy>
	printf("%c",179);
 800423c:	20b3      	movs	r0, #179	; 0xb3
 800423e:	f002 facd 	bl	80067dc <putchar>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <deleteMe>:
/**
  * @brief Erases the player at some coordinates
  * @param  X: x-coordinate, Y: y-coordinate
  * @retval None
  */
void deleteMe(uint8_t X, uint8_t Y){
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	460a      	mov	r2, r1
 8004254:	71fb      	strb	r3, [r7, #7]
 8004256:	4613      	mov	r3, r2
 8004258:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	79ba      	ldrb	r2, [r7, #6]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd fd23 	bl	8001cac <gotoxy>
	printf(" ");
 8004266:	2020      	movs	r0, #32
 8004268:	f002 fab8 	bl	80067dc <putchar>
	gotoxy(X-1,Y);
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	3b01      	subs	r3, #1
 8004270:	79ba      	ldrb	r2, [r7, #6]
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fd19 	bl	8001cac <gotoxy>
	printf(" ");
 800427a:	2020      	movs	r0, #32
 800427c:	f002 faae 	bl	80067dc <putchar>
	gotoxy(X+1,Y);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3301      	adds	r3, #1
 8004284:	79ba      	ldrb	r2, [r7, #6]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd fd0f 	bl	8001cac <gotoxy>
	printf(" ");
 800428e:	2020      	movs	r0, #32
 8004290:	f002 faa4 	bl	80067dc <putchar>
	gotoxy(X-1,Y+1);
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	79bb      	ldrb	r3, [r7, #6]
 800429a:	3301      	adds	r3, #1
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fd fd04 	bl	8001cac <gotoxy>
	printf(" ");
 80042a4:	2020      	movs	r0, #32
 80042a6:	f002 fa99 	bl	80067dc <putchar>
	gotoxy(X+1,Y+1);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	79bb      	ldrb	r3, [r7, #6]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fd fcf9 	bl	8001cac <gotoxy>
	printf(" ");
 80042ba:	2020      	movs	r0, #32
 80042bc:	f002 fa8e 	bl	80067dc <putchar>

	gotoxy(X,Y-1);
 80042c0:	79fa      	ldrb	r2, [r7, #7]
 80042c2:	79bb      	ldrb	r3, [r7, #6]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fd fcef 	bl	8001cac <gotoxy>
	printf(" ");
 80042ce:	2020      	movs	r0, #32
 80042d0:	f002 fa84 	bl	80067dc <putchar>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <drawAttachmentRods>:
/**
  * @brief Draws the attachments for the player
  * @param  X: x-coordinate of player, Y: y-coordinate of player
  * @retval None
  */
void drawAttachmentRods(uint8_t x, uint8_t y){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	460a      	mov	r2, r1
 80042e6:	71fb      	strb	r3, [r7, #7]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	3302      	adds	r3, #2
 80042f0:	79ba      	ldrb	r2, [r7, #6]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fcd9 	bl	8001cac <gotoxy>
	printf("____");
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <drawAttachmentRods+0x40>)
 80042fc:	f002 fa56 	bl	80067ac <iprintf>
	gotoxy(x-5, y);
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	3b05      	subs	r3, #5
 8004304:	79ba      	ldrb	r2, [r7, #6]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd fccf 	bl	8001cac <gotoxy>
	printf("____");
 800430e:	4803      	ldr	r0, [pc, #12]	; (800431c <drawAttachmentRods+0x40>)
 8004310:	f002 fa4c 	bl	80067ac <iprintf>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08007aa0 	.word	0x08007aa0

08004320 <deleteAttachmentRods>:
/**
  * @brief Deletes the attachments for the player
  * @param  X: x-coordinate of player, Y: y-coordinate of player
  * @retval None
  */
void deleteAttachmentRods(uint8_t x, uint8_t y){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	460a      	mov	r2, r1
 800432a:	71fb      	strb	r3, [r7, #7]
 800432c:	4613      	mov	r3, r2
 800432e:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	3302      	adds	r3, #2
 8004334:	79ba      	ldrb	r2, [r7, #6]
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd fcb7 	bl	8001cac <gotoxy>
	printf("    ");
 800433e:	4808      	ldr	r0, [pc, #32]	; (8004360 <deleteAttachmentRods+0x40>)
 8004340:	f002 fa34 	bl	80067ac <iprintf>
	gotoxy(x-5, y);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	3b05      	subs	r3, #5
 8004348:	79ba      	ldrb	r2, [r7, #6]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f7fd fcad 	bl	8001cac <gotoxy>
	printf("    ");
 8004352:	4803      	ldr	r0, [pc, #12]	; (8004360 <deleteAttachmentRods+0x40>)
 8004354:	f002 fa2a 	bl	80067ac <iprintf>
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08007aa8 	.word	0x08007aa8

08004364 <drawPowerupGraphics>:
/**
  * @brief Draws the powerup
  * @param  X: x-coordinate of the powerup, Y: y-coordinate of the powerup
  * @retval None
  */
void drawPowerupGraphics(uint8_t x, uint8_t y){
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b085      	sub	sp, #20
 8004368:	af02      	add	r7, sp, #8
 800436a:	4603      	mov	r3, r0
 800436c:	460a      	mov	r2, r1
 800436e:	71fb      	strb	r3, [r7, #7]
 8004370:	4613      	mov	r3, r2
 8004372:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 8004374:	79f8      	ldrb	r0, [r7, #7]
 8004376:	79b9      	ldrb	r1, [r7, #6]
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	79bb      	ldrb	r3, [r7, #6]
 800437e:	3302      	adds	r3, #2
 8004380:	2401      	movs	r4, #1
 8004382:	9400      	str	r4, [sp, #0]
 8004384:	f7fd fca4 	bl	8001cd0 <drawBox>
 gotoxy(x+2, y+1);
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	1c9a      	adds	r2, r3, #2
 800438c:	79bb      	ldrb	r3, [r7, #6]
 800438e:	3301      	adds	r3, #1
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fd fc8a 	bl	8001cac <gotoxy>
 printf("$");
 8004398:	2024      	movs	r0, #36	; 0x24
 800439a:	f002 fa1f 	bl	80067dc <putchar>
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}
	...

080043a8 <deletePowerupGraphics>:
/**
  * @brief Deletes the powerup
  * @param  X: x-coordinate of the powerup, Y: y-coordinate of the powerup
  * @retval None
  */
void deletePowerupGraphics(uint8_t x, uint8_t y){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	460a      	mov	r2, r1
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	79ba      	ldrb	r2, [r7, #6]
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fc74 	bl	8001cac <gotoxy>
	printf("     ");
 80043c4:	480d      	ldr	r0, [pc, #52]	; (80043fc <deletePowerupGraphics+0x54>)
 80043c6:	f002 f9f1 	bl	80067ac <iprintf>
	gotoxy(x, y+1);
 80043ca:	79fa      	ldrb	r2, [r7, #7]
 80043cc:	79bb      	ldrb	r3, [r7, #6]
 80043ce:	3301      	adds	r3, #1
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7fd fc6a 	bl	8001cac <gotoxy>
	printf("     ");
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <deletePowerupGraphics+0x54>)
 80043da:	f002 f9e7 	bl	80067ac <iprintf>
	gotoxy(x, y+2);
 80043de:	79fa      	ldrb	r2, [r7, #7]
 80043e0:	79bb      	ldrb	r3, [r7, #6]
 80043e2:	3302      	adds	r3, #2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f7fd fc60 	bl	8001cac <gotoxy>
	printf("     ");
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <deletePowerupGraphics+0x54>)
 80043ee:	f002 f9dd 	bl	80067ac <iprintf>

}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08007ab0 	.word	0x08007ab0

08004400 <drawNuke>:
/**
  * @brief Draws the nuke
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawNuke(gameState_t* gameState){
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	7e1b      	ldrb	r3, [r3, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	f040 809e 	bne.w	8004550 <drawNuke+0x150>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe ffd0 	bl	80033c0 <fpToInt>
 8004420:	4604      	mov	r4, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe ffc9 	bl	80033c0 <fpToInt>
 800442e:	4603      	mov	r3, r0
 8004430:	0fda      	lsrs	r2, r3, #31
 8004432:	4413      	add	r3, r2
 8004434:	105b      	asrs	r3, r3, #1
 8004436:	4619      	mov	r1, r3
 8004438:	4620      	mov	r0, r4
 800443a:	f7fd fc37 	bl	8001cac <gotoxy>
		printf("     ");
 800443e:	4846      	ldr	r0, [pc, #280]	; (8004558 <drawNuke+0x158>)
 8004440:	f002 f9b4 	bl	80067ac <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe ffb8 	bl	80033c0 <fpToInt>
 8004450:	4604      	mov	r4, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe ffb1 	bl	80033c0 <fpToInt>
 800445e:	4603      	mov	r3, r0
 8004460:	3302      	adds	r3, #2
 8004462:	0fda      	lsrs	r2, r3, #31
 8004464:	4413      	add	r3, r2
 8004466:	105b      	asrs	r3, r3, #1
 8004468:	4619      	mov	r1, r3
 800446a:	4620      	mov	r0, r4
 800446c:	f7fd fc1e 	bl	8001cac <gotoxy>
		printf("     ");
 8004470:	4839      	ldr	r0, [pc, #228]	; (8004558 <drawNuke+0x158>)
 8004472:	f002 f99b 	bl	80067ac <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe ff9f 	bl	80033c0 <fpToInt>
 8004482:	4604      	mov	r4, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe ff98 	bl	80033c0 <fpToInt>
 8004490:	4603      	mov	r3, r0
 8004492:	3304      	adds	r3, #4
 8004494:	0fda      	lsrs	r2, r3, #31
 8004496:	4413      	add	r3, r2
 8004498:	105b      	asrs	r3, r3, #1
 800449a:	4619      	mov	r1, r3
 800449c:	4620      	mov	r0, r4
 800449e:	f7fd fc05 	bl	8001cac <gotoxy>
		printf("     ");
 80044a2:	482d      	ldr	r0, [pc, #180]	; (8004558 <drawNuke+0x158>)
 80044a4:	f002 f982 	bl	80067ac <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe ff86 	bl	80033c0 <fpToInt>
 80044b4:	4604      	mov	r4, r0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe ff7f 	bl	80033c0 <fpToInt>
 80044c2:	4603      	mov	r3, r0
 80044c4:	0fda      	lsrs	r2, r3, #31
 80044c6:	4413      	add	r3, r2
 80044c8:	105b      	asrs	r3, r3, #1
 80044ca:	4619      	mov	r1, r3
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7fd fbed 	bl	8001cac <gotoxy>
		printf("  |  ");
 80044d2:	4822      	ldr	r0, [pc, #136]	; (800455c <drawNuke+0x15c>)
 80044d4:	f002 f96a 	bl	80067ac <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe ff6e 	bl	80033c0 <fpToInt>
 80044e4:	4604      	mov	r4, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe ff67 	bl	80033c0 <fpToInt>
 80044f2:	4603      	mov	r3, r0
 80044f4:	3302      	adds	r3, #2
 80044f6:	0fda      	lsrs	r2, r3, #31
 80044f8:	4413      	add	r3, r2
 80044fa:	105b      	asrs	r3, r3, #1
 80044fc:	4619      	mov	r1, r3
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fd fbd4 	bl	8001cac <gotoxy>
		printf("- o -");
 8004504:	4816      	ldr	r0, [pc, #88]	; (8004560 <drawNuke+0x160>)
 8004506:	f002 f951 	bl	80067ac <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe ff55 	bl	80033c0 <fpToInt>
 8004516:	4604      	mov	r4, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe ff4e 	bl	80033c0 <fpToInt>
 8004524:	4603      	mov	r3, r0
 8004526:	3304      	adds	r3, #4
 8004528:	0fda      	lsrs	r2, r3, #31
 800452a:	4413      	add	r3, r2
 800452c:	105b      	asrs	r3, r3, #1
 800452e:	4619      	mov	r1, r3
 8004530:	4620      	mov	r0, r4
 8004532:	f7fd fbbb 	bl	8001cac <gotoxy>
		printf(" / %c ", 92);
 8004536:	215c      	movs	r1, #92	; 0x5c
 8004538:	480a      	ldr	r0, [pc, #40]	; (8004564 <drawNuke+0x164>)
 800453a:	f002 f937 	bl	80067ac <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004546:	3308      	adds	r3, #8
 8004548:	e893 0003 	ldmia.w	r3, {r0, r1}
 800454c:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	08007ab0 	.word	0x08007ab0
 800455c:	08007ab8 	.word	0x08007ab8
 8004560:	08007ac0 	.word	0x08007ac0
 8004564:	08007ac8 	.word	0x08007ac8

08004568 <drawNukeCircle>:
/**
  * @brief Draws the nuke eksploson
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawNukeCircle(gameState_t* gameState){
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe ff22 	bl	80033c0 <fpToInt>
 800457c:	4603      	mov	r3, r0
 800457e:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe ff1a 	bl	80033c0 <fpToInt>
 800458c:	4603      	mov	r3, r0
 800458e:	0fda      	lsrs	r2, r3, #31
 8004590:	4413      	add	r3, r2
 8004592:	105b      	asrs	r3, r3, #1
 8004594:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b0f      	subs	r3, #15
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3b07      	subs	r3, #7
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fd fb82 	bl	8001cac <gotoxy>
	printf("              ___-------___               \n");
 80045a8:	4874      	ldr	r0, [pc, #464]	; (800477c <drawNukeCircle+0x214>)
 80045aa:	f002 f99b 	bl	80068e4 <puts>
	gotoxy(x-15, y-6);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b0f      	subs	r3, #15
 80045b2:	461a      	mov	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3b06      	subs	r3, #6
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fd fb76 	bl	8001cac <gotoxy>
	printf("           __-             -__            \n");
 80045c0:	486f      	ldr	r0, [pc, #444]	; (8004780 <drawNukeCircle+0x218>)
 80045c2:	f002 f98f 	bl	80068e4 <puts>
	gotoxy(x-15, y-5);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b0f      	subs	r3, #15
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3b05      	subs	r3, #5
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fd fb6a 	bl	8001cac <gotoxy>
	printf("         _-                   -_          \n");
 80045d8:	486a      	ldr	r0, [pc, #424]	; (8004784 <drawNukeCircle+0x21c>)
 80045da:	f002 f983 	bl	80068e4 <puts>
	gotoxy(x-15, y-4);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b0f      	subs	r3, #15
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3b04      	subs	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fd fb5e 	bl	8001cac <gotoxy>
	printf("       _-                       -_        \n");
 80045f0:	4865      	ldr	r0, [pc, #404]	; (8004788 <drawNukeCircle+0x220>)
 80045f2:	f002 f977 	bl	80068e4 <puts>
	gotoxy(x-15, y-3);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b0f      	subs	r3, #15
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3b03      	subs	r3, #3
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fd fb52 	bl	8001cac <gotoxy>
	printf("     _-                            -_     \n");
 8004608:	4860      	ldr	r0, [pc, #384]	; (800478c <drawNukeCircle+0x224>)
 800460a:	f002 f96b 	bl	80068e4 <puts>
	gotoxy(x-15, y-2);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b0f      	subs	r3, #15
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3b02      	subs	r3, #2
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fd fb46 	bl	8001cac <gotoxy>
	printf("   _-                                -_   \n");
 8004620:	485b      	ldr	r0, [pc, #364]	; (8004790 <drawNukeCircle+0x228>)
 8004622:	f002 f95f 	bl	80068e4 <puts>
	gotoxy(x-15, y-1);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b0f      	subs	r3, #15
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3b01      	subs	r3, #1
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fd fb3a 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 8004638:	4856      	ldr	r0, [pc, #344]	; (8004794 <drawNukeCircle+0x22c>)
 800463a:	f002 f953 	bl	80068e4 <puts>
	gotoxy(x-15, y);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b0f      	subs	r3, #15
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7fd fb2f 	bl	8001cac <gotoxy>
	printf("_-                                      -_\n");
 800464e:	4852      	ldr	r0, [pc, #328]	; (8004798 <drawNukeCircle+0x230>)
 8004650:	f002 f948 	bl	80068e4 <puts>
	gotoxy(x-15, y+1);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b0f      	subs	r3, #15
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3301      	adds	r3, #1
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fd fb23 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 8004666:	484d      	ldr	r0, [pc, #308]	; (800479c <drawNukeCircle+0x234>)
 8004668:	f002 f93c 	bl	80068e4 <puts>
	gotoxy(x-15, y+2);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b0f      	subs	r3, #15
 8004670:	461a      	mov	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3302      	adds	r3, #2
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7fd fb17 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 800467e:	4847      	ldr	r0, [pc, #284]	; (800479c <drawNukeCircle+0x234>)
 8004680:	f002 f930 	bl	80068e4 <puts>
	gotoxy(x-15, y+3);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b0f      	subs	r3, #15
 8004688:	461a      	mov	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3303      	adds	r3, #3
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fd fb0b 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 8004696:	4841      	ldr	r0, [pc, #260]	; (800479c <drawNukeCircle+0x234>)
 8004698:	f002 f924 	bl	80068e4 <puts>
	gotoxy(x-15, y+4);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b0f      	subs	r3, #15
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fd faff 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 80046ae:	483b      	ldr	r0, [pc, #236]	; (800479c <drawNukeCircle+0x234>)
 80046b0:	f002 f918 	bl	80068e4 <puts>
	gotoxy(x-15, y+5);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b0f      	subs	r3, #15
 80046b8:	461a      	mov	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3305      	adds	r3, #5
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7fd faf3 	bl	8001cac <gotoxy>
	printf("-_                                      _-\n");
 80046c6:	4836      	ldr	r0, [pc, #216]	; (80047a0 <drawNukeCircle+0x238>)
 80046c8:	f002 f90c 	bl	80068e4 <puts>
	gotoxy(x-15, y+6);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3b0f      	subs	r3, #15
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3306      	adds	r3, #6
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7fd fae7 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 80046de:	482d      	ldr	r0, [pc, #180]	; (8004794 <drawNukeCircle+0x22c>)
 80046e0:	f002 f900 	bl	80068e4 <puts>
	gotoxy(x-15, y+7);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3b0f      	subs	r3, #15
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3307      	adds	r3, #7
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fd fadb 	bl	8001cac <gotoxy>
	printf("   -_                                _-   \n");
 80046f6:	482b      	ldr	r0, [pc, #172]	; (80047a4 <drawNukeCircle+0x23c>)
 80046f8:	f002 f8f4 	bl	80068e4 <puts>
	gotoxy(x-15, y+8);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3b0f      	subs	r3, #15
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3308      	adds	r3, #8
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7fd facf 	bl	8001cac <gotoxy>
	printf("     -_                            _-     \n");
 800470e:	4826      	ldr	r0, [pc, #152]	; (80047a8 <drawNukeCircle+0x240>)
 8004710:	f002 f8e8 	bl	80068e4 <puts>
	gotoxy(x-15, y+9);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b0f      	subs	r3, #15
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3309      	adds	r3, #9
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fd fac3 	bl	8001cac <gotoxy>
	printf("       -_                       _-        \n");
 8004726:	4821      	ldr	r0, [pc, #132]	; (80047ac <drawNukeCircle+0x244>)
 8004728:	f002 f8dc 	bl	80068e4 <puts>
	gotoxy(x-15, y+10);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3b0f      	subs	r3, #15
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	330a      	adds	r3, #10
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fd fab7 	bl	8001cac <gotoxy>
	printf("         -_                   _-          \n");
 800473e:	481c      	ldr	r0, [pc, #112]	; (80047b0 <drawNukeCircle+0x248>)
 8004740:	f002 f8d0 	bl	80068e4 <puts>
	gotoxy(x-15, y+11);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3b0f      	subs	r3, #15
 8004748:	461a      	mov	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	330b      	adds	r3, #11
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fd faab 	bl	8001cac <gotoxy>
	printf("           -__             _--            \n");
 8004756:	4817      	ldr	r0, [pc, #92]	; (80047b4 <drawNukeCircle+0x24c>)
 8004758:	f002 f8c4 	bl	80068e4 <puts>
	gotoxy(x-15, y+12);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b0f      	subs	r3, #15
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	330c      	adds	r3, #12
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fd fa9f 	bl	8001cac <gotoxy>
	printf("              ---_______---               \n");
 800476e:	4812      	ldr	r0, [pc, #72]	; (80047b8 <drawNukeCircle+0x250>)
 8004770:	f002 f8b8 	bl	80068e4 <puts>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	08007ad0 	.word	0x08007ad0
 8004780:	08007afc 	.word	0x08007afc
 8004784:	08007b28 	.word	0x08007b28
 8004788:	08007b54 	.word	0x08007b54
 800478c:	08007b80 	.word	0x08007b80
 8004790:	08007bac 	.word	0x08007bac
 8004794:	08007bd8 	.word	0x08007bd8
 8004798:	08007c04 	.word	0x08007c04
 800479c:	08007c30 	.word	0x08007c30
 80047a0:	08007c5c 	.word	0x08007c5c
 80047a4:	08007c88 	.word	0x08007c88
 80047a8:	08007cb4 	.word	0x08007cb4
 80047ac:	08007ce0 	.word	0x08007ce0
 80047b0:	08007d0c 	.word	0x08007d0c
 80047b4:	08007d38 	.word	0x08007d38
 80047b8:	08007d64 	.word	0x08007d64

080047bc <clearNukeCircle>:
/**
  * @brief Clears the nuke eksploson
  * @param  gameState: the current state of the game
  * @retval None
  */
void clearNukeCircle(gameState_t* gameState){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fdf8 	bl	80033c0 <fpToInt>
 80047d0:	4603      	mov	r3, r0
 80047d2:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fdf0 	bl	80033c0 <fpToInt>
 80047e0:	4603      	mov	r3, r0
 80047e2:	0fda      	lsrs	r2, r3, #31
 80047e4:	4413      	add	r3, r2
 80047e6:	105b      	asrs	r3, r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b0f      	subs	r3, #15
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3b07      	subs	r3, #7
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fd fa58 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80047fc:	4874      	ldr	r0, [pc, #464]	; (80049d0 <clearNukeCircle+0x214>)
 80047fe:	f002 f871 	bl	80068e4 <puts>
	gotoxy(x-15, y-6);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3b0f      	subs	r3, #15
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3b06      	subs	r3, #6
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fd fa4c 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004814:	486e      	ldr	r0, [pc, #440]	; (80049d0 <clearNukeCircle+0x214>)
 8004816:	f002 f865 	bl	80068e4 <puts>
	gotoxy(x-15, y-5);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b0f      	subs	r3, #15
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3b05      	subs	r3, #5
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fd fa40 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800482c:	4868      	ldr	r0, [pc, #416]	; (80049d0 <clearNukeCircle+0x214>)
 800482e:	f002 f859 	bl	80068e4 <puts>
	gotoxy(x-15, y-4);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b0f      	subs	r3, #15
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3b04      	subs	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f7fd fa34 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004844:	4862      	ldr	r0, [pc, #392]	; (80049d0 <clearNukeCircle+0x214>)
 8004846:	f002 f84d 	bl	80068e4 <puts>
	gotoxy(x-15, y-3);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b0f      	subs	r3, #15
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	3b03      	subs	r3, #3
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fd fa28 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800485c:	485c      	ldr	r0, [pc, #368]	; (80049d0 <clearNukeCircle+0x214>)
 800485e:	f002 f841 	bl	80068e4 <puts>
	gotoxy(x-15, y-2);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b0f      	subs	r3, #15
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3b02      	subs	r3, #2
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fd fa1c 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004874:	4856      	ldr	r0, [pc, #344]	; (80049d0 <clearNukeCircle+0x214>)
 8004876:	f002 f835 	bl	80068e4 <puts>
	gotoxy(x-15, y-1);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b0f      	subs	r3, #15
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3b01      	subs	r3, #1
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f7fd fa10 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800488c:	4850      	ldr	r0, [pc, #320]	; (80049d0 <clearNukeCircle+0x214>)
 800488e:	f002 f829 	bl	80068e4 <puts>
	gotoxy(x-15, y);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b0f      	subs	r3, #15
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fd fa05 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048a2:	484b      	ldr	r0, [pc, #300]	; (80049d0 <clearNukeCircle+0x214>)
 80048a4:	f002 f81e 	bl	80068e4 <puts>
	gotoxy(x-15, y+1);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b0f      	subs	r3, #15
 80048ac:	461a      	mov	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fd f9f9 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048ba:	4845      	ldr	r0, [pc, #276]	; (80049d0 <clearNukeCircle+0x214>)
 80048bc:	f002 f812 	bl	80068e4 <puts>
	gotoxy(x-15, y+2);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b0f      	subs	r3, #15
 80048c4:	461a      	mov	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3302      	adds	r3, #2
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fd f9ed 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048d2:	483f      	ldr	r0, [pc, #252]	; (80049d0 <clearNukeCircle+0x214>)
 80048d4:	f002 f806 	bl	80068e4 <puts>
	gotoxy(x-15, y+3);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b0f      	subs	r3, #15
 80048dc:	461a      	mov	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3303      	adds	r3, #3
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fd f9e1 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048ea:	4839      	ldr	r0, [pc, #228]	; (80049d0 <clearNukeCircle+0x214>)
 80048ec:	f001 fffa 	bl	80068e4 <puts>
	gotoxy(x-15, y+4);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b0f      	subs	r3, #15
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7fd f9d5 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004902:	4833      	ldr	r0, [pc, #204]	; (80049d0 <clearNukeCircle+0x214>)
 8004904:	f001 ffee 	bl	80068e4 <puts>
	gotoxy(x-15, y+5);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3b0f      	subs	r3, #15
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3305      	adds	r3, #5
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fd f9c9 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800491a:	482d      	ldr	r0, [pc, #180]	; (80049d0 <clearNukeCircle+0x214>)
 800491c:	f001 ffe2 	bl	80068e4 <puts>
	gotoxy(x-15, y+6);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b0f      	subs	r3, #15
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3306      	adds	r3, #6
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f7fd f9bd 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004932:	4827      	ldr	r0, [pc, #156]	; (80049d0 <clearNukeCircle+0x214>)
 8004934:	f001 ffd6 	bl	80068e4 <puts>
	gotoxy(x-15, y+7);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b0f      	subs	r3, #15
 800493c:	461a      	mov	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3307      	adds	r3, #7
 8004942:	4619      	mov	r1, r3
 8004944:	4610      	mov	r0, r2
 8004946:	f7fd f9b1 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800494a:	4821      	ldr	r0, [pc, #132]	; (80049d0 <clearNukeCircle+0x214>)
 800494c:	f001 ffca 	bl	80068e4 <puts>
	gotoxy(x-15, y+8);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b0f      	subs	r3, #15
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3308      	adds	r3, #8
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fd f9a5 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004962:	481b      	ldr	r0, [pc, #108]	; (80049d0 <clearNukeCircle+0x214>)
 8004964:	f001 ffbe 	bl	80068e4 <puts>
	gotoxy(x-15, y+9);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b0f      	subs	r3, #15
 800496c:	461a      	mov	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3309      	adds	r3, #9
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fd f999 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800497a:	4815      	ldr	r0, [pc, #84]	; (80049d0 <clearNukeCircle+0x214>)
 800497c:	f001 ffb2 	bl	80068e4 <puts>
	gotoxy(x-15, y+10);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3b0f      	subs	r3, #15
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	330a      	adds	r3, #10
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fd f98d 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004992:	480f      	ldr	r0, [pc, #60]	; (80049d0 <clearNukeCircle+0x214>)
 8004994:	f001 ffa6 	bl	80068e4 <puts>
	gotoxy(x-15, y+11);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b0f      	subs	r3, #15
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	330b      	adds	r3, #11
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f7fd f981 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80049aa:	4809      	ldr	r0, [pc, #36]	; (80049d0 <clearNukeCircle+0x214>)
 80049ac:	f001 ff9a 	bl	80068e4 <puts>
	gotoxy(x-15, y+12);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b0f      	subs	r3, #15
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	330c      	adds	r3, #12
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fd f975 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80049c2:	4803      	ldr	r0, [pc, #12]	; (80049d0 <clearNukeCircle+0x214>)
 80049c4:	f001 ff8e 	bl	80068e4 <puts>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08007d90 	.word	0x08007d90

080049d4 <drawBossKey>:
/**
  * @brief Draws the bossKey screen
  * @param  None
  * @retval None
  */
void drawBossKey(){
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 80049d8:	481e      	ldr	r0, [pc, #120]	; (8004a54 <drawBossKey+0x80>)
 80049da:	f001 ff83 	bl	80068e4 <puts>
	printf("	char c = uart_get_char();\n");
 80049de:	481e      	ldr	r0, [pc, #120]	; (8004a58 <drawBossKey+0x84>)
 80049e0:	f001 ff80 	bl	80068e4 <puts>
	printf("	if(c == 'f'){\n");
 80049e4:	481d      	ldr	r0, [pc, #116]	; (8004a5c <drawBossKey+0x88>)
 80049e6:	f001 ff7d 	bl	80068e4 <puts>
	printf("		if(gameState->bossMode == 0){\n");
 80049ea:	481d      	ldr	r0, [pc, #116]	; (8004a60 <drawBossKey+0x8c>)
 80049ec:	f001 ff7a 	bl	80068e4 <puts>
	printf("			clrscr();\n");
 80049f0:	481c      	ldr	r0, [pc, #112]	; (8004a64 <drawBossKey+0x90>)
 80049f2:	f001 ff77 	bl	80068e4 <puts>
	printf("			gameState->bossMode = 1;\n");
 80049f6:	481c      	ldr	r0, [pc, #112]	; (8004a68 <drawBossKey+0x94>)
 80049f8:	f001 ff74 	bl	80068e4 <puts>
	printf("		}else{\n");
 80049fc:	481b      	ldr	r0, [pc, #108]	; (8004a6c <drawBossKey+0x98>)
 80049fe:	f001 ff71 	bl	80068e4 <puts>
	printf("			gameState->bossMode = 0;\n");
 8004a02:	481b      	ldr	r0, [pc, #108]	; (8004a70 <drawBossKey+0x9c>)
 8004a04:	f001 ff6e 	bl	80068e4 <puts>
	printf("			return 2;\n");
 8004a08:	481a      	ldr	r0, [pc, #104]	; (8004a74 <drawBossKey+0xa0>)
 8004a0a:	f001 ff6b 	bl	80068e4 <puts>
	printf("		}\n");
 8004a0e:	481a      	ldr	r0, [pc, #104]	; (8004a78 <drawBossKey+0xa4>)
 8004a10:	f001 ff68 	bl	80068e4 <puts>
	printf("	}\n");
 8004a14:	4819      	ldr	r0, [pc, #100]	; (8004a7c <drawBossKey+0xa8>)
 8004a16:	f001 ff65 	bl	80068e4 <puts>
	printf("\n");
 8004a1a:	200a      	movs	r0, #10
 8004a1c:	f001 fede 	bl	80067dc <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 8004a20:	4817      	ldr	r0, [pc, #92]	; (8004a80 <drawBossKey+0xac>)
 8004a22:	f001 ff5f 	bl	80068e4 <puts>
	printf("		gotoxy(0,0);\n");
 8004a26:	4817      	ldr	r0, [pc, #92]	; (8004a84 <drawBossKey+0xb0>)
 8004a28:	f001 ff5c 	bl	80068e4 <puts>
	printf("		drawBossKey();\n");
 8004a2c:	4816      	ldr	r0, [pc, #88]	; (8004a88 <drawBossKey+0xb4>)
 8004a2e:	f001 ff59 	bl	80068e4 <puts>
	printf("		return 1;\n");
 8004a32:	4816      	ldr	r0, [pc, #88]	; (8004a8c <drawBossKey+0xb8>)
 8004a34:	f001 ff56 	bl	80068e4 <puts>
	printf("	}\n");
 8004a38:	4810      	ldr	r0, [pc, #64]	; (8004a7c <drawBossKey+0xa8>)
 8004a3a:	f001 ff53 	bl	80068e4 <puts>
	printf("	return 0;\n");
 8004a3e:	4814      	ldr	r0, [pc, #80]	; (8004a90 <drawBossKey+0xbc>)
 8004a40:	f001 ff50 	bl	80068e4 <puts>
	printf("	uart_clear();\n");
 8004a44:	4813      	ldr	r0, [pc, #76]	; (8004a94 <drawBossKey+0xc0>)
 8004a46:	f001 ff4d 	bl	80068e4 <puts>
	printf("}\n");
 8004a4a:	4813      	ldr	r0, [pc, #76]	; (8004a98 <drawBossKey+0xc4>)
 8004a4c:	f001 ff4a 	bl	80068e4 <puts>
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08007dbc 	.word	0x08007dbc
 8004a58:	08007de4 	.word	0x08007de4
 8004a5c:	08007e00 	.word	0x08007e00
 8004a60:	08007e10 	.word	0x08007e10
 8004a64:	08007e30 	.word	0x08007e30
 8004a68:	08007e40 	.word	0x08007e40
 8004a6c:	08007e5c 	.word	0x08007e5c
 8004a70:	08007e68 	.word	0x08007e68
 8004a74:	08007e84 	.word	0x08007e84
 8004a78:	08007e94 	.word	0x08007e94
 8004a7c:	08007e98 	.word	0x08007e98
 8004a80:	08007e9c 	.word	0x08007e9c
 8004a84:	08007ebc 	.word	0x08007ebc
 8004a88:	08007ecc 	.word	0x08007ecc
 8004a8c:	08007ee0 	.word	0x08007ee0
 8004a90:	08007eec 	.word	0x08007eec
 8004a94:	08007ef8 	.word	0x08007ef8
 8004a98:	08007f08 	.word	0x08007f08

08004a9c <appendBullet>:
/**
  * @brief  Adds a new buletNode to the ends of the bullet linked list
  * @param  head: the head of the bullet list, bullet: the bullet to append
  * @retval None
  */
void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	b5b0      	push	{r4, r5, r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8004aae:	2020      	movs	r0, #32
 8004ab0:	f001 fdba 	bl	8006628 <malloc>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	60bb      	str	r3, [r7, #8]
    newNode->bullet = bullet;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	461d      	mov	r5, r3
 8004abc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ac8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
    //If the list is empty assign the bullet as head
    if (*head == NULL) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <appendBullet+0x46>
        *head = newNode;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8004ae0:	e00d      	b.n	8004afe <appendBullet+0x62>
        bulletNode_t* current = *head;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004ae8:	e002      	b.n	8004af0 <appendBullet+0x54>
            current = current->nextBulletAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f8      	bne.n	8004aea <appendBullet+0x4e>
        current->nextBulletAddress = newNode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	61da      	str	r2, [r3, #28]
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004b08:	b004      	add	sp, #16
 8004b0a:	4770      	bx	lr

08004b0c <appendEnemy>:
/**
  * @brief  Adds a new enemyNode to the ends of the bullet linked list
  * @param  gameState: the current state of the game,  enemy: the enemy to append
  * @retval None
  */
void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8004b16:	2008      	movs	r0, #8
 8004b18:	f001 fd86 	bl	8006628 <malloc>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = NULL;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]

    //If the list is empty assign the enemy as head
	if(gameState->enemyLL == NULL){
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <appendEnemy+0x30>
		gameState->enemyLL = newEnemy;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	605a      	str	r2, [r3, #4]
		return;
 8004b3a:	e011      	b.n	8004b60 <appendEnemy+0x54>
	}

	//Loops through the entire list and adds bullet to the end
	enemyNode_t* thisNode = gameState->enemyLL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8004b42:	e00a      	b.n	8004b5a <appendEnemy+0x4e>
		if(thisNode->nextEnemyNode == NULL){
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <appendEnemy+0x48>
			thisNode->nextEnemyNode = newEnemy;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	605a      	str	r2, [r3, #4]
			break;
 8004b52:	e005      	b.n	8004b60 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f1      	bne.n	8004b44 <appendEnemy+0x38>
	}
}
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <deleteEnemyNode>:
/**
  * @brief  deletes a given enemy node
  * @param  gameState: the current state of the game,  enemy: the enemy to delete
  * @retval None
  */
void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60bb      	str	r3, [r7, #8]

	///If the enemy to delete is the first delete the head, sets the head as the second element, and free the memory
	if(gameState->enemyLL == enemy){
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	f040 809b 	bne.w	8004cbe <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fc15 	bl	80033c0 <fpToInt>
 8004b96:	4604      	mov	r4, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fc0d 	bl	80033c0 <fpToInt>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	0fda      	lsrs	r2, r3, #31
 8004baa:	4413      	add	r3, r2
 8004bac:	105b      	asrs	r3, r3, #1
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7fd f87b 	bl	8001cac <gotoxy>
		printf("       ");
 8004bb6:	4845      	ldr	r0, [pc, #276]	; (8004ccc <deleteEnemyNode+0x164>)
 8004bb8:	f001 fdf8 	bl	80067ac <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fbfb 	bl	80033c0 <fpToInt>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe fbf3 	bl	80033c0 <fpToInt>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	3302      	adds	r3, #2
 8004bde:	0fda      	lsrs	r2, r3, #31
 8004be0:	4413      	add	r3, r2
 8004be2:	105b      	asrs	r3, r3, #1
 8004be4:	4619      	mov	r1, r3
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fd f860 	bl	8001cac <gotoxy>
		printf("       ");
 8004bec:	4837      	ldr	r0, [pc, #220]	; (8004ccc <deleteEnemyNode+0x164>)
 8004bee:	f001 fddd 	bl	80067ac <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	605a      	str	r2, [r3, #4]
		free(enemy);
 8004bfc:	6838      	ldr	r0, [r7, #0]
 8004bfe:	f001 fd1b 	bl	8006638 <free>
		return;
 8004c02:	e05f      	b.n	8004cc4 <deleteEnemyNode+0x15c>
	}

	///Loops through the entire list of enemies and deletes the given enemy. Also "links" the previous element to the next, and frees memory
	while(thisNode != NULL){
		if(thisNode == enemy){
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d153      	bne.n	8004cb4 <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fbd3 	bl	80033c0 <fpToInt>
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fbcb 	bl	80033c0 <fpToInt>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	0fda      	lsrs	r2, r3, #31
 8004c2e:	4413      	add	r3, r2
 8004c30:	105b      	asrs	r3, r3, #1
 8004c32:	4619      	mov	r1, r3
 8004c34:	4620      	mov	r0, r4
 8004c36:	f7fd f839 	bl	8001cac <gotoxy>
			printf("       ");
 8004c3a:	4824      	ldr	r0, [pc, #144]	; (8004ccc <deleteEnemyNode+0x164>)
 8004c3c:	f001 fdb6 	bl	80067ac <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fbb9 	bl	80033c0 <fpToInt>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fbb1 	bl	80033c0 <fpToInt>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	3302      	adds	r3, #2
 8004c62:	0fda      	lsrs	r2, r3, #31
 8004c64:	4413      	add	r3, r2
 8004c66:	105b      	asrs	r3, r3, #1
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7fd f81e 	bl	8001cac <gotoxy>
			printf("       ");
 8004c70:	4816      	ldr	r0, [pc, #88]	; (8004ccc <deleteEnemyNode+0x164>)
 8004c72:	f001 fd9b 	bl	80067ac <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fcd7 	bl	8006638 <free>
			free(thisNode->enemy->position);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 fcd1 	bl	8006638 <free>
			free(thisNode->enemy->velocity);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 fccb 	bl	8006638 <free>
			free(thisNode->enemy);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fcc6 	bl	8006638 <free>
			free(thisNode);
 8004cac:	68b8      	ldr	r0, [r7, #8]
 8004cae:	f001 fcc3 	bl	8006638 <free>
			return;
 8004cb2:	e007      	b.n	8004cc4 <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d19f      	bne.n	8004c04 <deleteEnemyNode+0x9c>
	}
}
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd90      	pop	{r4, r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	08007f0c 	.word	0x08007f0c

08004cd0 <deleteBulletNode>:
/**
  * @brief  Deletes an element from the bulletList
  * @param  head: the head of the bullet list, nodeToDelete: the bullet to delete
  * @retval None
  */
void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03c      	beq.n	8004d5c <deleteBulletNode+0x8c>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d039      	beq.n	8004d5c <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fb67 	bl	80033c0 <fpToInt>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fb61 	bl	80033c0 <fpToInt>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	0fda      	lsrs	r2, r3, #31
 8004d02:	4413      	add	r3, r2
 8004d04:	105b      	asrs	r3, r3, #1
 8004d06:	4619      	mov	r1, r3
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7fc ffcf 	bl	8001cac <gotoxy>
    printf(" ");
 8004d0e:	2020      	movs	r0, #32
 8004d10:	f001 fd64 	bl	80067dc <putchar>

	///If the enemy to delete is the first delete the head, sets the head as the second element, and free the memory
    if (*head == nodeToDelete) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d107      	bne.n	8004d2e <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	f001 fc86 	bl	8006638 <free>
        return;
 8004d2c:	e017      	b.n	8004d5e <deleteBulletNode+0x8e>
    }

	///Loops through the entire list of bullets and deletes the given bullet. Also "links" the previous element to the next, and frees memory
    bulletNode_t* current = *head;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004d34:	e002      	b.n	8004d3c <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <deleteBulletNode+0x7c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1f4      	bne.n	8004d36 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8004d54:	6838      	ldr	r0, [r7, #0]
 8004d56:	f001 fc6f 	bl	8006638 <free>
 8004d5a:	e000      	b.n	8004d5e <deleteBulletNode+0x8e>
        return;
 8004d5c:	bf00      	nop
}
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <initVariables>:
/**
  * @brief  Sets all the relevant variables to reset values
  * @param  gamestate: the current state of the game
  * @retval None
  */
void initVariables(gameState_t* gameState){
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b08e      	sub	sp, #56	; 0x38
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f7fe fb12 	bl	8003396 <intToFp>
 8004d72:	4603      	mov	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	2050      	movs	r0, #80	; 0x50
 8004d78:	f7fe fb0d 	bl	8003396 <intToFp>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	61fb      	str	r3, [r7, #28]
			{intToFp(3), intToFp(40*yScale)}, //position
 8004d80:	2003      	movs	r0, #3
 8004d82:	f7fe fb08 	bl	8003396 <intToFp>
 8004d86:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d88:	623b      	str	r3, [r7, #32]
			{intToFp(3), intToFp(40*yScale)}, //position
 8004d8a:	2050      	movs	r0, #80	; 0x50
 8004d8c:	f7fe fb03 	bl	8003396 <intToFp>
 8004d90:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
			{intToFp(3), intToFp(40*yScale)}, //next Position
 8004d94:	2003      	movs	r0, #3
 8004d96:	f7fe fafe 	bl	8003396 <intToFp>
 8004d9a:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
			{intToFp(3), intToFp(40*yScale)}, //next Position
 8004d9e:	2050      	movs	r0, #80	; 0x50
 8004da0:	f7fe faf9 	bl	8003396 <intToFp>
 8004da4:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			1, 0}; //Number of parts, powerups
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 8004db4:	4a40      	ldr	r2, [pc, #256]	; (8004eb8 <initVariables+0x154>)
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	8019      	strh	r1, [r3, #0]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	0c12      	lsrs	r2, r2, #16
 8004dc4:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 8004dd2:	2028      	movs	r0, #40	; 0x28
 8004dd4:	f001 fc28 	bl	8006628 <malloc>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
	position_t pos = {0,0};
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
	nuke->position = pos;
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	461a      	mov	r2, r3
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004df0:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	3308      	adds	r3, #8
 8004df8:	f107 020c 	add.w	r2, r7, #12
 8004dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e00:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	2200      	movs	r2, #0
 8004e08:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1e:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gameState->btnSelected=0; //start game
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	gameState->isDead=0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	gameState->score=0;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	865a      	strh	r2, [r3, #50]	; 0x32
	gameState->cityLives=3;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2203      	movs	r2, #3
 8004e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->spaceship= initSpaceship;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0410 	add.w	r4, r3, #16
 8004e5e:	f107 0518 	add.w	r5, r7, #24
 8004e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gameState->bossMode = 0;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	gameState->moon = moon;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	f107 0214 	add.w	r2, r7, #20
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	4611      	mov	r1, r2
 8004e82:	8019      	strh	r1, [r3, #0]
 8004e84:	3302      	adds	r3, #2
 8004e86:	0c12      	lsrs	r2, r2, #16
 8004e88:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60
	gameState->powerup.isVisible=0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	gameState->soundIndex = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	gameState->soundTime = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	669a      	str	r2, [r3, #104]	; 0x68
	gameState->soundToPlay = 0;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8004eae:	bf00      	nop
 8004eb0:	3738      	adds	r7, #56	; 0x38
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08007f14 	.word	0x08007f14

08004ebc <drawScreen>:
/**
  * @brief  draws the current state of the game
  * @param  gamestate: the current state of the game
  * @retval None
  */
void drawScreen(gameState_t* gameState) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f975 	bl	80061b4 <drawSpaceship>
	drawEnemy(gameState);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fe fdbe 	bl	8003a4c <drawEnemy>
	drawBullets(gameState);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd f9ff 	bl	80022d4 <drawBullets>
	drawPowerup(gameState);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fee7 	bl	8005caa <drawPowerup>
	drawhearth(gameState);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fe fd33 	bl	8003948 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7b1a      	ldrb	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7b5b      	ldrb	r3, [r3, #13]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fbf8 	bl	80036e2 <drawMoon>
	drawNuke(gameState);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fa84 	bl	8004400 <drawNuke>
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <checkIfDead>:
/**
  * @brief  checks if the player is dead, and writes the score to memory if applicable
  * @param  gamestate: the current state of the game
  * @retval None
  */
void checkIfDead(gameState_t* gameState){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <checkIfDead+0x3a>
		gameState->activeScreen = 3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		uint16_t oldScore = readFromFlash(0x0800F800);
 8004f1a:	480a      	ldr	r0, [pc, #40]	; (8004f44 <checkIfDead+0x44>)
 8004f1c:	f7fd fff1 	bl	8002f02 <readFromFlash>
 8004f20:	4603      	mov	r3, r0
 8004f22:	81fb      	strh	r3, [r7, #14]
		if(gameState->score > oldScore){
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f28:	89fa      	ldrh	r2, [r7, #14]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d205      	bcs.n	8004f3a <checkIfDead+0x3a>
			writeToFlash(gameState->score, 0x0800F800);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f32:	4904      	ldr	r1, [pc, #16]	; (8004f44 <checkIfDead+0x44>)
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd ffcb 	bl	8002ed0 <writeToFlash>
		}
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	0800f800 	.word	0x0800f800

08004f48 <checkBossKey>:
/**
  * @brief  Checks if 'f' is pressed and (de)activates bossKey i it's pressed
  * @param  gamestate: the current state of the game
  * @retval None
  */
void checkBossKey(gameState_t* gameState){
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8004f50:	f7fc fcc2 	bl	80018d8 <uart_get_char>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b66      	cmp	r3, #102	; 0x66
 8004f5c:	d117      	bne.n	8004f8e <checkBossKey+0x46>
		if(gameState->activeScreen != 4){
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d00c      	beq.n	8004f82 <checkBossKey+0x3a>
			clrscr();
 8004f68:	f7fc fe90 	bl	8001c8c <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			gameState->activeScreen = 4;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		}else{
			gameState->activeScreen = gameState->lastScreen;
		}
	}
}
 8004f80:	e005      	b.n	8004f8e <checkBossKey+0x46>
			gameState->activeScreen = gameState->lastScreen;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <main>:
/**
  * @brief  The main loop of the game. Runs the menus, if activeScreen == 1 runs the game.
  * @param  None
  * @retval None
  */
int main(void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b0a4      	sub	sp, #144	; 0x90
 8004f9c:	af00      	add	r7, sp, #0

	//Defines the menu buttons
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 8004f9e:	4adb      	ldr	r2, [pc, #876]	; (800530c <main+0x374>)
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fac:	4ad8      	ldr	r2, [pc, #864]	; (8005310 <main+0x378>)
 8004fae:	f107 0310 	add.w	r3, r7, #16
 8004fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fba:	4ad6      	ldr	r2, [pc, #856]	; (8005314 <main+0x37c>)
 8004fbc:	f107 0318 	add.w	r3, r7, #24
 8004fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fc4:	e883 0003 	stmia.w	r3, {r0, r1}

	//Sets up all the used hardware
	uart_init(512000);
 8004fc8:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8004fcc:	f7fc fd28 	bl	8001a20 <uart_init>
	initVariables(&gameState);
 8004fd0:	f107 0320 	add.w	r3, r7, #32
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fec5 	bl	8004d64 <initVariables>
	initJoystick();
 8004fda:	f7fd fa07 	bl	80023ec <initJoystick>
	initTimer();
 8004fde:	f7fd fb25 	bl	800262c <initTimer>
	initBuzzerPin();
 8004fe2:	f7fd fbc1 	bl	8002768 <initBuzzerPin>
	initRGB();
 8004fe6:	f7fd fe43 	bl	8002c70 <initRGB>
	I2C_init();
 8004fea:	f7fd fcc3 	bl	8002974 <I2C_init>
	analogConfigPorts();
 8004fee:	f7fd fd79 	bl	8002ae4 <analogConfigPorts>
	uint8_t color[] = {0,0,0};
 8004ff2:	4ac9      	ldr	r2, [pc, #804]	; (8005318 <main+0x380>)
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	8019      	strh	r1, [r3, #0]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	0c12      	lsrs	r2, r2, #16
 8005000:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd ff1b 	bl	8002e40 <RGBColor>
	srand(readPotentiometer());   //RNG
 800500a:	f7fd fe0f 	bl	8002c2c <readPotentiometer>
 800500e:	4603      	mov	r3, r0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fc6f 	bl	80068f4 <srand>

	while(1){
		switch(gameState.activeScreen){
 8005016:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800501a:	2b04      	cmp	r3, #4
 800501c:	d8fb      	bhi.n	8005016 <main+0x7e>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <main+0x8c>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005039 	.word	0x08005039
 8005028:	080051bd 	.word	0x080051bd
 800502c:	080052d5 	.word	0x080052d5
 8005030:	08005335 	.word	0x08005335
 8005034:	08005379 	.word	0x08005379
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			//Sets up the menu
			clrscr();
 8005038:	f7fc fe28 	bl	8001c8c <clrscr>
			drawWindow(0);
 800503c:	2000      	movs	r0, #0
 800503e:	f000 faf3 	bl	8005628 <drawWindow>
			drawbackground(); // stars in background
 8005042:	f7fe fa5c 	bl	80034fe <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8005046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800504a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fb46 	bl	80036e2 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8005056:	f107 0220 	add.w	r2, r7, #32
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fa09 	bl	8005478 <drawMenuScreen>

			//Continuously checks if the joystick is used and acts accordingly
			while(gameState.activeScreen==0){
 8005066:	e0a3      	b.n	80051b0 <main+0x218>
				checkBossKey(&gameState);
 8005068:	f107 0320 	add.w	r3, r7, #32
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff6b 	bl	8004f48 <checkBossKey>
				if(downIsPressed()){
 8005072:	f7fd faad 	bl	80025d0 <downIsPressed>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d025      	beq.n	80050c8 <main+0x130>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 800507c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005086:	4413      	add	r3, r2
 8005088:	3b88      	subs	r3, #136	; 0x88
 800508a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800508e:	f000 f9d3 	bl	8005438 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8005092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	4ba0      	ldr	r3, [pc, #640]	; (800531c <main+0x384>)
 800509a:	fb83 3102 	smull	r3, r1, r3, r2
 800509e:	17d3      	asrs	r3, r2, #31
 80050a0:	1ac9      	subs	r1, r1, r3
 80050a2:	460b      	mov	r3, r1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	440b      	add	r3, r1
 80050a8:	1ad1      	subs	r1, r2, r3
 80050aa:	b2cb      	uxtb	r3, r1
 80050ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80050b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80050ba:	4413      	add	r3, r2
 80050bc:	3b88      	subs	r3, #136	; 0x88
 80050be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050c2:	f000 f999 	bl	80053f8 <drawBtnAsSelected>
 80050c6:	e028      	b.n	800511a <main+0x182>
				}
				else if(upIsPressed()){
 80050c8:	f7fd fa54 	bl	8002574 <upIsPressed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d023      	beq.n	800511a <main+0x182>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80050d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80050dc:	4413      	add	r3, r2
 80050de:	3b88      	subs	r3, #136	; 0x88
 80050e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050e4:	f000 f9a8 	bl	8005438 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80050e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <main+0x160>
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80050f6:	e005      	b.n	8005104 <main+0x16c>
					else gameState.btnSelected=gameState.btnSelected-1;
 80050f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8005104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800510e:	4413      	add	r3, r2
 8005110:	3b88      	subs	r3, #136	; 0x88
 8005112:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005116:	f000 f96f 	bl	80053f8 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 800511a:	f7fd f9fd 	bl	8002518 <centerIsPressed>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d045      	beq.n	80051b0 <main+0x218>
					if(gameState.btnSelected==0){ //START BUTTON
 8005124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <main+0x19c>
						gameState.activeScreen=1; //Game screen
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8005132:	e03d      	b.n	80051b0 <main+0x218>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8005134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005138:	2b01      	cmp	r3, #1
 800513a:	d132      	bne.n	80051a2 <main+0x20a>
						gameState.difficulty=(gameState.difficulty+5)%15;
 800513c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005140:	1d5a      	adds	r2, r3, #5
 8005142:	4b77      	ldr	r3, [pc, #476]	; (8005320 <main+0x388>)
 8005144:	fb83 1302 	smull	r1, r3, r3, r2
 8005148:	4413      	add	r3, r2
 800514a:	10d9      	asrs	r1, r3, #3
 800514c:	17d3      	asrs	r3, r2, #31
 800514e:	1ac9      	subs	r1, r1, r3
 8005150:	460b      	mov	r3, r1
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a5b      	subs	r3, r3, r1
 8005156:	1ad1      	subs	r1, r2, r3
 8005158:	b2cb      	uxtb	r3, r1
 800515a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 800515e:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <main+0x378>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	330f      	adds	r3, #15
 8005164:	4a6a      	ldr	r2, [pc, #424]	; (8005310 <main+0x378>)
 8005166:	7852      	ldrb	r2, [r2, #1]
 8005168:	3201      	adds	r2, #1
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc fd9d 	bl	8001cac <gotoxy>
						if(gameState.difficulty==0){
 8005172:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <main+0x1ea>
							printf("EASY  ");
 800517a:	486a      	ldr	r0, [pc, #424]	; (8005324 <main+0x38c>)
 800517c:	f001 fb16 	bl	80067ac <iprintf>
 8005180:	e016      	b.n	80051b0 <main+0x218>
						} else if(gameState.difficulty==5){
 8005182:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005186:	2b05      	cmp	r3, #5
 8005188:	d103      	bne.n	8005192 <main+0x1fa>
							printf("MEDIUM");
 800518a:	4867      	ldr	r0, [pc, #412]	; (8005328 <main+0x390>)
 800518c:	f001 fb0e 	bl	80067ac <iprintf>
 8005190:	e00e      	b.n	80051b0 <main+0x218>
						} else if(gameState.difficulty==10){
 8005192:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005196:	2b0a      	cmp	r3, #10
 8005198:	d10a      	bne.n	80051b0 <main+0x218>
							printf("HARD  ");
 800519a:	4864      	ldr	r0, [pc, #400]	; (800532c <main+0x394>)
 800519c:	f001 fb06 	bl	80067ac <iprintf>
 80051a0:	e006      	b.n	80051b0 <main+0x218>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 80051a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d102      	bne.n	80051b0 <main+0x218>
						gameState.activeScreen=2;// help screen
 80051aa:	2302      	movs	r3, #2
 80051ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			while(gameState.activeScreen==0){
 80051b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f43f af57 	beq.w	8005068 <main+0xd0>
					}
				}
			}
			break;
 80051ba:	e0eb      	b.n	8005394 <main+0x3fc>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			//Sets up the game screen
			clrscr();
 80051bc:	f7fc fd66 	bl	8001c8c <clrscr>
			uint32_t frameLastUpdated=0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			gameState.powerup.lastUseTime = runtime;
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <main+0x398>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			drawWindow(1);
 80051ce:	2001      	movs	r0, #1
 80051d0:	f000 fa2a 	bl	8005628 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80051d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fa7f 	bl	80036e2 <drawMoon>
			drawhearth(&gameState);
 80051e4:	f107 0320 	add.w	r3, r7, #32
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fbad 	bl	8003948 <drawhearth>
			drawCity();
 80051ee:	f7fe fccd 	bl	8003b8c <drawCity>

			drawScore(&gameState);
 80051f2:	f107 0320 	add.w	r3, r7, #32
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe ffb2 	bl	8004160 <drawScore>
			gameState.powerup.lastUseTime = runtime; //Starts the spawing of powerups
 80051fc:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <main+0x398>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			gameState.nuke->lastActivationTime = runtime; //Start charging of nuke
 8005204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005206:	4a4a      	ldr	r2, [pc, #296]	; (8005330 <main+0x398>)
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	625a      	str	r2, [r3, #36]	; 0x24
			gameState.soundTime = runtime; //Starts the soundengine
 800520c:	4b48      	ldr	r3, [pc, #288]	; (8005330 <main+0x398>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			gameState.nextEnemySpawn = runtime + 20; //Spawns first enemy after 0.2 seconds
 8005214:	4b46      	ldr	r3, [pc, #280]	; (8005330 <main+0x398>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28

			//Continuously updates the game updateing sound and bosskey as quicly as possible, and the rest 4 times pr second
			while(gameState.activeScreen==1){
 800521c:	e055      	b.n	80052ca <main+0x332>
				checkBossKey(&gameState);
 800521e:	f107 0320 	add.w	r3, r7, #32
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fe90 	bl	8004f48 <checkBossKey>
				playSound(&gameState);
 8005228:	f107 0320 	add.w	r3, r7, #32
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fd7b 	bl	8005d28 <playSound>
				if(runtime-frameLastUpdated>=framePeriod){//
 8005232:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <main+0x398>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b03      	cmp	r3, #3
 800523e:	d944      	bls.n	80052ca <main+0x332>
					spawnEnemy(&gameState);
 8005240:	f107 0320 	add.w	r3, r7, #32
 8005244:	4618      	mov	r0, r3
 8005246:	f7fd fef7 	bl	8003038 <spawnEnemy>
					spawnPowerup(&gameState);
 800524a:	f107 0320 	add.w	r3, r7, #32
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fbde 	bl	8005a10 <spawnPowerup>

					updateSpaceship(&gameState);
 8005254:	f107 0320 	add.w	r3, r7, #32
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fe45 	bl	8005ee8 <updateSpaceship>
					updateEnemy(&gameState);
 800525e:	f107 0320 	add.w	r3, r7, #32
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd ffa6 	bl	80031b4 <updateEnemy>
					updatePowerup(&gameState);
 8005268:	f107 0320 	add.w	r3, r7, #32
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fc31 	bl	8005ad4 <updatePowerup>
					shootSpaceship(&gameState);
 8005272:	f107 0320 	add.w	r3, r7, #32
 8005276:	4618      	mov	r0, r3
 8005278:	f000 feb8 	bl	8005fec <shootSpaceship>
					shootEnemy(&gameState);
 800527c:	f107 0320 	add.w	r3, r7, #32
 8005280:	4618      	mov	r0, r3
 8005282:	f7fd ffc7 	bl	8003214 <shootEnemy>
					updateBullets(&gameState);
 8005286:	f107 0320 	add.w	r3, r7, #32
 800528a:	4618      	mov	r0, r3
 800528c:	f7fc fdeb 	bl	8001e66 <updateBullets>

					detectBulletHit(&gameState);
 8005290:	f107 0320 	add.w	r3, r7, #32
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc fe6a 	bl	8001f6e <detectBulletHit>
					detectCityHit(&gameState);
 800529a:	f107 0320 	add.w	r3, r7, #32
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe f826 	bl	80032f0 <detectCityHit>
					updateNuke(&gameState);
 80052a4:	f107 0320 	add.w	r3, r7, #32
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fb6d 	bl	8005988 <updateNuke>
					checkIfDead(&gameState);
 80052ae:	f107 0320 	add.w	r3, r7, #32
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fe24 	bl	8004f00 <checkIfDead>

					drawScreen(&gameState);
 80052b8:	f107 0320 	add.w	r3, r7, #32
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fdfd 	bl	8004ebc <drawScreen>
					frameLastUpdated=runtime;
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <main+0x398>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while(gameState.activeScreen==1){
 80052ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d0a5      	beq.n	800521e <main+0x286>
				}
		}
			break;
 80052d2:	e05f      	b.n	8005394 <main+0x3fc>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			//Sets up the help screen
			clrscr();
 80052d4:	f7fc fcda 	bl	8001c8c <clrscr>
			drawWindow(0);
 80052d8:	2000      	movs	r0, #0
 80052da:	f000 f9a5 	bl	8005628 <drawWindow>
			drawbackground(); // stars in background
 80052de:	f7fe f90e 	bl	80034fe <drawbackground>
			drawHelpScreen();
 80052e2:	f000 f8ed 	bl	80054c0 <drawHelpScreen>

			//If center is pressed leave the help screen
			while(gameState.activeScreen==2){
 80052e6:	e00c      	b.n	8005302 <main+0x36a>
				checkBossKey(&gameState);
 80052e8:	f107 0320 	add.w	r3, r7, #32
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff fe2b 	bl	8004f48 <checkBossKey>
				if(centerIsPressed()){
 80052f2:	f7fd f911 	bl	8002518 <centerIsPressed>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <main+0x36a>
					gameState.activeScreen=0;//MENU SCREEN
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			while(gameState.activeScreen==2){
 8005302:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005306:	2b02      	cmp	r3, #2
 8005308:	d0ee      	beq.n	80052e8 <main+0x350>
				}
			}
			break;
 800530a:	e043      	b.n	8005394 <main+0x3fc>
 800530c:	080080d4 	.word	0x080080d4
 8005310:	080080dc 	.word	0x080080dc
 8005314:	080080e4 	.word	0x080080e4
 8005318:	08007f48 	.word	0x08007f48
 800531c:	55555556 	.word	0x55555556
 8005320:	88888889 	.word	0x88888889
 8005324:	08007f18 	.word	0x08007f18
 8005328:	08007f20 	.word	0x08007f20
 800532c:	08007f28 	.word	0x08007f28
 8005330:	200001d8 	.word	0x200001d8
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			//Sets up the game over screen
			clrscr();
 8005334:	f7fc fcaa 	bl	8001c8c <clrscr>
			printf("Your highscore is %d", readFromFlash(0x0800F800));
 8005338:	4817      	ldr	r0, [pc, #92]	; (8005398 <main+0x400>)
 800533a:	f7fd fde2 	bl	8002f02 <readFromFlash>
 800533e:	4603      	mov	r3, r0
 8005340:	4619      	mov	r1, r3
 8005342:	4816      	ldr	r0, [pc, #88]	; (800539c <main+0x404>)
 8005344:	f001 fa32 	bl	80067ac <iprintf>

			//If down is pressed reset all variables and return to the menu
			while(gameState.activeScreen==3){
 8005348:	e011      	b.n	800536e <main+0x3d6>
				checkBossKey(&gameState);
 800534a:	f107 0320 	add.w	r3, r7, #32
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fdfa 	bl	8004f48 <checkBossKey>
				if(downIsPressed()){
 8005354:	f7fd f93c 	bl	80025d0 <downIsPressed>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <main+0x3d6>
					initVariables(&gameState);
 800535e:	f107 0320 	add.w	r3, r7, #32
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fcfe 	bl	8004d64 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			while(gameState.activeScreen==3){
 800536e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005372:	2b03      	cmp	r3, #3
 8005374:	d0e9      	beq.n	800534a <main+0x3b2>
				}
			}
			break;
 8005376:	e00d      	b.n	8005394 <main+0x3fc>
		case 4: // BOSS KEY --- Draws the bosskey screen and checks if it should leave it again
			drawBossKey();
 8005378:	f7ff fb2c 	bl	80049d4 <drawBossKey>
			while(1){
				checkBossKey(&gameState);
 800537c:	f107 0320 	add.w	r3, r7, #32
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fde1 	bl	8004f48 <checkBossKey>
				if(gameState.activeScreen !=4){
 8005386:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800538a:	2b04      	cmp	r3, #4
 800538c:	d100      	bne.n	8005390 <main+0x3f8>
				checkBossKey(&gameState);
 800538e:	e7f5      	b.n	800537c <main+0x3e4>
					break;
 8005390:	bf00      	nop
				}
			}
			break;
 8005392:	bf00      	nop
		switch(gameState.activeScreen){
 8005394:	e63f      	b.n	8005016 <main+0x7e>
 8005396:	bf00      	nop
 8005398:	0800f800 	.word	0x0800f800
 800539c:	08007f30 	.word	0x08007f30

080053a0 <drawButton>:
/**
  * @brief  Draws a button to the screen
  * @param  btn: the button to draw
  * @retval None
  */
void drawButton(button_t btn){
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	463b      	mov	r3, r7
 80053a8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fa ff0e 	bl	80001d0 <strlen>
 80053b4:	4603      	mov	r3, r0
 80053b6:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80053b8:	783b      	ldrb	r3, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	461c      	mov	r4, r3
 80053c0:	783b      	ldrb	r3, [r7, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	1d5a      	adds	r2, r3, #5
 80053ca:	787b      	ldrb	r3, [r7, #1]
 80053cc:	3302      	adds	r3, #2
 80053ce:	2100      	movs	r1, #0
 80053d0:	9100      	str	r1, [sp, #0]
 80053d2:	4621      	mov	r1, r4
 80053d4:	f7fc fc7c 	bl	8001cd0 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80053d8:	783b      	ldrb	r3, [r7, #0]
 80053da:	3303      	adds	r3, #3
 80053dc:	787a      	ldrb	r2, [r7, #1]
 80053de:	3201      	adds	r2, #1
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fc62 	bl	8001cac <gotoxy>
	printf(btn.text);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f9de 	bl	80067ac <iprintf>
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <drawBtnAsSelected>:
/**
  * @brief  Draws a button that has been selected to the screen
  * @param  btn: the button to draw
  * @retval None
  */
void drawBtnAsSelected(button_t btn){
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	463b      	mov	r3, r7
 8005400:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fa fee2 	bl	80001d0 <strlen>
 800540c:	4603      	mov	r3, r0
 800540e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8005410:	783b      	ldrb	r3, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	787b      	ldrb	r3, [r7, #1]
 8005416:	461c      	mov	r4, r3
 8005418:	783b      	ldrb	r3, [r7, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	1d5a      	adds	r2, r3, #5
 8005422:	787b      	ldrb	r3, [r7, #1]
 8005424:	3302      	adds	r3, #2
 8005426:	2101      	movs	r1, #1
 8005428:	9100      	str	r1, [sp, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	f7fc fc50 	bl	8001cd0 <drawBox>
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}

08005438 <drawBtnAsDeselected>:
/**
  * @brief  Draw a button that was selected that aren't any more
  * @param  btn: the button to draw
  * @retval None
  */
void drawBtnAsDeselected(button_t btn){
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b087      	sub	sp, #28
 800543c:	af02      	add	r7, sp, #8
 800543e:	463b      	mov	r3, r7
 8005440:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fa fec2 	bl	80001d0 <strlen>
 800544c:	4603      	mov	r3, r0
 800544e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8005450:	783b      	ldrb	r3, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	461c      	mov	r4, r3
 8005458:	783b      	ldrb	r3, [r7, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	1d5a      	adds	r2, r3, #5
 8005462:	787b      	ldrb	r3, [r7, #1]
 8005464:	3302      	adds	r3, #2
 8005466:	2100      	movs	r1, #0
 8005468:	9100      	str	r1, [sp, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	f7fc fc30 	bl	8001cd0 <drawBox>
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}

08005478 <drawMenuScreen>:
/**
  * @brief  Draws the entire main menu
  * @param  btnList: A list of buttons to draw, gameState: the current state of the game
  * @retval None
  */
void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005488:	f7ff ff8a 	bl	80053a0 <drawButton>
	drawButton(btnList[1]);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3308      	adds	r3, #8
 8005490:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005494:	f7ff ff84 	bl	80053a0 <drawButton>
	drawButton(btnList[2]);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3310      	adds	r3, #16
 800549c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054a0:	f7ff ff7e 	bl	80053a0 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054b4:	f7ff ffa0 	bl	80053f8 <drawBtnAsSelected>
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <drawHelpScreen>:
/**
  * @brief  Draws the help screen
  * @param  None
  * @retval None
  */
void drawHelpScreen(){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af04      	add	r7, sp, #16
	gotoxy(70,5);
 80054c6:	2105      	movs	r1, #5
 80054c8:	2046      	movs	r0, #70	; 0x46
 80054ca:	f7fc fbef 	bl	8001cac <gotoxy>
	printf("HELP SCREEN");
 80054ce:	484e      	ldr	r0, [pc, #312]	; (8005608 <drawHelpScreen+0x148>)
 80054d0:	f001 f96c 	bl	80067ac <iprintf>
	uint16_t x = 10;
 80054d4:	230a      	movs	r3, #10
 80054d6:	80fb      	strh	r3, [r7, #6]
	uint16_t y = 10;
 80054d8:	230a      	movs	r3, #10
 80054da:	80bb      	strh	r3, [r7, #4]
	gotoxy(x,y);
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	88ba      	ldrh	r2, [r7, #4]
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fc fbe2 	bl	8001cac <gotoxy>
	printf("Styr din rum skib ved at dreje det venstre potentiometer frem og tilbage");
 80054e8:	4848      	ldr	r0, [pc, #288]	; (800560c <drawHelpScreen+0x14c>)
 80054ea:	f001 f95f 	bl	80067ac <iprintf>
	gotoxy(x+=24, y+=2);
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	3318      	adds	r3, #24
 80054f2:	80fb      	strh	r3, [r7, #6]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	88bb      	ldrh	r3, [r7, #4]
 80054f8:	3302      	adds	r3, #2
 80054fa:	80bb      	strh	r3, [r7, #4]
 80054fc:	88bb      	ldrh	r3, [r7, #4]
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fc fbd3 	bl	8001cac <gotoxy>
	printf("<-----     ----->");
 8005506:	4842      	ldr	r0, [pc, #264]	; (8005610 <drawHelpScreen+0x150>)
 8005508:	f001 f950 	bl	80067ac <iprintf>
	drawMe(x+=8,y);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	3308      	adds	r3, #8
 8005510:	80fb      	strh	r3, [r7, #6]
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	88ba      	ldrh	r2, [r7, #4]
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fe4b 	bl	80041b8 <drawMe>

	gotoxy(x-=32, y+=3);
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	3b20      	subs	r3, #32
 8005526:	80fb      	strh	r3, [r7, #6]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	88bb      	ldrh	r3, [r7, #4]
 800552c:	3303      	adds	r3, #3
 800552e:	80bb      	strh	r3, [r7, #4]
 8005530:	88bb      	ldrh	r3, [r7, #4]
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f7fc fbb9 	bl	8001cac <gotoxy>
	printf("Rumvaeserne vil prove at odelaegge din by. Hver gang de rammer den mister du et liv!");
 800553a:	4836      	ldr	r0, [pc, #216]	; (8005614 <drawHelpScreen+0x154>)
 800553c:	f001 f936 	bl	80067ac <iprintf>
	gotoxy(x, ++y);
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	88bb      	ldrh	r3, [r7, #4]
 8005544:	3301      	adds	r3, #1
 8005546:	80bb      	strh	r3, [r7, #4]
 8005548:	88bb      	ldrh	r3, [r7, #4]
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fc fbad 	bl	8001cac <gotoxy>
	printf("  o o  ");
 8005552:	4831      	ldr	r0, [pc, #196]	; (8005618 <drawHelpScreen+0x158>)
 8005554:	f001 f92a 	bl	80067ac <iprintf>
	gotoxy(x, ++y);
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	88bb      	ldrh	r3, [r7, #4]
 800555c:	3301      	adds	r3, #1
 800555e:	80bb      	strh	r3, [r7, #4]
 8005560:	88bb      	ldrh	r3, [r7, #4]
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fc fba1 	bl	8001cac <gotoxy>
	printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 800556a:	23bb      	movs	r3, #187	; 0xbb
 800556c:	9303      	str	r3, [sp, #12]
 800556e:	23cd      	movs	r3, #205	; 0xcd
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	23cd      	movs	r3, #205	; 0xcd
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	23cd      	movs	r3, #205	; 0xcd
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	23cd      	movs	r3, #205	; 0xcd
 800557c:	22cd      	movs	r2, #205	; 0xcd
 800557e:	21c9      	movs	r1, #201	; 0xc9
 8005580:	4826      	ldr	r0, [pc, #152]	; (800561c <drawHelpScreen+0x15c>)
 8005582:	f001 f913 	bl	80067ac <iprintf>

	gotoxy(x, y+=2);
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	88bb      	ldrh	r3, [r7, #4]
 800558a:	3302      	adds	r3, #2
 800558c:	80bb      	strh	r3, [r7, #4]
 800558e:	88bb      	ldrh	r3, [r7, #4]
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fc fb8a 	bl	8001cac <gotoxy>
	printf("Er du ved at blive overvaeldet, kan du bruge din nuke.");
 8005598:	4821      	ldr	r0, [pc, #132]	; (8005620 <drawHelpScreen+0x160>)
 800559a:	f001 f907 	bl	80067ac <iprintf>
	gotoxy(x,++y);
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	88bb      	ldrh	r3, [r7, #4]
 80055a2:	3301      	adds	r3, #1
 80055a4:	80bb      	strh	r3, [r7, #4]
 80055a6:	88bb      	ldrh	r3, [r7, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fc fb7e 	bl	8001cac <gotoxy>
	printf("Se pa LED'en hvornar den er klar");
 80055b0:	481c      	ldr	r0, [pc, #112]	; (8005624 <drawHelpScreen+0x164>)
 80055b2:	f001 f8fb 	bl	80067ac <iprintf>
	gotoxy(x,++y);
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	88bb      	ldrh	r3, [r7, #4]
 80055ba:	3301      	adds	r3, #1
 80055bc:	80bb      	strh	r3, [r7, #4]
 80055be:	88bb      	ldrh	r3, [r7, #4]
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fc fb72 	bl	8001cac <gotoxy>
	fgcolor(1);
 80055c8:	2001      	movs	r0, #1
 80055ca:	f7fc fb43 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 80055ce:	20db      	movs	r0, #219	; 0xdb
 80055d0:	f001 f904 	bl	80067dc <putchar>
	fgcolor(13);
 80055d4:	200d      	movs	r0, #13
 80055d6:	f7fc fb3d 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 80055da:	20db      	movs	r0, #219	; 0xdb
 80055dc:	f001 f8fe 	bl	80067dc <putchar>
	fgcolor(11);
 80055e0:	200b      	movs	r0, #11
 80055e2:	f7fc fb37 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 80055e6:	20db      	movs	r0, #219	; 0xdb
 80055e8:	f001 f8f8 	bl	80067dc <putchar>
	fgcolor(2);
 80055ec:	2002      	movs	r0, #2
 80055ee:	f7fc fb31 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 80055f2:	20db      	movs	r0, #219	; 0xdb
 80055f4:	f001 f8f2 	bl	80067dc <putchar>
	fgcolor(15);
 80055f8:	200f      	movs	r0, #15
 80055fa:	f7fc fb2b 	bl	8001c54 <fgcolor>
}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	08007f70 	.word	0x08007f70
 800560c:	08007f7c 	.word	0x08007f7c
 8005610:	08007fc8 	.word	0x08007fc8
 8005614:	08007fdc 	.word	0x08007fdc
 8005618:	08008034 	.word	0x08008034
 800561c:	0800803c 	.word	0x0800803c
 8005620:	0800804c 	.word	0x0800804c
 8005624:	08008084 	.word	0x08008084

08005628 <drawWindow>:
/**
  * @brief  Draws the outer bounds
  * @param  isGameWindow: 1 = deletes bottom layer
  * @retval None
  */
void drawWindow(uint8_t isGameWindow){
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	4603      	mov	r3, r0
 8005630:	71fb      	strb	r3, [r7, #7]
	drawBox(1,1,screenWidth, screenHeight,0);
 8005632:	2300      	movs	r3, #0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	232b      	movs	r3, #43	; 0x2b
 8005638:	229c      	movs	r2, #156	; 0x9c
 800563a:	2101      	movs	r1, #1
 800563c:	2001      	movs	r0, #1
 800563e:	f7fc fb47 	bl	8001cd0 <drawBox>
	if(isGameWindow){//bottom line is deleted
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d039      	beq.n	80056bc <drawWindow+0x94>
		gotoxy(1,screenHeight-1);
 8005648:	212a      	movs	r1, #42	; 0x2a
 800564a:	2001      	movs	r0, #1
 800564c:	f7fc fb2e 	bl	8001cac <gotoxy>
		printf(" ");
 8005650:	2020      	movs	r0, #32
 8005652:	f001 f8c3 	bl	80067dc <putchar>
		gotoxy(1,screenHeight-2);
 8005656:	2129      	movs	r1, #41	; 0x29
 8005658:	2001      	movs	r0, #1
 800565a:	f7fc fb27 	bl	8001cac <gotoxy>
		printf(" ");
 800565e:	2020      	movs	r0, #32
 8005660:	f001 f8bc 	bl	80067dc <putchar>
		gotoxy(1,screenHeight-3);
 8005664:	2128      	movs	r1, #40	; 0x28
 8005666:	2001      	movs	r0, #1
 8005668:	f7fc fb20 	bl	8001cac <gotoxy>
		printf(" ");
 800566c:	2020      	movs	r0, #32
 800566e:	f001 f8b5 	bl	80067dc <putchar>
		gotoxy(screenWidth,screenHeight-1);
 8005672:	212a      	movs	r1, #42	; 0x2a
 8005674:	209c      	movs	r0, #156	; 0x9c
 8005676:	f7fc fb19 	bl	8001cac <gotoxy>
		printf(" ");
 800567a:	2020      	movs	r0, #32
 800567c:	f001 f8ae 	bl	80067dc <putchar>
		gotoxy(screenWidth,screenHeight-2);
 8005680:	2129      	movs	r1, #41	; 0x29
 8005682:	209c      	movs	r0, #156	; 0x9c
 8005684:	f7fc fb12 	bl	8001cac <gotoxy>
		printf(" ");
 8005688:	2020      	movs	r0, #32
 800568a:	f001 f8a7 	bl	80067dc <putchar>
		gotoxy(screenWidth,screenHeight-3);
 800568e:	2128      	movs	r1, #40	; 0x28
 8005690:	209c      	movs	r0, #156	; 0x9c
 8005692:	f7fc fb0b 	bl	8001cac <gotoxy>
		printf(" ");
 8005696:	2020      	movs	r0, #32
 8005698:	f001 f8a0 	bl	80067dc <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 800569c:	2301      	movs	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e009      	b.n	80056b6 <drawWindow+0x8e>
			gotoxy(x, screenHeight);
 80056a2:	212b      	movs	r1, #43	; 0x2b
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7fc fb01 	bl	8001cac <gotoxy>
			printf(" ");
 80056aa:	2020      	movs	r0, #32
 80056ac:	f001 f896 	bl	80067dc <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b9c      	cmp	r3, #156	; 0x9c
 80056ba:	ddf2      	ble.n	80056a2 <drawWindow+0x7a>

		}
	}
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <chargeNuke>:
/**
  * @brief  Tests how charged the nuke is
  * @param  gameState: the current state of the game
  * @retval None
  */
void chargeNuke(gameState_t* gameState){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 80056cc:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <chargeNuke+0xc0>)
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	4611      	mov	r1, r2
 80056d6:	8019      	strh	r1, [r3, #0]
 80056d8:	3302      	adds	r3, #2
 80056da:	0c12      	lsrs	r2, r2, #16
 80056dc:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime < 500){
 80056de:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <chargeNuke+0xc4>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80056ee:	d205      	bcs.n	80056fc <chargeNuke+0x38>
		color[0] = 1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 80056fc:	4b22      	ldr	r3, [pc, #136]	; (8005788 <chargeNuke+0xc4>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800570c:	d905      	bls.n	800571a <chargeNuke+0x56>
		color[0] = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8005716:	2301      	movs	r3, #1
 8005718:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <chargeNuke+0xc4>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572a:	d905      	bls.n	8005738 <chargeNuke+0x74>
		color[0] = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8005730:	2301      	movs	r3, #1
 8005732:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <chargeNuke+0xc4>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005748:	4293      	cmp	r3, r2
 800574a:	d912      	bls.n	8005772 <chargeNuke+0xae>
		color[0] = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8005750:	2301      	movs	r3, #1
 8005752:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	73bb      	strb	r3, [r7, #14]
		if(gameState->nuke->readyState == 0) gameState->soundToPlay = 2; //Plays the charge sound if it's the first time.
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	7e5b      	ldrb	r3, [r3, #25]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <chargeNuke+0xa6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		gameState->nuke->readyState = 1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	2201      	movs	r2, #1
 8005770:	765a      	strb	r2, [r3, #25]
	}
	RGBColor(color);
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd fb62 	bl	8002e40 <RGBColor>
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	080080a8 	.word	0x080080a8
 8005788:	200001d8 	.word	0x200001d8

0800578c <detonateNuke>:
/**
  * @brief  Deletes the unexploded nuke, draws the explosion circle and deletes all enemies in a given radius
  * @param  None
  * @retval None
  */
void detonateNuke(gameState_t* gameState){
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	//Resets nuke
	gameState->nuke->isDeployed = 0;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	2200      	movs	r2, #0
 800579a:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	2200      	movs	r2, #0
 80057a2:	765a      	strb	r2, [r3, #25]

	//Deletes the unexploded nuke
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd fe08 	bl	80033c0 <fpToInt>
 80057b0:	4604      	mov	r4, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fd fe01 	bl	80033c0 <fpToInt>
 80057be:	4603      	mov	r3, r0
 80057c0:	0fda      	lsrs	r2, r3, #31
 80057c2:	4413      	add	r3, r2
 80057c4:	105b      	asrs	r3, r3, #1
 80057c6:	4619      	mov	r1, r3
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fc fa6f 	bl	8001cac <gotoxy>
	printf("     ");
 80057ce:	483d      	ldr	r0, [pc, #244]	; (80058c4 <detonateNuke+0x138>)
 80057d0:	f000 ffec 	bl	80067ac <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fd fdf0 	bl	80033c0 <fpToInt>
 80057e0:	4604      	mov	r4, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fd fde9 	bl	80033c0 <fpToInt>
 80057ee:	4603      	mov	r3, r0
 80057f0:	3302      	adds	r3, #2
 80057f2:	0fda      	lsrs	r2, r3, #31
 80057f4:	4413      	add	r3, r2
 80057f6:	105b      	asrs	r3, r3, #1
 80057f8:	4619      	mov	r1, r3
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7fc fa56 	bl	8001cac <gotoxy>
	printf("     ");
 8005800:	4830      	ldr	r0, [pc, #192]	; (80058c4 <detonateNuke+0x138>)
 8005802:	f000 ffd3 	bl	80067ac <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fd fdd7 	bl	80033c0 <fpToInt>
 8005812:	4604      	mov	r4, r0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd fdd0 	bl	80033c0 <fpToInt>
 8005820:	4603      	mov	r3, r0
 8005822:	3304      	adds	r3, #4
 8005824:	0fda      	lsrs	r2, r3, #31
 8005826:	4413      	add	r3, r2
 8005828:	105b      	asrs	r3, r3, #1
 800582a:	4619      	mov	r1, r3
 800582c:	4620      	mov	r0, r4
 800582e:	f7fc fa3d 	bl	8001cac <gotoxy>
	printf("     ");
 8005832:	4824      	ldr	r0, [pc, #144]	; (80058c4 <detonateNuke+0x138>)
 8005834:	f000 ffba 	bl	80067ac <iprintf>


	drawNukeCircle(gameState);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fe fe95 	bl	8004568 <drawNukeCircle>

	gameState->nuke->lastDetonationTime = runtime;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <detonateNuke+0x13c>)
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2020 	strb.w	r2, [r3, #32]

	//Loops over all the enemies and deletes the ones closer than 35 uints
	enemyNode_t* current = gameState->enemyLL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 8005858:	e02c      	b.n	80058b4 <detonateNuke+0x128>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd fe2c 	bl	80034d8 <fpAbs>
 8005880:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 8005882:	4423      	add	r3, r4
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd fe27 	bl	80034d8 <fpAbs>
 800588a:	4603      	mov	r3, r0
 800588c:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8005890:	4618      	mov	r0, r3
 8005892:	f7fd fdb6 	bl	8003402 <fpMultiply>
 8005896:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 8005898:	2023      	movs	r0, #35	; 0x23
 800589a:	f7fd fd7c 	bl	8003396 <intToFp>
 800589e:	4602      	mov	r2, r0
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d203      	bcs.n	80058ae <detonateNuke+0x122>
			deleteEnemyNode(gameState, current);
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff f95d 	bl	8004b68 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1cf      	bne.n	800585a <detonateNuke+0xce>
	}
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd90      	pop	{r4, r7, pc}
 80058c4:	080080ac 	.word	0x080080ac
 80058c8:	200001d8 	.word	0x200001d8

080058cc <shootNuke>:
/**
  * @brief  Checks if the nuke should be deployed and does if so
  * @param  gameState: te current state of the game
  * @retval None
  */
void shootNuke(gameState_t* gameState){
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register of the accelerometer
 80058d4:	2301      	movs	r3, #1
 80058d6:	2200      	movs	r2, #0
 80058d8:	2103      	movs	r1, #3
 80058da:	2098      	movs	r0, #152	; 0x98
 80058dc:	f7fc ffd6 	bl	800288c <I2C_Read>
 80058e0:	4603      	mov	r3, r0
 80058e2:	77fb      	strb	r3, [r7, #31]

	//If the 8'th bit (tap-detection) is on and the nuke is ready and deployed if it isn't. If it has be deployed for a second detonate it
	if(x > 128 && gameState->nuke->readyState){
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d947      	bls.n	800597a <shootNuke+0xae>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	7e5b      	ldrb	r3, [r3, #25]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d042      	beq.n	800597a <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	7e1b      	ldrb	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d132      	bne.n	8005964 <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005912:	f7fd fd40 	bl	8003396 <intToFp>
 8005916:	4603      	mov	r3, r0
 8005918:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	461a      	mov	r2, r3
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005928:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	3308      	adds	r3, #8
 8005932:	f107 0214 	add.w	r2, r7, #20
 8005936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800593a:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	3310      	adds	r3, #16
 8005944:	f107 020c 	add.w	r2, r7, #12
 8005948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800594c:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2201      	movs	r2, #1
 8005956:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a09      	ldr	r2, [pc, #36]	; (8005984 <shootNuke+0xb8>)
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
		}else{
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
		}
	}
}
 8005962:	e00a      	b.n	800597a <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <shootNuke+0xb8>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b64      	cmp	r3, #100	; 0x64
 8005972:	d902      	bls.n	800597a <shootNuke+0xae>
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff09 	bl	800578c <detonateNuke>
}
 800597a:	bf00      	nop
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	200001d8 	.word	0x200001d8

08005988 <updateNuke>:
/**
  * @brief  Update the state of the nuke
  * @param  None
  * @retval None
  */
void updateNuke(gameState_t* gameState){
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fe97 	bl	80056c4 <chargeNuke>
	shootNuke(gameState);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff98 	bl	80058cc <shootNuke>

	//If the nuke is deployed update it's position
	if(gameState->nuke->isDeployed == 1){
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	7e1b      	ldrb	r3, [r3, #24]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d113      	bne.n	80059ce <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	440a      	add	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	440a      	add	r2, r1
 80059cc:	60da      	str	r2, [r3, #12]
	}

	//If it's more than 0.1s since detonation and the circle is not clear, clear it.
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <updateNuke+0x84>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d912      	bls.n	8005a04 <updateNuke+0x7c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <updateNuke+0x7c>
		clearNukeCircle(gameState);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe fee6 	bl	80047bc <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f8:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200001d8 	.word	0x200001d8

08005a10 <spawnPowerup>:
/**
  * @brief  Checks if it should spawn a powerup and does if it should
  * @param  gameState: the current state of the game
  * @retval None
  */
void spawnPowerup(gameState_t* gameState){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <spawnPowerup+0xbc>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005a26:	d34d      	bcc.n	8005ac4 <spawnPowerup+0xb4>
		gameState->powerup.lastUseTime=runtime;
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <spawnPowerup+0xbc>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60
		gameState->powerup.isVisible=1;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		uint8_t randomX;
		while(!xValIsValid(randomX, 5)){
 8005a38:	e00f      	b.n	8005a5a <spawnPowerup+0x4a>
			randomX = (rand() % 147) + 1;
 8005a3a:	f000 ff89 	bl	8006950 <rand>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a23      	ldr	r2, [pc, #140]	; (8005ad0 <spawnPowerup+0xc0>)
 8005a42:	fb82 1203 	smull	r1, r2, r2, r3
 8005a46:	1191      	asrs	r1, r2, #6
 8005a48:	17da      	asrs	r2, r3, #31
 8005a4a:	1a8a      	subs	r2, r1, r2
 8005a4c:	2193      	movs	r1, #147	; 0x93
 8005a4e:	fb01 f202 	mul.w	r2, r1, r2
 8005a52:	1a9a      	subs	r2, r3, r2
 8005a54:	b2d3      	uxtb	r3, r2
 8005a56:	3301      	adds	r3, #1
 8005a58:	77fb      	strb	r3, [r7, #31]
		while(!xValIsValid(randomX, 5)){
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	2105      	movs	r1, #5
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd fac9 	bl	8002ff6 <xValIsValid>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0e7      	beq.n	8005a3a <spawnPowerup+0x2a>
		}

		position_t spawnPos = {intToFp(randomX), intToFp(2)*yScale};
 8005a6a:	7ffb      	ldrb	r3, [r7, #31]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fd fc91 	bl	8003396 <intToFp>
 8005a74:	4603      	mov	r3, r0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	2002      	movs	r0, #2
 8005a7a:	f7fd fc8c 	bl	8003396 <intToFp>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
		vector_t vel = {intToFp(0), 0x00008000*yScale}; //0x00008000 = 0.5
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7fd fc86 	bl	8003396 <intToFp>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a92:	613b      	str	r3, [r7, #16]
		gameState->powerup.position=spawnPos;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3348      	adds	r3, #72	; 0x48
 8005a98:	f107 0214 	add.w	r2, r7, #20
 8005a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005aa0:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3350      	adds	r3, #80	; 0x50
 8005aa8:	f107 0214 	add.w	r2, r7, #20
 8005aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ab0:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3358      	adds	r3, #88	; 0x58
 8005ab8:	f107 020c 	add.w	r2, r7, #12
 8005abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ac0:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200001d8 	.word	0x200001d8
 8005ad0:	6f74ae27 	.word	0x6f74ae27

08005ad4 <updatePowerup>:
/**
  * @brief  Updates the state of the powerup
  * @param  gameState: the current state of the game
  * @retval None
  */
void updatePowerup(gameState_t* gameState){
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80dd 	beq.w	8005ca2 <updatePowerup+0x1ce>
		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54

		//Checks if the powerup is on level with the player
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale >= fpToInt(gameState->spaceship.position.y)/yScale-3){
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd fc59 	bl	80033c0 <fpToInt>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	0fda      	lsrs	r2, r3, #31
 8005b12:	4413      	add	r3, r2
 8005b14:	105b      	asrs	r3, r3, #1
 8005b16:	461c      	mov	r4, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fd fc4f 	bl	80033c0 <fpToInt>
 8005b22:	4603      	mov	r3, r0
 8005b24:	0fda      	lsrs	r2, r3, #31
 8005b26:	4413      	add	r3, r2
 8005b28:	105b      	asrs	r3, r3, #1
 8005b2a:	3b03      	subs	r3, #3
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	f2c0 808a 	blt.w	8005c46 <updatePowerup+0x172>

			//Checks if the player collides with the powerup
			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d125      	bne.n	8005b88 <updatePowerup+0xb4>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fd fc3d 	bl	80033c0 <fpToInt>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f103 0408 	add.w	r4, r3, #8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd fc35 	bl	80033c0 <fpToInt>
 8005b56:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	db12      	blt.n	8005b82 <updatePowerup+0xae>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fc2d 	bl	80033c0 <fpToInt>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f1a3 0408 	sub.w	r4, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fd fc25 	bl	80033c0 <fpToInt>
 8005b76:	4603      	mov	r3, r0
 8005b78:	3304      	adds	r3, #4
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	dc01      	bgt.n	8005b82 <updatePowerup+0xae>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <updatePowerup+0xb0>
 8005b82:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e02a      	b.n	8005bde <updatePowerup+0x10a>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fd fc17 	bl	80033c0 <fpToInt>
 8005b92:	4603      	mov	r3, r0
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	18cc      	adds	r4, r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd fc08 	bl	80033c0 <fpToInt>
 8005bb0:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	db11      	blt.n	8005bda <updatePowerup+0x106>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fc00 	bl	80033c0 <fpToInt>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	1e5c      	subs	r4, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd fbf9 	bl	80033c0 <fpToInt>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	dc01      	bgt.n	8005bda <updatePowerup+0x106>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <updatePowerup+0x108>
 8005bda:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8005bdc:	73fb      	strb	r3, [r7, #15]
			}

			if(powerupIsTaken){
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d030      	beq.n	8005c46 <updatePowerup+0x172>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd fbe9 	bl	80033c0 <fpToInt>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	b2dc      	uxtb	r4, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd fbe2 	bl	80033c0 <fpToInt>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	0fda      	lsrs	r2, r3, #31
 8005c00:	4413      	add	r3, r2
 8005c02:	105b      	asrs	r3, r3, #1
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4619      	mov	r1, r3
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7fe fbcd 	bl	80043a8 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				gameState->soundToPlay = 3;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				if(gameState->spaceship.numberOfParts<3){
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d808      	bhi.n	8005c3a <updatePowerup+0x166>
					gameState->spaceship.numberOfParts++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c38:	e005      	b.n	8005c46 <updatePowerup+0x172>
				} else {
					gameState->score += 100;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c3e:	3364      	adds	r3, #100	; 0x64
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	865a      	strh	r2, [r3, #50]	; 0x32
				}
			}
		}

		//Deletes the powerup if below the screen
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale+1){
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fd fbb8 	bl	80033c0 <fpToInt>
 8005c50:	4603      	mov	r3, r0
 8005c52:	0fda      	lsrs	r2, r3, #31
 8005c54:	4413      	add	r3, r2
 8005c56:	105b      	asrs	r3, r3, #1
 8005c58:	461c      	mov	r4, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd fbae 	bl	80033c0 <fpToInt>
 8005c64:	4603      	mov	r3, r0
 8005c66:	0fda      	lsrs	r2, r3, #31
 8005c68:	4413      	add	r3, r2
 8005c6a:	105b      	asrs	r3, r3, #1
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	da18      	bge.n	8005ca2 <updatePowerup+0x1ce>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fba3 	bl	80033c0 <fpToInt>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	b2dc      	uxtb	r4, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd fb9c 	bl	80033c0 <fpToInt>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	0fda      	lsrs	r2, r3, #31
 8005c8c:	4413      	add	r3, r2
 8005c8e:	105b      	asrs	r3, r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	4619      	mov	r1, r3
 8005c94:	4620      	mov	r0, r4
 8005c96:	f7fe fb87 	bl	80043a8 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
	}
}
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}

08005caa <drawPowerup>:
/**
  * @brief  Draw the powerup to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawPowerup(gameState_t* gameState){
 8005caa:	b590      	push	{r4, r7, lr}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d031      	beq.n	8005d20 <drawPowerup+0x76>
		deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fd fb7d 	bl	80033c0 <fpToInt>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	b2dc      	uxtb	r4, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fd fb76 	bl	80033c0 <fpToInt>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	0fda      	lsrs	r2, r3, #31
 8005cd8:	4413      	add	r3, r2
 8005cda:	105b      	asrs	r3, r3, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7fe fb61 	bl	80043a8 <deletePowerupGraphics>
		drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd fb68 	bl	80033c0 <fpToInt>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	b2dc      	uxtb	r4, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd fb61 	bl	80033c0 <fpToInt>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	0fda      	lsrs	r2, r3, #31
 8005d02:	4413      	add	r3, r2
 8005d04:	105b      	asrs	r3, r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7fe fb2a 	bl	8004364 <drawPowerupGraphics>
		gameState->powerup.position=gameState->powerup.nextPosition;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	3348      	adds	r3, #72	; 0x48
 8005d16:	3250      	adds	r2, #80	; 0x50
 8005d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d1c:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}

08005d28 <playSound>:
/**
  * @brief  Checks if a sound should be played, and does if so
  * @param  gameState: the current state of the game
  * @retval None
  */
void playSound(gameState_t* gameState){
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	//Checks if a sound should play
	if(gameState->soundToPlay == 0) return;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d071      	beq.n	8005e1e <playSound+0xf6>

	//Checks if the sound has changed
	if(gameState->soundToPlay != gameState->lastSoundToPlay){
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d003      	beq.n	8005d52 <playSound+0x2a>
		gameState->soundIndex = 0;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	}

	//Checks if the current tone has completed
	if(runtime - gameState->soundTime > sounds[gameState->soundToPlay][gameState->soundIndex-1].duration){
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <playSound+0x100>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005d62:	4619      	mov	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	482f      	ldr	r0, [pc, #188]	; (8005e2c <playSound+0x104>)
 8005d6e:	0089      	lsls	r1, r1, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4403      	add	r3, r0
 8005d76:	885b      	ldrh	r3, [r3, #2]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d949      	bls.n	8005e10 <playSound+0xe8>
		toggleBuzzer(1);
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f7fd f917 	bl	8002fb0 <toggleBuzzer>
		setFreq(sounds[gameState->soundToPlay][gameState->soundIndex].frequency);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005d88:	4618      	mov	r0, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005d90:	4619      	mov	r1, r3
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <playSound+0x104>)
 8005d94:	0083      	lsls	r3, r0, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fd f8bf 	bl	8002f20 <setFreq>


		//If it reaches {0,0} stop playing any sound
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005da8:	4618      	mov	r0, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005db0:	4619      	mov	r1, r3
 8005db2:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <playSound+0x104>)
 8005db4:	0083      	lsls	r3, r0, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11a      	bne.n	8005df8 <playSound+0xd0>
				sounds[gameState->soundToPlay][gameState->soundIndex].frequency == 0){
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005dc8:	4618      	mov	r0, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <playSound+0x104>)
 8005dd4:	0083      	lsls	r3, r0, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <playSound+0xd0>
			toggleBuzzer(0);
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7fd f8e5 	bl	8002fb0 <toggleBuzzer>
			gameState->soundToPlay = 0;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			gameState->soundIndex = 0;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8005df6:	e00b      	b.n	8005e10 <playSound+0xe8>
		}else{
			gameState->soundIndex++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
			gameState->soundTime = runtime;
 8005e08:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <playSound+0x100>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	gameState->lastSoundToPlay = gameState->soundToPlay;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8005e1c:	e000      	b.n	8005e20 <playSound+0xf8>
	if(gameState->soundToPlay == 0) return;
 8005e1e:	bf00      	nop
}
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200001d8 	.word	0x200001d8
 8005e2c:	080080ec 	.word	0x080080ec

08005e30 <smoothing>:
 */
#include "spaceship.h"

int x = 5;
uint16_t preVals[5] = {0};
uint16_t smoothing(uint16_t val){
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
	for(int i = x-1; i > 0; i--){
 8005e3a:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <smoothing+0xa8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e00b      	b.n	8005e5c <smoothing+0x2c>
		preVals[i] = preVals[i-1];
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	4a24      	ldr	r2, [pc, #144]	; (8005edc <smoothing+0xac>)
 8005e4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005e4e:	4a23      	ldr	r2, [pc, #140]	; (8005edc <smoothing+0xac>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = x-1; i > 0; i--){
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dcf0      	bgt.n	8005e44 <smoothing+0x14>
	}
	preVals[0] = val;
 8005e62:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <smoothing+0xac>)
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	8013      	strh	r3, [r2, #0]
	uint32_t sum = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < x; i++){
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e021      	b.n	8005eb6 <smoothing+0x86>
		sum += preVals[i];
 8005e72:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <smoothing+0xac>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
		gotoxy(10,10+i);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	330a      	adds	r3, #10
 8005e86:	4619      	mov	r1, r3
 8005e88:	200a      	movs	r0, #10
 8005e8a:	f7fb ff0f 	bl	8001cac <gotoxy>
		printf("                        ");
 8005e8e:	4814      	ldr	r0, [pc, #80]	; (8005ee0 <smoothing+0xb0>)
 8005e90:	f000 fc8c 	bl	80067ac <iprintf>
		gotoxy(10,10+i);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	330a      	adds	r3, #10
 8005e98:	4619      	mov	r1, r3
 8005e9a:	200a      	movs	r0, #10
 8005e9c:	f7fb ff06 	bl	8001cac <gotoxy>
		printf("%d", preVals[i]);
 8005ea0:	4a0e      	ldr	r2, [pc, #56]	; (8005edc <smoothing+0xac>)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	480e      	ldr	r0, [pc, #56]	; (8005ee4 <smoothing+0xb4>)
 8005eac:	f000 fc7e 	bl	80067ac <iprintf>
	for(int i = 0; i < x; i++){
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <smoothing+0xa8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dbd8      	blt.n	8005e72 <smoothing+0x42>
	}
	uint16_t res = sum/x;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <smoothing+0xa8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ecc:	817b      	strh	r3, [r7, #10]
	return res;
 8005ece:	897b      	ldrh	r3, [r7, #10]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2000002c 	.word	0x2000002c
 8005edc:	200001c0 	.word	0x200001c0
 8005ee0:	080080b4 	.word	0x080080b4
 8005ee4:	080080d0 	.word	0x080080d0

08005ee8 <updateSpaceship>:
/**
  * @brief  Updates the position of the spaceship
  * @param  gameState: the current state of the game
  * @retval None
  */
void updateSpaceship(gameState_t* gameState){
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	//Reads the potentiometer and calculates the x-value by dividing it by 13 (2048 / 156) (2048 is half of the potentiometer range)
	uint16_t potVal = smoothing(readPotentiometer());
 8005ef0:	f7fc fe9c 	bl	8002c2c <readPotentiometer>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff9a 	bl	8005e30 <smoothing>
 8005efc:	4603      	mov	r3, r0
 8005efe:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(26)) ;
 8005f00:	897b      	ldrh	r3, [r7, #10]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fa47 	bl	8003396 <intToFp>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	201a      	movs	r0, #26
 8005f0c:	f7fd fa43 	bl	8003396 <intToFp>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4619      	mov	r1, r3
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fd fa95 	bl	8003444 <fpDivide>
 8005f1a:	60f8      	str	r0, [r7, #12]

	//Anti jitter
	if(fpAbs(gameState->spaceship.prePosition.x - x) < intToFp(2)){
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fd fad7 	bl	80034d8 <fpAbs>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	f7fd fa32 	bl	8003396 <intToFp>
 8005f32:	4603      	mov	r3, r0
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d354      	bcc.n	8005fe2 <updateSpaceship+0xfa>
		return;
	}

	//Stops the spaceship at the edges
	if(gameState->spaceship.numberOfParts==1){
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d114      	bne.n	8005f6c <updateSpaceship+0x84>
		if(fpToInt(x) <= 2){
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7fd fa3c 	bl	80033c0 <fpToInt>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	dc03      	bgt.n	8005f56 <updateSpaceship+0x6e>
			x = intToFp(3);
 8005f4e:	2003      	movs	r0, #3
 8005f50:	f7fd fa21 	bl	8003396 <intToFp>
 8005f54:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155){
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fd fa32 	bl	80033c0 <fpToInt>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b9a      	cmp	r3, #154	; 0x9a
 8005f60:	dd37      	ble.n	8005fd2 <updateSpaceship+0xea>
			x = intToFp(154);
 8005f62:	209a      	movs	r0, #154	; 0x9a
 8005f64:	f7fd fa17 	bl	8003396 <intToFp>
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	e032      	b.n	8005fd2 <updateSpaceship+0xea>
		}
	}
	else if(gameState->spaceship.numberOfParts==2){
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d114      	bne.n	8005fa0 <updateSpaceship+0xb8>
		if(fpToInt(x) <= 2){
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fd fa22 	bl	80033c0 <fpToInt>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	dc03      	bgt.n	8005f8a <updateSpaceship+0xa2>
			x = intToFp(3);
 8005f82:	2003      	movs	r0, #3
 8005f84:	f7fd fa07 	bl	8003396 <intToFp>
 8005f88:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7fd fa18 	bl	80033c0 <fpToInt>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b93      	cmp	r3, #147	; 0x93
 8005f94:	dd1d      	ble.n	8005fd2 <updateSpaceship+0xea>
			x = intToFp(154-7);
 8005f96:	2093      	movs	r0, #147	; 0x93
 8005f98:	f7fd f9fd 	bl	8003396 <intToFp>
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	e018      	b.n	8005fd2 <updateSpaceship+0xea>
		}
	}
	else if(gameState->spaceship.numberOfParts==3){
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d113      	bne.n	8005fd2 <updateSpaceship+0xea>
		if(fpToInt(x) <= 2+7){
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7fd fa08 	bl	80033c0 <fpToInt>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	dc03      	bgt.n	8005fbe <updateSpaceship+0xd6>
			x = intToFp(3+7);
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	f7fd f9ed 	bl	8003396 <intToFp>
 8005fbc:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7fd f9fe 	bl	80033c0 <fpToInt>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b93      	cmp	r3, #147	; 0x93
 8005fc8:	dd03      	ble.n	8005fd2 <updateSpaceship+0xea>
			x = intToFp(154-7);
 8005fca:	2093      	movs	r0, #147	; 0x93
 8005fcc:	f7fd f9e3 	bl	8003396 <intToFp>
 8005fd0:	60f8      	str	r0, [r7, #12]
		}
	}
	gameState->spaceship.prePosition.x = gameState->spaceship.position.x;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]
	gameState->spaceship.nextPosition.x = x;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]
 8005fe0:	e000      	b.n	8005fe4 <updateSpaceship+0xfc>
		return;
 8005fe2:	bf00      	nop
}
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}
	...

08005fec <shootSpaceship>:
/**
  * @brief  Shoot a bullet if center is pressed
  * @param  gameState: the current state of the game
  * @retval None
  */
void shootSpaceship(gameState_t* gameState){
 8005fec:	b5b0      	push	{r4, r5, r7, lr}
 8005fee:	b09e      	sub	sp, #120	; 0x78
 8005ff0:	af04      	add	r7, sp, #16
 8005ff2:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8005ff4:	f7fc fa90 	bl	8002518 <centerIsPressed>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80d2 	beq.w	80061a4 <shootSpaceship+0x1b8>
		gameState->soundToPlay = 1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

		//Shoots a bullet for each part of the ship
		for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 8006008:	2300      	movs	r3, #0
 800600a:	667b      	str	r3, [r7, #100]	; 0x64
 800600c:	e0c2      	b.n	8006194 <shootSpaceship+0x1a8>
			uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100) + intToFp(gameState->difficulty), 0x00004000) + intToFp(1); //level * 0.25 + 1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006012:	4a66      	ldr	r2, [pc, #408]	; (80061ac <shootSpaceship+0x1c0>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	b29b      	uxth	r3, r3
 800601c:	4618      	mov	r0, r3
 800601e:	f7fd f9ba 	bl	8003396 <intToFp>
 8006022:	4604      	mov	r4, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800602a:	b29b      	uxth	r3, r3
 800602c:	4618      	mov	r0, r3
 800602e:	f7fd f9b2 	bl	8003396 <intToFp>
 8006032:	4603      	mov	r3, r0
 8006034:	4423      	add	r3, r4
 8006036:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd f9e1 	bl	8003402 <fpMultiply>
 8006040:	4604      	mov	r4, r0
 8006042:	2001      	movs	r0, #1
 8006044:	f7fd f9a7 	bl	8003396 <intToFp>
 8006048:	4603      	mov	r3, r0
 800604a:	4423      	add	r3, r4
 800604c:	663b      	str	r3, [r7, #96]	; 0x60
			if(i == 2){
 800604e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006050:	2b02      	cmp	r3, #2
 8006052:	d14b      	bne.n	80060ec <shootSpaceship+0x100>
				vector_t bulletVelocity = {intToFp(0),fpMultiply(0xffff8000 * yScale, levelMultiplier)}; //{0, -0,5 * Multiplier}
 8006054:	2000      	movs	r0, #0
 8006056:	f7fd f99e 	bl	8003396 <intToFp>
 800605a:	4603      	mov	r3, r0
 800605c:	65bb      	str	r3, [r7, #88]	; 0x58
 800605e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006060:	4853      	ldr	r0, [pc, #332]	; (80061b0 <shootSpaceship+0x1c4>)
 8006062:	f7fd f9ce 	bl	8003402 <fpMultiply>
 8006066:	4603      	mov	r3, r0
 8006068:	65fb      	str	r3, [r7, #92]	; 0x5c
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699c      	ldr	r4, [r3, #24]
 800606e:	2007      	movs	r0, #7
 8006070:	f7fd f991 	bl	8003396 <intToFp>
 8006074:	4603      	mov	r3, r0
 8006076:	1ae3      	subs	r3, r4, r3
 8006078:	653b      	str	r3, [r7, #80]	; 0x50
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69dc      	ldr	r4, [r3, #28]
 800607e:	2001      	movs	r0, #1
 8006080:	f7fd f989 	bl	8003396 <intToFp>
 8006084:	4603      	mov	r3, r0
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	1ae3      	subs	r3, r4, r3
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 800608c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	611a      	str	r2, [r3, #16]
 800609c:	615a      	str	r2, [r3, #20]
 800609e:	619a      	str	r2, [r3, #24]
 80060a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80060a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80060b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80060b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80060c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060cc:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 80060d0:	687d      	ldr	r5, [r7, #4]
 80060d2:	466c      	mov	r4, sp
 80060d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80060de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7fe fcd9 	bl	8004a9c <appendBullet>
 80060ea:	e050      	b.n	800618e <shootSpaceship+0x1a2>
			} else {
				vector_t bulletVelocity = {intToFp(0),fpMultiply(0xffff8000 * yScale, levelMultiplier)}; //{0, -0,5 * Multiplier}
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7fd f952 	bl	8003396 <intToFp>
 80060f2:	4603      	mov	r3, r0
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80060f8:	482d      	ldr	r0, [pc, #180]	; (80061b0 <shootSpaceship+0x1c4>)
 80060fa:	f7fd f982 	bl	8003402 <fpMultiply>
 80060fe:	4603      	mov	r3, r0
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699c      	ldr	r4, [r3, #24]
 8006106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006108:	b29b      	uxth	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	00d2      	lsls	r2, r2, #3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	b29b      	uxth	r3, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd f93f 	bl	8003396 <intToFp>
 8006118:	4603      	mov	r3, r0
 800611a:	4423      	add	r3, r4
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69dc      	ldr	r4, [r3, #28]
 8006122:	2001      	movs	r0, #1
 8006124:	f7fd f937 	bl	8003396 <intToFp>
 8006128:	4603      	mov	r3, r0
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	1ae3      	subs	r3, r4, r3
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	605a      	str	r2, [r3, #4]
 800613a:	609a      	str	r2, [r3, #8]
 800613c:	60da      	str	r2, [r3, #12]
 800613e:	611a      	str	r2, [r3, #16]
 8006140:	615a      	str	r2, [r3, #20]
 8006142:	619a      	str	r2, [r3, #24]
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800614c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006150:	e883 0003 	stmia.w	r3, {r0, r1}
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800615c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006160:	e883 0003 	stmia.w	r3, {r0, r1}
 8006164:	f107 0318 	add.w	r3, r7, #24
 8006168:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800616c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006170:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8006174:	687d      	ldr	r5, [r7, #4]
 8006176:	466c      	mov	r4, sp
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800617e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006188:	4628      	mov	r0, r5
 800618a:	f7fe fc87 	bl	8004a9c <appendBullet>
		for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 800618e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006190:	3301      	adds	r3, #1
 8006192:	667b      	str	r3, [r7, #100]	; 0x64
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619a:	461a      	mov	r2, r3
 800619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619e:	4293      	cmp	r3, r2
 80061a0:	f6ff af35 	blt.w	800600e <shootSpaceship+0x22>
			}
		}
	}
}
 80061a4:	bf00      	nop
 80061a6:	3768      	adds	r7, #104	; 0x68
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdb0      	pop	{r4, r5, r7, pc}
 80061ac:	51eb851f 	.word	0x51eb851f
 80061b0:	ffff0000 	.word	0xffff0000

080061b4 <drawSpaceship>:
/**
  * @brief  Draws the spaceship to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawSpaceship(gameState_t* gameState){
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	//Draw attachment points
	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd f8fd 	bl	80033c0 <fpToInt>
 80061c6:	4603      	mov	r3, r0
 80061c8:	b2dc      	uxtb	r4, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fd f8f6 	bl	80033c0 <fpToInt>
 80061d4:	4603      	mov	r3, r0
 80061d6:	0fda      	lsrs	r2, r3, #31
 80061d8:	4413      	add	r3, r2
 80061da:	105b      	asrs	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	4619      	mov	r1, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7fe f89d 	bl	8004320 <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd f8e8 	bl	80033c0 <fpToInt>
 80061f0:	4603      	mov	r3, r0
 80061f2:	b2dc      	uxtb	r4, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fd f8e1 	bl	80033c0 <fpToInt>
 80061fe:	4603      	mov	r3, r0
 8006200:	0fda      	lsrs	r2, r3, #31
 8006202:	4413      	add	r3, r2
 8006204:	105b      	asrs	r3, r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	4620      	mov	r0, r4
 800620c:	f7fe f866 	bl	80042dc <drawAttachmentRods>

	//Draw all the parts
	for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e06e      	b.n	80062f4 <drawSpaceship+0x140>
		if(i == 2){
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d12e      	bne.n	800627a <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd f8cd 	bl	80033c0 <fpToInt>
 8006226:	4603      	mov	r3, r0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	3b07      	subs	r3, #7
 800622c:	b2dc      	uxtb	r4, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd f8c4 	bl	80033c0 <fpToInt>
 8006238:	4603      	mov	r3, r0
 800623a:	0fda      	lsrs	r2, r3, #31
 800623c:	4413      	add	r3, r2
 800623e:	105b      	asrs	r3, r3, #1
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4619      	mov	r1, r3
 8006244:	4620      	mov	r0, r4
 8006246:	f7fe f800 	bl	800424a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	4618      	mov	r0, r3
 8006250:	f7fd f8b6 	bl	80033c0 <fpToInt>
 8006254:	4603      	mov	r3, r0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3b07      	subs	r3, #7
 800625a:	b2dc      	uxtb	r4, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd f8ad 	bl	80033c0 <fpToInt>
 8006266:	4603      	mov	r3, r0
 8006268:	0fda      	lsrs	r2, r3, #31
 800626a:	4413      	add	r3, r2
 800626c:	105b      	asrs	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	4619      	mov	r1, r3
 8006272:	4620      	mov	r0, r4
 8006274:	f7fd ffa0 	bl	80041b8 <drawMe>
 8006278:	e039      	b.n	80062ee <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fd f89e 	bl	80033c0 <fpToInt>
 8006284:	4603      	mov	r3, r0
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	00c9      	lsls	r1, r1, #3
 8006290:	1acb      	subs	r3, r1, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	4413      	add	r3, r2
 8006296:	b2dc      	uxtb	r4, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd f88f 	bl	80033c0 <fpToInt>
 80062a2:	4603      	mov	r3, r0
 80062a4:	0fda      	lsrs	r2, r3, #31
 80062a6:	4413      	add	r3, r2
 80062a8:	105b      	asrs	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7fd ffcb 	bl	800424a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fd f881 	bl	80033c0 <fpToInt>
 80062be:	4603      	mov	r3, r0
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	00c9      	lsls	r1, r1, #3
 80062ca:	1acb      	subs	r3, r1, r3
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	b2dc      	uxtb	r4, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd f872 	bl	80033c0 <fpToInt>
 80062dc:	4603      	mov	r3, r0
 80062de:	0fda      	lsrs	r2, r3, #31
 80062e0:	4413      	add	r3, r2
 80062e2:	105b      	asrs	r3, r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7fd ff65 	bl	80041b8 <drawMe>
	for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4293      	cmp	r3, r2
 8006300:	db89      	blt.n	8006216 <drawSpaceship+0x62>
		}
	}
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	3318      	adds	r3, #24
 8006308:	3220      	adds	r2, #32
 800630a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800630e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bd90      	pop	{r4, r7, pc}

0800631a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800631a:	b480      	push	{r7}
 800631c:	af00      	add	r7, sp, #0
	return 1;
 800631e:	2301      	movs	r3, #1
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <_kill>:

int _kill(int pid, int sig)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006334:	f000 f94e 	bl	80065d4 <__errno>
 8006338:	4603      	mov	r3, r0
 800633a:	2216      	movs	r2, #22
 800633c:	601a      	str	r2, [r3, #0]
	return -1;
 800633e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_exit>:

void _exit (int status)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff ffe7 	bl	800632a <_kill>
	while (1) {}		/* Make sure we hang here */
 800635c:	e7fe      	b.n	800635c <_exit+0x12>

0800635e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e00a      	b.n	8006386 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006370:	f3af 8000 	nop.w
 8006374:	4601      	mov	r1, r0
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	60ba      	str	r2, [r7, #8]
 800637c:	b2ca      	uxtb	r2, r1
 800637e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3301      	adds	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	dbf0      	blt.n	8006370 <_read+0x12>
	}

return len;
 800638e:	687b      	ldr	r3, [r7, #4]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	return -1;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063c0:	605a      	str	r2, [r3, #4]
	return 0;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_isatty>:

int _isatty(int file)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	return 1;
 80063d8:	2301      	movs	r3, #1
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
	return 0;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <_sbrk+0x50>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <_sbrk+0x16>
		heap_end = &end;
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <_sbrk+0x50>)
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <_sbrk+0x54>)
 8006414:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <_sbrk+0x50>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <_sbrk+0x50>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	466a      	mov	r2, sp
 8006426:	4293      	cmp	r3, r2
 8006428:	d907      	bls.n	800643a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800642a:	f000 f8d3 	bl	80065d4 <__errno>
 800642e:	4603      	mov	r3, r0
 8006430:	220c      	movs	r2, #12
 8006432:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006438:	e006      	b.n	8006448 <_sbrk+0x48>
	}

	heap_end += incr;
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <_sbrk+0x50>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	4a03      	ldr	r2, [pc, #12]	; (8006450 <_sbrk+0x50>)
 8006444:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006446:	68fb      	ldr	r3, [r7, #12]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200001cc 	.word	0x200001cc
 8006454:	200001f0 	.word	0x200001f0

08006458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800645c:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <SystemInit+0x84>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <SystemInit+0x84>)
 8006464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800646c:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <SystemInit+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <SystemInit+0x88>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8006478:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <SystemInit+0x88>)
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4918      	ldr	r1, [pc, #96]	; (80064e0 <SystemInit+0x88>)
 800647e:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <SystemInit+0x8c>)
 8006480:	4013      	ands	r3, r2
 8006482:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <SystemInit+0x88>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <SystemInit+0x88>)
 800648a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800648e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006492:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006494:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <SystemInit+0x88>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <SystemInit+0x88>)
 800649a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <SystemInit+0x88>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4a0e      	ldr	r2, [pc, #56]	; (80064e0 <SystemInit+0x88>)
 80064a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80064aa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <SystemInit+0x88>)
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <SystemInit+0x88>)
 80064b2:	f023 030f 	bic.w	r3, r3, #15
 80064b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <SystemInit+0x88>)
 80064ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064bc:	4908      	ldr	r1, [pc, #32]	; (80064e0 <SystemInit+0x88>)
 80064be:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <SystemInit+0x90>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80064c4:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <SystemInit+0x88>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80064ca:	f000 f80f 	bl	80064ec <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80064ce:	4b03      	ldr	r3, [pc, #12]	; (80064dc <SystemInit+0x84>)
 80064d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064d4:	609a      	str	r2, [r3, #8]
#endif  
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	e000ed00 	.word	0xe000ed00
 80064e0:	40021000 	.word	0x40021000
 80064e4:	f87fc00c 	.word	0xf87fc00c
 80064e8:	ff00fccc 	.word	0xff00fccc

080064ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <SetSysClock+0x8c>)
 80064f2:	2212      	movs	r2, #18
 80064f4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80064f6:	4b21      	ldr	r3, [pc, #132]	; (800657c <SetSysClock+0x90>)
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <SetSysClock+0x90>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80064fe:	4b1f      	ldr	r3, [pc, #124]	; (800657c <SetSysClock+0x90>)
 8006500:	4a1e      	ldr	r2, [pc, #120]	; (800657c <SetSysClock+0x90>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8006506:	4b1d      	ldr	r3, [pc, #116]	; (800657c <SetSysClock+0x90>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <SetSysClock+0x90>)
 800650c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006510:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8006512:	4b1a      	ldr	r3, [pc, #104]	; (800657c <SetSysClock+0x90>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <SetSysClock+0x90>)
 8006518:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800651c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800651e:	4b17      	ldr	r3, [pc, #92]	; (800657c <SetSysClock+0x90>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	; (800657c <SetSysClock+0x90>)
 8006524:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8006528:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800652a:	4b14      	ldr	r3, [pc, #80]	; (800657c <SetSysClock+0x90>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a13      	ldr	r2, [pc, #76]	; (800657c <SetSysClock+0x90>)
 8006530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006534:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006536:	bf00      	nop
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <SetSysClock+0x90>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f9      	beq.n	8006538 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <SetSysClock+0x90>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a0c      	ldr	r2, [pc, #48]	; (800657c <SetSysClock+0x90>)
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <SetSysClock+0x90>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a09      	ldr	r2, [pc, #36]	; (800657c <SetSysClock+0x90>)
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800655c:	bf00      	nop
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <SetSysClock+0x90>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b08      	cmp	r3, #8
 8006568:	d1f9      	bne.n	800655e <SetSysClock+0x72>
  {
  }
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40022000 	.word	0x40022000
 800657c:	40021000 	.word	0x40021000

08006580 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006580:	480d      	ldr	r0, [pc, #52]	; (80065b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006582:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006584:	480d      	ldr	r0, [pc, #52]	; (80065bc <LoopForever+0x6>)
  ldr r1, =_edata
 8006586:	490e      	ldr	r1, [pc, #56]	; (80065c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006588:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <LoopForever+0xe>)
  movs r3, #0
 800658a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800658c:	e002      	b.n	8006594 <LoopCopyDataInit>

0800658e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800658e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006592:	3304      	adds	r3, #4

08006594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006598:	d3f9      	bcc.n	800658e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800659a:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800659c:	4c0b      	ldr	r4, [pc, #44]	; (80065cc <LoopForever+0x16>)
  movs r3, #0
 800659e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065a0:	e001      	b.n	80065a6 <LoopFillZerobss>

080065a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065a4:	3204      	adds	r2, #4

080065a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065a8:	d3fb      	bcc.n	80065a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80065aa:	f7ff ff55 	bl	8006458 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80065ae:	f000 f817 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80065b2:	f7fe fcf1 	bl	8004f98 <main>

080065b6 <LoopForever>:

LoopForever:
    b LoopForever
 80065b6:	e7fe      	b.n	80065b6 <LoopForever>
  ldr   r0, =_estack
 80065b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80065bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80065c4:	08008298 	.word	0x08008298
  ldr r2, =_sbss
 80065c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80065cc:	200001ec 	.word	0x200001ec

080065d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80065d0:	e7fe      	b.n	80065d0 <ADC1_2_IRQHandler>
	...

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000030 	.word	0x20000030

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	; (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	; (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	; (8006624 <__libc_init_array+0x44>)
 80065f4:	f001 f9fe 	bl	80079f4 <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	08008290 	.word	0x08008290
 800661c:	08008290 	.word	0x08008290
 8006620:	08008290 	.word	0x08008290
 8006624:	08008294 	.word	0x08008294

08006628 <malloc>:
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <malloc+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f000 b863 	b.w	80066f8 <_malloc_r>
 8006632:	bf00      	nop
 8006634:	20000030 	.word	0x20000030

08006638 <free>:
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <free+0xc>)
 800663a:	4601      	mov	r1, r0
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	f000 b80b 	b.w	8006658 <_free_r>
 8006642:	bf00      	nop
 8006644:	20000030 	.word	0x20000030

08006648 <memset>:
 8006648:	4402      	add	r2, r0
 800664a:	4603      	mov	r3, r0
 800664c:	4293      	cmp	r3, r2
 800664e:	d100      	bne.n	8006652 <memset+0xa>
 8006650:	4770      	bx	lr
 8006652:	f803 1b01 	strb.w	r1, [r3], #1
 8006656:	e7f9      	b.n	800664c <memset+0x4>

08006658 <_free_r>:
 8006658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800665a:	2900      	cmp	r1, #0
 800665c:	d048      	beq.n	80066f0 <_free_r+0x98>
 800665e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006662:	9001      	str	r0, [sp, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f1a1 0404 	sub.w	r4, r1, #4
 800666a:	bfb8      	it	lt
 800666c:	18e4      	addlt	r4, r4, r3
 800666e:	f000 fd9b 	bl	80071a8 <__malloc_lock>
 8006672:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <_free_r+0x9c>)
 8006674:	9801      	ldr	r0, [sp, #4]
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	4615      	mov	r5, r2
 800667a:	b933      	cbnz	r3, 800668a <_free_r+0x32>
 800667c:	6063      	str	r3, [r4, #4]
 800667e:	6014      	str	r4, [r2, #0]
 8006680:	b003      	add	sp, #12
 8006682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006686:	f000 bd95 	b.w	80071b4 <__malloc_unlock>
 800668a:	42a3      	cmp	r3, r4
 800668c:	d90b      	bls.n	80066a6 <_free_r+0x4e>
 800668e:	6821      	ldr	r1, [r4, #0]
 8006690:	1862      	adds	r2, r4, r1
 8006692:	4293      	cmp	r3, r2
 8006694:	bf04      	itt	eq
 8006696:	681a      	ldreq	r2, [r3, #0]
 8006698:	685b      	ldreq	r3, [r3, #4]
 800669a:	6063      	str	r3, [r4, #4]
 800669c:	bf04      	itt	eq
 800669e:	1852      	addeq	r2, r2, r1
 80066a0:	6022      	streq	r2, [r4, #0]
 80066a2:	602c      	str	r4, [r5, #0]
 80066a4:	e7ec      	b.n	8006680 <_free_r+0x28>
 80066a6:	461a      	mov	r2, r3
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b10b      	cbz	r3, 80066b0 <_free_r+0x58>
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d9fa      	bls.n	80066a6 <_free_r+0x4e>
 80066b0:	6811      	ldr	r1, [r2, #0]
 80066b2:	1855      	adds	r5, r2, r1
 80066b4:	42a5      	cmp	r5, r4
 80066b6:	d10b      	bne.n	80066d0 <_free_r+0x78>
 80066b8:	6824      	ldr	r4, [r4, #0]
 80066ba:	4421      	add	r1, r4
 80066bc:	1854      	adds	r4, r2, r1
 80066be:	42a3      	cmp	r3, r4
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	d1dd      	bne.n	8006680 <_free_r+0x28>
 80066c4:	681c      	ldr	r4, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6053      	str	r3, [r2, #4]
 80066ca:	4421      	add	r1, r4
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	e7d7      	b.n	8006680 <_free_r+0x28>
 80066d0:	d902      	bls.n	80066d8 <_free_r+0x80>
 80066d2:	230c      	movs	r3, #12
 80066d4:	6003      	str	r3, [r0, #0]
 80066d6:	e7d3      	b.n	8006680 <_free_r+0x28>
 80066d8:	6825      	ldr	r5, [r4, #0]
 80066da:	1961      	adds	r1, r4, r5
 80066dc:	428b      	cmp	r3, r1
 80066de:	bf04      	itt	eq
 80066e0:	6819      	ldreq	r1, [r3, #0]
 80066e2:	685b      	ldreq	r3, [r3, #4]
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	bf04      	itt	eq
 80066e8:	1949      	addeq	r1, r1, r5
 80066ea:	6021      	streq	r1, [r4, #0]
 80066ec:	6054      	str	r4, [r2, #4]
 80066ee:	e7c7      	b.n	8006680 <_free_r+0x28>
 80066f0:	b003      	add	sp, #12
 80066f2:	bd30      	pop	{r4, r5, pc}
 80066f4:	200001d0 	.word	0x200001d0

080066f8 <_malloc_r>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	1ccd      	adds	r5, r1, #3
 80066fc:	f025 0503 	bic.w	r5, r5, #3
 8006700:	3508      	adds	r5, #8
 8006702:	2d0c      	cmp	r5, #12
 8006704:	bf38      	it	cc
 8006706:	250c      	movcc	r5, #12
 8006708:	2d00      	cmp	r5, #0
 800670a:	4606      	mov	r6, r0
 800670c:	db01      	blt.n	8006712 <_malloc_r+0x1a>
 800670e:	42a9      	cmp	r1, r5
 8006710:	d903      	bls.n	800671a <_malloc_r+0x22>
 8006712:	230c      	movs	r3, #12
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	2000      	movs	r0, #0
 8006718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800671a:	f000 fd45 	bl	80071a8 <__malloc_lock>
 800671e:	4921      	ldr	r1, [pc, #132]	; (80067a4 <_malloc_r+0xac>)
 8006720:	680a      	ldr	r2, [r1, #0]
 8006722:	4614      	mov	r4, r2
 8006724:	b99c      	cbnz	r4, 800674e <_malloc_r+0x56>
 8006726:	4f20      	ldr	r7, [pc, #128]	; (80067a8 <_malloc_r+0xb0>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b923      	cbnz	r3, 8006736 <_malloc_r+0x3e>
 800672c:	4621      	mov	r1, r4
 800672e:	4630      	mov	r0, r6
 8006730:	f000 f94e 	bl	80069d0 <_sbrk_r>
 8006734:	6038      	str	r0, [r7, #0]
 8006736:	4629      	mov	r1, r5
 8006738:	4630      	mov	r0, r6
 800673a:	f000 f949 	bl	80069d0 <_sbrk_r>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d123      	bne.n	800678a <_malloc_r+0x92>
 8006742:	230c      	movs	r3, #12
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	4630      	mov	r0, r6
 8006748:	f000 fd34 	bl	80071b4 <__malloc_unlock>
 800674c:	e7e3      	b.n	8006716 <_malloc_r+0x1e>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	1b5b      	subs	r3, r3, r5
 8006752:	d417      	bmi.n	8006784 <_malloc_r+0x8c>
 8006754:	2b0b      	cmp	r3, #11
 8006756:	d903      	bls.n	8006760 <_malloc_r+0x68>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	441c      	add	r4, r3
 800675c:	6025      	str	r5, [r4, #0]
 800675e:	e004      	b.n	800676a <_malloc_r+0x72>
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	42a2      	cmp	r2, r4
 8006764:	bf0c      	ite	eq
 8006766:	600b      	streq	r3, [r1, #0]
 8006768:	6053      	strne	r3, [r2, #4]
 800676a:	4630      	mov	r0, r6
 800676c:	f000 fd22 	bl	80071b4 <__malloc_unlock>
 8006770:	f104 000b 	add.w	r0, r4, #11
 8006774:	1d23      	adds	r3, r4, #4
 8006776:	f020 0007 	bic.w	r0, r0, #7
 800677a:	1ac2      	subs	r2, r0, r3
 800677c:	d0cc      	beq.n	8006718 <_malloc_r+0x20>
 800677e:	1a1b      	subs	r3, r3, r0
 8006780:	50a3      	str	r3, [r4, r2]
 8006782:	e7c9      	b.n	8006718 <_malloc_r+0x20>
 8006784:	4622      	mov	r2, r4
 8006786:	6864      	ldr	r4, [r4, #4]
 8006788:	e7cc      	b.n	8006724 <_malloc_r+0x2c>
 800678a:	1cc4      	adds	r4, r0, #3
 800678c:	f024 0403 	bic.w	r4, r4, #3
 8006790:	42a0      	cmp	r0, r4
 8006792:	d0e3      	beq.n	800675c <_malloc_r+0x64>
 8006794:	1a21      	subs	r1, r4, r0
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f91a 	bl	80069d0 <_sbrk_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d1dd      	bne.n	800675c <_malloc_r+0x64>
 80067a0:	e7cf      	b.n	8006742 <_malloc_r+0x4a>
 80067a2:	bf00      	nop
 80067a4:	200001d0 	.word	0x200001d0
 80067a8:	200001d4 	.word	0x200001d4

080067ac <iprintf>:
 80067ac:	b40f      	push	{r0, r1, r2, r3}
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <iprintf+0x2c>)
 80067b0:	b513      	push	{r0, r1, r4, lr}
 80067b2:	681c      	ldr	r4, [r3, #0]
 80067b4:	b124      	cbz	r4, 80067c0 <iprintf+0x14>
 80067b6:	69a3      	ldr	r3, [r4, #24]
 80067b8:	b913      	cbnz	r3, 80067c0 <iprintf+0x14>
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fbde 	bl	8006f7c <__sinit>
 80067c0:	ab05      	add	r3, sp, #20
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	68a1      	ldr	r1, [r4, #8]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fd23 	bl	8007214 <_vfiprintf_r>
 80067ce:	b002      	add	sp, #8
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	b004      	add	sp, #16
 80067d6:	4770      	bx	lr
 80067d8:	20000030 	.word	0x20000030

080067dc <putchar>:
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <putchar+0x28>)
 80067de:	b513      	push	{r0, r1, r4, lr}
 80067e0:	681c      	ldr	r4, [r3, #0]
 80067e2:	4601      	mov	r1, r0
 80067e4:	b134      	cbz	r4, 80067f4 <putchar+0x18>
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	b923      	cbnz	r3, 80067f4 <putchar+0x18>
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fbc5 	bl	8006f7c <__sinit>
 80067f2:	9901      	ldr	r1, [sp, #4]
 80067f4:	68a2      	ldr	r2, [r4, #8]
 80067f6:	4620      	mov	r0, r4
 80067f8:	b002      	add	sp, #8
 80067fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067fe:	f000 bfcd 	b.w	800779c <_putc_r>
 8006802:	bf00      	nop
 8006804:	20000030 	.word	0x20000030

08006808 <_puts_r>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	460e      	mov	r6, r1
 800680c:	4605      	mov	r5, r0
 800680e:	b118      	cbz	r0, 8006818 <_puts_r+0x10>
 8006810:	6983      	ldr	r3, [r0, #24]
 8006812:	b90b      	cbnz	r3, 8006818 <_puts_r+0x10>
 8006814:	f000 fbb2 	bl	8006f7c <__sinit>
 8006818:	69ab      	ldr	r3, [r5, #24]
 800681a:	68ac      	ldr	r4, [r5, #8]
 800681c:	b913      	cbnz	r3, 8006824 <_puts_r+0x1c>
 800681e:	4628      	mov	r0, r5
 8006820:	f000 fbac 	bl	8006f7c <__sinit>
 8006824:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <_puts_r+0xd0>)
 8006826:	429c      	cmp	r4, r3
 8006828:	d120      	bne.n	800686c <_puts_r+0x64>
 800682a:	686c      	ldr	r4, [r5, #4]
 800682c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800682e:	07db      	lsls	r3, r3, #31
 8006830:	d405      	bmi.n	800683e <_puts_r+0x36>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d402      	bmi.n	800683e <_puts_r+0x36>
 8006838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683a:	f000 fc4f 	bl	80070dc <__retarget_lock_acquire_recursive>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	0719      	lsls	r1, r3, #28
 8006842:	d51d      	bpl.n	8006880 <_puts_r+0x78>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	b1db      	cbz	r3, 8006880 <_puts_r+0x78>
 8006848:	3e01      	subs	r6, #1
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006850:	3b01      	subs	r3, #1
 8006852:	60a3      	str	r3, [r4, #8]
 8006854:	bb39      	cbnz	r1, 80068a6 <_puts_r+0x9e>
 8006856:	2b00      	cmp	r3, #0
 8006858:	da38      	bge.n	80068cc <_puts_r+0xc4>
 800685a:	4622      	mov	r2, r4
 800685c:	210a      	movs	r1, #10
 800685e:	4628      	mov	r0, r5
 8006860:	f000 f994 	bl	8006b8c <__swbuf_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d011      	beq.n	800688c <_puts_r+0x84>
 8006868:	250a      	movs	r5, #10
 800686a:	e011      	b.n	8006890 <_puts_r+0x88>
 800686c:	4b1b      	ldr	r3, [pc, #108]	; (80068dc <_puts_r+0xd4>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d101      	bne.n	8006876 <_puts_r+0x6e>
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	e7da      	b.n	800682c <_puts_r+0x24>
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <_puts_r+0xd8>)
 8006878:	429c      	cmp	r4, r3
 800687a:	bf08      	it	eq
 800687c:	68ec      	ldreq	r4, [r5, #12]
 800687e:	e7d5      	b.n	800682c <_puts_r+0x24>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9d4 	bl	8006c30 <__swsetup_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0dd      	beq.n	8006848 <_puts_r+0x40>
 800688c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006892:	07da      	lsls	r2, r3, #31
 8006894:	d405      	bmi.n	80068a2 <_puts_r+0x9a>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	059b      	lsls	r3, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_puts_r+0x9a>
 800689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800689e:	f000 fc1e 	bl	80070de <__retarget_lock_release_recursive>
 80068a2:	4628      	mov	r0, r5
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da04      	bge.n	80068b4 <_puts_r+0xac>
 80068aa:	69a2      	ldr	r2, [r4, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	dc06      	bgt.n	80068be <_puts_r+0xb6>
 80068b0:	290a      	cmp	r1, #10
 80068b2:	d004      	beq.n	80068be <_puts_r+0xb6>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	7019      	strb	r1, [r3, #0]
 80068bc:	e7c5      	b.n	800684a <_puts_r+0x42>
 80068be:	4622      	mov	r2, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 f963 	bl	8006b8c <__swbuf_r>
 80068c6:	3001      	adds	r0, #1
 80068c8:	d1bf      	bne.n	800684a <_puts_r+0x42>
 80068ca:	e7df      	b.n	800688c <_puts_r+0x84>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	250a      	movs	r5, #10
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	701d      	strb	r5, [r3, #0]
 80068d6:	e7db      	b.n	8006890 <_puts_r+0x88>
 80068d8:	08008214 	.word	0x08008214
 80068dc:	08008234 	.word	0x08008234
 80068e0:	080081f4 	.word	0x080081f4

080068e4 <puts>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <puts+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f7ff bf8d 	b.w	8006808 <_puts_r>
 80068ee:	bf00      	nop
 80068f0:	20000030 	.word	0x20000030

080068f4 <srand>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <srand+0x44>)
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80068fc:	4604      	mov	r4, r0
 80068fe:	b9b3      	cbnz	r3, 800692e <srand+0x3a>
 8006900:	2018      	movs	r0, #24
 8006902:	f7ff fe91 	bl	8006628 <malloc>
 8006906:	4602      	mov	r2, r0
 8006908:	63a8      	str	r0, [r5, #56]	; 0x38
 800690a:	b920      	cbnz	r0, 8006916 <srand+0x22>
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <srand+0x48>)
 800690e:	480c      	ldr	r0, [pc, #48]	; (8006940 <srand+0x4c>)
 8006910:	2142      	movs	r1, #66	; 0x42
 8006912:	f000 f9fb 	bl	8006d0c <__assert_func>
 8006916:	490b      	ldr	r1, [pc, #44]	; (8006944 <srand+0x50>)
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <srand+0x54>)
 800691a:	e9c0 1300 	strd	r1, r3, [r0]
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <srand+0x58>)
 8006920:	6083      	str	r3, [r0, #8]
 8006922:	230b      	movs	r3, #11
 8006924:	8183      	strh	r3, [r0, #12]
 8006926:	2100      	movs	r1, #0
 8006928:	2001      	movs	r0, #1
 800692a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800692e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006930:	2200      	movs	r2, #0
 8006932:	611c      	str	r4, [r3, #16]
 8006934:	615a      	str	r2, [r3, #20]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20000030 	.word	0x20000030
 800693c:	08008140 	.word	0x08008140
 8006940:	08008157 	.word	0x08008157
 8006944:	abcd330e 	.word	0xabcd330e
 8006948:	e66d1234 	.word	0xe66d1234
 800694c:	0005deec 	.word	0x0005deec

08006950 <rand>:
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <rand+0x60>)
 8006952:	b510      	push	{r4, lr}
 8006954:	681c      	ldr	r4, [r3, #0]
 8006956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006958:	b9b3      	cbnz	r3, 8006988 <rand+0x38>
 800695a:	2018      	movs	r0, #24
 800695c:	f7ff fe64 	bl	8006628 <malloc>
 8006960:	63a0      	str	r0, [r4, #56]	; 0x38
 8006962:	b928      	cbnz	r0, 8006970 <rand+0x20>
 8006964:	4602      	mov	r2, r0
 8006966:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <rand+0x64>)
 8006968:	4813      	ldr	r0, [pc, #76]	; (80069b8 <rand+0x68>)
 800696a:	214e      	movs	r1, #78	; 0x4e
 800696c:	f000 f9ce 	bl	8006d0c <__assert_func>
 8006970:	4a12      	ldr	r2, [pc, #72]	; (80069bc <rand+0x6c>)
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <rand+0x70>)
 8006974:	e9c0 2300 	strd	r2, r3, [r0]
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <rand+0x74>)
 800697a:	6083      	str	r3, [r0, #8]
 800697c:	230b      	movs	r3, #11
 800697e:	8183      	strh	r3, [r0, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	2300      	movs	r3, #0
 8006984:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006988:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800698a:	480f      	ldr	r0, [pc, #60]	; (80069c8 <rand+0x78>)
 800698c:	690a      	ldr	r2, [r1, #16]
 800698e:	694b      	ldr	r3, [r1, #20]
 8006990:	4c0e      	ldr	r4, [pc, #56]	; (80069cc <rand+0x7c>)
 8006992:	4350      	muls	r0, r2
 8006994:	fb04 0003 	mla	r0, r4, r3, r0
 8006998:	fba2 3404 	umull	r3, r4, r2, r4
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	4404      	add	r4, r0
 80069a0:	f144 0000 	adc.w	r0, r4, #0
 80069a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80069a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	bf00      	nop
 80069b0:	20000030 	.word	0x20000030
 80069b4:	08008140 	.word	0x08008140
 80069b8:	08008157 	.word	0x08008157
 80069bc:	abcd330e 	.word	0xabcd330e
 80069c0:	e66d1234 	.word	0xe66d1234
 80069c4:	0005deec 	.word	0x0005deec
 80069c8:	5851f42d 	.word	0x5851f42d
 80069cc:	4c957f2d 	.word	0x4c957f2d

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7ff fd10 	bl	8006400 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	200001e8 	.word	0x200001e8

080069f0 <setbuf>:
 80069f0:	2900      	cmp	r1, #0
 80069f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f6:	bf0c      	ite	eq
 80069f8:	2202      	moveq	r2, #2
 80069fa:	2200      	movne	r2, #0
 80069fc:	f000 b800 	b.w	8006a00 <setvbuf>

08006a00 <setvbuf>:
 8006a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a04:	461d      	mov	r5, r3
 8006a06:	4b5d      	ldr	r3, [pc, #372]	; (8006b7c <setvbuf+0x17c>)
 8006a08:	681f      	ldr	r7, [r3, #0]
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460e      	mov	r6, r1
 8006a0e:	4690      	mov	r8, r2
 8006a10:	b127      	cbz	r7, 8006a1c <setvbuf+0x1c>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	b913      	cbnz	r3, 8006a1c <setvbuf+0x1c>
 8006a16:	4638      	mov	r0, r7
 8006a18:	f000 fab0 	bl	8006f7c <__sinit>
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <setvbuf+0x180>)
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	d167      	bne.n	8006af2 <setvbuf+0xf2>
 8006a22:	687c      	ldr	r4, [r7, #4]
 8006a24:	f1b8 0f02 	cmp.w	r8, #2
 8006a28:	d006      	beq.n	8006a38 <setvbuf+0x38>
 8006a2a:	f1b8 0f01 	cmp.w	r8, #1
 8006a2e:	f200 809f 	bhi.w	8006b70 <setvbuf+0x170>
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	f2c0 809c 	blt.w	8006b70 <setvbuf+0x170>
 8006a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a3a:	07db      	lsls	r3, r3, #31
 8006a3c:	d405      	bmi.n	8006a4a <setvbuf+0x4a>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	0598      	lsls	r0, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <setvbuf+0x4a>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f000 fb49 	bl	80070dc <__retarget_lock_acquire_recursive>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f000 fa01 	bl	8006e54 <_fflush_r>
 8006a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a54:	b141      	cbz	r1, 8006a68 <setvbuf+0x68>
 8006a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d002      	beq.n	8006a64 <setvbuf+0x64>
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f7ff fdfa 	bl	8006658 <_free_r>
 8006a64:	2300      	movs	r3, #0
 8006a66:	6363      	str	r3, [r4, #52]	; 0x34
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61a3      	str	r3, [r4, #24]
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	0619      	lsls	r1, r3, #24
 8006a72:	d503      	bpl.n	8006a7c <setvbuf+0x7c>
 8006a74:	6921      	ldr	r1, [r4, #16]
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff fdee 	bl	8006658 <_free_r>
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	f1b8 0f02 	cmp.w	r8, #2
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	d06c      	beq.n	8006b68 <setvbuf+0x168>
 8006a8e:	ab01      	add	r3, sp, #4
 8006a90:	466a      	mov	r2, sp
 8006a92:	4621      	mov	r1, r4
 8006a94:	4638      	mov	r0, r7
 8006a96:	f000 fb23 	bl	80070e0 <__swhatbuf_r>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	4318      	orrs	r0, r3
 8006a9e:	81a0      	strh	r0, [r4, #12]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	d130      	bne.n	8006b06 <setvbuf+0x106>
 8006aa4:	9d00      	ldr	r5, [sp, #0]
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f7ff fdbe 	bl	8006628 <malloc>
 8006aac:	4606      	mov	r6, r0
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d155      	bne.n	8006b5e <setvbuf+0x15e>
 8006ab2:	f8dd 9000 	ldr.w	r9, [sp]
 8006ab6:	45a9      	cmp	r9, r5
 8006ab8:	d14a      	bne.n	8006b50 <setvbuf+0x150>
 8006aba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006abe:	2200      	movs	r2, #0
 8006ac0:	60a2      	str	r2, [r4, #8]
 8006ac2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad0:	6162      	str	r2, [r4, #20]
 8006ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	07d2      	lsls	r2, r2, #31
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	d405      	bmi.n	8006aea <setvbuf+0xea>
 8006ade:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ae2:	d102      	bne.n	8006aea <setvbuf+0xea>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f000 fafa 	bl	80070de <__retarget_lock_release_recursive>
 8006aea:	4628      	mov	r0, r5
 8006aec:	b003      	add	sp, #12
 8006aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006af2:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <setvbuf+0x184>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	d101      	bne.n	8006afc <setvbuf+0xfc>
 8006af8:	68bc      	ldr	r4, [r7, #8]
 8006afa:	e793      	b.n	8006a24 <setvbuf+0x24>
 8006afc:	4b22      	ldr	r3, [pc, #136]	; (8006b88 <setvbuf+0x188>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	bf08      	it	eq
 8006b02:	68fc      	ldreq	r4, [r7, #12]
 8006b04:	e78e      	b.n	8006a24 <setvbuf+0x24>
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d0cd      	beq.n	8006aa6 <setvbuf+0xa6>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	b913      	cbnz	r3, 8006b14 <setvbuf+0x114>
 8006b0e:	4638      	mov	r0, r7
 8006b10:	f000 fa34 	bl	8006f7c <__sinit>
 8006b14:	f1b8 0f01 	cmp.w	r8, #1
 8006b18:	bf08      	it	eq
 8006b1a:	89a3      	ldrheq	r3, [r4, #12]
 8006b1c:	6026      	str	r6, [r4, #0]
 8006b1e:	bf04      	itt	eq
 8006b20:	f043 0301 	orreq.w	r3, r3, #1
 8006b24:	81a3      	strheq	r3, [r4, #12]
 8006b26:	89a2      	ldrh	r2, [r4, #12]
 8006b28:	f012 0308 	ands.w	r3, r2, #8
 8006b2c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006b30:	d01c      	beq.n	8006b6c <setvbuf+0x16c>
 8006b32:	07d3      	lsls	r3, r2, #31
 8006b34:	bf41      	itttt	mi
 8006b36:	2300      	movmi	r3, #0
 8006b38:	426d      	negmi	r5, r5
 8006b3a:	60a3      	strmi	r3, [r4, #8]
 8006b3c:	61a5      	strmi	r5, [r4, #24]
 8006b3e:	bf58      	it	pl
 8006b40:	60a5      	strpl	r5, [r4, #8]
 8006b42:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006b44:	f015 0501 	ands.w	r5, r5, #1
 8006b48:	d115      	bne.n	8006b76 <setvbuf+0x176>
 8006b4a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006b4e:	e7c8      	b.n	8006ae2 <setvbuf+0xe2>
 8006b50:	4648      	mov	r0, r9
 8006b52:	f7ff fd69 	bl	8006628 <malloc>
 8006b56:	4606      	mov	r6, r0
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d0ae      	beq.n	8006aba <setvbuf+0xba>
 8006b5c:	464d      	mov	r5, r9
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e7d0      	b.n	8006b0a <setvbuf+0x10a>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	e7a8      	b.n	8006abe <setvbuf+0xbe>
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	e7e8      	b.n	8006b42 <setvbuf+0x142>
 8006b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b74:	e7b9      	b.n	8006aea <setvbuf+0xea>
 8006b76:	2500      	movs	r5, #0
 8006b78:	e7b7      	b.n	8006aea <setvbuf+0xea>
 8006b7a:	bf00      	nop
 8006b7c:	20000030 	.word	0x20000030
 8006b80:	08008214 	.word	0x08008214
 8006b84:	08008234 	.word	0x08008234
 8006b88:	080081f4 	.word	0x080081f4

08006b8c <__swbuf_r>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	460e      	mov	r6, r1
 8006b90:	4614      	mov	r4, r2
 8006b92:	4605      	mov	r5, r0
 8006b94:	b118      	cbz	r0, 8006b9e <__swbuf_r+0x12>
 8006b96:	6983      	ldr	r3, [r0, #24]
 8006b98:	b90b      	cbnz	r3, 8006b9e <__swbuf_r+0x12>
 8006b9a:	f000 f9ef 	bl	8006f7c <__sinit>
 8006b9e:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <__swbuf_r+0x98>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d12b      	bne.n	8006bfc <__swbuf_r+0x70>
 8006ba4:	686c      	ldr	r4, [r5, #4]
 8006ba6:	69a3      	ldr	r3, [r4, #24]
 8006ba8:	60a3      	str	r3, [r4, #8]
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	071a      	lsls	r2, r3, #28
 8006bae:	d52f      	bpl.n	8006c10 <__swbuf_r+0x84>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	b36b      	cbz	r3, 8006c10 <__swbuf_r+0x84>
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	1ac0      	subs	r0, r0, r3
 8006bba:	6963      	ldr	r3, [r4, #20]
 8006bbc:	b2f6      	uxtb	r6, r6
 8006bbe:	4283      	cmp	r3, r0
 8006bc0:	4637      	mov	r7, r6
 8006bc2:	dc04      	bgt.n	8006bce <__swbuf_r+0x42>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f944 	bl	8006e54 <_fflush_r>
 8006bcc:	bb30      	cbnz	r0, 8006c1c <__swbuf_r+0x90>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	6022      	str	r2, [r4, #0]
 8006bda:	701e      	strb	r6, [r3, #0]
 8006bdc:	6963      	ldr	r3, [r4, #20]
 8006bde:	3001      	adds	r0, #1
 8006be0:	4283      	cmp	r3, r0
 8006be2:	d004      	beq.n	8006bee <__swbuf_r+0x62>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	07db      	lsls	r3, r3, #31
 8006be8:	d506      	bpl.n	8006bf8 <__swbuf_r+0x6c>
 8006bea:	2e0a      	cmp	r6, #10
 8006bec:	d104      	bne.n	8006bf8 <__swbuf_r+0x6c>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f92f 	bl	8006e54 <_fflush_r>
 8006bf6:	b988      	cbnz	r0, 8006c1c <__swbuf_r+0x90>
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <__swbuf_r+0x9c>)
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	d101      	bne.n	8006c06 <__swbuf_r+0x7a>
 8006c02:	68ac      	ldr	r4, [r5, #8]
 8006c04:	e7cf      	b.n	8006ba6 <__swbuf_r+0x1a>
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <__swbuf_r+0xa0>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	bf08      	it	eq
 8006c0c:	68ec      	ldreq	r4, [r5, #12]
 8006c0e:	e7ca      	b.n	8006ba6 <__swbuf_r+0x1a>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f80c 	bl	8006c30 <__swsetup_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d0cb      	beq.n	8006bb4 <__swbuf_r+0x28>
 8006c1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c20:	e7ea      	b.n	8006bf8 <__swbuf_r+0x6c>
 8006c22:	bf00      	nop
 8006c24:	08008214 	.word	0x08008214
 8006c28:	08008234 	.word	0x08008234
 8006c2c:	080081f4 	.word	0x080081f4

08006c30 <__swsetup_r>:
 8006c30:	4b32      	ldr	r3, [pc, #200]	; (8006cfc <__swsetup_r+0xcc>)
 8006c32:	b570      	push	{r4, r5, r6, lr}
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	4606      	mov	r6, r0
 8006c38:	460c      	mov	r4, r1
 8006c3a:	b125      	cbz	r5, 8006c46 <__swsetup_r+0x16>
 8006c3c:	69ab      	ldr	r3, [r5, #24]
 8006c3e:	b913      	cbnz	r3, 8006c46 <__swsetup_r+0x16>
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f99b 	bl	8006f7c <__sinit>
 8006c46:	4b2e      	ldr	r3, [pc, #184]	; (8006d00 <__swsetup_r+0xd0>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	d10f      	bne.n	8006c6c <__swsetup_r+0x3c>
 8006c4c:	686c      	ldr	r4, [r5, #4]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c54:	0719      	lsls	r1, r3, #28
 8006c56:	d42c      	bmi.n	8006cb2 <__swsetup_r+0x82>
 8006c58:	06dd      	lsls	r5, r3, #27
 8006c5a:	d411      	bmi.n	8006c80 <__swsetup_r+0x50>
 8006c5c:	2309      	movs	r3, #9
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6a:	e03e      	b.n	8006cea <__swsetup_r+0xba>
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <__swsetup_r+0xd4>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d101      	bne.n	8006c76 <__swsetup_r+0x46>
 8006c72:	68ac      	ldr	r4, [r5, #8]
 8006c74:	e7eb      	b.n	8006c4e <__swsetup_r+0x1e>
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <__swsetup_r+0xd8>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	bf08      	it	eq
 8006c7c:	68ec      	ldreq	r4, [r5, #12]
 8006c7e:	e7e6      	b.n	8006c4e <__swsetup_r+0x1e>
 8006c80:	0758      	lsls	r0, r3, #29
 8006c82:	d512      	bpl.n	8006caa <__swsetup_r+0x7a>
 8006c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c86:	b141      	cbz	r1, 8006c9a <__swsetup_r+0x6a>
 8006c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d002      	beq.n	8006c96 <__swsetup_r+0x66>
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7ff fce1 	bl	8006658 <_free_r>
 8006c96:	2300      	movs	r3, #0
 8006c98:	6363      	str	r3, [r4, #52]	; 0x34
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f043 0308 	orr.w	r3, r3, #8
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	b94b      	cbnz	r3, 8006cca <__swsetup_r+0x9a>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d003      	beq.n	8006cca <__swsetup_r+0x9a>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 fa2f 	bl	8007128 <__smakebuf_r>
 8006cca:	89a0      	ldrh	r0, [r4, #12]
 8006ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cd0:	f010 0301 	ands.w	r3, r0, #1
 8006cd4:	d00a      	beq.n	8006cec <__swsetup_r+0xbc>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60a3      	str	r3, [r4, #8]
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	425b      	negs	r3, r3
 8006cde:	61a3      	str	r3, [r4, #24]
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b943      	cbnz	r3, 8006cf6 <__swsetup_r+0xc6>
 8006ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ce8:	d1ba      	bne.n	8006c60 <__swsetup_r+0x30>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	0781      	lsls	r1, r0, #30
 8006cee:	bf58      	it	pl
 8006cf0:	6963      	ldrpl	r3, [r4, #20]
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	e7f4      	b.n	8006ce0 <__swsetup_r+0xb0>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e7f7      	b.n	8006cea <__swsetup_r+0xba>
 8006cfa:	bf00      	nop
 8006cfc:	20000030 	.word	0x20000030
 8006d00:	08008214 	.word	0x08008214
 8006d04:	08008234 	.word	0x08008234
 8006d08:	080081f4 	.word	0x080081f4

08006d0c <__assert_func>:
 8006d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d0e:	4614      	mov	r4, r2
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <__assert_func+0x2c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	68d8      	ldr	r0, [r3, #12]
 8006d1a:	b14c      	cbz	r4, 8006d30 <__assert_func+0x24>
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <__assert_func+0x30>)
 8006d1e:	9100      	str	r1, [sp, #0]
 8006d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d24:	4906      	ldr	r1, [pc, #24]	; (8006d40 <__assert_func+0x34>)
 8006d26:	462b      	mov	r3, r5
 8006d28:	f000 f9a6 	bl	8007078 <fiprintf>
 8006d2c:	f000 fdc1 	bl	80078b2 <abort>
 8006d30:	4b04      	ldr	r3, [pc, #16]	; (8006d44 <__assert_func+0x38>)
 8006d32:	461c      	mov	r4, r3
 8006d34:	e7f3      	b.n	8006d1e <__assert_func+0x12>
 8006d36:	bf00      	nop
 8006d38:	20000030 	.word	0x20000030
 8006d3c:	080081b6 	.word	0x080081b6
 8006d40:	080081c3 	.word	0x080081c3
 8006d44:	080081f1 	.word	0x080081f1

08006d48 <__sflush_r>:
 8006d48:	898a      	ldrh	r2, [r1, #12]
 8006d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4e:	4605      	mov	r5, r0
 8006d50:	0710      	lsls	r0, r2, #28
 8006d52:	460c      	mov	r4, r1
 8006d54:	d458      	bmi.n	8006e08 <__sflush_r+0xc0>
 8006d56:	684b      	ldr	r3, [r1, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc05      	bgt.n	8006d68 <__sflush_r+0x20>
 8006d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dc02      	bgt.n	8006d68 <__sflush_r+0x20>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	d0f9      	beq.n	8006d62 <__sflush_r+0x1a>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d74:	682f      	ldr	r7, [r5, #0]
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	d032      	beq.n	8006de0 <__sflush_r+0x98>
 8006d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	075a      	lsls	r2, r3, #29
 8006d80:	d505      	bpl.n	8006d8e <__sflush_r+0x46>
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	1ac0      	subs	r0, r0, r3
 8006d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d88:	b10b      	cbz	r3, 8006d8e <__sflush_r+0x46>
 8006d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d8c:	1ac0      	subs	r0, r0, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4602      	mov	r2, r0
 8006d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d94:	6a21      	ldr	r1, [r4, #32]
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b0      	blx	r6
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	d106      	bne.n	8006dae <__sflush_r+0x66>
 8006da0:	6829      	ldr	r1, [r5, #0]
 8006da2:	291d      	cmp	r1, #29
 8006da4:	d82c      	bhi.n	8006e00 <__sflush_r+0xb8>
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <__sflush_r+0x108>)
 8006da8:	40ca      	lsrs	r2, r1
 8006daa:	07d6      	lsls	r6, r2, #31
 8006dac:	d528      	bpl.n	8006e00 <__sflush_r+0xb8>
 8006dae:	2200      	movs	r2, #0
 8006db0:	6062      	str	r2, [r4, #4]
 8006db2:	04d9      	lsls	r1, r3, #19
 8006db4:	6922      	ldr	r2, [r4, #16]
 8006db6:	6022      	str	r2, [r4, #0]
 8006db8:	d504      	bpl.n	8006dc4 <__sflush_r+0x7c>
 8006dba:	1c42      	adds	r2, r0, #1
 8006dbc:	d101      	bne.n	8006dc2 <__sflush_r+0x7a>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	b903      	cbnz	r3, 8006dc4 <__sflush_r+0x7c>
 8006dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8006dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dc6:	602f      	str	r7, [r5, #0]
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	d0ca      	beq.n	8006d62 <__sflush_r+0x1a>
 8006dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <__sflush_r+0x92>
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f7ff fc3f 	bl	8006658 <_free_r>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dde:	e7c1      	b.n	8006d64 <__sflush_r+0x1c>
 8006de0:	6a21      	ldr	r1, [r4, #32]
 8006de2:	2301      	movs	r3, #1
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b0      	blx	r6
 8006de8:	1c41      	adds	r1, r0, #1
 8006dea:	d1c7      	bne.n	8006d7c <__sflush_r+0x34>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0c4      	beq.n	8006d7c <__sflush_r+0x34>
 8006df2:	2b1d      	cmp	r3, #29
 8006df4:	d001      	beq.n	8006dfa <__sflush_r+0xb2>
 8006df6:	2b16      	cmp	r3, #22
 8006df8:	d101      	bne.n	8006dfe <__sflush_r+0xb6>
 8006dfa:	602f      	str	r7, [r5, #0]
 8006dfc:	e7b1      	b.n	8006d62 <__sflush_r+0x1a>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	e7ad      	b.n	8006d64 <__sflush_r+0x1c>
 8006e08:	690f      	ldr	r7, [r1, #16]
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	d0a9      	beq.n	8006d62 <__sflush_r+0x1a>
 8006e0e:	0793      	lsls	r3, r2, #30
 8006e10:	680e      	ldr	r6, [r1, #0]
 8006e12:	bf08      	it	eq
 8006e14:	694b      	ldreq	r3, [r1, #20]
 8006e16:	600f      	str	r7, [r1, #0]
 8006e18:	bf18      	it	ne
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	eba6 0807 	sub.w	r8, r6, r7
 8006e20:	608b      	str	r3, [r1, #8]
 8006e22:	f1b8 0f00 	cmp.w	r8, #0
 8006e26:	dd9c      	ble.n	8006d62 <__sflush_r+0x1a>
 8006e28:	6a21      	ldr	r1, [r4, #32]
 8006e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	463a      	mov	r2, r7
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b0      	blx	r6
 8006e34:	2800      	cmp	r0, #0
 8006e36:	dc06      	bgt.n	8006e46 <__sflush_r+0xfe>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e44:	e78e      	b.n	8006d64 <__sflush_r+0x1c>
 8006e46:	4407      	add	r7, r0
 8006e48:	eba8 0800 	sub.w	r8, r8, r0
 8006e4c:	e7e9      	b.n	8006e22 <__sflush_r+0xda>
 8006e4e:	bf00      	nop
 8006e50:	20400001 	.word	0x20400001

08006e54 <_fflush_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	690b      	ldr	r3, [r1, #16]
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	b913      	cbnz	r3, 8006e64 <_fflush_r+0x10>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	b118      	cbz	r0, 8006e6e <_fflush_r+0x1a>
 8006e66:	6983      	ldr	r3, [r0, #24]
 8006e68:	b90b      	cbnz	r3, 8006e6e <_fflush_r+0x1a>
 8006e6a:	f000 f887 	bl	8006f7c <__sinit>
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <_fflush_r+0x6c>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	d11b      	bne.n	8006eac <_fflush_r+0x58>
 8006e74:	686c      	ldr	r4, [r5, #4]
 8006e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0ef      	beq.n	8006e5e <_fflush_r+0xa>
 8006e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e80:	07d0      	lsls	r0, r2, #31
 8006e82:	d404      	bmi.n	8006e8e <_fflush_r+0x3a>
 8006e84:	0599      	lsls	r1, r3, #22
 8006e86:	d402      	bmi.n	8006e8e <_fflush_r+0x3a>
 8006e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8a:	f000 f927 	bl	80070dc <__retarget_lock_acquire_recursive>
 8006e8e:	4628      	mov	r0, r5
 8006e90:	4621      	mov	r1, r4
 8006e92:	f7ff ff59 	bl	8006d48 <__sflush_r>
 8006e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e98:	07da      	lsls	r2, r3, #31
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	d4e0      	bmi.n	8006e60 <_fflush_r+0xc>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	059b      	lsls	r3, r3, #22
 8006ea2:	d4dd      	bmi.n	8006e60 <_fflush_r+0xc>
 8006ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea6:	f000 f91a 	bl	80070de <__retarget_lock_release_recursive>
 8006eaa:	e7d9      	b.n	8006e60 <_fflush_r+0xc>
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <_fflush_r+0x70>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d101      	bne.n	8006eb6 <_fflush_r+0x62>
 8006eb2:	68ac      	ldr	r4, [r5, #8]
 8006eb4:	e7df      	b.n	8006e76 <_fflush_r+0x22>
 8006eb6:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <_fflush_r+0x74>)
 8006eb8:	429c      	cmp	r4, r3
 8006eba:	bf08      	it	eq
 8006ebc:	68ec      	ldreq	r4, [r5, #12]
 8006ebe:	e7da      	b.n	8006e76 <_fflush_r+0x22>
 8006ec0:	08008214 	.word	0x08008214
 8006ec4:	08008234 	.word	0x08008234
 8006ec8:	080081f4 	.word	0x080081f4

08006ecc <std>:
 8006ecc:	2300      	movs	r3, #0
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eda:	6083      	str	r3, [r0, #8]
 8006edc:	8181      	strh	r1, [r0, #12]
 8006ede:	6643      	str	r3, [r0, #100]	; 0x64
 8006ee0:	81c2      	strh	r2, [r0, #14]
 8006ee2:	6183      	str	r3, [r0, #24]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	305c      	adds	r0, #92	; 0x5c
 8006eea:	f7ff fbad 	bl	8006648 <memset>
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <std+0x38>)
 8006ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <std+0x3c>)
 8006ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <std+0x40>)
 8006ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <std+0x44>)
 8006efc:	6224      	str	r4, [r4, #32]
 8006efe:	6323      	str	r3, [r4, #48]	; 0x30
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	0800782d 	.word	0x0800782d
 8006f08:	0800784f 	.word	0x0800784f
 8006f0c:	08007887 	.word	0x08007887
 8006f10:	080078ab 	.word	0x080078ab

08006f14 <_cleanup_r>:
 8006f14:	4901      	ldr	r1, [pc, #4]	; (8006f1c <_cleanup_r+0x8>)
 8006f16:	f000 b8c1 	b.w	800709c <_fwalk_reent>
 8006f1a:	bf00      	nop
 8006f1c:	08006e55 	.word	0x08006e55

08006f20 <__sfmoreglue>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	1e4a      	subs	r2, r1, #1
 8006f24:	2568      	movs	r5, #104	; 0x68
 8006f26:	4355      	muls	r5, r2
 8006f28:	460e      	mov	r6, r1
 8006f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f2e:	f7ff fbe3 	bl	80066f8 <_malloc_r>
 8006f32:	4604      	mov	r4, r0
 8006f34:	b140      	cbz	r0, 8006f48 <__sfmoreglue+0x28>
 8006f36:	2100      	movs	r1, #0
 8006f38:	e9c0 1600 	strd	r1, r6, [r0]
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	60a0      	str	r0, [r4, #8]
 8006f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f44:	f7ff fb80 	bl	8006648 <memset>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}

08006f4c <__sfp_lock_acquire>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	; (8006f54 <__sfp_lock_acquire+0x8>)
 8006f4e:	f000 b8c5 	b.w	80070dc <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	200001e4 	.word	0x200001e4

08006f58 <__sfp_lock_release>:
 8006f58:	4801      	ldr	r0, [pc, #4]	; (8006f60 <__sfp_lock_release+0x8>)
 8006f5a:	f000 b8c0 	b.w	80070de <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	200001e4 	.word	0x200001e4

08006f64 <__sinit_lock_acquire>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__sinit_lock_acquire+0x8>)
 8006f66:	f000 b8b9 	b.w	80070dc <__retarget_lock_acquire_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	200001df 	.word	0x200001df

08006f70 <__sinit_lock_release>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__sinit_lock_release+0x8>)
 8006f72:	f000 b8b4 	b.w	80070de <__retarget_lock_release_recursive>
 8006f76:	bf00      	nop
 8006f78:	200001df 	.word	0x200001df

08006f7c <__sinit>:
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	4604      	mov	r4, r0
 8006f80:	f7ff fff0 	bl	8006f64 <__sinit_lock_acquire>
 8006f84:	69a3      	ldr	r3, [r4, #24]
 8006f86:	b11b      	cbz	r3, 8006f90 <__sinit+0x14>
 8006f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8c:	f7ff bff0 	b.w	8006f70 <__sinit_lock_release>
 8006f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f94:	6523      	str	r3, [r4, #80]	; 0x50
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <__sinit+0x68>)
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <__sinit+0x6c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	bf04      	itt	eq
 8006fa2:	2301      	moveq	r3, #1
 8006fa4:	61a3      	streq	r3, [r4, #24]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f820 	bl	8006fec <__sfp>
 8006fac:	6060      	str	r0, [r4, #4]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f81c 	bl	8006fec <__sfp>
 8006fb4:	60a0      	str	r0, [r4, #8]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 f818 	bl	8006fec <__sfp>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	60e0      	str	r0, [r4, #12]
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	6860      	ldr	r0, [r4, #4]
 8006fc4:	f7ff ff82 	bl	8006ecc <std>
 8006fc8:	68a0      	ldr	r0, [r4, #8]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	2109      	movs	r1, #9
 8006fce:	f7ff ff7d 	bl	8006ecc <std>
 8006fd2:	68e0      	ldr	r0, [r4, #12]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	2112      	movs	r1, #18
 8006fd8:	f7ff ff78 	bl	8006ecc <std>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	61a3      	str	r3, [r4, #24]
 8006fe0:	e7d2      	b.n	8006f88 <__sinit+0xc>
 8006fe2:	bf00      	nop
 8006fe4:	0800813c 	.word	0x0800813c
 8006fe8:	08006f15 	.word	0x08006f15

08006fec <__sfp>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	4607      	mov	r7, r0
 8006ff0:	f7ff ffac 	bl	8006f4c <__sfp_lock_acquire>
 8006ff4:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <__sfp+0x84>)
 8006ff6:	681e      	ldr	r6, [r3, #0]
 8006ff8:	69b3      	ldr	r3, [r6, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <__sfp+0x16>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff ffbd 	bl	8006f7c <__sinit>
 8007002:	3648      	adds	r6, #72	; 0x48
 8007004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007008:	3b01      	subs	r3, #1
 800700a:	d503      	bpl.n	8007014 <__sfp+0x28>
 800700c:	6833      	ldr	r3, [r6, #0]
 800700e:	b30b      	cbz	r3, 8007054 <__sfp+0x68>
 8007010:	6836      	ldr	r6, [r6, #0]
 8007012:	e7f7      	b.n	8007004 <__sfp+0x18>
 8007014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007018:	b9d5      	cbnz	r5, 8007050 <__sfp+0x64>
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <__sfp+0x88>)
 800701c:	60e3      	str	r3, [r4, #12]
 800701e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007022:	6665      	str	r5, [r4, #100]	; 0x64
 8007024:	f000 f859 	bl	80070da <__retarget_lock_init_recursive>
 8007028:	f7ff ff96 	bl	8006f58 <__sfp_lock_release>
 800702c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007034:	6025      	str	r5, [r4, #0]
 8007036:	61a5      	str	r5, [r4, #24]
 8007038:	2208      	movs	r2, #8
 800703a:	4629      	mov	r1, r5
 800703c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007040:	f7ff fb02 	bl	8006648 <memset>
 8007044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800704c:	4620      	mov	r0, r4
 800704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007050:	3468      	adds	r4, #104	; 0x68
 8007052:	e7d9      	b.n	8007008 <__sfp+0x1c>
 8007054:	2104      	movs	r1, #4
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ff62 	bl	8006f20 <__sfmoreglue>
 800705c:	4604      	mov	r4, r0
 800705e:	6030      	str	r0, [r6, #0]
 8007060:	2800      	cmp	r0, #0
 8007062:	d1d5      	bne.n	8007010 <__sfp+0x24>
 8007064:	f7ff ff78 	bl	8006f58 <__sfp_lock_release>
 8007068:	230c      	movs	r3, #12
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	e7ee      	b.n	800704c <__sfp+0x60>
 800706e:	bf00      	nop
 8007070:	0800813c 	.word	0x0800813c
 8007074:	ffff0001 	.word	0xffff0001

08007078 <fiprintf>:
 8007078:	b40e      	push	{r1, r2, r3}
 800707a:	b503      	push	{r0, r1, lr}
 800707c:	4601      	mov	r1, r0
 800707e:	ab03      	add	r3, sp, #12
 8007080:	4805      	ldr	r0, [pc, #20]	; (8007098 <fiprintf+0x20>)
 8007082:	f853 2b04 	ldr.w	r2, [r3], #4
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	f000 f8c3 	bl	8007214 <_vfiprintf_r>
 800708e:	b002      	add	sp, #8
 8007090:	f85d eb04 	ldr.w	lr, [sp], #4
 8007094:	b003      	add	sp, #12
 8007096:	4770      	bx	lr
 8007098:	20000030 	.word	0x20000030

0800709c <_fwalk_reent>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4606      	mov	r6, r0
 80070a2:	4688      	mov	r8, r1
 80070a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070a8:	2700      	movs	r7, #0
 80070aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ae:	f1b9 0901 	subs.w	r9, r9, #1
 80070b2:	d505      	bpl.n	80070c0 <_fwalk_reent+0x24>
 80070b4:	6824      	ldr	r4, [r4, #0]
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d1f7      	bne.n	80070aa <_fwalk_reent+0xe>
 80070ba:	4638      	mov	r0, r7
 80070bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c0:	89ab      	ldrh	r3, [r5, #12]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d907      	bls.n	80070d6 <_fwalk_reent+0x3a>
 80070c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ca:	3301      	adds	r3, #1
 80070cc:	d003      	beq.n	80070d6 <_fwalk_reent+0x3a>
 80070ce:	4629      	mov	r1, r5
 80070d0:	4630      	mov	r0, r6
 80070d2:	47c0      	blx	r8
 80070d4:	4307      	orrs	r7, r0
 80070d6:	3568      	adds	r5, #104	; 0x68
 80070d8:	e7e9      	b.n	80070ae <_fwalk_reent+0x12>

080070da <__retarget_lock_init_recursive>:
 80070da:	4770      	bx	lr

080070dc <__retarget_lock_acquire_recursive>:
 80070dc:	4770      	bx	lr

080070de <__retarget_lock_release_recursive>:
 80070de:	4770      	bx	lr

080070e0 <__swhatbuf_r>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	460e      	mov	r6, r1
 80070e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	b096      	sub	sp, #88	; 0x58
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
 80070f0:	da07      	bge.n	8007102 <__swhatbuf_r+0x22>
 80070f2:	2300      	movs	r3, #0
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	89b3      	ldrh	r3, [r6, #12]
 80070f8:	061a      	lsls	r2, r3, #24
 80070fa:	d410      	bmi.n	800711e <__swhatbuf_r+0x3e>
 80070fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007100:	e00e      	b.n	8007120 <__swhatbuf_r+0x40>
 8007102:	466a      	mov	r2, sp
 8007104:	f000 fbec 	bl	80078e0 <_fstat_r>
 8007108:	2800      	cmp	r0, #0
 800710a:	dbf2      	blt.n	80070f2 <__swhatbuf_r+0x12>
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007116:	425a      	negs	r2, r3
 8007118:	415a      	adcs	r2, r3
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	e7ee      	b.n	80070fc <__swhatbuf_r+0x1c>
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	2000      	movs	r0, #0
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	b016      	add	sp, #88	; 0x58
 8007126:	bd70      	pop	{r4, r5, r6, pc}

08007128 <__smakebuf_r>:
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800712c:	079d      	lsls	r5, r3, #30
 800712e:	4606      	mov	r6, r0
 8007130:	460c      	mov	r4, r1
 8007132:	d507      	bpl.n	8007144 <__smakebuf_r+0x1c>
 8007134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	2301      	movs	r3, #1
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	b002      	add	sp, #8
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	ab01      	add	r3, sp, #4
 8007146:	466a      	mov	r2, sp
 8007148:	f7ff ffca 	bl	80070e0 <__swhatbuf_r>
 800714c:	9900      	ldr	r1, [sp, #0]
 800714e:	4605      	mov	r5, r0
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff fad1 	bl	80066f8 <_malloc_r>
 8007156:	b948      	cbnz	r0, 800716c <__smakebuf_r+0x44>
 8007158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715c:	059a      	lsls	r2, r3, #22
 800715e:	d4ef      	bmi.n	8007140 <__smakebuf_r+0x18>
 8007160:	f023 0303 	bic.w	r3, r3, #3
 8007164:	f043 0302 	orr.w	r3, r3, #2
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	e7e3      	b.n	8007134 <__smakebuf_r+0xc>
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <__smakebuf_r+0x7c>)
 800716e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	6020      	str	r0, [r4, #0]
 8007174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	9b00      	ldr	r3, [sp, #0]
 800717c:	6163      	str	r3, [r4, #20]
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	6120      	str	r0, [r4, #16]
 8007182:	b15b      	cbz	r3, 800719c <__smakebuf_r+0x74>
 8007184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007188:	4630      	mov	r0, r6
 800718a:	f000 fbbb 	bl	8007904 <_isatty_r>
 800718e:	b128      	cbz	r0, 800719c <__smakebuf_r+0x74>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	89a0      	ldrh	r0, [r4, #12]
 800719e:	4305      	orrs	r5, r0
 80071a0:	81a5      	strh	r5, [r4, #12]
 80071a2:	e7cd      	b.n	8007140 <__smakebuf_r+0x18>
 80071a4:	08006f15 	.word	0x08006f15

080071a8 <__malloc_lock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_lock+0x8>)
 80071aa:	f7ff bf97 	b.w	80070dc <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	200001e0 	.word	0x200001e0

080071b4 <__malloc_unlock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__malloc_unlock+0x8>)
 80071b6:	f7ff bf92 	b.w	80070de <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	200001e0 	.word	0x200001e0

080071c0 <__sfputc_r>:
 80071c0:	6893      	ldr	r3, [r2, #8]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	b410      	push	{r4}
 80071c8:	6093      	str	r3, [r2, #8]
 80071ca:	da08      	bge.n	80071de <__sfputc_r+0x1e>
 80071cc:	6994      	ldr	r4, [r2, #24]
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	db01      	blt.n	80071d6 <__sfputc_r+0x16>
 80071d2:	290a      	cmp	r1, #10
 80071d4:	d103      	bne.n	80071de <__sfputc_r+0x1e>
 80071d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071da:	f7ff bcd7 	b.w	8006b8c <__swbuf_r>
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	1c58      	adds	r0, r3, #1
 80071e2:	6010      	str	r0, [r2, #0]
 80071e4:	7019      	strb	r1, [r3, #0]
 80071e6:	4608      	mov	r0, r1
 80071e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <__sfputs_r>:
 80071ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	18d5      	adds	r5, r2, r3
 80071f8:	42ac      	cmp	r4, r5
 80071fa:	d101      	bne.n	8007200 <__sfputs_r+0x12>
 80071fc:	2000      	movs	r0, #0
 80071fe:	e007      	b.n	8007210 <__sfputs_r+0x22>
 8007200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007204:	463a      	mov	r2, r7
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ffda 	bl	80071c0 <__sfputc_r>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d1f3      	bne.n	80071f8 <__sfputs_r+0xa>
 8007210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007214 <_vfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	460d      	mov	r5, r1
 800721a:	b09d      	sub	sp, #116	; 0x74
 800721c:	4614      	mov	r4, r2
 800721e:	4698      	mov	r8, r3
 8007220:	4606      	mov	r6, r0
 8007222:	b118      	cbz	r0, 800722c <_vfiprintf_r+0x18>
 8007224:	6983      	ldr	r3, [r0, #24]
 8007226:	b90b      	cbnz	r3, 800722c <_vfiprintf_r+0x18>
 8007228:	f7ff fea8 	bl	8006f7c <__sinit>
 800722c:	4b89      	ldr	r3, [pc, #548]	; (8007454 <_vfiprintf_r+0x240>)
 800722e:	429d      	cmp	r5, r3
 8007230:	d11b      	bne.n	800726a <_vfiprintf_r+0x56>
 8007232:	6875      	ldr	r5, [r6, #4]
 8007234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d405      	bmi.n	8007246 <_vfiprintf_r+0x32>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d402      	bmi.n	8007246 <_vfiprintf_r+0x32>
 8007240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007242:	f7ff ff4b 	bl	80070dc <__retarget_lock_acquire_recursive>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	071b      	lsls	r3, r3, #28
 800724a:	d501      	bpl.n	8007250 <_vfiprintf_r+0x3c>
 800724c:	692b      	ldr	r3, [r5, #16]
 800724e:	b9eb      	cbnz	r3, 800728c <_vfiprintf_r+0x78>
 8007250:	4629      	mov	r1, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff fcec 	bl	8006c30 <__swsetup_r>
 8007258:	b1c0      	cbz	r0, 800728c <_vfiprintf_r+0x78>
 800725a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725c:	07dc      	lsls	r4, r3, #31
 800725e:	d50e      	bpl.n	800727e <_vfiprintf_r+0x6a>
 8007260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007264:	b01d      	add	sp, #116	; 0x74
 8007266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	4b7b      	ldr	r3, [pc, #492]	; (8007458 <_vfiprintf_r+0x244>)
 800726c:	429d      	cmp	r5, r3
 800726e:	d101      	bne.n	8007274 <_vfiprintf_r+0x60>
 8007270:	68b5      	ldr	r5, [r6, #8]
 8007272:	e7df      	b.n	8007234 <_vfiprintf_r+0x20>
 8007274:	4b79      	ldr	r3, [pc, #484]	; (800745c <_vfiprintf_r+0x248>)
 8007276:	429d      	cmp	r5, r3
 8007278:	bf08      	it	eq
 800727a:	68f5      	ldreq	r5, [r6, #12]
 800727c:	e7da      	b.n	8007234 <_vfiprintf_r+0x20>
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	0598      	lsls	r0, r3, #22
 8007282:	d4ed      	bmi.n	8007260 <_vfiprintf_r+0x4c>
 8007284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007286:	f7ff ff2a 	bl	80070de <__retarget_lock_release_recursive>
 800728a:	e7e9      	b.n	8007260 <_vfiprintf_r+0x4c>
 800728c:	2300      	movs	r3, #0
 800728e:	9309      	str	r3, [sp, #36]	; 0x24
 8007290:	2320      	movs	r3, #32
 8007292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007296:	f8cd 800c 	str.w	r8, [sp, #12]
 800729a:	2330      	movs	r3, #48	; 0x30
 800729c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007460 <_vfiprintf_r+0x24c>
 80072a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a4:	f04f 0901 	mov.w	r9, #1
 80072a8:	4623      	mov	r3, r4
 80072aa:	469a      	mov	sl, r3
 80072ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b0:	b10a      	cbz	r2, 80072b6 <_vfiprintf_r+0xa2>
 80072b2:	2a25      	cmp	r2, #37	; 0x25
 80072b4:	d1f9      	bne.n	80072aa <_vfiprintf_r+0x96>
 80072b6:	ebba 0b04 	subs.w	fp, sl, r4
 80072ba:	d00b      	beq.n	80072d4 <_vfiprintf_r+0xc0>
 80072bc:	465b      	mov	r3, fp
 80072be:	4622      	mov	r2, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ff93 	bl	80071ee <__sfputs_r>
 80072c8:	3001      	adds	r0, #1
 80072ca:	f000 80aa 	beq.w	8007422 <_vfiprintf_r+0x20e>
 80072ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d0:	445a      	add	r2, fp
 80072d2:	9209      	str	r2, [sp, #36]	; 0x24
 80072d4:	f89a 3000 	ldrb.w	r3, [sl]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 80a2 	beq.w	8007422 <_vfiprintf_r+0x20e>
 80072de:	2300      	movs	r3, #0
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e8:	f10a 0a01 	add.w	sl, sl, #1
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072f4:	931a      	str	r3, [sp, #104]	; 0x68
 80072f6:	4654      	mov	r4, sl
 80072f8:	2205      	movs	r2, #5
 80072fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fe:	4858      	ldr	r0, [pc, #352]	; (8007460 <_vfiprintf_r+0x24c>)
 8007300:	f7f8 ff6e 	bl	80001e0 <memchr>
 8007304:	9a04      	ldr	r2, [sp, #16]
 8007306:	b9d8      	cbnz	r0, 8007340 <_vfiprintf_r+0x12c>
 8007308:	06d1      	lsls	r1, r2, #27
 800730a:	bf44      	itt	mi
 800730c:	2320      	movmi	r3, #32
 800730e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007312:	0713      	lsls	r3, r2, #28
 8007314:	bf44      	itt	mi
 8007316:	232b      	movmi	r3, #43	; 0x2b
 8007318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731c:	f89a 3000 	ldrb.w	r3, [sl]
 8007320:	2b2a      	cmp	r3, #42	; 0x2a
 8007322:	d015      	beq.n	8007350 <_vfiprintf_r+0x13c>
 8007324:	9a07      	ldr	r2, [sp, #28]
 8007326:	4654      	mov	r4, sl
 8007328:	2000      	movs	r0, #0
 800732a:	f04f 0c0a 	mov.w	ip, #10
 800732e:	4621      	mov	r1, r4
 8007330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007334:	3b30      	subs	r3, #48	; 0x30
 8007336:	2b09      	cmp	r3, #9
 8007338:	d94e      	bls.n	80073d8 <_vfiprintf_r+0x1c4>
 800733a:	b1b0      	cbz	r0, 800736a <_vfiprintf_r+0x156>
 800733c:	9207      	str	r2, [sp, #28]
 800733e:	e014      	b.n	800736a <_vfiprintf_r+0x156>
 8007340:	eba0 0308 	sub.w	r3, r0, r8
 8007344:	fa09 f303 	lsl.w	r3, r9, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	46a2      	mov	sl, r4
 800734e:	e7d2      	b.n	80072f6 <_vfiprintf_r+0xe2>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	1d19      	adds	r1, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	9103      	str	r1, [sp, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	bfbb      	ittet	lt
 800735c:	425b      	neglt	r3, r3
 800735e:	f042 0202 	orrlt.w	r2, r2, #2
 8007362:	9307      	strge	r3, [sp, #28]
 8007364:	9307      	strlt	r3, [sp, #28]
 8007366:	bfb8      	it	lt
 8007368:	9204      	strlt	r2, [sp, #16]
 800736a:	7823      	ldrb	r3, [r4, #0]
 800736c:	2b2e      	cmp	r3, #46	; 0x2e
 800736e:	d10c      	bne.n	800738a <_vfiprintf_r+0x176>
 8007370:	7863      	ldrb	r3, [r4, #1]
 8007372:	2b2a      	cmp	r3, #42	; 0x2a
 8007374:	d135      	bne.n	80073e2 <_vfiprintf_r+0x1ce>
 8007376:	9b03      	ldr	r3, [sp, #12]
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	9203      	str	r2, [sp, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfb8      	it	lt
 8007382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007386:	3402      	adds	r4, #2
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007470 <_vfiprintf_r+0x25c>
 800738e:	7821      	ldrb	r1, [r4, #0]
 8007390:	2203      	movs	r2, #3
 8007392:	4650      	mov	r0, sl
 8007394:	f7f8 ff24 	bl	80001e0 <memchr>
 8007398:	b140      	cbz	r0, 80073ac <_vfiprintf_r+0x198>
 800739a:	2340      	movs	r3, #64	; 0x40
 800739c:	eba0 000a 	sub.w	r0, r0, sl
 80073a0:	fa03 f000 	lsl.w	r0, r3, r0
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	4303      	orrs	r3, r0
 80073a8:	3401      	adds	r4, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b0:	482c      	ldr	r0, [pc, #176]	; (8007464 <_vfiprintf_r+0x250>)
 80073b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073b6:	2206      	movs	r2, #6
 80073b8:	f7f8 ff12 	bl	80001e0 <memchr>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d03f      	beq.n	8007440 <_vfiprintf_r+0x22c>
 80073c0:	4b29      	ldr	r3, [pc, #164]	; (8007468 <_vfiprintf_r+0x254>)
 80073c2:	bb1b      	cbnz	r3, 800740c <_vfiprintf_r+0x1f8>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	3307      	adds	r3, #7
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	3308      	adds	r3, #8
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d2:	443b      	add	r3, r7
 80073d4:	9309      	str	r3, [sp, #36]	; 0x24
 80073d6:	e767      	b.n	80072a8 <_vfiprintf_r+0x94>
 80073d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073dc:	460c      	mov	r4, r1
 80073de:	2001      	movs	r0, #1
 80073e0:	e7a5      	b.n	800732e <_vfiprintf_r+0x11a>
 80073e2:	2300      	movs	r3, #0
 80073e4:	3401      	adds	r4, #1
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	4619      	mov	r1, r3
 80073ea:	f04f 0c0a 	mov.w	ip, #10
 80073ee:	4620      	mov	r0, r4
 80073f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f4:	3a30      	subs	r2, #48	; 0x30
 80073f6:	2a09      	cmp	r2, #9
 80073f8:	d903      	bls.n	8007402 <_vfiprintf_r+0x1ee>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0c5      	beq.n	800738a <_vfiprintf_r+0x176>
 80073fe:	9105      	str	r1, [sp, #20]
 8007400:	e7c3      	b.n	800738a <_vfiprintf_r+0x176>
 8007402:	fb0c 2101 	mla	r1, ip, r1, r2
 8007406:	4604      	mov	r4, r0
 8007408:	2301      	movs	r3, #1
 800740a:	e7f0      	b.n	80073ee <_vfiprintf_r+0x1da>
 800740c:	ab03      	add	r3, sp, #12
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	462a      	mov	r2, r5
 8007412:	4b16      	ldr	r3, [pc, #88]	; (800746c <_vfiprintf_r+0x258>)
 8007414:	a904      	add	r1, sp, #16
 8007416:	4630      	mov	r0, r6
 8007418:	f3af 8000 	nop.w
 800741c:	4607      	mov	r7, r0
 800741e:	1c78      	adds	r0, r7, #1
 8007420:	d1d6      	bne.n	80073d0 <_vfiprintf_r+0x1bc>
 8007422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007424:	07d9      	lsls	r1, r3, #31
 8007426:	d405      	bmi.n	8007434 <_vfiprintf_r+0x220>
 8007428:	89ab      	ldrh	r3, [r5, #12]
 800742a:	059a      	lsls	r2, r3, #22
 800742c:	d402      	bmi.n	8007434 <_vfiprintf_r+0x220>
 800742e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007430:	f7ff fe55 	bl	80070de <__retarget_lock_release_recursive>
 8007434:	89ab      	ldrh	r3, [r5, #12]
 8007436:	065b      	lsls	r3, r3, #25
 8007438:	f53f af12 	bmi.w	8007260 <_vfiprintf_r+0x4c>
 800743c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800743e:	e711      	b.n	8007264 <_vfiprintf_r+0x50>
 8007440:	ab03      	add	r3, sp, #12
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	462a      	mov	r2, r5
 8007446:	4b09      	ldr	r3, [pc, #36]	; (800746c <_vfiprintf_r+0x258>)
 8007448:	a904      	add	r1, sp, #16
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f880 	bl	8007550 <_printf_i>
 8007450:	e7e4      	b.n	800741c <_vfiprintf_r+0x208>
 8007452:	bf00      	nop
 8007454:	08008214 	.word	0x08008214
 8007458:	08008234 	.word	0x08008234
 800745c:	080081f4 	.word	0x080081f4
 8007460:	08008254 	.word	0x08008254
 8007464:	0800825e 	.word	0x0800825e
 8007468:	00000000 	.word	0x00000000
 800746c:	080071ef 	.word	0x080071ef
 8007470:	0800825a 	.word	0x0800825a

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4616      	mov	r6, r2
 800747a:	4699      	mov	r9, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007490:	4607      	mov	r7, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b10a      	cbz	r2, 800749a <_printf_common+0x26>
 8007496:	3301      	adds	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	6833      	ldrmi	r3, [r6, #0]
 80074a2:	3302      	addmi	r3, #2
 80074a4:	6033      	strmi	r3, [r6, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	f015 0506 	ands.w	r5, r5, #6
 80074ac:	d106      	bne.n	80074bc <_printf_common+0x48>
 80074ae:	f104 0a19 	add.w	sl, r4, #25
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	6832      	ldr	r2, [r6, #0]
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dc26      	bgt.n	800750a <_printf_common+0x96>
 80074bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c0:	1e13      	subs	r3, r2, #0
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2301      	movne	r3, #1
 80074c8:	0692      	lsls	r2, r2, #26
 80074ca:	d42b      	bmi.n	8007524 <_printf_common+0xb0>
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d01e      	beq.n	8007518 <_printf_common+0xa4>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	68e5      	ldr	r5, [r4, #12]
 80074de:	6832      	ldr	r2, [r6, #0]
 80074e0:	f003 0306 	and.w	r3, r3, #6
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	bf08      	it	eq
 80074e8:	1aad      	subeq	r5, r5, r2
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	bf0c      	ite	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	2500      	movne	r5, #0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfc4      	itt	gt
 80074fa:	1a9b      	subgt	r3, r3, r2
 80074fc:	18ed      	addgt	r5, r5, r3
 80074fe:	2600      	movs	r6, #0
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xc8>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xa8>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xac>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c6      	b.n	80074b2 <_printf_common+0x3e>
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	2030      	movs	r0, #48	; 0x30
 800752a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752e:	4422      	add	r2, r4
 8007530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007538:	3302      	adds	r3, #2
 800753a:	e7c7      	b.n	80074cc <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa4>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x8e>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	460c      	mov	r4, r1
 8007556:	4691      	mov	r9, r2
 8007558:	7e27      	ldrb	r7, [r4, #24]
 800755a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800755c:	2f78      	cmp	r7, #120	; 0x78
 800755e:	4680      	mov	r8, r0
 8007560:	469a      	mov	sl, r3
 8007562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d8 	beq.w	8007722 <_printf_i+0x1d2>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80a3 	beq.w	80076be <_printf_i+0x16e>
 8007578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a001      	add	r0, pc, #4	; (adr r0, 8007590 <_printf_i+0x40>)
 800758c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	08007709 	.word	0x08007709
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	080076eb 	.word	0x080076eb
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	0800772b 	.word	0x0800772b
 80075d4:	08007579 	.word	0x08007579
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076f3 	.word	0x080076f3
 80075e8:	680b      	ldr	r3, [r1, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	600a      	str	r2, [r1, #0]
 80075f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0a3      	b.n	8007744 <_printf_i+0x1f4>
 80075fc:	6825      	ldr	r5, [r4, #0]
 80075fe:	6808      	ldr	r0, [r1, #0]
 8007600:	062e      	lsls	r6, r5, #24
 8007602:	f100 0304 	add.w	r3, r0, #4
 8007606:	d50a      	bpl.n	800761e <_printf_i+0xce>
 8007608:	6805      	ldr	r5, [r0, #0]
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	2d00      	cmp	r5, #0
 800760e:	da03      	bge.n	8007618 <_printf_i+0xc8>
 8007610:	232d      	movs	r3, #45	; 0x2d
 8007612:	426d      	negs	r5, r5
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	485e      	ldr	r0, [pc, #376]	; (8007794 <_printf_i+0x244>)
 800761a:	230a      	movs	r3, #10
 800761c:	e019      	b.n	8007652 <_printf_i+0x102>
 800761e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007622:	6805      	ldr	r5, [r0, #0]
 8007624:	600b      	str	r3, [r1, #0]
 8007626:	bf18      	it	ne
 8007628:	b22d      	sxthne	r5, r5
 800762a:	e7ef      	b.n	800760c <_printf_i+0xbc>
 800762c:	680b      	ldr	r3, [r1, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	1d18      	adds	r0, r3, #4
 8007632:	6008      	str	r0, [r1, #0]
 8007634:	0628      	lsls	r0, r5, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xec>
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	e002      	b.n	8007642 <_printf_i+0xf2>
 800763c:	0669      	lsls	r1, r5, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xe8>
 8007640:	881d      	ldrh	r5, [r3, #0]
 8007642:	4854      	ldr	r0, [pc, #336]	; (8007794 <_printf_i+0x244>)
 8007644:	2f6f      	cmp	r7, #111	; 0x6f
 8007646:	bf0c      	ite	eq
 8007648:	2308      	moveq	r3, #8
 800764a:	230a      	movne	r3, #10
 800764c:	2100      	movs	r1, #0
 800764e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007652:	6866      	ldr	r6, [r4, #4]
 8007654:	60a6      	str	r6, [r4, #8]
 8007656:	2e00      	cmp	r6, #0
 8007658:	bfa2      	ittt	ge
 800765a:	6821      	ldrge	r1, [r4, #0]
 800765c:	f021 0104 	bicge.w	r1, r1, #4
 8007660:	6021      	strge	r1, [r4, #0]
 8007662:	b90d      	cbnz	r5, 8007668 <_printf_i+0x118>
 8007664:	2e00      	cmp	r6, #0
 8007666:	d04d      	beq.n	8007704 <_printf_i+0x1b4>
 8007668:	4616      	mov	r6, r2
 800766a:	fbb5 f1f3 	udiv	r1, r5, r3
 800766e:	fb03 5711 	mls	r7, r3, r1, r5
 8007672:	5dc7      	ldrb	r7, [r0, r7]
 8007674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007678:	462f      	mov	r7, r5
 800767a:	42bb      	cmp	r3, r7
 800767c:	460d      	mov	r5, r1
 800767e:	d9f4      	bls.n	800766a <_printf_i+0x11a>
 8007680:	2b08      	cmp	r3, #8
 8007682:	d10b      	bne.n	800769c <_printf_i+0x14c>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	07df      	lsls	r7, r3, #31
 8007688:	d508      	bpl.n	800769c <_printf_i+0x14c>
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	6861      	ldr	r1, [r4, #4]
 800768e:	4299      	cmp	r1, r3
 8007690:	bfde      	ittt	le
 8007692:	2330      	movle	r3, #48	; 0x30
 8007694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007698:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800769c:	1b92      	subs	r2, r2, r6
 800769e:	6122      	str	r2, [r4, #16]
 80076a0:	f8cd a000 	str.w	sl, [sp]
 80076a4:	464b      	mov	r3, r9
 80076a6:	aa03      	add	r2, sp, #12
 80076a8:	4621      	mov	r1, r4
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7ff fee2 	bl	8007474 <_printf_common>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d14c      	bne.n	800774e <_printf_i+0x1fe>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b8:	b004      	add	sp, #16
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	4835      	ldr	r0, [pc, #212]	; (8007794 <_printf_i+0x244>)
 80076c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	680e      	ldr	r6, [r1, #0]
 80076c8:	061f      	lsls	r7, r3, #24
 80076ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ce:	600e      	str	r6, [r1, #0]
 80076d0:	d514      	bpl.n	80076fc <_printf_i+0x1ac>
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	bf44      	itt	mi
 80076d6:	f043 0320 	orrmi.w	r3, r3, #32
 80076da:	6023      	strmi	r3, [r4, #0]
 80076dc:	b91d      	cbnz	r5, 80076e6 <_printf_i+0x196>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	2310      	movs	r3, #16
 80076e8:	e7b0      	b.n	800764c <_printf_i+0xfc>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	f043 0320 	orr.w	r3, r3, #32
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	2378      	movs	r3, #120	; 0x78
 80076f4:	4828      	ldr	r0, [pc, #160]	; (8007798 <_printf_i+0x248>)
 80076f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076fa:	e7e3      	b.n	80076c4 <_printf_i+0x174>
 80076fc:	065e      	lsls	r6, r3, #25
 80076fe:	bf48      	it	mi
 8007700:	b2ad      	uxthmi	r5, r5
 8007702:	e7e6      	b.n	80076d2 <_printf_i+0x182>
 8007704:	4616      	mov	r6, r2
 8007706:	e7bb      	b.n	8007680 <_printf_i+0x130>
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	6826      	ldr	r6, [r4, #0]
 800770c:	6960      	ldr	r0, [r4, #20]
 800770e:	1d1d      	adds	r5, r3, #4
 8007710:	600d      	str	r5, [r1, #0]
 8007712:	0635      	lsls	r5, r6, #24
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	d501      	bpl.n	800771c <_printf_i+0x1cc>
 8007718:	6018      	str	r0, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0x1d2>
 800771c:	0671      	lsls	r1, r6, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0x1c8>
 8007720:	8018      	strh	r0, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	4616      	mov	r6, r2
 8007728:	e7ba      	b.n	80076a0 <_printf_i+0x150>
 800772a:	680b      	ldr	r3, [r1, #0]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	600a      	str	r2, [r1, #0]
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	4630      	mov	r0, r6
 8007738:	f7f8 fd52 	bl	80001e0 <memchr>
 800773c:	b108      	cbz	r0, 8007742 <_printf_i+0x1f2>
 800773e:	1b80      	subs	r0, r0, r6
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774c:	e7a8      	b.n	80076a0 <_printf_i+0x150>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	4632      	mov	r2, r6
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d0ab      	beq.n	80076b4 <_printf_i+0x164>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	d413      	bmi.n	800778a <_printf_i+0x23a>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e7a4      	b.n	80076b8 <_printf_i+0x168>
 800776e:	2301      	movs	r3, #1
 8007770:	4632      	mov	r2, r6
 8007772:	4649      	mov	r1, r9
 8007774:	4640      	mov	r0, r8
 8007776:	47d0      	blx	sl
 8007778:	3001      	adds	r0, #1
 800777a:	d09b      	beq.n	80076b4 <_printf_i+0x164>
 800777c:	3501      	adds	r5, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	42ab      	cmp	r3, r5
 8007786:	dcf2      	bgt.n	800776e <_printf_i+0x21e>
 8007788:	e7eb      	b.n	8007762 <_printf_i+0x212>
 800778a:	2500      	movs	r5, #0
 800778c:	f104 0619 	add.w	r6, r4, #25
 8007790:	e7f5      	b.n	800777e <_printf_i+0x22e>
 8007792:	bf00      	nop
 8007794:	08008265 	.word	0x08008265
 8007798:	08008276 	.word	0x08008276

0800779c <_putc_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	460d      	mov	r5, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	4606      	mov	r6, r0
 80077a4:	b118      	cbz	r0, 80077ae <_putc_r+0x12>
 80077a6:	6983      	ldr	r3, [r0, #24]
 80077a8:	b90b      	cbnz	r3, 80077ae <_putc_r+0x12>
 80077aa:	f7ff fbe7 	bl	8006f7c <__sinit>
 80077ae:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <_putc_r+0x84>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d124      	bne.n	80077fe <_putc_r+0x62>
 80077b4:	6874      	ldr	r4, [r6, #4]
 80077b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b8:	07d8      	lsls	r0, r3, #31
 80077ba:	d405      	bmi.n	80077c8 <_putc_r+0x2c>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	0599      	lsls	r1, r3, #22
 80077c0:	d402      	bmi.n	80077c8 <_putc_r+0x2c>
 80077c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c4:	f7ff fc8a 	bl	80070dc <__retarget_lock_acquire_recursive>
 80077c8:	68a3      	ldr	r3, [r4, #8]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	da05      	bge.n	80077de <_putc_r+0x42>
 80077d2:	69a2      	ldr	r2, [r4, #24]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	db1c      	blt.n	8007812 <_putc_r+0x76>
 80077d8:	b2eb      	uxtb	r3, r5
 80077da:	2b0a      	cmp	r3, #10
 80077dc:	d019      	beq.n	8007812 <_putc_r+0x76>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	6022      	str	r2, [r4, #0]
 80077e4:	701d      	strb	r5, [r3, #0]
 80077e6:	b2ed      	uxtb	r5, r5
 80077e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d405      	bmi.n	80077fa <_putc_r+0x5e>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	059b      	lsls	r3, r3, #22
 80077f2:	d402      	bmi.n	80077fa <_putc_r+0x5e>
 80077f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f6:	f7ff fc72 	bl	80070de <__retarget_lock_release_recursive>
 80077fa:	4628      	mov	r0, r5
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <_putc_r+0x88>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d101      	bne.n	8007808 <_putc_r+0x6c>
 8007804:	68b4      	ldr	r4, [r6, #8]
 8007806:	e7d6      	b.n	80077b6 <_putc_r+0x1a>
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <_putc_r+0x8c>)
 800780a:	429c      	cmp	r4, r3
 800780c:	bf08      	it	eq
 800780e:	68f4      	ldreq	r4, [r6, #12]
 8007810:	e7d1      	b.n	80077b6 <_putc_r+0x1a>
 8007812:	4629      	mov	r1, r5
 8007814:	4622      	mov	r2, r4
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff f9b8 	bl	8006b8c <__swbuf_r>
 800781c:	4605      	mov	r5, r0
 800781e:	e7e3      	b.n	80077e8 <_putc_r+0x4c>
 8007820:	08008214 	.word	0x08008214
 8007824:	08008234 	.word	0x08008234
 8007828:	080081f4 	.word	0x080081f4

0800782c <__sread>:
 800782c:	b510      	push	{r4, lr}
 800782e:	460c      	mov	r4, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	f000 f888 	bl	8007948 <_read_r>
 8007838:	2800      	cmp	r0, #0
 800783a:	bfab      	itete	ge
 800783c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800783e:	89a3      	ldrhlt	r3, [r4, #12]
 8007840:	181b      	addge	r3, r3, r0
 8007842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007846:	bfac      	ite	ge
 8007848:	6563      	strge	r3, [r4, #84]	; 0x54
 800784a:	81a3      	strhlt	r3, [r4, #12]
 800784c:	bd10      	pop	{r4, pc}

0800784e <__swrite>:
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	461f      	mov	r7, r3
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	05db      	lsls	r3, r3, #23
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	4616      	mov	r6, r2
 800785e:	d505      	bpl.n	800786c <__swrite+0x1e>
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	2302      	movs	r3, #2
 8007866:	2200      	movs	r2, #0
 8007868:	f000 f85c 	bl	8007924 <_lseek_r>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	4632      	mov	r2, r6
 800787a:	463b      	mov	r3, r7
 800787c:	4628      	mov	r0, r5
 800787e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	f7fa b86d 	b.w	8001960 <_write_r>

08007886 <__sseek>:
 8007886:	b510      	push	{r4, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	f000 f849 	bl	8007924 <_lseek_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	bf15      	itete	ne
 8007898:	6560      	strne	r0, [r4, #84]	; 0x54
 800789a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800789e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078a2:	81a3      	strheq	r3, [r4, #12]
 80078a4:	bf18      	it	ne
 80078a6:	81a3      	strhne	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__sclose>:
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 b807 	b.w	80078c0 <_close_r>

080078b2 <abort>:
 80078b2:	b508      	push	{r3, lr}
 80078b4:	2006      	movs	r0, #6
 80078b6:	f000 f881 	bl	80079bc <raise>
 80078ba:	2001      	movs	r0, #1
 80078bc:	f7fe fd45 	bl	800634a <_exit>

080078c0 <_close_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d06      	ldr	r5, [pc, #24]	; (80078dc <_close_r+0x1c>)
 80078c4:	2300      	movs	r3, #0
 80078c6:	4604      	mov	r4, r0
 80078c8:	4608      	mov	r0, r1
 80078ca:	602b      	str	r3, [r5, #0]
 80078cc:	f7fe fd64 	bl	8006398 <_close>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_close_r+0x1a>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_close_r+0x1a>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	200001e8 	.word	0x200001e8

080078e0 <_fstat_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d07      	ldr	r5, [pc, #28]	; (8007900 <_fstat_r+0x20>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	f7fe fd5f 	bl	80063b0 <_fstat>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d102      	bne.n	80078fc <_fstat_r+0x1c>
 80078f6:	682b      	ldr	r3, [r5, #0]
 80078f8:	b103      	cbz	r3, 80078fc <_fstat_r+0x1c>
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	200001e8 	.word	0x200001e8

08007904 <_isatty_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_isatty_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7fe fd5e 	bl	80063d0 <_isatty>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_isatty_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_isatty_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	200001e8 	.word	0x200001e8

08007924 <_lseek_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	; (8007944 <_lseek_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fe fd57 	bl	80063e6 <_lseek>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_lseek_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_lseek_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	200001e8 	.word	0x200001e8

08007948 <_read_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_read_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fe fd01 	bl	800635e <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_read_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_read_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	200001e8 	.word	0x200001e8

0800796c <_raise_r>:
 800796c:	291f      	cmp	r1, #31
 800796e:	b538      	push	{r3, r4, r5, lr}
 8007970:	4604      	mov	r4, r0
 8007972:	460d      	mov	r5, r1
 8007974:	d904      	bls.n	8007980 <_raise_r+0x14>
 8007976:	2316      	movs	r3, #22
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007982:	b112      	cbz	r2, 800798a <_raise_r+0x1e>
 8007984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007988:	b94b      	cbnz	r3, 800799e <_raise_r+0x32>
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f830 	bl	80079f0 <_getpid_r>
 8007990:	462a      	mov	r2, r5
 8007992:	4601      	mov	r1, r0
 8007994:	4620      	mov	r0, r4
 8007996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799a:	f000 b817 	b.w	80079cc <_kill_r>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d00a      	beq.n	80079b8 <_raise_r+0x4c>
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	d103      	bne.n	80079ae <_raise_r+0x42>
 80079a6:	2316      	movs	r3, #22
 80079a8:	6003      	str	r3, [r0, #0]
 80079aa:	2001      	movs	r0, #1
 80079ac:	e7e7      	b.n	800797e <_raise_r+0x12>
 80079ae:	2400      	movs	r4, #0
 80079b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079b4:	4628      	mov	r0, r5
 80079b6:	4798      	blx	r3
 80079b8:	2000      	movs	r0, #0
 80079ba:	e7e0      	b.n	800797e <_raise_r+0x12>

080079bc <raise>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <raise+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f7ff bfd3 	b.w	800796c <_raise_r>
 80079c6:	bf00      	nop
 80079c8:	20000030 	.word	0x20000030

080079cc <_kill_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	; (80079ec <_kill_r+0x20>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	f7fe fca6 	bl	800632a <_kill>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d102      	bne.n	80079e8 <_kill_r+0x1c>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b103      	cbz	r3, 80079e8 <_kill_r+0x1c>
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	200001e8 	.word	0x200001e8

080079f0 <_getpid_r>:
 80079f0:	f7fe bc93 	b.w	800631a <_getpid>

080079f4 <_init>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

08007a00 <_fini>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr
