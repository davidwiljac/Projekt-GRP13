
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003070  08003070  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003070  08003070  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003070  08003070  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08003108  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003108  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000915c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e0  00000000  00000000  0002921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  0002b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a54  00000000  00000000  0002b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000069c7  00000000  00000000  0002efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a49e  00000000  00000000  000359a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008fe41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020e4  00000000  00000000  0008fe94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e9c 	.word	0x08002e9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002e9c 	.word	0x08002e9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <uart_put_char+0x30>)
 800086a:	f7ff ff1d 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800086e:	bf00      	nop
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <uart_put_char+0x30>)
 8000874:	f7ff ff6c 	bl	8000750 <USART_GetFlagStatus>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <uart_put_char+0x18>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400

0800088c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e012      	b.n	80008c6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	d102      	bne.n	80008b2 <_write_r+0x26>
            uart_put_char('\r');
 80008ac:	200d      	movs	r0, #13
 80008ae:	f7ff ffd3 	bl	8000858 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffcc 	bl	8000858 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbe8      	blt.n	80008a0 <_write_r+0x14>
    }

    return len;
 80008ce:	683b      	ldr	r3, [r7, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008dc:	4915      	ldr	r1, [pc, #84]	; (8000934 <USART2_IRQHandler+0x5c>)
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <USART2_IRQHandler+0x60>)
 80008e0:	f7ff ff4f 	bl	8000782 <USART_GetITStatus>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d021      	beq.n	800092e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <USART2_IRQHandler+0x60>)
 80008ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008ee:	b299      	uxth	r1, r3
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <USART2_IRQHandler+0x64>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	b2d0      	uxtb	r0, r2
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <USART2_IRQHandler+0x64>)
 80008fc:	7010      	strb	r0, [r2, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <USART2_IRQHandler+0x68>)
 8000904:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d107      	bne.n	8000920 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <USART2_IRQHandler+0x70>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <USART2_IRQHandler+0x70>)
 800091c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800091e:	e006      	b.n	800092e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <USART2_IRQHandler+0x6c>)
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	00050105 	.word	0x00050105
 8000938:	40004400 	.word	0x40004400
 800093c:	200001ac 	.word	0x200001ac
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200001ae 	.word	0x200001ae
 8000948:	200001ad 	.word	0x200001ad

0800094c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000954:	4b86      	ldr	r3, [pc, #536]	; (8000b70 <uart_init+0x224>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa53 	bl	8001e08 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000962:	4b83      	ldr	r3, [pc, #524]	; (8000b70 <uart_init+0x224>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fa4c 	bl	8001e08 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000970:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <uart_init+0x228>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a7f      	ldr	r2, [pc, #508]	; (8000b74 <uart_init+0x228>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800097c:	4b7d      	ldr	r3, [pc, #500]	; (8000b74 <uart_init+0x228>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a7c      	ldr	r2, [pc, #496]	; (8000b74 <uart_init+0x228>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009c6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009e6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ec:	889b      	ldrh	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f4:	f023 030c 	bic.w	r3, r3, #12
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a04:	8892      	ldrh	r2, [r2, #4]
 8000a06:	b292      	uxth	r2, r2
 8000a08:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a28:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a38:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a44:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a48:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <uart_init+0x22c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <uart_init+0x22c>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <uart_init+0x22c>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <uart_init+0x22c>)
 8000a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a60:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <uart_init+0x22c>)
 8000a64:	4a44      	ldr	r2, [pc, #272]	; (8000b78 <uart_init+0x22c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <uart_init+0x22c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <uart_init+0x22c>)
 8000a70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a74:	f023 030c 	bic.w	r3, r3, #12
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <uart_init+0x22c>)
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <uart_init+0x22c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <uart_init+0x22c>)
 8000a84:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <uart_init+0x22c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <uart_init+0x22c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <uart_init+0x22c>)
 8000a90:	f043 030c 	orr.w	r3, r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <uart_init+0x22c>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <uart_init+0x22c>)
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <uart_init+0x22c>)
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <uart_init+0x22c>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fbe0 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <uart_init+0x22c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d010      	beq.n	8000af2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad2:	005a      	lsls	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8000af0:	e00d      	b.n	8000b0e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d302      	bcc.n	8000b1e <uart_init+0x1d2>
        divider++;
 8000b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <uart_init+0x22c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <uart_init+0x22c>)
 8000b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b46:	b292      	uxth	r2, r2
 8000b48:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <uart_init+0x22c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <uart_init+0x22c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4908      	ldr	r1, [pc, #32]	; (8000b7c <uart_init+0x230>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <uart_init+0x22c>)
 8000b5c:	f7ff fdb6 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	2026      	movs	r0, #38	; 0x26
 8000b62:	f7ff fe5f 	bl	8000824 <NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000002c 	.word	0x2000002c
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	00050105 	.word	0x00050105

08000b80 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000b8a:	2316      	movs	r3, #22
 8000b8c:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d904      	bls.n	8000b9e <fgcolor+0x1e>
	  type = 1;                // bold text
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3b08      	subs	r3, #8
 8000b9c:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	331e      	adds	r3, #30
 8000ba4:	211b      	movs	r1, #27
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <fgcolor+0x34>)
 8000ba8:	f001 f900 	bl	8001dac <iprintf>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	08002eb4 	.word	0x08002eb4

08000bb8 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8000bbc:	211b      	movs	r1, #27
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <clrscr+0x18>)
 8000bc0:	f001 f8f4 	bl	8001dac <iprintf>
    printf("%c[J", ESC);
 8000bc4:	211b      	movs	r1, #27
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <clrscr+0x1c>)
 8000bc8:	f001 f8f0 	bl	8001dac <iprintf>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08002ee0 	.word	0x08002ee0
 8000bd4:	08002ee8 	.word	0x08002ee8

08000bd8 <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	211b      	movs	r1, #27
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <gotoxy+0x20>)
 8000bea:	f001 f8df 	bl	8001dac <iprintf>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08002ef8 	.word	0x08002ef8

08000bfc <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d15e      	bne.n	8000cce <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
 8000c14:	e019      	b.n	8000c4a <drawBox+0x4e>
			 gotoxy(x1,y);
 8000c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffdd 	bl	8000bd8 <gotoxy>
			 if (y==y1){
 8000c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d103      	bne.n	8000c2e <drawBox+0x32>
				printf("%c", 201);
 8000c26:	20c9      	movs	r0, #201	; 0xc9
 8000c28:	f001 f8d8 	bl	8001ddc <putchar>
 8000c2c:	e00a      	b.n	8000c44 <drawBox+0x48>
			 }
			 else if(y==y2){
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d103      	bne.n	8000c3e <drawBox+0x42>
				printf("%c", 200);
 8000c36:	20c8      	movs	r0, #200	; 0xc8
 8000c38:	f001 f8d0 	bl	8001ddc <putchar>
 8000c3c:	e002      	b.n	8000c44 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000c3e:	20ba      	movs	r0, #186	; 0xba
 8000c40:	f001 f8cc 	bl	8001ddc <putchar>
		 for(int y = y1; y <= y2; y++){
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	3301      	adds	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dde1      	ble.n	8000c16 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	e014      	b.n	8000c82 <drawBox+0x86>
   			 if(x!=x1){
 8000c58:	6a3a      	ldr	r2, [r7, #32]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d00d      	beq.n	8000c7c <drawBox+0x80>
				 gotoxy(x,y1);
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6a38      	ldr	r0, [r7, #32]
 8000c64:	f7ff ffb8 	bl	8000bd8 <gotoxy>
				 printf("%c", 205);
 8000c68:	20cd      	movs	r0, #205	; 0xcd
 8000c6a:	f001 f8b7 	bl	8001ddc <putchar>
				 gotoxy(x,y2);
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	6a38      	ldr	r0, [r7, #32]
 8000c72:	f7ff ffb1 	bl	8000bd8 <gotoxy>
				 printf("%c", 205);
 8000c76:	20cd      	movs	r0, #205	; 0xcd
 8000c78:	f001 f8b0 	bl	8001ddc <putchar>
   		 for(int x = x1; x <= x2; x++){
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	6a3a      	ldr	r2, [r7, #32]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dde6      	ble.n	8000c58 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e019      	b.n	8000cc4 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000c90:	69f9      	ldr	r1, [r7, #28]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa0 	bl	8000bd8 <gotoxy>
   			 if (y==y1){
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d103      	bne.n	8000ca8 <drawBox+0xac>
				printf("%c", 187);
 8000ca0:	20bb      	movs	r0, #187	; 0xbb
 8000ca2:	f001 f89b 	bl	8001ddc <putchar>
 8000ca6:	e00a      	b.n	8000cbe <drawBox+0xc2>
			 }
			 else if(y==y2){
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d103      	bne.n	8000cb8 <drawBox+0xbc>
				printf("%c", 188);
 8000cb0:	20bc      	movs	r0, #188	; 0xbc
 8000cb2:	f001 f893 	bl	8001ddc <putchar>
 8000cb6:	e002      	b.n	8000cbe <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000cb8:	20ba      	movs	r0, #186	; 0xba
 8000cba:	f001 f88f 	bl	8001ddc <putchar>
   		 for(int y = y1; y <= y2; y++){
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dde1      	ble.n	8000c90 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8000ccc:	e05d      	b.n	8000d8a <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	e019      	b.n	8000d08 <drawBox+0x10c>
			 gotoxy(x1,y);
 8000cd4:	69b9      	ldr	r1, [r7, #24]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff ff7e 	bl	8000bd8 <gotoxy>
			 if (y==y1){
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d103      	bne.n	8000cec <drawBox+0xf0>
				printf("%c", 218);
 8000ce4:	20da      	movs	r0, #218	; 0xda
 8000ce6:	f001 f879 	bl	8001ddc <putchar>
 8000cea:	e00a      	b.n	8000d02 <drawBox+0x106>
			 else if(y==y2){
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d103      	bne.n	8000cfc <drawBox+0x100>
				printf("%c", 192);
 8000cf4:	20c0      	movs	r0, #192	; 0xc0
 8000cf6:	f001 f871 	bl	8001ddc <putchar>
 8000cfa:	e002      	b.n	8000d02 <drawBox+0x106>
				printf("%c", 179);
 8000cfc:	20b3      	movs	r0, #179	; 0xb3
 8000cfe:	f001 f86d 	bl	8001ddc <putchar>
		for(int y = y1; y <= y2; y++){
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	3301      	adds	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dde1      	ble.n	8000cd4 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e014      	b.n	8000d40 <drawBox+0x144>
			if(x!=x1){
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d00d      	beq.n	8000d3a <drawBox+0x13e>
				 gotoxy(x,y1);
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ff59 	bl	8000bd8 <gotoxy>
				 printf("%c", 196);
 8000d26:	20c4      	movs	r0, #196	; 0xc4
 8000d28:	f001 f858 	bl	8001ddc <putchar>
				 gotoxy(x,y2);
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff52 	bl	8000bd8 <gotoxy>
				 printf("%c", 196);
 8000d34:	20c4      	movs	r0, #196	; 0xc4
 8000d36:	f001 f851 	bl	8001ddc <putchar>
		for(int x = x1; x <= x2; x++){
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dde6      	ble.n	8000d16 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	e019      	b.n	8000d82 <drawBox+0x186>
			 gotoxy(x2,y);
 8000d4e:	6939      	ldr	r1, [r7, #16]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff41 	bl	8000bd8 <gotoxy>
			if (y==y1){
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d103      	bne.n	8000d66 <drawBox+0x16a>
				printf("%c", 191);
 8000d5e:	20bf      	movs	r0, #191	; 0xbf
 8000d60:	f001 f83c 	bl	8001ddc <putchar>
 8000d64:	e00a      	b.n	8000d7c <drawBox+0x180>
			 else if(y==y2){
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d103      	bne.n	8000d76 <drawBox+0x17a>
				printf("%c", 217);
 8000d6e:	20d9      	movs	r0, #217	; 0xd9
 8000d70:	f001 f834 	bl	8001ddc <putchar>
 8000d74:	e002      	b.n	8000d7c <drawBox+0x180>
				printf("%c", 179);
 8000d76:	20b3      	movs	r0, #179	; 0xb3
 8000d78:	f001 f830 	bl	8001ddc <putchar>
		for(int y = y1; y <= y2; y++){
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dde1      	ble.n	8000d4e <drawBox+0x152>
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <NVIC_EnableIRQ>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	2201      	movs	r2, #1
 8000da6:	fa02 f103 	lsl.w	r1, r2, r3
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <NVIC_EnableIRQ+0x30>)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da0b      	bge.n	8000df4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <NVIC_SetPriority+0x4c>)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	3b04      	subs	r3, #4
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000df2:	e009      	b.n	8000e08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <NVIC_SetPriority+0x50>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <initJoystick>:
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

//JOYSTICK vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initJoystick(){
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <initJoystick+0x120>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a45      	ldr	r2, [pc, #276]	; (8000f3c <initJoystick+0x120>)
 8000e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2a:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <initJoystick+0x120>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	4a42      	ldr	r2, [pc, #264]	; (8000f3c <initJoystick+0x120>)
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e36:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000e38:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <initJoystick+0x120>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	4a3f      	ldr	r2, [pc, #252]	; (8000f3c <initJoystick+0x120>)
 8000e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e42:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <initJoystick+0x124>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <initJoystick+0x124>)
 8000e4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e4e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <initJoystick+0x124>)
 8000e52:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <initJoystick+0x124>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <initJoystick+0x124>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	4a38      	ldr	r2, [pc, #224]	; (8000f40 <initJoystick+0x124>)
 8000e5e:	f023 0303 	bic.w	r3, r3, #3
 8000e62:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <initJoystick+0x124>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <initJoystick+0x124>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e7e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <initJoystick+0x124>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <initJoystick+0x124>)
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <initJoystick+0x124>)
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <initJoystick+0x124>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <initJoystick+0x124>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <initJoystick+0x124>)
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <initJoystick+0x124>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <initJoystick+0x124>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <initJoystick+0x128>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <initJoystick+0x128>)
 8000ede:	f023 030c 	bic.w	r3, r3, #12
 8000ee2:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <initJoystick+0x128>)
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <initJoystick+0x128>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <initJoystick+0x128>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <initJoystick+0x128>)
 8000ef2:	f023 0303 	bic.w	r3, r3, #3
 8000ef6:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <initJoystick+0x128>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <initJoystick+0x128>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <initJoystick+0x128>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <initJoystick+0x128>)
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <initJoystick+0x128>)
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <initJoystick+0x128>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <initJoystick+0x128>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <initJoystick+0x128>)
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <initJoystick+0x128>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <initJoystick+0x128>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	60d3      	str	r3, [r2, #12]

}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48000800 	.word	0x48000800

08000f48 <centerIsPressed>:



uint8_t centerIsPressed(){
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <centerIsPressed+0x50>)
 8000f4e:	8a1b      	ldrh	r3, [r3, #16]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00c      	beq.n	8000f74 <centerIsPressed+0x2c>
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <centerIsPressed+0x54>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <centerIsPressed+0x58>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b1e      	cmp	r3, #30
 8000f66:	d905      	bls.n	8000f74 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <centerIsPressed+0x54>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <centerIsPressed+0x58>)
 8000f6e:	6013      	str	r3, [r2, #0]
		 return 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e00c      	b.n	8000f8e <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <centerIsPressed+0x50>)
 8000f76:	8a1b      	ldrh	r3, [r3, #16]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d104      	bne.n	8000f8c <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <centerIsPressed+0x54>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b1e      	subs	r3, #30
 8000f88:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <centerIsPressed+0x58>)
 8000f8a:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8000f8c:	2300      	movs	r3, #0
	 }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	200001c8 	.word	0x200001c8
 8000fa0:	200001b0 	.word	0x200001b0

08000fa4 <upIsPressed>:

uint8_t upIsPressed(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8000fa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fac:	8a1b      	ldrh	r3, [r3, #16]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <upIsPressed+0x2e>
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <upIsPressed+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <upIsPressed+0x58>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b1e      	cmp	r3, #30
 8000fc4:	d905      	bls.n	8000fd2 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <upIsPressed+0x54>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <upIsPressed+0x58>)
 8000fcc:	6013      	str	r3, [r2, #0]
			 return 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00d      	b.n	8000fee <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8000fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd6:	8a1b      	ldrh	r3, [r3, #16]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <upIsPressed+0x54>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b1e      	subs	r3, #30
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <upIsPressed+0x58>)
 8000fea:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8000fec:	2300      	movs	r3, #0
		 }
	 }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200001c8 	.word	0x200001c8
 8000ffc:	200001b4 	.word	0x200001b4

08001000 <downIsPressed>:

uint8_t downIsPressed(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <downIsPressed+0x50>)
 8001006:	8a1b      	ldrh	r3, [r3, #16]
 8001008:	b29b      	uxth	r3, r3
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <downIsPressed+0x2c>
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <downIsPressed+0x54>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <downIsPressed+0x58>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b1e      	cmp	r3, #30
 800101e:	d905      	bls.n	800102c <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <downIsPressed+0x54>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <downIsPressed+0x58>)
 8001026:	6013      	str	r3, [r2, #0]
			 return 1;
 8001028:	2301      	movs	r3, #1
 800102a:	e00c      	b.n	8001046 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <downIsPressed+0x50>)
 800102e:	8a1b      	ldrh	r3, [r3, #16]
 8001030:	b29b      	uxth	r3, r3
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <downIsPressed+0x54>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b1e      	subs	r3, #30
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <downIsPressed+0x58>)
 8001042:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001044:	2300      	movs	r3, #0
		 }
	 }
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	48000400 	.word	0x48000400
 8001054:	200001c8 	.word	0x200001c8
 8001058:	200001b8 	.word	0x200001b8

0800105c <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <initTimer+0x60>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a15      	ldr	r2, [pc, #84]	; (80010bc <initTimer+0x60>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <initTimer+0x64>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <initTimer+0x64>)
 8001074:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001078:	f023 030f 	bic.w	r3, r3, #15
 800107c:	b29b      	uxth	r3, r3
 800107e:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <initTimer+0x64>)
 8001082:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <initTimer+0x64>)
 800108a:	2209      	movs	r2, #9
 800108c:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <initTimer+0x64>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <initTimer+0x64>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <initTimer+0x64>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <initTimer+0x64>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80010aa:	2100      	movs	r1, #0
 80010ac:	2018      	movs	r0, #24
 80010ae:	f7ff fe8b 	bl	8000dc8 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80010b2:	2018      	movs	r0, #24
 80010b4:	f7ff fe6e 	bl	8000d94 <NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40014000 	.word	0x40014000

080010c4 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	runtime++;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80010d0:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6113      	str	r3, [r2, #16]
 }
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200001c8 	.word	0x200001c8
 80010ec:	40014000 	.word	0x40014000

080010f0 <drawbackground>:
 */
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"

void drawbackground(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 80010f4:	2123      	movs	r1, #35	; 0x23
 80010f6:	2037      	movs	r0, #55	; 0x37
 80010f8:	f7ff fd6e 	bl	8000bd8 <gotoxy>
	printf("*");
 80010fc:	202a      	movs	r0, #42	; 0x2a
 80010fe:	f000 fe6d 	bl	8001ddc <putchar>
	gotoxy(63,27);
 8001102:	211b      	movs	r1, #27
 8001104:	203f      	movs	r0, #63	; 0x3f
 8001106:	f7ff fd67 	bl	8000bd8 <gotoxy>
	printf("*");
 800110a:	202a      	movs	r0, #42	; 0x2a
 800110c:	f000 fe66 	bl	8001ddc <putchar>
	gotoxy(10,15);
 8001110:	210f      	movs	r1, #15
 8001112:	200a      	movs	r0, #10
 8001114:	f7ff fd60 	bl	8000bd8 <gotoxy>
	printf("*");
 8001118:	202a      	movs	r0, #42	; 0x2a
 800111a:	f000 fe5f 	bl	8001ddc <putchar>
	gotoxy(20,40);
 800111e:	2128      	movs	r1, #40	; 0x28
 8001120:	2014      	movs	r0, #20
 8001122:	f7ff fd59 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 8001126:	202b      	movs	r0, #43	; 0x2b
 8001128:	f000 fe58 	bl	8001ddc <putchar>

	gotoxy(155,37);
 800112c:	2125      	movs	r1, #37	; 0x25
 800112e:	209b      	movs	r0, #155	; 0x9b
 8001130:	f7ff fd52 	bl	8000bd8 <gotoxy>
	printf("*");
 8001134:	202a      	movs	r0, #42	; 0x2a
 8001136:	f000 fe51 	bl	8001ddc <putchar>
	gotoxy(110,28);
 800113a:	211c      	movs	r1, #28
 800113c:	206e      	movs	r0, #110	; 0x6e
 800113e:	f7ff fd4b 	bl	8000bd8 <gotoxy>
	printf("*");
 8001142:	202a      	movs	r0, #42	; 0x2a
 8001144:	f000 fe4a 	bl	8001ddc <putchar>
	gotoxy(95,13);
 8001148:	210d      	movs	r1, #13
 800114a:	205f      	movs	r0, #95	; 0x5f
 800114c:	f7ff fd44 	bl	8000bd8 <gotoxy>
	printf("*");
 8001150:	202a      	movs	r0, #42	; 0x2a
 8001152:	f000 fe43 	bl	8001ddc <putchar>
	gotoxy(130,19);
 8001156:	2113      	movs	r1, #19
 8001158:	2082      	movs	r0, #130	; 0x82
 800115a:	f7ff fd3d 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 800115e:	202b      	movs	r0, #43	; 0x2b
 8001160:	f000 fe3c 	bl	8001ddc <putchar>

	gotoxy(5,27);
 8001164:	211b      	movs	r1, #27
 8001166:	2005      	movs	r0, #5
 8001168:	f7ff fd36 	bl	8000bd8 <gotoxy>
	printf("*");
 800116c:	202a      	movs	r0, #42	; 0x2a
 800116e:	f000 fe35 	bl	8001ddc <putchar>
	gotoxy(6,5);
 8001172:	2105      	movs	r1, #5
 8001174:	2006      	movs	r0, #6
 8001176:	f7ff fd2f 	bl	8000bd8 <gotoxy>
	printf("*");
 800117a:	202a      	movs	r0, #42	; 0x2a
 800117c:	f000 fe2e 	bl	8001ddc <putchar>
	gotoxy(13,13);
 8001180:	210d      	movs	r1, #13
 8001182:	200d      	movs	r0, #13
 8001184:	f7ff fd28 	bl	8000bd8 <gotoxy>
	printf("*");
 8001188:	202a      	movs	r0, #42	; 0x2a
 800118a:	f000 fe27 	bl	8001ddc <putchar>
	gotoxy(60,7);
 800118e:	2107      	movs	r1, #7
 8001190:	203c      	movs	r0, #60	; 0x3c
 8001192:	f7ff fd21 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 8001196:	202b      	movs	r0, #43	; 0x2b
 8001198:	f000 fe20 	bl	8001ddc <putchar>

	gotoxy(140,3);
 800119c:	2103      	movs	r1, #3
 800119e:	208c      	movs	r0, #140	; 0x8c
 80011a0:	f7ff fd1a 	bl	8000bd8 <gotoxy>
	printf("*");
 80011a4:	202a      	movs	r0, #42	; 0x2a
 80011a6:	f000 fe19 	bl	8001ddc <putchar>
	gotoxy(120,5);
 80011aa:	2105      	movs	r1, #5
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f7ff fd13 	bl	8000bd8 <gotoxy>
	printf("*");
 80011b2:	202a      	movs	r0, #42	; 0x2a
 80011b4:	f000 fe12 	bl	8001ddc <putchar>
	gotoxy(110,7);
 80011b8:	2107      	movs	r1, #7
 80011ba:	206e      	movs	r0, #110	; 0x6e
 80011bc:	f7ff fd0c 	bl	8000bd8 <gotoxy>
	printf("*");
 80011c0:	202a      	movs	r0, #42	; 0x2a
 80011c2:	f000 fe0b 	bl	8001ddc <putchar>
	gotoxy(70,30);
 80011c6:	211e      	movs	r1, #30
 80011c8:	2046      	movs	r0, #70	; 0x46
 80011ca:	f7ff fd05 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 80011ce:	202b      	movs	r0, #43	; 0x2b
 80011d0:	f000 fe04 	bl	8001ddc <putchar>

	gotoxy(135,33);
 80011d4:	2121      	movs	r1, #33	; 0x21
 80011d6:	2087      	movs	r0, #135	; 0x87
 80011d8:	f7ff fcfe 	bl	8000bd8 <gotoxy>
	printf("*");
 80011dc:	202a      	movs	r0, #42	; 0x2a
 80011de:	f000 fdfd 	bl	8001ddc <putchar>
	gotoxy(123,36);
 80011e2:	2124      	movs	r1, #36	; 0x24
 80011e4:	207b      	movs	r0, #123	; 0x7b
 80011e6:	f7ff fcf7 	bl	8000bd8 <gotoxy>
	printf("*");
 80011ea:	202a      	movs	r0, #42	; 0x2a
 80011ec:	f000 fdf6 	bl	8001ddc <putchar>
	gotoxy(138,40);
 80011f0:	2128      	movs	r1, #40	; 0x28
 80011f2:	208a      	movs	r0, #138	; 0x8a
 80011f4:	f7ff fcf0 	bl	8000bd8 <gotoxy>
	printf("*");
 80011f8:	202a      	movs	r0, #42	; 0x2a
 80011fa:	f000 fdef 	bl	8001ddc <putchar>
	gotoxy(127,25);
 80011fe:	2119      	movs	r1, #25
 8001200:	207f      	movs	r0, #127	; 0x7f
 8001202:	f7ff fce9 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 8001206:	202b      	movs	r0, #43	; 0x2b
 8001208:	f000 fde8 	bl	8001ddc <putchar>

	gotoxy(105,32);
 800120c:	2120      	movs	r1, #32
 800120e:	2069      	movs	r0, #105	; 0x69
 8001210:	f7ff fce2 	bl	8000bd8 <gotoxy>
	printf("%c",42);
 8001214:	202a      	movs	r0, #42	; 0x2a
 8001216:	f000 fde1 	bl	8001ddc <putchar>
	gotoxy(106,33);
 800121a:	2121      	movs	r1, #33	; 0x21
 800121c:	206a      	movs	r0, #106	; 0x6a
 800121e:	f7ff fcdb 	bl	8000bd8 <gotoxy>
	printf("%c",92);
 8001222:	205c      	movs	r0, #92	; 0x5c
 8001224:	f000 fdda 	bl	8001ddc <putchar>
	gotoxy(107,34);
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	206b      	movs	r0, #107	; 0x6b
 800122c:	f7ff fcd4 	bl	8000bd8 <gotoxy>
	printf("%c",92);
 8001230:	205c      	movs	r0, #92	; 0x5c
 8001232:	f000 fdd3 	bl	8001ddc <putchar>

	gotoxy(23,15);
 8001236:	210f      	movs	r1, #15
 8001238:	2017      	movs	r0, #23
 800123a:	f7ff fccd 	bl	8000bd8 <gotoxy>
	printf("*");
 800123e:	202a      	movs	r0, #42	; 0x2a
 8001240:	f000 fdcc 	bl	8001ddc <putchar>
	gotoxy(37,21);
 8001244:	2115      	movs	r1, #21
 8001246:	2025      	movs	r0, #37	; 0x25
 8001248:	f7ff fcc6 	bl	8000bd8 <gotoxy>
	printf("*");
 800124c:	202a      	movs	r0, #42	; 0x2a
 800124e:	f000 fdc5 	bl	8001ddc <putchar>
	gotoxy(26,24);
 8001252:	2118      	movs	r1, #24
 8001254:	201a      	movs	r0, #26
 8001256:	f7ff fcbf 	bl	8000bd8 <gotoxy>
	printf("*");
 800125a:	202a      	movs	r0, #42	; 0x2a
 800125c:	f000 fdbe 	bl	8001ddc <putchar>
	gotoxy(30,29);
 8001260:	211d      	movs	r1, #29
 8001262:	201e      	movs	r0, #30
 8001264:	f7ff fcb8 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 8001268:	202b      	movs	r0, #43	; 0x2b
 800126a:	f000 fdb7 	bl	8001ddc <putchar>

	gotoxy(25,6);
 800126e:	2106      	movs	r1, #6
 8001270:	2019      	movs	r0, #25
 8001272:	f7ff fcb1 	bl	8000bd8 <gotoxy>
	printf("*");
 8001276:	202a      	movs	r0, #42	; 0x2a
 8001278:	f000 fdb0 	bl	8001ddc <putchar>
	gotoxy(39,7);
 800127c:	2107      	movs	r1, #7
 800127e:	2027      	movs	r0, #39	; 0x27
 8001280:	f7ff fcaa 	bl	8000bd8 <gotoxy>
	printf("*");
 8001284:	202a      	movs	r0, #42	; 0x2a
 8001286:	f000 fda9 	bl	8001ddc <putchar>
	gotoxy(41,3);
 800128a:	2103      	movs	r1, #3
 800128c:	2029      	movs	r0, #41	; 0x29
 800128e:	f7ff fca3 	bl	8000bd8 <gotoxy>
	printf("*");
 8001292:	202a      	movs	r0, #42	; 0x2a
 8001294:	f000 fda2 	bl	8001ddc <putchar>
	gotoxy(75,10);
 8001298:	210a      	movs	r1, #10
 800129a:	204b      	movs	r0, #75	; 0x4b
 800129c:	f7ff fc9c 	bl	8000bd8 <gotoxy>
	printf("%c",43);
 80012a0:	202b      	movs	r0, #43	; 0x2b
 80012a2:	f000 fd9b 	bl	8001ddc <putchar>

	gotoxy(100,20);
 80012a6:	2114      	movs	r1, #20
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f7ff fc95 	bl	8000bd8 <gotoxy>
	printf("%c",197);
 80012ae:	20c5      	movs	r0, #197	; 0xc5
 80012b0:	f000 fd94 	bl	8001ddc <putchar>
	gotoxy(135,12);
 80012b4:	210c      	movs	r1, #12
 80012b6:	2087      	movs	r0, #135	; 0x87
 80012b8:	f7ff fc8e 	bl	8000bd8 <gotoxy>
	printf("%c",197);
 80012bc:	20c5      	movs	r0, #197	; 0xc5
 80012be:	f000 fd8d 	bl	8001ddc <putchar>
	gotoxy(30,5);
 80012c2:	2105      	movs	r1, #5
 80012c4:	201e      	movs	r0, #30
 80012c6:	f7ff fc87 	bl	8000bd8 <gotoxy>
	printf("%c",197);
 80012ca:	20c5      	movs	r0, #197	; 0xc5
 80012cc:	f000 fd86 	bl	8001ddc <putchar>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	3303      	adds	r3, #3
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff fc72 	bl	8000bd8 <gotoxy>
	printf("_");
 80012f4:	205f      	movs	r0, #95	; 0x5f
 80012f6:	f000 fd71 	bl	8001ddc <putchar>
	gotoxy(X,Y+3);
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	3303      	adds	r3, #3
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f7ff fc68 	bl	8000bd8 <gotoxy>
	printf("_");
 8001308:	205f      	movs	r0, #95	; 0x5f
 800130a:	f000 fd67 	bl	8001ddc <putchar>
	gotoxy(X+1,Y+3);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	3303      	adds	r3, #3
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f7ff fc5d 	bl	8000bd8 <gotoxy>
	printf("_");
 800131e:	205f      	movs	r0, #95	; 0x5f
 8001320:	f000 fd5c 	bl	8001ddc <putchar>
	gotoxy(X-2,Y+3);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	1e9a      	subs	r2, r3, #2
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	3303      	adds	r3, #3
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f7ff fc52 	bl	8000bd8 <gotoxy>
	printf("(");
 8001334:	2028      	movs	r0, #40	; 0x28
 8001336:	f000 fd51 	bl	8001ddc <putchar>
	gotoxy(X+2,Y+3);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	1c9a      	adds	r2, r3, #2
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	3303      	adds	r3, #3
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f7ff fc47 	bl	8000bd8 <gotoxy>
	printf(")");
 800134a:	2029      	movs	r0, #41	; 0x29
 800134c:	f000 fd46 	bl	8001ddc <putchar>

	gotoxy(X+3,Y+2);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	1cda      	adds	r2, r3, #3
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	3302      	adds	r3, #2
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fc3c 	bl	8000bd8 <gotoxy>
	printf("_");
 8001360:	205f      	movs	r0, #95	; 0x5f
 8001362:	f000 fd3b 	bl	8001ddc <putchar>
	gotoxy(X-3,Y+2);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	1eda      	subs	r2, r3, #3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	3302      	adds	r3, #2
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fc31 	bl	8000bd8 <gotoxy>
	printf("_");
 8001376:	205f      	movs	r0, #95	; 0x5f
 8001378:	f000 fd30 	bl	8001ddc <putchar>
	gotoxy(X+4,Y+2);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	1d1a      	adds	r2, r3, #4
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	3302      	adds	r3, #2
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff fc26 	bl	8000bd8 <gotoxy>
	printf("(");
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f000 fd25 	bl	8001ddc <putchar>
	gotoxy(X-4,Y+2);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	1f1a      	subs	r2, r3, #4
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	3302      	adds	r3, #2
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff fc1b 	bl	8000bd8 <gotoxy>
	printf(")");
 80013a2:	2029      	movs	r0, #41	; 0x29
 80013a4:	f000 fd1a 	bl	8001ddc <putchar>

	gotoxy(X-5,Y+1);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	1f5a      	subs	r2, r3, #5
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7ff fc10 	bl	8000bd8 <gotoxy>
	printf("(");
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f000 fd0f 	bl	8001ddc <putchar>
	gotoxy(X+5,Y+1);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	1d5a      	adds	r2, r3, #5
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff fc05 	bl	8000bd8 <gotoxy>
	printf("(");
 80013ce:	2028      	movs	r0, #40	; 0x28
 80013d0:	f000 fd04 	bl	8001ddc <putchar>
	gotoxy(X-6,Y);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3b06      	subs	r3, #6
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fbfb 	bl	8000bd8 <gotoxy>
	printf("(");
 80013e2:	2028      	movs	r0, #40	; 0x28
 80013e4:	f000 fcfa 	bl	8001ddc <putchar>
	gotoxy(X+6,Y);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	3306      	adds	r3, #6
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fbf1 	bl	8000bd8 <gotoxy>
	printf(")");
 80013f6:	2029      	movs	r0, #41	; 0x29
 80013f8:	f000 fcf0 	bl	8001ddc <putchar>

	gotoxy(X-5,Y-1);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	1f5a      	subs	r2, r3, #5
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	3b01      	subs	r3, #1
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fbe6 	bl	8000bd8 <gotoxy>
	printf("(");
 800140c:	2028      	movs	r0, #40	; 0x28
 800140e:	f000 fce5 	bl	8001ddc <putchar>
	gotoxy(X+5,Y-1);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	1d5a      	adds	r2, r3, #5
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	3b01      	subs	r3, #1
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fbdb 	bl	8000bd8 <gotoxy>
	printf(")");
 8001422:	2029      	movs	r0, #41	; 0x29
 8001424:	f000 fcda 	bl	8001ddc <putchar>
	gotoxy(X-4,Y-2);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	1f1a      	subs	r2, r3, #4
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	3b02      	subs	r3, #2
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f7ff fbd0 	bl	8000bd8 <gotoxy>
	printf("(");
 8001438:	2028      	movs	r0, #40	; 0x28
 800143a:	f000 fccf 	bl	8001ddc <putchar>
	gotoxy(X+4,Y-2);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	1d1a      	adds	r2, r3, #4
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	3b02      	subs	r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fbc5 	bl	8000bd8 <gotoxy>
	printf(")");
 800144e:	2029      	movs	r0, #41	; 0x29
 8001450:	f000 fcc4 	bl	8001ddc <putchar>

	gotoxy(X-3,Y-3);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	1eda      	subs	r2, r3, #3
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	3b03      	subs	r3, #3
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f7ff fbba 	bl	8000bd8 <gotoxy>
	printf("_");
 8001464:	205f      	movs	r0, #95	; 0x5f
 8001466:	f000 fcb9 	bl	8001ddc <putchar>
	gotoxy(X+3,Y-3);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	1cda      	adds	r2, r3, #3
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	3b03      	subs	r3, #3
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff fbaf 	bl	8000bd8 <gotoxy>
	printf("_");
 800147a:	205f      	movs	r0, #95	; 0x5f
 800147c:	f000 fcae 	bl	8001ddc <putchar>
	gotoxy(X-2,Y-3);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	1e9a      	subs	r2, r3, #2
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	3b03      	subs	r3, #3
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff fba4 	bl	8000bd8 <gotoxy>
	printf("(");
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f000 fca3 	bl	8001ddc <putchar>
	gotoxy(X+2,Y-3);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	1c9a      	adds	r2, r3, #2
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	3b03      	subs	r3, #3
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f7ff fb99 	bl	8000bd8 <gotoxy>
	printf(")");
 80014a6:	2029      	movs	r0, #41	; 0x29
 80014a8:	f000 fc98 	bl	8001ddc <putchar>

	gotoxy(X-1,Y-4);
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	3b04      	subs	r3, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f7ff fb8e 	bl	8000bd8 <gotoxy>
	printf("_");
 80014bc:	205f      	movs	r0, #95	; 0x5f
 80014be:	f000 fc8d 	bl	8001ddc <putchar>
	gotoxy(X,Y-4);
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	3b04      	subs	r3, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fb84 	bl	8000bd8 <gotoxy>
	printf("_");
 80014d0:	205f      	movs	r0, #95	; 0x5f
 80014d2:	f000 fc83 	bl	8001ddc <putchar>
	gotoxy(X+1,Y-4);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	3b04      	subs	r3, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff fb79 	bl	8000bd8 <gotoxy>
	printf("_");
 80014e6:	205f      	movs	r0, #95	; 0x5f
 80014e8:	f000 fc78 	bl	8001ddc <putchar>

	gotoxy(X-2,Y);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3b02      	subs	r3, #2
 80014f0:	79ba      	ldrb	r2, [r7, #6]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb6f 	bl	8000bd8 <gotoxy>
	printf("O");
 80014fa:	204f      	movs	r0, #79	; 0x4f
 80014fc:	f000 fc6e 	bl	8001ddc <putchar>
	gotoxy(X+1,Y+2);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	3302      	adds	r3, #2
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff fb64 	bl	8000bd8 <gotoxy>
	printf("o");
 8001510:	206f      	movs	r0, #111	; 0x6f
 8001512:	f000 fc63 	bl	8001ddc <putchar>
	gotoxy(X+3,Y-1);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	1cda      	adds	r2, r3, #3
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3b01      	subs	r3, #1
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fb59 	bl	8000bd8 <gotoxy>
	printf("O");
 8001526:	204f      	movs	r0, #79	; 0x4f
 8001528:	f000 fc58 	bl	8001ddc <putchar>


	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <drawhearth>:


void drawhearth(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	fgcolor(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fb21 	bl	8000b80 <fgcolor>
	gotoxy(15,1);
 800153e:	2101      	movs	r1, #1
 8001540:	200f      	movs	r0, #15
 8001542:	f7ff fb49 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 8001546:	20db      	movs	r0, #219	; 0xdb
 8001548:	f000 fc48 	bl	8001ddc <putchar>
	gotoxy(17,1);
 800154c:	2101      	movs	r1, #1
 800154e:	2011      	movs	r0, #17
 8001550:	f7ff fb42 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 8001554:	20db      	movs	r0, #219	; 0xdb
 8001556:	f000 fc41 	bl	8001ddc <putchar>
	gotoxy(16,2);
 800155a:	2102      	movs	r1, #2
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff fb3b 	bl	8000bd8 <gotoxy>
	printf("%c",223);
 8001562:	20df      	movs	r0, #223	; 0xdf
 8001564:	f000 fc3a 	bl	8001ddc <putchar>
	gotoxy(16,1);
 8001568:	2101      	movs	r1, #1
 800156a:	2010      	movs	r0, #16
 800156c:	f7ff fb34 	bl	8000bd8 <gotoxy>
	printf("%c",220);
 8001570:	20dc      	movs	r0, #220	; 0xdc
 8001572:	f000 fc33 	bl	8001ddc <putchar>


	gotoxy(19,1);
 8001576:	2101      	movs	r1, #1
 8001578:	2013      	movs	r0, #19
 800157a:	f7ff fb2d 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 800157e:	20db      	movs	r0, #219	; 0xdb
 8001580:	f000 fc2c 	bl	8001ddc <putchar>
	gotoxy(21,1);
 8001584:	2101      	movs	r1, #1
 8001586:	2015      	movs	r0, #21
 8001588:	f7ff fb26 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 800158c:	20db      	movs	r0, #219	; 0xdb
 800158e:	f000 fc25 	bl	8001ddc <putchar>
	gotoxy(20,2);
 8001592:	2102      	movs	r1, #2
 8001594:	2014      	movs	r0, #20
 8001596:	f7ff fb1f 	bl	8000bd8 <gotoxy>
	printf("%c",223);
 800159a:	20df      	movs	r0, #223	; 0xdf
 800159c:	f000 fc1e 	bl	8001ddc <putchar>
	gotoxy(20,1);
 80015a0:	2101      	movs	r1, #1
 80015a2:	2014      	movs	r0, #20
 80015a4:	f7ff fb18 	bl	8000bd8 <gotoxy>
	printf("%c",220);
 80015a8:	20dc      	movs	r0, #220	; 0xdc
 80015aa:	f000 fc17 	bl	8001ddc <putchar>


	gotoxy(23,1);
 80015ae:	2101      	movs	r1, #1
 80015b0:	2017      	movs	r0, #23
 80015b2:	f7ff fb11 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 80015b6:	20db      	movs	r0, #219	; 0xdb
 80015b8:	f000 fc10 	bl	8001ddc <putchar>
	gotoxy(25,1);
 80015bc:	2101      	movs	r1, #1
 80015be:	2019      	movs	r0, #25
 80015c0:	f7ff fb0a 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 80015c4:	20db      	movs	r0, #219	; 0xdb
 80015c6:	f000 fc09 	bl	8001ddc <putchar>
	gotoxy(24,2);
 80015ca:	2102      	movs	r1, #2
 80015cc:	2018      	movs	r0, #24
 80015ce:	f7ff fb03 	bl	8000bd8 <gotoxy>
	printf("%c",223);
 80015d2:	20df      	movs	r0, #223	; 0xdf
 80015d4:	f000 fc02 	bl	8001ddc <putchar>
	gotoxy(24,1);
 80015d8:	2101      	movs	r1, #1
 80015da:	2018      	movs	r0, #24
 80015dc:	f7ff fafc 	bl	8000bd8 <gotoxy>
	printf("%c",220);
 80015e0:	20dc      	movs	r0, #220	; 0xdc
 80015e2:	f000 fbfb 	bl	8001ddc <putchar>
	fgcolor(15);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff faca 	bl	8000b80 <fgcolor>





}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <drawMe>:

void drawBullet(){

}

void drawMe(uint8_t X, uint8_t Y){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	//middle 20,35
	gotoxy(X,Y);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	79ba      	ldrb	r2, [r7, #6]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fae6 	bl	8000bd8 <gotoxy>
	printf("%c",219);
 800160c:	20db      	movs	r0, #219	; 0xdb
 800160e:	f000 fbe5 	bl	8001ddc <putchar>
	gotoxy(X-1,Y);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	3b01      	subs	r3, #1
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fadc 	bl	8000bd8 <gotoxy>
	printf("%c",220);
 8001620:	20dc      	movs	r0, #220	; 0xdc
 8001622:	f000 fbdb 	bl	8001ddc <putchar>
	gotoxy(X+1,Y);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	3301      	adds	r3, #1
 800162a:	79ba      	ldrb	r2, [r7, #6]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fad2 	bl	8000bd8 <gotoxy>
	printf("%c",220);
 8001634:	20dc      	movs	r0, #220	; 0xdc
 8001636:	f000 fbd1 	bl	8001ddc <putchar>
	gotoxy(X-1,Y+1);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	3301      	adds	r3, #1
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7ff fac7 	bl	8000bd8 <gotoxy>
	printf("%c",223);
 800164a:	20df      	movs	r0, #223	; 0xdf
 800164c:	f000 fbc6 	bl	8001ddc <putchar>
	gotoxy(X+1,Y+1);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	3301      	adds	r3, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fabc 	bl	8000bd8 <gotoxy>
	printf("%c",223);
 8001660:	20df      	movs	r0, #223	; 0xdf
 8001662:	f000 fbbb 	bl	8001ddc <putchar>

	gotoxy(X,Y-1);
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	3b01      	subs	r3, #1
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f7ff fab2 	bl	8000bd8 <gotoxy>
	printf("%c",179);
 8001674:	20b3      	movs	r0, #179	; 0xb3
 8001676:	f000 fbb1 	bl	8001ddc <putchar>
//186
	gotoxy(X-1,Y+2);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	3302      	adds	r3, #2
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7ff faa7 	bl	8000bd8 <gotoxy>
	printf("%c",176);
 800168a:	20b0      	movs	r0, #176	; 0xb0
 800168c:	f000 fba6 	bl	8001ddc <putchar>
	gotoxy(X+1,Y+2);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	3302      	adds	r3, #2
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f7ff fa9c 	bl	8000bd8 <gotoxy>
	printf("%c",176);
 80016a0:	20b0      	movs	r0, #176	; 0xb0
 80016a2:	f000 fb9b 	bl	8001ddc <putchar>

//47 92


}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <initVariables>:
#include "spaceship.h"
#include "menu.h"
#include "graphics.h"
#include "MoonGravity.h"

void initVariables(gameState_t* gameState){
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
//	gameState->runtime=0;
	gameState->activeScreen=0; //menu screen
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	gameState->btnSelected=0; //start game
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	gameState->isDead=0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	gameState->score=0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	gameState->cityLives=3;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	//TODO: continue to initialize everything
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <main>:

void bossKey(gameState_t* gameState){}



int main(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	; 0x68
 80016f8:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 80016fa:	4a99      	ldr	r2, [pc, #612]	; (8001960 <main+0x26c>)
 80016fc:	463b      	mov	r3, r7
 80016fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001702:	e883 0003 	stmia.w	r3, {r0, r1}
 8001706:	4a97      	ldr	r2, [pc, #604]	; (8001964 <main+0x270>)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001710:	e883 0003 	stmia.w	r3, {r0, r1}
 8001714:	4a94      	ldr	r2, [pc, #592]	; (8001968 <main+0x274>)
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171e:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8001722:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8001726:	f7ff f911 	bl	800094c <uart_init>
	initVariables(&gameState);
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffbd 	bl	80016ae <initVariables>
	initTimer();
 8001734:	f7ff fc92 	bl	800105c <initTimer>
	initJoystick();
 8001738:	f7ff fb70 	bl	8000e1c <initJoystick>



	while(1){
		switch(gameState.activeScreen){
 800173c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001740:	2b03      	cmp	r3, #3
 8001742:	d8fb      	bhi.n	800173c <main+0x48>
 8001744:	a201      	add	r2, pc, #4	; (adr r2, 800174c <main+0x58>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	0800175d 	.word	0x0800175d
 8001750:	080018cb 	.word	0x080018cb
 8001754:	080018f9 	.word	0x080018f9
 8001758:	08001931 	.word	0x08001931
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 800175c:	f7ff fa2c 	bl	8000bb8 <clrscr>
			drawBox(1,1,156,43,0);//window
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	232b      	movs	r3, #43	; 0x2b
 8001766:	229c      	movs	r2, #156	; 0x9c
 8001768:	2101      	movs	r1, #1
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fa46 	bl	8000bfc <drawBox>
			drawbackground(); // stars in background
 8001770:	f7ff fcbe 	bl	80010f0 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 8001774:	f107 0218 	add.w	r2, r7, #24
 8001778:	463b      	mov	r3, r7
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f96d 	bl	8001a5c <drawMenuScreen>


			while(gameState.activeScreen==0){
 8001782:	e09c      	b.n	80018be <main+0x1ca>
				if(downIsPressed()){
 8001784:	f7ff fc3c 	bl	8001000 <downIsPressed>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <main+0xe6>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 800178e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001798:	4413      	add	r3, r2
 800179a:	3b60      	subs	r3, #96	; 0x60
 800179c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a0:	f000 f93c 	bl	8001a1c <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 80017a4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <main+0x278>)
 80017ac:	fb83 3102 	smull	r3, r1, r3, r2
 80017b0:	17d3      	asrs	r3, r2, #31
 80017b2:	1ac9      	subs	r1, r1, r3
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	1ad1      	subs	r1, r2, r3
 80017bc:	b2cb      	uxtb	r3, r1
 80017be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80017c2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017cc:	4413      	add	r3, r2
 80017ce:	3b60      	subs	r3, #96	; 0x60
 80017d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d4:	f000 f902 	bl	80019dc <drawBtnAsSelected>
 80017d8:	e028      	b.n	800182c <main+0x138>
				}
				else if(upIsPressed()){
 80017da:	f7ff fbe3 	bl	8000fa4 <upIsPressed>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d023      	beq.n	800182c <main+0x138>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80017e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017ee:	4413      	add	r3, r2
 80017f0:	3b60      	subs	r3, #96	; 0x60
 80017f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f6:	f000 f911 	bl	8001a1c <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80017fa:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <main+0x116>
 8001802:	2302      	movs	r3, #2
 8001804:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001808:	e005      	b.n	8001816 <main+0x122>
					else gameState.btnSelected=gameState.btnSelected-1;
 800180a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800180e:	3b01      	subs	r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8001816:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001820:	4413      	add	r3, r2
 8001822:	3b60      	subs	r3, #96	; 0x60
 8001824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001828:	f000 f8d8 	bl	80019dc <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 800182c:	f7ff fb8c 	bl	8000f48 <centerIsPressed>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d043      	beq.n	80018be <main+0x1ca>
					if(gameState.btnSelected==0){ //START BUTTON
 8001836:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <main+0x152>
						gameState.activeScreen=1; //Game screen
 800183e:	2301      	movs	r3, #1
 8001840:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001844:	e03b      	b.n	80018be <main+0x1ca>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8001846:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800184a:	2b01      	cmp	r3, #1
 800184c:	d130      	bne.n	80018b0 <main+0x1bc>
						gameState.difficulty=(gameState.difficulty+1)%3;
 800184e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <main+0x278>)
 8001856:	fb83 3102 	smull	r3, r1, r3, r2
 800185a:	17d3      	asrs	r3, r2, #31
 800185c:	1ac9      	subs	r1, r1, r3
 800185e:	460b      	mov	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	440b      	add	r3, r1
 8001864:	1ad1      	subs	r1, r2, r3
 8001866:	b2cb      	uxtb	r3, r1
 8001868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 800186c:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <main+0x270>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	330f      	adds	r3, #15
 8001872:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <main+0x270>)
 8001874:	7852      	ldrb	r2, [r2, #1]
 8001876:	3201      	adds	r2, #1
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f9ac 	bl	8000bd8 <gotoxy>
						if(gameState.difficulty==0){
 8001880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <main+0x19c>
							printf("EASY  ");
 8001888:	4839      	ldr	r0, [pc, #228]	; (8001970 <main+0x27c>)
 800188a:	f000 fa8f 	bl	8001dac <iprintf>
 800188e:	e016      	b.n	80018be <main+0x1ca>
						} else if(gameState.difficulty==1){
 8001890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001894:	2b01      	cmp	r3, #1
 8001896:	d103      	bne.n	80018a0 <main+0x1ac>
							printf("MEDIUM");
 8001898:	4836      	ldr	r0, [pc, #216]	; (8001974 <main+0x280>)
 800189a:	f000 fa87 	bl	8001dac <iprintf>
 800189e:	e00e      	b.n	80018be <main+0x1ca>
						} else if(gameState.difficulty==2){
 80018a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d10a      	bne.n	80018be <main+0x1ca>
							printf("HARD  ");
 80018a8:	4833      	ldr	r0, [pc, #204]	; (8001978 <main+0x284>)
 80018aa:	f000 fa7f 	bl	8001dac <iprintf>
 80018ae:	e006      	b.n	80018be <main+0x1ca>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 80018b0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d102      	bne.n	80018be <main+0x1ca>
						gameState.activeScreen=2;// help screen
 80018b8:	2302      	movs	r3, #2
 80018ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==0){
 80018be:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f43f af5e 	beq.w	8001784 <main+0x90>
					}
				}
			}
			break;
 80018c8:	e048      	b.n	800195c <main+0x268>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 80018ca:	f7ff f975 	bl	8000bb8 <clrscr>
			printf("GAME SCREEN");
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <main+0x288>)
 80018d0:	f000 fa6c 	bl	8001dac <iprintf>
			drawbackground(); // stars in background
 80018d4:	f7ff fc0c 	bl	80010f0 <drawbackground>
			drawhearth();
 80018d8:	f7ff fe2c 	bl	8001534 <drawhearth>
			drawMoon(51,17); // moon graphics
 80018dc:	2111      	movs	r1, #17
 80018de:	2033      	movs	r0, #51	; 0x33
 80018e0:	f7ff fcf8 	bl	80012d4 <drawMoon>
			drawMe(30,35);
 80018e4:	2123      	movs	r1, #35	; 0x23
 80018e6:	201e      	movs	r0, #30
 80018e8:	f7ff fe82 	bl	80015f0 <drawMe>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 80018ec:	bf00      	nop
 80018ee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d0fb      	beq.n	80018ee <main+0x1fa>

			}
			break;
 80018f6:	e031      	b.n	800195c <main+0x268>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80018f8:	f7ff f95e 	bl	8000bb8 <clrscr>
			drawBox(1,1,156,43,0);//window
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	232b      	movs	r3, #43	; 0x2b
 8001902:	229c      	movs	r2, #156	; 0x9c
 8001904:	2101      	movs	r1, #1
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff f978 	bl	8000bfc <drawBox>
			drawbackground(); // stars in background
 800190c:	f7ff fbf0 	bl	80010f0 <drawbackground>
			drawHelpScreen();
 8001910:	f000 f8c8 	bl	8001aa4 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8001914:	e007      	b.n	8001926 <main+0x232>
				if(centerIsPressed()){
 8001916:	f7ff fb17 	bl	8000f48 <centerIsPressed>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <main+0x232>
					gameState.activeScreen=0;//MENU SCREEN
 8001920:	2300      	movs	r3, #0
 8001922:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==2){
 8001926:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800192a:	2b02      	cmp	r3, #2
 800192c:	d0f3      	beq.n	8001916 <main+0x222>
				}
			}
			break;
 800192e:	e015      	b.n	800195c <main+0x268>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8001930:	f7ff f942 	bl	8000bb8 <clrscr>
			printf("GAME OVER\nYour score is %d", gameState.score);
 8001934:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001938:	4619      	mov	r1, r3
 800193a:	4811      	ldr	r0, [pc, #68]	; (8001980 <main+0x28c>)
 800193c:	f000 fa36 	bl	8001dac <iprintf>
			while(gameState.activeScreen==3){
 8001940:	e007      	b.n	8001952 <main+0x25e>
				if(centerIsPressed()){
 8001942:	f7ff fb01 	bl	8000f48 <centerIsPressed>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <main+0x25e>
					gameState.activeScreen=0;//MENU SCREEN
 800194c:	2300      	movs	r3, #0
 800194e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==3){
 8001952:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001956:	2b03      	cmp	r3, #3
 8001958:	d0f3      	beq.n	8001942 <main+0x24e>
				}
			}
			break;
 800195a:	bf00      	nop
		switch(gameState.activeScreen){
 800195c:	e6ee      	b.n	800173c <main+0x48>
 800195e:	bf00      	nop
 8001960:	08002fc0 	.word	0x08002fc0
 8001964:	08002fc8 	.word	0x08002fc8
 8001968:	08002fd0 	.word	0x08002fd0
 800196c:	55555556 	.word	0x55555556
 8001970:	08002f34 	.word	0x08002f34
 8001974:	08002f3c 	.word	0x08002f3c
 8001978:	08002f44 	.word	0x08002f44
 800197c:	08002f4c 	.word	0x08002f4c
 8001980:	08002f58 	.word	0x08002f58

08001984 <drawButton>:
 *      Author: Loren
 */

#include "menu.h"

void drawButton(button_t btn){
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af02      	add	r7, sp, #8
 800198a:	463b      	mov	r3, r7
 800198c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fc1c 	bl	80001d0 <strlen>
 8001998:	4603      	mov	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 800199c:	783b      	ldrb	r3, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	461c      	mov	r4, r3
 80019a4:	783b      	ldrb	r3, [r7, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	1d5a      	adds	r2, r3, #5
 80019ae:	787b      	ldrb	r3, [r7, #1]
 80019b0:	3302      	adds	r3, #2
 80019b2:	2100      	movs	r1, #0
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	4621      	mov	r1, r4
 80019b8:	f7ff f920 	bl	8000bfc <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80019bc:	783b      	ldrb	r3, [r7, #0]
 80019be:	3303      	adds	r3, #3
 80019c0:	787a      	ldrb	r2, [r7, #1]
 80019c2:	3201      	adds	r2, #1
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f906 	bl	8000bd8 <gotoxy>
	printf(btn.text);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f9ec 	bl	8001dac <iprintf>
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	463b      	mov	r3, r7
 80019e4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fbf0 	bl	80001d0 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 80019f4:	783b      	ldrb	r3, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	461c      	mov	r4, r3
 80019fc:	783b      	ldrb	r3, [r7, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	1d5a      	adds	r2, r3, #5
 8001a06:	787b      	ldrb	r3, [r7, #1]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	9100      	str	r1, [sp, #0]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	f7ff f8f4 	bl	8000bfc <drawBox>
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}

08001a1c <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	463b      	mov	r3, r7
 8001a24:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fbd0 	bl	80001d0 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	1d5a      	adds	r2, r3, #5
 8001a46:	787b      	ldrb	r3, [r7, #1]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	9100      	str	r1, [sp, #0]
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f7ff f8d4 	bl	8000bfc <drawBox>
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a6c:	f7ff ff8a 	bl	8001984 <drawButton>
	drawButton(btnList[1]);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3308      	adds	r3, #8
 8001a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a78:	f7ff ff84 	bl	8001984 <drawButton>
	drawButton(btnList[2]);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3310      	adds	r3, #16
 8001a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a84:	f7ff ff7e 	bl	8001984 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a98:	f7ff ffa0 	bl	80019dc <drawBtnAsSelected>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <drawHelpScreen>:


void drawHelpScreen(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	2046      	movs	r0, #70	; 0x46
 8001aac:	f7ff f894 	bl	8000bd8 <gotoxy>
	printf("HELP SCREEN");
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <drawHelpScreen+0x24>)
 8001ab2:	f000 f97b 	bl	8001dac <iprintf>
	gotoxy(60,7);
 8001ab6:	2107      	movs	r1, #7
 8001ab8:	203c      	movs	r0, #60	; 0x3c
 8001aba:	f7ff f88d 	bl	8000bd8 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <drawHelpScreen+0x28>)
 8001ac0:	f000 f974 	bl	8001dac <iprintf>

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08002f98 	.word	0x08002f98
 8001acc:	08002fa4 	.word	0x08002fa4

08001ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e00a      	b.n	8001af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf0      	blt.n	8001ae2 <_read+0x12>
	}

return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_isatty>:

int _isatty(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x50>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x16>
		heap_end = &end;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <_sbrk+0x50>)
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <_sbrk+0x54>)
 8001b88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <_sbrk+0x50>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <_sbrk+0x50>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	466a      	mov	r2, sp
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d907      	bls.n	8001bae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b9e:	f000 f8d3 	bl	8001d48 <__errno>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	e006      	b.n	8001bbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <_sbrk+0x50>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <_sbrk+0x50>)
 8001bb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200001bc 	.word	0x200001bc
 8001bc8:	200001e0 	.word	0x200001e0

08001bcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <SystemInit+0x84>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <SystemInit+0x84>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <SystemInit+0x88>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <SystemInit+0x88>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <SystemInit+0x88>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4918      	ldr	r1, [pc, #96]	; (8001c54 <SystemInit+0x88>)
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <SystemInit+0x8c>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <SystemInit+0x88>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <SystemInit+0x88>)
 8001bfe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <SystemInit+0x88>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <SystemInit+0x88>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <SystemInit+0x88>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <SystemInit+0x88>)
 8001c1a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c1e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <SystemInit+0x88>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <SystemInit+0x88>)
 8001c26:	f023 030f 	bic.w	r3, r3, #15
 8001c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <SystemInit+0x88>)
 8001c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c30:	4908      	ldr	r1, [pc, #32]	; (8001c54 <SystemInit+0x88>)
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <SystemInit+0x90>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x88>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001c3e:	f000 f80f 	bl	8001c60 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <SystemInit+0x84>)
 8001c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c48:	609a      	str	r2, [r3, #8]
#endif  
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	f87fc00c 	.word	0xf87fc00c
 8001c5c:	ff00fccc 	.word	0xff00fccc

08001c60 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <SetSysClock+0x8c>)
 8001c66:	2212      	movs	r2, #18
 8001c68:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <SetSysClock+0x90>)
 8001c6c:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <SetSysClock+0x90>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <SetSysClock+0x90>)
 8001c74:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <SetSysClock+0x90>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <SetSysClock+0x90>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <SetSysClock+0x90>)
 8001c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c84:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <SetSysClock+0x90>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <SetSysClock+0x90>)
 8001c8c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001c90:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <SetSysClock+0x90>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <SetSysClock+0x90>)
 8001c98:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001c9c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <SetSysClock+0x90>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <SetSysClock+0x90>)
 8001ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001caa:	bf00      	nop
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <SetSysClock+0x90>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f9      	beq.n	8001cac <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <SetSysClock+0x90>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <SetSysClock+0x90>)
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <SetSysClock+0x90>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <SetSysClock+0x90>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001cd0:	bf00      	nop
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <SetSysClock+0x90>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d1f9      	bne.n	8001cd2 <SetSysClock+0x72>
  {
  }
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfa:	490e      	ldr	r1, [pc, #56]	; (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d10:	4c0b      	ldr	r4, [pc, #44]	; (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d1e:	f7ff ff55 	bl	8001bcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d22:	f000 f817 	bl	8001d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d26:	f7ff fce5 	bl	80016f4 <main>

08001d2a <LoopForever>:

LoopForever:
    b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   r0, =_estack
 8001d2c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d38:	08003078 	.word	0x08003078
  ldr r2, =_sbss
 8001d3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d40:	200001dc 	.word	0x200001dc

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>
	...

08001d48 <__errno>:
 8001d48:	4b01      	ldr	r3, [pc, #4]	; (8001d50 <__errno+0x8>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2000002c 	.word	0x2000002c

08001d54 <__libc_init_array>:
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	4d0d      	ldr	r5, [pc, #52]	; (8001d8c <__libc_init_array+0x38>)
 8001d58:	4c0d      	ldr	r4, [pc, #52]	; (8001d90 <__libc_init_array+0x3c>)
 8001d5a:	1b64      	subs	r4, r4, r5
 8001d5c:	10a4      	asrs	r4, r4, #2
 8001d5e:	2600      	movs	r6, #0
 8001d60:	42a6      	cmp	r6, r4
 8001d62:	d109      	bne.n	8001d78 <__libc_init_array+0x24>
 8001d64:	4d0b      	ldr	r5, [pc, #44]	; (8001d94 <__libc_init_array+0x40>)
 8001d66:	4c0c      	ldr	r4, [pc, #48]	; (8001d98 <__libc_init_array+0x44>)
 8001d68:	f001 f898 	bl	8002e9c <_init>
 8001d6c:	1b64      	subs	r4, r4, r5
 8001d6e:	10a4      	asrs	r4, r4, #2
 8001d70:	2600      	movs	r6, #0
 8001d72:	42a6      	cmp	r6, r4
 8001d74:	d105      	bne.n	8001d82 <__libc_init_array+0x2e>
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
 8001d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7c:	4798      	blx	r3
 8001d7e:	3601      	adds	r6, #1
 8001d80:	e7ee      	b.n	8001d60 <__libc_init_array+0xc>
 8001d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d86:	4798      	blx	r3
 8001d88:	3601      	adds	r6, #1
 8001d8a:	e7f2      	b.n	8001d72 <__libc_init_array+0x1e>
 8001d8c:	08003070 	.word	0x08003070
 8001d90:	08003070 	.word	0x08003070
 8001d94:	08003070 	.word	0x08003070
 8001d98:	08003074 	.word	0x08003074

08001d9c <memset>:
 8001d9c:	4402      	add	r2, r0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d100      	bne.n	8001da6 <memset+0xa>
 8001da4:	4770      	bx	lr
 8001da6:	f803 1b01 	strb.w	r1, [r3], #1
 8001daa:	e7f9      	b.n	8001da0 <memset+0x4>

08001dac <iprintf>:
 8001dac:	b40f      	push	{r0, r1, r2, r3}
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <iprintf+0x2c>)
 8001db0:	b513      	push	{r0, r1, r4, lr}
 8001db2:	681c      	ldr	r4, [r3, #0]
 8001db4:	b124      	cbz	r4, 8001dc0 <iprintf+0x14>
 8001db6:	69a3      	ldr	r3, [r4, #24]
 8001db8:	b913      	cbnz	r3, 8001dc0 <iprintf+0x14>
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f000 fa0c 	bl	80021d8 <__sinit>
 8001dc0:	ab05      	add	r3, sp, #20
 8001dc2:	9a04      	ldr	r2, [sp, #16]
 8001dc4:	68a1      	ldr	r1, [r4, #8]
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 fbe5 	bl	8002598 <_vfiprintf_r>
 8001dce:	b002      	add	sp, #8
 8001dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dd4:	b004      	add	sp, #16
 8001dd6:	4770      	bx	lr
 8001dd8:	2000002c 	.word	0x2000002c

08001ddc <putchar>:
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <putchar+0x28>)
 8001dde:	b513      	push	{r0, r1, r4, lr}
 8001de0:	681c      	ldr	r4, [r3, #0]
 8001de2:	4601      	mov	r1, r0
 8001de4:	b134      	cbz	r4, 8001df4 <putchar+0x18>
 8001de6:	69a3      	ldr	r3, [r4, #24]
 8001de8:	b923      	cbnz	r3, 8001df4 <putchar+0x18>
 8001dea:	9001      	str	r0, [sp, #4]
 8001dec:	4620      	mov	r0, r4
 8001dee:	f000 f9f3 	bl	80021d8 <__sinit>
 8001df2:	9901      	ldr	r1, [sp, #4]
 8001df4:	68a2      	ldr	r2, [r4, #8]
 8001df6:	4620      	mov	r0, r4
 8001df8:	b002      	add	sp, #8
 8001dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dfe:	f000 be8f 	b.w	8002b20 <_putc_r>
 8001e02:	bf00      	nop
 8001e04:	2000002c 	.word	0x2000002c

08001e08 <setbuf>:
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0e:	bf0c      	ite	eq
 8001e10:	2202      	moveq	r2, #2
 8001e12:	2200      	movne	r2, #0
 8001e14:	f000 b800 	b.w	8001e18 <setvbuf>

08001e18 <setvbuf>:
 8001e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <setvbuf+0x17c>)
 8001e20:	681f      	ldr	r7, [r3, #0]
 8001e22:	4604      	mov	r4, r0
 8001e24:	460e      	mov	r6, r1
 8001e26:	4690      	mov	r8, r2
 8001e28:	b127      	cbz	r7, 8001e34 <setvbuf+0x1c>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	b913      	cbnz	r3, 8001e34 <setvbuf+0x1c>
 8001e2e:	4638      	mov	r0, r7
 8001e30:	f000 f9d2 	bl	80021d8 <__sinit>
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <setvbuf+0x180>)
 8001e36:	429c      	cmp	r4, r3
 8001e38:	d167      	bne.n	8001f0a <setvbuf+0xf2>
 8001e3a:	687c      	ldr	r4, [r7, #4]
 8001e3c:	f1b8 0f02 	cmp.w	r8, #2
 8001e40:	d006      	beq.n	8001e50 <setvbuf+0x38>
 8001e42:	f1b8 0f01 	cmp.w	r8, #1
 8001e46:	f200 809f 	bhi.w	8001f88 <setvbuf+0x170>
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	f2c0 809c 	blt.w	8001f88 <setvbuf+0x170>
 8001e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e52:	07db      	lsls	r3, r3, #31
 8001e54:	d405      	bmi.n	8001e62 <setvbuf+0x4a>
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	0598      	lsls	r0, r3, #22
 8001e5a:	d402      	bmi.n	8001e62 <setvbuf+0x4a>
 8001e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e5e:	f000 fa59 	bl	8002314 <__retarget_lock_acquire_recursive>
 8001e62:	4621      	mov	r1, r4
 8001e64:	4638      	mov	r0, r7
 8001e66:	f000 f923 	bl	80020b0 <_fflush_r>
 8001e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e6c:	b141      	cbz	r1, 8001e80 <setvbuf+0x68>
 8001e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e72:	4299      	cmp	r1, r3
 8001e74:	d002      	beq.n	8001e7c <setvbuf+0x64>
 8001e76:	4638      	mov	r0, r7
 8001e78:	f000 faba 	bl	80023f0 <_free_r>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8001e80:	2300      	movs	r3, #0
 8001e82:	61a3      	str	r3, [r4, #24]
 8001e84:	6063      	str	r3, [r4, #4]
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	0619      	lsls	r1, r3, #24
 8001e8a:	d503      	bpl.n	8001e94 <setvbuf+0x7c>
 8001e8c:	6921      	ldr	r1, [r4, #16]
 8001e8e:	4638      	mov	r0, r7
 8001e90:	f000 faae 	bl	80023f0 <_free_r>
 8001e94:	89a3      	ldrh	r3, [r4, #12]
 8001e96:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f1b8 0f02 	cmp.w	r8, #2
 8001ea2:	81a3      	strh	r3, [r4, #12]
 8001ea4:	d06c      	beq.n	8001f80 <setvbuf+0x168>
 8001ea6:	ab01      	add	r3, sp, #4
 8001ea8:	466a      	mov	r2, sp
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4638      	mov	r0, r7
 8001eae:	f000 fa33 	bl	8002318 <__swhatbuf_r>
 8001eb2:	89a3      	ldrh	r3, [r4, #12]
 8001eb4:	4318      	orrs	r0, r3
 8001eb6:	81a0      	strh	r0, [r4, #12]
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	d130      	bne.n	8001f1e <setvbuf+0x106>
 8001ebc:	9d00      	ldr	r5, [sp, #0]
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f000 fa8e 	bl	80023e0 <malloc>
 8001ec4:	4606      	mov	r6, r0
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d155      	bne.n	8001f76 <setvbuf+0x15e>
 8001eca:	f8dd 9000 	ldr.w	r9, [sp]
 8001ece:	45a9      	cmp	r9, r5
 8001ed0:	d14a      	bne.n	8001f68 <setvbuf+0x150>
 8001ed2:	f04f 35ff 	mov.w	r5, #4294967295
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60a2      	str	r2, [r4, #8]
 8001eda:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001ede:	6022      	str	r2, [r4, #0]
 8001ee0:	6122      	str	r2, [r4, #16]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee8:	6162      	str	r2, [r4, #20]
 8001eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	07d2      	lsls	r2, r2, #31
 8001ef2:	81a3      	strh	r3, [r4, #12]
 8001ef4:	d405      	bmi.n	8001f02 <setvbuf+0xea>
 8001ef6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001efa:	d102      	bne.n	8001f02 <setvbuf+0xea>
 8001efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001efe:	f000 fa0a 	bl	8002316 <__retarget_lock_release_recursive>
 8001f02:	4628      	mov	r0, r5
 8001f04:	b003      	add	sp, #12
 8001f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <setvbuf+0x184>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	d101      	bne.n	8001f14 <setvbuf+0xfc>
 8001f10:	68bc      	ldr	r4, [r7, #8]
 8001f12:	e793      	b.n	8001e3c <setvbuf+0x24>
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <setvbuf+0x188>)
 8001f16:	429c      	cmp	r4, r3
 8001f18:	bf08      	it	eq
 8001f1a:	68fc      	ldreq	r4, [r7, #12]
 8001f1c:	e78e      	b.n	8001e3c <setvbuf+0x24>
 8001f1e:	2e00      	cmp	r6, #0
 8001f20:	d0cd      	beq.n	8001ebe <setvbuf+0xa6>
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	b913      	cbnz	r3, 8001f2c <setvbuf+0x114>
 8001f26:	4638      	mov	r0, r7
 8001f28:	f000 f956 	bl	80021d8 <__sinit>
 8001f2c:	f1b8 0f01 	cmp.w	r8, #1
 8001f30:	bf08      	it	eq
 8001f32:	89a3      	ldrheq	r3, [r4, #12]
 8001f34:	6026      	str	r6, [r4, #0]
 8001f36:	bf04      	itt	eq
 8001f38:	f043 0301 	orreq.w	r3, r3, #1
 8001f3c:	81a3      	strheq	r3, [r4, #12]
 8001f3e:	89a2      	ldrh	r2, [r4, #12]
 8001f40:	f012 0308 	ands.w	r3, r2, #8
 8001f44:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001f48:	d01c      	beq.n	8001f84 <setvbuf+0x16c>
 8001f4a:	07d3      	lsls	r3, r2, #31
 8001f4c:	bf41      	itttt	mi
 8001f4e:	2300      	movmi	r3, #0
 8001f50:	426d      	negmi	r5, r5
 8001f52:	60a3      	strmi	r3, [r4, #8]
 8001f54:	61a5      	strmi	r5, [r4, #24]
 8001f56:	bf58      	it	pl
 8001f58:	60a5      	strpl	r5, [r4, #8]
 8001f5a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001f5c:	f015 0501 	ands.w	r5, r5, #1
 8001f60:	d115      	bne.n	8001f8e <setvbuf+0x176>
 8001f62:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001f66:	e7c8      	b.n	8001efa <setvbuf+0xe2>
 8001f68:	4648      	mov	r0, r9
 8001f6a:	f000 fa39 	bl	80023e0 <malloc>
 8001f6e:	4606      	mov	r6, r0
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d0ae      	beq.n	8001ed2 <setvbuf+0xba>
 8001f74:	464d      	mov	r5, r9
 8001f76:	89a3      	ldrh	r3, [r4, #12]
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	81a3      	strh	r3, [r4, #12]
 8001f7e:	e7d0      	b.n	8001f22 <setvbuf+0x10a>
 8001f80:	2500      	movs	r5, #0
 8001f82:	e7a8      	b.n	8001ed6 <setvbuf+0xbe>
 8001f84:	60a3      	str	r3, [r4, #8]
 8001f86:	e7e8      	b.n	8001f5a <setvbuf+0x142>
 8001f88:	f04f 35ff 	mov.w	r5, #4294967295
 8001f8c:	e7b9      	b.n	8001f02 <setvbuf+0xea>
 8001f8e:	2500      	movs	r5, #0
 8001f90:	e7b7      	b.n	8001f02 <setvbuf+0xea>
 8001f92:	bf00      	nop
 8001f94:	2000002c 	.word	0x2000002c
 8001f98:	08002ffc 	.word	0x08002ffc
 8001f9c:	0800301c 	.word	0x0800301c
 8001fa0:	08002fdc 	.word	0x08002fdc

08001fa4 <__sflush_r>:
 8001fa4:	898a      	ldrh	r2, [r1, #12]
 8001fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001faa:	4605      	mov	r5, r0
 8001fac:	0710      	lsls	r0, r2, #28
 8001fae:	460c      	mov	r4, r1
 8001fb0:	d458      	bmi.n	8002064 <__sflush_r+0xc0>
 8001fb2:	684b      	ldr	r3, [r1, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dc05      	bgt.n	8001fc4 <__sflush_r+0x20>
 8001fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dc02      	bgt.n	8001fc4 <__sflush_r+0x20>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	d0f9      	beq.n	8001fbe <__sflush_r+0x1a>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fd0:	682f      	ldr	r7, [r5, #0]
 8001fd2:	602b      	str	r3, [r5, #0]
 8001fd4:	d032      	beq.n	800203c <__sflush_r+0x98>
 8001fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fd8:	89a3      	ldrh	r3, [r4, #12]
 8001fda:	075a      	lsls	r2, r3, #29
 8001fdc:	d505      	bpl.n	8001fea <__sflush_r+0x46>
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	1ac0      	subs	r0, r0, r3
 8001fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fe4:	b10b      	cbz	r3, 8001fea <__sflush_r+0x46>
 8001fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe8:	1ac0      	subs	r0, r0, r3
 8001fea:	2300      	movs	r3, #0
 8001fec:	4602      	mov	r2, r0
 8001fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ff0:	6a21      	ldr	r1, [r4, #32]
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	47b0      	blx	r6
 8001ff6:	1c43      	adds	r3, r0, #1
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	d106      	bne.n	800200a <__sflush_r+0x66>
 8001ffc:	6829      	ldr	r1, [r5, #0]
 8001ffe:	291d      	cmp	r1, #29
 8002000:	d82c      	bhi.n	800205c <__sflush_r+0xb8>
 8002002:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <__sflush_r+0x108>)
 8002004:	40ca      	lsrs	r2, r1
 8002006:	07d6      	lsls	r6, r2, #31
 8002008:	d528      	bpl.n	800205c <__sflush_r+0xb8>
 800200a:	2200      	movs	r2, #0
 800200c:	6062      	str	r2, [r4, #4]
 800200e:	04d9      	lsls	r1, r3, #19
 8002010:	6922      	ldr	r2, [r4, #16]
 8002012:	6022      	str	r2, [r4, #0]
 8002014:	d504      	bpl.n	8002020 <__sflush_r+0x7c>
 8002016:	1c42      	adds	r2, r0, #1
 8002018:	d101      	bne.n	800201e <__sflush_r+0x7a>
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	b903      	cbnz	r3, 8002020 <__sflush_r+0x7c>
 800201e:	6560      	str	r0, [r4, #84]	; 0x54
 8002020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002022:	602f      	str	r7, [r5, #0]
 8002024:	2900      	cmp	r1, #0
 8002026:	d0ca      	beq.n	8001fbe <__sflush_r+0x1a>
 8002028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800202c:	4299      	cmp	r1, r3
 800202e:	d002      	beq.n	8002036 <__sflush_r+0x92>
 8002030:	4628      	mov	r0, r5
 8002032:	f000 f9dd 	bl	80023f0 <_free_r>
 8002036:	2000      	movs	r0, #0
 8002038:	6360      	str	r0, [r4, #52]	; 0x34
 800203a:	e7c1      	b.n	8001fc0 <__sflush_r+0x1c>
 800203c:	6a21      	ldr	r1, [r4, #32]
 800203e:	2301      	movs	r3, #1
 8002040:	4628      	mov	r0, r5
 8002042:	47b0      	blx	r6
 8002044:	1c41      	adds	r1, r0, #1
 8002046:	d1c7      	bne.n	8001fd8 <__sflush_r+0x34>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0c4      	beq.n	8001fd8 <__sflush_r+0x34>
 800204e:	2b1d      	cmp	r3, #29
 8002050:	d001      	beq.n	8002056 <__sflush_r+0xb2>
 8002052:	2b16      	cmp	r3, #22
 8002054:	d101      	bne.n	800205a <__sflush_r+0xb6>
 8002056:	602f      	str	r7, [r5, #0]
 8002058:	e7b1      	b.n	8001fbe <__sflush_r+0x1a>
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002060:	81a3      	strh	r3, [r4, #12]
 8002062:	e7ad      	b.n	8001fc0 <__sflush_r+0x1c>
 8002064:	690f      	ldr	r7, [r1, #16]
 8002066:	2f00      	cmp	r7, #0
 8002068:	d0a9      	beq.n	8001fbe <__sflush_r+0x1a>
 800206a:	0793      	lsls	r3, r2, #30
 800206c:	680e      	ldr	r6, [r1, #0]
 800206e:	bf08      	it	eq
 8002070:	694b      	ldreq	r3, [r1, #20]
 8002072:	600f      	str	r7, [r1, #0]
 8002074:	bf18      	it	ne
 8002076:	2300      	movne	r3, #0
 8002078:	eba6 0807 	sub.w	r8, r6, r7
 800207c:	608b      	str	r3, [r1, #8]
 800207e:	f1b8 0f00 	cmp.w	r8, #0
 8002082:	dd9c      	ble.n	8001fbe <__sflush_r+0x1a>
 8002084:	6a21      	ldr	r1, [r4, #32]
 8002086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002088:	4643      	mov	r3, r8
 800208a:	463a      	mov	r2, r7
 800208c:	4628      	mov	r0, r5
 800208e:	47b0      	blx	r6
 8002090:	2800      	cmp	r0, #0
 8002092:	dc06      	bgt.n	80020a2 <__sflush_r+0xfe>
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209a:	81a3      	strh	r3, [r4, #12]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	e78e      	b.n	8001fc0 <__sflush_r+0x1c>
 80020a2:	4407      	add	r7, r0
 80020a4:	eba8 0800 	sub.w	r8, r8, r0
 80020a8:	e7e9      	b.n	800207e <__sflush_r+0xda>
 80020aa:	bf00      	nop
 80020ac:	20400001 	.word	0x20400001

080020b0 <_fflush_r>:
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	690b      	ldr	r3, [r1, #16]
 80020b4:	4605      	mov	r5, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	b913      	cbnz	r3, 80020c0 <_fflush_r+0x10>
 80020ba:	2500      	movs	r5, #0
 80020bc:	4628      	mov	r0, r5
 80020be:	bd38      	pop	{r3, r4, r5, pc}
 80020c0:	b118      	cbz	r0, 80020ca <_fflush_r+0x1a>
 80020c2:	6983      	ldr	r3, [r0, #24]
 80020c4:	b90b      	cbnz	r3, 80020ca <_fflush_r+0x1a>
 80020c6:	f000 f887 	bl	80021d8 <__sinit>
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <_fflush_r+0x6c>)
 80020cc:	429c      	cmp	r4, r3
 80020ce:	d11b      	bne.n	8002108 <_fflush_r+0x58>
 80020d0:	686c      	ldr	r4, [r5, #4]
 80020d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <_fflush_r+0xa>
 80020da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020dc:	07d0      	lsls	r0, r2, #31
 80020de:	d404      	bmi.n	80020ea <_fflush_r+0x3a>
 80020e0:	0599      	lsls	r1, r3, #22
 80020e2:	d402      	bmi.n	80020ea <_fflush_r+0x3a>
 80020e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020e6:	f000 f915 	bl	8002314 <__retarget_lock_acquire_recursive>
 80020ea:	4628      	mov	r0, r5
 80020ec:	4621      	mov	r1, r4
 80020ee:	f7ff ff59 	bl	8001fa4 <__sflush_r>
 80020f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f4:	07da      	lsls	r2, r3, #31
 80020f6:	4605      	mov	r5, r0
 80020f8:	d4e0      	bmi.n	80020bc <_fflush_r+0xc>
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	059b      	lsls	r3, r3, #22
 80020fe:	d4dd      	bmi.n	80020bc <_fflush_r+0xc>
 8002100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002102:	f000 f908 	bl	8002316 <__retarget_lock_release_recursive>
 8002106:	e7d9      	b.n	80020bc <_fflush_r+0xc>
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <_fflush_r+0x70>)
 800210a:	429c      	cmp	r4, r3
 800210c:	d101      	bne.n	8002112 <_fflush_r+0x62>
 800210e:	68ac      	ldr	r4, [r5, #8]
 8002110:	e7df      	b.n	80020d2 <_fflush_r+0x22>
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <_fflush_r+0x74>)
 8002114:	429c      	cmp	r4, r3
 8002116:	bf08      	it	eq
 8002118:	68ec      	ldreq	r4, [r5, #12]
 800211a:	e7da      	b.n	80020d2 <_fflush_r+0x22>
 800211c:	08002ffc 	.word	0x08002ffc
 8002120:	0800301c 	.word	0x0800301c
 8002124:	08002fdc 	.word	0x08002fdc

08002128 <std>:
 8002128:	2300      	movs	r3, #0
 800212a:	b510      	push	{r4, lr}
 800212c:	4604      	mov	r4, r0
 800212e:	e9c0 3300 	strd	r3, r3, [r0]
 8002132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002136:	6083      	str	r3, [r0, #8]
 8002138:	8181      	strh	r1, [r0, #12]
 800213a:	6643      	str	r3, [r0, #100]	; 0x64
 800213c:	81c2      	strh	r2, [r0, #14]
 800213e:	6183      	str	r3, [r0, #24]
 8002140:	4619      	mov	r1, r3
 8002142:	2208      	movs	r2, #8
 8002144:	305c      	adds	r0, #92	; 0x5c
 8002146:	f7ff fe29 	bl	8001d9c <memset>
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <std+0x38>)
 800214c:	6263      	str	r3, [r4, #36]	; 0x24
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <std+0x3c>)
 8002150:	62a3      	str	r3, [r4, #40]	; 0x28
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <std+0x40>)
 8002154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <std+0x44>)
 8002158:	6224      	str	r4, [r4, #32]
 800215a:	6323      	str	r3, [r4, #48]	; 0x30
 800215c:	bd10      	pop	{r4, pc}
 800215e:	bf00      	nop
 8002160:	08002bd1 	.word	0x08002bd1
 8002164:	08002bf3 	.word	0x08002bf3
 8002168:	08002c2b 	.word	0x08002c2b
 800216c:	08002c4f 	.word	0x08002c4f

08002170 <_cleanup_r>:
 8002170:	4901      	ldr	r1, [pc, #4]	; (8002178 <_cleanup_r+0x8>)
 8002172:	f000 b8af 	b.w	80022d4 <_fwalk_reent>
 8002176:	bf00      	nop
 8002178:	080020b1 	.word	0x080020b1

0800217c <__sfmoreglue>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	1e4a      	subs	r2, r1, #1
 8002180:	2568      	movs	r5, #104	; 0x68
 8002182:	4355      	muls	r5, r2
 8002184:	460e      	mov	r6, r1
 8002186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800218a:	f000 f981 	bl	8002490 <_malloc_r>
 800218e:	4604      	mov	r4, r0
 8002190:	b140      	cbz	r0, 80021a4 <__sfmoreglue+0x28>
 8002192:	2100      	movs	r1, #0
 8002194:	e9c0 1600 	strd	r1, r6, [r0]
 8002198:	300c      	adds	r0, #12
 800219a:	60a0      	str	r0, [r4, #8]
 800219c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021a0:	f7ff fdfc 	bl	8001d9c <memset>
 80021a4:	4620      	mov	r0, r4
 80021a6:	bd70      	pop	{r4, r5, r6, pc}

080021a8 <__sfp_lock_acquire>:
 80021a8:	4801      	ldr	r0, [pc, #4]	; (80021b0 <__sfp_lock_acquire+0x8>)
 80021aa:	f000 b8b3 	b.w	8002314 <__retarget_lock_acquire_recursive>
 80021ae:	bf00      	nop
 80021b0:	200001d4 	.word	0x200001d4

080021b4 <__sfp_lock_release>:
 80021b4:	4801      	ldr	r0, [pc, #4]	; (80021bc <__sfp_lock_release+0x8>)
 80021b6:	f000 b8ae 	b.w	8002316 <__retarget_lock_release_recursive>
 80021ba:	bf00      	nop
 80021bc:	200001d4 	.word	0x200001d4

080021c0 <__sinit_lock_acquire>:
 80021c0:	4801      	ldr	r0, [pc, #4]	; (80021c8 <__sinit_lock_acquire+0x8>)
 80021c2:	f000 b8a7 	b.w	8002314 <__retarget_lock_acquire_recursive>
 80021c6:	bf00      	nop
 80021c8:	200001cf 	.word	0x200001cf

080021cc <__sinit_lock_release>:
 80021cc:	4801      	ldr	r0, [pc, #4]	; (80021d4 <__sinit_lock_release+0x8>)
 80021ce:	f000 b8a2 	b.w	8002316 <__retarget_lock_release_recursive>
 80021d2:	bf00      	nop
 80021d4:	200001cf 	.word	0x200001cf

080021d8 <__sinit>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	4604      	mov	r4, r0
 80021dc:	f7ff fff0 	bl	80021c0 <__sinit_lock_acquire>
 80021e0:	69a3      	ldr	r3, [r4, #24]
 80021e2:	b11b      	cbz	r3, 80021ec <__sinit+0x14>
 80021e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021e8:	f7ff bff0 	b.w	80021cc <__sinit_lock_release>
 80021ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80021f0:	6523      	str	r3, [r4, #80]	; 0x50
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <__sinit+0x68>)
 80021f4:	4a13      	ldr	r2, [pc, #76]	; (8002244 <__sinit+0x6c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80021fa:	42a3      	cmp	r3, r4
 80021fc:	bf04      	itt	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	61a3      	streq	r3, [r4, #24]
 8002202:	4620      	mov	r0, r4
 8002204:	f000 f820 	bl	8002248 <__sfp>
 8002208:	6060      	str	r0, [r4, #4]
 800220a:	4620      	mov	r0, r4
 800220c:	f000 f81c 	bl	8002248 <__sfp>
 8002210:	60a0      	str	r0, [r4, #8]
 8002212:	4620      	mov	r0, r4
 8002214:	f000 f818 	bl	8002248 <__sfp>
 8002218:	2200      	movs	r2, #0
 800221a:	60e0      	str	r0, [r4, #12]
 800221c:	2104      	movs	r1, #4
 800221e:	6860      	ldr	r0, [r4, #4]
 8002220:	f7ff ff82 	bl	8002128 <std>
 8002224:	68a0      	ldr	r0, [r4, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	2109      	movs	r1, #9
 800222a:	f7ff ff7d 	bl	8002128 <std>
 800222e:	68e0      	ldr	r0, [r4, #12]
 8002230:	2202      	movs	r2, #2
 8002232:	2112      	movs	r1, #18
 8002234:	f7ff ff78 	bl	8002128 <std>
 8002238:	2301      	movs	r3, #1
 800223a:	61a3      	str	r3, [r4, #24]
 800223c:	e7d2      	b.n	80021e4 <__sinit+0xc>
 800223e:	bf00      	nop
 8002240:	08002fd8 	.word	0x08002fd8
 8002244:	08002171 	.word	0x08002171

08002248 <__sfp>:
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	4607      	mov	r7, r0
 800224c:	f7ff ffac 	bl	80021a8 <__sfp_lock_acquire>
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <__sfp+0x84>)
 8002252:	681e      	ldr	r6, [r3, #0]
 8002254:	69b3      	ldr	r3, [r6, #24]
 8002256:	b913      	cbnz	r3, 800225e <__sfp+0x16>
 8002258:	4630      	mov	r0, r6
 800225a:	f7ff ffbd 	bl	80021d8 <__sinit>
 800225e:	3648      	adds	r6, #72	; 0x48
 8002260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002264:	3b01      	subs	r3, #1
 8002266:	d503      	bpl.n	8002270 <__sfp+0x28>
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	b30b      	cbz	r3, 80022b0 <__sfp+0x68>
 800226c:	6836      	ldr	r6, [r6, #0]
 800226e:	e7f7      	b.n	8002260 <__sfp+0x18>
 8002270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002274:	b9d5      	cbnz	r5, 80022ac <__sfp+0x64>
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <__sfp+0x88>)
 8002278:	60e3      	str	r3, [r4, #12]
 800227a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800227e:	6665      	str	r5, [r4, #100]	; 0x64
 8002280:	f000 f847 	bl	8002312 <__retarget_lock_init_recursive>
 8002284:	f7ff ff96 	bl	80021b4 <__sfp_lock_release>
 8002288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800228c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002290:	6025      	str	r5, [r4, #0]
 8002292:	61a5      	str	r5, [r4, #24]
 8002294:	2208      	movs	r2, #8
 8002296:	4629      	mov	r1, r5
 8002298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800229c:	f7ff fd7e 	bl	8001d9c <memset>
 80022a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022a8:	4620      	mov	r0, r4
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ac:	3468      	adds	r4, #104	; 0x68
 80022ae:	e7d9      	b.n	8002264 <__sfp+0x1c>
 80022b0:	2104      	movs	r1, #4
 80022b2:	4638      	mov	r0, r7
 80022b4:	f7ff ff62 	bl	800217c <__sfmoreglue>
 80022b8:	4604      	mov	r4, r0
 80022ba:	6030      	str	r0, [r6, #0]
 80022bc:	2800      	cmp	r0, #0
 80022be:	d1d5      	bne.n	800226c <__sfp+0x24>
 80022c0:	f7ff ff78 	bl	80021b4 <__sfp_lock_release>
 80022c4:	230c      	movs	r3, #12
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	e7ee      	b.n	80022a8 <__sfp+0x60>
 80022ca:	bf00      	nop
 80022cc:	08002fd8 	.word	0x08002fd8
 80022d0:	ffff0001 	.word	0xffff0001

080022d4 <_fwalk_reent>:
 80022d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d8:	4606      	mov	r6, r0
 80022da:	4688      	mov	r8, r1
 80022dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022e0:	2700      	movs	r7, #0
 80022e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022e6:	f1b9 0901 	subs.w	r9, r9, #1
 80022ea:	d505      	bpl.n	80022f8 <_fwalk_reent+0x24>
 80022ec:	6824      	ldr	r4, [r4, #0]
 80022ee:	2c00      	cmp	r4, #0
 80022f0:	d1f7      	bne.n	80022e2 <_fwalk_reent+0xe>
 80022f2:	4638      	mov	r0, r7
 80022f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f8:	89ab      	ldrh	r3, [r5, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d907      	bls.n	800230e <_fwalk_reent+0x3a>
 80022fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002302:	3301      	adds	r3, #1
 8002304:	d003      	beq.n	800230e <_fwalk_reent+0x3a>
 8002306:	4629      	mov	r1, r5
 8002308:	4630      	mov	r0, r6
 800230a:	47c0      	blx	r8
 800230c:	4307      	orrs	r7, r0
 800230e:	3568      	adds	r5, #104	; 0x68
 8002310:	e7e9      	b.n	80022e6 <_fwalk_reent+0x12>

08002312 <__retarget_lock_init_recursive>:
 8002312:	4770      	bx	lr

08002314 <__retarget_lock_acquire_recursive>:
 8002314:	4770      	bx	lr

08002316 <__retarget_lock_release_recursive>:
 8002316:	4770      	bx	lr

08002318 <__swhatbuf_r>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	460e      	mov	r6, r1
 800231c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002320:	2900      	cmp	r1, #0
 8002322:	b096      	sub	sp, #88	; 0x58
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	da07      	bge.n	800233a <__swhatbuf_r+0x22>
 800232a:	2300      	movs	r3, #0
 800232c:	602b      	str	r3, [r5, #0]
 800232e:	89b3      	ldrh	r3, [r6, #12]
 8002330:	061a      	lsls	r2, r3, #24
 8002332:	d410      	bmi.n	8002356 <__swhatbuf_r+0x3e>
 8002334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002338:	e00e      	b.n	8002358 <__swhatbuf_r+0x40>
 800233a:	466a      	mov	r2, sp
 800233c:	f000 fd5c 	bl	8002df8 <_fstat_r>
 8002340:	2800      	cmp	r0, #0
 8002342:	dbf2      	blt.n	800232a <__swhatbuf_r+0x12>
 8002344:	9a01      	ldr	r2, [sp, #4]
 8002346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800234a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800234e:	425a      	negs	r2, r3
 8002350:	415a      	adcs	r2, r3
 8002352:	602a      	str	r2, [r5, #0]
 8002354:	e7ee      	b.n	8002334 <__swhatbuf_r+0x1c>
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	2000      	movs	r0, #0
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	b016      	add	sp, #88	; 0x58
 800235e:	bd70      	pop	{r4, r5, r6, pc}

08002360 <__smakebuf_r>:
 8002360:	898b      	ldrh	r3, [r1, #12]
 8002362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002364:	079d      	lsls	r5, r3, #30
 8002366:	4606      	mov	r6, r0
 8002368:	460c      	mov	r4, r1
 800236a:	d507      	bpl.n	800237c <__smakebuf_r+0x1c>
 800236c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	6123      	str	r3, [r4, #16]
 8002374:	2301      	movs	r3, #1
 8002376:	6163      	str	r3, [r4, #20]
 8002378:	b002      	add	sp, #8
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	ab01      	add	r3, sp, #4
 800237e:	466a      	mov	r2, sp
 8002380:	f7ff ffca 	bl	8002318 <__swhatbuf_r>
 8002384:	9900      	ldr	r1, [sp, #0]
 8002386:	4605      	mov	r5, r0
 8002388:	4630      	mov	r0, r6
 800238a:	f000 f881 	bl	8002490 <_malloc_r>
 800238e:	b948      	cbnz	r0, 80023a4 <__smakebuf_r+0x44>
 8002390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002394:	059a      	lsls	r2, r3, #22
 8002396:	d4ef      	bmi.n	8002378 <__smakebuf_r+0x18>
 8002398:	f023 0303 	bic.w	r3, r3, #3
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	81a3      	strh	r3, [r4, #12]
 80023a2:	e7e3      	b.n	800236c <__smakebuf_r+0xc>
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <__smakebuf_r+0x7c>)
 80023a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	6020      	str	r0, [r4, #0]
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	9b00      	ldr	r3, [sp, #0]
 80023b4:	6163      	str	r3, [r4, #20]
 80023b6:	9b01      	ldr	r3, [sp, #4]
 80023b8:	6120      	str	r0, [r4, #16]
 80023ba:	b15b      	cbz	r3, 80023d4 <__smakebuf_r+0x74>
 80023bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 fd2b 	bl	8002e1c <_isatty_r>
 80023c6:	b128      	cbz	r0, 80023d4 <__smakebuf_r+0x74>
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	81a3      	strh	r3, [r4, #12]
 80023d4:	89a0      	ldrh	r0, [r4, #12]
 80023d6:	4305      	orrs	r5, r0
 80023d8:	81a5      	strh	r5, [r4, #12]
 80023da:	e7cd      	b.n	8002378 <__smakebuf_r+0x18>
 80023dc:	08002171 	.word	0x08002171

080023e0 <malloc>:
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <malloc+0xc>)
 80023e2:	4601      	mov	r1, r0
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	f000 b853 	b.w	8002490 <_malloc_r>
 80023ea:	bf00      	nop
 80023ec:	2000002c 	.word	0x2000002c

080023f0 <_free_r>:
 80023f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d048      	beq.n	8002488 <_free_r+0x98>
 80023f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023fa:	9001      	str	r0, [sp, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f1a1 0404 	sub.w	r4, r1, #4
 8002402:	bfb8      	it	lt
 8002404:	18e4      	addlt	r4, r4, r3
 8002406:	f000 fd2b 	bl	8002e60 <__malloc_lock>
 800240a:	4a20      	ldr	r2, [pc, #128]	; (800248c <_free_r+0x9c>)
 800240c:	9801      	ldr	r0, [sp, #4]
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	4615      	mov	r5, r2
 8002412:	b933      	cbnz	r3, 8002422 <_free_r+0x32>
 8002414:	6063      	str	r3, [r4, #4]
 8002416:	6014      	str	r4, [r2, #0]
 8002418:	b003      	add	sp, #12
 800241a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800241e:	f000 bd25 	b.w	8002e6c <__malloc_unlock>
 8002422:	42a3      	cmp	r3, r4
 8002424:	d90b      	bls.n	800243e <_free_r+0x4e>
 8002426:	6821      	ldr	r1, [r4, #0]
 8002428:	1862      	adds	r2, r4, r1
 800242a:	4293      	cmp	r3, r2
 800242c:	bf04      	itt	eq
 800242e:	681a      	ldreq	r2, [r3, #0]
 8002430:	685b      	ldreq	r3, [r3, #4]
 8002432:	6063      	str	r3, [r4, #4]
 8002434:	bf04      	itt	eq
 8002436:	1852      	addeq	r2, r2, r1
 8002438:	6022      	streq	r2, [r4, #0]
 800243a:	602c      	str	r4, [r5, #0]
 800243c:	e7ec      	b.n	8002418 <_free_r+0x28>
 800243e:	461a      	mov	r2, r3
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	b10b      	cbz	r3, 8002448 <_free_r+0x58>
 8002444:	42a3      	cmp	r3, r4
 8002446:	d9fa      	bls.n	800243e <_free_r+0x4e>
 8002448:	6811      	ldr	r1, [r2, #0]
 800244a:	1855      	adds	r5, r2, r1
 800244c:	42a5      	cmp	r5, r4
 800244e:	d10b      	bne.n	8002468 <_free_r+0x78>
 8002450:	6824      	ldr	r4, [r4, #0]
 8002452:	4421      	add	r1, r4
 8002454:	1854      	adds	r4, r2, r1
 8002456:	42a3      	cmp	r3, r4
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	d1dd      	bne.n	8002418 <_free_r+0x28>
 800245c:	681c      	ldr	r4, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	6053      	str	r3, [r2, #4]
 8002462:	4421      	add	r1, r4
 8002464:	6011      	str	r1, [r2, #0]
 8002466:	e7d7      	b.n	8002418 <_free_r+0x28>
 8002468:	d902      	bls.n	8002470 <_free_r+0x80>
 800246a:	230c      	movs	r3, #12
 800246c:	6003      	str	r3, [r0, #0]
 800246e:	e7d3      	b.n	8002418 <_free_r+0x28>
 8002470:	6825      	ldr	r5, [r4, #0]
 8002472:	1961      	adds	r1, r4, r5
 8002474:	428b      	cmp	r3, r1
 8002476:	bf04      	itt	eq
 8002478:	6819      	ldreq	r1, [r3, #0]
 800247a:	685b      	ldreq	r3, [r3, #4]
 800247c:	6063      	str	r3, [r4, #4]
 800247e:	bf04      	itt	eq
 8002480:	1949      	addeq	r1, r1, r5
 8002482:	6021      	streq	r1, [r4, #0]
 8002484:	6054      	str	r4, [r2, #4]
 8002486:	e7c7      	b.n	8002418 <_free_r+0x28>
 8002488:	b003      	add	sp, #12
 800248a:	bd30      	pop	{r4, r5, pc}
 800248c:	200001c0 	.word	0x200001c0

08002490 <_malloc_r>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	1ccd      	adds	r5, r1, #3
 8002494:	f025 0503 	bic.w	r5, r5, #3
 8002498:	3508      	adds	r5, #8
 800249a:	2d0c      	cmp	r5, #12
 800249c:	bf38      	it	cc
 800249e:	250c      	movcc	r5, #12
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	4606      	mov	r6, r0
 80024a4:	db01      	blt.n	80024aa <_malloc_r+0x1a>
 80024a6:	42a9      	cmp	r1, r5
 80024a8:	d903      	bls.n	80024b2 <_malloc_r+0x22>
 80024aa:	230c      	movs	r3, #12
 80024ac:	6033      	str	r3, [r6, #0]
 80024ae:	2000      	movs	r0, #0
 80024b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b2:	f000 fcd5 	bl	8002e60 <__malloc_lock>
 80024b6:	4921      	ldr	r1, [pc, #132]	; (800253c <_malloc_r+0xac>)
 80024b8:	680a      	ldr	r2, [r1, #0]
 80024ba:	4614      	mov	r4, r2
 80024bc:	b99c      	cbnz	r4, 80024e6 <_malloc_r+0x56>
 80024be:	4f20      	ldr	r7, [pc, #128]	; (8002540 <_malloc_r+0xb0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b923      	cbnz	r3, 80024ce <_malloc_r+0x3e>
 80024c4:	4621      	mov	r1, r4
 80024c6:	4630      	mov	r0, r6
 80024c8:	f000 fb72 	bl	8002bb0 <_sbrk_r>
 80024cc:	6038      	str	r0, [r7, #0]
 80024ce:	4629      	mov	r1, r5
 80024d0:	4630      	mov	r0, r6
 80024d2:	f000 fb6d 	bl	8002bb0 <_sbrk_r>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	d123      	bne.n	8002522 <_malloc_r+0x92>
 80024da:	230c      	movs	r3, #12
 80024dc:	6033      	str	r3, [r6, #0]
 80024de:	4630      	mov	r0, r6
 80024e0:	f000 fcc4 	bl	8002e6c <__malloc_unlock>
 80024e4:	e7e3      	b.n	80024ae <_malloc_r+0x1e>
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	1b5b      	subs	r3, r3, r5
 80024ea:	d417      	bmi.n	800251c <_malloc_r+0x8c>
 80024ec:	2b0b      	cmp	r3, #11
 80024ee:	d903      	bls.n	80024f8 <_malloc_r+0x68>
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	441c      	add	r4, r3
 80024f4:	6025      	str	r5, [r4, #0]
 80024f6:	e004      	b.n	8002502 <_malloc_r+0x72>
 80024f8:	6863      	ldr	r3, [r4, #4]
 80024fa:	42a2      	cmp	r2, r4
 80024fc:	bf0c      	ite	eq
 80024fe:	600b      	streq	r3, [r1, #0]
 8002500:	6053      	strne	r3, [r2, #4]
 8002502:	4630      	mov	r0, r6
 8002504:	f000 fcb2 	bl	8002e6c <__malloc_unlock>
 8002508:	f104 000b 	add.w	r0, r4, #11
 800250c:	1d23      	adds	r3, r4, #4
 800250e:	f020 0007 	bic.w	r0, r0, #7
 8002512:	1ac2      	subs	r2, r0, r3
 8002514:	d0cc      	beq.n	80024b0 <_malloc_r+0x20>
 8002516:	1a1b      	subs	r3, r3, r0
 8002518:	50a3      	str	r3, [r4, r2]
 800251a:	e7c9      	b.n	80024b0 <_malloc_r+0x20>
 800251c:	4622      	mov	r2, r4
 800251e:	6864      	ldr	r4, [r4, #4]
 8002520:	e7cc      	b.n	80024bc <_malloc_r+0x2c>
 8002522:	1cc4      	adds	r4, r0, #3
 8002524:	f024 0403 	bic.w	r4, r4, #3
 8002528:	42a0      	cmp	r0, r4
 800252a:	d0e3      	beq.n	80024f4 <_malloc_r+0x64>
 800252c:	1a21      	subs	r1, r4, r0
 800252e:	4630      	mov	r0, r6
 8002530:	f000 fb3e 	bl	8002bb0 <_sbrk_r>
 8002534:	3001      	adds	r0, #1
 8002536:	d1dd      	bne.n	80024f4 <_malloc_r+0x64>
 8002538:	e7cf      	b.n	80024da <_malloc_r+0x4a>
 800253a:	bf00      	nop
 800253c:	200001c0 	.word	0x200001c0
 8002540:	200001c4 	.word	0x200001c4

08002544 <__sfputc_r>:
 8002544:	6893      	ldr	r3, [r2, #8]
 8002546:	3b01      	subs	r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	b410      	push	{r4}
 800254c:	6093      	str	r3, [r2, #8]
 800254e:	da08      	bge.n	8002562 <__sfputc_r+0x1e>
 8002550:	6994      	ldr	r4, [r2, #24]
 8002552:	42a3      	cmp	r3, r4
 8002554:	db01      	blt.n	800255a <__sfputc_r+0x16>
 8002556:	290a      	cmp	r1, #10
 8002558:	d103      	bne.n	8002562 <__sfputc_r+0x1e>
 800255a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800255e:	f000 bb7b 	b.w	8002c58 <__swbuf_r>
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	1c58      	adds	r0, r3, #1
 8002566:	6010      	str	r0, [r2, #0]
 8002568:	7019      	strb	r1, [r3, #0]
 800256a:	4608      	mov	r0, r1
 800256c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002570:	4770      	bx	lr

08002572 <__sfputs_r>:
 8002572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002574:	4606      	mov	r6, r0
 8002576:	460f      	mov	r7, r1
 8002578:	4614      	mov	r4, r2
 800257a:	18d5      	adds	r5, r2, r3
 800257c:	42ac      	cmp	r4, r5
 800257e:	d101      	bne.n	8002584 <__sfputs_r+0x12>
 8002580:	2000      	movs	r0, #0
 8002582:	e007      	b.n	8002594 <__sfputs_r+0x22>
 8002584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002588:	463a      	mov	r2, r7
 800258a:	4630      	mov	r0, r6
 800258c:	f7ff ffda 	bl	8002544 <__sfputc_r>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d1f3      	bne.n	800257c <__sfputs_r+0xa>
 8002594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002598 <_vfiprintf_r>:
 8002598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800259c:	460d      	mov	r5, r1
 800259e:	b09d      	sub	sp, #116	; 0x74
 80025a0:	4614      	mov	r4, r2
 80025a2:	4698      	mov	r8, r3
 80025a4:	4606      	mov	r6, r0
 80025a6:	b118      	cbz	r0, 80025b0 <_vfiprintf_r+0x18>
 80025a8:	6983      	ldr	r3, [r0, #24]
 80025aa:	b90b      	cbnz	r3, 80025b0 <_vfiprintf_r+0x18>
 80025ac:	f7ff fe14 	bl	80021d8 <__sinit>
 80025b0:	4b89      	ldr	r3, [pc, #548]	; (80027d8 <_vfiprintf_r+0x240>)
 80025b2:	429d      	cmp	r5, r3
 80025b4:	d11b      	bne.n	80025ee <_vfiprintf_r+0x56>
 80025b6:	6875      	ldr	r5, [r6, #4]
 80025b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025ba:	07d9      	lsls	r1, r3, #31
 80025bc:	d405      	bmi.n	80025ca <_vfiprintf_r+0x32>
 80025be:	89ab      	ldrh	r3, [r5, #12]
 80025c0:	059a      	lsls	r2, r3, #22
 80025c2:	d402      	bmi.n	80025ca <_vfiprintf_r+0x32>
 80025c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025c6:	f7ff fea5 	bl	8002314 <__retarget_lock_acquire_recursive>
 80025ca:	89ab      	ldrh	r3, [r5, #12]
 80025cc:	071b      	lsls	r3, r3, #28
 80025ce:	d501      	bpl.n	80025d4 <_vfiprintf_r+0x3c>
 80025d0:	692b      	ldr	r3, [r5, #16]
 80025d2:	b9eb      	cbnz	r3, 8002610 <_vfiprintf_r+0x78>
 80025d4:	4629      	mov	r1, r5
 80025d6:	4630      	mov	r0, r6
 80025d8:	f000 fb90 	bl	8002cfc <__swsetup_r>
 80025dc:	b1c0      	cbz	r0, 8002610 <_vfiprintf_r+0x78>
 80025de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025e0:	07dc      	lsls	r4, r3, #31
 80025e2:	d50e      	bpl.n	8002602 <_vfiprintf_r+0x6a>
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	b01d      	add	sp, #116	; 0x74
 80025ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ee:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <_vfiprintf_r+0x244>)
 80025f0:	429d      	cmp	r5, r3
 80025f2:	d101      	bne.n	80025f8 <_vfiprintf_r+0x60>
 80025f4:	68b5      	ldr	r5, [r6, #8]
 80025f6:	e7df      	b.n	80025b8 <_vfiprintf_r+0x20>
 80025f8:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <_vfiprintf_r+0x248>)
 80025fa:	429d      	cmp	r5, r3
 80025fc:	bf08      	it	eq
 80025fe:	68f5      	ldreq	r5, [r6, #12]
 8002600:	e7da      	b.n	80025b8 <_vfiprintf_r+0x20>
 8002602:	89ab      	ldrh	r3, [r5, #12]
 8002604:	0598      	lsls	r0, r3, #22
 8002606:	d4ed      	bmi.n	80025e4 <_vfiprintf_r+0x4c>
 8002608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800260a:	f7ff fe84 	bl	8002316 <__retarget_lock_release_recursive>
 800260e:	e7e9      	b.n	80025e4 <_vfiprintf_r+0x4c>
 8002610:	2300      	movs	r3, #0
 8002612:	9309      	str	r3, [sp, #36]	; 0x24
 8002614:	2320      	movs	r3, #32
 8002616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800261a:	f8cd 800c 	str.w	r8, [sp, #12]
 800261e:	2330      	movs	r3, #48	; 0x30
 8002620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80027e4 <_vfiprintf_r+0x24c>
 8002624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002628:	f04f 0901 	mov.w	r9, #1
 800262c:	4623      	mov	r3, r4
 800262e:	469a      	mov	sl, r3
 8002630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002634:	b10a      	cbz	r2, 800263a <_vfiprintf_r+0xa2>
 8002636:	2a25      	cmp	r2, #37	; 0x25
 8002638:	d1f9      	bne.n	800262e <_vfiprintf_r+0x96>
 800263a:	ebba 0b04 	subs.w	fp, sl, r4
 800263e:	d00b      	beq.n	8002658 <_vfiprintf_r+0xc0>
 8002640:	465b      	mov	r3, fp
 8002642:	4622      	mov	r2, r4
 8002644:	4629      	mov	r1, r5
 8002646:	4630      	mov	r0, r6
 8002648:	f7ff ff93 	bl	8002572 <__sfputs_r>
 800264c:	3001      	adds	r0, #1
 800264e:	f000 80aa 	beq.w	80027a6 <_vfiprintf_r+0x20e>
 8002652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002654:	445a      	add	r2, fp
 8002656:	9209      	str	r2, [sp, #36]	; 0x24
 8002658:	f89a 3000 	ldrb.w	r3, [sl]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a2 	beq.w	80027a6 <_vfiprintf_r+0x20e>
 8002662:	2300      	movs	r3, #0
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800266c:	f10a 0a01 	add.w	sl, sl, #1
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	9307      	str	r3, [sp, #28]
 8002674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002678:	931a      	str	r3, [sp, #104]	; 0x68
 800267a:	4654      	mov	r4, sl
 800267c:	2205      	movs	r2, #5
 800267e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002682:	4858      	ldr	r0, [pc, #352]	; (80027e4 <_vfiprintf_r+0x24c>)
 8002684:	f7fd fdac 	bl	80001e0 <memchr>
 8002688:	9a04      	ldr	r2, [sp, #16]
 800268a:	b9d8      	cbnz	r0, 80026c4 <_vfiprintf_r+0x12c>
 800268c:	06d1      	lsls	r1, r2, #27
 800268e:	bf44      	itt	mi
 8002690:	2320      	movmi	r3, #32
 8002692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002696:	0713      	lsls	r3, r2, #28
 8002698:	bf44      	itt	mi
 800269a:	232b      	movmi	r3, #43	; 0x2b
 800269c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a0:	f89a 3000 	ldrb.w	r3, [sl]
 80026a4:	2b2a      	cmp	r3, #42	; 0x2a
 80026a6:	d015      	beq.n	80026d4 <_vfiprintf_r+0x13c>
 80026a8:	9a07      	ldr	r2, [sp, #28]
 80026aa:	4654      	mov	r4, sl
 80026ac:	2000      	movs	r0, #0
 80026ae:	f04f 0c0a 	mov.w	ip, #10
 80026b2:	4621      	mov	r1, r4
 80026b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026b8:	3b30      	subs	r3, #48	; 0x30
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d94e      	bls.n	800275c <_vfiprintf_r+0x1c4>
 80026be:	b1b0      	cbz	r0, 80026ee <_vfiprintf_r+0x156>
 80026c0:	9207      	str	r2, [sp, #28]
 80026c2:	e014      	b.n	80026ee <_vfiprintf_r+0x156>
 80026c4:	eba0 0308 	sub.w	r3, r0, r8
 80026c8:	fa09 f303 	lsl.w	r3, r9, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	46a2      	mov	sl, r4
 80026d2:	e7d2      	b.n	800267a <_vfiprintf_r+0xe2>
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	1d19      	adds	r1, r3, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	9103      	str	r1, [sp, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bfbb      	ittet	lt
 80026e0:	425b      	neglt	r3, r3
 80026e2:	f042 0202 	orrlt.w	r2, r2, #2
 80026e6:	9307      	strge	r3, [sp, #28]
 80026e8:	9307      	strlt	r3, [sp, #28]
 80026ea:	bfb8      	it	lt
 80026ec:	9204      	strlt	r2, [sp, #16]
 80026ee:	7823      	ldrb	r3, [r4, #0]
 80026f0:	2b2e      	cmp	r3, #46	; 0x2e
 80026f2:	d10c      	bne.n	800270e <_vfiprintf_r+0x176>
 80026f4:	7863      	ldrb	r3, [r4, #1]
 80026f6:	2b2a      	cmp	r3, #42	; 0x2a
 80026f8:	d135      	bne.n	8002766 <_vfiprintf_r+0x1ce>
 80026fa:	9b03      	ldr	r3, [sp, #12]
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	9203      	str	r2, [sp, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	bfb8      	it	lt
 8002706:	f04f 33ff 	movlt.w	r3, #4294967295
 800270a:	3402      	adds	r4, #2
 800270c:	9305      	str	r3, [sp, #20]
 800270e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80027f4 <_vfiprintf_r+0x25c>
 8002712:	7821      	ldrb	r1, [r4, #0]
 8002714:	2203      	movs	r2, #3
 8002716:	4650      	mov	r0, sl
 8002718:	f7fd fd62 	bl	80001e0 <memchr>
 800271c:	b140      	cbz	r0, 8002730 <_vfiprintf_r+0x198>
 800271e:	2340      	movs	r3, #64	; 0x40
 8002720:	eba0 000a 	sub.w	r0, r0, sl
 8002724:	fa03 f000 	lsl.w	r0, r3, r0
 8002728:	9b04      	ldr	r3, [sp, #16]
 800272a:	4303      	orrs	r3, r0
 800272c:	3401      	adds	r4, #1
 800272e:	9304      	str	r3, [sp, #16]
 8002730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002734:	482c      	ldr	r0, [pc, #176]	; (80027e8 <_vfiprintf_r+0x250>)
 8002736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800273a:	2206      	movs	r2, #6
 800273c:	f7fd fd50 	bl	80001e0 <memchr>
 8002740:	2800      	cmp	r0, #0
 8002742:	d03f      	beq.n	80027c4 <_vfiprintf_r+0x22c>
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <_vfiprintf_r+0x254>)
 8002746:	bb1b      	cbnz	r3, 8002790 <_vfiprintf_r+0x1f8>
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	3307      	adds	r3, #7
 800274c:	f023 0307 	bic.w	r3, r3, #7
 8002750:	3308      	adds	r3, #8
 8002752:	9303      	str	r3, [sp, #12]
 8002754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002756:	443b      	add	r3, r7
 8002758:	9309      	str	r3, [sp, #36]	; 0x24
 800275a:	e767      	b.n	800262c <_vfiprintf_r+0x94>
 800275c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002760:	460c      	mov	r4, r1
 8002762:	2001      	movs	r0, #1
 8002764:	e7a5      	b.n	80026b2 <_vfiprintf_r+0x11a>
 8002766:	2300      	movs	r3, #0
 8002768:	3401      	adds	r4, #1
 800276a:	9305      	str	r3, [sp, #20]
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 0c0a 	mov.w	ip, #10
 8002772:	4620      	mov	r0, r4
 8002774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002778:	3a30      	subs	r2, #48	; 0x30
 800277a:	2a09      	cmp	r2, #9
 800277c:	d903      	bls.n	8002786 <_vfiprintf_r+0x1ee>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0c5      	beq.n	800270e <_vfiprintf_r+0x176>
 8002782:	9105      	str	r1, [sp, #20]
 8002784:	e7c3      	b.n	800270e <_vfiprintf_r+0x176>
 8002786:	fb0c 2101 	mla	r1, ip, r1, r2
 800278a:	4604      	mov	r4, r0
 800278c:	2301      	movs	r3, #1
 800278e:	e7f0      	b.n	8002772 <_vfiprintf_r+0x1da>
 8002790:	ab03      	add	r3, sp, #12
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	462a      	mov	r2, r5
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <_vfiprintf_r+0x258>)
 8002798:	a904      	add	r1, sp, #16
 800279a:	4630      	mov	r0, r6
 800279c:	f3af 8000 	nop.w
 80027a0:	4607      	mov	r7, r0
 80027a2:	1c78      	adds	r0, r7, #1
 80027a4:	d1d6      	bne.n	8002754 <_vfiprintf_r+0x1bc>
 80027a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027a8:	07d9      	lsls	r1, r3, #31
 80027aa:	d405      	bmi.n	80027b8 <_vfiprintf_r+0x220>
 80027ac:	89ab      	ldrh	r3, [r5, #12]
 80027ae:	059a      	lsls	r2, r3, #22
 80027b0:	d402      	bmi.n	80027b8 <_vfiprintf_r+0x220>
 80027b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027b4:	f7ff fdaf 	bl	8002316 <__retarget_lock_release_recursive>
 80027b8:	89ab      	ldrh	r3, [r5, #12]
 80027ba:	065b      	lsls	r3, r3, #25
 80027bc:	f53f af12 	bmi.w	80025e4 <_vfiprintf_r+0x4c>
 80027c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c2:	e711      	b.n	80025e8 <_vfiprintf_r+0x50>
 80027c4:	ab03      	add	r3, sp, #12
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	462a      	mov	r2, r5
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <_vfiprintf_r+0x258>)
 80027cc:	a904      	add	r1, sp, #16
 80027ce:	4630      	mov	r0, r6
 80027d0:	f000 f880 	bl	80028d4 <_printf_i>
 80027d4:	e7e4      	b.n	80027a0 <_vfiprintf_r+0x208>
 80027d6:	bf00      	nop
 80027d8:	08002ffc 	.word	0x08002ffc
 80027dc:	0800301c 	.word	0x0800301c
 80027e0:	08002fdc 	.word	0x08002fdc
 80027e4:	0800303c 	.word	0x0800303c
 80027e8:	08003046 	.word	0x08003046
 80027ec:	00000000 	.word	0x00000000
 80027f0:	08002573 	.word	0x08002573
 80027f4:	08003042 	.word	0x08003042

080027f8 <_printf_common>:
 80027f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027fc:	4616      	mov	r6, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	688a      	ldr	r2, [r1, #8]
 8002802:	690b      	ldr	r3, [r1, #16]
 8002804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002808:	4293      	cmp	r3, r2
 800280a:	bfb8      	it	lt
 800280c:	4613      	movlt	r3, r2
 800280e:	6033      	str	r3, [r6, #0]
 8002810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002814:	4607      	mov	r7, r0
 8002816:	460c      	mov	r4, r1
 8002818:	b10a      	cbz	r2, 800281e <_printf_common+0x26>
 800281a:	3301      	adds	r3, #1
 800281c:	6033      	str	r3, [r6, #0]
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	0699      	lsls	r1, r3, #26
 8002822:	bf42      	ittt	mi
 8002824:	6833      	ldrmi	r3, [r6, #0]
 8002826:	3302      	addmi	r3, #2
 8002828:	6033      	strmi	r3, [r6, #0]
 800282a:	6825      	ldr	r5, [r4, #0]
 800282c:	f015 0506 	ands.w	r5, r5, #6
 8002830:	d106      	bne.n	8002840 <_printf_common+0x48>
 8002832:	f104 0a19 	add.w	sl, r4, #25
 8002836:	68e3      	ldr	r3, [r4, #12]
 8002838:	6832      	ldr	r2, [r6, #0]
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	42ab      	cmp	r3, r5
 800283e:	dc26      	bgt.n	800288e <_printf_common+0x96>
 8002840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002844:	1e13      	subs	r3, r2, #0
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	bf18      	it	ne
 800284a:	2301      	movne	r3, #1
 800284c:	0692      	lsls	r2, r2, #26
 800284e:	d42b      	bmi.n	80028a8 <_printf_common+0xb0>
 8002850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002854:	4649      	mov	r1, r9
 8002856:	4638      	mov	r0, r7
 8002858:	47c0      	blx	r8
 800285a:	3001      	adds	r0, #1
 800285c:	d01e      	beq.n	800289c <_printf_common+0xa4>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	68e5      	ldr	r5, [r4, #12]
 8002862:	6832      	ldr	r2, [r6, #0]
 8002864:	f003 0306 	and.w	r3, r3, #6
 8002868:	2b04      	cmp	r3, #4
 800286a:	bf08      	it	eq
 800286c:	1aad      	subeq	r5, r5, r2
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	6922      	ldr	r2, [r4, #16]
 8002872:	bf0c      	ite	eq
 8002874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002878:	2500      	movne	r5, #0
 800287a:	4293      	cmp	r3, r2
 800287c:	bfc4      	itt	gt
 800287e:	1a9b      	subgt	r3, r3, r2
 8002880:	18ed      	addgt	r5, r5, r3
 8002882:	2600      	movs	r6, #0
 8002884:	341a      	adds	r4, #26
 8002886:	42b5      	cmp	r5, r6
 8002888:	d11a      	bne.n	80028c0 <_printf_common+0xc8>
 800288a:	2000      	movs	r0, #0
 800288c:	e008      	b.n	80028a0 <_printf_common+0xa8>
 800288e:	2301      	movs	r3, #1
 8002890:	4652      	mov	r2, sl
 8002892:	4649      	mov	r1, r9
 8002894:	4638      	mov	r0, r7
 8002896:	47c0      	blx	r8
 8002898:	3001      	adds	r0, #1
 800289a:	d103      	bne.n	80028a4 <_printf_common+0xac>
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a4:	3501      	adds	r5, #1
 80028a6:	e7c6      	b.n	8002836 <_printf_common+0x3e>
 80028a8:	18e1      	adds	r1, r4, r3
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	2030      	movs	r0, #48	; 0x30
 80028ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b2:	4422      	add	r2, r4
 80028b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028bc:	3302      	adds	r3, #2
 80028be:	e7c7      	b.n	8002850 <_printf_common+0x58>
 80028c0:	2301      	movs	r3, #1
 80028c2:	4622      	mov	r2, r4
 80028c4:	4649      	mov	r1, r9
 80028c6:	4638      	mov	r0, r7
 80028c8:	47c0      	blx	r8
 80028ca:	3001      	adds	r0, #1
 80028cc:	d0e6      	beq.n	800289c <_printf_common+0xa4>
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7d9      	b.n	8002886 <_printf_common+0x8e>
	...

080028d4 <_printf_i>:
 80028d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	460c      	mov	r4, r1
 80028da:	4691      	mov	r9, r2
 80028dc:	7e27      	ldrb	r7, [r4, #24]
 80028de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028e0:	2f78      	cmp	r7, #120	; 0x78
 80028e2:	4680      	mov	r8, r0
 80028e4:	469a      	mov	sl, r3
 80028e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028ea:	d807      	bhi.n	80028fc <_printf_i+0x28>
 80028ec:	2f62      	cmp	r7, #98	; 0x62
 80028ee:	d80a      	bhi.n	8002906 <_printf_i+0x32>
 80028f0:	2f00      	cmp	r7, #0
 80028f2:	f000 80d8 	beq.w	8002aa6 <_printf_i+0x1d2>
 80028f6:	2f58      	cmp	r7, #88	; 0x58
 80028f8:	f000 80a3 	beq.w	8002a42 <_printf_i+0x16e>
 80028fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002904:	e03a      	b.n	800297c <_printf_i+0xa8>
 8002906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800290a:	2b15      	cmp	r3, #21
 800290c:	d8f6      	bhi.n	80028fc <_printf_i+0x28>
 800290e:	a001      	add	r0, pc, #4	; (adr r0, 8002914 <_printf_i+0x40>)
 8002910:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002914:	0800296d 	.word	0x0800296d
 8002918:	08002981 	.word	0x08002981
 800291c:	080028fd 	.word	0x080028fd
 8002920:	080028fd 	.word	0x080028fd
 8002924:	080028fd 	.word	0x080028fd
 8002928:	080028fd 	.word	0x080028fd
 800292c:	08002981 	.word	0x08002981
 8002930:	080028fd 	.word	0x080028fd
 8002934:	080028fd 	.word	0x080028fd
 8002938:	080028fd 	.word	0x080028fd
 800293c:	080028fd 	.word	0x080028fd
 8002940:	08002a8d 	.word	0x08002a8d
 8002944:	080029b1 	.word	0x080029b1
 8002948:	08002a6f 	.word	0x08002a6f
 800294c:	080028fd 	.word	0x080028fd
 8002950:	080028fd 	.word	0x080028fd
 8002954:	08002aaf 	.word	0x08002aaf
 8002958:	080028fd 	.word	0x080028fd
 800295c:	080029b1 	.word	0x080029b1
 8002960:	080028fd 	.word	0x080028fd
 8002964:	080028fd 	.word	0x080028fd
 8002968:	08002a77 	.word	0x08002a77
 800296c:	680b      	ldr	r3, [r1, #0]
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	600a      	str	r2, [r1, #0]
 8002974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800297c:	2301      	movs	r3, #1
 800297e:	e0a3      	b.n	8002ac8 <_printf_i+0x1f4>
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	6808      	ldr	r0, [r1, #0]
 8002984:	062e      	lsls	r6, r5, #24
 8002986:	f100 0304 	add.w	r3, r0, #4
 800298a:	d50a      	bpl.n	80029a2 <_printf_i+0xce>
 800298c:	6805      	ldr	r5, [r0, #0]
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	2d00      	cmp	r5, #0
 8002992:	da03      	bge.n	800299c <_printf_i+0xc8>
 8002994:	232d      	movs	r3, #45	; 0x2d
 8002996:	426d      	negs	r5, r5
 8002998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800299c:	485e      	ldr	r0, [pc, #376]	; (8002b18 <_printf_i+0x244>)
 800299e:	230a      	movs	r3, #10
 80029a0:	e019      	b.n	80029d6 <_printf_i+0x102>
 80029a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029a6:	6805      	ldr	r5, [r0, #0]
 80029a8:	600b      	str	r3, [r1, #0]
 80029aa:	bf18      	it	ne
 80029ac:	b22d      	sxthne	r5, r5
 80029ae:	e7ef      	b.n	8002990 <_printf_i+0xbc>
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	1d18      	adds	r0, r3, #4
 80029b6:	6008      	str	r0, [r1, #0]
 80029b8:	0628      	lsls	r0, r5, #24
 80029ba:	d501      	bpl.n	80029c0 <_printf_i+0xec>
 80029bc:	681d      	ldr	r5, [r3, #0]
 80029be:	e002      	b.n	80029c6 <_printf_i+0xf2>
 80029c0:	0669      	lsls	r1, r5, #25
 80029c2:	d5fb      	bpl.n	80029bc <_printf_i+0xe8>
 80029c4:	881d      	ldrh	r5, [r3, #0]
 80029c6:	4854      	ldr	r0, [pc, #336]	; (8002b18 <_printf_i+0x244>)
 80029c8:	2f6f      	cmp	r7, #111	; 0x6f
 80029ca:	bf0c      	ite	eq
 80029cc:	2308      	moveq	r3, #8
 80029ce:	230a      	movne	r3, #10
 80029d0:	2100      	movs	r1, #0
 80029d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029d6:	6866      	ldr	r6, [r4, #4]
 80029d8:	60a6      	str	r6, [r4, #8]
 80029da:	2e00      	cmp	r6, #0
 80029dc:	bfa2      	ittt	ge
 80029de:	6821      	ldrge	r1, [r4, #0]
 80029e0:	f021 0104 	bicge.w	r1, r1, #4
 80029e4:	6021      	strge	r1, [r4, #0]
 80029e6:	b90d      	cbnz	r5, 80029ec <_printf_i+0x118>
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	d04d      	beq.n	8002a88 <_printf_i+0x1b4>
 80029ec:	4616      	mov	r6, r2
 80029ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80029f2:	fb03 5711 	mls	r7, r3, r1, r5
 80029f6:	5dc7      	ldrb	r7, [r0, r7]
 80029f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029fc:	462f      	mov	r7, r5
 80029fe:	42bb      	cmp	r3, r7
 8002a00:	460d      	mov	r5, r1
 8002a02:	d9f4      	bls.n	80029ee <_printf_i+0x11a>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d10b      	bne.n	8002a20 <_printf_i+0x14c>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	07df      	lsls	r7, r3, #31
 8002a0c:	d508      	bpl.n	8002a20 <_printf_i+0x14c>
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	6861      	ldr	r1, [r4, #4]
 8002a12:	4299      	cmp	r1, r3
 8002a14:	bfde      	ittt	le
 8002a16:	2330      	movle	r3, #48	; 0x30
 8002a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a20:	1b92      	subs	r2, r2, r6
 8002a22:	6122      	str	r2, [r4, #16]
 8002a24:	f8cd a000 	str.w	sl, [sp]
 8002a28:	464b      	mov	r3, r9
 8002a2a:	aa03      	add	r2, sp, #12
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	4640      	mov	r0, r8
 8002a30:	f7ff fee2 	bl	80027f8 <_printf_common>
 8002a34:	3001      	adds	r0, #1
 8002a36:	d14c      	bne.n	8002ad2 <_printf_i+0x1fe>
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	b004      	add	sp, #16
 8002a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a42:	4835      	ldr	r0, [pc, #212]	; (8002b18 <_printf_i+0x244>)
 8002a44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	680e      	ldr	r6, [r1, #0]
 8002a4c:	061f      	lsls	r7, r3, #24
 8002a4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a52:	600e      	str	r6, [r1, #0]
 8002a54:	d514      	bpl.n	8002a80 <_printf_i+0x1ac>
 8002a56:	07d9      	lsls	r1, r3, #31
 8002a58:	bf44      	itt	mi
 8002a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a5e:	6023      	strmi	r3, [r4, #0]
 8002a60:	b91d      	cbnz	r5, 8002a6a <_printf_i+0x196>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f023 0320 	bic.w	r3, r3, #32
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	e7b0      	b.n	80029d0 <_printf_i+0xfc>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	2378      	movs	r3, #120	; 0x78
 8002a78:	4828      	ldr	r0, [pc, #160]	; (8002b1c <_printf_i+0x248>)
 8002a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a7e:	e7e3      	b.n	8002a48 <_printf_i+0x174>
 8002a80:	065e      	lsls	r6, r3, #25
 8002a82:	bf48      	it	mi
 8002a84:	b2ad      	uxthmi	r5, r5
 8002a86:	e7e6      	b.n	8002a56 <_printf_i+0x182>
 8002a88:	4616      	mov	r6, r2
 8002a8a:	e7bb      	b.n	8002a04 <_printf_i+0x130>
 8002a8c:	680b      	ldr	r3, [r1, #0]
 8002a8e:	6826      	ldr	r6, [r4, #0]
 8002a90:	6960      	ldr	r0, [r4, #20]
 8002a92:	1d1d      	adds	r5, r3, #4
 8002a94:	600d      	str	r5, [r1, #0]
 8002a96:	0635      	lsls	r5, r6, #24
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	d501      	bpl.n	8002aa0 <_printf_i+0x1cc>
 8002a9c:	6018      	str	r0, [r3, #0]
 8002a9e:	e002      	b.n	8002aa6 <_printf_i+0x1d2>
 8002aa0:	0671      	lsls	r1, r6, #25
 8002aa2:	d5fb      	bpl.n	8002a9c <_printf_i+0x1c8>
 8002aa4:	8018      	strh	r0, [r3, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6123      	str	r3, [r4, #16]
 8002aaa:	4616      	mov	r6, r2
 8002aac:	e7ba      	b.n	8002a24 <_printf_i+0x150>
 8002aae:	680b      	ldr	r3, [r1, #0]
 8002ab0:	1d1a      	adds	r2, r3, #4
 8002ab2:	600a      	str	r2, [r1, #0]
 8002ab4:	681e      	ldr	r6, [r3, #0]
 8002ab6:	6862      	ldr	r2, [r4, #4]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4630      	mov	r0, r6
 8002abc:	f7fd fb90 	bl	80001e0 <memchr>
 8002ac0:	b108      	cbz	r0, 8002ac6 <_printf_i+0x1f2>
 8002ac2:	1b80      	subs	r0, r0, r6
 8002ac4:	6060      	str	r0, [r4, #4]
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	6123      	str	r3, [r4, #16]
 8002aca:	2300      	movs	r3, #0
 8002acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ad0:	e7a8      	b.n	8002a24 <_printf_i+0x150>
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	4632      	mov	r2, r6
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	4640      	mov	r0, r8
 8002ada:	47d0      	blx	sl
 8002adc:	3001      	adds	r0, #1
 8002ade:	d0ab      	beq.n	8002a38 <_printf_i+0x164>
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	079b      	lsls	r3, r3, #30
 8002ae4:	d413      	bmi.n	8002b0e <_printf_i+0x23a>
 8002ae6:	68e0      	ldr	r0, [r4, #12]
 8002ae8:	9b03      	ldr	r3, [sp, #12]
 8002aea:	4298      	cmp	r0, r3
 8002aec:	bfb8      	it	lt
 8002aee:	4618      	movlt	r0, r3
 8002af0:	e7a4      	b.n	8002a3c <_printf_i+0x168>
 8002af2:	2301      	movs	r3, #1
 8002af4:	4632      	mov	r2, r6
 8002af6:	4649      	mov	r1, r9
 8002af8:	4640      	mov	r0, r8
 8002afa:	47d0      	blx	sl
 8002afc:	3001      	adds	r0, #1
 8002afe:	d09b      	beq.n	8002a38 <_printf_i+0x164>
 8002b00:	3501      	adds	r5, #1
 8002b02:	68e3      	ldr	r3, [r4, #12]
 8002b04:	9903      	ldr	r1, [sp, #12]
 8002b06:	1a5b      	subs	r3, r3, r1
 8002b08:	42ab      	cmp	r3, r5
 8002b0a:	dcf2      	bgt.n	8002af2 <_printf_i+0x21e>
 8002b0c:	e7eb      	b.n	8002ae6 <_printf_i+0x212>
 8002b0e:	2500      	movs	r5, #0
 8002b10:	f104 0619 	add.w	r6, r4, #25
 8002b14:	e7f5      	b.n	8002b02 <_printf_i+0x22e>
 8002b16:	bf00      	nop
 8002b18:	0800304d 	.word	0x0800304d
 8002b1c:	0800305e 	.word	0x0800305e

08002b20 <_putc_r>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	460d      	mov	r5, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	4606      	mov	r6, r0
 8002b28:	b118      	cbz	r0, 8002b32 <_putc_r+0x12>
 8002b2a:	6983      	ldr	r3, [r0, #24]
 8002b2c:	b90b      	cbnz	r3, 8002b32 <_putc_r+0x12>
 8002b2e:	f7ff fb53 	bl	80021d8 <__sinit>
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <_putc_r+0x84>)
 8002b34:	429c      	cmp	r4, r3
 8002b36:	d124      	bne.n	8002b82 <_putc_r+0x62>
 8002b38:	6874      	ldr	r4, [r6, #4]
 8002b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b3c:	07d8      	lsls	r0, r3, #31
 8002b3e:	d405      	bmi.n	8002b4c <_putc_r+0x2c>
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	0599      	lsls	r1, r3, #22
 8002b44:	d402      	bmi.n	8002b4c <_putc_r+0x2c>
 8002b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b48:	f7ff fbe4 	bl	8002314 <__retarget_lock_acquire_recursive>
 8002b4c:	68a3      	ldr	r3, [r4, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	60a3      	str	r3, [r4, #8]
 8002b54:	da05      	bge.n	8002b62 <_putc_r+0x42>
 8002b56:	69a2      	ldr	r2, [r4, #24]
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	db1c      	blt.n	8002b96 <_putc_r+0x76>
 8002b5c:	b2eb      	uxtb	r3, r5
 8002b5e:	2b0a      	cmp	r3, #10
 8002b60:	d019      	beq.n	8002b96 <_putc_r+0x76>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	6022      	str	r2, [r4, #0]
 8002b68:	701d      	strb	r5, [r3, #0]
 8002b6a:	b2ed      	uxtb	r5, r5
 8002b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b6e:	07da      	lsls	r2, r3, #31
 8002b70:	d405      	bmi.n	8002b7e <_putc_r+0x5e>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	059b      	lsls	r3, r3, #22
 8002b76:	d402      	bmi.n	8002b7e <_putc_r+0x5e>
 8002b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b7a:	f7ff fbcc 	bl	8002316 <__retarget_lock_release_recursive>
 8002b7e:	4628      	mov	r0, r5
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <_putc_r+0x88>)
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d101      	bne.n	8002b8c <_putc_r+0x6c>
 8002b88:	68b4      	ldr	r4, [r6, #8]
 8002b8a:	e7d6      	b.n	8002b3a <_putc_r+0x1a>
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <_putc_r+0x8c>)
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	bf08      	it	eq
 8002b92:	68f4      	ldreq	r4, [r6, #12]
 8002b94:	e7d1      	b.n	8002b3a <_putc_r+0x1a>
 8002b96:	4629      	mov	r1, r5
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f000 f85c 	bl	8002c58 <__swbuf_r>
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	e7e3      	b.n	8002b6c <_putc_r+0x4c>
 8002ba4:	08002ffc 	.word	0x08002ffc
 8002ba8:	0800301c 	.word	0x0800301c
 8002bac:	08002fdc 	.word	0x08002fdc

08002bb0 <_sbrk_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4d06      	ldr	r5, [pc, #24]	; (8002bcc <_sbrk_r+0x1c>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	602b      	str	r3, [r5, #0]
 8002bbc:	f7fe ffda 	bl	8001b74 <_sbrk>
 8002bc0:	1c43      	adds	r3, r0, #1
 8002bc2:	d102      	bne.n	8002bca <_sbrk_r+0x1a>
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	b103      	cbz	r3, 8002bca <_sbrk_r+0x1a>
 8002bc8:	6023      	str	r3, [r4, #0]
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	200001d8 	.word	0x200001d8

08002bd0 <__sread>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd8:	f000 f94e 	bl	8002e78 <_read_r>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	bfab      	itete	ge
 8002be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002be2:	89a3      	ldrhlt	r3, [r4, #12]
 8002be4:	181b      	addge	r3, r3, r0
 8002be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bea:	bfac      	ite	ge
 8002bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bee:	81a3      	strhlt	r3, [r4, #12]
 8002bf0:	bd10      	pop	{r4, pc}

08002bf2 <__swrite>:
 8002bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf6:	461f      	mov	r7, r3
 8002bf8:	898b      	ldrh	r3, [r1, #12]
 8002bfa:	05db      	lsls	r3, r3, #23
 8002bfc:	4605      	mov	r5, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	4616      	mov	r6, r2
 8002c02:	d505      	bpl.n	8002c10 <__swrite+0x1e>
 8002c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c08:	2302      	movs	r3, #2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f000 f916 	bl	8002e3c <_lseek_r>
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1a:	81a3      	strh	r3, [r4, #12]
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	463b      	mov	r3, r7
 8002c20:	4628      	mov	r0, r5
 8002c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c26:	f7fd be31 	b.w	800088c <_write_r>

08002c2a <__sseek>:
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c32:	f000 f903 	bl	8002e3c <_lseek_r>
 8002c36:	1c43      	adds	r3, r0, #1
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	bf15      	itete	ne
 8002c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c46:	81a3      	strheq	r3, [r4, #12]
 8002c48:	bf18      	it	ne
 8002c4a:	81a3      	strhne	r3, [r4, #12]
 8002c4c:	bd10      	pop	{r4, pc}

08002c4e <__sclose>:
 8002c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c52:	f000 b8c1 	b.w	8002dd8 <_close_r>
	...

08002c58 <__swbuf_r>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	460e      	mov	r6, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	4605      	mov	r5, r0
 8002c60:	b118      	cbz	r0, 8002c6a <__swbuf_r+0x12>
 8002c62:	6983      	ldr	r3, [r0, #24]
 8002c64:	b90b      	cbnz	r3, 8002c6a <__swbuf_r+0x12>
 8002c66:	f7ff fab7 	bl	80021d8 <__sinit>
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <__swbuf_r+0x98>)
 8002c6c:	429c      	cmp	r4, r3
 8002c6e:	d12b      	bne.n	8002cc8 <__swbuf_r+0x70>
 8002c70:	686c      	ldr	r4, [r5, #4]
 8002c72:	69a3      	ldr	r3, [r4, #24]
 8002c74:	60a3      	str	r3, [r4, #8]
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	071a      	lsls	r2, r3, #28
 8002c7a:	d52f      	bpl.n	8002cdc <__swbuf_r+0x84>
 8002c7c:	6923      	ldr	r3, [r4, #16]
 8002c7e:	b36b      	cbz	r3, 8002cdc <__swbuf_r+0x84>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	1ac0      	subs	r0, r0, r3
 8002c86:	6963      	ldr	r3, [r4, #20]
 8002c88:	b2f6      	uxtb	r6, r6
 8002c8a:	4283      	cmp	r3, r0
 8002c8c:	4637      	mov	r7, r6
 8002c8e:	dc04      	bgt.n	8002c9a <__swbuf_r+0x42>
 8002c90:	4621      	mov	r1, r4
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7ff fa0c 	bl	80020b0 <_fflush_r>
 8002c98:	bb30      	cbnz	r0, 8002ce8 <__swbuf_r+0x90>
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60a3      	str	r3, [r4, #8]
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	701e      	strb	r6, [r3, #0]
 8002ca8:	6963      	ldr	r3, [r4, #20]
 8002caa:	3001      	adds	r0, #1
 8002cac:	4283      	cmp	r3, r0
 8002cae:	d004      	beq.n	8002cba <__swbuf_r+0x62>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	07db      	lsls	r3, r3, #31
 8002cb4:	d506      	bpl.n	8002cc4 <__swbuf_r+0x6c>
 8002cb6:	2e0a      	cmp	r6, #10
 8002cb8:	d104      	bne.n	8002cc4 <__swbuf_r+0x6c>
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f7ff f9f7 	bl	80020b0 <_fflush_r>
 8002cc2:	b988      	cbnz	r0, 8002ce8 <__swbuf_r+0x90>
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <__swbuf_r+0x9c>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	d101      	bne.n	8002cd2 <__swbuf_r+0x7a>
 8002cce:	68ac      	ldr	r4, [r5, #8]
 8002cd0:	e7cf      	b.n	8002c72 <__swbuf_r+0x1a>
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <__swbuf_r+0xa0>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	bf08      	it	eq
 8002cd8:	68ec      	ldreq	r4, [r5, #12]
 8002cda:	e7ca      	b.n	8002c72 <__swbuf_r+0x1a>
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f80c 	bl	8002cfc <__swsetup_r>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d0cb      	beq.n	8002c80 <__swbuf_r+0x28>
 8002ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8002cec:	e7ea      	b.n	8002cc4 <__swbuf_r+0x6c>
 8002cee:	bf00      	nop
 8002cf0:	08002ffc 	.word	0x08002ffc
 8002cf4:	0800301c 	.word	0x0800301c
 8002cf8:	08002fdc 	.word	0x08002fdc

08002cfc <__swsetup_r>:
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <__swsetup_r+0xcc>)
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	681d      	ldr	r5, [r3, #0]
 8002d02:	4606      	mov	r6, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	b125      	cbz	r5, 8002d12 <__swsetup_r+0x16>
 8002d08:	69ab      	ldr	r3, [r5, #24]
 8002d0a:	b913      	cbnz	r3, 8002d12 <__swsetup_r+0x16>
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f7ff fa63 	bl	80021d8 <__sinit>
 8002d12:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <__swsetup_r+0xd0>)
 8002d14:	429c      	cmp	r4, r3
 8002d16:	d10f      	bne.n	8002d38 <__swsetup_r+0x3c>
 8002d18:	686c      	ldr	r4, [r5, #4]
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d20:	0719      	lsls	r1, r3, #28
 8002d22:	d42c      	bmi.n	8002d7e <__swsetup_r+0x82>
 8002d24:	06dd      	lsls	r5, r3, #27
 8002d26:	d411      	bmi.n	8002d4c <__swsetup_r+0x50>
 8002d28:	2309      	movs	r3, #9
 8002d2a:	6033      	str	r3, [r6, #0]
 8002d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	f04f 30ff 	mov.w	r0, #4294967295
 8002d36:	e03e      	b.n	8002db6 <__swsetup_r+0xba>
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <__swsetup_r+0xd4>)
 8002d3a:	429c      	cmp	r4, r3
 8002d3c:	d101      	bne.n	8002d42 <__swsetup_r+0x46>
 8002d3e:	68ac      	ldr	r4, [r5, #8]
 8002d40:	e7eb      	b.n	8002d1a <__swsetup_r+0x1e>
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <__swsetup_r+0xd8>)
 8002d44:	429c      	cmp	r4, r3
 8002d46:	bf08      	it	eq
 8002d48:	68ec      	ldreq	r4, [r5, #12]
 8002d4a:	e7e6      	b.n	8002d1a <__swsetup_r+0x1e>
 8002d4c:	0758      	lsls	r0, r3, #29
 8002d4e:	d512      	bpl.n	8002d76 <__swsetup_r+0x7a>
 8002d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d52:	b141      	cbz	r1, 8002d66 <__swsetup_r+0x6a>
 8002d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	d002      	beq.n	8002d62 <__swsetup_r+0x66>
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f7ff fb47 	bl	80023f0 <_free_r>
 8002d62:	2300      	movs	r3, #0
 8002d64:	6363      	str	r3, [r4, #52]	; 0x34
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d6c:	81a3      	strh	r3, [r4, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6063      	str	r3, [r4, #4]
 8002d72:	6923      	ldr	r3, [r4, #16]
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	b94b      	cbnz	r3, 8002d96 <__swsetup_r+0x9a>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d003      	beq.n	8002d96 <__swsetup_r+0x9a>
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4630      	mov	r0, r6
 8002d92:	f7ff fae5 	bl	8002360 <__smakebuf_r>
 8002d96:	89a0      	ldrh	r0, [r4, #12]
 8002d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d9c:	f010 0301 	ands.w	r3, r0, #1
 8002da0:	d00a      	beq.n	8002db8 <__swsetup_r+0xbc>
 8002da2:	2300      	movs	r3, #0
 8002da4:	60a3      	str	r3, [r4, #8]
 8002da6:	6963      	ldr	r3, [r4, #20]
 8002da8:	425b      	negs	r3, r3
 8002daa:	61a3      	str	r3, [r4, #24]
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	b943      	cbnz	r3, 8002dc2 <__swsetup_r+0xc6>
 8002db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002db4:	d1ba      	bne.n	8002d2c <__swsetup_r+0x30>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	0781      	lsls	r1, r0, #30
 8002dba:	bf58      	it	pl
 8002dbc:	6963      	ldrpl	r3, [r4, #20]
 8002dbe:	60a3      	str	r3, [r4, #8]
 8002dc0:	e7f4      	b.n	8002dac <__swsetup_r+0xb0>
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	e7f7      	b.n	8002db6 <__swsetup_r+0xba>
 8002dc6:	bf00      	nop
 8002dc8:	2000002c 	.word	0x2000002c
 8002dcc:	08002ffc 	.word	0x08002ffc
 8002dd0:	0800301c 	.word	0x0800301c
 8002dd4:	08002fdc 	.word	0x08002fdc

08002dd8 <_close_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4d06      	ldr	r5, [pc, #24]	; (8002df4 <_close_r+0x1c>)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4604      	mov	r4, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fe fe91 	bl	8001b0a <_close>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_close_r+0x1a>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_close_r+0x1a>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	200001d8 	.word	0x200001d8

08002df8 <_fstat_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4d07      	ldr	r5, [pc, #28]	; (8002e18 <_fstat_r+0x20>)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	602b      	str	r3, [r5, #0]
 8002e06:	f7fe fe8c 	bl	8001b22 <_fstat>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d102      	bne.n	8002e14 <_fstat_r+0x1c>
 8002e0e:	682b      	ldr	r3, [r5, #0]
 8002e10:	b103      	cbz	r3, 8002e14 <_fstat_r+0x1c>
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
 8002e16:	bf00      	nop
 8002e18:	200001d8 	.word	0x200001d8

08002e1c <_isatty_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	4d06      	ldr	r5, [pc, #24]	; (8002e38 <_isatty_r+0x1c>)
 8002e20:	2300      	movs	r3, #0
 8002e22:	4604      	mov	r4, r0
 8002e24:	4608      	mov	r0, r1
 8002e26:	602b      	str	r3, [r5, #0]
 8002e28:	f7fe fe8b 	bl	8001b42 <_isatty>
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d102      	bne.n	8002e36 <_isatty_r+0x1a>
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	b103      	cbz	r3, 8002e36 <_isatty_r+0x1a>
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	200001d8 	.word	0x200001d8

08002e3c <_lseek_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4d07      	ldr	r5, [pc, #28]	; (8002e5c <_lseek_r+0x20>)
 8002e40:	4604      	mov	r4, r0
 8002e42:	4608      	mov	r0, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	602a      	str	r2, [r5, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7fe fe84 	bl	8001b58 <_lseek>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_lseek_r+0x1e>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_lseek_r+0x1e>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	200001d8 	.word	0x200001d8

08002e60 <__malloc_lock>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__malloc_lock+0x8>)
 8002e62:	f7ff ba57 	b.w	8002314 <__retarget_lock_acquire_recursive>
 8002e66:	bf00      	nop
 8002e68:	200001d0 	.word	0x200001d0

08002e6c <__malloc_unlock>:
 8002e6c:	4801      	ldr	r0, [pc, #4]	; (8002e74 <__malloc_unlock+0x8>)
 8002e6e:	f7ff ba52 	b.w	8002316 <__retarget_lock_release_recursive>
 8002e72:	bf00      	nop
 8002e74:	200001d0 	.word	0x200001d0

08002e78 <_read_r>:
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	4d07      	ldr	r5, [pc, #28]	; (8002e98 <_read_r+0x20>)
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4608      	mov	r0, r1
 8002e80:	4611      	mov	r1, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	602a      	str	r2, [r5, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f7fe fe22 	bl	8001ad0 <_read>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	d102      	bne.n	8002e96 <_read_r+0x1e>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	b103      	cbz	r3, 8002e96 <_read_r+0x1e>
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	200001d8 	.word	0x200001d8

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
