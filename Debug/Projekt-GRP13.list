
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000094  08005740  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005740  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da51  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230d  00000000  00000000  0002db15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c69  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a62c  00000000  00000000  00035869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b016  00000000  00000000  0003fe95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009aeab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  0009af00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009d9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009d9ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053e8 	.word	0x080053e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080053e8 	.word	0x080053e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	; 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ec8:	4b91      	ldr	r3, [pc, #580]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d011      	beq.n	8000efc <RCC_GetClocksFreq+0x5c>
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d837      	bhi.n	8000f4e <RCC_GetClocksFreq+0xae>
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <RCC_GetClocksFreq+0x4c>
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d004      	beq.n	8000ef4 <RCC_GetClocksFreq+0x54>
 8000eea:	e030      	b.n	8000f4e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a89      	ldr	r2, [pc, #548]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8000ef0:	601a      	str	r2, [r3, #0]
      break;
 8000ef2:	e030      	b.n	8000f56 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a87      	ldr	r2, [pc, #540]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8000ef8:	601a      	str	r2, [r3, #0]
      break;
 8000efa:	e02c      	b.n	8000f56 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000efc:	4b84      	ldr	r3, [pc, #528]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f04:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f06:	4b82      	ldr	r3, [pc, #520]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	3302      	adds	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4a7d      	ldr	r2, [pc, #500]	; (8001118 <RCC_GetClocksFreq+0x278>)
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
 8000f28:	e00d      	b.n	8000f46 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000f2a:	4b79      	ldr	r3, [pc, #484]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000f36:	4a77      	ldr	r2, [pc, #476]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	601a      	str	r2, [r3, #0]
      break;
 8000f4c:	e003      	b.n	8000f56 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a70      	ldr	r2, [pc, #448]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8000f52:	601a      	str	r2, [r3, #0]
      break;
 8000f54:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f5e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000f66:	4a6d      	ldr	r2, [pc, #436]	; (800111c <RCC_GetClocksFreq+0x27c>)
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	40da      	lsrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000f7e:	4b64      	ldr	r3, [pc, #400]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f86:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000f8e:	4a63      	ldr	r2, [pc, #396]	; (800111c <RCC_GetClocksFreq+0x27c>)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	40da      	lsrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000fa6:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000fae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	0adb      	lsrs	r3, r3, #11
 8000fb4:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000fb6:	4a59      	ldr	r2, [pc, #356]	; (800111c <RCC_GetClocksFreq+0x27c>)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	40da      	lsrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000fce:	4b50      	ldr	r3, [pc, #320]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000fd6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000fde:	4a50      	ldr	r2, [pc, #320]	; (8001120 <RCC_GetClocksFreq+0x280>)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	e003      	b.n	800100a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <RCC_GetClocksFreq+0x270>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001012:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	0a5b      	lsrs	r3, r3, #9
 8001018:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800101a:	4a41      	ldr	r2, [pc, #260]	; (8001120 <RCC_GetClocksFreq+0x280>)
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001022:	b29b      	uxth	r3, r3
 8001024:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fbb2 f2f3 	udiv	r2, r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	e003      	b.n	8001046 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b10      	cmp	r3, #16
 8001050:	d003      	beq.n	800105a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8001056:	619a      	str	r2, [r3, #24]
 8001058:	e003      	b.n	8001062 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	2b20      	cmp	r3, #32
 800106c:	d003      	beq.n	8001076 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <RCC_GetClocksFreq+0x274>)
 8001072:	61da      	str	r2, [r3, #28]
 8001074:	e003      	b.n	800107e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <RCC_GetClocksFreq+0x270>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108a:	d10d      	bne.n	80010a8 <RCC_GetClocksFreq+0x208>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001092:	429a      	cmp	r2, r3
 8001094:	d108      	bne.n	80010a8 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	d104      	bne.n	80010a8 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	005a      	lsls	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	621a      	str	r2, [r3, #32]
 80010a6:	e003      	b.n	80010b0 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <RCC_GetClocksFreq+0x270>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010bc:	d10d      	bne.n	80010da <RCC_GetClocksFreq+0x23a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d108      	bne.n	80010da <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d104      	bne.n	80010da <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	005a      	lsls	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
 80010d8:	e003      	b.n	80010e2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <RCC_GetClocksFreq+0x270>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d104      	bne.n	80010f8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
 80010f6:	e029      	b.n	800114c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <RCC_GetClocksFreq+0x270>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10f      	bne.n	8001124 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
 800110c:	e01e      	b.n	800114c <RCC_GetClocksFreq+0x2ac>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	007a1200 	.word	0x007a1200
 8001118:	003d0900 	.word	0x003d0900
 800111c:	20000000 	.word	0x20000000
 8001120:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d104      	bne.n	800113a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
 8001138:	e008      	b.n	800114c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d102      	bne.n	800114c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a5e      	ldr	r2, [pc, #376]	; (80012c4 <RCC_GetClocksFreq+0x424>)
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800114c:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001160:	e021      	b.n	80011a6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d104      	bne.n	800117a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
 8001178:	e015      	b.n	80011a6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800117a:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001186:	d104      	bne.n	8001192 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001190:	e009      	b.n	80011a6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800119e:	d102      	bne.n	80011a6 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <RCC_GetClocksFreq+0x424>)
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d104      	bne.n	80011bc <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ba:	e021      	b.n	8001200 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80011bc:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80011c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011c8:	d104      	bne.n	80011d4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	e015      	b.n	8001200 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80011dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011e0:	d104      	bne.n	80011ec <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ea:	e009      	b.n	8001200 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80011f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011f8:	d102      	bne.n	8001200 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <RCC_GetClocksFreq+0x424>)
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e021      	b.n	800125a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800121e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001222:	d104      	bne.n	800122e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
 800122c:	e015      	b.n	800125a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800123a:	d104      	bne.n	8001246 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
 8001244:	e009      	b.n	800125a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800124e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001252:	d102      	bne.n	800125a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <RCC_GetClocksFreq+0x424>)
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800126e:	e021      	b.n	80012b4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127c:	d104      	bne.n	8001288 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001286:	e015      	b.n	80012b4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001294:	d104      	bne.n	80012a0 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800129e:	e009      	b.n	80012b4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <RCC_GetClocksFreq+0x420>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80012a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80012ac:	d102      	bne.n	80012b4 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <RCC_GetClocksFreq+0x424>)
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012b4:	bf00      	nop
 80012b6:	372c      	adds	r7, #44	; 0x2c
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	007a1200 	.word	0x007a1200

080012c8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	b29b      	uxth	r3, r3
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	b29b      	uxth	r3, r3
 8001316:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d103      	bne.n	8001336 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	e005      	b.n	8001342 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d102      	bne.n	8001342 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3308      	adds	r3, #8
 8001340:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001354:	e006      	b.n	8001364 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43da      	mvns	r2, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	3724      	adds	r7, #36	; 0x24
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e001      	b.n	8001394 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80013cc:	2201      	movs	r2, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	4013      	ands	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e00d      	b.n	8001404 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d105      	bne.n	80013fa <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e004      	b.n	8001404 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800140a:	2201      	movs	r2, #1
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <USART_GetITStatus+0x8e>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	74fb      	strb	r3, [r7, #19]
 800142e:	e001      	b.n	8001434 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001434:	7cfb      	ldrb	r3, [r7, #19]
}
 8001436:	4618      	mov	r0, r3
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2201      	movs	r2, #1
 8001456:	fa02 f103 	lsl.w	r1, r2, r3
 800145a:	4a06      	ldr	r2, [pc, #24]	; (8001474 <NVIC_EnableIRQ+0x30>)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	095b      	lsrs	r3, r3, #5
 8001462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <uart_get_char+0x48>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d011      	beq.n	80014b0 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <uart_get_char+0x4c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	b2d1      	uxtb	r1, r2
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <uart_get_char+0x4c>)
 8001498:	7011      	strb	r1, [r2, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <uart_get_char+0x50>)
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <uart_get_char+0x48>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <uart_get_char+0x48>)
 80014ae:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200001b2 	.word	0x200001b2
 80014c4:	200001b1 	.word	0x200001b1
 80014c8:	200000b0 	.word	0x200000b0

080014cc <uart_put_char>:

void uart_put_char(uint8_t c) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <uart_put_char+0x30>)
 80014de:	f7ff fef3 	bl	80012c8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80014e2:	bf00      	nop
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <uart_put_char+0x30>)
 80014e8:	f7ff ff42 	bl	8001370 <USART_GetFlagStatus>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f8      	beq.n	80014e4 <uart_put_char+0x18>
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40004400 	.word	0x40004400

08001500 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e012      	b.n	800153a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b0a      	cmp	r3, #10
 800151e:	d102      	bne.n	8001526 <_write_r+0x26>
            uart_put_char('\r');
 8001520:	200d      	movs	r0, #13
 8001522:	f7ff ffd3 	bl	80014cc <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ffcc 	bl	80014cc <uart_put_char>
    for (n = 0; n < len; n++) {
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbe8      	blt.n	8001514 <_write_r+0x14>
    }

    return len;
 8001542:	683b      	ldr	r3, [r7, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <USART2_IRQHandler+0x5c>)
 8001552:	4816      	ldr	r0, [pc, #88]	; (80015ac <USART2_IRQHandler+0x60>)
 8001554:	f7ff ff25 	bl	80013a2 <USART_GetITStatus>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d021      	beq.n	80015a2 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <USART2_IRQHandler+0x60>)
 8001560:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001562:	b299      	uxth	r1, r3
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <USART2_IRQHandler+0x64>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	b2d0      	uxtb	r0, r2
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <USART2_IRQHandler+0x64>)
 8001570:	7010      	strb	r0, [r2, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	b2c9      	uxtb	r1, r1
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <USART2_IRQHandler+0x68>)
 8001578:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <USART2_IRQHandler+0x6c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2bff      	cmp	r3, #255	; 0xff
 8001582:	d107      	bne.n	8001594 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <USART2_IRQHandler+0x70>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <USART2_IRQHandler+0x70>)
 8001590:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001592:	e006      	b.n	80015a2 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <USART2_IRQHandler+0x6c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <USART2_IRQHandler+0x6c>)
 80015a0:	701a      	strb	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	00050105 	.word	0x00050105
 80015ac:	40004400 	.word	0x40004400
 80015b0:	200001b0 	.word	0x200001b0
 80015b4:	200000b0 	.word	0x200000b0
 80015b8:	200001b2 	.word	0x200001b2
 80015bc:	200001b1 	.word	0x200001b1

080015c0 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80015c8:	4b86      	ldr	r3, [pc, #536]	; (80017e4 <uart_init+0x224>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fde7 	bl	80041a4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <uart_init+0x224>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fde0 	bl	80041a4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80015e4:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <uart_init+0x228>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4a7f      	ldr	r2, [pc, #508]	; (80017e8 <uart_init+0x228>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80015f0:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <uart_init+0x228>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	4a7c      	ldr	r2, [pc, #496]	; (80017e8 <uart_init+0x228>)
 80015f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fa:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80015fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800160a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 800160c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 800161c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800162a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 800162c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001636:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800163a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 800163c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800164a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800164c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001656:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800165a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 800165c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001668:	f023 030c 	bic.w	r3, r3, #12
 800166c:	b29b      	uxth	r3, r3
 800166e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001670:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001678:	8892      	ldrh	r2, [r2, #4]
 800167a:	b292      	uxth	r2, r2
 800167c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 800167e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800168c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800168e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001698:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800169c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 800169e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ac:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80016ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016b8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80016bc:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <uart_init+0x22c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <uart_init+0x22c>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80016ca:	4b48      	ldr	r3, [pc, #288]	; (80017ec <uart_init+0x22c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a47      	ldr	r2, [pc, #284]	; (80017ec <uart_init+0x22c>)
 80016d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80016d6:	4b45      	ldr	r3, [pc, #276]	; (80017ec <uart_init+0x22c>)
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <uart_init+0x22c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <uart_init+0x22c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <uart_init+0x22c>)
 80016e4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016e8:	f023 030c 	bic.w	r3, r3, #12
 80016ec:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <uart_init+0x22c>)
 80016f0:	4a3e      	ldr	r2, [pc, #248]	; (80017ec <uart_init+0x22c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <uart_init+0x22c>)
 80016f8:	4a3c      	ldr	r2, [pc, #240]	; (80017ec <uart_init+0x22c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <uart_init+0x22c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <uart_init+0x22c>)
 8001704:	f043 030c 	orr.w	r3, r3, #12
 8001708:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <uart_init+0x22c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4a37      	ldr	r2, [pc, #220]	; (80017ec <uart_init+0x22c>)
 8001710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001714:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <uart_init+0x22c>)
 8001718:	4a34      	ldr	r2, [pc, #208]	; (80017ec <uart_init+0x22c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
 8001726:	2300      	movs	r3, #0
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fbb6 	bl	8000ea0 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001736:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <uart_init+0x22c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001746:	005a      	lsls	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	fbb3 f2f2 	udiv	r2, r3, r2
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	fb01 f202 	mul.w	r2, r1, r2
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
 8001764:	e00d      	b.n	8001782 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	fbb3 f2f2 	udiv	r2, r3, r2
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	fb01 f202 	mul.w	r2, r1, r2
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001788:	429a      	cmp	r2, r3
 800178a:	d302      	bcc.n	8001792 <uart_init+0x1d2>
        divider++;
 800178c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178e:	3301      	adds	r3, #1
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <uart_init+0x22c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800179e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80017a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017aa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80017ae:	4013      	ands	r3, r2
 80017b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017b2:	4313      	orrs	r3, r2
 80017b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <uart_init+0x22c>)
 80017b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ba:	b292      	uxth	r2, r2
 80017bc:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <uart_init+0x22c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <uart_init+0x22c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80017ca:	2201      	movs	r2, #1
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <uart_init+0x230>)
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <uart_init+0x22c>)
 80017d0:	f7ff fd8c 	bl	80012ec <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80017d4:	2026      	movs	r0, #38	; 0x26
 80017d6:	f7ff fe35 	bl	8001444 <NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	; 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000002c 	.word	0x2000002c
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40004400 	.word	0x40004400
 80017f0:	00050105 	.word	0x00050105

080017f4 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 80017fe:	2316      	movs	r3, #22
 8001800:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b07      	cmp	r3, #7
 8001806:	d904      	bls.n	8001812 <fgcolor+0x1e>
	  type = 1;                // bold text
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3b08      	subs	r3, #8
 8001810:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	331e      	adds	r3, #30
 8001818:	211b      	movs	r1, #27
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <fgcolor+0x34>)
 800181c:	f002 fc16 	bl	800404c <iprintf>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08005400 	.word	0x08005400

0800182c <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001830:	211b      	movs	r1, #27
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <clrscr+0x18>)
 8001834:	f002 fc0a 	bl	800404c <iprintf>
    printf("%c[J", ESC);
 8001838:	211b      	movs	r1, #27
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <clrscr+0x1c>)
 800183c:	f002 fc06 	bl	800404c <iprintf>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800542c 	.word	0x0800542c
 8001848:	08005434 	.word	0x08005434

0800184c <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	211b      	movs	r1, #27
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <gotoxy+0x20>)
 800185e:	f002 fbf5 	bl	800404c <iprintf>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	08005444 	.word	0x08005444

08001870 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	2b01      	cmp	r3, #1
 8001882:	d15e      	bne.n	8001942 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e019      	b.n	80018be <drawBox+0x4e>
			 gotoxy(x1,y);
 800188a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff ffdd 	bl	800184c <gotoxy>
			 if (y==y1){
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	d103      	bne.n	80018a2 <drawBox+0x32>
				printf("%c", 201);
 800189a:	20c9      	movs	r0, #201	; 0xc9
 800189c:	f002 fbee 	bl	800407c <putchar>
 80018a0:	e00a      	b.n	80018b8 <drawBox+0x48>
			 }
			 else if(y==y2){
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d103      	bne.n	80018b2 <drawBox+0x42>
				printf("%c", 200);
 80018aa:	20c8      	movs	r0, #200	; 0xc8
 80018ac:	f002 fbe6 	bl	800407c <putchar>
 80018b0:	e002      	b.n	80018b8 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 80018b2:	20ba      	movs	r0, #186	; 0xba
 80018b4:	f002 fbe2 	bl	800407c <putchar>
		 for(int y = y1; y <= y2; y++){
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dde1      	ble.n	800188a <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	e014      	b.n	80018f6 <drawBox+0x86>
   			 if(x!=x1){
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d00d      	beq.n	80018f0 <drawBox+0x80>
				 gotoxy(x,y1);
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6a38      	ldr	r0, [r7, #32]
 80018d8:	f7ff ffb8 	bl	800184c <gotoxy>
				 printf("%c", 205);
 80018dc:	20cd      	movs	r0, #205	; 0xcd
 80018de:	f002 fbcd 	bl	800407c <putchar>
				 gotoxy(x,y2);
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	6a38      	ldr	r0, [r7, #32]
 80018e6:	f7ff ffb1 	bl	800184c <gotoxy>
				 printf("%c", 205);
 80018ea:	20cd      	movs	r0, #205	; 0xcd
 80018ec:	f002 fbc6 	bl	800407c <putchar>
   		 for(int x = x1; x <= x2; x++){
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	3301      	adds	r3, #1
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	6a3a      	ldr	r2, [r7, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dde6      	ble.n	80018cc <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e019      	b.n	8001938 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001904:	69f9      	ldr	r1, [r7, #28]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa0 	bl	800184c <gotoxy>
   			 if (y==y1){
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	d103      	bne.n	800191c <drawBox+0xac>
				printf("%c", 187);
 8001914:	20bb      	movs	r0, #187	; 0xbb
 8001916:	f002 fbb1 	bl	800407c <putchar>
 800191a:	e00a      	b.n	8001932 <drawBox+0xc2>
			 }
			 else if(y==y2){
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d103      	bne.n	800192c <drawBox+0xbc>
				printf("%c", 188);
 8001924:	20bc      	movs	r0, #188	; 0xbc
 8001926:	f002 fba9 	bl	800407c <putchar>
 800192a:	e002      	b.n	8001932 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 800192c:	20ba      	movs	r0, #186	; 0xba
 800192e:	f002 fba5 	bl	800407c <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	dde1      	ble.n	8001904 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001940:	e05d      	b.n	80019fe <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	e019      	b.n	800197c <drawBox+0x10c>
			 gotoxy(x1,y);
 8001948:	69b9      	ldr	r1, [r7, #24]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ff7e 	bl	800184c <gotoxy>
			 if (y==y1){
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d103      	bne.n	8001960 <drawBox+0xf0>
				printf("%c", 218);
 8001958:	20da      	movs	r0, #218	; 0xda
 800195a:	f002 fb8f 	bl	800407c <putchar>
 800195e:	e00a      	b.n	8001976 <drawBox+0x106>
			 else if(y==y2){
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d103      	bne.n	8001970 <drawBox+0x100>
				printf("%c", 192);
 8001968:	20c0      	movs	r0, #192	; 0xc0
 800196a:	f002 fb87 	bl	800407c <putchar>
 800196e:	e002      	b.n	8001976 <drawBox+0x106>
				printf("%c", 179);
 8001970:	20b3      	movs	r0, #179	; 0xb3
 8001972:	f002 fb83 	bl	800407c <putchar>
		for(int y = y1; y <= y2; y++){
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	3301      	adds	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	dde1      	ble.n	8001948 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e014      	b.n	80019b4 <drawBox+0x144>
			if(x!=x1){
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	429a      	cmp	r2, r3
 8001990:	d00d      	beq.n	80019ae <drawBox+0x13e>
				 gotoxy(x,y1);
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	6978      	ldr	r0, [r7, #20]
 8001996:	f7ff ff59 	bl	800184c <gotoxy>
				 printf("%c", 196);
 800199a:	20c4      	movs	r0, #196	; 0xc4
 800199c:	f002 fb6e 	bl	800407c <putchar>
				 gotoxy(x,y2);
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff52 	bl	800184c <gotoxy>
				 printf("%c", 196);
 80019a8:	20c4      	movs	r0, #196	; 0xc4
 80019aa:	f002 fb67 	bl	800407c <putchar>
		for(int x = x1; x <= x2; x++){
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dde6      	ble.n	800198a <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	e019      	b.n	80019f6 <drawBox+0x186>
			 gotoxy(x2,y);
 80019c2:	6939      	ldr	r1, [r7, #16]
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff41 	bl	800184c <gotoxy>
			if (y==y1){
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d103      	bne.n	80019da <drawBox+0x16a>
				printf("%c", 191);
 80019d2:	20bf      	movs	r0, #191	; 0xbf
 80019d4:	f002 fb52 	bl	800407c <putchar>
 80019d8:	e00a      	b.n	80019f0 <drawBox+0x180>
			 else if(y==y2){
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d103      	bne.n	80019ea <drawBox+0x17a>
				printf("%c", 217);
 80019e2:	20d9      	movs	r0, #217	; 0xd9
 80019e4:	f002 fb4a 	bl	800407c <putchar>
 80019e8:	e002      	b.n	80019f0 <drawBox+0x180>
				printf("%c", 179);
 80019ea:	20b3      	movs	r0, #179	; 0xb3
 80019ec:	f002 fb46 	bl	800407c <putchar>
		for(int y = y1; y <= y2; y++){
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3301      	adds	r3, #1
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dde1      	ble.n	80019c2 <drawBox+0x152>
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b089      	sub	sp, #36	; 0x24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001a14:	e06b      	b.n	8001aee <updateBullets+0xe8>
//		//v har nu længde 1
//		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));


		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7a1b      	ldrb	r3, [r3, #8]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fcb9 	bl	8002394 <intToFp>
 8001a22:	4602      	mov	r2, r0
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7a5b      	ldrb	r3, [r3, #9]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fcae 	bl	8002394 <intToFp>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
		uint32_t vLength = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fd46 	bl	80024d6 <fpAbs>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fd41 	bl	80024d6 <fpAbs>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4423      	add	r3, r4
 8001a58:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fccf 	bl	8002400 <fpMultiply>
 8001a62:	61b8      	str	r0, [r7, #24]
		v = scaleVector(v, fpDivide(intToFp(1),vLength));
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 fc95 	bl	8002394 <intToFp>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fce7 	bl	8002442 <fpDivide>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f107 0010 	add.w	r0, r7, #16
 8001a7a:	f107 0210 	add.w	r2, r7, #16
 8001a7e:	ca06      	ldmia	r2, {r1, r2}
 8001a80:	f000 fd07 	bl	8002492 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7a9b      	ldrb	r3, [r3, #10]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fc82 	bl	8002394 <intToFp>
 8001a90:	4604      	mov	r4, r0
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	69b8      	ldr	r0, [r7, #24]
 8001a96:	f000 fcb3 	bl	8002400 <fpMultiply>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f000 fccf 	bl	8002442 <fpDivide>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f107 0008 	add.w	r0, r7, #8
 8001aaa:	f107 0210 	add.w	r2, r7, #16
 8001aae:	ca06      	ldmia	r2, {r1, r2}
 8001ab0:	f000 fcef 	bl	8002492 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	441a      	add	r2, r3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	615a      	str	r2, [r3, #20]


		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d190      	bne.n	8001a16 <updateBullets+0x10>
	}

}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}

08001afe <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001afe:	b5b0      	push	{r4, r5, r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

	bulletNode_t* current = gameState->bulletLL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001b0c:	e076      	b.n	8001bfc <detectBulletHit+0xfe>

//		uint8_t distToMoon =fpToInt((fpAbs(intToFp(gameState->moon.x)-current->bullet.position.x))+fpAbs((intToFp(gameState->moon.y)-current->bullet.position.y)));
		vector_t v = {intToFp(gameState->moon.x-fpToInt(current->bullet.position.x)), intToFp(gameState->moon.y-fpToInt(current->bullet.position.y))};
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7a1b      	ldrb	r3, [r3, #8]
 8001b12:	b29c      	uxth	r4, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fc50 	bl	80023be <fpToInt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	1ae3      	subs	r3, r4, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fc34 	bl	8002394 <intToFp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7a5b      	ldrb	r3, [r3, #9]
 8001b34:	b29c      	uxth	r4, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fc3f 	bl	80023be <fpToInt>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	1ae3      	subs	r3, r4, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fc23 	bl	8002394 <intToFp>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60fb      	str	r3, [r7, #12]
		int distToMoon = (int)sqrt(fpToInt(v.x)*fpToInt(v.x)+fpToInt(v.y)*fpToInt(v.y));
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fc32 	bl	80023be <fpToInt>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fc2d 	bl	80023be <fpToInt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	fb03 f404 	mul.w	r4, r3, r4
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fc26 	bl	80023be <fpToInt>
 8001b72:	4605      	mov	r5, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fc21 	bl	80023be <fpToInt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	fb03 f305 	mul.w	r3, r3, r5
 8001b82:	4423      	add	r3, r4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fccd 	bl	8000524 <__aeabi_i2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b10 	vmov	d0, r2, r3
 8001b92:	f003 fb39 	bl	8005208 <sqrt>
 8001b96:	ec53 2b10 	vmov	r2, r3, d0
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ffdb 	bl	8000b58 <__aeabi_d2iz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]
		//TODO: afstandsberegning herover kan optimeres. Den beregnes allerede i updateBullet();

		if(fpToInt(current->bullet.nextPosition.y)<=1 || fpToInt(current->bullet.nextPosition.y)>=43*yScale || fpToInt(current->bullet.nextPosition.x)<=1 ||fpToInt(current->bullet.nextPosition.x)>=153 ||distToMoon<=6){ //TODO: add other boundaries
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fc07 	bl	80023be <fpToInt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	dd1a      	ble.n	8001bec <detectBulletHit+0xee>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fbff 	bl	80023be <fpToInt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b55      	cmp	r3, #85	; 0x55
 8001bc4:	dc12      	bgt.n	8001bec <detectBulletHit+0xee>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fbf7 	bl	80023be <fpToInt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	dd0a      	ble.n	8001bec <detectBulletHit+0xee>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fbef 	bl	80023be <fpToInt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b98      	cmp	r3, #152	; 0x98
 8001be4:	dc02      	bgt.n	8001bec <detectBulletHit+0xee>
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	dc04      	bgt.n	8001bf6 <detectBulletHit+0xf8>
			deleteBulletNode(&(gameState->bulletLL), current);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6979      	ldr	r1, [r7, #20]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fb63 	bl	80032bc <deleteBulletNode>
		}
		current = current->nextBulletAddress;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d185      	bne.n	8001b0e <detectBulletHit+0x10>
	}
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}

08001c0c <drawBullets>:

void drawBullets(gameState_t* gameState){
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8001c1a:	e036      	b.n	8001c8a <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fbcc 	bl	80023be <fpToInt>
 8001c26:	4604      	mov	r4, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fbc6 	bl	80023be <fpToInt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	0fda      	lsrs	r2, r3, #31
 8001c36:	4413      	add	r3, r2
 8001c38:	105b      	asrs	r3, r3, #1
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fe05 	bl	800184c <gotoxy>
		printf(" ");
 8001c42:	2020      	movs	r0, #32
 8001c44:	f002 fa1a 	bl	800407c <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fbb6 	bl	80023be <fpToInt>
 8001c52:	4604      	mov	r4, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fbb0 	bl	80023be <fpToInt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	0fda      	lsrs	r2, r3, #31
 8001c62:	4413      	add	r3, r2
 8001c64:	105b      	asrs	r3, r3, #1
 8001c66:	4619      	mov	r1, r3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fdef 	bl	800184c <gotoxy>
		printf("O");
 8001c6e:	204f      	movs	r0, #79	; 0x4f
 8001c70:	f002 fa04 	bl	800407c <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1c5      	bne.n	8001c1c <drawBullets+0x10>
	}
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
	...

08001c9c <NVIC_EnableIRQ>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2201      	movs	r2, #1
 8001cae:	fa02 f103 	lsl.w	r1, r2, r3
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <NVIC_EnableIRQ+0x30>)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0b      	bge.n	8001cfc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <NVIC_SetPriority+0x4c>)
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	3b04      	subs	r3, #4
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001cfa:	e009      	b.n	8001d10 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <NVIC_SetPriority+0x50>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <initJoystick+0x120>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <initJoystick+0x120>)
 8001d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d32:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <initJoystick+0x120>)
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <initJoystick+0x120>)
 8001d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <initJoystick+0x120>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4a3f      	ldr	r2, [pc, #252]	; (8001e44 <initJoystick+0x120>)
 8001d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d4a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <initJoystick+0x124>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <initJoystick+0x124>)
 8001d52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d56:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <initJoystick+0x124>)
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <initJoystick+0x124>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <initJoystick+0x124>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <initJoystick+0x124>)
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <initJoystick+0x124>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <initJoystick+0x124>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d86:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <initJoystick+0x124>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <initJoystick+0x124>)
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <initJoystick+0x124>)
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <initJoystick+0x124>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <initJoystick+0x124>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <initJoystick+0x124>)
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <initJoystick+0x124>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <initJoystick+0x124>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <initJoystick+0x128>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <initJoystick+0x128>)
 8001de6:	f023 030c 	bic.w	r3, r3, #12
 8001dea:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <initJoystick+0x128>)
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <initJoystick+0x128>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <initJoystick+0x128>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <initJoystick+0x128>)
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <initJoystick+0x128>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <initJoystick+0x128>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <initJoystick+0x128>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <initJoystick+0x128>)
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <initJoystick+0x128>)
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <initJoystick+0x128>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <initJoystick+0x128>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <initJoystick+0x128>)
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <initJoystick+0x128>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <initJoystick+0x128>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	60d3      	str	r3, [r2, #12]

}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800

08001e50 <centerIsPressed>:



uint8_t centerIsPressed(){
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <centerIsPressed+0x50>)
 8001e56:	8a1b      	ldrh	r3, [r3, #16]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <centerIsPressed+0x2c>
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <centerIsPressed+0x54>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <centerIsPressed+0x58>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b1e      	cmp	r3, #30
 8001e6e:	d905      	bls.n	8001e7c <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <centerIsPressed+0x54>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <centerIsPressed+0x58>)
 8001e76:	6013      	str	r3, [r2, #0]
		 return 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e00c      	b.n	8001e96 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <centerIsPressed+0x50>)
 8001e7e:	8a1b      	ldrh	r3, [r3, #16]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <centerIsPressed+0x54>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <centerIsPressed+0x58>)
 8001e92:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001e94:	2300      	movs	r3, #0
	 }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	200001cc 	.word	0x200001cc
 8001ea8:	200001b4 	.word	0x200001b4

08001eac <upIsPressed>:

uint8_t upIsPressed(){
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001eb4:	8a1b      	ldrh	r3, [r3, #16]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <upIsPressed+0x2e>
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <upIsPressed+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <upIsPressed+0x58>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b1e      	cmp	r3, #30
 8001ecc:	d905      	bls.n	8001eda <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <upIsPressed+0x54>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <upIsPressed+0x58>)
 8001ed4:	6013      	str	r3, [r2, #0]
			 return 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00d      	b.n	8001ef6 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001eda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ede:	8a1b      	ldrh	r3, [r3, #16]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d104      	bne.n	8001ef4 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <upIsPressed+0x54>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <upIsPressed+0x58>)
 8001ef2:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001ef4:	2300      	movs	r3, #0
		 }
	 }
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200001cc 	.word	0x200001cc
 8001f04:	200001b8 	.word	0x200001b8

08001f08 <downIsPressed>:

uint8_t downIsPressed(){
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <downIsPressed+0x50>)
 8001f0e:	8a1b      	ldrh	r3, [r3, #16]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <downIsPressed+0x2c>
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <downIsPressed+0x54>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <downIsPressed+0x58>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b1e      	cmp	r3, #30
 8001f26:	d905      	bls.n	8001f34 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <downIsPressed+0x54>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <downIsPressed+0x58>)
 8001f2e:	6013      	str	r3, [r2, #0]
			 return 1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e00c      	b.n	8001f4e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <downIsPressed+0x50>)
 8001f36:	8a1b      	ldrh	r3, [r3, #16]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d104      	bne.n	8001f4c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <downIsPressed+0x54>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <downIsPressed+0x58>)
 8001f4a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001f4c:	2300      	movs	r3, #0
		 }
	 }
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	200001cc 	.word	0x200001cc
 8001f60:	200001bc 	.word	0x200001bc

08001f64 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <initTimer+0x60>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <initTimer+0x60>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <initTimer+0x64>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <initTimer+0x64>)
 8001f7c:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001f80:	f023 030f 	bic.w	r3, r3, #15
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <initTimer+0x64>)
 8001f8a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <initTimer+0x64>)
 8001f92:	2209      	movs	r2, #9
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <initTimer+0x64>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <initTimer+0x64>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <initTimer+0x64>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <initTimer+0x64>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2018      	movs	r0, #24
 8001fb6:	f7ff fe8b 	bl	8001cd0 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001fba:	2018      	movs	r0, #24
 8001fbc:	f7ff fe6e 	bl	8001c9c <NVIC_EnableIRQ>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40014000 	.word	0x40014000

08001fcc <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	runtime++;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001fd8:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6113      	str	r3, [r2, #16]
 }
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200001cc 	.word	0x200001cc
 8001ff4:	40014000 	.word	0x40014000

08001ff8 <I2C_init>:

    return val;
}

void I2C_init()
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <I2C_init+0x144>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	4a4e      	ldr	r2, [pc, #312]	; (800213c <I2C_init+0x144>)
 8002002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002006:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <I2C_init+0x148>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <I2C_init+0x148>)
 800200e:	f023 030f 	bic.w	r3, r3, #15
 8002012:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <I2C_init+0x148>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	4a49      	ldr	r2, [pc, #292]	; (8002140 <I2C_init+0x148>)
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <I2C_init+0x148>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	4a46      	ldr	r2, [pc, #280]	; (8002140 <I2C_init+0x148>)
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <I2C_init+0x148>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	4a43      	ldr	r2, [pc, #268]	; (8002140 <I2C_init+0x148>)
 8002032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002036:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <I2C_init+0x148>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a40      	ldr	r2, [pc, #256]	; (8002140 <I2C_init+0x148>)
 800203e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002042:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <I2C_init+0x148>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <I2C_init+0x148>)
 800204a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800204e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <I2C_init+0x148>)
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <I2C_init+0x148>)
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	b29b      	uxth	r3, r3
 800205e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002060:	4b37      	ldr	r3, [pc, #220]	; (8002140 <I2C_init+0x148>)
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4a36      	ldr	r2, [pc, #216]	; (8002140 <I2C_init+0x148>)
 8002068:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800206c:	b29b      	uxth	r3, r3
 800206e:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <I2C_init+0x148>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <I2C_init+0x148>)
 8002076:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800207a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <I2C_init+0x148>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <I2C_init+0x148>)
 8002082:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8002086:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <I2C_init+0x148>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <I2C_init+0x148>)
 800208e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002092:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <I2C_init+0x148>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <I2C_init+0x148>)
 800209a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800209e:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <I2C_init+0x144>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a25      	ldr	r2, [pc, #148]	; (800213c <I2C_init+0x144>)
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <I2C_init+0x14c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <I2C_init+0x14c>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <I2C_init+0x14c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4921      	ldr	r1, [pc, #132]	; (8002144 <I2C_init+0x14c>)
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <I2C_init+0x150>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <I2C_init+0x14c>)
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <I2C_init+0x14c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <I2C_init+0x14c>)
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <I2C_init+0x14c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <I2C_init+0x14c>)
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <I2C_init+0x154>)
 80020d8:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <I2C_init+0x14c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a19      	ldr	r2, [pc, #100]	; (8002144 <I2C_init+0x14c>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <I2C_init+0x14c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <I2C_init+0x14c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <I2C_init+0x14c>)
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <I2C_init+0x14c>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <I2C_init+0x14c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a11      	ldr	r2, [pc, #68]	; (8002144 <I2C_init+0x14c>)
 8002100:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002104:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <I2C_init+0x14c>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <I2C_init+0x14c>)
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <I2C_init+0x14c>)
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <I2C_init+0x14c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <I2C_init+0x14c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <I2C_init+0x14c>)
 8002120:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002128:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <I2C_init+0x14c>)
 800212c:	4a05      	ldr	r2, [pc, #20]	; (8002144 <I2C_init+0x14c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	6053      	str	r3, [r2, #4]
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	48000400 	.word	0x48000400
 8002144:	40005400 	.word	0x40005400
 8002148:	00cfe0ff 	.word	0x00cfe0ff
 800214c:	10805e89 	.word	0x10805e89

08002150 <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 50;      // Returns a pseudo-random integer [0:32].
 8002158:	f001 ffd4 	bl	8004104 <rand>
 800215c:	4603      	mov	r3, r0
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <spawnEnemy+0xcc>)
 8002160:	fb82 1203 	smull	r1, r2, r2, r3
 8002164:	1111      	asrs	r1, r2, #4
 8002166:	17da      	asrs	r2, r3, #31
 8002168:	1a8a      	subs	r2, r1, r2
 800216a:	2132      	movs	r1, #50	; 0x32
 800216c:	fb01 f202 	mul.w	r2, r1, r2
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d14c      	bne.n	8002214 <spawnEnemy+0xc4>
		//int8_t enemyPos = rand() % 156;
		//TODO: Fix tilfældighedsgenerator
		uint8_t enemyPos = 20;
 800217a:	2314      	movs	r3, #20
 800217c:	76fb      	strb	r3, [r7, #27]


		enemy_t* enemy = malloc(sizeof(enemy_t));
 800217e:	2014      	movs	r0, #20
 8002180:	f001 fea2 	bl	8003ec8 <malloc>
 8002184:	4603      	mov	r3, r0
 8002186:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2202      	movs	r2, #2
 800218c:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 800218e:	2008      	movs	r0, #8
 8002190:	f001 fe9a 	bl	8003ec8 <malloc>
 8002194:	4603      	mov	r3, r0
 8002196:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 8002198:	7efb      	ldrb	r3, [r7, #27]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f8f9 	bl	8002394 <intToFp>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f000 f8f3 	bl	8002394 <intToFp>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 80021ba:	2008      	movs	r0, #8
 80021bc:	f001 fe84 	bl	8003ec8 <malloc>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 f8e5 	bl	8002394 <intToFp>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d6:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 80021de:	2008      	movs	r0, #8
 80021e0:	f001 fe72 	bl	8003ec8 <malloc>
 80021e4:	4603      	mov	r3, r0
 80021e6:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <spawnEnemy+0xd0>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2264      	movs	r2, #100	; 0x64
 800220a:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 ffb1 	bl	8003176 <appendEnemy>
	}
}
 8002214:	bf00      	nop
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	51eb851f 	.word	0x51eb851f
 8002220:	200001cc 	.word	0x200001cc

08002224 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002232:	e01c      	b.n	800226e <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	440a      	add	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	440a      	add	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1df      	bne.n	8002234 <updateEnemy+0x10>
	}
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b092      	sub	sp, #72	; 0x48
 8002288:	af04      	add	r7, sp, #16
 800228a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002292:	e051      	b.n	8002338 <shootEnemy+0xb4>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	7b12      	ldrb	r2, [r2, #12]
 80022a0:	441a      	add	r2, r3
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <shootEnemy+0xc4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d243      	bcs.n	8002332 <shootEnemy+0xae>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f872 	bl	8002394 <intToFp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	2002      	movs	r0, #2
 80022b6:	f000 f86d 	bl	8002394 <intToFp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(1)};
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685c      	ldr	r4, [r3, #4]
 80022d0:	2001      	movs	r0, #1
 80022d2:	f000 f85f 	bl	8002394 <intToFp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4423      	add	r3, r4
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002308:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 800230c:	687d      	ldr	r5, [r7, #4]
 800230e:	466c      	mov	r4, sp
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002322:	4628      	mov	r0, r5
 8002324:	f000 fef4 	bl	8003110 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <shootEnemy+0xc4>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1aa      	bne.n	8002294 <shootEnemy+0x10>
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};

		appendBullet(&(gameState->bulletLL), bullet);
	}*/
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3738      	adds	r7, #56	; 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bdb0      	pop	{r4, r5, r7, pc}
 8002348:	200001cc 	.word	0x200001cc

0800234c <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800235a:	e013      	b.n	8002384 <detectCityHit+0x38>
		if(fpToInt(thisNode->enemy->position->y) >= 40){
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f82a 	bl	80023be <fpToInt>
 800236a:	4603      	mov	r3, r0
 800236c:	2b27      	cmp	r3, #39	; 0x27
 800236e:	dd06      	ble.n	800237e <detectCityHit+0x32>
			//gameState->cityLives--;
			deleteEnemyNode(gameState, thisNode);
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 ff2e 	bl	80031d4 <deleteEnemyNode>
			drawhearth(gameState);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fae5 	bl	8002948 <drawhearth>
		}
		thisNode = thisNode->nextEnemyNode;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e8      	bne.n	800235c <detectCityHit+0x10>
	}
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
	output+=n;
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
	output<<=16;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	60fb      	str	r3, [r7, #12]
	return output;
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60bb      	str	r3, [r7, #8]
	int output=0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023d4:	607b      	str	r3, [r7, #4]
	fp>>=16;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	607b      	str	r3, [r7, #4]
	output+=fp;
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da03      	bge.n	80023f2 <fpToInt+0x34>
		output-=65536;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80023f0:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80023f2:	68fb      	ldr	r3, [r7, #12]

}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	n>>=8;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	607b      	str	r3, [r7, #4]
	m>>=8;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	60fb      	str	r3, [r7, #12]

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
 8002434:	68fb      	ldr	r3, [r7, #12]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002442:	b5b0      	push	{r4, r5, r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4608      	mov	r0, r1
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	0c03      	lsrs	r3, r0, #16
 8002456:	0402      	lsls	r2, r0, #16
 8002458:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800246a:	1884      	adds	r4, r0, r2
 800246c:	eb41 0503 	adc.w	r5, r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fe fb94 	bl	8000ba8 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4613      	mov	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    return result;
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bdb0      	pop	{r4, r5, r7, pc}

08002492 <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	1d38      	adds	r0, r7, #4
 800249c:	e880 0006 	stmia.w	r0, {r1, r2}
 80024a0:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ffaa 	bl	8002400 <fpMultiply>
 80024ac:	4603      	mov	r3, r0
 80024ae:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ffa3 	bl	8002400 <fpMultiply>
 80024ba:	4603      	mov	r3, r0
 80024bc:	617b      	str	r3, [r7, #20]
	return vectorOut;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da02      	bge.n	80024ee <fpAbs+0x18>
			output=(~output)+1;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	425b      	negs	r3, r3
 80024ec:	60fb      	str	r3, [r7, #12]
		}
	return output;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <drawbackground>:
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8002500:	2123      	movs	r1, #35	; 0x23
 8002502:	2037      	movs	r0, #55	; 0x37
 8002504:	f7ff f9a2 	bl	800184c <gotoxy>
	printf("*");
 8002508:	202a      	movs	r0, #42	; 0x2a
 800250a:	f001 fdb7 	bl	800407c <putchar>
	gotoxy(63,27);
 800250e:	211b      	movs	r1, #27
 8002510:	203f      	movs	r0, #63	; 0x3f
 8002512:	f7ff f99b 	bl	800184c <gotoxy>
	printf("*");
 8002516:	202a      	movs	r0, #42	; 0x2a
 8002518:	f001 fdb0 	bl	800407c <putchar>
	gotoxy(10,15);
 800251c:	210f      	movs	r1, #15
 800251e:	200a      	movs	r0, #10
 8002520:	f7ff f994 	bl	800184c <gotoxy>
	printf("*");
 8002524:	202a      	movs	r0, #42	; 0x2a
 8002526:	f001 fda9 	bl	800407c <putchar>
	gotoxy(20,40);
 800252a:	2128      	movs	r1, #40	; 0x28
 800252c:	2014      	movs	r0, #20
 800252e:	f7ff f98d 	bl	800184c <gotoxy>
	printf("%c",43);
 8002532:	202b      	movs	r0, #43	; 0x2b
 8002534:	f001 fda2 	bl	800407c <putchar>

	gotoxy(155,37);
 8002538:	2125      	movs	r1, #37	; 0x25
 800253a:	209b      	movs	r0, #155	; 0x9b
 800253c:	f7ff f986 	bl	800184c <gotoxy>
	printf("*");
 8002540:	202a      	movs	r0, #42	; 0x2a
 8002542:	f001 fd9b 	bl	800407c <putchar>
	gotoxy(110,28);
 8002546:	211c      	movs	r1, #28
 8002548:	206e      	movs	r0, #110	; 0x6e
 800254a:	f7ff f97f 	bl	800184c <gotoxy>
	printf("*");
 800254e:	202a      	movs	r0, #42	; 0x2a
 8002550:	f001 fd94 	bl	800407c <putchar>
	gotoxy(95,13);
 8002554:	210d      	movs	r1, #13
 8002556:	205f      	movs	r0, #95	; 0x5f
 8002558:	f7ff f978 	bl	800184c <gotoxy>
	printf("*");
 800255c:	202a      	movs	r0, #42	; 0x2a
 800255e:	f001 fd8d 	bl	800407c <putchar>
	gotoxy(130,19);
 8002562:	2113      	movs	r1, #19
 8002564:	2082      	movs	r0, #130	; 0x82
 8002566:	f7ff f971 	bl	800184c <gotoxy>
	printf("%c",43);
 800256a:	202b      	movs	r0, #43	; 0x2b
 800256c:	f001 fd86 	bl	800407c <putchar>

	gotoxy(5,27);
 8002570:	211b      	movs	r1, #27
 8002572:	2005      	movs	r0, #5
 8002574:	f7ff f96a 	bl	800184c <gotoxy>
	printf("*");
 8002578:	202a      	movs	r0, #42	; 0x2a
 800257a:	f001 fd7f 	bl	800407c <putchar>
	gotoxy(6,5);
 800257e:	2105      	movs	r1, #5
 8002580:	2006      	movs	r0, #6
 8002582:	f7ff f963 	bl	800184c <gotoxy>
	printf("*");
 8002586:	202a      	movs	r0, #42	; 0x2a
 8002588:	f001 fd78 	bl	800407c <putchar>
	gotoxy(13,13);
 800258c:	210d      	movs	r1, #13
 800258e:	200d      	movs	r0, #13
 8002590:	f7ff f95c 	bl	800184c <gotoxy>
	printf("*");
 8002594:	202a      	movs	r0, #42	; 0x2a
 8002596:	f001 fd71 	bl	800407c <putchar>
	gotoxy(60,7);
 800259a:	2107      	movs	r1, #7
 800259c:	203c      	movs	r0, #60	; 0x3c
 800259e:	f7ff f955 	bl	800184c <gotoxy>
	printf("%c",43);
 80025a2:	202b      	movs	r0, #43	; 0x2b
 80025a4:	f001 fd6a 	bl	800407c <putchar>

	gotoxy(140,3);
 80025a8:	2103      	movs	r1, #3
 80025aa:	208c      	movs	r0, #140	; 0x8c
 80025ac:	f7ff f94e 	bl	800184c <gotoxy>
	printf("*");
 80025b0:	202a      	movs	r0, #42	; 0x2a
 80025b2:	f001 fd63 	bl	800407c <putchar>
	gotoxy(120,5);
 80025b6:	2105      	movs	r1, #5
 80025b8:	2078      	movs	r0, #120	; 0x78
 80025ba:	f7ff f947 	bl	800184c <gotoxy>
	printf("*");
 80025be:	202a      	movs	r0, #42	; 0x2a
 80025c0:	f001 fd5c 	bl	800407c <putchar>
	gotoxy(110,7);
 80025c4:	2107      	movs	r1, #7
 80025c6:	206e      	movs	r0, #110	; 0x6e
 80025c8:	f7ff f940 	bl	800184c <gotoxy>
	printf("*");
 80025cc:	202a      	movs	r0, #42	; 0x2a
 80025ce:	f001 fd55 	bl	800407c <putchar>
	gotoxy(70,30);
 80025d2:	211e      	movs	r1, #30
 80025d4:	2046      	movs	r0, #70	; 0x46
 80025d6:	f7ff f939 	bl	800184c <gotoxy>
	printf("%c",43);
 80025da:	202b      	movs	r0, #43	; 0x2b
 80025dc:	f001 fd4e 	bl	800407c <putchar>

	gotoxy(135,33);
 80025e0:	2121      	movs	r1, #33	; 0x21
 80025e2:	2087      	movs	r0, #135	; 0x87
 80025e4:	f7ff f932 	bl	800184c <gotoxy>
	printf("*");
 80025e8:	202a      	movs	r0, #42	; 0x2a
 80025ea:	f001 fd47 	bl	800407c <putchar>
	gotoxy(123,36);
 80025ee:	2124      	movs	r1, #36	; 0x24
 80025f0:	207b      	movs	r0, #123	; 0x7b
 80025f2:	f7ff f92b 	bl	800184c <gotoxy>
	printf("*");
 80025f6:	202a      	movs	r0, #42	; 0x2a
 80025f8:	f001 fd40 	bl	800407c <putchar>
	gotoxy(138,40);
 80025fc:	2128      	movs	r1, #40	; 0x28
 80025fe:	208a      	movs	r0, #138	; 0x8a
 8002600:	f7ff f924 	bl	800184c <gotoxy>
	printf("*");
 8002604:	202a      	movs	r0, #42	; 0x2a
 8002606:	f001 fd39 	bl	800407c <putchar>
	gotoxy(127,25);
 800260a:	2119      	movs	r1, #25
 800260c:	207f      	movs	r0, #127	; 0x7f
 800260e:	f7ff f91d 	bl	800184c <gotoxy>
	printf("%c",43);
 8002612:	202b      	movs	r0, #43	; 0x2b
 8002614:	f001 fd32 	bl	800407c <putchar>

	gotoxy(105,32);
 8002618:	2120      	movs	r1, #32
 800261a:	2069      	movs	r0, #105	; 0x69
 800261c:	f7ff f916 	bl	800184c <gotoxy>
	printf("%c",42);
 8002620:	202a      	movs	r0, #42	; 0x2a
 8002622:	f001 fd2b 	bl	800407c <putchar>
	gotoxy(106,33);
 8002626:	2121      	movs	r1, #33	; 0x21
 8002628:	206a      	movs	r0, #106	; 0x6a
 800262a:	f7ff f90f 	bl	800184c <gotoxy>
	printf("%c",92);
 800262e:	205c      	movs	r0, #92	; 0x5c
 8002630:	f001 fd24 	bl	800407c <putchar>
	gotoxy(107,34);
 8002634:	2122      	movs	r1, #34	; 0x22
 8002636:	206b      	movs	r0, #107	; 0x6b
 8002638:	f7ff f908 	bl	800184c <gotoxy>
	printf("%c",92);
 800263c:	205c      	movs	r0, #92	; 0x5c
 800263e:	f001 fd1d 	bl	800407c <putchar>

	gotoxy(23,15);
 8002642:	210f      	movs	r1, #15
 8002644:	2017      	movs	r0, #23
 8002646:	f7ff f901 	bl	800184c <gotoxy>
	printf("*");
 800264a:	202a      	movs	r0, #42	; 0x2a
 800264c:	f001 fd16 	bl	800407c <putchar>
	gotoxy(37,21);
 8002650:	2115      	movs	r1, #21
 8002652:	2025      	movs	r0, #37	; 0x25
 8002654:	f7ff f8fa 	bl	800184c <gotoxy>
	printf("*");
 8002658:	202a      	movs	r0, #42	; 0x2a
 800265a:	f001 fd0f 	bl	800407c <putchar>
	gotoxy(26,24);
 800265e:	2118      	movs	r1, #24
 8002660:	201a      	movs	r0, #26
 8002662:	f7ff f8f3 	bl	800184c <gotoxy>
	printf("*");
 8002666:	202a      	movs	r0, #42	; 0x2a
 8002668:	f001 fd08 	bl	800407c <putchar>
	gotoxy(30,29);
 800266c:	211d      	movs	r1, #29
 800266e:	201e      	movs	r0, #30
 8002670:	f7ff f8ec 	bl	800184c <gotoxy>
	printf("%c",43);
 8002674:	202b      	movs	r0, #43	; 0x2b
 8002676:	f001 fd01 	bl	800407c <putchar>

	gotoxy(25,6);
 800267a:	2106      	movs	r1, #6
 800267c:	2019      	movs	r0, #25
 800267e:	f7ff f8e5 	bl	800184c <gotoxy>
	printf("*");
 8002682:	202a      	movs	r0, #42	; 0x2a
 8002684:	f001 fcfa 	bl	800407c <putchar>
	gotoxy(39,7);
 8002688:	2107      	movs	r1, #7
 800268a:	2027      	movs	r0, #39	; 0x27
 800268c:	f7ff f8de 	bl	800184c <gotoxy>
	printf("*");
 8002690:	202a      	movs	r0, #42	; 0x2a
 8002692:	f001 fcf3 	bl	800407c <putchar>
	gotoxy(41,3);
 8002696:	2103      	movs	r1, #3
 8002698:	2029      	movs	r0, #41	; 0x29
 800269a:	f7ff f8d7 	bl	800184c <gotoxy>
	printf("*");
 800269e:	202a      	movs	r0, #42	; 0x2a
 80026a0:	f001 fcec 	bl	800407c <putchar>
	gotoxy(75,10);
 80026a4:	210a      	movs	r1, #10
 80026a6:	204b      	movs	r0, #75	; 0x4b
 80026a8:	f7ff f8d0 	bl	800184c <gotoxy>
	printf("%c",43);
 80026ac:	202b      	movs	r0, #43	; 0x2b
 80026ae:	f001 fce5 	bl	800407c <putchar>

	gotoxy(100,20);
 80026b2:	2114      	movs	r1, #20
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f7ff f8c9 	bl	800184c <gotoxy>
	printf("%c",197);
 80026ba:	20c5      	movs	r0, #197	; 0xc5
 80026bc:	f001 fcde 	bl	800407c <putchar>
	gotoxy(135,12);
 80026c0:	210c      	movs	r1, #12
 80026c2:	2087      	movs	r0, #135	; 0x87
 80026c4:	f7ff f8c2 	bl	800184c <gotoxy>
	printf("%c",197);
 80026c8:	20c5      	movs	r0, #197	; 0xc5
 80026ca:	f001 fcd7 	bl	800407c <putchar>
	gotoxy(30,5);
 80026ce:	2105      	movs	r1, #5
 80026d0:	201e      	movs	r0, #30
 80026d2:	f7ff f8bb 	bl	800184c <gotoxy>
	printf("%c",197);
 80026d6:	20c5      	movs	r0, #197	; 0xc5
 80026d8:	f001 fcd0 	bl	800407c <putchar>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	460a      	mov	r2, r1
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 80026f0:	79bb      	ldrb	r3, [r7, #6]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	71bb      	strb	r3, [r7, #6]
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	3303      	adds	r3, #3
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7ff f8a3 	bl	800184c <gotoxy>
	printf("_");
 8002706:	205f      	movs	r0, #95	; 0x5f
 8002708:	f001 fcb8 	bl	800407c <putchar>
	gotoxy(X,Y+3);
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	3303      	adds	r3, #3
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7ff f899 	bl	800184c <gotoxy>
	printf("_");
 800271a:	205f      	movs	r0, #95	; 0x5f
 800271c:	f001 fcae 	bl	800407c <putchar>
	gotoxy(X+1,Y+3);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	3303      	adds	r3, #3
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7ff f88e 	bl	800184c <gotoxy>
	printf("_");
 8002730:	205f      	movs	r0, #95	; 0x5f
 8002732:	f001 fca3 	bl	800407c <putchar>
	gotoxy(X-2,Y+3);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	1e9a      	subs	r2, r3, #2
 800273a:	79bb      	ldrb	r3, [r7, #6]
 800273c:	3303      	adds	r3, #3
 800273e:	4619      	mov	r1, r3
 8002740:	4610      	mov	r0, r2
 8002742:	f7ff f883 	bl	800184c <gotoxy>
	printf("(");
 8002746:	2028      	movs	r0, #40	; 0x28
 8002748:	f001 fc98 	bl	800407c <putchar>
	gotoxy(X+2,Y+3);
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	1c9a      	adds	r2, r3, #2
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	3303      	adds	r3, #3
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7ff f878 	bl	800184c <gotoxy>
	printf(")");
 800275c:	2029      	movs	r0, #41	; 0x29
 800275e:	f001 fc8d 	bl	800407c <putchar>

	gotoxy(X+3,Y+2);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	1cda      	adds	r2, r3, #3
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	3302      	adds	r3, #2
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7ff f86d 	bl	800184c <gotoxy>
	printf("_");
 8002772:	205f      	movs	r0, #95	; 0x5f
 8002774:	f001 fc82 	bl	800407c <putchar>
	gotoxy(X-3,Y+2);
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	1eda      	subs	r2, r3, #3
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	3302      	adds	r3, #2
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7ff f862 	bl	800184c <gotoxy>
	printf("_");
 8002788:	205f      	movs	r0, #95	; 0x5f
 800278a:	f001 fc77 	bl	800407c <putchar>
	gotoxy(X+4,Y+2);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	1d1a      	adds	r2, r3, #4
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	3302      	adds	r3, #2
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f7ff f857 	bl	800184c <gotoxy>
	printf("(");
 800279e:	2028      	movs	r0, #40	; 0x28
 80027a0:	f001 fc6c 	bl	800407c <putchar>
	gotoxy(X-4,Y+2);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	1f1a      	subs	r2, r3, #4
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	3302      	adds	r3, #2
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7ff f84c 	bl	800184c <gotoxy>
	printf(")");
 80027b4:	2029      	movs	r0, #41	; 0x29
 80027b6:	f001 fc61 	bl	800407c <putchar>

	gotoxy(X-5,Y+1);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	1f5a      	subs	r2, r3, #5
 80027be:	79bb      	ldrb	r3, [r7, #6]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7ff f841 	bl	800184c <gotoxy>
	printf("(");
 80027ca:	2028      	movs	r0, #40	; 0x28
 80027cc:	f001 fc56 	bl	800407c <putchar>
	gotoxy(X+5,Y+1);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	1d5a      	adds	r2, r3, #5
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7ff f836 	bl	800184c <gotoxy>
	printf("(");
 80027e0:	2028      	movs	r0, #40	; 0x28
 80027e2:	f001 fc4b 	bl	800407c <putchar>
	gotoxy(X-6,Y);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	3b06      	subs	r3, #6
 80027ea:	79ba      	ldrb	r2, [r7, #6]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f82c 	bl	800184c <gotoxy>
	printf("(");
 80027f4:	2028      	movs	r0, #40	; 0x28
 80027f6:	f001 fc41 	bl	800407c <putchar>
	gotoxy(X+6,Y);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	3306      	adds	r3, #6
 80027fe:	79ba      	ldrb	r2, [r7, #6]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f822 	bl	800184c <gotoxy>
	printf(")");
 8002808:	2029      	movs	r0, #41	; 0x29
 800280a:	f001 fc37 	bl	800407c <putchar>

	gotoxy(X-5,Y-1);
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	1f5a      	subs	r2, r3, #5
 8002812:	79bb      	ldrb	r3, [r7, #6]
 8002814:	3b01      	subs	r3, #1
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7ff f817 	bl	800184c <gotoxy>
	printf("(");
 800281e:	2028      	movs	r0, #40	; 0x28
 8002820:	f001 fc2c 	bl	800407c <putchar>
	gotoxy(X+5,Y-1);
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	1d5a      	adds	r2, r3, #5
 8002828:	79bb      	ldrb	r3, [r7, #6]
 800282a:	3b01      	subs	r3, #1
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7ff f80c 	bl	800184c <gotoxy>
	printf(")");
 8002834:	2029      	movs	r0, #41	; 0x29
 8002836:	f001 fc21 	bl	800407c <putchar>
	gotoxy(X-4,Y-2);
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	1f1a      	subs	r2, r3, #4
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	3b02      	subs	r3, #2
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff f801 	bl	800184c <gotoxy>
	printf("(");
 800284a:	2028      	movs	r0, #40	; 0x28
 800284c:	f001 fc16 	bl	800407c <putchar>
	gotoxy(X+4,Y-2);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	1d1a      	adds	r2, r3, #4
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	3b02      	subs	r3, #2
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7fe fff6 	bl	800184c <gotoxy>
	printf(")");
 8002860:	2029      	movs	r0, #41	; 0x29
 8002862:	f001 fc0b 	bl	800407c <putchar>

	gotoxy(X-3,Y-3);
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	1eda      	subs	r2, r3, #3
 800286a:	79bb      	ldrb	r3, [r7, #6]
 800286c:	3b03      	subs	r3, #3
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7fe ffeb 	bl	800184c <gotoxy>
	printf("_");
 8002876:	205f      	movs	r0, #95	; 0x5f
 8002878:	f001 fc00 	bl	800407c <putchar>
	gotoxy(X+3,Y-3);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	1cda      	adds	r2, r3, #3
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	3b03      	subs	r3, #3
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe ffe0 	bl	800184c <gotoxy>
	printf("_");
 800288c:	205f      	movs	r0, #95	; 0x5f
 800288e:	f001 fbf5 	bl	800407c <putchar>
	gotoxy(X-2,Y-3);
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	1e9a      	subs	r2, r3, #2
 8002896:	79bb      	ldrb	r3, [r7, #6]
 8002898:	3b03      	subs	r3, #3
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7fe ffd5 	bl	800184c <gotoxy>
	printf("(");
 80028a2:	2028      	movs	r0, #40	; 0x28
 80028a4:	f001 fbea 	bl	800407c <putchar>
	gotoxy(X+2,Y-3);
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	1c9a      	adds	r2, r3, #2
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	3b03      	subs	r3, #3
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f7fe ffca 	bl	800184c <gotoxy>
	printf(")");
 80028b8:	2029      	movs	r0, #41	; 0x29
 80028ba:	f001 fbdf 	bl	800407c <putchar>

	gotoxy(X-1,Y-4);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	3b04      	subs	r3, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7fe ffbf 	bl	800184c <gotoxy>
	printf("_");
 80028ce:	205f      	movs	r0, #95	; 0x5f
 80028d0:	f001 fbd4 	bl	800407c <putchar>
	gotoxy(X,Y-4);
 80028d4:	79fa      	ldrb	r2, [r7, #7]
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	3b04      	subs	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7fe ffb5 	bl	800184c <gotoxy>
	printf("_");
 80028e2:	205f      	movs	r0, #95	; 0x5f
 80028e4:	f001 fbca 	bl	800407c <putchar>
	gotoxy(X+1,Y-4);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	79bb      	ldrb	r3, [r7, #6]
 80028ee:	3b04      	subs	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7fe ffaa 	bl	800184c <gotoxy>
	printf("_");
 80028f8:	205f      	movs	r0, #95	; 0x5f
 80028fa:	f001 fbbf 	bl	800407c <putchar>

	gotoxy(X-2,Y);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	3b02      	subs	r3, #2
 8002902:	79ba      	ldrb	r2, [r7, #6]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ffa0 	bl	800184c <gotoxy>
	printf("O");
 800290c:	204f      	movs	r0, #79	; 0x4f
 800290e:	f001 fbb5 	bl	800407c <putchar>
	gotoxy(X+1,Y+2);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	79bb      	ldrb	r3, [r7, #6]
 8002918:	3302      	adds	r3, #2
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f7fe ff95 	bl	800184c <gotoxy>
	printf("o");
 8002922:	206f      	movs	r0, #111	; 0x6f
 8002924:	f001 fbaa 	bl	800407c <putchar>
	gotoxy(X+3,Y-1);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	1cda      	adds	r2, r3, #3
 800292c:	79bb      	ldrb	r3, [r7, #6]
 800292e:	3b01      	subs	r3, #1
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7fe ff8a 	bl	800184c <gotoxy>
	printf("O");
 8002938:	204f      	movs	r0, #79	; 0x4f
 800293a:	f001 fb9f 	bl	800407c <putchar>

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8002950:	2101      	movs	r1, #1
 8002952:	200f      	movs	r0, #15
 8002954:	f7fe ff7a 	bl	800184c <gotoxy>
	printf("           ");
 8002958:	483b      	ldr	r0, [pc, #236]	; (8002a48 <drawhearth+0x100>)
 800295a:	f001 fb77 	bl	800404c <iprintf>
	gotoxy(15,2);
 800295e:	2102      	movs	r1, #2
 8002960:	200f      	movs	r0, #15
 8002962:	f7fe ff73 	bl	800184c <gotoxy>
	printf("           ");
 8002966:	4838      	ldr	r0, [pc, #224]	; (8002a48 <drawhearth+0x100>)
 8002968:	f001 fb70 	bl	800404c <iprintf>
	fgcolor(1);
 800296c:	2001      	movs	r0, #1
 800296e:	f7fe ff41 	bl	80017f4 <fgcolor>

	if(gameState->cityLives >= 1){
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <drawhearth+0x6c>
		gotoxy(15,1);
 800297c:	2101      	movs	r1, #1
 800297e:	200f      	movs	r0, #15
 8002980:	f7fe ff64 	bl	800184c <gotoxy>
		printf("%c",219);
 8002984:	20db      	movs	r0, #219	; 0xdb
 8002986:	f001 fb79 	bl	800407c <putchar>
		gotoxy(17,1);
 800298a:	2101      	movs	r1, #1
 800298c:	2011      	movs	r0, #17
 800298e:	f7fe ff5d 	bl	800184c <gotoxy>
		printf("%c",219);
 8002992:	20db      	movs	r0, #219	; 0xdb
 8002994:	f001 fb72 	bl	800407c <putchar>
		gotoxy(16,2);
 8002998:	2102      	movs	r1, #2
 800299a:	2010      	movs	r0, #16
 800299c:	f7fe ff56 	bl	800184c <gotoxy>
		printf("%c",223);
 80029a0:	20df      	movs	r0, #223	; 0xdf
 80029a2:	f001 fb6b 	bl	800407c <putchar>
		gotoxy(16,1);
 80029a6:	2101      	movs	r1, #1
 80029a8:	2010      	movs	r0, #16
 80029aa:	f7fe ff4f 	bl	800184c <gotoxy>
		printf("%c",220);
 80029ae:	20dc      	movs	r0, #220	; 0xdc
 80029b0:	f001 fb64 	bl	800407c <putchar>
	}
	if(gameState->cityLives >= 2){
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d91b      	bls.n	80029f6 <drawhearth+0xae>
		gotoxy(19,1);
 80029be:	2101      	movs	r1, #1
 80029c0:	2013      	movs	r0, #19
 80029c2:	f7fe ff43 	bl	800184c <gotoxy>
		printf("%c",219);
 80029c6:	20db      	movs	r0, #219	; 0xdb
 80029c8:	f001 fb58 	bl	800407c <putchar>
		gotoxy(21,1);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2015      	movs	r0, #21
 80029d0:	f7fe ff3c 	bl	800184c <gotoxy>
		printf("%c",219);
 80029d4:	20db      	movs	r0, #219	; 0xdb
 80029d6:	f001 fb51 	bl	800407c <putchar>
		gotoxy(20,2);
 80029da:	2102      	movs	r1, #2
 80029dc:	2014      	movs	r0, #20
 80029de:	f7fe ff35 	bl	800184c <gotoxy>
		printf("%c",223);
 80029e2:	20df      	movs	r0, #223	; 0xdf
 80029e4:	f001 fb4a 	bl	800407c <putchar>
		gotoxy(20,1);
 80029e8:	2101      	movs	r1, #1
 80029ea:	2014      	movs	r0, #20
 80029ec:	f7fe ff2e 	bl	800184c <gotoxy>
		printf("%c",220);
 80029f0:	20dc      	movs	r0, #220	; 0xdc
 80029f2:	f001 fb43 	bl	800407c <putchar>

	}
	if(gameState->cityLives >= 3){
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d91b      	bls.n	8002a38 <drawhearth+0xf0>
		gotoxy(23,1);
 8002a00:	2101      	movs	r1, #1
 8002a02:	2017      	movs	r0, #23
 8002a04:	f7fe ff22 	bl	800184c <gotoxy>
		printf("%c",219);
 8002a08:	20db      	movs	r0, #219	; 0xdb
 8002a0a:	f001 fb37 	bl	800407c <putchar>
		gotoxy(25,1);
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2019      	movs	r0, #25
 8002a12:	f7fe ff1b 	bl	800184c <gotoxy>
		printf("%c",219);
 8002a16:	20db      	movs	r0, #219	; 0xdb
 8002a18:	f001 fb30 	bl	800407c <putchar>
		gotoxy(24,2);
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	2018      	movs	r0, #24
 8002a20:	f7fe ff14 	bl	800184c <gotoxy>
		printf("%c",223);
 8002a24:	20df      	movs	r0, #223	; 0xdf
 8002a26:	f001 fb29 	bl	800407c <putchar>
		gotoxy(24,1);
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2018      	movs	r0, #24
 8002a2e:	f7fe ff0d 	bl	800184c <gotoxy>
		printf("%c",220);
 8002a32:	20dc      	movs	r0, #220	; 0xdc
 8002a34:	f001 fb22 	bl	800407c <putchar>
	}
	fgcolor(15);
 8002a38:	200f      	movs	r0, #15
 8002a3a:	f7fe fedb 	bl	80017f4 <fgcolor>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	08005480 	.word	0x08005480

08002a4c <drawEnemy>:
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	//int isLastElement = 0;
	enemyNode_t* thisNode = gameState->enemyLL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8002a5a:	e040      	b.n	8002ade <drawEnemy+0x92>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fcaa 	bl	80023be <fpToInt>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fca2 	bl	80023be <fpToInt>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7fe fee4 	bl	800184c <gotoxy>
		printf("  ");
 8002a84:	481a      	ldr	r0, [pc, #104]	; (8002af0 <drawEnemy+0xa4>)
 8002a86:	f001 fae1 	bl	800404c <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fc93 	bl	80023be <fpToInt>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fc8b 	bl	80023be <fpToInt>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7fe fecd 	bl	800184c <gotoxy>
		printf(":E");
 8002ab2:	4810      	ldr	r0, [pc, #64]	; (8002af4 <drawEnemy+0xa8>)
 8002ab4:	f001 faca 	bl	800404c <iprintf>
		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6852      	ldr	r2, [r2, #4]
 8002ad6:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1bb      	bne.n	8002a5c <drawEnemy+0x10>
	}
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	bf00      	nop
 8002af0:	0800548c 	.word	0x0800548c
 8002af4:	08005490 	.word	0x08005490

08002af8 <drawCity>:
//47 92


}

void drawCity(){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0

	gotoxy(14,44);
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	200e      	movs	r0, #14
 8002b00:	f7fe fea4 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b04:	20db      	movs	r0, #219	; 0xdb
 8002b06:	f001 fab9 	bl	800407c <putchar>

	gotoxy(16,44);
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	f7fe fe9d 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b12:	20db      	movs	r0, #219	; 0xdb
 8002b14:	f001 fab2 	bl	800407c <putchar>

	gotoxy(17,44);
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	2011      	movs	r0, #17
 8002b1c:	f7fe fe96 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b20:	20db      	movs	r0, #219	; 0xdb
 8002b22:	f001 faab 	bl	800407c <putchar>
	gotoxy(17,43);
 8002b26:	212b      	movs	r1, #43	; 0x2b
 8002b28:	2011      	movs	r0, #17
 8002b2a:	f7fe fe8f 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b2e:	20db      	movs	r0, #219	; 0xdb
 8002b30:	f001 faa4 	bl	800407c <putchar>

	gotoxy(19,44);
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	2013      	movs	r0, #19
 8002b38:	f7fe fe88 	bl	800184c <gotoxy>
	printf("%c",220);
 8002b3c:	20dc      	movs	r0, #220	; 0xdc
 8002b3e:	f001 fa9d 	bl	800407c <putchar>

	gotoxy(21,44);
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	2015      	movs	r0, #21
 8002b46:	f7fe fe81 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b4a:	20db      	movs	r0, #219	; 0xdb
 8002b4c:	f001 fa96 	bl	800407c <putchar>

	gotoxy(23,44);
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	2017      	movs	r0, #23
 8002b54:	f7fe fe7a 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b58:	20db      	movs	r0, #219	; 0xdb
 8002b5a:	f001 fa8f 	bl	800407c <putchar>
	gotoxy(23,43);
 8002b5e:	212b      	movs	r1, #43	; 0x2b
 8002b60:	2017      	movs	r0, #23
 8002b62:	f7fe fe73 	bl	800184c <gotoxy>
	printf("%c",220);
 8002b66:	20dc      	movs	r0, #220	; 0xdc
 8002b68:	f001 fa88 	bl	800407c <putchar>

	gotoxy(25,44);
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	2019      	movs	r0, #25
 8002b70:	f7fe fe6c 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b74:	20db      	movs	r0, #219	; 0xdb
 8002b76:	f001 fa81 	bl	800407c <putchar>
	gotoxy(25,43);
 8002b7a:	212b      	movs	r1, #43	; 0x2b
 8002b7c:	2019      	movs	r0, #25
 8002b7e:	f7fe fe65 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b82:	20db      	movs	r0, #219	; 0xdb
 8002b84:	f001 fa7a 	bl	800407c <putchar>
	gotoxy(25,42);
 8002b88:	212a      	movs	r1, #42	; 0x2a
 8002b8a:	2019      	movs	r0, #25
 8002b8c:	f7fe fe5e 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b90:	20db      	movs	r0, #219	; 0xdb
 8002b92:	f001 fa73 	bl	800407c <putchar>

	gotoxy(27,44);
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	201b      	movs	r0, #27
 8002b9a:	f7fe fe57 	bl	800184c <gotoxy>
	printf("%c",219);
 8002b9e:	20db      	movs	r0, #219	; 0xdb
 8002ba0:	f001 fa6c 	bl	800407c <putchar>
	gotoxy(27,43);
 8002ba4:	212b      	movs	r1, #43	; 0x2b
 8002ba6:	201b      	movs	r0, #27
 8002ba8:	f7fe fe50 	bl	800184c <gotoxy>
	printf("%c",220);
 8002bac:	20dc      	movs	r0, #220	; 0xdc
 8002bae:	f001 fa65 	bl	800407c <putchar>

	gotoxy(28,44);
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	201c      	movs	r0, #28
 8002bb6:	f7fe fe49 	bl	800184c <gotoxy>
	printf("%c",219);
 8002bba:	20db      	movs	r0, #219	; 0xdb
 8002bbc:	f001 fa5e 	bl	800407c <putchar>

	gotoxy(36,44);
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	2024      	movs	r0, #36	; 0x24
 8002bc4:	f7fe fe42 	bl	800184c <gotoxy>
	printf("%c",219);
 8002bc8:	20db      	movs	r0, #219	; 0xdb
 8002bca:	f001 fa57 	bl	800407c <putchar>
	gotoxy(36,43);
 8002bce:	212b      	movs	r1, #43	; 0x2b
 8002bd0:	2024      	movs	r0, #36	; 0x24
 8002bd2:	f7fe fe3b 	bl	800184c <gotoxy>
	printf("%c",219);
 8002bd6:	20db      	movs	r0, #219	; 0xdb
 8002bd8:	f001 fa50 	bl	800407c <putchar>

	gotoxy(37,44);
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	2025      	movs	r0, #37	; 0x25
 8002be0:	f7fe fe34 	bl	800184c <gotoxy>
	printf("%c",219);
 8002be4:	20db      	movs	r0, #219	; 0xdb
 8002be6:	f001 fa49 	bl	800407c <putchar>

	gotoxy(38,44);
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	2026      	movs	r0, #38	; 0x26
 8002bee:	f7fe fe2d 	bl	800184c <gotoxy>
	printf("%c",220);
 8002bf2:	20dc      	movs	r0, #220	; 0xdc
 8002bf4:	f001 fa42 	bl	800407c <putchar>

	gotoxy(40,44);
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	2028      	movs	r0, #40	; 0x28
 8002bfc:	f7fe fe26 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c00:	20db      	movs	r0, #219	; 0xdb
 8002c02:	f001 fa3b 	bl	800407c <putchar>
	gotoxy(40,43);
 8002c06:	212b      	movs	r1, #43	; 0x2b
 8002c08:	2028      	movs	r0, #40	; 0x28
 8002c0a:	f7fe fe1f 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c0e:	20db      	movs	r0, #219	; 0xdb
 8002c10:	f001 fa34 	bl	800407c <putchar>

	gotoxy(41,43);
 8002c14:	212b      	movs	r1, #43	; 0x2b
 8002c16:	2029      	movs	r0, #41	; 0x29
 8002c18:	f7fe fe18 	bl	800184c <gotoxy>
	printf("%c",205);
 8002c1c:	20cd      	movs	r0, #205	; 0xcd
 8002c1e:	f001 fa2d 	bl	800407c <putchar>

	gotoxy(42,44);
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	202a      	movs	r0, #42	; 0x2a
 8002c26:	f7fe fe11 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c2a:	20db      	movs	r0, #219	; 0xdb
 8002c2c:	f001 fa26 	bl	800407c <putchar>
	gotoxy(42,43);
 8002c30:	212b      	movs	r1, #43	; 0x2b
 8002c32:	202a      	movs	r0, #42	; 0x2a
 8002c34:	f7fe fe0a 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c38:	20db      	movs	r0, #219	; 0xdb
 8002c3a:	f001 fa1f 	bl	800407c <putchar>

	gotoxy(45,44);
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	202d      	movs	r0, #45	; 0x2d
 8002c42:	f7fe fe03 	bl	800184c <gotoxy>
	printf("%c",186);
 8002c46:	20ba      	movs	r0, #186	; 0xba
 8002c48:	f001 fa18 	bl	800407c <putchar>

	gotoxy(47,44);
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	202f      	movs	r0, #47	; 0x2f
 8002c50:	f7fe fdfc 	bl	800184c <gotoxy>
	printf("%c",220);
 8002c54:	20dc      	movs	r0, #220	; 0xdc
 8002c56:	f001 fa11 	bl	800407c <putchar>

	gotoxy(55,44);
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	2037      	movs	r0, #55	; 0x37
 8002c5e:	f7fe fdf5 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c62:	20db      	movs	r0, #219	; 0xdb
 8002c64:	f001 fa0a 	bl	800407c <putchar>
	gotoxy(55,43);
 8002c68:	212b      	movs	r1, #43	; 0x2b
 8002c6a:	2037      	movs	r0, #55	; 0x37
 8002c6c:	f7fe fdee 	bl	800184c <gotoxy>
	printf("%c",220);
 8002c70:	20dc      	movs	r0, #220	; 0xdc
 8002c72:	f001 fa03 	bl	800407c <putchar>

	gotoxy(58,44);
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	203a      	movs	r0, #58	; 0x3a
 8002c7a:	f7fe fde7 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c7e:	20db      	movs	r0, #219	; 0xdb
 8002c80:	f001 f9fc 	bl	800407c <putchar>
	gotoxy(58,43);
 8002c84:	212b      	movs	r1, #43	; 0x2b
 8002c86:	203a      	movs	r0, #58	; 0x3a
 8002c88:	f7fe fde0 	bl	800184c <gotoxy>
	printf("%c",219);
 8002c8c:	20db      	movs	r0, #219	; 0xdb
 8002c8e:	f001 f9f5 	bl	800407c <putchar>
	gotoxy(58,42);
 8002c92:	212a      	movs	r1, #42	; 0x2a
 8002c94:	203a      	movs	r0, #58	; 0x3a
 8002c96:	f7fe fdd9 	bl	800184c <gotoxy>
	printf("%c",220);
 8002c9a:	20dc      	movs	r0, #220	; 0xdc
 8002c9c:	f001 f9ee 	bl	800407c <putchar>

	gotoxy(59,44);
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	203b      	movs	r0, #59	; 0x3b
 8002ca4:	f7fe fdd2 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ca8:	20db      	movs	r0, #219	; 0xdb
 8002caa:	f001 f9e7 	bl	800407c <putchar>
	gotoxy(59,43);
 8002cae:	212b      	movs	r1, #43	; 0x2b
 8002cb0:	203b      	movs	r0, #59	; 0x3b
 8002cb2:	f7fe fdcb 	bl	800184c <gotoxy>
	printf("%c",220);
 8002cb6:	20dc      	movs	r0, #220	; 0xdc
 8002cb8:	f001 f9e0 	bl	800407c <putchar>

	gotoxy(60,44);
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	203c      	movs	r0, #60	; 0x3c
 8002cc0:	f7fe fdc4 	bl	800184c <gotoxy>
	printf("%c",219);
 8002cc4:	20db      	movs	r0, #219	; 0xdb
 8002cc6:	f001 f9d9 	bl	800407c <putchar>

	gotoxy(61,44);
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	203d      	movs	r0, #61	; 0x3d
 8002cce:	f7fe fdbd 	bl	800184c <gotoxy>
	printf("%c",219);
 8002cd2:	20db      	movs	r0, #219	; 0xdb
 8002cd4:	f001 f9d2 	bl	800407c <putchar>
	gotoxy(61,43);
 8002cd8:	212b      	movs	r1, #43	; 0x2b
 8002cda:	203d      	movs	r0, #61	; 0x3d
 8002cdc:	f7fe fdb6 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ce0:	20db      	movs	r0, #219	; 0xdb
 8002ce2:	f001 f9cb 	bl	800407c <putchar>

	gotoxy(63,44);
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	203f      	movs	r0, #63	; 0x3f
 8002cea:	f7fe fdaf 	bl	800184c <gotoxy>
	printf("%c",219);
 8002cee:	20db      	movs	r0, #219	; 0xdb
 8002cf0:	f001 f9c4 	bl	800407c <putchar>

	gotoxy(64,44);
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	2040      	movs	r0, #64	; 0x40
 8002cf8:	f7fe fda8 	bl	800184c <gotoxy>
	printf("%c",220);
 8002cfc:	20dc      	movs	r0, #220	; 0xdc
 8002cfe:	f001 f9bd 	bl	800407c <putchar>

	gotoxy(65,44);
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	2041      	movs	r0, #65	; 0x41
 8002d06:	f7fe fda1 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d0a:	20db      	movs	r0, #219	; 0xdb
 8002d0c:	f001 f9b6 	bl	800407c <putchar>

	gotoxy(67,44);
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	2043      	movs	r0, #67	; 0x43
 8002d14:	f7fe fd9a 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d18:	20db      	movs	r0, #219	; 0xdb
 8002d1a:	f001 f9af 	bl	800407c <putchar>
	gotoxy(67,43);
 8002d1e:	212b      	movs	r1, #43	; 0x2b
 8002d20:	2043      	movs	r0, #67	; 0x43
 8002d22:	f7fe fd93 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d26:	20db      	movs	r0, #219	; 0xdb
 8002d28:	f001 f9a8 	bl	800407c <putchar>
	gotoxy(67,42);
 8002d2c:	212a      	movs	r1, #42	; 0x2a
 8002d2e:	2043      	movs	r0, #67	; 0x43
 8002d30:	f7fe fd8c 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d34:	20db      	movs	r0, #219	; 0xdb
 8002d36:	f001 f9a1 	bl	800407c <putchar>

	gotoxy(69,44);
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	2045      	movs	r0, #69	; 0x45
 8002d3e:	f7fe fd85 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d42:	20db      	movs	r0, #219	; 0xdb
 8002d44:	f001 f99a 	bl	800407c <putchar>
	gotoxy(69,43);
 8002d48:	212b      	movs	r1, #43	; 0x2b
 8002d4a:	2045      	movs	r0, #69	; 0x45
 8002d4c:	f7fe fd7e 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d50:	20db      	movs	r0, #219	; 0xdb
 8002d52:	f001 f993 	bl	800407c <putchar>
	gotoxy(69,42);
 8002d56:	212a      	movs	r1, #42	; 0x2a
 8002d58:	2045      	movs	r0, #69	; 0x45
 8002d5a:	f7fe fd77 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d5e:	20db      	movs	r0, #219	; 0xdb
 8002d60:	f001 f98c 	bl	800407c <putchar>

	gotoxy(71,44);
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	2047      	movs	r0, #71	; 0x47
 8002d68:	f7fe fd70 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d6c:	20db      	movs	r0, #219	; 0xdb
 8002d6e:	f001 f985 	bl	800407c <putchar>
	gotoxy(71,43);
 8002d72:	212b      	movs	r1, #43	; 0x2b
 8002d74:	2047      	movs	r0, #71	; 0x47
 8002d76:	f7fe fd69 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d7a:	20db      	movs	r0, #219	; 0xdb
 8002d7c:	f001 f97e 	bl	800407c <putchar>
	gotoxy(71,42);
 8002d80:	212a      	movs	r1, #42	; 0x2a
 8002d82:	2047      	movs	r0, #71	; 0x47
 8002d84:	f7fe fd62 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d88:	20db      	movs	r0, #219	; 0xdb
 8002d8a:	f001 f977 	bl	800407c <putchar>

	gotoxy(73,44);
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	2049      	movs	r0, #73	; 0x49
 8002d92:	f7fe fd5b 	bl	800184c <gotoxy>
	printf("%c",219);
 8002d96:	20db      	movs	r0, #219	; 0xdb
 8002d98:	f001 f970 	bl	800407c <putchar>
	gotoxy(73,43);
 8002d9c:	212b      	movs	r1, #43	; 0x2b
 8002d9e:	2049      	movs	r0, #73	; 0x49
 8002da0:	f7fe fd54 	bl	800184c <gotoxy>
	printf("%c",219);
 8002da4:	20db      	movs	r0, #219	; 0xdb
 8002da6:	f001 f969 	bl	800407c <putchar>

	gotoxy(74,44);
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	204a      	movs	r0, #74	; 0x4a
 8002dae:	f7fe fd4d 	bl	800184c <gotoxy>
	printf("%c",219);
 8002db2:	20db      	movs	r0, #219	; 0xdb
 8002db4:	f001 f962 	bl	800407c <putchar>

	gotoxy(76,44);
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	204c      	movs	r0, #76	; 0x4c
 8002dbc:	f7fe fd46 	bl	800184c <gotoxy>
	printf("%c",219);
 8002dc0:	20db      	movs	r0, #219	; 0xdb
 8002dc2:	f001 f95b 	bl	800407c <putchar>

	gotoxy(77,44);
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	204d      	movs	r0, #77	; 0x4d
 8002dca:	f7fe fd3f 	bl	800184c <gotoxy>
	printf("%c",219);
 8002dce:	20db      	movs	r0, #219	; 0xdb
 8002dd0:	f001 f954 	bl	800407c <putchar>
	gotoxy(77,43);
 8002dd4:	212b      	movs	r1, #43	; 0x2b
 8002dd6:	204d      	movs	r0, #77	; 0x4d
 8002dd8:	f7fe fd38 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ddc:	20db      	movs	r0, #219	; 0xdb
 8002dde:	f001 f94d 	bl	800407c <putchar>

	gotoxy(79,44);
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	204f      	movs	r0, #79	; 0x4f
 8002de6:	f7fe fd31 	bl	800184c <gotoxy>
	printf("%c",219);
 8002dea:	20db      	movs	r0, #219	; 0xdb
 8002dec:	f001 f946 	bl	800407c <putchar>
	gotoxy(79,44);
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	204f      	movs	r0, #79	; 0x4f
 8002df4:	f7fe fd2a 	bl	800184c <gotoxy>
	printf("%c",220);
 8002df8:	20dc      	movs	r0, #220	; 0xdc
 8002dfa:	f001 f93f 	bl	800407c <putchar>

	gotoxy(81,44);
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	2051      	movs	r0, #81	; 0x51
 8002e02:	f7fe fd23 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e06:	20db      	movs	r0, #219	; 0xdb
 8002e08:	f001 f938 	bl	800407c <putchar>
	gotoxy(81,43);
 8002e0c:	212b      	movs	r1, #43	; 0x2b
 8002e0e:	2051      	movs	r0, #81	; 0x51
 8002e10:	f7fe fd1c 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e14:	20db      	movs	r0, #219	; 0xdb
 8002e16:	f001 f931 	bl	800407c <putchar>

	gotoxy(82,44);
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	2052      	movs	r0, #82	; 0x52
 8002e1e:	f7fe fd15 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e22:	20db      	movs	r0, #219	; 0xdb
 8002e24:	f001 f92a 	bl	800407c <putchar>

	gotoxy(85,44);
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	2055      	movs	r0, #85	; 0x55
 8002e2c:	f7fe fd0e 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e30:	20db      	movs	r0, #219	; 0xdb
 8002e32:	f001 f923 	bl	800407c <putchar>
	gotoxy(85,43);
 8002e36:	212b      	movs	r1, #43	; 0x2b
 8002e38:	2055      	movs	r0, #85	; 0x55
 8002e3a:	f7fe fd07 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e3e:	20db      	movs	r0, #219	; 0xdb
 8002e40:	f001 f91c 	bl	800407c <putchar>
	gotoxy(85,42);
 8002e44:	212a      	movs	r1, #42	; 0x2a
 8002e46:	2055      	movs	r0, #85	; 0x55
 8002e48:	f7fe fd00 	bl	800184c <gotoxy>
	printf("%c",220);
 8002e4c:	20dc      	movs	r0, #220	; 0xdc
 8002e4e:	f001 f915 	bl	800407c <putchar>

	gotoxy(86,44);
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	2056      	movs	r0, #86	; 0x56
 8002e56:	f7fe fcf9 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e5a:	20db      	movs	r0, #219	; 0xdb
 8002e5c:	f001 f90e 	bl	800407c <putchar>

	gotoxy(87,44);
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	2057      	movs	r0, #87	; 0x57
 8002e64:	f7fe fcf2 	bl	800184c <gotoxy>
	printf("%c",220);
 8002e68:	20dc      	movs	r0, #220	; 0xdc
 8002e6a:	f001 f907 	bl	800407c <putchar>

	gotoxy(88,44);
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	2058      	movs	r0, #88	; 0x58
 8002e72:	f7fe fceb 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e76:	20db      	movs	r0, #219	; 0xdb
 8002e78:	f001 f900 	bl	800407c <putchar>
	gotoxy(88,43);
 8002e7c:	212b      	movs	r1, #43	; 0x2b
 8002e7e:	2058      	movs	r0, #88	; 0x58
 8002e80:	f7fe fce4 	bl	800184c <gotoxy>
	printf("%c",220);
 8002e84:	20dc      	movs	r0, #220	; 0xdc
 8002e86:	f001 f8f9 	bl	800407c <putchar>

	gotoxy(93,44);
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	205d      	movs	r0, #93	; 0x5d
 8002e8e:	f7fe fcdd 	bl	800184c <gotoxy>
	printf("%c",219);
 8002e92:	20db      	movs	r0, #219	; 0xdb
 8002e94:	f001 f8f2 	bl	800407c <putchar>

	gotoxy(94,44);
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	205e      	movs	r0, #94	; 0x5e
 8002e9c:	f7fe fcd6 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ea0:	20db      	movs	r0, #219	; 0xdb
 8002ea2:	f001 f8eb 	bl	800407c <putchar>
	gotoxy(94,43);
 8002ea6:	212b      	movs	r1, #43	; 0x2b
 8002ea8:	205e      	movs	r0, #94	; 0x5e
 8002eaa:	f7fe fccf 	bl	800184c <gotoxy>
	printf("%c",220);
 8002eae:	20dc      	movs	r0, #220	; 0xdc
 8002eb0:	f001 f8e4 	bl	800407c <putchar>

	gotoxy(95,44);
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	205f      	movs	r0, #95	; 0x5f
 8002eb8:	f7fe fcc8 	bl	800184c <gotoxy>
	printf("%c",220);
 8002ebc:	20dc      	movs	r0, #220	; 0xdc
 8002ebe:	f001 f8dd 	bl	800407c <putchar>

	gotoxy(96,44);
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	2060      	movs	r0, #96	; 0x60
 8002ec6:	f7fe fcc1 	bl	800184c <gotoxy>
	printf("%c",219);
 8002eca:	20db      	movs	r0, #219	; 0xdb
 8002ecc:	f001 f8d6 	bl	800407c <putchar>

	gotoxy(98,44);
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	2062      	movs	r0, #98	; 0x62
 8002ed4:	f7fe fcba 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ed8:	20db      	movs	r0, #219	; 0xdb
 8002eda:	f001 f8cf 	bl	800407c <putchar>
	gotoxy(98,43);
 8002ede:	212b      	movs	r1, #43	; 0x2b
 8002ee0:	2062      	movs	r0, #98	; 0x62
 8002ee2:	f7fe fcb3 	bl	800184c <gotoxy>
	printf("%c",220);
 8002ee6:	20dc      	movs	r0, #220	; 0xdc
 8002ee8:	f001 f8c8 	bl	800407c <putchar>

	gotoxy(99,44);
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	2063      	movs	r0, #99	; 0x63
 8002ef0:	f7fe fcac 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ef4:	20db      	movs	r0, #219	; 0xdb
 8002ef6:	f001 f8c1 	bl	800407c <putchar>

	gotoxy(103,44);
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	2067      	movs	r0, #103	; 0x67
 8002efe:	f7fe fca5 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f02:	20db      	movs	r0, #219	; 0xdb
 8002f04:	f001 f8ba 	bl	800407c <putchar>

	gotoxy(104,44);
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	2068      	movs	r0, #104	; 0x68
 8002f0c:	f7fe fc9e 	bl	800184c <gotoxy>
	printf("%c",220);
 8002f10:	20dc      	movs	r0, #220	; 0xdc
 8002f12:	f001 f8b3 	bl	800407c <putchar>

	gotoxy(107,44);
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	206b      	movs	r0, #107	; 0x6b
 8002f1a:	f7fe fc97 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f1e:	20db      	movs	r0, #219	; 0xdb
 8002f20:	f001 f8ac 	bl	800407c <putchar>

	gotoxy(108,44);
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	206c      	movs	r0, #108	; 0x6c
 8002f28:	f7fe fc90 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f2c:	20db      	movs	r0, #219	; 0xdb
 8002f2e:	f001 f8a5 	bl	800407c <putchar>
	gotoxy(108,43);
 8002f32:	212b      	movs	r1, #43	; 0x2b
 8002f34:	206c      	movs	r0, #108	; 0x6c
 8002f36:	f7fe fc89 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f3a:	20db      	movs	r0, #219	; 0xdb
 8002f3c:	f001 f89e 	bl	800407c <putchar>

	gotoxy(109,44);
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	206d      	movs	r0, #109	; 0x6d
 8002f44:	f7fe fc82 	bl	800184c <gotoxy>
	printf("%c",220);
 8002f48:	20dc      	movs	r0, #220	; 0xdc
 8002f4a:	f001 f897 	bl	800407c <putchar>

	gotoxy(112,44);
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	2070      	movs	r0, #112	; 0x70
 8002f52:	f7fe fc7b 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f56:	20db      	movs	r0, #219	; 0xdb
 8002f58:	f001 f890 	bl	800407c <putchar>

	gotoxy(113,44);
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	2071      	movs	r0, #113	; 0x71
 8002f60:	f7fe fc74 	bl	800184c <gotoxy>
	printf("%c",220);
 8002f64:	20dc      	movs	r0, #220	; 0xdc
 8002f66:	f001 f889 	bl	800407c <putchar>

	gotoxy(114,44);
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	2072      	movs	r0, #114	; 0x72
 8002f6e:	f7fe fc6d 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f72:	20db      	movs	r0, #219	; 0xdb
 8002f74:	f001 f882 	bl	800407c <putchar>
	gotoxy(114,43);
 8002f78:	212b      	movs	r1, #43	; 0x2b
 8002f7a:	2072      	movs	r0, #114	; 0x72
 8002f7c:	f7fe fc66 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f80:	20db      	movs	r0, #219	; 0xdb
 8002f82:	f001 f87b 	bl	800407c <putchar>

	gotoxy(115,44);
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	2073      	movs	r0, #115	; 0x73
 8002f8a:	f7fe fc5f 	bl	800184c <gotoxy>
	printf("%c",219);
 8002f8e:	20db      	movs	r0, #219	; 0xdb
 8002f90:	f001 f874 	bl	800407c <putchar>

	gotoxy(120,44);
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	2078      	movs	r0, #120	; 0x78
 8002f98:	f7fe fc58 	bl	800184c <gotoxy>
	printf("%c",47);
 8002f9c:	202f      	movs	r0, #47	; 0x2f
 8002f9e:	f001 f86d 	bl	800407c <putchar>
	gotoxy(121,43);
 8002fa2:	212b      	movs	r1, #43	; 0x2b
 8002fa4:	2079      	movs	r0, #121	; 0x79
 8002fa6:	f7fe fc51 	bl	800184c <gotoxy>
	printf("%c",47);
 8002faa:	202f      	movs	r0, #47	; 0x2f
 8002fac:	f001 f866 	bl	800407c <putchar>
	gotoxy(122,43);
 8002fb0:	212b      	movs	r1, #43	; 0x2b
 8002fb2:	207a      	movs	r0, #122	; 0x7a
 8002fb4:	f7fe fc4a 	bl	800184c <gotoxy>
	printf("%c",223);
 8002fb8:	20df      	movs	r0, #223	; 0xdf
 8002fba:	f001 f85f 	bl	800407c <putchar>
	gotoxy(122,42);
 8002fbe:	212a      	movs	r1, #42	; 0x2a
 8002fc0:	207a      	movs	r0, #122	; 0x7a
 8002fc2:	f7fe fc43 	bl	800184c <gotoxy>
	printf("%c",168);
 8002fc6:	20a8      	movs	r0, #168	; 0xa8
 8002fc8:	f001 f858 	bl	800407c <putchar>
	gotoxy(123,43);
 8002fcc:	212b      	movs	r1, #43	; 0x2b
 8002fce:	207b      	movs	r0, #123	; 0x7b
 8002fd0:	f7fe fc3c 	bl	800184c <gotoxy>
	printf("%c",92);
 8002fd4:	205c      	movs	r0, #92	; 0x5c
 8002fd6:	f001 f851 	bl	800407c <putchar>
	gotoxy(124,44);
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	207c      	movs	r0, #124	; 0x7c
 8002fde:	f7fe fc35 	bl	800184c <gotoxy>
	printf("%c",92);
 8002fe2:	205c      	movs	r0, #92	; 0x5c
 8002fe4:	f001 f84a 	bl	800407c <putchar>

	gotoxy(127,44);
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	207f      	movs	r0, #127	; 0x7f
 8002fec:	f7fe fc2e 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ff0:	20db      	movs	r0, #219	; 0xdb
 8002ff2:	f001 f843 	bl	800407c <putchar>
	gotoxy(127,43);
 8002ff6:	212b      	movs	r1, #43	; 0x2b
 8002ff8:	207f      	movs	r0, #127	; 0x7f
 8002ffa:	f7fe fc27 	bl	800184c <gotoxy>
	printf("%c",219);
 8002ffe:	20db      	movs	r0, #219	; 0xdb
 8003000:	f001 f83c 	bl	800407c <putchar>
	gotoxy(127,42);
 8003004:	212a      	movs	r1, #42	; 0x2a
 8003006:	207f      	movs	r0, #127	; 0x7f
 8003008:	f7fe fc20 	bl	800184c <gotoxy>
	printf("%c",219);
 800300c:	20db      	movs	r0, #219	; 0xdb
 800300e:	f001 f835 	bl	800407c <putchar>

	gotoxy(129,44);
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	2081      	movs	r0, #129	; 0x81
 8003016:	f7fe fc19 	bl	800184c <gotoxy>
	printf("%c",219);
 800301a:	20db      	movs	r0, #219	; 0xdb
 800301c:	f001 f82e 	bl	800407c <putchar>
	gotoxy(129,43);
 8003020:	212b      	movs	r1, #43	; 0x2b
 8003022:	2081      	movs	r0, #129	; 0x81
 8003024:	f7fe fc12 	bl	800184c <gotoxy>
	printf("%c",220);
 8003028:	20dc      	movs	r0, #220	; 0xdc
 800302a:	f001 f827 	bl	800407c <putchar>

	gotoxy(130,44);
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	2082      	movs	r0, #130	; 0x82
 8003032:	f7fe fc0b 	bl	800184c <gotoxy>
	printf("%c",219);
 8003036:	20db      	movs	r0, #219	; 0xdb
 8003038:	f001 f820 	bl	800407c <putchar>

	gotoxy(131,44);
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	2083      	movs	r0, #131	; 0x83
 8003040:	f7fe fc04 	bl	800184c <gotoxy>
	printf("%c",220);
 8003044:	20dc      	movs	r0, #220	; 0xdc
 8003046:	f001 f819 	bl	800407c <putchar>

	gotoxy(132,44);
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	2084      	movs	r0, #132	; 0x84
 800304e:	f7fe fbfd 	bl	800184c <gotoxy>
	printf("%c",219);
 8003052:	20db      	movs	r0, #219	; 0xdb
 8003054:	f001 f812 	bl	800407c <putchar>

	gotoxy(133,44);
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	2085      	movs	r0, #133	; 0x85
 800305c:	f7fe fbf6 	bl	800184c <gotoxy>
	printf("%c",219);
 8003060:	20db      	movs	r0, #219	; 0xdb
 8003062:	f001 f80b 	bl	800407c <putchar>
	gotoxy(133,43);
 8003066:	212b      	movs	r1, #43	; 0x2b
 8003068:	2085      	movs	r0, #133	; 0x85
 800306a:	f7fe fbef 	bl	800184c <gotoxy>
	printf("%c",219);
 800306e:	20db      	movs	r0, #219	; 0xdb
 8003070:	f001 f804 	bl	800407c <putchar>

	gotoxy(134,44);
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	2086      	movs	r0, #134	; 0x86
 8003078:	f7fe fbe8 	bl	800184c <gotoxy>
	printf("%c",219);
 800307c:	20db      	movs	r0, #219	; 0xdb
 800307e:	f000 fffd 	bl	800407c <putchar>

	gotoxy(135,44);
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	2087      	movs	r0, #135	; 0x87
 8003086:	f7fe fbe1 	bl	800184c <gotoxy>
	printf("%c",220);
 800308a:	20dc      	movs	r0, #220	; 0xdc
 800308c:	f000 fff6 	bl	800407c <putchar>

	gotoxy(137,44);
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	2089      	movs	r0, #137	; 0x89
 8003094:	f7fe fbda 	bl	800184c <gotoxy>
	printf("%c",220);
 8003098:	20dc      	movs	r0, #220	; 0xdc
 800309a:	f000 ffef 	bl	800407c <putchar>

	gotoxy(139,44);
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	208b      	movs	r0, #139	; 0x8b
 80030a2:	f7fe fbd3 	bl	800184c <gotoxy>
	printf("%c",220);
 80030a6:	20dc      	movs	r0, #220	; 0xdc
 80030a8:	f000 ffe8 	bl	800407c <putchar>

	gotoxy(141,44);
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	208d      	movs	r0, #141	; 0x8d
 80030b0:	f7fe fbcc 	bl	800184c <gotoxy>
	printf("%c",219);
 80030b4:	20db      	movs	r0, #219	; 0xdb
 80030b6:	f000 ffe1 	bl	800407c <putchar>

	gotoxy(142,44);
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	208e      	movs	r0, #142	; 0x8e
 80030be:	f7fe fbc5 	bl	800184c <gotoxy>
	printf("%c",220);
 80030c2:	20dc      	movs	r0, #220	; 0xdc
 80030c4:	f000 ffda 	bl	800407c <putchar>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 80030cc:	b084      	sub	sp, #16
 80030ce:	b5b0      	push	{r4, r5, r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	f107 0418 	add.w	r4, r7, #24
 80030d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 80030dc:	201c      	movs	r0, #28
 80030de:	f000 fef3 	bl	8003ec8 <malloc>
 80030e2:	4603      	mov	r3, r0
 80030e4:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	461d      	mov	r5, r3
 80030ea:	f107 0418 	add.w	r4, r7, #24
 80030ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f6:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
    return newNode;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr

08003110 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8003110:	b084      	sub	sp, #16
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af02      	add	r7, sp, #8
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	f107 001c 	add.w	r0, r7, #28
 800311e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8003122:	466a      	mov	r2, sp
 8003124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003128:	e893 0003 	ldmia.w	r3, {r0, r1}
 800312c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003136:	f7ff ffc9 	bl	80030cc <createBulletNode>
 800313a:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <appendBullet+0x3c>
        *head = newNode;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 800314a:	e00d      	b.n	8003168 <appendBullet+0x58>
        bulletNode_t* current = *head;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8003152:	e002      	b.n	800315a <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f8      	bne.n	8003154 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	619a      	str	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003172:	b004      	add	sp, #16
 8003174:	4770      	bx	lr

08003176 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8003180:	2008      	movs	r0, #8
 8003182:	f000 fea1 	bl	8003ec8 <malloc>
 8003186:	4603      	mov	r3, r0
 8003188:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10e      	bne.n	80031c2 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 80031aa:	e00a      	b.n	80031c2 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	605a      	str	r2, [r3, #4]
			break;
 80031ba:	e006      	b.n	80031ca <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f1      	bne.n	80031ac <appendEnemy+0x36>
	}
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d15b      	bne.n	80032aa <deleteEnemyNode+0xd6>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f8df 	bl	80023be <fpToInt>
 8003200:	4604      	mov	r4, r0
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f8d7 	bl	80023be <fpToInt>
 8003210:	4603      	mov	r3, r0
 8003212:	4619      	mov	r1, r3
 8003214:	4620      	mov	r0, r4
 8003216:	f7fe fb19 	bl	800184c <gotoxy>
		printf("  ");
 800321a:	4827      	ldr	r0, [pc, #156]	; (80032b8 <deleteEnemyNode+0xe4>)
 800321c:	f000 ff16 	bl	800404c <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	605a      	str	r2, [r3, #4]
		free(enemy);
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f000 fe54 	bl	8003ed8 <free>
		return;
 8003230:	e03e      	b.n	80032b0 <deleteEnemyNode+0xdc>
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d132      	bne.n	80032a0 <deleteEnemyNode+0xcc>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f8bb 	bl	80023be <fpToInt>
 8003248:	4604      	mov	r4, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f8b3 	bl	80023be <fpToInt>
 8003258:	4603      	mov	r3, r0
 800325a:	4619      	mov	r1, r3
 800325c:	4620      	mov	r0, r4
 800325e:	f7fe faf5 	bl	800184c <gotoxy>
			printf("  ");
 8003262:	4815      	ldr	r0, [pc, #84]	; (80032b8 <deleteEnemyNode+0xe4>)
 8003264:	f000 fef2 	bl	800404c <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe2e 	bl	8003ed8 <free>
			free(thisNode->enemy->position);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fe28 	bl	8003ed8 <free>
			free(thisNode->enemy->velocity);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fe22 	bl	8003ed8 <free>
			free(thisNode->enemy);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fe1d 	bl	8003ed8 <free>
			return;
 800329e:	e007      	b.n	80032b0 <deleteEnemyNode+0xdc>
		}
		preNode = thisNode;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1c0      	bne.n	8003232 <deleteEnemyNode+0x5e>
	}
}
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}
 80032b6:	bf00      	nop
 80032b8:	08005494 	.word	0x08005494

080032bc <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03c      	beq.n	8003348 <deleteBulletNode+0x8c>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d039      	beq.n	8003348 <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f870 	bl	80023be <fpToInt>
 80032de:	4604      	mov	r4, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f86a 	bl	80023be <fpToInt>
 80032ea:	4603      	mov	r3, r0
 80032ec:	0fda      	lsrs	r2, r3, #31
 80032ee:	4413      	add	r3, r2
 80032f0:	105b      	asrs	r3, r3, #1
 80032f2:	4619      	mov	r1, r3
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7fe faa9 	bl	800184c <gotoxy>
    printf(" ");
 80032fa:	2020      	movs	r0, #32
 80032fc:	f000 febe 	bl	800407c <putchar>

    if (*head == nodeToDelete) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d107      	bne.n	800331a <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8003312:	6838      	ldr	r0, [r7, #0]
 8003314:	f000 fde0 	bl	8003ed8 <free>
        return;
 8003318:	e017      	b.n	800334a <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003320:	e002      	b.n	8003328 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <deleteBulletNode+0x7c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d1f4      	bne.n	8003322 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f000 fdc9 	bl	8003ed8 <free>
 8003346:	e000      	b.n	800334a <deleteBulletNode+0x8e>
        return;
 8003348:	bf00      	nop
}
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42*yScale)}, {intToFp(2), intToFp(42*yScale)}, 1, 20, 0};
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
 8003368:	615a      	str	r2, [r3, #20]
 800336a:	2002      	movs	r0, #2
 800336c:	f7ff f812 	bl	8002394 <intToFp>
 8003370:	4603      	mov	r3, r0
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	2054      	movs	r0, #84	; 0x54
 8003376:	f7ff f80d 	bl	8002394 <intToFp>
 800337a:	4603      	mov	r3, r0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	2002      	movs	r0, #2
 8003380:	f7ff f808 	bl	8002394 <intToFp>
 8003384:	4603      	mov	r3, r0
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	2054      	movs	r0, #84	; 0x54
 800338a:	f7ff f803 	bl	8002394 <intToFp>
 800338e:	4603      	mov	r3, r0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3020 	strb.w	r3, [r7, #32]
 8003398:	2314      	movs	r3, #20
 800339a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 800339e:	4a21      	ldr	r2, [pc, #132]	; (8003424 <initVariables+0xd4>)
 80033a0:	f107 030c 	add.w	r3, r7, #12
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	4611      	mov	r1, r2
 80033a8:	8019      	strh	r1, [r3, #0]
 80033aa:	3302      	adds	r3, #2
 80033ac:	0c12      	lsrs	r2, r2, #16
 80033ae:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 040c 	add.w	r4, r3, #12
 80033f0:	f107 0510 	add.w	r5, r7, #16
 80033f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033fc:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	gameState->moon = moon;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3308      	adds	r3, #8
 800340c:	f107 020c 	add.w	r2, r7, #12
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	4611      	mov	r1, r2
 8003414:	8019      	strh	r1, [r3, #0]
 8003416:	3302      	adds	r3, #2
 8003418:	0c12      	lsrs	r2, r2, #16
 800341a:	701a      	strb	r2, [r3, #0]
	//TODO: continue to initialize everything
}
 800341c:	bf00      	nop
 800341e:	3728      	adds	r7, #40	; 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	bdb0      	pop	{r4, r5, r7, pc}
 8003424:	08005498 	.word	0x08005498

08003428 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y)/yScale); //TODO
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe ffc2 	bl	80023be <fpToInt>
 800343a:	4604      	mov	r4, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe ffbc 	bl	80023be <fpToInt>
 8003446:	4603      	mov	r3, r0
 8003448:	0fda      	lsrs	r2, r3, #31
 800344a:	4413      	add	r3, r2
 800344c:	105b      	asrs	r3, r3, #1
 800344e:	4619      	mov	r1, r3
 8003450:	4620      	mov	r0, r4
 8003452:	f7fe f9fb 	bl	800184c <gotoxy>
	printf(" ");
 8003456:	2020      	movs	r0, #32
 8003458:	f000 fe10 	bl	800407c <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y)/yScale); //TODO
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe ffac 	bl	80023be <fpToInt>
 8003466:	4604      	mov	r4, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe ffa6 	bl	80023be <fpToInt>
 8003472:	4603      	mov	r3, r0
 8003474:	0fda      	lsrs	r2, r3, #31
 8003476:	4413      	add	r3, r2
 8003478:	105b      	asrs	r3, r3, #1
 800347a:	4619      	mov	r1, r3
 800347c:	4620      	mov	r0, r4
 800347e:	f7fe f9e5 	bl	800184c <gotoxy>
	printf("A");
 8003482:	2041      	movs	r0, #65	; 0x41
 8003484:	f000 fdfa 	bl	800407c <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	330c      	adds	r3, #12
 800348e:	3214      	adds	r2, #20
 8003490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003494:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fad7 	bl	8002a4c <drawEnemy>
	drawBullets(gameState);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe fbb4 	bl	8001c0c <drawBullets>

	drawhearth(gameState);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fa4f 	bl	8002948 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7a1a      	ldrb	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7a5b      	ldrb	r3, [r3, #9]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f7ff f913 	bl	80026e0 <drawMoon>
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}

080034c2 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
		return 1;
	}
	return 0;
	uart_clear();
	*/
}
 80034ca:	bf00      	nop
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <readKey>:
		gameState->activeScreen = 3;
	}
}

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readKey(gameState_t* gameState){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 80034e0:	f7fd ffca 	bl	8001478 <uart_get_char>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d107      	bne.n	80034fe <readKey+0x26>
		gameState->direction = 1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <readKey+0x5c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(c == 'a'){
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b61      	cmp	r3, #97	; 0x61
 8003502:	d107      	bne.n	8003514 <readKey+0x3c>
		gameState->direction = -1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <readKey+0x5c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <readKey+0x5c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d903      	bls.n	800352a <readKey+0x52>
		gameState->direction = 0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200001cc 	.word	0x200001cc

08003538 <main>:

int main(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b09a      	sub	sp, #104	; 0x68
 800353c:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 800353e:	4ad1      	ldr	r2, [pc, #836]	; (8003884 <main+0x34c>)
 8003540:	463b      	mov	r3, r7
 8003542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003546:	e883 0003 	stmia.w	r3, {r0, r1}
 800354a:	4acf      	ldr	r2, [pc, #828]	; (8003888 <main+0x350>)
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003554:	e883 0003 	stmia.w	r3, {r0, r1}
 8003558:	4acc      	ldr	r2, [pc, #816]	; (800388c <main+0x354>)
 800355a:	f107 0310 	add.w	r3, r7, #16
 800355e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003562:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8003566:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 800356a:	f7fe f829 	bl	80015c0 <uart_init>
	initVariables(&gameState);
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff feec 	bl	8003350 <initVariables>
	initTimer();
 8003578:	f7fe fcf4 	bl	8001f64 <initTimer>
	initJoystick();
 800357c:	f7fe fbd2 	bl	8001d24 <initJoystick>
	I2C_init();
 8003580:	f7fe fd3a 	bl	8001ff8 <I2C_init>
	srand(time(NULL));   //RNG
 8003584:	2000      	movs	r0, #0
 8003586:	f000 fedb 	bl	8004340 <time>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4613      	mov	r3, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fd89 	bl	80040a8 <srand>

	while(1){
		switch(gameState.activeScreen){
 8003596:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800359a:	2b03      	cmp	r3, #3
 800359c:	d8fb      	bhi.n	8003596 <main+0x5e>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <main+0x6c>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	0800375d 	.word	0x0800375d
 80035ac:	0800385b 	.word	0x0800385b
 80035b0:	080038e5 	.word	0x080038e5
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 80035b4:	f7fe f93a 	bl	800182c <clrscr>
			drawWindow();
 80035b8:	f000 fa6c 	bl	8003a94 <drawWindow>
			drawbackground(); // stars in background
 80035bc:	f7fe ff9e 	bl	80024fc <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80035c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f888 	bl	80026e0 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 80035d0:	f107 0218 	add.w	r2, r7, #24
 80035d4:	463b      	mov	r3, r7
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fa21 	bl	8003a20 <drawMenuScreen>


			while(gameState.activeScreen==0){
 80035de:	e0b7      	b.n	8003750 <main+0x218>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80035e0:	f107 0318 	add.w	r3, r7, #24
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff6c 	bl	80034c2 <bossKey>
 80035ea:	4603      	mov	r3, r0
 80035ec:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(bossKeyChange == 1) continue;
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d100      	bne.n	80035f6 <main+0xbe>
 80035f4:	e0ac      	b.n	8003750 <main+0x218>
				else if(bossKeyChange == 2){
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d10c      	bne.n	8003616 <main+0xde>
					//Initialize window agian
					clrscr();
 80035fc:	f7fe f916 	bl	800182c <clrscr>
					drawbackground(); // stars in background
 8003600:	f7fe ff7c 	bl	80024fc <drawbackground>
					drawWindow();
 8003604:	f000 fa46 	bl	8003a94 <drawWindow>
					drawMenuScreen(btnList, &gameState);
 8003608:	f107 0218 	add.w	r2, r7, #24
 800360c:	463b      	mov	r3, r7
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fa05 	bl	8003a20 <drawMenuScreen>
				}

				if(downIsPressed()){
 8003616:	f7fe fc77 	bl	8001f08 <downIsPressed>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d025      	beq.n	800366c <main+0x134>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003620:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800362a:	4413      	add	r3, r2
 800362c:	3b60      	subs	r3, #96	; 0x60
 800362e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003632:	f000 f9d5 	bl	80039e0 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8003636:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	4b94      	ldr	r3, [pc, #592]	; (8003890 <main+0x358>)
 800363e:	fb83 3102 	smull	r3, r1, r3, r2
 8003642:	17d3      	asrs	r3, r2, #31
 8003644:	1ac9      	subs	r1, r1, r3
 8003646:	460b      	mov	r3, r1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	440b      	add	r3, r1
 800364c:	1ad1      	subs	r1, r2, r3
 800364e:	b2cb      	uxtb	r3, r1
 8003650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003654:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800365e:	4413      	add	r3, r2
 8003660:	3b60      	subs	r3, #96	; 0x60
 8003662:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003666:	f000 f99b 	bl	80039a0 <drawBtnAsSelected>
 800366a:	e028      	b.n	80036be <main+0x186>
				}
				else if(upIsPressed()){
 800366c:	f7fe fc1e 	bl	8001eac <upIsPressed>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d023      	beq.n	80036be <main+0x186>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003676:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003680:	4413      	add	r3, r2
 8003682:	3b60      	subs	r3, #96	; 0x60
 8003684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003688:	f000 f9aa 	bl	80039e0 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 800368c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <main+0x164>
 8003694:	2302      	movs	r3, #2
 8003696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800369a:	e005      	b.n	80036a8 <main+0x170>
					else gameState.btnSelected=gameState.btnSelected-1;
 800369c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80036a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036b2:	4413      	add	r3, r2
 80036b4:	3b60      	subs	r3, #96	; 0x60
 80036b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ba:	f000 f971 	bl	80039a0 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 80036be:	f7fe fbc7 	bl	8001e50 <centerIsPressed>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <main+0x218>
					if(gameState.btnSelected==0){ //START BUTTON
 80036c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <main+0x1a0>
						gameState.activeScreen=1; //Game screen
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80036d6:	e03b      	b.n	8003750 <main+0x218>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 80036d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d130      	bne.n	8003742 <main+0x20a>
						gameState.difficulty=(gameState.difficulty+1)%3;
 80036e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	4b6a      	ldr	r3, [pc, #424]	; (8003890 <main+0x358>)
 80036e8:	fb83 3102 	smull	r3, r1, r3, r2
 80036ec:	17d3      	asrs	r3, r2, #31
 80036ee:	1ac9      	subs	r1, r1, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	440b      	add	r3, r1
 80036f6:	1ad1      	subs	r1, r2, r3
 80036f8:	b2cb      	uxtb	r3, r1
 80036fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 80036fe:	4b62      	ldr	r3, [pc, #392]	; (8003888 <main+0x350>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	330f      	adds	r3, #15
 8003704:	4a60      	ldr	r2, [pc, #384]	; (8003888 <main+0x350>)
 8003706:	7852      	ldrb	r2, [r2, #1]
 8003708:	3201      	adds	r2, #1
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe f89d 	bl	800184c <gotoxy>
						if(gameState.difficulty==0){
 8003712:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <main+0x1ea>
							printf("EASY  ");
 800371a:	485e      	ldr	r0, [pc, #376]	; (8003894 <main+0x35c>)
 800371c:	f000 fc96 	bl	800404c <iprintf>
 8003720:	e016      	b.n	8003750 <main+0x218>
						} else if(gameState.difficulty==1){
 8003722:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003726:	2b01      	cmp	r3, #1
 8003728:	d103      	bne.n	8003732 <main+0x1fa>
							printf("MEDIUM");
 800372a:	485b      	ldr	r0, [pc, #364]	; (8003898 <main+0x360>)
 800372c:	f000 fc8e 	bl	800404c <iprintf>
 8003730:	e00e      	b.n	8003750 <main+0x218>
						} else if(gameState.difficulty==2){
 8003732:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003736:	2b02      	cmp	r3, #2
 8003738:	d10a      	bne.n	8003750 <main+0x218>
							printf("HARD  ");
 800373a:	4858      	ldr	r0, [pc, #352]	; (800389c <main+0x364>)
 800373c:	f000 fc86 	bl	800404c <iprintf>
 8003740:	e006      	b.n	8003750 <main+0x218>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8003742:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003746:	2b02      	cmp	r3, #2
 8003748:	d102      	bne.n	8003750 <main+0x218>
						gameState.activeScreen=2;// help screen
 800374a:	2302      	movs	r3, #2
 800374c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==0){
 8003750:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	f43f af43 	beq.w	80035e0 <main+0xa8>
					}
				}
			}
			break;
 800375a:	e0f2      	b.n	8003942 <main+0x40a>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 800375c:	f7fe f866 	bl	800182c <clrscr>
			printf("GAME SCREEN");
 8003760:	484f      	ldr	r0, [pc, #316]	; (80038a0 <main+0x368>)
 8003762:	f000 fc73 	bl	800404c <iprintf>
			uint32_t frameLastUpdated=0;
 8003766:	2300      	movs	r3, #0
 8003768:	65fb      	str	r3, [r7, #92]	; 0x5c
			gameState.spaceship.lastShotTime=runtime;
 800376a:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <main+0x36c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38
			drawWindow();
 8003770:	f000 f990 	bl	8003a94 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8003774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003778:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ffae 	bl	80026e0 <drawMoon>
			drawhearth(&gameState);
 8003784:	f107 0318 	add.w	r3, r7, #24
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f8dd 	bl	8002948 <drawhearth>
			//drawWindow();
			drawCity();
 800378e:	f7ff f9b3 	bl	8002af8 <drawCity>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 8003792:	e05d      	b.n	8003850 <main+0x318>
				readKey(&gameState);
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe9d 	bl	80034d8 <readKey>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 800379e:	f107 0318 	add.w	r3, r7, #24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fe8d 	bl	80034c2 <bossKey>
 80037a8:	4603      	mov	r3, r0
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
				if(bossKeyChange == 1) continue;
 80037ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d100      	bne.n	80037b4 <main+0x27c>
 80037b2:	e04d      	b.n	8003850 <main+0x318>
				else if(bossKeyChange == 2){
 80037b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d10a      	bne.n	80037d0 <main+0x298>
					//Initialize window agian
					clrscr();
 80037ba:	f7fe f837 	bl	800182c <clrscr>
					gotoxy(0,0);
 80037be:	2100      	movs	r1, #0
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7fe f843 	bl	800184c <gotoxy>
					drawCity();
 80037c6:	f7ff f997 	bl	8002af8 <drawCity>
					printf("GAME SCREEN");
 80037ca:	4835      	ldr	r0, [pc, #212]	; (80038a0 <main+0x368>)
 80037cc:	f000 fc3e 	bl	800404c <iprintf>
				}

				if(runtime-frameLastUpdated>=framePeriod){//
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <main+0x36c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d939      	bls.n	8003850 <main+0x318>
					updateSpaceship(&gameState);
 80037dc:	f107 0318 	add.w	r3, r7, #24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f965 	bl	8003ab0 <updateSpaceship>
					spawnEnemy(&gameState);
 80037e6:	f107 0318 	add.w	r3, r7, #24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fcb0 	bl	8002150 <spawnEnemy>
					updateSpaceship(&gameState);
 80037f0:	f107 0318 	add.w	r3, r7, #24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f95b 	bl	8003ab0 <updateSpaceship>
					spawnEnemy(&gameState);
 80037fa:	f107 0318 	add.w	r3, r7, #24
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fca6 	bl	8002150 <spawnEnemy>
					updateEnemy(&gameState);
 8003804:	f107 0318 	add.w	r3, r7, #24
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fd0b 	bl	8002224 <updateEnemy>
					shootSpaceship(&gameState);
 800380e:	f107 0318 	add.w	r3, r7, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f982 	bl	8003b1c <shootSpaceship>
					shootEnemy(&gameState);
 8003818:	f107 0318 	add.w	r3, r7, #24
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fd31 	bl	8002284 <shootEnemy>
					updateBullets(&gameState);
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe f8ed 	bl	8001a06 <updateBullets>
					detectBulletHit(&gameState);
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe f964 	bl	8001afe <detectBulletHit>
					detectCityHit(&gameState);
 8003836:	f107 0318 	add.w	r3, r7, #24
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fd86 	bl	800234c <detectCityHit>
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
					//checkIfDead(&gameState);
					drawScreen(&gameState);
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fdef 	bl	8003428 <drawScreen>
					frameLastUpdated=runtime;
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <main+0x36c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	65fb      	str	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==1){
 8003850:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d09d      	beq.n	8003794 <main+0x25c>
				}
		}
			break;
 8003858:	e073      	b.n	8003942 <main+0x40a>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 800385a:	f7fd ffe7 	bl	800182c <clrscr>
			drawWindow();
 800385e:	f000 f919 	bl	8003a94 <drawWindow>
			drawbackground(); // stars in background
 8003862:	f7fe fe4b 	bl	80024fc <drawbackground>
			drawHelpScreen();
 8003866:	f000 f8ff 	bl	8003a68 <drawHelpScreen>
			while(gameState.activeScreen==2){
 800386a:	e036      	b.n	80038da <main+0x3a2>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 800386c:	f107 0318 	add.w	r3, r7, #24
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe26 	bl	80034c2 <bossKey>
 8003876:	4603      	mov	r3, r0
 8003878:	657b      	str	r3, [r7, #84]	; 0x54
				if(bossKeyChange == 1) continue;
 800387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387c:	2b01      	cmp	r3, #1
 800387e:	d113      	bne.n	80038a8 <main+0x370>
 8003880:	e02b      	b.n	80038da <main+0x3a2>
 8003882:	bf00      	nop
 8003884:	08005538 	.word	0x08005538
 8003888:	08005540 	.word	0x08005540
 800388c:	08005548 	.word	0x08005548
 8003890:	55555556 	.word	0x55555556
 8003894:	0800549c 	.word	0x0800549c
 8003898:	080054a4 	.word	0x080054a4
 800389c:	080054ac 	.word	0x080054ac
 80038a0:	080054b4 	.word	0x080054b4
 80038a4:	200001cc 	.word	0x200001cc
				else if(bossKeyChange == 2){
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d10d      	bne.n	80038ca <main+0x392>
					//Initialize window agian
					clrscr();
 80038ae:	f7fd ffbd 	bl	800182c <clrscr>
					drawBox(1,1,156,43,0);//window
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	232b      	movs	r3, #43	; 0x2b
 80038b8:	229c      	movs	r2, #156	; 0x9c
 80038ba:	2101      	movs	r1, #1
 80038bc:	2001      	movs	r0, #1
 80038be:	f7fd ffd7 	bl	8001870 <drawBox>
					drawbackground(); // stars in background
 80038c2:	f7fe fe1b 	bl	80024fc <drawbackground>
					drawHelpScreen();
 80038c6:	f000 f8cf 	bl	8003a68 <drawHelpScreen>
				}

				if(centerIsPressed()){
 80038ca:	f7fe fac1 	bl	8001e50 <centerIsPressed>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <main+0x3a2>
					gameState.activeScreen=0;//MENU SCREEN
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==2){
 80038da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d0c4      	beq.n	800386c <main+0x334>
				}
			}
			break;
 80038e2:	e02e      	b.n	8003942 <main+0x40a>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 80038e4:	f7fd ffa2 	bl	800182c <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 80038e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038ea:	4619      	mov	r1, r3
 80038ec:	4815      	ldr	r0, [pc, #84]	; (8003944 <main+0x40c>)
 80038ee:	f000 fbad 	bl	800404c <iprintf>
			while(gameState.activeScreen==3){
 80038f2:	e021      	b.n	8003938 <main+0x400>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80038f4:	f107 0318 	add.w	r3, r7, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fde2 	bl	80034c2 <bossKey>
 80038fe:	4603      	mov	r3, r0
 8003900:	65bb      	str	r3, [r7, #88]	; 0x58
				if(bossKeyChange == 1) continue;
 8003902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003904:	2b01      	cmp	r3, #1
 8003906:	d100      	bne.n	800390a <main+0x3d2>
 8003908:	e016      	b.n	8003938 <main+0x400>
				else if(bossKeyChange == 2){
 800390a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800390c:	2b02      	cmp	r3, #2
 800390e:	d106      	bne.n	800391e <main+0x3e6>
					//Initialize window agian
					clrscr();
 8003910:	f7fd ff8c 	bl	800182c <clrscr>
					printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8003914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003916:	4619      	mov	r1, r3
 8003918:	480a      	ldr	r0, [pc, #40]	; (8003944 <main+0x40c>)
 800391a:	f000 fb97 	bl	800404c <iprintf>
				}
				if(centerIsPressed()){
 800391e:	f7fe fa97 	bl	8001e50 <centerIsPressed>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <main+0x400>
					initVariables(&gameState);
 8003928:	f107 0318 	add.w	r3, r7, #24
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fd0f 	bl	8003350 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8003932:	2300      	movs	r3, #0
 8003934:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==3){
 8003938:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800393c:	2b03      	cmp	r3, #3
 800393e:	d0d9      	beq.n	80038f4 <main+0x3bc>
				}
			}
			break;
 8003940:	bf00      	nop
		switch(gameState.activeScreen){
 8003942:	e628      	b.n	8003596 <main+0x5e>
 8003944:	080054c0 	.word	0x080054c0

08003948 <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af02      	add	r7, sp, #8
 800394e:	463b      	mov	r3, r7
 8003950:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fc3a 	bl	80001d0 <strlen>
 800395c:	4603      	mov	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003960:	783b      	ldrb	r3, [r7, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	787b      	ldrb	r3, [r7, #1]
 8003966:	461c      	mov	r4, r3
 8003968:	783b      	ldrb	r3, [r7, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	1d5a      	adds	r2, r3, #5
 8003972:	787b      	ldrb	r3, [r7, #1]
 8003974:	3302      	adds	r3, #2
 8003976:	2100      	movs	r1, #0
 8003978:	9100      	str	r1, [sp, #0]
 800397a:	4621      	mov	r1, r4
 800397c:	f7fd ff78 	bl	8001870 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8003980:	783b      	ldrb	r3, [r7, #0]
 8003982:	3303      	adds	r3, #3
 8003984:	787a      	ldrb	r2, [r7, #1]
 8003986:	3201      	adds	r2, #1
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd ff5e 	bl	800184c <gotoxy>
	printf(btn.text);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fb5a 	bl	800404c <iprintf>
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	463b      	mov	r3, r7
 80039a8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fc0e 	bl	80001d0 <strlen>
 80039b4:	4603      	mov	r3, r0
 80039b6:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 80039b8:	783b      	ldrb	r3, [r7, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	787b      	ldrb	r3, [r7, #1]
 80039be:	461c      	mov	r4, r3
 80039c0:	783b      	ldrb	r3, [r7, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	1d5a      	adds	r2, r3, #5
 80039ca:	787b      	ldrb	r3, [r7, #1]
 80039cc:	3302      	adds	r3, #2
 80039ce:	2101      	movs	r1, #1
 80039d0:	9100      	str	r1, [sp, #0]
 80039d2:	4621      	mov	r1, r4
 80039d4:	f7fd ff4c 	bl	8001870 <drawBox>
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}

080039e0 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	463b      	mov	r3, r7
 80039e8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fbee 	bl	80001d0 <strlen>
 80039f4:	4603      	mov	r3, r0
 80039f6:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80039f8:	783b      	ldrb	r3, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	461c      	mov	r4, r3
 8003a00:	783b      	ldrb	r3, [r7, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	1d5a      	adds	r2, r3, #5
 8003a0a:	787b      	ldrb	r3, [r7, #1]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	2100      	movs	r1, #0
 8003a10:	9100      	str	r1, [sp, #0]
 8003a12:	4621      	mov	r1, r4
 8003a14:	f7fd ff2c 	bl	8001870 <drawBox>
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a30:	f7ff ff8a 	bl	8003948 <drawButton>
	drawButton(btnList[1]);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3308      	adds	r3, #8
 8003a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a3c:	f7ff ff84 	bl	8003948 <drawButton>
	drawButton(btnList[2]);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3310      	adds	r3, #16
 8003a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a48:	f7ff ff7e 	bl	8003948 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a5c:	f7ff ffa0 	bl	80039a0 <drawBtnAsSelected>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <drawHelpScreen>:


void drawHelpScreen(){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8003a6c:	2105      	movs	r1, #5
 8003a6e:	2046      	movs	r0, #70	; 0x46
 8003a70:	f7fd feec 	bl	800184c <gotoxy>
	printf("HELP SCREEN");
 8003a74:	4805      	ldr	r0, [pc, #20]	; (8003a8c <drawHelpScreen+0x24>)
 8003a76:	f000 fae9 	bl	800404c <iprintf>
	gotoxy(60,7);
 8003a7a:	2107      	movs	r1, #7
 8003a7c:	203c      	movs	r0, #60	; 0x3c
 8003a7e:	f7fd fee5 	bl	800184c <gotoxy>
	printf("Tag dig dog sammen mand!");
 8003a82:	4803      	ldr	r0, [pc, #12]	; (8003a90 <drawHelpScreen+0x28>)
 8003a84:	f000 fae2 	bl	800404c <iprintf>

}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	08005510 	.word	0x08005510
 8003a90:	0800551c 	.word	0x0800551c

08003a94 <drawWindow>:

void drawWindow(){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	232b      	movs	r3, #43	; 0x2b
 8003aa0:	229c      	movs	r2, #156	; 0x9c
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7fd fee3 	bl	8001870 <drawBox>
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	if(gameState->direction == -1 && gameState->spaceship.position.x > intToFp(2)){
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac2:	d110      	bne.n	8003ae6 <updateSpaceship+0x36>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68dc      	ldr	r4, [r3, #12]
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f7fe fc63 	bl	8002394 <intToFp>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d908      	bls.n	8003ae6 <updateSpaceship+0x36>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x - intToFp(1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68dc      	ldr	r4, [r3, #12]
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7fe fc5b 	bl	8002394 <intToFp>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	1ae2      	subs	r2, r4, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	615a      	str	r2, [r3, #20]
	}
	if(gameState->direction == 1 && gameState->spaceship.position.x < intToFp(148)){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d110      	bne.n	8003b12 <updateSpaceship+0x62>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68dc      	ldr	r4, [r3, #12]
 8003af4:	2094      	movs	r0, #148	; 0x94
 8003af6:	f7fe fc4d 	bl	8002394 <intToFp>
 8003afa:	4603      	mov	r3, r0
 8003afc:	429c      	cmp	r4, r3
 8003afe:	d208      	bcs.n	8003b12 <updateSpaceship+0x62>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x + intToFp(1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68dc      	ldr	r4, [r3, #12]
 8003b04:	2001      	movs	r0, #1
 8003b06:	f7fe fc45 	bl	8002394 <intToFp>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	18e2      	adds	r2, r4, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	615a      	str	r2, [r3, #20]
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
	*/
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd90      	pop	{r4, r7, pc}
	...

08003b1c <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b090      	sub	sp, #64	; 0x40
 8003b20:	af04      	add	r7, sp, #16
 8003b22:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8003b24:	f7fe f994 	bl	8001e50 <centerIsPressed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03b      	beq.n	8003ba6 <shootSpaceship+0x8a>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <shootSpaceship+0x94>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fe fc2c 	bl	8002394 <intToFp>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b40:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <shootSpaceship+0x98>)
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691c      	ldr	r4, [r3, #16]
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f7fe fc20 	bl	8002394 <intToFp>
 8003b54:	4603      	mov	r3, r0
 8003b56:	1ae3      	subs	r3, r4, r3
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	f107 0220 	add.w	r2, r7, #32
 8003b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b66:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	f107 0220 	add.w	r2, r7, #32
 8003b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b76:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b7a:	f107 0318 	add.w	r3, r7, #24
 8003b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b86:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 8003b8a:	687d      	ldr	r5, [r7, #4]
 8003b8c:	466c      	mov	r4, sp
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f7ff fab5 	bl	8003110 <appendBullet>
	}
}
 8003ba6:	bf00      	nop
 8003ba8:	3730      	adds	r7, #48	; 0x30
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bdb0      	pop	{r4, r5, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200001cc 	.word	0x200001cc
 8003bb4:	ffff0000 	.word	0xffff0000

08003bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	return 1;
 8003bbc:	2301      	movs	r3, #1
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_kill>:

int _kill(int pid, int sig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bd2:	f000 f94f 	bl	8003e74 <__errno>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2216      	movs	r2, #22
 8003bda:	601a      	str	r2, [r3, #0]
	return -1;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_exit>:

void _exit (int status)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffe7 	bl	8003bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bfa:	e7fe      	b.n	8003bfa <_exit+0x12>

08003bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00a      	b.n	8003c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c0e:	f3af 8000 	nop.w
 8003c12:	4601      	mov	r1, r0
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	60ba      	str	r2, [r7, #8]
 8003c1a:	b2ca      	uxtb	r2, r1
 8003c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dbf0      	blt.n	8003c0e <_read+0x12>
	}

return len;
 8003c2c:	687b      	ldr	r3, [r7, #4]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_isatty>:

int _isatty(int file)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	return 1;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <_sbrk+0x50>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <_sbrk+0x16>
		heap_end = &end;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <_sbrk+0x50>)
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <_sbrk+0x54>)
 8003cb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <_sbrk+0x50>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <_sbrk+0x50>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	466a      	mov	r2, sp
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d907      	bls.n	8003cda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003cca:	f000 f8d3 	bl	8003e74 <__errno>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd8:	e006      	b.n	8003ce8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <_sbrk+0x50>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <_sbrk+0x50>)
 8003ce4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200001c0 	.word	0x200001c0
 8003cf4:	200001e0 	.word	0x200001e0

08003cf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <SystemInit+0x84>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <SystemInit+0x84>)
 8003d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <SystemInit+0x88>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <SystemInit+0x88>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <SystemInit+0x88>)
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4918      	ldr	r1, [pc, #96]	; (8003d80 <SystemInit+0x88>)
 8003d1e:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <SystemInit+0x8c>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d24:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <SystemInit+0x88>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <SystemInit+0x88>)
 8003d2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <SystemInit+0x88>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <SystemInit+0x88>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <SystemInit+0x88>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <SystemInit+0x88>)
 8003d46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d4a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <SystemInit+0x88>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <SystemInit+0x88>)
 8003d52:	f023 030f 	bic.w	r3, r3, #15
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <SystemInit+0x88>)
 8003d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5c:	4908      	ldr	r1, [pc, #32]	; (8003d80 <SystemInit+0x88>)
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <SystemInit+0x90>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <SystemInit+0x88>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003d6a:	f000 f80f 	bl	8003d8c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d6e:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <SystemInit+0x84>)
 8003d70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d74:	609a      	str	r2, [r3, #8]
#endif  
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	40021000 	.word	0x40021000
 8003d84:	f87fc00c 	.word	0xf87fc00c
 8003d88:	ff00fccc 	.word	0xff00fccc

08003d8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <SetSysClock+0x8c>)
 8003d92:	2212      	movs	r2, #18
 8003d94:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <SetSysClock+0x90>)
 8003d98:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <SetSysClock+0x90>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <SetSysClock+0x90>)
 8003da0:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <SetSysClock+0x90>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <SetSysClock+0x90>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <SetSysClock+0x90>)
 8003dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <SetSysClock+0x90>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <SetSysClock+0x90>)
 8003db8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003dbc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <SetSysClock+0x90>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <SetSysClock+0x90>)
 8003dc4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8003dc8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003dca:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <SetSysClock+0x90>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <SetSysClock+0x90>)
 8003dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003dd6:	bf00      	nop
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <SetSysClock+0x90>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f9      	beq.n	8003dd8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <SetSysClock+0x90>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <SetSysClock+0x90>)
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <SetSysClock+0x90>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <SetSysClock+0x90>)
 8003df6:	f043 0302 	orr.w	r3, r3, #2
 8003dfa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003dfc:	bf00      	nop
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <SetSysClock+0x90>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d1f9      	bne.n	8003dfe <SetSysClock+0x72>
  {
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000

08003e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e20:	480d      	ldr	r0, [pc, #52]	; (8003e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e24:	480d      	ldr	r0, [pc, #52]	; (8003e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e26:	490e      	ldr	r1, [pc, #56]	; (8003e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e28:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <LoopForever+0xe>)
  movs r3, #0
 8003e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e2c:	e002      	b.n	8003e34 <LoopCopyDataInit>

08003e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e32:	3304      	adds	r3, #4

08003e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e38:	d3f9      	bcc.n	8003e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e3c:	4c0b      	ldr	r4, [pc, #44]	; (8003e6c <LoopForever+0x16>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e40:	e001      	b.n	8003e46 <LoopFillZerobss>

08003e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e44:	3204      	adds	r2, #4

08003e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e48:	d3fb      	bcc.n	8003e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e4a:	f7ff ff55 	bl	8003cf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e4e:	f000 f817 	bl	8003e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e52:	f7ff fb71 	bl	8003538 <main>

08003e56 <LoopForever>:

LoopForever:
    b LoopForever
 8003e56:	e7fe      	b.n	8003e56 <LoopForever>
  ldr   r0, =_estack
 8003e58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e60:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003e64:	080056ac 	.word	0x080056ac
  ldr r2, =_sbss
 8003e68:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8003e6c:	200001e0 	.word	0x200001e0

08003e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e70:	e7fe      	b.n	8003e70 <ADC1_2_IRQHandler>
	...

08003e74 <__errno>:
 8003e74:	4b01      	ldr	r3, [pc, #4]	; (8003e7c <__errno+0x8>)
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	2000002c 	.word	0x2000002c

08003e80 <__libc_init_array>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	4d0d      	ldr	r5, [pc, #52]	; (8003eb8 <__libc_init_array+0x38>)
 8003e84:	4c0d      	ldr	r4, [pc, #52]	; (8003ebc <__libc_init_array+0x3c>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	2600      	movs	r6, #0
 8003e8c:	42a6      	cmp	r6, r4
 8003e8e:	d109      	bne.n	8003ea4 <__libc_init_array+0x24>
 8003e90:	4d0b      	ldr	r5, [pc, #44]	; (8003ec0 <__libc_init_array+0x40>)
 8003e92:	4c0c      	ldr	r4, [pc, #48]	; (8003ec4 <__libc_init_array+0x44>)
 8003e94:	f001 faa8 	bl	80053e8 <_init>
 8003e98:	1b64      	subs	r4, r4, r5
 8003e9a:	10a4      	asrs	r4, r4, #2
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	42a6      	cmp	r6, r4
 8003ea0:	d105      	bne.n	8003eae <__libc_init_array+0x2e>
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea8:	4798      	blx	r3
 8003eaa:	3601      	adds	r6, #1
 8003eac:	e7ee      	b.n	8003e8c <__libc_init_array+0xc>
 8003eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb2:	4798      	blx	r3
 8003eb4:	3601      	adds	r6, #1
 8003eb6:	e7f2      	b.n	8003e9e <__libc_init_array+0x1e>
 8003eb8:	080056a4 	.word	0x080056a4
 8003ebc:	080056a4 	.word	0x080056a4
 8003ec0:	080056a4 	.word	0x080056a4
 8003ec4:	080056a8 	.word	0x080056a8

08003ec8 <malloc>:
 8003ec8:	4b02      	ldr	r3, [pc, #8]	; (8003ed4 <malloc+0xc>)
 8003eca:	4601      	mov	r1, r0
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	f000 b863 	b.w	8003f98 <_malloc_r>
 8003ed2:	bf00      	nop
 8003ed4:	2000002c 	.word	0x2000002c

08003ed8 <free>:
 8003ed8:	4b02      	ldr	r3, [pc, #8]	; (8003ee4 <free+0xc>)
 8003eda:	4601      	mov	r1, r0
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	f000 b80b 	b.w	8003ef8 <_free_r>
 8003ee2:	bf00      	nop
 8003ee4:	2000002c 	.word	0x2000002c

08003ee8 <memset>:
 8003ee8:	4402      	add	r2, r0
 8003eea:	4603      	mov	r3, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memset+0xa>
 8003ef0:	4770      	bx	lr
 8003ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef6:	e7f9      	b.n	8003eec <memset+0x4>

08003ef8 <_free_r>:
 8003ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003efa:	2900      	cmp	r1, #0
 8003efc:	d048      	beq.n	8003f90 <_free_r+0x98>
 8003efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f02:	9001      	str	r0, [sp, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f1a1 0404 	sub.w	r4, r1, #4
 8003f0a:	bfb8      	it	lt
 8003f0c:	18e4      	addlt	r4, r4, r3
 8003f0e:	f000 fc93 	bl	8004838 <__malloc_lock>
 8003f12:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <_free_r+0x9c>)
 8003f14:	9801      	ldr	r0, [sp, #4]
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	4615      	mov	r5, r2
 8003f1a:	b933      	cbnz	r3, 8003f2a <_free_r+0x32>
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6014      	str	r4, [r2, #0]
 8003f20:	b003      	add	sp, #12
 8003f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f26:	f000 bc8d 	b.w	8004844 <__malloc_unlock>
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	d90b      	bls.n	8003f46 <_free_r+0x4e>
 8003f2e:	6821      	ldr	r1, [r4, #0]
 8003f30:	1862      	adds	r2, r4, r1
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bf04      	itt	eq
 8003f36:	681a      	ldreq	r2, [r3, #0]
 8003f38:	685b      	ldreq	r3, [r3, #4]
 8003f3a:	6063      	str	r3, [r4, #4]
 8003f3c:	bf04      	itt	eq
 8003f3e:	1852      	addeq	r2, r2, r1
 8003f40:	6022      	streq	r2, [r4, #0]
 8003f42:	602c      	str	r4, [r5, #0]
 8003f44:	e7ec      	b.n	8003f20 <_free_r+0x28>
 8003f46:	461a      	mov	r2, r3
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b10b      	cbz	r3, 8003f50 <_free_r+0x58>
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d9fa      	bls.n	8003f46 <_free_r+0x4e>
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	1855      	adds	r5, r2, r1
 8003f54:	42a5      	cmp	r5, r4
 8003f56:	d10b      	bne.n	8003f70 <_free_r+0x78>
 8003f58:	6824      	ldr	r4, [r4, #0]
 8003f5a:	4421      	add	r1, r4
 8003f5c:	1854      	adds	r4, r2, r1
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	d1dd      	bne.n	8003f20 <_free_r+0x28>
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6053      	str	r3, [r2, #4]
 8003f6a:	4421      	add	r1, r4
 8003f6c:	6011      	str	r1, [r2, #0]
 8003f6e:	e7d7      	b.n	8003f20 <_free_r+0x28>
 8003f70:	d902      	bls.n	8003f78 <_free_r+0x80>
 8003f72:	230c      	movs	r3, #12
 8003f74:	6003      	str	r3, [r0, #0]
 8003f76:	e7d3      	b.n	8003f20 <_free_r+0x28>
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	1961      	adds	r1, r4, r5
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	bf04      	itt	eq
 8003f80:	6819      	ldreq	r1, [r3, #0]
 8003f82:	685b      	ldreq	r3, [r3, #4]
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	bf04      	itt	eq
 8003f88:	1949      	addeq	r1, r1, r5
 8003f8a:	6021      	streq	r1, [r4, #0]
 8003f8c:	6054      	str	r4, [r2, #4]
 8003f8e:	e7c7      	b.n	8003f20 <_free_r+0x28>
 8003f90:	b003      	add	sp, #12
 8003f92:	bd30      	pop	{r4, r5, pc}
 8003f94:	200001c4 	.word	0x200001c4

08003f98 <_malloc_r>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	1ccd      	adds	r5, r1, #3
 8003f9c:	f025 0503 	bic.w	r5, r5, #3
 8003fa0:	3508      	adds	r5, #8
 8003fa2:	2d0c      	cmp	r5, #12
 8003fa4:	bf38      	it	cc
 8003fa6:	250c      	movcc	r5, #12
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	4606      	mov	r6, r0
 8003fac:	db01      	blt.n	8003fb2 <_malloc_r+0x1a>
 8003fae:	42a9      	cmp	r1, r5
 8003fb0:	d903      	bls.n	8003fba <_malloc_r+0x22>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fba:	f000 fc3d 	bl	8004838 <__malloc_lock>
 8003fbe:	4921      	ldr	r1, [pc, #132]	; (8004044 <_malloc_r+0xac>)
 8003fc0:	680a      	ldr	r2, [r1, #0]
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	b99c      	cbnz	r4, 8003fee <_malloc_r+0x56>
 8003fc6:	4f20      	ldr	r7, [pc, #128]	; (8004048 <_malloc_r+0xb0>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b923      	cbnz	r3, 8003fd6 <_malloc_r+0x3e>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f8d8 	bl	8004184 <_sbrk_r>
 8003fd4:	6038      	str	r0, [r7, #0]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f8d3 	bl	8004184 <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d123      	bne.n	800402a <_malloc_r+0x92>
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	6033      	str	r3, [r6, #0]
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 fc2c 	bl	8004844 <__malloc_unlock>
 8003fec:	e7e3      	b.n	8003fb6 <_malloc_r+0x1e>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	1b5b      	subs	r3, r3, r5
 8003ff2:	d417      	bmi.n	8004024 <_malloc_r+0x8c>
 8003ff4:	2b0b      	cmp	r3, #11
 8003ff6:	d903      	bls.n	8004000 <_malloc_r+0x68>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	441c      	add	r4, r3
 8003ffc:	6025      	str	r5, [r4, #0]
 8003ffe:	e004      	b.n	800400a <_malloc_r+0x72>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	42a2      	cmp	r2, r4
 8004004:	bf0c      	ite	eq
 8004006:	600b      	streq	r3, [r1, #0]
 8004008:	6053      	strne	r3, [r2, #4]
 800400a:	4630      	mov	r0, r6
 800400c:	f000 fc1a 	bl	8004844 <__malloc_unlock>
 8004010:	f104 000b 	add.w	r0, r4, #11
 8004014:	1d23      	adds	r3, r4, #4
 8004016:	f020 0007 	bic.w	r0, r0, #7
 800401a:	1ac2      	subs	r2, r0, r3
 800401c:	d0cc      	beq.n	8003fb8 <_malloc_r+0x20>
 800401e:	1a1b      	subs	r3, r3, r0
 8004020:	50a3      	str	r3, [r4, r2]
 8004022:	e7c9      	b.n	8003fb8 <_malloc_r+0x20>
 8004024:	4622      	mov	r2, r4
 8004026:	6864      	ldr	r4, [r4, #4]
 8004028:	e7cc      	b.n	8003fc4 <_malloc_r+0x2c>
 800402a:	1cc4      	adds	r4, r0, #3
 800402c:	f024 0403 	bic.w	r4, r4, #3
 8004030:	42a0      	cmp	r0, r4
 8004032:	d0e3      	beq.n	8003ffc <_malloc_r+0x64>
 8004034:	1a21      	subs	r1, r4, r0
 8004036:	4630      	mov	r0, r6
 8004038:	f000 f8a4 	bl	8004184 <_sbrk_r>
 800403c:	3001      	adds	r0, #1
 800403e:	d1dd      	bne.n	8003ffc <_malloc_r+0x64>
 8004040:	e7cf      	b.n	8003fe2 <_malloc_r+0x4a>
 8004042:	bf00      	nop
 8004044:	200001c4 	.word	0x200001c4
 8004048:	200001c8 	.word	0x200001c8

0800404c <iprintf>:
 800404c:	b40f      	push	{r0, r1, r2, r3}
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <iprintf+0x2c>)
 8004050:	b513      	push	{r0, r1, r4, lr}
 8004052:	681c      	ldr	r4, [r3, #0]
 8004054:	b124      	cbz	r4, 8004060 <iprintf+0x14>
 8004056:	69a3      	ldr	r3, [r4, #24]
 8004058:	b913      	cbnz	r3, 8004060 <iprintf+0x14>
 800405a:	4620      	mov	r0, r4
 800405c:	f000 fac2 	bl	80045e4 <__sinit>
 8004060:	ab05      	add	r3, sp, #20
 8004062:	9a04      	ldr	r2, [sp, #16]
 8004064:	68a1      	ldr	r1, [r4, #8]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 fc1b 	bl	80048a4 <_vfiprintf_r>
 800406e:	b002      	add	sp, #8
 8004070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004074:	b004      	add	sp, #16
 8004076:	4770      	bx	lr
 8004078:	2000002c 	.word	0x2000002c

0800407c <putchar>:
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <putchar+0x28>)
 800407e:	b513      	push	{r0, r1, r4, lr}
 8004080:	681c      	ldr	r4, [r3, #0]
 8004082:	4601      	mov	r1, r0
 8004084:	b134      	cbz	r4, 8004094 <putchar+0x18>
 8004086:	69a3      	ldr	r3, [r4, #24]
 8004088:	b923      	cbnz	r3, 8004094 <putchar+0x18>
 800408a:	9001      	str	r0, [sp, #4]
 800408c:	4620      	mov	r0, r4
 800408e:	f000 faa9 	bl	80045e4 <__sinit>
 8004092:	9901      	ldr	r1, [sp, #4]
 8004094:	68a2      	ldr	r2, [r4, #8]
 8004096:	4620      	mov	r0, r4
 8004098:	b002      	add	sp, #8
 800409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800409e:	f000 bec5 	b.w	8004e2c <_putc_r>
 80040a2:	bf00      	nop
 80040a4:	2000002c 	.word	0x2000002c

080040a8 <srand>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <srand+0x44>)
 80040ac:	681d      	ldr	r5, [r3, #0]
 80040ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80040b0:	4604      	mov	r4, r0
 80040b2:	b9b3      	cbnz	r3, 80040e2 <srand+0x3a>
 80040b4:	2018      	movs	r0, #24
 80040b6:	f7ff ff07 	bl	8003ec8 <malloc>
 80040ba:	4602      	mov	r2, r0
 80040bc:	63a8      	str	r0, [r5, #56]	; 0x38
 80040be:	b920      	cbnz	r0, 80040ca <srand+0x22>
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <srand+0x48>)
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <srand+0x4c>)
 80040c4:	2142      	movs	r1, #66	; 0x42
 80040c6:	f000 f955 	bl	8004374 <__assert_func>
 80040ca:	490b      	ldr	r1, [pc, #44]	; (80040f8 <srand+0x50>)
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <srand+0x54>)
 80040ce:	e9c0 1300 	strd	r1, r3, [r0]
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <srand+0x58>)
 80040d4:	6083      	str	r3, [r0, #8]
 80040d6:	230b      	movs	r3, #11
 80040d8:	8183      	strh	r3, [r0, #12]
 80040da:	2100      	movs	r1, #0
 80040dc:	2001      	movs	r0, #1
 80040de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80040e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80040e4:	2200      	movs	r2, #0
 80040e6:	611c      	str	r4, [r3, #16]
 80040e8:	615a      	str	r2, [r3, #20]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	2000002c 	.word	0x2000002c
 80040f0:	08005554 	.word	0x08005554
 80040f4:	0800556b 	.word	0x0800556b
 80040f8:	abcd330e 	.word	0xabcd330e
 80040fc:	e66d1234 	.word	0xe66d1234
 8004100:	0005deec 	.word	0x0005deec

08004104 <rand>:
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <rand+0x60>)
 8004106:	b510      	push	{r4, lr}
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800410c:	b9b3      	cbnz	r3, 800413c <rand+0x38>
 800410e:	2018      	movs	r0, #24
 8004110:	f7ff feda 	bl	8003ec8 <malloc>
 8004114:	63a0      	str	r0, [r4, #56]	; 0x38
 8004116:	b928      	cbnz	r0, 8004124 <rand+0x20>
 8004118:	4602      	mov	r2, r0
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <rand+0x64>)
 800411c:	4813      	ldr	r0, [pc, #76]	; (800416c <rand+0x68>)
 800411e:	214e      	movs	r1, #78	; 0x4e
 8004120:	f000 f928 	bl	8004374 <__assert_func>
 8004124:	4a12      	ldr	r2, [pc, #72]	; (8004170 <rand+0x6c>)
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <rand+0x70>)
 8004128:	e9c0 2300 	strd	r2, r3, [r0]
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <rand+0x74>)
 800412e:	6083      	str	r3, [r0, #8]
 8004130:	230b      	movs	r3, #11
 8004132:	8183      	strh	r3, [r0, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	2300      	movs	r3, #0
 8004138:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800413c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800413e:	480f      	ldr	r0, [pc, #60]	; (800417c <rand+0x78>)
 8004140:	690a      	ldr	r2, [r1, #16]
 8004142:	694b      	ldr	r3, [r1, #20]
 8004144:	4c0e      	ldr	r4, [pc, #56]	; (8004180 <rand+0x7c>)
 8004146:	4350      	muls	r0, r2
 8004148:	fb04 0003 	mla	r0, r4, r3, r0
 800414c:	fba2 3404 	umull	r3, r4, r2, r4
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	4404      	add	r4, r0
 8004154:	f144 0000 	adc.w	r0, r4, #0
 8004158:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800415c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop
 8004164:	2000002c 	.word	0x2000002c
 8004168:	08005554 	.word	0x08005554
 800416c:	0800556b 	.word	0x0800556b
 8004170:	abcd330e 	.word	0xabcd330e
 8004174:	e66d1234 	.word	0xe66d1234
 8004178:	0005deec 	.word	0x0005deec
 800417c:	5851f42d 	.word	0x5851f42d
 8004180:	4c957f2d 	.word	0x4c957f2d

08004184 <_sbrk_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d06      	ldr	r5, [pc, #24]	; (80041a0 <_sbrk_r+0x1c>)
 8004188:	2300      	movs	r3, #0
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7ff fd86 	bl	8003ca0 <_sbrk>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_sbrk_r+0x1a>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_sbrk_r+0x1a>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200001dc 	.word	0x200001dc

080041a4 <setbuf>:
 80041a4:	2900      	cmp	r1, #0
 80041a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041aa:	bf0c      	ite	eq
 80041ac:	2202      	moveq	r2, #2
 80041ae:	2200      	movne	r2, #0
 80041b0:	f000 b800 	b.w	80041b4 <setvbuf>

080041b4 <setvbuf>:
 80041b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041b8:	461d      	mov	r5, r3
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <setvbuf+0x17c>)
 80041bc:	681f      	ldr	r7, [r3, #0]
 80041be:	4604      	mov	r4, r0
 80041c0:	460e      	mov	r6, r1
 80041c2:	4690      	mov	r8, r2
 80041c4:	b127      	cbz	r7, 80041d0 <setvbuf+0x1c>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	b913      	cbnz	r3, 80041d0 <setvbuf+0x1c>
 80041ca:	4638      	mov	r0, r7
 80041cc:	f000 fa0a 	bl	80045e4 <__sinit>
 80041d0:	4b58      	ldr	r3, [pc, #352]	; (8004334 <setvbuf+0x180>)
 80041d2:	429c      	cmp	r4, r3
 80041d4:	d167      	bne.n	80042a6 <setvbuf+0xf2>
 80041d6:	687c      	ldr	r4, [r7, #4]
 80041d8:	f1b8 0f02 	cmp.w	r8, #2
 80041dc:	d006      	beq.n	80041ec <setvbuf+0x38>
 80041de:	f1b8 0f01 	cmp.w	r8, #1
 80041e2:	f200 809f 	bhi.w	8004324 <setvbuf+0x170>
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	f2c0 809c 	blt.w	8004324 <setvbuf+0x170>
 80041ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ee:	07db      	lsls	r3, r3, #31
 80041f0:	d405      	bmi.n	80041fe <setvbuf+0x4a>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	0598      	lsls	r0, r3, #22
 80041f6:	d402      	bmi.n	80041fe <setvbuf+0x4a>
 80041f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041fa:	f000 fab6 	bl	800476a <__retarget_lock_acquire_recursive>
 80041fe:	4621      	mov	r1, r4
 8004200:	4638      	mov	r0, r7
 8004202:	f000 f95b 	bl	80044bc <_fflush_r>
 8004206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004208:	b141      	cbz	r1, 800421c <setvbuf+0x68>
 800420a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800420e:	4299      	cmp	r1, r3
 8004210:	d002      	beq.n	8004218 <setvbuf+0x64>
 8004212:	4638      	mov	r0, r7
 8004214:	f7ff fe70 	bl	8003ef8 <_free_r>
 8004218:	2300      	movs	r3, #0
 800421a:	6363      	str	r3, [r4, #52]	; 0x34
 800421c:	2300      	movs	r3, #0
 800421e:	61a3      	str	r3, [r4, #24]
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	0619      	lsls	r1, r3, #24
 8004226:	d503      	bpl.n	8004230 <setvbuf+0x7c>
 8004228:	6921      	ldr	r1, [r4, #16]
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff fe64 	bl	8003ef8 <_free_r>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	f1b8 0f02 	cmp.w	r8, #2
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	d06c      	beq.n	800431c <setvbuf+0x168>
 8004242:	ab01      	add	r3, sp, #4
 8004244:	466a      	mov	r2, sp
 8004246:	4621      	mov	r1, r4
 8004248:	4638      	mov	r0, r7
 800424a:	f000 fa90 	bl	800476e <__swhatbuf_r>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	4318      	orrs	r0, r3
 8004252:	81a0      	strh	r0, [r4, #12]
 8004254:	2d00      	cmp	r5, #0
 8004256:	d130      	bne.n	80042ba <setvbuf+0x106>
 8004258:	9d00      	ldr	r5, [sp, #0]
 800425a:	4628      	mov	r0, r5
 800425c:	f7ff fe34 	bl	8003ec8 <malloc>
 8004260:	4606      	mov	r6, r0
 8004262:	2800      	cmp	r0, #0
 8004264:	d155      	bne.n	8004312 <setvbuf+0x15e>
 8004266:	f8dd 9000 	ldr.w	r9, [sp]
 800426a:	45a9      	cmp	r9, r5
 800426c:	d14a      	bne.n	8004304 <setvbuf+0x150>
 800426e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004272:	2200      	movs	r2, #0
 8004274:	60a2      	str	r2, [r4, #8]
 8004276:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800427a:	6022      	str	r2, [r4, #0]
 800427c:	6122      	str	r2, [r4, #16]
 800427e:	2201      	movs	r2, #1
 8004280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004284:	6162      	str	r2, [r4, #20]
 8004286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004288:	f043 0302 	orr.w	r3, r3, #2
 800428c:	07d2      	lsls	r2, r2, #31
 800428e:	81a3      	strh	r3, [r4, #12]
 8004290:	d405      	bmi.n	800429e <setvbuf+0xea>
 8004292:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004296:	d102      	bne.n	800429e <setvbuf+0xea>
 8004298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800429a:	f000 fa67 	bl	800476c <__retarget_lock_release_recursive>
 800429e:	4628      	mov	r0, r5
 80042a0:	b003      	add	sp, #12
 80042a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <setvbuf+0x184>)
 80042a8:	429c      	cmp	r4, r3
 80042aa:	d101      	bne.n	80042b0 <setvbuf+0xfc>
 80042ac:	68bc      	ldr	r4, [r7, #8]
 80042ae:	e793      	b.n	80041d8 <setvbuf+0x24>
 80042b0:	4b22      	ldr	r3, [pc, #136]	; (800433c <setvbuf+0x188>)
 80042b2:	429c      	cmp	r4, r3
 80042b4:	bf08      	it	eq
 80042b6:	68fc      	ldreq	r4, [r7, #12]
 80042b8:	e78e      	b.n	80041d8 <setvbuf+0x24>
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	d0cd      	beq.n	800425a <setvbuf+0xa6>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	b913      	cbnz	r3, 80042c8 <setvbuf+0x114>
 80042c2:	4638      	mov	r0, r7
 80042c4:	f000 f98e 	bl	80045e4 <__sinit>
 80042c8:	f1b8 0f01 	cmp.w	r8, #1
 80042cc:	bf08      	it	eq
 80042ce:	89a3      	ldrheq	r3, [r4, #12]
 80042d0:	6026      	str	r6, [r4, #0]
 80042d2:	bf04      	itt	eq
 80042d4:	f043 0301 	orreq.w	r3, r3, #1
 80042d8:	81a3      	strheq	r3, [r4, #12]
 80042da:	89a2      	ldrh	r2, [r4, #12]
 80042dc:	f012 0308 	ands.w	r3, r2, #8
 80042e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80042e4:	d01c      	beq.n	8004320 <setvbuf+0x16c>
 80042e6:	07d3      	lsls	r3, r2, #31
 80042e8:	bf41      	itttt	mi
 80042ea:	2300      	movmi	r3, #0
 80042ec:	426d      	negmi	r5, r5
 80042ee:	60a3      	strmi	r3, [r4, #8]
 80042f0:	61a5      	strmi	r5, [r4, #24]
 80042f2:	bf58      	it	pl
 80042f4:	60a5      	strpl	r5, [r4, #8]
 80042f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80042f8:	f015 0501 	ands.w	r5, r5, #1
 80042fc:	d115      	bne.n	800432a <setvbuf+0x176>
 80042fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004302:	e7c8      	b.n	8004296 <setvbuf+0xe2>
 8004304:	4648      	mov	r0, r9
 8004306:	f7ff fddf 	bl	8003ec8 <malloc>
 800430a:	4606      	mov	r6, r0
 800430c:	2800      	cmp	r0, #0
 800430e:	d0ae      	beq.n	800426e <setvbuf+0xba>
 8004310:	464d      	mov	r5, r9
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	e7d0      	b.n	80042be <setvbuf+0x10a>
 800431c:	2500      	movs	r5, #0
 800431e:	e7a8      	b.n	8004272 <setvbuf+0xbe>
 8004320:	60a3      	str	r3, [r4, #8]
 8004322:	e7e8      	b.n	80042f6 <setvbuf+0x142>
 8004324:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004328:	e7b9      	b.n	800429e <setvbuf+0xea>
 800432a:	2500      	movs	r5, #0
 800432c:	e7b7      	b.n	800429e <setvbuf+0xea>
 800432e:	bf00      	nop
 8004330:	2000002c 	.word	0x2000002c
 8004334:	08005628 	.word	0x08005628
 8004338:	08005648 	.word	0x08005648
 800433c:	08005608 	.word	0x08005608

08004340 <time>:
 8004340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <time+0x30>)
 8004344:	2200      	movs	r2, #0
 8004346:	4669      	mov	r1, sp
 8004348:	4604      	mov	r4, r0
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	f000 f9fa 	bl	8004744 <_gettimeofday_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	bfbe      	ittt	lt
 8004354:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8004358:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800435c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004364:	b10c      	cbz	r4, 800436a <time+0x2a>
 8004366:	e9c4 0100 	strd	r0, r1, [r4]
 800436a:	b004      	add	sp, #16
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	2000002c 	.word	0x2000002c

08004374 <__assert_func>:
 8004374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004376:	4614      	mov	r4, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <__assert_func+0x2c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4605      	mov	r5, r0
 8004380:	68d8      	ldr	r0, [r3, #12]
 8004382:	b14c      	cbz	r4, 8004398 <__assert_func+0x24>
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <__assert_func+0x30>)
 8004386:	9100      	str	r1, [sp, #0]
 8004388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <__assert_func+0x34>)
 800438e:	462b      	mov	r3, r5
 8004390:	f000 f9a6 	bl	80046e0 <fiprintf>
 8004394:	f000 fe96 	bl	80050c4 <abort>
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <__assert_func+0x38>)
 800439a:	461c      	mov	r4, r3
 800439c:	e7f3      	b.n	8004386 <__assert_func+0x12>
 800439e:	bf00      	nop
 80043a0:	2000002c 	.word	0x2000002c
 80043a4:	080055ca 	.word	0x080055ca
 80043a8:	080055d7 	.word	0x080055d7
 80043ac:	08005605 	.word	0x08005605

080043b0 <__sflush_r>:
 80043b0:	898a      	ldrh	r2, [r1, #12]
 80043b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	4605      	mov	r5, r0
 80043b8:	0710      	lsls	r0, r2, #28
 80043ba:	460c      	mov	r4, r1
 80043bc:	d458      	bmi.n	8004470 <__sflush_r+0xc0>
 80043be:	684b      	ldr	r3, [r1, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dc05      	bgt.n	80043d0 <__sflush_r+0x20>
 80043c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dc02      	bgt.n	80043d0 <__sflush_r+0x20>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	d0f9      	beq.n	80043ca <__sflush_r+0x1a>
 80043d6:	2300      	movs	r3, #0
 80043d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043dc:	682f      	ldr	r7, [r5, #0]
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	d032      	beq.n	8004448 <__sflush_r+0x98>
 80043e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	075a      	lsls	r2, r3, #29
 80043e8:	d505      	bpl.n	80043f6 <__sflush_r+0x46>
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	1ac0      	subs	r0, r0, r3
 80043ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043f0:	b10b      	cbz	r3, 80043f6 <__sflush_r+0x46>
 80043f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	4602      	mov	r2, r0
 80043fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043fc:	6a21      	ldr	r1, [r4, #32]
 80043fe:	4628      	mov	r0, r5
 8004400:	47b0      	blx	r6
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	d106      	bne.n	8004416 <__sflush_r+0x66>
 8004408:	6829      	ldr	r1, [r5, #0]
 800440a:	291d      	cmp	r1, #29
 800440c:	d82c      	bhi.n	8004468 <__sflush_r+0xb8>
 800440e:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <__sflush_r+0x108>)
 8004410:	40ca      	lsrs	r2, r1
 8004412:	07d6      	lsls	r6, r2, #31
 8004414:	d528      	bpl.n	8004468 <__sflush_r+0xb8>
 8004416:	2200      	movs	r2, #0
 8004418:	6062      	str	r2, [r4, #4]
 800441a:	04d9      	lsls	r1, r3, #19
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	6022      	str	r2, [r4, #0]
 8004420:	d504      	bpl.n	800442c <__sflush_r+0x7c>
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	d101      	bne.n	800442a <__sflush_r+0x7a>
 8004426:	682b      	ldr	r3, [r5, #0]
 8004428:	b903      	cbnz	r3, 800442c <__sflush_r+0x7c>
 800442a:	6560      	str	r0, [r4, #84]	; 0x54
 800442c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800442e:	602f      	str	r7, [r5, #0]
 8004430:	2900      	cmp	r1, #0
 8004432:	d0ca      	beq.n	80043ca <__sflush_r+0x1a>
 8004434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__sflush_r+0x92>
 800443c:	4628      	mov	r0, r5
 800443e:	f7ff fd5b 	bl	8003ef8 <_free_r>
 8004442:	2000      	movs	r0, #0
 8004444:	6360      	str	r0, [r4, #52]	; 0x34
 8004446:	e7c1      	b.n	80043cc <__sflush_r+0x1c>
 8004448:	6a21      	ldr	r1, [r4, #32]
 800444a:	2301      	movs	r3, #1
 800444c:	4628      	mov	r0, r5
 800444e:	47b0      	blx	r6
 8004450:	1c41      	adds	r1, r0, #1
 8004452:	d1c7      	bne.n	80043e4 <__sflush_r+0x34>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0c4      	beq.n	80043e4 <__sflush_r+0x34>
 800445a:	2b1d      	cmp	r3, #29
 800445c:	d001      	beq.n	8004462 <__sflush_r+0xb2>
 800445e:	2b16      	cmp	r3, #22
 8004460:	d101      	bne.n	8004466 <__sflush_r+0xb6>
 8004462:	602f      	str	r7, [r5, #0]
 8004464:	e7b1      	b.n	80043ca <__sflush_r+0x1a>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	e7ad      	b.n	80043cc <__sflush_r+0x1c>
 8004470:	690f      	ldr	r7, [r1, #16]
 8004472:	2f00      	cmp	r7, #0
 8004474:	d0a9      	beq.n	80043ca <__sflush_r+0x1a>
 8004476:	0793      	lsls	r3, r2, #30
 8004478:	680e      	ldr	r6, [r1, #0]
 800447a:	bf08      	it	eq
 800447c:	694b      	ldreq	r3, [r1, #20]
 800447e:	600f      	str	r7, [r1, #0]
 8004480:	bf18      	it	ne
 8004482:	2300      	movne	r3, #0
 8004484:	eba6 0807 	sub.w	r8, r6, r7
 8004488:	608b      	str	r3, [r1, #8]
 800448a:	f1b8 0f00 	cmp.w	r8, #0
 800448e:	dd9c      	ble.n	80043ca <__sflush_r+0x1a>
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004494:	4643      	mov	r3, r8
 8004496:	463a      	mov	r2, r7
 8004498:	4628      	mov	r0, r5
 800449a:	47b0      	blx	r6
 800449c:	2800      	cmp	r0, #0
 800449e:	dc06      	bgt.n	80044ae <__sflush_r+0xfe>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ac:	e78e      	b.n	80043cc <__sflush_r+0x1c>
 80044ae:	4407      	add	r7, r0
 80044b0:	eba8 0800 	sub.w	r8, r8, r0
 80044b4:	e7e9      	b.n	800448a <__sflush_r+0xda>
 80044b6:	bf00      	nop
 80044b8:	20400001 	.word	0x20400001

080044bc <_fflush_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	690b      	ldr	r3, [r1, #16]
 80044c0:	4605      	mov	r5, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b913      	cbnz	r3, 80044cc <_fflush_r+0x10>
 80044c6:	2500      	movs	r5, #0
 80044c8:	4628      	mov	r0, r5
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	b118      	cbz	r0, 80044d6 <_fflush_r+0x1a>
 80044ce:	6983      	ldr	r3, [r0, #24]
 80044d0:	b90b      	cbnz	r3, 80044d6 <_fflush_r+0x1a>
 80044d2:	f000 f887 	bl	80045e4 <__sinit>
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <_fflush_r+0x6c>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	d11b      	bne.n	8004514 <_fflush_r+0x58>
 80044dc:	686c      	ldr	r4, [r5, #4]
 80044de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <_fflush_r+0xa>
 80044e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044e8:	07d0      	lsls	r0, r2, #31
 80044ea:	d404      	bmi.n	80044f6 <_fflush_r+0x3a>
 80044ec:	0599      	lsls	r1, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_fflush_r+0x3a>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 f93a 	bl	800476a <__retarget_lock_acquire_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7ff ff59 	bl	80043b0 <__sflush_r>
 80044fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004500:	07da      	lsls	r2, r3, #31
 8004502:	4605      	mov	r5, r0
 8004504:	d4e0      	bmi.n	80044c8 <_fflush_r+0xc>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	d4dd      	bmi.n	80044c8 <_fflush_r+0xc>
 800450c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450e:	f000 f92d 	bl	800476c <__retarget_lock_release_recursive>
 8004512:	e7d9      	b.n	80044c8 <_fflush_r+0xc>
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_fflush_r+0x70>)
 8004516:	429c      	cmp	r4, r3
 8004518:	d101      	bne.n	800451e <_fflush_r+0x62>
 800451a:	68ac      	ldr	r4, [r5, #8]
 800451c:	e7df      	b.n	80044de <_fflush_r+0x22>
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <_fflush_r+0x74>)
 8004520:	429c      	cmp	r4, r3
 8004522:	bf08      	it	eq
 8004524:	68ec      	ldreq	r4, [r5, #12]
 8004526:	e7da      	b.n	80044de <_fflush_r+0x22>
 8004528:	08005628 	.word	0x08005628
 800452c:	08005648 	.word	0x08005648
 8004530:	08005608 	.word	0x08005608

08004534 <std>:
 8004534:	2300      	movs	r3, #0
 8004536:	b510      	push	{r4, lr}
 8004538:	4604      	mov	r4, r0
 800453a:	e9c0 3300 	strd	r3, r3, [r0]
 800453e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004542:	6083      	str	r3, [r0, #8]
 8004544:	8181      	strh	r1, [r0, #12]
 8004546:	6643      	str	r3, [r0, #100]	; 0x64
 8004548:	81c2      	strh	r2, [r0, #14]
 800454a:	6183      	str	r3, [r0, #24]
 800454c:	4619      	mov	r1, r3
 800454e:	2208      	movs	r2, #8
 8004550:	305c      	adds	r0, #92	; 0x5c
 8004552:	f7ff fcc9 	bl	8003ee8 <memset>
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <std+0x38>)
 8004558:	6263      	str	r3, [r4, #36]	; 0x24
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <std+0x3c>)
 800455c:	62a3      	str	r3, [r4, #40]	; 0x28
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <std+0x40>)
 8004560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <std+0x44>)
 8004564:	6224      	str	r4, [r4, #32]
 8004566:	6323      	str	r3, [r4, #48]	; 0x30
 8004568:	bd10      	pop	{r4, pc}
 800456a:	bf00      	nop
 800456c:	08004ebd 	.word	0x08004ebd
 8004570:	08004edf 	.word	0x08004edf
 8004574:	08004f17 	.word	0x08004f17
 8004578:	08004f3b 	.word	0x08004f3b

0800457c <_cleanup_r>:
 800457c:	4901      	ldr	r1, [pc, #4]	; (8004584 <_cleanup_r+0x8>)
 800457e:	f000 b8c1 	b.w	8004704 <_fwalk_reent>
 8004582:	bf00      	nop
 8004584:	080044bd 	.word	0x080044bd

08004588 <__sfmoreglue>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	1e4a      	subs	r2, r1, #1
 800458c:	2568      	movs	r5, #104	; 0x68
 800458e:	4355      	muls	r5, r2
 8004590:	460e      	mov	r6, r1
 8004592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004596:	f7ff fcff 	bl	8003f98 <_malloc_r>
 800459a:	4604      	mov	r4, r0
 800459c:	b140      	cbz	r0, 80045b0 <__sfmoreglue+0x28>
 800459e:	2100      	movs	r1, #0
 80045a0:	e9c0 1600 	strd	r1, r6, [r0]
 80045a4:	300c      	adds	r0, #12
 80045a6:	60a0      	str	r0, [r4, #8]
 80045a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045ac:	f7ff fc9c 	bl	8003ee8 <memset>
 80045b0:	4620      	mov	r0, r4
 80045b2:	bd70      	pop	{r4, r5, r6, pc}

080045b4 <__sfp_lock_acquire>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__sfp_lock_acquire+0x8>)
 80045b6:	f000 b8d8 	b.w	800476a <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	200001d8 	.word	0x200001d8

080045c0 <__sfp_lock_release>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__sfp_lock_release+0x8>)
 80045c2:	f000 b8d3 	b.w	800476c <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	200001d8 	.word	0x200001d8

080045cc <__sinit_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__sinit_lock_acquire+0x8>)
 80045ce:	f000 b8cc 	b.w	800476a <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200001d3 	.word	0x200001d3

080045d8 <__sinit_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__sinit_lock_release+0x8>)
 80045da:	f000 b8c7 	b.w	800476c <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200001d3 	.word	0x200001d3

080045e4 <__sinit>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	f7ff fff0 	bl	80045cc <__sinit_lock_acquire>
 80045ec:	69a3      	ldr	r3, [r4, #24]
 80045ee:	b11b      	cbz	r3, 80045f8 <__sinit+0x14>
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f7ff bff0 	b.w	80045d8 <__sinit_lock_release>
 80045f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045fc:	6523      	str	r3, [r4, #80]	; 0x50
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <__sinit+0x68>)
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <__sinit+0x6c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	62a2      	str	r2, [r4, #40]	; 0x28
 8004606:	42a3      	cmp	r3, r4
 8004608:	bf04      	itt	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	61a3      	streq	r3, [r4, #24]
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f820 	bl	8004654 <__sfp>
 8004614:	6060      	str	r0, [r4, #4]
 8004616:	4620      	mov	r0, r4
 8004618:	f000 f81c 	bl	8004654 <__sfp>
 800461c:	60a0      	str	r0, [r4, #8]
 800461e:	4620      	mov	r0, r4
 8004620:	f000 f818 	bl	8004654 <__sfp>
 8004624:	2200      	movs	r2, #0
 8004626:	60e0      	str	r0, [r4, #12]
 8004628:	2104      	movs	r1, #4
 800462a:	6860      	ldr	r0, [r4, #4]
 800462c:	f7ff ff82 	bl	8004534 <std>
 8004630:	68a0      	ldr	r0, [r4, #8]
 8004632:	2201      	movs	r2, #1
 8004634:	2109      	movs	r1, #9
 8004636:	f7ff ff7d 	bl	8004534 <std>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	2112      	movs	r1, #18
 8004640:	f7ff ff78 	bl	8004534 <std>
 8004644:	2301      	movs	r3, #1
 8004646:	61a3      	str	r3, [r4, #24]
 8004648:	e7d2      	b.n	80045f0 <__sinit+0xc>
 800464a:	bf00      	nop
 800464c:	08005550 	.word	0x08005550
 8004650:	0800457d 	.word	0x0800457d

08004654 <__sfp>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	4607      	mov	r7, r0
 8004658:	f7ff ffac 	bl	80045b4 <__sfp_lock_acquire>
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <__sfp+0x84>)
 800465e:	681e      	ldr	r6, [r3, #0]
 8004660:	69b3      	ldr	r3, [r6, #24]
 8004662:	b913      	cbnz	r3, 800466a <__sfp+0x16>
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff ffbd 	bl	80045e4 <__sinit>
 800466a:	3648      	adds	r6, #72	; 0x48
 800466c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	d503      	bpl.n	800467c <__sfp+0x28>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	b30b      	cbz	r3, 80046bc <__sfp+0x68>
 8004678:	6836      	ldr	r6, [r6, #0]
 800467a:	e7f7      	b.n	800466c <__sfp+0x18>
 800467c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004680:	b9d5      	cbnz	r5, 80046b8 <__sfp+0x64>
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <__sfp+0x88>)
 8004684:	60e3      	str	r3, [r4, #12]
 8004686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800468a:	6665      	str	r5, [r4, #100]	; 0x64
 800468c:	f000 f86c 	bl	8004768 <__retarget_lock_init_recursive>
 8004690:	f7ff ff96 	bl	80045c0 <__sfp_lock_release>
 8004694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800469c:	6025      	str	r5, [r4, #0]
 800469e:	61a5      	str	r5, [r4, #24]
 80046a0:	2208      	movs	r2, #8
 80046a2:	4629      	mov	r1, r5
 80046a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046a8:	f7ff fc1e 	bl	8003ee8 <memset>
 80046ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046b4:	4620      	mov	r0, r4
 80046b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b8:	3468      	adds	r4, #104	; 0x68
 80046ba:	e7d9      	b.n	8004670 <__sfp+0x1c>
 80046bc:	2104      	movs	r1, #4
 80046be:	4638      	mov	r0, r7
 80046c0:	f7ff ff62 	bl	8004588 <__sfmoreglue>
 80046c4:	4604      	mov	r4, r0
 80046c6:	6030      	str	r0, [r6, #0]
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1d5      	bne.n	8004678 <__sfp+0x24>
 80046cc:	f7ff ff78 	bl	80045c0 <__sfp_lock_release>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	e7ee      	b.n	80046b4 <__sfp+0x60>
 80046d6:	bf00      	nop
 80046d8:	08005550 	.word	0x08005550
 80046dc:	ffff0001 	.word	0xffff0001

080046e0 <fiprintf>:
 80046e0:	b40e      	push	{r1, r2, r3}
 80046e2:	b503      	push	{r0, r1, lr}
 80046e4:	4601      	mov	r1, r0
 80046e6:	ab03      	add	r3, sp, #12
 80046e8:	4805      	ldr	r0, [pc, #20]	; (8004700 <fiprintf+0x20>)
 80046ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ee:	6800      	ldr	r0, [r0, #0]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	f000 f8d7 	bl	80048a4 <_vfiprintf_r>
 80046f6:	b002      	add	sp, #8
 80046f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046fc:	b003      	add	sp, #12
 80046fe:	4770      	bx	lr
 8004700:	2000002c 	.word	0x2000002c

08004704 <_fwalk_reent>:
 8004704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004708:	4606      	mov	r6, r0
 800470a:	4688      	mov	r8, r1
 800470c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004710:	2700      	movs	r7, #0
 8004712:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004716:	f1b9 0901 	subs.w	r9, r9, #1
 800471a:	d505      	bpl.n	8004728 <_fwalk_reent+0x24>
 800471c:	6824      	ldr	r4, [r4, #0]
 800471e:	2c00      	cmp	r4, #0
 8004720:	d1f7      	bne.n	8004712 <_fwalk_reent+0xe>
 8004722:	4638      	mov	r0, r7
 8004724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004728:	89ab      	ldrh	r3, [r5, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d907      	bls.n	800473e <_fwalk_reent+0x3a>
 800472e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004732:	3301      	adds	r3, #1
 8004734:	d003      	beq.n	800473e <_fwalk_reent+0x3a>
 8004736:	4629      	mov	r1, r5
 8004738:	4630      	mov	r0, r6
 800473a:	47c0      	blx	r8
 800473c:	4307      	orrs	r7, r0
 800473e:	3568      	adds	r5, #104	; 0x68
 8004740:	e7e9      	b.n	8004716 <_fwalk_reent+0x12>
	...

08004744 <_gettimeofday_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d07      	ldr	r5, [pc, #28]	; (8004764 <_gettimeofday_r+0x20>)
 8004748:	2300      	movs	r3, #0
 800474a:	4604      	mov	r4, r0
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	f000 fe41 	bl	80053d8 <_gettimeofday>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	d102      	bne.n	8004760 <_gettimeofday_r+0x1c>
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	b103      	cbz	r3, 8004760 <_gettimeofday_r+0x1c>
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	200001dc 	.word	0x200001dc

08004768 <__retarget_lock_init_recursive>:
 8004768:	4770      	bx	lr

0800476a <__retarget_lock_acquire_recursive>:
 800476a:	4770      	bx	lr

0800476c <__retarget_lock_release_recursive>:
 800476c:	4770      	bx	lr

0800476e <__swhatbuf_r>:
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	460e      	mov	r6, r1
 8004772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004776:	2900      	cmp	r1, #0
 8004778:	b096      	sub	sp, #88	; 0x58
 800477a:	4614      	mov	r4, r2
 800477c:	461d      	mov	r5, r3
 800477e:	da07      	bge.n	8004790 <__swhatbuf_r+0x22>
 8004780:	2300      	movs	r3, #0
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	89b3      	ldrh	r3, [r6, #12]
 8004786:	061a      	lsls	r2, r3, #24
 8004788:	d410      	bmi.n	80047ac <__swhatbuf_r+0x3e>
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	e00e      	b.n	80047ae <__swhatbuf_r+0x40>
 8004790:	466a      	mov	r2, sp
 8004792:	f000 fcaf 	bl	80050f4 <_fstat_r>
 8004796:	2800      	cmp	r0, #0
 8004798:	dbf2      	blt.n	8004780 <__swhatbuf_r+0x12>
 800479a:	9a01      	ldr	r2, [sp, #4]
 800479c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047a4:	425a      	negs	r2, r3
 80047a6:	415a      	adcs	r2, r3
 80047a8:	602a      	str	r2, [r5, #0]
 80047aa:	e7ee      	b.n	800478a <__swhatbuf_r+0x1c>
 80047ac:	2340      	movs	r3, #64	; 0x40
 80047ae:	2000      	movs	r0, #0
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	b016      	add	sp, #88	; 0x58
 80047b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047b8 <__smakebuf_r>:
 80047b8:	898b      	ldrh	r3, [r1, #12]
 80047ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047bc:	079d      	lsls	r5, r3, #30
 80047be:	4606      	mov	r6, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	d507      	bpl.n	80047d4 <__smakebuf_r+0x1c>
 80047c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	2301      	movs	r3, #1
 80047ce:	6163      	str	r3, [r4, #20]
 80047d0:	b002      	add	sp, #8
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	ab01      	add	r3, sp, #4
 80047d6:	466a      	mov	r2, sp
 80047d8:	f7ff ffc9 	bl	800476e <__swhatbuf_r>
 80047dc:	9900      	ldr	r1, [sp, #0]
 80047de:	4605      	mov	r5, r0
 80047e0:	4630      	mov	r0, r6
 80047e2:	f7ff fbd9 	bl	8003f98 <_malloc_r>
 80047e6:	b948      	cbnz	r0, 80047fc <__smakebuf_r+0x44>
 80047e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ec:	059a      	lsls	r2, r3, #22
 80047ee:	d4ef      	bmi.n	80047d0 <__smakebuf_r+0x18>
 80047f0:	f023 0303 	bic.w	r3, r3, #3
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	e7e3      	b.n	80047c4 <__smakebuf_r+0xc>
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <__smakebuf_r+0x7c>)
 80047fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	6020      	str	r0, [r4, #0]
 8004804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	9b00      	ldr	r3, [sp, #0]
 800480c:	6163      	str	r3, [r4, #20]
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	6120      	str	r0, [r4, #16]
 8004812:	b15b      	cbz	r3, 800482c <__smakebuf_r+0x74>
 8004814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004818:	4630      	mov	r0, r6
 800481a:	f000 fc7d 	bl	8005118 <_isatty_r>
 800481e:	b128      	cbz	r0, 800482c <__smakebuf_r+0x74>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	89a0      	ldrh	r0, [r4, #12]
 800482e:	4305      	orrs	r5, r0
 8004830:	81a5      	strh	r5, [r4, #12]
 8004832:	e7cd      	b.n	80047d0 <__smakebuf_r+0x18>
 8004834:	0800457d 	.word	0x0800457d

08004838 <__malloc_lock>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__malloc_lock+0x8>)
 800483a:	f7ff bf96 	b.w	800476a <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	200001d4 	.word	0x200001d4

08004844 <__malloc_unlock>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__malloc_unlock+0x8>)
 8004846:	f7ff bf91 	b.w	800476c <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	200001d4 	.word	0x200001d4

08004850 <__sfputc_r>:
 8004850:	6893      	ldr	r3, [r2, #8]
 8004852:	3b01      	subs	r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	b410      	push	{r4}
 8004858:	6093      	str	r3, [r2, #8]
 800485a:	da08      	bge.n	800486e <__sfputc_r+0x1e>
 800485c:	6994      	ldr	r4, [r2, #24]
 800485e:	42a3      	cmp	r3, r4
 8004860:	db01      	blt.n	8004866 <__sfputc_r+0x16>
 8004862:	290a      	cmp	r1, #10
 8004864:	d103      	bne.n	800486e <__sfputc_r+0x1e>
 8004866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800486a:	f000 bb6b 	b.w	8004f44 <__swbuf_r>
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	1c58      	adds	r0, r3, #1
 8004872:	6010      	str	r0, [r2, #0]
 8004874:	7019      	strb	r1, [r3, #0]
 8004876:	4608      	mov	r0, r1
 8004878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800487c:	4770      	bx	lr

0800487e <__sfputs_r>:
 800487e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004880:	4606      	mov	r6, r0
 8004882:	460f      	mov	r7, r1
 8004884:	4614      	mov	r4, r2
 8004886:	18d5      	adds	r5, r2, r3
 8004888:	42ac      	cmp	r4, r5
 800488a:	d101      	bne.n	8004890 <__sfputs_r+0x12>
 800488c:	2000      	movs	r0, #0
 800488e:	e007      	b.n	80048a0 <__sfputs_r+0x22>
 8004890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004894:	463a      	mov	r2, r7
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff ffda 	bl	8004850 <__sfputc_r>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d1f3      	bne.n	8004888 <__sfputs_r+0xa>
 80048a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048a4 <_vfiprintf_r>:
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	460d      	mov	r5, r1
 80048aa:	b09d      	sub	sp, #116	; 0x74
 80048ac:	4614      	mov	r4, r2
 80048ae:	4698      	mov	r8, r3
 80048b0:	4606      	mov	r6, r0
 80048b2:	b118      	cbz	r0, 80048bc <_vfiprintf_r+0x18>
 80048b4:	6983      	ldr	r3, [r0, #24]
 80048b6:	b90b      	cbnz	r3, 80048bc <_vfiprintf_r+0x18>
 80048b8:	f7ff fe94 	bl	80045e4 <__sinit>
 80048bc:	4b89      	ldr	r3, [pc, #548]	; (8004ae4 <_vfiprintf_r+0x240>)
 80048be:	429d      	cmp	r5, r3
 80048c0:	d11b      	bne.n	80048fa <_vfiprintf_r+0x56>
 80048c2:	6875      	ldr	r5, [r6, #4]
 80048c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d405      	bmi.n	80048d6 <_vfiprintf_r+0x32>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	059a      	lsls	r2, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_vfiprintf_r+0x32>
 80048d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048d2:	f7ff ff4a 	bl	800476a <__retarget_lock_acquire_recursive>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	d501      	bpl.n	80048e0 <_vfiprintf_r+0x3c>
 80048dc:	692b      	ldr	r3, [r5, #16]
 80048de:	b9eb      	cbnz	r3, 800491c <_vfiprintf_r+0x78>
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 fb80 	bl	8004fe8 <__swsetup_r>
 80048e8:	b1c0      	cbz	r0, 800491c <_vfiprintf_r+0x78>
 80048ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ec:	07dc      	lsls	r4, r3, #31
 80048ee:	d50e      	bpl.n	800490e <_vfiprintf_r+0x6a>
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f4:	b01d      	add	sp, #116	; 0x74
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fa:	4b7b      	ldr	r3, [pc, #492]	; (8004ae8 <_vfiprintf_r+0x244>)
 80048fc:	429d      	cmp	r5, r3
 80048fe:	d101      	bne.n	8004904 <_vfiprintf_r+0x60>
 8004900:	68b5      	ldr	r5, [r6, #8]
 8004902:	e7df      	b.n	80048c4 <_vfiprintf_r+0x20>
 8004904:	4b79      	ldr	r3, [pc, #484]	; (8004aec <_vfiprintf_r+0x248>)
 8004906:	429d      	cmp	r5, r3
 8004908:	bf08      	it	eq
 800490a:	68f5      	ldreq	r5, [r6, #12]
 800490c:	e7da      	b.n	80048c4 <_vfiprintf_r+0x20>
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	0598      	lsls	r0, r3, #22
 8004912:	d4ed      	bmi.n	80048f0 <_vfiprintf_r+0x4c>
 8004914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004916:	f7ff ff29 	bl	800476c <__retarget_lock_release_recursive>
 800491a:	e7e9      	b.n	80048f0 <_vfiprintf_r+0x4c>
 800491c:	2300      	movs	r3, #0
 800491e:	9309      	str	r3, [sp, #36]	; 0x24
 8004920:	2320      	movs	r3, #32
 8004922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004926:	f8cd 800c 	str.w	r8, [sp, #12]
 800492a:	2330      	movs	r3, #48	; 0x30
 800492c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004af0 <_vfiprintf_r+0x24c>
 8004930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004934:	f04f 0901 	mov.w	r9, #1
 8004938:	4623      	mov	r3, r4
 800493a:	469a      	mov	sl, r3
 800493c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004940:	b10a      	cbz	r2, 8004946 <_vfiprintf_r+0xa2>
 8004942:	2a25      	cmp	r2, #37	; 0x25
 8004944:	d1f9      	bne.n	800493a <_vfiprintf_r+0x96>
 8004946:	ebba 0b04 	subs.w	fp, sl, r4
 800494a:	d00b      	beq.n	8004964 <_vfiprintf_r+0xc0>
 800494c:	465b      	mov	r3, fp
 800494e:	4622      	mov	r2, r4
 8004950:	4629      	mov	r1, r5
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ff93 	bl	800487e <__sfputs_r>
 8004958:	3001      	adds	r0, #1
 800495a:	f000 80aa 	beq.w	8004ab2 <_vfiprintf_r+0x20e>
 800495e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004960:	445a      	add	r2, fp
 8004962:	9209      	str	r2, [sp, #36]	; 0x24
 8004964:	f89a 3000 	ldrb.w	r3, [sl]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a2 	beq.w	8004ab2 <_vfiprintf_r+0x20e>
 800496e:	2300      	movs	r3, #0
 8004970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004978:	f10a 0a01 	add.w	sl, sl, #1
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	9307      	str	r3, [sp, #28]
 8004980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004984:	931a      	str	r3, [sp, #104]	; 0x68
 8004986:	4654      	mov	r4, sl
 8004988:	2205      	movs	r2, #5
 800498a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498e:	4858      	ldr	r0, [pc, #352]	; (8004af0 <_vfiprintf_r+0x24c>)
 8004990:	f7fb fc26 	bl	80001e0 <memchr>
 8004994:	9a04      	ldr	r2, [sp, #16]
 8004996:	b9d8      	cbnz	r0, 80049d0 <_vfiprintf_r+0x12c>
 8004998:	06d1      	lsls	r1, r2, #27
 800499a:	bf44      	itt	mi
 800499c:	2320      	movmi	r3, #32
 800499e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049a2:	0713      	lsls	r3, r2, #28
 80049a4:	bf44      	itt	mi
 80049a6:	232b      	movmi	r3, #43	; 0x2b
 80049a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ac:	f89a 3000 	ldrb.w	r3, [sl]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d015      	beq.n	80049e0 <_vfiprintf_r+0x13c>
 80049b4:	9a07      	ldr	r2, [sp, #28]
 80049b6:	4654      	mov	r4, sl
 80049b8:	2000      	movs	r0, #0
 80049ba:	f04f 0c0a 	mov.w	ip, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c4:	3b30      	subs	r3, #48	; 0x30
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d94e      	bls.n	8004a68 <_vfiprintf_r+0x1c4>
 80049ca:	b1b0      	cbz	r0, 80049fa <_vfiprintf_r+0x156>
 80049cc:	9207      	str	r2, [sp, #28]
 80049ce:	e014      	b.n	80049fa <_vfiprintf_r+0x156>
 80049d0:	eba0 0308 	sub.w	r3, r0, r8
 80049d4:	fa09 f303 	lsl.w	r3, r9, r3
 80049d8:	4313      	orrs	r3, r2
 80049da:	9304      	str	r3, [sp, #16]
 80049dc:	46a2      	mov	sl, r4
 80049de:	e7d2      	b.n	8004986 <_vfiprintf_r+0xe2>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	1d19      	adds	r1, r3, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	9103      	str	r1, [sp, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bfbb      	ittet	lt
 80049ec:	425b      	neglt	r3, r3
 80049ee:	f042 0202 	orrlt.w	r2, r2, #2
 80049f2:	9307      	strge	r3, [sp, #28]
 80049f4:	9307      	strlt	r3, [sp, #28]
 80049f6:	bfb8      	it	lt
 80049f8:	9204      	strlt	r2, [sp, #16]
 80049fa:	7823      	ldrb	r3, [r4, #0]
 80049fc:	2b2e      	cmp	r3, #46	; 0x2e
 80049fe:	d10c      	bne.n	8004a1a <_vfiprintf_r+0x176>
 8004a00:	7863      	ldrb	r3, [r4, #1]
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d135      	bne.n	8004a72 <_vfiprintf_r+0x1ce>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	9203      	str	r2, [sp, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a16:	3402      	adds	r4, #2
 8004a18:	9305      	str	r3, [sp, #20]
 8004a1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b00 <_vfiprintf_r+0x25c>
 8004a1e:	7821      	ldrb	r1, [r4, #0]
 8004a20:	2203      	movs	r2, #3
 8004a22:	4650      	mov	r0, sl
 8004a24:	f7fb fbdc 	bl	80001e0 <memchr>
 8004a28:	b140      	cbz	r0, 8004a3c <_vfiprintf_r+0x198>
 8004a2a:	2340      	movs	r3, #64	; 0x40
 8004a2c:	eba0 000a 	sub.w	r0, r0, sl
 8004a30:	fa03 f000 	lsl.w	r0, r3, r0
 8004a34:	9b04      	ldr	r3, [sp, #16]
 8004a36:	4303      	orrs	r3, r0
 8004a38:	3401      	adds	r4, #1
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	482c      	ldr	r0, [pc, #176]	; (8004af4 <_vfiprintf_r+0x250>)
 8004a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a46:	2206      	movs	r2, #6
 8004a48:	f7fb fbca 	bl	80001e0 <memchr>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d03f      	beq.n	8004ad0 <_vfiprintf_r+0x22c>
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <_vfiprintf_r+0x254>)
 8004a52:	bb1b      	cbnz	r3, 8004a9c <_vfiprintf_r+0x1f8>
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	3307      	adds	r3, #7
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	9303      	str	r3, [sp, #12]
 8004a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a62:	443b      	add	r3, r7
 8004a64:	9309      	str	r3, [sp, #36]	; 0x24
 8004a66:	e767      	b.n	8004938 <_vfiprintf_r+0x94>
 8004a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	2001      	movs	r0, #1
 8004a70:	e7a5      	b.n	80049be <_vfiprintf_r+0x11a>
 8004a72:	2300      	movs	r3, #0
 8004a74:	3401      	adds	r4, #1
 8004a76:	9305      	str	r3, [sp, #20]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f04f 0c0a 	mov.w	ip, #10
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a84:	3a30      	subs	r2, #48	; 0x30
 8004a86:	2a09      	cmp	r2, #9
 8004a88:	d903      	bls.n	8004a92 <_vfiprintf_r+0x1ee>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0c5      	beq.n	8004a1a <_vfiprintf_r+0x176>
 8004a8e:	9105      	str	r1, [sp, #20]
 8004a90:	e7c3      	b.n	8004a1a <_vfiprintf_r+0x176>
 8004a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a96:	4604      	mov	r4, r0
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e7f0      	b.n	8004a7e <_vfiprintf_r+0x1da>
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <_vfiprintf_r+0x258>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f3af 8000 	nop.w
 8004aac:	4607      	mov	r7, r0
 8004aae:	1c78      	adds	r0, r7, #1
 8004ab0:	d1d6      	bne.n	8004a60 <_vfiprintf_r+0x1bc>
 8004ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ab4:	07d9      	lsls	r1, r3, #31
 8004ab6:	d405      	bmi.n	8004ac4 <_vfiprintf_r+0x220>
 8004ab8:	89ab      	ldrh	r3, [r5, #12]
 8004aba:	059a      	lsls	r2, r3, #22
 8004abc:	d402      	bmi.n	8004ac4 <_vfiprintf_r+0x220>
 8004abe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ac0:	f7ff fe54 	bl	800476c <__retarget_lock_release_recursive>
 8004ac4:	89ab      	ldrh	r3, [r5, #12]
 8004ac6:	065b      	lsls	r3, r3, #25
 8004ac8:	f53f af12 	bmi.w	80048f0 <_vfiprintf_r+0x4c>
 8004acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ace:	e711      	b.n	80048f4 <_vfiprintf_r+0x50>
 8004ad0:	ab03      	add	r3, sp, #12
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <_vfiprintf_r+0x258>)
 8004ad8:	a904      	add	r1, sp, #16
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 f880 	bl	8004be0 <_printf_i>
 8004ae0:	e7e4      	b.n	8004aac <_vfiprintf_r+0x208>
 8004ae2:	bf00      	nop
 8004ae4:	08005628 	.word	0x08005628
 8004ae8:	08005648 	.word	0x08005648
 8004aec:	08005608 	.word	0x08005608
 8004af0:	08005668 	.word	0x08005668
 8004af4:	08005672 	.word	0x08005672
 8004af8:	00000000 	.word	0x00000000
 8004afc:	0800487f 	.word	0x0800487f
 8004b00:	0800566e 	.word	0x0800566e

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	68e5      	ldr	r5, [r4, #12]
 8004b6e:	6832      	ldr	r2, [r6, #0]
 8004b70:	f003 0306 	and.w	r3, r3, #6
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	bf08      	it	eq
 8004b78:	1aad      	subeq	r5, r5, r2
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	6922      	ldr	r2, [r4, #16]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	4691      	mov	r9, r2
 8004be8:	7e27      	ldrb	r7, [r4, #24]
 8004bea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bec:	2f78      	cmp	r7, #120	; 0x78
 8004bee:	4680      	mov	r8, r0
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d8 	beq.w	8004db2 <_printf_i+0x1d2>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80a3 	beq.w	8004d4e <_printf_i+0x16e>
 8004c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a001      	add	r0, pc, #4	; (adr r0, 8004c20 <_printf_i+0x40>)
 8004c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d99 	.word	0x08004d99
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004d7b 	.word	0x08004d7b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004dbb 	.word	0x08004dbb
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d83 	.word	0x08004d83
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	600a      	str	r2, [r1, #0]
 8004c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a3      	b.n	8004dd4 <_printf_i+0x1f4>
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	6808      	ldr	r0, [r1, #0]
 8004c90:	062e      	lsls	r6, r5, #24
 8004c92:	f100 0304 	add.w	r3, r0, #4
 8004c96:	d50a      	bpl.n	8004cae <_printf_i+0xce>
 8004c98:	6805      	ldr	r5, [r0, #0]
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xc8>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <_printf_i+0x244>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e019      	b.n	8004ce2 <_printf_i+0x102>
 8004cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cb2:	6805      	ldr	r5, [r0, #0]
 8004cb4:	600b      	str	r3, [r1, #0]
 8004cb6:	bf18      	it	ne
 8004cb8:	b22d      	sxthne	r5, r5
 8004cba:	e7ef      	b.n	8004c9c <_printf_i+0xbc>
 8004cbc:	680b      	ldr	r3, [r1, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	1d18      	adds	r0, r3, #4
 8004cc2:	6008      	str	r0, [r1, #0]
 8004cc4:	0628      	lsls	r0, r5, #24
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0xec>
 8004cc8:	681d      	ldr	r5, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0xf2>
 8004ccc:	0669      	lsls	r1, r5, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cd0:	881d      	ldrh	r5, [r3, #0]
 8004cd2:	4854      	ldr	r0, [pc, #336]	; (8004e24 <_printf_i+0x244>)
 8004cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2308      	moveq	r3, #8
 8004cda:	230a      	movne	r3, #10
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce2:	6866      	ldr	r6, [r4, #4]
 8004ce4:	60a6      	str	r6, [r4, #8]
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	bfa2      	ittt	ge
 8004cea:	6821      	ldrge	r1, [r4, #0]
 8004cec:	f021 0104 	bicge.w	r1, r1, #4
 8004cf0:	6021      	strge	r1, [r4, #0]
 8004cf2:	b90d      	cbnz	r5, 8004cf8 <_printf_i+0x118>
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	d04d      	beq.n	8004d94 <_printf_i+0x1b4>
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8004d02:	5dc7      	ldrb	r7, [r0, r7]
 8004d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d08:	462f      	mov	r7, r5
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	d9f4      	bls.n	8004cfa <_printf_i+0x11a>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10b      	bne.n	8004d2c <_printf_i+0x14c>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07df      	lsls	r7, r3, #31
 8004d18:	d508      	bpl.n	8004d2c <_printf_i+0x14c>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6861      	ldr	r1, [r4, #4]
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	bfde      	ittt	le
 8004d22:	2330      	movle	r3, #48	; 0x30
 8004d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004d2c:	1b92      	subs	r2, r2, r6
 8004d2e:	6122      	str	r2, [r4, #16]
 8004d30:	f8cd a000 	str.w	sl, [sp]
 8004d34:	464b      	mov	r3, r9
 8004d36:	aa03      	add	r2, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fee2 	bl	8004b04 <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d14c      	bne.n	8004dde <_printf_i+0x1fe>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d48:	b004      	add	sp, #16
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	4835      	ldr	r0, [pc, #212]	; (8004e24 <_printf_i+0x244>)
 8004d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	680e      	ldr	r6, [r1, #0]
 8004d58:	061f      	lsls	r7, r3, #24
 8004d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d5e:	600e      	str	r6, [r1, #0]
 8004d60:	d514      	bpl.n	8004d8c <_printf_i+0x1ac>
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b91d      	cbnz	r5, 8004d76 <_printf_i+0x196>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	2310      	movs	r3, #16
 8004d78:	e7b0      	b.n	8004cdc <_printf_i+0xfc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	2378      	movs	r3, #120	; 0x78
 8004d84:	4828      	ldr	r0, [pc, #160]	; (8004e28 <_printf_i+0x248>)
 8004d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8a:	e7e3      	b.n	8004d54 <_printf_i+0x174>
 8004d8c:	065e      	lsls	r6, r3, #25
 8004d8e:	bf48      	it	mi
 8004d90:	b2ad      	uxthmi	r5, r5
 8004d92:	e7e6      	b.n	8004d62 <_printf_i+0x182>
 8004d94:	4616      	mov	r6, r2
 8004d96:	e7bb      	b.n	8004d10 <_printf_i+0x130>
 8004d98:	680b      	ldr	r3, [r1, #0]
 8004d9a:	6826      	ldr	r6, [r4, #0]
 8004d9c:	6960      	ldr	r0, [r4, #20]
 8004d9e:	1d1d      	adds	r5, r3, #4
 8004da0:	600d      	str	r5, [r1, #0]
 8004da2:	0635      	lsls	r5, r6, #24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	d501      	bpl.n	8004dac <_printf_i+0x1cc>
 8004da8:	6018      	str	r0, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <_printf_i+0x1d2>
 8004dac:	0671      	lsls	r1, r6, #25
 8004dae:	d5fb      	bpl.n	8004da8 <_printf_i+0x1c8>
 8004db0:	8018      	strh	r0, [r3, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	4616      	mov	r6, r2
 8004db8:	e7ba      	b.n	8004d30 <_printf_i+0x150>
 8004dba:	680b      	ldr	r3, [r1, #0]
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	600a      	str	r2, [r1, #0]
 8004dc0:	681e      	ldr	r6, [r3, #0]
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7fb fa0a 	bl	80001e0 <memchr>
 8004dcc:	b108      	cbz	r0, 8004dd2 <_printf_i+0x1f2>
 8004dce:	1b80      	subs	r0, r0, r6
 8004dd0:	6060      	str	r0, [r4, #4]
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	e7a8      	b.n	8004d30 <_printf_i+0x150>
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0ab      	beq.n	8004d44 <_printf_i+0x164>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	d413      	bmi.n	8004e1a <_printf_i+0x23a>
 8004df2:	68e0      	ldr	r0, [r4, #12]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bfb8      	it	lt
 8004dfa:	4618      	movlt	r0, r3
 8004dfc:	e7a4      	b.n	8004d48 <_printf_i+0x168>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4632      	mov	r2, r6
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d09b      	beq.n	8004d44 <_printf_i+0x164>
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	9903      	ldr	r1, [sp, #12]
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dcf2      	bgt.n	8004dfe <_printf_i+0x21e>
 8004e18:	e7eb      	b.n	8004df2 <_printf_i+0x212>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	f104 0619 	add.w	r6, r4, #25
 8004e20:	e7f5      	b.n	8004e0e <_printf_i+0x22e>
 8004e22:	bf00      	nop
 8004e24:	08005679 	.word	0x08005679
 8004e28:	0800568a 	.word	0x0800568a

08004e2c <_putc_r>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	460d      	mov	r5, r1
 8004e30:	4614      	mov	r4, r2
 8004e32:	4606      	mov	r6, r0
 8004e34:	b118      	cbz	r0, 8004e3e <_putc_r+0x12>
 8004e36:	6983      	ldr	r3, [r0, #24]
 8004e38:	b90b      	cbnz	r3, 8004e3e <_putc_r+0x12>
 8004e3a:	f7ff fbd3 	bl	80045e4 <__sinit>
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <_putc_r+0x84>)
 8004e40:	429c      	cmp	r4, r3
 8004e42:	d124      	bne.n	8004e8e <_putc_r+0x62>
 8004e44:	6874      	ldr	r4, [r6, #4]
 8004e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e48:	07d8      	lsls	r0, r3, #31
 8004e4a:	d405      	bmi.n	8004e58 <_putc_r+0x2c>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	0599      	lsls	r1, r3, #22
 8004e50:	d402      	bmi.n	8004e58 <_putc_r+0x2c>
 8004e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e54:	f7ff fc89 	bl	800476a <__retarget_lock_acquire_recursive>
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	60a3      	str	r3, [r4, #8]
 8004e60:	da05      	bge.n	8004e6e <_putc_r+0x42>
 8004e62:	69a2      	ldr	r2, [r4, #24]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	db1c      	blt.n	8004ea2 <_putc_r+0x76>
 8004e68:	b2eb      	uxtb	r3, r5
 8004e6a:	2b0a      	cmp	r3, #10
 8004e6c:	d019      	beq.n	8004ea2 <_putc_r+0x76>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	701d      	strb	r5, [r3, #0]
 8004e76:	b2ed      	uxtb	r5, r5
 8004e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e7a:	07da      	lsls	r2, r3, #31
 8004e7c:	d405      	bmi.n	8004e8a <_putc_r+0x5e>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	059b      	lsls	r3, r3, #22
 8004e82:	d402      	bmi.n	8004e8a <_putc_r+0x5e>
 8004e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e86:	f7ff fc71 	bl	800476c <__retarget_lock_release_recursive>
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <_putc_r+0x88>)
 8004e90:	429c      	cmp	r4, r3
 8004e92:	d101      	bne.n	8004e98 <_putc_r+0x6c>
 8004e94:	68b4      	ldr	r4, [r6, #8]
 8004e96:	e7d6      	b.n	8004e46 <_putc_r+0x1a>
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <_putc_r+0x8c>)
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	bf08      	it	eq
 8004e9e:	68f4      	ldreq	r4, [r6, #12]
 8004ea0:	e7d1      	b.n	8004e46 <_putc_r+0x1a>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 f84c 	bl	8004f44 <__swbuf_r>
 8004eac:	4605      	mov	r5, r0
 8004eae:	e7e3      	b.n	8004e78 <_putc_r+0x4c>
 8004eb0:	08005628 	.word	0x08005628
 8004eb4:	08005648 	.word	0x08005648
 8004eb8:	08005608 	.word	0x08005608

08004ebc <__sread>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	f000 f94a 	bl	800515c <_read_r>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	bfab      	itete	ge
 8004ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ece:	89a3      	ldrhlt	r3, [r4, #12]
 8004ed0:	181b      	addge	r3, r3, r0
 8004ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed6:	bfac      	ite	ge
 8004ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eda:	81a3      	strhlt	r3, [r4, #12]
 8004edc:	bd10      	pop	{r4, pc}

08004ede <__swrite>:
 8004ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	898b      	ldrh	r3, [r1, #12]
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	4605      	mov	r5, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	4616      	mov	r6, r2
 8004eee:	d505      	bpl.n	8004efc <__swrite+0x1e>
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f000 f91e 	bl	8005138 <_lseek_r>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	f7fc baf5 	b.w	8001500 <_write_r>

08004f16 <__sseek>:
 8004f16:	b510      	push	{r4, lr}
 8004f18:	460c      	mov	r4, r1
 8004f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1e:	f000 f90b 	bl	8005138 <_lseek_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	bf15      	itete	ne
 8004f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f32:	81a3      	strheq	r3, [r4, #12]
 8004f34:	bf18      	it	ne
 8004f36:	81a3      	strhne	r3, [r4, #12]
 8004f38:	bd10      	pop	{r4, pc}

08004f3a <__sclose>:
 8004f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3e:	f000 b8c9 	b.w	80050d4 <_close_r>
	...

08004f44 <__swbuf_r>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	460e      	mov	r6, r1
 8004f48:	4614      	mov	r4, r2
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	b118      	cbz	r0, 8004f56 <__swbuf_r+0x12>
 8004f4e:	6983      	ldr	r3, [r0, #24]
 8004f50:	b90b      	cbnz	r3, 8004f56 <__swbuf_r+0x12>
 8004f52:	f7ff fb47 	bl	80045e4 <__sinit>
 8004f56:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <__swbuf_r+0x98>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	d12b      	bne.n	8004fb4 <__swbuf_r+0x70>
 8004f5c:	686c      	ldr	r4, [r5, #4]
 8004f5e:	69a3      	ldr	r3, [r4, #24]
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	071a      	lsls	r2, r3, #28
 8004f66:	d52f      	bpl.n	8004fc8 <__swbuf_r+0x84>
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	b36b      	cbz	r3, 8004fc8 <__swbuf_r+0x84>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	1ac0      	subs	r0, r0, r3
 8004f72:	6963      	ldr	r3, [r4, #20]
 8004f74:	b2f6      	uxtb	r6, r6
 8004f76:	4283      	cmp	r3, r0
 8004f78:	4637      	mov	r7, r6
 8004f7a:	dc04      	bgt.n	8004f86 <__swbuf_r+0x42>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f7ff fa9c 	bl	80044bc <_fflush_r>
 8004f84:	bb30      	cbnz	r0, 8004fd4 <__swbuf_r+0x90>
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	701e      	strb	r6, [r3, #0]
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	3001      	adds	r0, #1
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d004      	beq.n	8004fa6 <__swbuf_r+0x62>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	07db      	lsls	r3, r3, #31
 8004fa0:	d506      	bpl.n	8004fb0 <__swbuf_r+0x6c>
 8004fa2:	2e0a      	cmp	r6, #10
 8004fa4:	d104      	bne.n	8004fb0 <__swbuf_r+0x6c>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f7ff fa87 	bl	80044bc <_fflush_r>
 8004fae:	b988      	cbnz	r0, 8004fd4 <__swbuf_r+0x90>
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <__swbuf_r+0x9c>)
 8004fb6:	429c      	cmp	r4, r3
 8004fb8:	d101      	bne.n	8004fbe <__swbuf_r+0x7a>
 8004fba:	68ac      	ldr	r4, [r5, #8]
 8004fbc:	e7cf      	b.n	8004f5e <__swbuf_r+0x1a>
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <__swbuf_r+0xa0>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	bf08      	it	eq
 8004fc4:	68ec      	ldreq	r4, [r5, #12]
 8004fc6:	e7ca      	b.n	8004f5e <__swbuf_r+0x1a>
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 f80c 	bl	8004fe8 <__swsetup_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0cb      	beq.n	8004f6c <__swbuf_r+0x28>
 8004fd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004fd8:	e7ea      	b.n	8004fb0 <__swbuf_r+0x6c>
 8004fda:	bf00      	nop
 8004fdc:	08005628 	.word	0x08005628
 8004fe0:	08005648 	.word	0x08005648
 8004fe4:	08005608 	.word	0x08005608

08004fe8 <__swsetup_r>:
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <__swsetup_r+0xcc>)
 8004fea:	b570      	push	{r4, r5, r6, lr}
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	b125      	cbz	r5, 8004ffe <__swsetup_r+0x16>
 8004ff4:	69ab      	ldr	r3, [r5, #24]
 8004ff6:	b913      	cbnz	r3, 8004ffe <__swsetup_r+0x16>
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7ff faf3 	bl	80045e4 <__sinit>
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <__swsetup_r+0xd0>)
 8005000:	429c      	cmp	r4, r3
 8005002:	d10f      	bne.n	8005024 <__swsetup_r+0x3c>
 8005004:	686c      	ldr	r4, [r5, #4]
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800500c:	0719      	lsls	r1, r3, #28
 800500e:	d42c      	bmi.n	800506a <__swsetup_r+0x82>
 8005010:	06dd      	lsls	r5, r3, #27
 8005012:	d411      	bmi.n	8005038 <__swsetup_r+0x50>
 8005014:	2309      	movs	r3, #9
 8005016:	6033      	str	r3, [r6, #0]
 8005018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005022:	e03e      	b.n	80050a2 <__swsetup_r+0xba>
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <__swsetup_r+0xd4>)
 8005026:	429c      	cmp	r4, r3
 8005028:	d101      	bne.n	800502e <__swsetup_r+0x46>
 800502a:	68ac      	ldr	r4, [r5, #8]
 800502c:	e7eb      	b.n	8005006 <__swsetup_r+0x1e>
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <__swsetup_r+0xd8>)
 8005030:	429c      	cmp	r4, r3
 8005032:	bf08      	it	eq
 8005034:	68ec      	ldreq	r4, [r5, #12]
 8005036:	e7e6      	b.n	8005006 <__swsetup_r+0x1e>
 8005038:	0758      	lsls	r0, r3, #29
 800503a:	d512      	bpl.n	8005062 <__swsetup_r+0x7a>
 800503c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800503e:	b141      	cbz	r1, 8005052 <__swsetup_r+0x6a>
 8005040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005044:	4299      	cmp	r1, r3
 8005046:	d002      	beq.n	800504e <__swsetup_r+0x66>
 8005048:	4630      	mov	r0, r6
 800504a:	f7fe ff55 	bl	8003ef8 <_free_r>
 800504e:	2300      	movs	r3, #0
 8005050:	6363      	str	r3, [r4, #52]	; 0x34
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	2300      	movs	r3, #0
 800505c:	6063      	str	r3, [r4, #4]
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	b94b      	cbnz	r3, 8005082 <__swsetup_r+0x9a>
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d003      	beq.n	8005082 <__swsetup_r+0x9a>
 800507a:	4621      	mov	r1, r4
 800507c:	4630      	mov	r0, r6
 800507e:	f7ff fb9b 	bl	80047b8 <__smakebuf_r>
 8005082:	89a0      	ldrh	r0, [r4, #12]
 8005084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005088:	f010 0301 	ands.w	r3, r0, #1
 800508c:	d00a      	beq.n	80050a4 <__swsetup_r+0xbc>
 800508e:	2300      	movs	r3, #0
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	6963      	ldr	r3, [r4, #20]
 8005094:	425b      	negs	r3, r3
 8005096:	61a3      	str	r3, [r4, #24]
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	b943      	cbnz	r3, 80050ae <__swsetup_r+0xc6>
 800509c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050a0:	d1ba      	bne.n	8005018 <__swsetup_r+0x30>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	0781      	lsls	r1, r0, #30
 80050a6:	bf58      	it	pl
 80050a8:	6963      	ldrpl	r3, [r4, #20]
 80050aa:	60a3      	str	r3, [r4, #8]
 80050ac:	e7f4      	b.n	8005098 <__swsetup_r+0xb0>
 80050ae:	2000      	movs	r0, #0
 80050b0:	e7f7      	b.n	80050a2 <__swsetup_r+0xba>
 80050b2:	bf00      	nop
 80050b4:	2000002c 	.word	0x2000002c
 80050b8:	08005628 	.word	0x08005628
 80050bc:	08005648 	.word	0x08005648
 80050c0:	08005608 	.word	0x08005608

080050c4 <abort>:
 80050c4:	b508      	push	{r3, lr}
 80050c6:	2006      	movs	r0, #6
 80050c8:	f000 f882 	bl	80051d0 <raise>
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7fe fd8b 	bl	8003be8 <_exit>
	...

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_close_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fe fda9 	bl	8003c36 <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	200001dc 	.word	0x200001dc

080050f4 <_fstat_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4d07      	ldr	r5, [pc, #28]	; (8005114 <_fstat_r+0x20>)
 80050f8:	2300      	movs	r3, #0
 80050fa:	4604      	mov	r4, r0
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	f7fe fda4 	bl	8003c4e <_fstat>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d102      	bne.n	8005110 <_fstat_r+0x1c>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	b103      	cbz	r3, 8005110 <_fstat_r+0x1c>
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	bf00      	nop
 8005114:	200001dc 	.word	0x200001dc

08005118 <_isatty_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	; (8005134 <_isatty_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fe fda3 	bl	8003c6e <_isatty>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_isatty_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_isatty_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	200001dc 	.word	0x200001dc

08005138 <_lseek_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	; (8005158 <_lseek_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fe fd9c 	bl	8003c84 <_lseek>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_lseek_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_lseek_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	200001dc 	.word	0x200001dc

0800515c <_read_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d07      	ldr	r5, [pc, #28]	; (800517c <_read_r+0x20>)
 8005160:	4604      	mov	r4, r0
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	2200      	movs	r2, #0
 8005168:	602a      	str	r2, [r5, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f7fe fd46 	bl	8003bfc <_read>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_read_r+0x1e>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_read_r+0x1e>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	200001dc 	.word	0x200001dc

08005180 <_raise_r>:
 8005180:	291f      	cmp	r1, #31
 8005182:	b538      	push	{r3, r4, r5, lr}
 8005184:	4604      	mov	r4, r0
 8005186:	460d      	mov	r5, r1
 8005188:	d904      	bls.n	8005194 <_raise_r+0x14>
 800518a:	2316      	movs	r3, #22
 800518c:	6003      	str	r3, [r0, #0]
 800518e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005196:	b112      	cbz	r2, 800519e <_raise_r+0x1e>
 8005198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800519c:	b94b      	cbnz	r3, 80051b2 <_raise_r+0x32>
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 f830 	bl	8005204 <_getpid_r>
 80051a4:	462a      	mov	r2, r5
 80051a6:	4601      	mov	r1, r0
 80051a8:	4620      	mov	r0, r4
 80051aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ae:	f000 b817 	b.w	80051e0 <_kill_r>
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d00a      	beq.n	80051cc <_raise_r+0x4c>
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	d103      	bne.n	80051c2 <_raise_r+0x42>
 80051ba:	2316      	movs	r3, #22
 80051bc:	6003      	str	r3, [r0, #0]
 80051be:	2001      	movs	r0, #1
 80051c0:	e7e7      	b.n	8005192 <_raise_r+0x12>
 80051c2:	2400      	movs	r4, #0
 80051c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051c8:	4628      	mov	r0, r5
 80051ca:	4798      	blx	r3
 80051cc:	2000      	movs	r0, #0
 80051ce:	e7e0      	b.n	8005192 <_raise_r+0x12>

080051d0 <raise>:
 80051d0:	4b02      	ldr	r3, [pc, #8]	; (80051dc <raise+0xc>)
 80051d2:	4601      	mov	r1, r0
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	f7ff bfd3 	b.w	8005180 <_raise_r>
 80051da:	bf00      	nop
 80051dc:	2000002c 	.word	0x2000002c

080051e0 <_kill_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	; (8005200 <_kill_r+0x20>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	f7fe fceb 	bl	8003bc8 <_kill>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d102      	bne.n	80051fc <_kill_r+0x1c>
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	b103      	cbz	r3, 80051fc <_kill_r+0x1c>
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	bf00      	nop
 8005200:	200001dc 	.word	0x200001dc

08005204 <_getpid_r>:
 8005204:	f7fe bcd8 	b.w	8003bb8 <_getpid>

08005208 <sqrt>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	ed2d 8b02 	vpush	{d8}
 800520e:	ec55 4b10 	vmov	r4, r5, d0
 8005212:	f000 f82d 	bl	8005270 <__ieee754_sqrt>
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <sqrt+0x64>)
 8005218:	eeb0 8a40 	vmov.f32	s16, s0
 800521c:	eef0 8a60 	vmov.f32	s17, s1
 8005220:	f993 3000 	ldrsb.w	r3, [r3]
 8005224:	3301      	adds	r3, #1
 8005226:	d019      	beq.n	800525c <sqrt+0x54>
 8005228:	4622      	mov	r2, r4
 800522a:	462b      	mov	r3, r5
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb fc7c 	bl	8000b2c <__aeabi_dcmpun>
 8005234:	b990      	cbnz	r0, 800525c <sqrt+0x54>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fc4d 	bl	8000adc <__aeabi_dcmplt>
 8005242:	b158      	cbz	r0, 800525c <sqrt+0x54>
 8005244:	f7fe fe16 	bl	8003e74 <__errno>
 8005248:	2321      	movs	r3, #33	; 0x21
 800524a:	6003      	str	r3, [r0, #0]
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	f7fb fafa 	bl	800084c <__aeabi_ddiv>
 8005258:	ec41 0b18 	vmov	d8, r0, r1
 800525c:	eeb0 0a48 	vmov.f32	s0, s16
 8005260:	eef0 0a68 	vmov.f32	s1, s17
 8005264:	ecbd 8b02 	vpop	{d8}
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	20000090 	.word	0x20000090

08005270 <__ieee754_sqrt>:
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	ec55 4b10 	vmov	r4, r5, d0
 8005278:	4e56      	ldr	r6, [pc, #344]	; (80053d4 <__ieee754_sqrt+0x164>)
 800527a:	43ae      	bics	r6, r5
 800527c:	ee10 0a10 	vmov	r0, s0
 8005280:	ee10 3a10 	vmov	r3, s0
 8005284:	4629      	mov	r1, r5
 8005286:	462a      	mov	r2, r5
 8005288:	d110      	bne.n	80052ac <__ieee754_sqrt+0x3c>
 800528a:	ee10 2a10 	vmov	r2, s0
 800528e:	462b      	mov	r3, r5
 8005290:	f7fb f9b2 	bl	80005f8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fa fff6 	bl	800028c <__adddf3>
 80052a0:	4604      	mov	r4, r0
 80052a2:	460d      	mov	r5, r1
 80052a4:	ec45 4b10 	vmov	d0, r4, r5
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	dc10      	bgt.n	80052d2 <__ieee754_sqrt+0x62>
 80052b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80052b4:	4330      	orrs	r0, r6
 80052b6:	d0f5      	beq.n	80052a4 <__ieee754_sqrt+0x34>
 80052b8:	b15d      	cbz	r5, 80052d2 <__ieee754_sqrt+0x62>
 80052ba:	ee10 2a10 	vmov	r2, s0
 80052be:	462b      	mov	r3, r5
 80052c0:	ee10 0a10 	vmov	r0, s0
 80052c4:	f7fa ffe0 	bl	8000288 <__aeabi_dsub>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	f7fb fabe 	bl	800084c <__aeabi_ddiv>
 80052d0:	e7e6      	b.n	80052a0 <__ieee754_sqrt+0x30>
 80052d2:	1509      	asrs	r1, r1, #20
 80052d4:	d076      	beq.n	80053c4 <__ieee754_sqrt+0x154>
 80052d6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80052da:	07ce      	lsls	r6, r1, #31
 80052dc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80052e0:	bf5e      	ittt	pl
 80052e2:	0fda      	lsrpl	r2, r3, #31
 80052e4:	005b      	lslpl	r3, r3, #1
 80052e6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80052ea:	0fda      	lsrs	r2, r3, #31
 80052ec:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80052f0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80052f4:	2000      	movs	r0, #0
 80052f6:	106d      	asrs	r5, r5, #1
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	f04f 0e16 	mov.w	lr, #22
 80052fe:	4684      	mov	ip, r0
 8005300:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005304:	eb0c 0401 	add.w	r4, ip, r1
 8005308:	4294      	cmp	r4, r2
 800530a:	bfde      	ittt	le
 800530c:	1b12      	suble	r2, r2, r4
 800530e:	eb04 0c01 	addle.w	ip, r4, r1
 8005312:	1840      	addle	r0, r0, r1
 8005314:	0052      	lsls	r2, r2, #1
 8005316:	f1be 0e01 	subs.w	lr, lr, #1
 800531a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800531e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005322:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005326:	d1ed      	bne.n	8005304 <__ieee754_sqrt+0x94>
 8005328:	4671      	mov	r1, lr
 800532a:	2720      	movs	r7, #32
 800532c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005330:	4562      	cmp	r2, ip
 8005332:	eb04 060e 	add.w	r6, r4, lr
 8005336:	dc02      	bgt.n	800533e <__ieee754_sqrt+0xce>
 8005338:	d113      	bne.n	8005362 <__ieee754_sqrt+0xf2>
 800533a:	429e      	cmp	r6, r3
 800533c:	d811      	bhi.n	8005362 <__ieee754_sqrt+0xf2>
 800533e:	2e00      	cmp	r6, #0
 8005340:	eb06 0e04 	add.w	lr, r6, r4
 8005344:	da43      	bge.n	80053ce <__ieee754_sqrt+0x15e>
 8005346:	f1be 0f00 	cmp.w	lr, #0
 800534a:	db40      	blt.n	80053ce <__ieee754_sqrt+0x15e>
 800534c:	f10c 0801 	add.w	r8, ip, #1
 8005350:	eba2 020c 	sub.w	r2, r2, ip
 8005354:	429e      	cmp	r6, r3
 8005356:	bf88      	it	hi
 8005358:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800535c:	1b9b      	subs	r3, r3, r6
 800535e:	4421      	add	r1, r4
 8005360:	46c4      	mov	ip, r8
 8005362:	0052      	lsls	r2, r2, #1
 8005364:	3f01      	subs	r7, #1
 8005366:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800536a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800536e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005372:	d1dd      	bne.n	8005330 <__ieee754_sqrt+0xc0>
 8005374:	4313      	orrs	r3, r2
 8005376:	d006      	beq.n	8005386 <__ieee754_sqrt+0x116>
 8005378:	1c4c      	adds	r4, r1, #1
 800537a:	bf13      	iteet	ne
 800537c:	3101      	addne	r1, #1
 800537e:	3001      	addeq	r0, #1
 8005380:	4639      	moveq	r1, r7
 8005382:	f021 0101 	bicne.w	r1, r1, #1
 8005386:	1043      	asrs	r3, r0, #1
 8005388:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800538c:	0849      	lsrs	r1, r1, #1
 800538e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005392:	07c2      	lsls	r2, r0, #31
 8005394:	bf48      	it	mi
 8005396:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800539a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800539e:	460c      	mov	r4, r1
 80053a0:	463d      	mov	r5, r7
 80053a2:	e77f      	b.n	80052a4 <__ieee754_sqrt+0x34>
 80053a4:	0ada      	lsrs	r2, r3, #11
 80053a6:	3815      	subs	r0, #21
 80053a8:	055b      	lsls	r3, r3, #21
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d0fa      	beq.n	80053a4 <__ieee754_sqrt+0x134>
 80053ae:	02d7      	lsls	r7, r2, #11
 80053b0:	d50a      	bpl.n	80053c8 <__ieee754_sqrt+0x158>
 80053b2:	f1c1 0420 	rsb	r4, r1, #32
 80053b6:	fa23 f404 	lsr.w	r4, r3, r4
 80053ba:	1e4d      	subs	r5, r1, #1
 80053bc:	408b      	lsls	r3, r1
 80053be:	4322      	orrs	r2, r4
 80053c0:	1b41      	subs	r1, r0, r5
 80053c2:	e788      	b.n	80052d6 <__ieee754_sqrt+0x66>
 80053c4:	4608      	mov	r0, r1
 80053c6:	e7f0      	b.n	80053aa <__ieee754_sqrt+0x13a>
 80053c8:	0052      	lsls	r2, r2, #1
 80053ca:	3101      	adds	r1, #1
 80053cc:	e7ef      	b.n	80053ae <__ieee754_sqrt+0x13e>
 80053ce:	46e0      	mov	r8, ip
 80053d0:	e7be      	b.n	8005350 <__ieee754_sqrt+0xe0>
 80053d2:	bf00      	nop
 80053d4:	7ff00000 	.word	0x7ff00000

080053d8 <_gettimeofday>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <_gettimeofday+0xc>)
 80053da:	2258      	movs	r2, #88	; 0x58
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e2:	4770      	bx	lr
 80053e4:	200001dc 	.word	0x200001dc

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
