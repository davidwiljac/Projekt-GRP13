
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  1 .text         0000359c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080039bc  080039bc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039bc  080039bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080039c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08003a54  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003a54  000201dc  2**0
=======
  1 .text         000057b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c38  08005c38  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000094  08005cd4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005cd4  000201e0  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 12 .debug_info   0000d353  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214d  00000000  00000000  0002d413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484c  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bf5  00000000  00000000  00034ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6bf  00000000  00000000  0003e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e8  00000000  00000000  00098dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009b3c8  2**0
=======
  1 .text         00004214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800463c  0800463c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800463c  0800463c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  080046d4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080046d4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8eb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002288  00000000  00000000  0002d9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00030388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c0  00000000  00000000  000309d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3b9  00000000  00000000  00035390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a7bc  00000000  00000000  0003f749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00099f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  00099f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009c6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009c6d4  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING
=======
 12 .debug_info   0000f1b8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002526  00000000  00000000  0002f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  000317a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011697  00000000  00000000  000329a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b98b  00000000  00000000  00044037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ba35  00000000  00000000  0004f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ab3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000ab44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
>>>>>>> Stashed changes

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80001b0:	08003714 	.word	0x08003714
=======
 80001b0:	0800438c 	.word	0x0800438c
>>>>>>> Stashed changes
=======
 80001b0:	0800592c 	.word	0x0800592c
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001c8:	20000094 	.word	0x20000094
<<<<<<< Updated upstream
 80001cc:	08003714 	.word	0x08003714
=======
 80001cc:	0800438c 	.word	0x0800438c
>>>>>>> Stashed changes
=======
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800592c 	.word	0x0800592c
>>>>>>> Stashed changes

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

<<<<<<< Updated upstream
08000280 <RCC_GetClocksFreq>:
=======
08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	70fb      	strb	r3, [r7, #3]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	70bb      	strb	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d821      	bhi.n	8000f0c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000ece:	78ba      	ldrb	r2, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	4093      	lsls	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000eea:	78f9      	ldrb	r1, [r7, #3]
 8000eec:	78ba      	ldrb	r2, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0a:	e074      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d823      	bhi.n	8000f5a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	1f5a      	subs	r2, r3, #5
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	461a      	mov	r2, r3
 8000f26:	231f      	movs	r3, #31
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4013      	ands	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	1f5a      	subs	r2, r3, #5
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	e04d      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000f5a:	78bb      	ldrb	r3, [r7, #2]
 8000f5c:	2b0e      	cmp	r3, #14
 8000f5e:	d825      	bhi.n	8000fac <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	f1a3 020a 	sub.w	r2, r3, #10
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	231f      	movs	r3, #31
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000f86:	78f9      	ldrb	r1, [r7, #3]
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000faa:	e024      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000fb2:	78bb      	ldrb	r3, [r7, #2]
 8000fb4:	f1a3 020f 	sub.w	r2, r3, #15
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000fd2:	78f9      	ldrb	r1, [r7, #3]
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	f1a3 020f 	sub.w	r2, r3, #15
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d923      	bls.n	8001044 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	f1a3 020a 	sub.w	r2, r3, #10
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6999      	ldr	r1, [r3, #24]
 8001028:	7878      	ldrb	r0, [r7, #1]
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	f1a3 020a 	sub.w	r2, r3, #10
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	fa00 f303 	lsl.w	r3, r0, r3
 800103a:	ea41 0203 	orr.w	r2, r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001042:	e01f      	b.n	8001084 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6959      	ldr	r1, [r3, #20]
 800106e:	7878      	ldrb	r0, [r7, #1]
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	fa00 f303 	lsl.w	r3, r0, r3
 800107c:	ea41 0203 	orr.w	r2, r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f043 0204 	orr.w	r2, r3, #4
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	b29b      	uxth	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <RCC_GetClocksFreq>:
>>>>>>> Stashed changes
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
<<<<<<< Updated upstream
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
=======
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001124:	4b91      	ldr	r3, [pc, #580]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d011      	beq.n	8001158 <RCC_GetClocksFreq+0x5c>
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d837      	bhi.n	80011aa <RCC_GetClocksFreq+0xae>
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <RCC_GetClocksFreq+0x4c>
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d004      	beq.n	8001150 <RCC_GetClocksFreq+0x54>
 8001146:	e030      	b.n	80011aa <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a89      	ldr	r2, [pc, #548]	; (8001370 <RCC_GetClocksFreq+0x274>)
 800114c:	601a      	str	r2, [r3, #0]
      break;
 800114e:	e030      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a87      	ldr	r2, [pc, #540]	; (8001370 <RCC_GetClocksFreq+0x274>)
 8001154:	601a      	str	r2, [r3, #0]
      break;
 8001156:	e02c      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <RCC_GetClocksFreq+0x270>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001160:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	3302      	adds	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	4a7d      	ldr	r2, [pc, #500]	; (8001374 <RCC_GetClocksFreq+0x278>)
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e00d      	b.n	80011a2 <RCC_GetClocksFreq+0xa6>
>>>>>>> Stashed changes
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
<<<<<<< Updated upstream
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
=======
 8001186:	4b79      	ldr	r3, [pc, #484]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8001192:	4a77      	ldr	r2, [pc, #476]	; (8001370 <RCC_GetClocksFreq+0x274>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fbb2 f2f3 	udiv	r2, r2, r3
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	601a      	str	r2, [r3, #0]
      break;
 80011a8:	e003      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a70      	ldr	r2, [pc, #448]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80011ae:	601a      	str	r2, [r3, #0]
      break;
 80011b0:	bf00      	nop
>>>>>>> Stashed changes
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
<<<<<<< Updated upstream
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
=======
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <RCC_GetClocksFreq+0x270>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ba:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80011c2:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	40da      	lsrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <RCC_GetClocksFreq+0x270>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	40da      	lsrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800120a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	0adb      	lsrs	r3, r3, #11
 8001210:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001212:	4a59      	ldr	r2, [pc, #356]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	40da      	lsrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800122a:	4b50      	ldr	r3, [pc, #320]	; (800136c <RCC_GetClocksFreq+0x270>)
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001232:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800123a:	4a50      	ldr	r2, [pc, #320]	; (800137c <RCC_GetClocksFreq+0x280>)
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001242:	b29b      	uxth	r3, r3
 8001244:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fbb2 f2f3 	udiv	r2, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	e003      	b.n	8001266 <RCC_GetClocksFreq+0x16a>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
=======
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
<<<<<<< Updated upstream
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
=======
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800126e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	0a5b      	lsrs	r3, r3, #9
 8001274:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001276:	4a41      	ldr	r2, [pc, #260]	; (800137c <RCC_GetClocksFreq+0x280>)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	b29b      	uxth	r3, r3
 8001280:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fbb2 f2f3 	udiv	r2, r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	e003      	b.n	80012a2 <RCC_GetClocksFreq+0x1a6>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
=======
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
<<<<<<< Updated upstream
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
=======
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d003      	beq.n	80012b6 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80012b2:	619a      	str	r2, [r3, #24]
 80012b4:	e003      	b.n	80012be <RCC_GetClocksFreq+0x1c2>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
=======
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
<<<<<<< Updated upstream
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
=======
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	d003      	beq.n	80012d2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80012ce:	61da      	str	r2, [r3, #28]
 80012d0:	e003      	b.n	80012da <RCC_GetClocksFreq+0x1de>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
=======
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
=======
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e6:	d10d      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d108      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d104      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	005a      	lsls	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	e003      	b.n	800130c <RCC_GetClocksFreq+0x210>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
=======
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
=======
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <RCC_GetClocksFreq+0x270>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d10d      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	429a      	cmp	r2, r3
 8001322:	d108      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	d104      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	005a      	lsls	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
 8001334:	e003      	b.n	800133e <RCC_GetClocksFreq+0x242>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
<<<<<<< Updated upstream
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d104      	bne.n	8001354 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
 8001352:	e029      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10f      	bne.n	8001380 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
 8001368:	e01e      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	007a1200 	.word	0x007a1200
 8001374:	003d0900 	.word	0x003d0900
 8001378:	20000000 	.word	0x20000000
 800137c:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001380:	4b66      	ldr	r3, [pc, #408]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d104      	bne.n	8001396 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
 8001394:	e008      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d102      	bne.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a5e      	ldr	r2, [pc, #376]	; (8001520 <RCC_GetClocksFreq+0x424>)
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
<<<<<<< Updated upstream
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80013bc:	e021      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d104      	bne.n	80013d6 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d4:	e015      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013e2:	d104      	bne.n	80013ee <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ec:	e009      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013fa:	d102      	bne.n	8001402 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <RCC_GetClocksFreq+0x424>)
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
<<<<<<< Updated upstream
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
 8001416:	e021      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <RCC_GetClocksFreq+0x420>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001424:	d104      	bne.n	8001430 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e015      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800143c:	d104      	bne.n	8001448 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	e009      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <RCC_GetClocksFreq+0x420>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001450:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001454:	d102      	bne.n	800145c <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <RCC_GetClocksFreq+0x424>)
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
<<<<<<< Updated upstream
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
=======
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <RCC_GetClocksFreq+0x420>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	e021      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800147a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800147e:	d104      	bne.n	800148a <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
 8001488:	e015      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <RCC_GetClocksFreq+0x420>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001496:	d104      	bne.n	80014a2 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
 80014a0:	e009      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80014ae:	d102      	bne.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <RCC_GetClocksFreq+0x424>)
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
<<<<<<< Updated upstream
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
<<<<<<< Updated upstream
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
=======
 80014ca:	e021      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d8:	d104      	bne.n	80014e4 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014e2:	e015      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014f0:	d104      	bne.n	80014fc <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014fa:	e009      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001508:	d102      	bne.n	8001510 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <RCC_GetClocksFreq+0x424>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001510:	bf00      	nop
 8001512:	372c      	adds	r7, #44	; 0x2c
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200

08001524 <USART_SendData>:
>>>>>>> Stashed changes
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
<<<<<<< Updated upstream
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
=======
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
<<<<<<< Updated upstream
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
=======
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <USART_ITConfig>:
>>>>>>> Stashed changes
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
<<<<<<< Updated upstream
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
=======
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4613      	mov	r3, r2
 8001554:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
<<<<<<< Updated upstream
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
=======
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	b29b      	uxth	r3, r3
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800157a:	2201      	movs	r2, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d103      	bne.n	8001592 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e005      	b.n	800159e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d102      	bne.n	800159e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3308      	adds	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
<<<<<<< Updated upstream
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
=======
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
<<<<<<< Updated upstream
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
=======
 80015b0:	e006      	b.n	80015c0 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <USART_GetFlagStatus>:
>>>>>>> Stashed changes
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
<<<<<<< Updated upstream
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
=======
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
<<<<<<< Updated upstream
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
=======
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e001      	b.n	80015f0 <USART_GetFlagStatus+0x24>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
=======
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <USART_GetITStatus>:
>>>>>>> Stashed changes
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
<<<<<<< Updated upstream
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
=======
 80015fe:	b480      	push	{r7}
 8001600:	b087      	sub	sp, #28
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	74fb      	strb	r3, [r7, #19]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
<<<<<<< Updated upstream
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
=======
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	b29b      	uxth	r3, r3
 8001620:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001628:	2201      	movs	r2, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4013      	ands	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e00d      	b.n	8001660 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d105      	bne.n	8001656 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e004      	b.n	8001660 <USART_GetITStatus+0x62>
>>>>>>> Stashed changes
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
<<<<<<< Updated upstream
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
=======
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001666:	2201      	movs	r2, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <USART_GetITStatus+0x8e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	74fb      	strb	r3, [r7, #19]
 800168a:	e001      	b.n	8001690 <USART_GetITStatus+0x92>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
=======
 800168c:	2300      	movs	r3, #0
 800168e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001690:	7cfb      	ldrb	r3, [r7, #19]
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <NVIC_EnableIRQ>:
>>>>>>> Stashed changes
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_get_char>:
=======
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2201      	movs	r2, #1
 80016b2:	fa02 f103 	lsl.w	r1, r2, r3
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <NVIC_EnableIRQ+0x30>)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <uart_get_char>:
>>>>>>> Stashed changes
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
<<<<<<< Updated upstream
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <uart_get_char+0x48>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d011      	beq.n	8000890 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <uart_get_char+0x4c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	b2d1      	uxtb	r1, r2
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <uart_get_char+0x4c>)
 8000878:	7011      	strb	r1, [r2, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <uart_get_char+0x50>)
 800087e:	5c9b      	ldrb	r3, [r3, r2]
 8000880:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <uart_get_char+0x48>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <uart_get_char+0x48>)
 800088e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200001ae 	.word	0x200001ae
 80008a4:	200001ad 	.word	0x200001ad
 80008a8:	200000ac 	.word	0x200000ac

080008ac <uart_put_char>:

void uart_put_char(uint8_t c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <uart_put_char+0x30>)
 80008be:	f7ff fef3 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008c2:	bf00      	nop
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <uart_put_char+0x30>)
 80008c8:	f7ff ff42 	bl	8000750 <USART_GetFlagStatus>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f8      	beq.n	80008c4 <uart_put_char+0x18>
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400

080008e0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e012      	b.n	800091a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b0a      	cmp	r3, #10
 80008fe:	d102      	bne.n	8000906 <_write_r+0x26>
            uart_put_char('\r');
 8000900:	200d      	movs	r0, #13
 8000902:	f7ff ffd3 	bl	80008ac <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffcc 	bl	80008ac <uart_put_char>
    for (n = 0; n < len; n++) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	dbe8      	blt.n	80008f4 <_write_r+0x14>
    }

    return len;
 8000922:	683b      	ldr	r3, [r7, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000930:	4915      	ldr	r1, [pc, #84]	; (8000988 <USART2_IRQHandler+0x5c>)
 8000932:	4816      	ldr	r0, [pc, #88]	; (800098c <USART2_IRQHandler+0x60>)
 8000934:	f7ff ff25 	bl	8000782 <USART_GetITStatus>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d021      	beq.n	8000982 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <USART2_IRQHandler+0x60>)
 8000940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000942:	b299      	uxth	r1, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <USART2_IRQHandler+0x64>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d0      	uxtb	r0, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <USART2_IRQHandler+0x64>)
 8000950:	7010      	strb	r0, [r2, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <USART2_IRQHandler+0x68>)
 8000958:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <USART2_IRQHandler+0x6c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d107      	bne.n	8000974 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <USART2_IRQHandler+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <USART2_IRQHandler+0x70>)
 8000970:	701a      	strb	r2, [r3, #0]
=======
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <uart_get_char+0x48>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d011      	beq.n	800170c <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <uart_get_char+0x4c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <uart_get_char+0x4c>)
 80016f4:	7011      	strb	r1, [r2, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <uart_get_char+0x50>)
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <uart_get_char+0x48>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <uart_get_char+0x48>)
 800170a:	701a      	strb	r2, [r3, #0]
    }
    return val;
 800170c:	79fb      	ldrb	r3, [r7, #7]
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200001b2 	.word	0x200001b2
 8001720:	200001b1 	.word	0x200001b1
 8001724:	200000b0 	.word	0x200000b0

08001728 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <uart_put_char+0x30>)
 800173a:	f7ff fef3 	bl	8001524 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800173e:	bf00      	nop
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <uart_put_char+0x30>)
 8001744:	f7ff ff42 	bl	80015cc <USART_GetFlagStatus>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f8      	beq.n	8001740 <uart_put_char+0x18>
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004400 	.word	0x40004400

0800175c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e012      	b.n	8001796 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d102      	bne.n	8001782 <_write_r+0x26>
            uart_put_char('\r');
 800177c:	200d      	movs	r0, #13
 800177e:	f7ff ffd3 	bl	8001728 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffcc 	bl	8001728 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbe8      	blt.n	8001770 <_write_r+0x14>
    }

    return len;
 800179e:	683b      	ldr	r3, [r7, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <USART2_IRQHandler+0x5c>)
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <USART2_IRQHandler+0x60>)
 80017b0:	f7ff ff25 	bl	80015fe <USART_GetITStatus>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d021      	beq.n	80017fe <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <USART2_IRQHandler+0x60>)
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	b299      	uxth	r1, r3
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <USART2_IRQHandler+0x64>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	b2d0      	uxtb	r0, r2
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <USART2_IRQHandler+0x64>)
 80017cc:	7010      	strb	r0, [r2, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	b2c9      	uxtb	r1, r1
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <USART2_IRQHandler+0x68>)
 80017d4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	d107      	bne.n	80017f0 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <USART2_IRQHandler+0x70>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <USART2_IRQHandler+0x70>)
 80017ec:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        } else {
            UART_COUNT++;
        }
    }
}
<<<<<<< Updated upstream
 8000972:	e006      	b.n	8000982 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	00050105 	.word	0x00050105
 800098c:	40004400 	.word	0x40004400
 8000990:	200001ac 	.word	0x200001ac
 8000994:	200000ac 	.word	0x200000ac
 8000998:	200001ae 	.word	0x200001ae
 800099c:	200001ad 	.word	0x200001ad

080009a0 <uart_init>:
=======
 80017ee:	e006      	b.n	80017fe <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017fc:	701a      	strb	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00050105 	.word	0x00050105
 8001808:	40004400 	.word	0x40004400
 800180c:	200001b0 	.word	0x200001b0
 8001810:	200000b0 	.word	0x200000b0
 8001814:	200001b2 	.word	0x200001b2
 8001818:	200001b1 	.word	0x200001b1

0800181c <uart_init>:
>>>>>>> Stashed changes

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
<<<<<<< Updated upstream
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009a8:	4b86      	ldr	r3, [pc, #536]	; (8000bc4 <uart_init+0x224>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80009b2:	f001 fe77 	bl	80026a4 <setbuf>
=======
 80009b2:	f002 fcb1 	bl	8003318 <setbuf>
>>>>>>> Stashed changes
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009b6:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <uart_init+0x224>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80009c0:	f001 fe70 	bl	80026a4 <setbuf>
=======
 80009c0:	f002 fcaa 	bl	8003318 <setbuf>
>>>>>>> Stashed changes

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009c4:	4b80      	ldr	r3, [pc, #512]	; (8000bc8 <uart_init+0x228>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a7f      	ldr	r2, [pc, #508]	; (8000bc8 <uart_init+0x228>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009d0:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <uart_init+0x228>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a7c      	ldr	r2, [pc, #496]	; (8000bc8 <uart_init+0x228>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80009ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a0a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a16:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a1a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a36:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a3a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a48:	f023 030c 	bic.w	r3, r3, #12
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	8892      	ldrh	r2, [r2, #4]
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a7c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a98:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a9c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <uart_init+0x22c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <uart_init+0x22c>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <uart_init+0x22c>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <uart_init+0x22c>)
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ab6:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <uart_init+0x22c>)
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <uart_init+0x22c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <uart_init+0x22c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <uart_init+0x22c>)
 8000ac4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ac8:	f023 030c 	bic.w	r3, r3, #12
 8000acc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <uart_init+0x22c>)
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <uart_init+0x22c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <uart_init+0x22c>)
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <uart_init+0x22c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <uart_init+0x22c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <uart_init+0x22c>)
 8000ae4:	f043 030c 	orr.w	r3, r3, #12
 8000ae8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <uart_init+0x22c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4a37      	ldr	r2, [pc, #220]	; (8000bcc <uart_init+0x22c>)
 8000af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000af4:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <uart_init+0x22c>)
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <uart_init+0x22c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
 8000b06:	2300      	movs	r3, #0
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fbb6 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <uart_init+0x22c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d010      	beq.n	8000b46 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	005a      	lsls	r2, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	fb01 f202 	mul.w	r2, r1, r2
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b44:	e00d      	b.n	8000b62 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	fb01 f202 	mul.w	r2, r1, r2
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <uart_init+0x1d2>
        divider++;
 8000b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <uart_init+0x22c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b8a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b8e:	4013      	ands	r3, r2
 8000b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b92:	4313      	orrs	r3, r2
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <uart_init+0x22c>)
 8000b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b9a:	b292      	uxth	r2, r2
 8000b9c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <uart_init+0x22c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <uart_init+0x22c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000baa:	2201      	movs	r2, #1
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <uart_init+0x230>)
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <uart_init+0x22c>)
 8000bb0:	f7ff fd8c 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f7ff fe35 	bl	8000824 <NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	00050105 	.word	0x00050105

<<<<<<< Updated upstream
08000bd4 <clrscr>:
=======
08000bd4 <fgcolor>:
=======
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001824:	4b86      	ldr	r3, [pc, #536]	; (8001a40 <uart_init+0x224>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f002 ff91 	bl	8004754 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001832:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <uart_init+0x224>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 ff8a 	bl	8004754 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <uart_init+0x228>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a7f      	ldr	r2, [pc, #508]	; (8001a44 <uart_init+0x228>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800184c:	4b7d      	ldr	r3, [pc, #500]	; (8001a44 <uart_init+0x228>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <uart_init+0x228>)
 8001852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001856:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001866:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001876:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001886:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001892:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001896:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80018a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018b2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80018b6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80018b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018bc:	889b      	ldrh	r3, [r3, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018c4:	f023 030c 	bic.w	r3, r3, #12
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80018cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d4:	8892      	ldrh	r2, [r2, #4]
 80018d6:	b292      	uxth	r2, r2
 80018d8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80018da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e8:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80018ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80018f8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80018fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001908:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800190a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001914:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001918:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <uart_init+0x22c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <uart_init+0x22c>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <uart_init+0x22c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <uart_init+0x22c>)
 800192c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001930:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001932:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <uart_init+0x22c>)
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <uart_init+0x22c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <uart_init+0x22c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <uart_init+0x22c>)
 8001940:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001944:	f023 030c 	bic.w	r3, r3, #12
 8001948:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <uart_init+0x22c>)
 800194c:	4a3e      	ldr	r2, [pc, #248]	; (8001a48 <uart_init+0x22c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <uart_init+0x22c>)
 8001954:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <uart_init+0x22c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <uart_init+0x22c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <uart_init+0x22c>)
 8001960:	f043 030c 	orr.w	r3, r3, #12
 8001964:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <uart_init+0x22c>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <uart_init+0x22c>)
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <uart_init+0x22c>)
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <uart_init+0x22c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
 8001982:	2300      	movs	r3, #0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fbb6 	bl	80010fc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <uart_init+0x22c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80019ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	fb01 f202 	mul.w	r2, r1, r2
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c0:	e00d      	b.n	80019de <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80019c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	fb01 f202 	mul.w	r2, r1, r2
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <uart_init+0x1d2>
        divider++;
 80019e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ea:	3301      	adds	r3, #1
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <uart_init+0x22c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <uart_init+0x22c>)
 8001a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a16:	b292      	uxth	r2, r2
 8001a18:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <uart_init+0x22c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <uart_init+0x22c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001a26:	2201      	movs	r2, #1
 8001a28:	4908      	ldr	r1, [pc, #32]	; (8001a4c <uart_init+0x230>)
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <uart_init+0x22c>)
 8001a2c:	f7ff fd8c 	bl	8001548 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001a30:	2026      	movs	r0, #38	; 0x26
 8001a32:	f7ff fe35 	bl	80016a0 <NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	; 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000002c 	.word	0x2000002c
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40004400 	.word	0x40004400
 8001a4c:	00050105 	.word	0x00050105

08001a50 <fgcolor>:
>>>>>>> Stashed changes
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
<<<<<<< Updated upstream
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
=======
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
<<<<<<< Updated upstream
 8000bde:	2316      	movs	r3, #22
 8000be0:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d904      	bls.n	8000bf2 <fgcolor+0x1e>
	  type = 1;                // bold text
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	331e      	adds	r3, #30
 8000bf8:	211b      	movs	r1, #27
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <fgcolor+0x34>)
 8000bfc:	f002 fae0 	bl	80031c0 <iprintf>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080043a4 	.word	0x080043a4

08000c0c <clrscr>:
>>>>>>> Stashed changes
=======
 8001a5a:	2316      	movs	r3, #22
 8001a5c:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d904      	bls.n	8001a6e <fgcolor+0x1e>
	  type = 1;                // bold text
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3b08      	subs	r3, #8
 8001a6c:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	331e      	adds	r3, #30
 8001a74:	211b      	movs	r1, #27
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <fgcolor+0x34>)
 8001a78:	f002 fdc0 	bl	80045fc <iprintf>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	08005944 	.word	0x08005944

08001a88 <clrscr>:
>>>>>>> Stashed changes
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
<<<<<<< Updated upstream
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
<<<<<<< Updated upstream
 8000bd8:	211b      	movs	r1, #27
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <clrscr+0x18>)
 8000bdc:	f001 fcb6 	bl	800254c <iprintf>
    printf("%c[J", ESC);
 8000be0:	211b      	movs	r1, #27
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <clrscr+0x1c>)
 8000be4:	f001 fcb2 	bl	800254c <iprintf>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	08003758 	.word	0x08003758
 8000bf0:	08003760 	.word	0x08003760
=======
 8000c10:	211b      	movs	r1, #27
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <clrscr+0x18>)
 8000c14:	f002 fad4 	bl	80031c0 <iprintf>
    printf("%c[J", ESC);
 8000c18:	211b      	movs	r1, #27
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <clrscr+0x1c>)
 8000c1c:	f002 fad0 	bl	80031c0 <iprintf>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	080043d0 	.word	0x080043d0
 8000c28:	080043d8 	.word	0x080043d8
>>>>>>> Stashed changes

08000bf4 <gotoxy>:
=======
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001a8c:	211b      	movs	r1, #27
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <clrscr+0x18>)
 8001a90:	f002 fdb4 	bl	80045fc <iprintf>
    printf("%c[J", ESC);
 8001a94:	211b      	movs	r1, #27
 8001a96:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <clrscr+0x1c>)
 8001a98:	f002 fdb0 	bl	80045fc <iprintf>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	08005970 	.word	0x08005970
 8001aa4:	08005978 	.word	0x08005978

08001aa8 <gotoxy>:
>>>>>>> Stashed changes
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
<<<<<<< Updated upstream
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
<<<<<<< Updated upstream
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	211b      	movs	r1, #27
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <gotoxy+0x20>)
 8000c06:	f001 fca1 	bl	800254c <iprintf>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08003770 	.word	0x08003770
=======
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	211b      	movs	r1, #27
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <gotoxy+0x20>)
 8000c3e:	f002 fabf 	bl	80031c0 <iprintf>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080043e8 	.word	0x080043e8
>>>>>>> Stashed changes

08000c18 <drawBox>:
=======
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	211b      	movs	r1, #27
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <gotoxy+0x20>)
 8001aba:	f002 fd9f 	bl	80045fc <iprintf>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08005988 	.word	0x08005988

08001acc <drawBox>:
>>>>>>> Stashed changes
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
<<<<<<< Updated upstream
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d15e      	bne.n	8000cea <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	e019      	b.n	8000c66 <drawBox+0x4e>
			 gotoxy(x1,y);
 8000c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff ffdd 	bl	8000bf4 <gotoxy>
			 if (y==y1){
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d103      	bne.n	8000c4a <drawBox+0x32>
				printf("%c", 201);
<<<<<<< Updated upstream
 8000c42:	20c9      	movs	r0, #201	; 0xc9
 8000c44:	f001 fc9a 	bl	800257c <putchar>
 8000c48:	e00a      	b.n	8000c60 <drawBox+0x48>
=======
 8000c7a:	20c9      	movs	r0, #201	; 0xc9
 8000c7c:	f002 fab8 	bl	80031f0 <putchar>
 8000c80:	e00a      	b.n	8000c98 <drawBox+0x48>
>>>>>>> Stashed changes
			 }
			 else if(y==y2){
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d103      	bne.n	8000c5a <drawBox+0x42>
				printf("%c", 200);
<<<<<<< Updated upstream
 8000c52:	20c8      	movs	r0, #200	; 0xc8
 8000c54:	f001 fc92 	bl	800257c <putchar>
 8000c58:	e002      	b.n	8000c60 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000c5a:	20ba      	movs	r0, #186	; 0xba
 8000c5c:	f001 fc8e 	bl	800257c <putchar>
=======
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f002 fab0 	bl	80031f0 <putchar>
 8000c90:	e002      	b.n	8000c98 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000c92:	20ba      	movs	r0, #186	; 0xba
 8000c94:	f002 faac 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
		 for(int y = y1; y <= y2; y++){
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3301      	adds	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dde1      	ble.n	8000c32 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	e014      	b.n	8000c9e <drawBox+0x86>
   			 if(x!=x1){
 8000c74:	6a3a      	ldr	r2, [r7, #32]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d00d      	beq.n	8000c98 <drawBox+0x80>
				 gotoxy(x,y1);
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6a38      	ldr	r0, [r7, #32]
 8000c80:	f7ff ffb8 	bl	8000bf4 <gotoxy>
				 printf("%c", 205);
<<<<<<< Updated upstream
 8000c84:	20cd      	movs	r0, #205	; 0xcd
 8000c86:	f001 fc79 	bl	800257c <putchar>
=======
 8000cbc:	20cd      	movs	r0, #205	; 0xcd
 8000cbe:	f002 fa97 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
				 gotoxy(x,y2);
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	6a38      	ldr	r0, [r7, #32]
 8000c8e:	f7ff ffb1 	bl	8000bf4 <gotoxy>
				 printf("%c", 205);
<<<<<<< Updated upstream
 8000c92:	20cd      	movs	r0, #205	; 0xcd
 8000c94:	f001 fc72 	bl	800257c <putchar>
=======
 8000cca:	20cd      	movs	r0, #205	; 0xcd
 8000ccc:	f002 fa90 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
   		 for(int x = x1; x <= x2; x++){
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dde6      	ble.n	8000c74 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e019      	b.n	8000ce0 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000cac:	69f9      	ldr	r1, [r7, #28]
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa0 	bl	8000bf4 <gotoxy>
   			 if (y==y1){
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d103      	bne.n	8000cc4 <drawBox+0xac>
				printf("%c", 187);
<<<<<<< Updated upstream
 8000cbc:	20bb      	movs	r0, #187	; 0xbb
 8000cbe:	f001 fc5d 	bl	800257c <putchar>
 8000cc2:	e00a      	b.n	8000cda <drawBox+0xc2>
=======
 8000cf4:	20bb      	movs	r0, #187	; 0xbb
 8000cf6:	f002 fa7b 	bl	80031f0 <putchar>
 8000cfa:	e00a      	b.n	8000d12 <drawBox+0xc2>
>>>>>>> Stashed changes
			 }
			 else if(y==y2){
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d103      	bne.n	8000cd4 <drawBox+0xbc>
				printf("%c", 188);
<<<<<<< Updated upstream
 8000ccc:	20bc      	movs	r0, #188	; 0xbc
 8000cce:	f001 fc55 	bl	800257c <putchar>
 8000cd2:	e002      	b.n	8000cda <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000cd4:	20ba      	movs	r0, #186	; 0xba
 8000cd6:	f001 fc51 	bl	800257c <putchar>
=======
 8000d04:	20bc      	movs	r0, #188	; 0xbc
 8000d06:	f002 fa73 	bl	80031f0 <putchar>
 8000d0a:	e002      	b.n	8000d12 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000d0c:	20ba      	movs	r0, #186	; 0xba
 8000d0e:	f002 fa6f 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
   		 for(int y = y1; y <= y2; y++){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	69fa      	ldr	r2, [r7, #28]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dde1      	ble.n	8000cac <drawBox+0x94>
=======
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d15e      	bne.n	8001b9e <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e019      	b.n	8001b1a <drawBox+0x4e>
			 gotoxy(x1,y);
 8001ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ffdd 	bl	8001aa8 <gotoxy>
			 if (y==y1){
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d103      	bne.n	8001afe <drawBox+0x32>
				printf("%c", 201);
 8001af6:	20c9      	movs	r0, #201	; 0xc9
 8001af8:	f002 fd98 	bl	800462c <putchar>
 8001afc:	e00a      	b.n	8001b14 <drawBox+0x48>
			 }
			 else if(y==y2){
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d103      	bne.n	8001b0e <drawBox+0x42>
				printf("%c", 200);
 8001b06:	20c8      	movs	r0, #200	; 0xc8
 8001b08:	f002 fd90 	bl	800462c <putchar>
 8001b0c:	e002      	b.n	8001b14 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001b0e:	20ba      	movs	r0, #186	; 0xba
 8001b10:	f002 fd8c 	bl	800462c <putchar>
		 for(int y = y1; y <= y2; y++){
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dde1      	ble.n	8001ae6 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	e014      	b.n	8001b52 <drawBox+0x86>
   			 if(x!=x1){
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d00d      	beq.n	8001b4c <drawBox+0x80>
				 gotoxy(x,y1);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6a38      	ldr	r0, [r7, #32]
 8001b34:	f7ff ffb8 	bl	8001aa8 <gotoxy>
				 printf("%c", 205);
 8001b38:	20cd      	movs	r0, #205	; 0xcd
 8001b3a:	f002 fd77 	bl	800462c <putchar>
				 gotoxy(x,y2);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	6a38      	ldr	r0, [r7, #32]
 8001b42:	f7ff ffb1 	bl	8001aa8 <gotoxy>
				 printf("%c", 205);
 8001b46:	20cd      	movs	r0, #205	; 0xcd
 8001b48:	f002 fd70 	bl	800462c <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dde6      	ble.n	8001b28 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e019      	b.n	8001b94 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001b60:	69f9      	ldr	r1, [r7, #28]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa0 	bl	8001aa8 <gotoxy>
   			 if (y==y1){
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d103      	bne.n	8001b78 <drawBox+0xac>
				printf("%c", 187);
 8001b70:	20bb      	movs	r0, #187	; 0xbb
 8001b72:	f002 fd5b 	bl	800462c <putchar>
 8001b76:	e00a      	b.n	8001b8e <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d103      	bne.n	8001b88 <drawBox+0xbc>
				printf("%c", 188);
 8001b80:	20bc      	movs	r0, #188	; 0xbc
 8001b82:	f002 fd53 	bl	800462c <putchar>
 8001b86:	e002      	b.n	8001b8e <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001b88:	20ba      	movs	r0, #186	; 0xba
 8001b8a:	f002 fd4f 	bl	800462c <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dde1      	ble.n	8001b60 <drawBox+0x94>
>>>>>>> Stashed changes
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
<<<<<<< Updated upstream
 8000ce8:	e05d      	b.n	8000da6 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	e019      	b.n	8000d24 <drawBox+0x10c>
			 gotoxy(x1,y);
 8000cf0:	69b9      	ldr	r1, [r7, #24]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff ff7e 	bl	8000bf4 <gotoxy>
			 if (y==y1){
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d103      	bne.n	8000d08 <drawBox+0xf0>
				printf("%c", 218);
<<<<<<< Updated upstream
 8000d00:	20da      	movs	r0, #218	; 0xda
 8000d02:	f001 fc3b 	bl	800257c <putchar>
 8000d06:	e00a      	b.n	8000d1e <drawBox+0x106>
=======
 8000d38:	20da      	movs	r0, #218	; 0xda
 8000d3a:	f002 fa59 	bl	80031f0 <putchar>
 8000d3e:	e00a      	b.n	8000d56 <drawBox+0x106>
>>>>>>> Stashed changes
			 else if(y==y2){
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d103      	bne.n	8000d18 <drawBox+0x100>
				printf("%c", 192);
<<<<<<< Updated upstream
 8000d10:	20c0      	movs	r0, #192	; 0xc0
 8000d12:	f001 fc33 	bl	800257c <putchar>
 8000d16:	e002      	b.n	8000d1e <drawBox+0x106>
				printf("%c", 179);
 8000d18:	20b3      	movs	r0, #179	; 0xb3
 8000d1a:	f001 fc2f 	bl	800257c <putchar>
=======
 8000d48:	20c0      	movs	r0, #192	; 0xc0
 8000d4a:	f002 fa51 	bl	80031f0 <putchar>
 8000d4e:	e002      	b.n	8000d56 <drawBox+0x106>
				printf("%c", 179);
 8000d50:	20b3      	movs	r0, #179	; 0xb3
 8000d52:	f002 fa4d 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
		for(int y = y1; y <= y2; y++){
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3301      	adds	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dde1      	ble.n	8000cf0 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e014      	b.n	8000d5c <drawBox+0x144>
			if(x!=x1){
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d00d      	beq.n	8000d56 <drawBox+0x13e>
				 gotoxy(x,y1);
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ff59 	bl	8000bf4 <gotoxy>
				 printf("%c", 196);
<<<<<<< Updated upstream
 8000d42:	20c4      	movs	r0, #196	; 0xc4
 8000d44:	f001 fc1a 	bl	800257c <putchar>
=======
 8000d7a:	20c4      	movs	r0, #196	; 0xc4
 8000d7c:	f002 fa38 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
				 gotoxy(x,y2);
 8000d48:	6839      	ldr	r1, [r7, #0]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff52 	bl	8000bf4 <gotoxy>
				 printf("%c", 196);
<<<<<<< Updated upstream
 8000d50:	20c4      	movs	r0, #196	; 0xc4
 8000d52:	f001 fc13 	bl	800257c <putchar>
=======
 8000d88:	20c4      	movs	r0, #196	; 0xc4
 8000d8a:	f002 fa31 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
		for(int x = x1; x <= x2; x++){
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dde6      	ble.n	8000d32 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	e019      	b.n	8000d9e <drawBox+0x186>
			 gotoxy(x2,y);
 8000d6a:	6939      	ldr	r1, [r7, #16]
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff41 	bl	8000bf4 <gotoxy>
			if (y==y1){
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d103      	bne.n	8000d82 <drawBox+0x16a>
				printf("%c", 191);
<<<<<<< Updated upstream
 8000d7a:	20bf      	movs	r0, #191	; 0xbf
 8000d7c:	f001 fbfe 	bl	800257c <putchar>
 8000d80:	e00a      	b.n	8000d98 <drawBox+0x180>
=======
 8000db2:	20bf      	movs	r0, #191	; 0xbf
 8000db4:	f002 fa1c 	bl	80031f0 <putchar>
 8000db8:	e00a      	b.n	8000dd0 <drawBox+0x180>
>>>>>>> Stashed changes
			 else if(y==y2){
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d103      	bne.n	8000d92 <drawBox+0x17a>
				printf("%c", 217);
<<<<<<< Updated upstream
 8000d8a:	20d9      	movs	r0, #217	; 0xd9
 8000d8c:	f001 fbf6 	bl	800257c <putchar>
 8000d90:	e002      	b.n	8000d98 <drawBox+0x180>
				printf("%c", 179);
 8000d92:	20b3      	movs	r0, #179	; 0xb3
 8000d94:	f001 fbf2 	bl	800257c <putchar>
=======
 8000dc2:	20d9      	movs	r0, #217	; 0xd9
 8000dc4:	f002 fa14 	bl	80031f0 <putchar>
 8000dc8:	e002      	b.n	8000dd0 <drawBox+0x180>
				printf("%c", 179);
 8000dca:	20b3      	movs	r0, #179	; 0xb3
 8000dcc:	f002 fa10 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
		for(int y = y1; y <= y2; y++){
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dde1      	ble.n	8000d6a <drawBox+0x152>
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <updateBullets>:
=======
 8001b9c:	e05d      	b.n	8001c5a <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e019      	b.n	8001bd8 <drawBox+0x10c>
			 gotoxy(x1,y);
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff ff7e 	bl	8001aa8 <gotoxy>
			 if (y==y1){
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d103      	bne.n	8001bbc <drawBox+0xf0>
				printf("%c", 218);
 8001bb4:	20da      	movs	r0, #218	; 0xda
 8001bb6:	f002 fd39 	bl	800462c <putchar>
 8001bba:	e00a      	b.n	8001bd2 <drawBox+0x106>
			 else if(y==y2){
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d103      	bne.n	8001bcc <drawBox+0x100>
				printf("%c", 192);
 8001bc4:	20c0      	movs	r0, #192	; 0xc0
 8001bc6:	f002 fd31 	bl	800462c <putchar>
 8001bca:	e002      	b.n	8001bd2 <drawBox+0x106>
				printf("%c", 179);
 8001bcc:	20b3      	movs	r0, #179	; 0xb3
 8001bce:	f002 fd2d 	bl	800462c <putchar>
		for(int y = y1; y <= y2; y++){
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dde1      	ble.n	8001ba4 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e014      	b.n	8001c10 <drawBox+0x144>
			if(x!=x1){
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00d      	beq.n	8001c0a <drawBox+0x13e>
				 gotoxy(x,y1);
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ff59 	bl	8001aa8 <gotoxy>
				 printf("%c", 196);
 8001bf6:	20c4      	movs	r0, #196	; 0xc4
 8001bf8:	f002 fd18 	bl	800462c <putchar>
				 gotoxy(x,y2);
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff52 	bl	8001aa8 <gotoxy>
				 printf("%c", 196);
 8001c04:	20c4      	movs	r0, #196	; 0xc4
 8001c06:	f002 fd11 	bl	800462c <putchar>
		for(int x = x1; x <= x2; x++){
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dde6      	ble.n	8001be6 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e019      	b.n	8001c52 <drawBox+0x186>
			 gotoxy(x2,y);
 8001c1e:	6939      	ldr	r1, [r7, #16]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff41 	bl	8001aa8 <gotoxy>
			if (y==y1){
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d103      	bne.n	8001c36 <drawBox+0x16a>
				printf("%c", 191);
 8001c2e:	20bf      	movs	r0, #191	; 0xbf
 8001c30:	f002 fcfc 	bl	800462c <putchar>
 8001c34:	e00a      	b.n	8001c4c <drawBox+0x180>
			 else if(y==y2){
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d103      	bne.n	8001c46 <drawBox+0x17a>
				printf("%c", 217);
 8001c3e:	20d9      	movs	r0, #217	; 0xd9
 8001c40:	f002 fcf4 	bl	800462c <putchar>
 8001c44:	e002      	b.n	8001c4c <drawBox+0x180>
				printf("%c", 179);
 8001c46:	20b3      	movs	r0, #179	; 0xb3
 8001c48:	f002 fcf0 	bl	800462c <putchar>
		for(int y = y1; y <= y2; y++){
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dde1      	ble.n	8001c1e <drawBox+0x152>
}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <updateBullets>:
>>>>>>> Stashed changes
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
<<<<<<< Updated upstream
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletHead;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000dbc:	e012      	b.n	8000de4 <updateBullets+0x36>
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	891b      	ldrh	r3, [r3, #8]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	809a      	strh	r2, [r3, #4]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	885a      	ldrh	r2, [r3, #2]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	80da      	strh	r2, [r3, #6]
		current = current->nextBulletAddress;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1e9      	bne.n	8000dbe <updateBullets+0x10>
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <drawBullets>:

void detectBulletHit(gameState_t* gameState){}
=======
 8001c62:	b590      	push	{r4, r7, lr}
 8001c64:	b089      	sub	sp, #36	; 0x24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001c70:	e06b      	b.n	8001d4a <updateBullets+0xe8>
		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7a1b      	ldrb	r3, [r3, #8]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fe03 	bl	8002884 <intToFp>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7a5b      	ldrb	r3, [r3, #9]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fdf8 	bl	8002884 <intToFp>
 8001c94:	4602      	mov	r2, r0
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
		uint32_t vLength = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fe90 	bl	80029c6 <fpAbs>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fe8b 	bl	80029c6 <fpAbs>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4423      	add	r3, r4
 8001cb4:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fe19 	bl	80028f0 <fpMultiply>
 8001cbe:	61b8      	str	r0, [r7, #24]
		v = scaleVector(v, fpDivide(intToFp(1),vLength));
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 fddf 	bl	8002884 <intToFp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fe31 	bl	8002932 <fpDivide>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f107 0010 	add.w	r0, r7, #16
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	ca06      	ldmia	r2, {r1, r2}
 8001cdc:	f000 fe51 	bl	8002982 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7a9b      	ldrb	r3, [r3, #10]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fdcc 	bl	8002884 <intToFp>
 8001cec:	4604      	mov	r4, r0
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	69b8      	ldr	r0, [r7, #24]
 8001cf2:	f000 fdfd 	bl	80028f0 <fpMultiply>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f000 fe19 	bl	8002932 <fpDivide>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f107 0008 	add.w	r0, r7, #8
 8001d06:	f107 0210 	add.w	r2, r7, #16
 8001d0a:	ca06      	ldmia	r2, {r1, r2}
 8001d0c:	f000 fe39 	bl	8002982 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	441a      	add	r2, r3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	441a      	add	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	615a      	str	r2, [r3, #20]


		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	441a      	add	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	441a      	add	r2, r3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d190      	bne.n	8001c72 <updateBullets+0x10>
	}

}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}

08001d5a <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001d5a:	b5b0      	push	{r4, r5, r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001d68:	e0df      	b.n	8001f2a <detectBulletHit+0x1d0>
		//Check if bullet hit a wall or the moon
		vector_t v = {intToFp(gameState->moon.x-fpToInt(current->bullet.position.x)), intToFp(gameState->moon.y-fpToInt(current->bullet.position.y))};
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7a1b      	ldrb	r3, [r3, #8]
 8001d6e:	b29c      	uxth	r4, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd9a 	bl	80028ae <fpToInt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ae3      	subs	r3, r4, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd7e 	bl	8002884 <intToFp>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	b29c      	uxth	r4, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd89 	bl	80028ae <fpToInt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ae3      	subs	r3, r4, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fd6d 	bl	8002884 <intToFp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	60fb      	str	r3, [r7, #12]
		int distToMoon = (int)sqrt(fpToInt(v.x)*fpToInt(v.x)+fpToInt(v.y)*fpToInt(v.y));
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fd7c 	bl	80028ae <fpToInt>
 8001db6:	4604      	mov	r4, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fd77 	bl	80028ae <fpToInt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	fb03 f404 	mul.w	r4, r3, r4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fd70 	bl	80028ae <fpToInt>
 8001dce:	4605      	mov	r5, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fd6b 	bl	80028ae <fpToInt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	fb03 f305 	mul.w	r3, r3, r5
 8001dde:	4423      	add	r3, r4
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb9f 	bl	8000524 <__aeabi_i2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ec43 2b10 	vmov	d0, r2, r3
 8001dee:	f003 fcb5 	bl	800575c <sqrt>
 8001df2:	ec53 2b10 	vmov	r2, r3, d0
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fead 	bl	8000b58 <__aeabi_d2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	617b      	str	r3, [r7, #20]
		//TODO: afstandsberegning herover kan optimeres. Den beregnes allerede i updateBullet();

		int8_t hitInertObject = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	74fb      	strb	r3, [r7, #19]
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=1 ||
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd4f 	bl	80028ae <fpToInt>
 8001e10:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=153 ||
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	dd1a      	ble.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fd47 	bl	80028ae <fpToInt>
 8001e20:	4603      	mov	r3, r0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=1 ||
 8001e22:	2b55      	cmp	r3, #85	; 0x55
 8001e24:	dc12      	bgt.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fd3f 	bl	80028ae <fpToInt>
 8001e30:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	dd0a      	ble.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=153 ||
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fd37 	bl	80028ae <fpToInt>
 8001e40:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001e42:	2b98      	cmp	r3, #152	; 0x98
 8001e44:	dc02      	bgt.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=153 ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	dc01      	bgt.n	8001e50 <detectBulletHit+0xf6>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <detectBulletHit+0xf8>
 8001e50:	2300      	movs	r3, #0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=1 ||
 8001e52:	74fb      	strb	r3, [r7, #19]
				distToMoon<=6;

		if(hitInertObject){ //TODO: add other boundaries
 8001e54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <detectBulletHit+0x10c>
			deleteBulletNode(&(gameState->bulletLL), current);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69f9      	ldr	r1, [r7, #28]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fd0d 	bl	8003880 <deleteBulletNode>
		}

		//Check if the bullet hit an enemy
		int8_t hitEnemy = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	74bb      	strb	r3, [r7, #18]
		enemyNode_t* currentEnemy = gameState->enemyLL;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 8001e70:	e055      	b.n	8001f1e <detectBulletHit+0x1c4>
			hitEnemy = fpToInt(current->bullet.nextPosition.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fd19 	bl	80028ae <fpToInt>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd11 	bl	80028ae <fpToInt>
 8001e8c:	4603      	mov	r3, r0
					fpToInt(current->bullet.nextPosition.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 * yScale &&
					fpToInt(current->bullet.nextPosition.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	db33      	blt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.nextPosition.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 * yScale &&
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fd09 	bl	80028ae <fpToInt>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fd01 	bl	80028ae <fpToInt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	330e      	adds	r3, #14
			hitEnemy = fpToInt(current->bullet.nextPosition.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	dc22      	bgt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.nextPosition.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fcf8 	bl	80028ae <fpToInt>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fcf0 	bl	80028ae <fpToInt>
 8001ece:	4603      	mov	r3, r0
					fpToInt(current->bullet.nextPosition.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 * yScale &&
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	db12      	blt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.nextPosition.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fce8 	bl	80028ae <fpToInt>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fce0 	bl	80028ae <fpToInt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	3302      	adds	r3, #2
					fpToInt(current->bullet.nextPosition.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001ef2:	429c      	cmp	r4, r3
 8001ef4:	dc01      	bgt.n	8001efa <detectBulletHit+0x1a0>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <detectBulletHit+0x1a2>
 8001efa:	2300      	movs	r3, #0
			hitEnemy = fpToInt(current->bullet.nextPosition.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001efc:	74bb      	strb	r3, [r7, #18]
			if(hitEnemy){
 8001efe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <detectBulletHit+0x1be>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fcb8 	bl	8003880 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f001 fc20 	bl	8003758 <deleteEnemyNode>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1a6      	bne.n	8001e72 <detectBulletHit+0x118>
		}



		current = current->nextBulletAddress;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f af1c 	bne.w	8001d6a <detectBulletHit+0x10>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdb0      	pop	{r4, r5, r7, pc}

08001f3c <drawBullets>:

void drawBullets(gameState_t* gameState){
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

void drawBullets(bulletNode_t* head){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = head;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e04:	e032      	b.n	8000e6c <drawBullets+0x74>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y));
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 faa4 	bl	8001358 <fpToInt>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461c      	mov	r4, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	885b      	ldrh	r3, [r3, #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fa9d 	bl	8001358 <fpToInt>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fee6 	bl	8000bf4 <gotoxy>
		printf(" ");
 8000e28:	2020      	movs	r0, #32
 8000e2a:	f001 fba7 	bl	800257c <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fa90 	bl	8001358 <fpToInt>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	88db      	ldrh	r3, [r3, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fa89 	bl	8001358 <fpToInt>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff fed2 	bl	8000bf4 <gotoxy>
		printf("H");
 8000e50:	2048      	movs	r0, #72	; 0x48
 8000e52:	f001 fb93 	bl	800257c <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	889a      	ldrh	r2, [r3, #4]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	801a      	strh	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	88da      	ldrh	r2, [r3, #6]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	805a      	strh	r2, [r3, #2]

		current = current->nextBulletAddress;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1c9      	bne.n	8000e06 <drawBullets+0xe>
	}
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}

08000e7c <NVIC_EnableIRQ>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	fa02 f103 	lsl.w	r1, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <NVIC_EnableIRQ+0x30>)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <NVIC_SetPriority>:
=======
 8000e3a:	e020      	b.n	8000e7e <detectBulletHit+0x52>
		//Detect upper bound
		if(fpToInt(current->bullet.nextPosition.y)<=1){ //TODO: add other boundaries
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fbf6 	bl	8001632 <fpToInt>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	dc04      	bgt.n	8000e56 <detectBulletHit+0x2a>
			deleteBulletNode(&(gameState->bulletLL), current);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 faed 	bl	8002430 <deleteBulletNode>
		}

		//Detect lower bound
		if(fpToInt(current->bullet.nextPosition.y)>=45){ //TODO: add other boundaries
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fbe9 	bl	8001632 <fpToInt>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b2c      	cmp	r3, #44	; 0x2c
 8000e64:	dd04      	ble.n	8000e70 <detectBulletHit+0x44>
			deleteBulletNode(&(gameState->bulletLL), current);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68f9      	ldr	r1, [r7, #12]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fae0 	bl	8002430 <deleteBulletNode>
		}

		//Detect enemy hit
		while(1){
			enemyNode_t* currentEnemy = gameState->enemyLL;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	60bb      	str	r3, [r7, #8]
			break;
 8000e76:	bf00      	nop

		}



		current = current->nextBulletAddress;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1db      	bne.n	8000e3c <detectBulletHit+0x10>

	}
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <drawBullets>:

void drawBullets(gameState_t* gameState){
 8000e8e:	b590      	push	{r4, r7, lr}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e9c:	e030      	b.n	8000f00 <drawBullets+0x72>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fbc5 	bl	8001632 <fpToInt>
 8000ea8:	4604      	mov	r4, r0
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fbbf 	bl	8001632 <fpToInt>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff feb7 	bl	8000c2c <gotoxy>
		printf(" ");
 8000ebe:	2020      	movs	r0, #32
 8000ec0:	f002 f996 	bl	80031f0 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y));
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fbb2 	bl	8001632 <fpToInt>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fbac 	bl	8001632 <fpToInt>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fea4 	bl	8000c2c <gotoxy>
		printf("O");
 8000ee4:	204f      	movs	r0, #79	; 0x4f
 8000ee6:	f002 f983 	bl	80031f0 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1cb      	bne.n	8000e9e <drawBullets+0x10>
	}
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <NVIC_EnableIRQ>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f103 	lsl.w	r1, r2, r3
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <NVIC_EnableIRQ+0x30>)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	095b      	lsrs	r3, r3, #5
 8000f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <NVIC_SetPriority>:
>>>>>>> Stashed changes
=======
 8001f4a:	e036      	b.n	8001fba <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fcac 	bl	80028ae <fpToInt>
 8001f56:	4604      	mov	r4, r0
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fca6 	bl	80028ae <fpToInt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	0fda      	lsrs	r2, r3, #31
 8001f66:	4413      	add	r3, r2
 8001f68:	105b      	asrs	r3, r3, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff fd9b 	bl	8001aa8 <gotoxy>
		printf(" ");
 8001f72:	2020      	movs	r0, #32
 8001f74:	f002 fb5a 	bl	800462c <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fc96 	bl	80028ae <fpToInt>
 8001f82:	4604      	mov	r4, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fc90 	bl	80028ae <fpToInt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	0fda      	lsrs	r2, r3, #31
 8001f92:	4413      	add	r3, r2
 8001f94:	105b      	asrs	r3, r3, #1
 8001f96:	4619      	mov	r1, r3
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fd85 	bl	8001aa8 <gotoxy>
		printf("O");
 8001f9e:	204f      	movs	r0, #79	; 0x4f
 8001fa0:	f002 fb44 	bl	800462c <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1c5      	bne.n	8001f4c <drawBullets+0x10>
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
	...

08001fcc <NVIC_EnableIRQ>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	2201      	movs	r2, #1
 8001fde:	fa02 f103 	lsl.w	r1, r2, r3
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <NVIC_EnableIRQ+0x30>)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <NVIC_SetPriority>:
>>>>>>> Stashed changes

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da0b      	bge.n	8000edc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <NVIC_SetPriority+0x4c>)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	3b04      	subs	r3, #4
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000eda:	e009      	b.n	8000ef0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <NVIC_SetPriority+0x50>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <initJoystick>:
=======
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0b      	bge.n	8000f70 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <NVIC_SetPriority+0x4c>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	3b04      	subs	r3, #4
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000f6e:	e009      	b.n	8000f84 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <NVIC_SetPriority+0x50>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <initJoystick>:
>>>>>>> Stashed changes
=======
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da0b      	bge.n	800202c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <NVIC_SetPriority+0x4c>)
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	3b04      	subs	r3, #4
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800202a:	e009      	b.n	8002040 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4907      	ldr	r1, [pc, #28]	; (8002050 <NVIC_SetPriority+0x50>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	e000e100 	.word	0xe000e100

08002054 <initJoystick>:
>>>>>>> Stashed changes
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000f08:	4b46      	ldr	r3, [pc, #280]	; (8001024 <initJoystick+0x120>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a45      	ldr	r2, [pc, #276]	; (8001024 <initJoystick+0x120>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <initJoystick+0x120>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4a42      	ldr	r2, [pc, #264]	; (8001024 <initJoystick+0x120>)
 8000f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <initJoystick+0x120>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	4a3f      	ldr	r2, [pc, #252]	; (8001024 <initJoystick+0x120>)
 8000f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f2a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <initJoystick+0x124>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <initJoystick+0x124>)
 8000f32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f36:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <initJoystick+0x124>)
 8000f3a:	4a3b      	ldr	r2, [pc, #236]	; (8001028 <initJoystick+0x124>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <initJoystick+0x124>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	4a38      	ldr	r2, [pc, #224]	; (8001028 <initJoystick+0x124>)
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <initJoystick+0x124>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a35      	ldr	r2, [pc, #212]	; (8001028 <initJoystick+0x124>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	60d3      	str	r3, [r2, #12]
=======
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000f9c:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <initJoystick+0x120>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <initJoystick+0x120>)
 8000fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa6:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <initJoystick+0x120>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <initJoystick+0x120>)
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb2:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000fb4:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <initJoystick+0x120>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <initJoystick+0x120>)
 8000fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fbe:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <initJoystick+0x124>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <initJoystick+0x124>)
 8000fc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fca:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <initJoystick+0x124>)
 8000fce:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <initJoystick+0x124>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <initJoystick+0x124>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a38      	ldr	r2, [pc, #224]	; (80010bc <initJoystick+0x124>)
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <initJoystick+0x124>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a35      	ldr	r2, [pc, #212]	; (80010bc <initJoystick+0x124>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
=======
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <initJoystick+0x120>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <initJoystick+0x120>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002062:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <initJoystick+0x120>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	4a42      	ldr	r2, [pc, #264]	; (8002174 <initJoystick+0x120>)
 800206a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <initJoystick+0x120>)
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <initJoystick+0x120>)
 8002076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800207a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <initJoystick+0x124>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <initJoystick+0x124>)
 8002082:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002086:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <initJoystick+0x124>)
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <initJoystick+0x124>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <initJoystick+0x124>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a38      	ldr	r2, [pc, #224]	; (8002178 <initJoystick+0x124>)
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <initJoystick+0x124>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <initJoystick+0x124>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000f58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f66:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000f68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <initJoystick+0x124>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <initJoystick+0x124>)
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <initJoystick+0x124>)
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <initJoystick+0x124>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <initJoystick+0x124>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <initJoystick+0x124>)
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <initJoystick+0x124>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <initJoystick+0x124>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <initJoystick+0x128>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <initJoystick+0x128>)
 8000fc6:	f023 030c 	bic.w	r3, r3, #12
 8000fca:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <initJoystick+0x128>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <initJoystick+0x128>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <initJoystick+0x128>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <initJoystick+0x128>)
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <initJoystick+0x128>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <initJoystick+0x128>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <initJoystick+0x128>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <initJoystick+0x128>)
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <initJoystick+0x128>)
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <initJoystick+0x128>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <initJoystick+0x128>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a09      	ldr	r2, [pc, #36]	; (800102c <initJoystick+0x128>)
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <initJoystick+0x128>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <initJoystick+0x128>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	60d3      	str	r3, [r2, #12]

}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800

08001030 <centerIsPressed>:
=======
 8000fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ffa:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001000:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <initJoystick+0x124>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <initJoystick+0x124>)
 800102e:	f023 0303 	bic.w	r3, r3, #3
 8001032:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <initJoystick+0x124>)
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <initJoystick+0x124>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <initJoystick+0x124>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <initJoystick+0x124>)
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <initJoystick+0x124>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <initJoystick+0x124>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <initJoystick+0x128>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <initJoystick+0x128>)
 800105a:	f023 030c 	bic.w	r3, r3, #12
 800105e:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <initJoystick+0x128>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <initJoystick+0x128>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <initJoystick+0x128>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <initJoystick+0x128>)
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <initJoystick+0x128>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <initJoystick+0x128>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <initJoystick+0x128>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <initJoystick+0x128>)
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <initJoystick+0x128>)
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <initJoystick+0x128>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <initJoystick+0x128>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <initJoystick+0x128>)
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <initJoystick+0x128>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <initJoystick+0x128>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	60d3      	str	r3, [r2, #12]

}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800

080010c4 <centerIsPressed>:
>>>>>>> Stashed changes
=======
 80020a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80020b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80020c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80020d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <initJoystick+0x124>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <initJoystick+0x124>)
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <initJoystick+0x124>)
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <initJoystick+0x124>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <initJoystick+0x124>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <initJoystick+0x124>)
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <initJoystick+0x124>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <initJoystick+0x124>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <initJoystick+0x128>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <initJoystick+0x128>)
 8002116:	f023 030c 	bic.w	r3, r3, #12
 800211a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <initJoystick+0x128>)
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <initJoystick+0x128>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <initJoystick+0x128>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <initJoystick+0x128>)
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <initJoystick+0x128>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <initJoystick+0x128>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <initJoystick+0x128>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <initJoystick+0x128>)
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <initJoystick+0x128>)
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <initJoystick+0x128>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <initJoystick+0x128>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <initJoystick+0x128>)
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <initJoystick+0x128>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <initJoystick+0x128>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	60d3      	str	r3, [r2, #12]

}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	48000400 	.word	0x48000400
 800217c:	48000800 	.word	0x48000800

08002180 <centerIsPressed>:
>>>>>>> Stashed changes



uint8_t centerIsPressed(){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <centerIsPressed+0x50>)
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	b29b      	uxth	r3, r3
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <centerIsPressed+0x2c>
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <centerIsPressed+0x54>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <centerIsPressed+0x58>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b1e      	cmp	r3, #30
 800104e:	d905      	bls.n	800105c <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <centerIsPressed+0x54>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <centerIsPressed+0x58>)
 8001056:	6013      	str	r3, [r2, #0]
		 return 1;
 8001058:	2301      	movs	r3, #1
 800105a:	e00c      	b.n	8001076 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <centerIsPressed+0x50>)
 800105e:	8a1b      	ldrh	r3, [r3, #16]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <centerIsPressed+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b1e      	subs	r3, #30
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <centerIsPressed+0x58>)
 8001072:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001074:	2300      	movs	r3, #0
	 }
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	48000400 	.word	0x48000400
 8001084:	200001c8 	.word	0x200001c8
 8001088:	200001b0 	.word	0x200001b0

0800108c <upIsPressed>:

uint8_t upIsPressed(){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001090:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001094:	8a1b      	ldrh	r3, [r3, #16]
 8001096:	b29b      	uxth	r3, r3
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <upIsPressed+0x2e>
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <upIsPressed+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <upIsPressed+0x58>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b1e      	cmp	r3, #30
 80010ac:	d905      	bls.n	80010ba <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <upIsPressed+0x54>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <upIsPressed+0x58>)
 80010b4:	6013      	str	r3, [r2, #0]
			 return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00d      	b.n	80010d6 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 80010ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010be:	8a1b      	ldrh	r3, [r3, #16]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d104      	bne.n	80010d4 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <upIsPressed+0x54>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <upIsPressed+0x58>)
 80010d2:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80010d4:	2300      	movs	r3, #0
		 }
	 }
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200001c8 	.word	0x200001c8
 80010e4:	200001b4 	.word	0x200001b4

080010e8 <downIsPressed>:

uint8_t downIsPressed(){
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <downIsPressed+0x50>)
 80010ee:	8a1b      	ldrh	r3, [r3, #16]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00c      	beq.n	8001114 <downIsPressed+0x2c>
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <downIsPressed+0x54>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <downIsPressed+0x58>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b1e      	cmp	r3, #30
 8001106:	d905      	bls.n	8001114 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <downIsPressed+0x54>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <downIsPressed+0x58>)
 800110e:	6013      	str	r3, [r2, #0]
			 return 1;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <downIsPressed+0x50>)
 8001116:	8a1b      	ldrh	r3, [r3, #16]
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <downIsPressed+0x54>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3b1e      	subs	r3, #30
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <downIsPressed+0x58>)
 800112a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 800112c:	2300      	movs	r3, #0
		 }
	 }
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	48000400 	.word	0x48000400
 800113c:	200001c8 	.word	0x200001c8
 8001140:	200001b8 	.word	0x200001b8

08001144 <initTimer>:
=======
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <centerIsPressed+0x50>)
 80010ca:	8a1b      	ldrh	r3, [r3, #16]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00c      	beq.n	80010f0 <centerIsPressed+0x2c>
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <centerIsPressed+0x54>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <centerIsPressed+0x58>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b1e      	cmp	r3, #30
 80010e2:	d905      	bls.n	80010f0 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <centerIsPressed+0x54>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <centerIsPressed+0x58>)
 80010ea:	6013      	str	r3, [r2, #0]
		 return 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00c      	b.n	800110a <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <centerIsPressed+0x50>)
 80010f2:	8a1b      	ldrh	r3, [r3, #16]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d104      	bne.n	8001108 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <centerIsPressed+0x54>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3b1e      	subs	r3, #30
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <centerIsPressed+0x58>)
 8001106:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001108:	2300      	movs	r3, #0
	 }
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	48000400 	.word	0x48000400
 8001118:	200001c8 	.word	0x200001c8
 800111c:	200001b0 	.word	0x200001b0

08001120 <upIsPressed>:

uint8_t upIsPressed(){
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001128:	8a1b      	ldrh	r3, [r3, #16]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <upIsPressed+0x2e>
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <upIsPressed+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <upIsPressed+0x58>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b1e      	cmp	r3, #30
 8001140:	d905      	bls.n	800114e <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <upIsPressed+0x54>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <upIsPressed+0x58>)
 8001148:	6013      	str	r3, [r2, #0]
			 return 1;
 800114a:	2301      	movs	r3, #1
 800114c:	e00d      	b.n	800116a <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800114e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001152:	8a1b      	ldrh	r3, [r3, #16]
 8001154:	b29b      	uxth	r3, r3
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <upIsPressed+0x54>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3b1e      	subs	r3, #30
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <upIsPressed+0x58>)
 8001166:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001168:	2300      	movs	r3, #0
		 }
	 }
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	200001c8 	.word	0x200001c8
 8001178:	200001b4 	.word	0x200001b4

0800117c <downIsPressed>:

uint8_t downIsPressed(){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <downIsPressed+0x50>)
 8001182:	8a1b      	ldrh	r3, [r3, #16]
 8001184:	b29b      	uxth	r3, r3
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00c      	beq.n	80011a8 <downIsPressed+0x2c>
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <downIsPressed+0x54>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <downIsPressed+0x58>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b1e      	cmp	r3, #30
 800119a:	d905      	bls.n	80011a8 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <downIsPressed+0x54>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <downIsPressed+0x58>)
 80011a2:	6013      	str	r3, [r2, #0]
			 return 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e00c      	b.n	80011c2 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <downIsPressed+0x50>)
 80011aa:	8a1b      	ldrh	r3, [r3, #16]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <downIsPressed+0x54>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b1e      	subs	r3, #30
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <downIsPressed+0x58>)
 80011be:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80011c0:	2300      	movs	r3, #0
		 }
	 }
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	48000400 	.word	0x48000400
 80011d0:	200001c8 	.word	0x200001c8
 80011d4:	200001b8 	.word	0x200001b8

080011d8 <initTimer>:
>>>>>>> Stashed changes
=======
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <centerIsPressed+0x50>)
 8002186:	8a1b      	ldrh	r3, [r3, #16]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <centerIsPressed+0x2c>
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <centerIsPressed+0x54>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <centerIsPressed+0x58>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b1e      	cmp	r3, #30
 800219e:	d905      	bls.n	80021ac <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <centerIsPressed+0x54>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <centerIsPressed+0x58>)
 80021a6:	6013      	str	r3, [r2, #0]
		 return 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e00c      	b.n	80021c6 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <centerIsPressed+0x50>)
 80021ae:	8a1b      	ldrh	r3, [r3, #16]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <centerIsPressed+0x54>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3b1e      	subs	r3, #30
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <centerIsPressed+0x58>)
 80021c2:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80021c4:	2300      	movs	r3, #0
	 }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	48000400 	.word	0x48000400
 80021d4:	200001cc 	.word	0x200001cc
 80021d8:	200001b4 	.word	0x200001b4

080021dc <upIsPressed>:

uint8_t upIsPressed(){
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 80021e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021e4:	8a1b      	ldrh	r3, [r3, #16]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <upIsPressed+0x2e>
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <upIsPressed+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <upIsPressed+0x58>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b1e      	cmp	r3, #30
 80021fc:	d905      	bls.n	800220a <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <upIsPressed+0x54>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <upIsPressed+0x58>)
 8002204:	6013      	str	r3, [r2, #0]
			 return 1;
 8002206:	2301      	movs	r3, #1
 8002208:	e00d      	b.n	8002226 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800220a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800220e:	8a1b      	ldrh	r3, [r3, #16]
 8002210:	b29b      	uxth	r3, r3
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <upIsPressed+0x54>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b1e      	subs	r3, #30
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <upIsPressed+0x58>)
 8002222:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8002224:	2300      	movs	r3, #0
		 }
	 }
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200001cc 	.word	0x200001cc
 8002234:	200001b8 	.word	0x200001b8

08002238 <downIsPressed>:

uint8_t downIsPressed(){
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <downIsPressed+0x50>)
 800223e:	8a1b      	ldrh	r3, [r3, #16]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <downIsPressed+0x2c>
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <downIsPressed+0x54>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <downIsPressed+0x58>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b1e      	cmp	r3, #30
 8002256:	d905      	bls.n	8002264 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <downIsPressed+0x54>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <downIsPressed+0x58>)
 800225e:	6013      	str	r3, [r2, #0]
			 return 1;
 8002260:	2301      	movs	r3, #1
 8002262:	e00c      	b.n	800227e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <downIsPressed+0x50>)
 8002266:	8a1b      	ldrh	r3, [r3, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d104      	bne.n	800227c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <downIsPressed+0x54>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3b1e      	subs	r3, #30
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <downIsPressed+0x58>)
 800227a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 800227c:	2300      	movs	r3, #0
		 }
	 }
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	48000400 	.word	0x48000400
 800228c:	200001cc 	.word	0x200001cc
 8002290:	200001bc 	.word	0x200001bc

08002294 <initTimer>:
>>>>>>> Stashed changes
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <initTimer+0x60>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <initTimer+0x60>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <initTimer+0x64>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <initTimer+0x64>)
 800115c:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	b29b      	uxth	r3, r3
 8001166:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <initTimer+0x64>)
 800116a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <initTimer+0x64>)
 8001172:	2209      	movs	r2, #9
 8001174:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <initTimer+0x64>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <initTimer+0x64>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b29b      	uxth	r3, r3
 8001184:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <initTimer+0x64>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <initTimer+0x64>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001192:	2100      	movs	r1, #0
 8001194:	2018      	movs	r0, #24
 8001196:	f7ff fe8b 	bl	8000eb0 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800119a:	2018      	movs	r0, #24
 800119c:	f7ff fe6e 	bl	8000e7c <NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40014000 	.word	0x40014000

080011ac <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	runtime++;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80011b8:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6113      	str	r3, [r2, #16]
 }
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200001c8 	.word	0x200001c8
 80011d4:	40014000 	.word	0x40014000

080011d8 <spawnEnemy>:
=======
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <initTimer+0x60>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <initTimer+0x60>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <initTimer+0x64>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <initTimer+0x64>)
 80011f0:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <initTimer+0x64>)
 80011fe:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <initTimer+0x64>)
 8001206:	2209      	movs	r2, #9
 8001208:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <initTimer+0x64>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <initTimer+0x64>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <initTimer+0x64>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <initTimer+0x64>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001226:	2100      	movs	r1, #0
 8001228:	2018      	movs	r0, #24
 800122a:	f7ff fe8b 	bl	8000f44 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800122e:	2018      	movs	r0, #24
 8001230:	f7ff fe6e 	bl	8000f10 <NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40014000 	.word	0x40014000

08001240 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	runtime++;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800124c:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6113      	str	r3, [r2, #16]
 }
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200001c8 	.word	0x200001c8
 8001268:	40014000 	.word	0x40014000

0800126c <I2C_init>:
=======
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <initTimer+0x60>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <initTimer+0x60>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <initTimer+0x64>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <initTimer+0x64>)
 80022ac:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <initTimer+0x64>)
 80022ba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <initTimer+0x64>)
 80022c2:	2209      	movs	r2, #9
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <initTimer+0x64>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <initTimer+0x64>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <initTimer+0x64>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <initTimer+0x64>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80022e2:	2100      	movs	r1, #0
 80022e4:	2018      	movs	r0, #24
 80022e6:	f7ff fe8b 	bl	8002000 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80022ea:	2018      	movs	r0, #24
 80022ec:	f7ff fe6e 	bl	8001fcc <NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40014000 	.word	0x40014000

080022fc <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	runtime++;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002308:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6113      	str	r3, [r2, #16]
 }
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	200001cc 	.word	0x200001cc
 8002324:	40014000 	.word	0x40014000

08002328 <I2C_init>:
>>>>>>> Stashed changes

    return val;
}

void I2C_init()
{
<<<<<<< Updated upstream
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
=======
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
<<<<<<< Updated upstream
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <I2C_init+0x144>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <I2C_init+0x144>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127a:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <I2C_init+0x148>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <I2C_init+0x148>)
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <I2C_init+0x148>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	4a49      	ldr	r2, [pc, #292]	; (80013b4 <I2C_init+0x148>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <I2C_init+0x148>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <I2C_init+0x148>)
 800129a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800129e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <I2C_init+0x148>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <I2C_init+0x148>)
 80012a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012aa:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <I2C_init+0x148>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <I2C_init+0x148>)
 80012b2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80012b6:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <I2C_init+0x148>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <I2C_init+0x148>)
 80012be:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80012c2:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <I2C_init+0x148>)
 80012c6:	889b      	ldrh	r3, [r3, #4]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <I2C_init+0x148>)
 80012cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <I2C_init+0x148>)
 80012d6:	889b      	ldrh	r3, [r3, #4]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <I2C_init+0x148>)
 80012dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <I2C_init+0x148>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <I2C_init+0x148>)
 80012ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80012ee:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <I2C_init+0x148>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <I2C_init+0x148>)
 80012f6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80012fa:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <I2C_init+0x148>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <I2C_init+0x148>)
 8001302:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001306:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <I2C_init+0x148>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <I2C_init+0x148>)
 800130e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001312:	60d3      	str	r3, [r2, #12]
=======
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <I2C_init+0x144>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <I2C_init+0x144>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002336:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <I2C_init+0x148>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	4a4c      	ldr	r2, [pc, #304]	; (8002470 <I2C_init+0x148>)
 800233e:	f023 030f 	bic.w	r3, r3, #15
 8002342:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002344:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <I2C_init+0x148>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	4a49      	ldr	r2, [pc, #292]	; (8002470 <I2C_init+0x148>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <I2C_init+0x148>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	4a46      	ldr	r2, [pc, #280]	; (8002470 <I2C_init+0x148>)
 8002356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 800235c:	4b44      	ldr	r3, [pc, #272]	; (8002470 <I2C_init+0x148>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	4a43      	ldr	r2, [pc, #268]	; (8002470 <I2C_init+0x148>)
 8002362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002366:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <I2C_init+0x148>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a40      	ldr	r2, [pc, #256]	; (8002470 <I2C_init+0x148>)
 800236e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002372:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002374:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <I2C_init+0x148>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a3d      	ldr	r2, [pc, #244]	; (8002470 <I2C_init+0x148>)
 800237a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800237e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <I2C_init+0x148>)
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4a3a      	ldr	r2, [pc, #232]	; (8002470 <I2C_init+0x148>)
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	b29b      	uxth	r3, r3
 800238e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002390:	4b37      	ldr	r3, [pc, #220]	; (8002470 <I2C_init+0x148>)
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <I2C_init+0x148>)
 8002398:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800239c:	b29b      	uxth	r3, r3
 800239e:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <I2C_init+0x148>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <I2C_init+0x148>)
 80023a6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80023aa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <I2C_init+0x148>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <I2C_init+0x148>)
 80023b2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80023b6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <I2C_init+0x148>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <I2C_init+0x148>)
 80023be:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80023c2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <I2C_init+0x148>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <I2C_init+0x148>)
 80023ca:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80023ce:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
<<<<<<< Updated upstream
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <I2C_init+0x144>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <I2C_init+0x144>)
 800131a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131e:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <I2C_init+0x14c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <I2C_init+0x14c>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <I2C_init+0x14c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4921      	ldr	r1, [pc, #132]	; (80013b8 <I2C_init+0x14c>)
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <I2C_init+0x150>)
 8001334:	4013      	ands	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <I2C_init+0x14c>)
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <I2C_init+0x14c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <I2C_init+0x14c>)
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <I2C_init+0x14c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <I2C_init+0x14c>)
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <I2C_init+0x154>)
 800134c:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <I2C_init+0x14c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <I2C_init+0x14c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <I2C_init+0x14c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <I2C_init+0x14c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <I2C_init+0x14c>)
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <I2C_init+0x14c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <I2C_init+0x14c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <I2C_init+0x14c>)
 8001374:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001378:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <I2C_init+0x14c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <I2C_init+0x14c>)
 8001380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001384:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <I2C_init+0x14c>)
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <I2C_init+0x14c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <I2C_init+0x14c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <I2C_init+0x14c>)
 8001394:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800139c:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <I2C_init+0x14c>)
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <I2C_init+0x14c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	6053      	str	r3, [r2, #4]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400
 80013b8:	40005400 	.word	0x40005400
 80013bc:	00cfe0ff 	.word	0x00cfe0ff
 80013c0:	10805e89 	.word	0x10805e89

080013c4 <spawnEnemy>:
>>>>>>> Stashed changes
=======
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <I2C_init+0x144>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <I2C_init+0x144>)
 80023d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023da:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <I2C_init+0x14c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <I2C_init+0x14c>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <I2C_init+0x14c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4921      	ldr	r1, [pc, #132]	; (8002474 <I2C_init+0x14c>)
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <I2C_init+0x150>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <I2C_init+0x14c>)
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <I2C_init+0x14c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <I2C_init+0x14c>)
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <I2C_init+0x14c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <I2C_init+0x14c>)
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <I2C_init+0x154>)
 8002408:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <I2C_init+0x14c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <I2C_init+0x14c>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <I2C_init+0x14c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <I2C_init+0x14c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <I2C_init+0x14c>)
 8002424:	4a13      	ldr	r2, [pc, #76]	; (8002474 <I2C_init+0x14c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <I2C_init+0x14c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <I2C_init+0x14c>)
 8002430:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002434:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <I2C_init+0x14c>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <I2C_init+0x14c>)
 800243c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002440:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <I2C_init+0x14c>)
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <I2C_init+0x14c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <I2C_init+0x14c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <I2C_init+0x14c>)
 8002450:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002458:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <I2C_init+0x14c>)
 800245c:	4a05      	ldr	r2, [pc, #20]	; (8002474 <I2C_init+0x14c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	6053      	str	r3, [r2, #4]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40021000 	.word	0x40021000
 8002470:	48000400 	.word	0x48000400
 8002474:	40005400 	.word	0x40005400
 8002478:	00cfe0ff 	.word	0x00cfe0ff
 800247c:	10805e89 	.word	0x10805e89

08002480 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <analogConfigPorts+0x140>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <analogConfigPorts+0x140>)
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	0052      	lsls	r2, r2, #1
 80024a0:	2103      	movs	r1, #3
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	43d2      	mvns	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ae:	400b      	ands	r3, r1
 80024b0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 80024b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 80024be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	0052      	lsls	r2, r2, #1
 80024c8:	2103      	movs	r1, #3
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	43d2      	mvns	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024d6:	400b      	ands	r3, r1
 80024d8:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 80024da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	0052      	lsls	r2, r2, #1
 80024e4:	2103      	movs	r1, #3
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024f0:	430b      	orrs	r3, r1
 80024f2:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <analogConfigPorts+0x140>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <analogConfigPorts+0x140>)
 80024fa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80024fe:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <analogConfigPorts+0x140>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <analogConfigPorts+0x140>)
 8002506:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 800250a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <analogConfigPorts+0x140>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <analogConfigPorts+0x140>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <analogConfigPorts+0x144>)
 800252c:	4013      	ands	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e002      	b.n	800255c <analogConfigPorts+0xdc>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002562:	dbf8      	blt.n	8002556 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800256e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002572:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002574:	bf00      	nop
 8002576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dafa      	bge.n	8002576 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e002      	b.n	800258c <analogConfigPorts+0x10c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b63      	cmp	r3, #99	; 0x63
 8002590:	ddf9      	ble.n	8002586 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 80025a2:	bf00      	nop
 80025a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f8      	beq.n	80025a4 <analogConfigPorts+0x124>
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	fdffc007 	.word	0xfdffc007

080025c8 <readPotentiometer>:

uint16_t readPotentiometer(){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 80025ce:	2300      	movs	r3, #0
 80025d0:	2201      	movs	r2, #1
 80025d2:	2101      	movs	r1, #1
 80025d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025d8:	f7fe fc62 	bl	8000ea0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 80025dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025e0:	f7fe fd56 	bl	8001090 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 80025e4:	bf00      	nop
 80025e6:	2104      	movs	r1, #4
 80025e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025ec:	f7fe fd6d 	bl	80010ca <ADC_GetFlagStatus>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f7      	beq.n	80025e6 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 80025f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025fa:	f7fe fd59 	bl	80010b0 <ADC_GetConversionValue>
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002602:	88fb      	ldrh	r3, [r7, #6]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <spawnEnemy>:
>>>>>>> Stashed changes
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:49].
 80011e0:	f001 fa10 	bl	8002604 <rand>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <spawnEnemy+0xdc>)
 80011e8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ec:	1151      	asrs	r1, r2, #5
 80011ee:	17da      	asrs	r2, r3, #31
 80011f0:	1a8a      	subs	r2, r1, r2
 80011f2:	2164      	movs	r1, #100	; 0x64
 80011f4:	fb01 f202 	mul.w	r2, r1, r2
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d154      	bne.n	80012ac <spawnEnemy+0xd4>
		int8_t enemyPos = rand() % 156;
 8001202:	f001 f9ff 	bl	8002604 <rand>
 8001206:	4603      	mov	r3, r0
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <spawnEnemy+0xe0>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	441a      	add	r2, r3
 8001210:	11d1      	asrs	r1, r2, #7
 8001212:	17da      	asrs	r2, r3, #31
 8001214:	1a8a      	subs	r2, r1, r2
 8001216:	219c      	movs	r1, #156	; 0x9c
 8001218:	fb01 f202 	mul.w	r2, r1, r2
 800121c:	1a9a      	subs	r2, r3, r2
 800121e:	4613      	mov	r3, r2
 8001220:	76fb      	strb	r3, [r7, #27]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 8001222:	2010      	movs	r0, #16
 8001224:	f001 f8d8 	bl	80023d8 <malloc>
 8001228:	4603      	mov	r3, r0
 800122a:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2202      	movs	r2, #2
 8001230:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 8001232:	2004      	movs	r0, #4
 8001234:	f001 f8d0 	bl	80023d8 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 800123c:	7efb      	ldrb	r3, [r7, #27]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f874 	bl	800132c <intToFp>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	801a      	strh	r2, [r3, #0]
		pos->y = intToFp(2);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 f86d 	bl	800132c <intToFp>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	805a      	strh	r2, [r3, #2]
		enemy->position = pos;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8001260:	2004      	movs	r0, #4
 8001262:	f001 f8b9 	bl	80023d8 <malloc>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f85e 	bl	800132c <intToFp>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	801a      	strh	r2, [r3, #0]
		vEnemy->y = 0x0040;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	805a      	strh	r2, [r3, #2]
		enemy->velocity  = vEnemy;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8001284:	2004      	movs	r0, #4
 8001286:	f001 f8a7 	bl	80023d8 <malloc>
 800128a:	4603      	mov	r3, r0
 800128c:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	801a      	strh	r2, [r3, #0]
		newPos->y = pos->y;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	885a      	ldrh	r2, [r3, #2]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	805a      	strh	r2, [r3, #2]
		enemy->nextPosition = newPos;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	605a      	str	r2, [r3, #4]
=======
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 50;      // Returns a pseudo-random integer [0:32].
 80013cc:	f001 ff54 	bl	8003278 <rand>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <spawnEnemy+0xcc>)
 80013d4:	fb82 1203 	smull	r1, r2, r2, r3
 80013d8:	1111      	asrs	r1, r2, #4
 80013da:	17da      	asrs	r2, r3, #31
 80013dc:	1a8a      	subs	r2, r1, r2
 80013de:	2132      	movs	r1, #50	; 0x32
 80013e0:	fb01 f202 	mul.w	r2, r1, r2
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d14c      	bne.n	8001488 <spawnEnemy+0xc4>
		//int8_t enemyPos = rand() % 156;
		//TODO: Fix tilfældighedsgenerator
		uint8_t enemyPos = 70;
 80013ee:	2346      	movs	r3, #70	; 0x46
 80013f0:	76fb      	strb	r3, [r7, #27]


		enemy_t* enemy = malloc(sizeof(enemy_t));
 80013f2:	2014      	movs	r0, #20
 80013f4:	f001 fe22 	bl	800303c <malloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2202      	movs	r2, #2
 8001400:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 8001402:	2008      	movs	r0, #8
 8001404:	f001 fe1a 	bl	800303c <malloc>
 8001408:	4603      	mov	r3, r0
 800140a:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 800140c:	7efb      	ldrb	r3, [r7, #27]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f8f9 	bl	8001608 <intToFp>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 800141c:	2002      	movs	r0, #2
 800141e:	f000 f8f3 	bl	8001608 <intToFp>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 800142e:	2008      	movs	r0, #8
 8001430:	f001 fe04 	bl	800303c <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 8001438:	2000      	movs	r0, #0
 800143a:	f000 f8e5 	bl	8001608 <intToFp>
 800143e:	4602      	mov	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8001452:	2008      	movs	r0, #8
 8001454:	f001 fdf2 	bl	800303c <malloc>
 8001458:	4603      	mov	r3, r0
 800145a:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

		enemy->lastShotTime = runtime;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <spawnEnemy+0xd0>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2264      	movs	r2, #100	; 0x64
 800147e:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
<<<<<<< Updated upstream
 80012a4:	6979      	ldr	r1, [r7, #20]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fa54 	bl	8001754 <appendEnemy>
	}
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	d20d20d3 	.word	0xd20d20d3

080012bc <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0){
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01b      	beq.n	800130e <updateEnemy+0x52>
			thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	8819      	ldrh	r1, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	881a      	ldrh	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	440a      	add	r2, r1
 80012ee:	b292      	uxth	r2, r2
 80012f0:	801a      	strh	r2, [r3, #0]
			thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	8859      	ldrh	r1, [r3, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	885a      	ldrh	r2, [r3, #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	440a      	add	r2, r1
 800130a:	b292      	uxth	r2, r2
 800130c:	805a      	strh	r2, [r3, #2]
		}
		if(thisNode->nextEnemyNode == 0){
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <updateEnemy+0x62>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 800131c:	e7d5      	b.n	80012ca <updateEnemy+0xe>
			break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <intToFp>:
=======
 8001480:	6979      	ldr	r1, [r7, #20]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 ff31 	bl	80022ea <appendEnemy>
	}
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	51eb851f 	.word	0x51eb851f
 8001494:	200001c8 	.word	0x200001c8

08001498 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80014a6:	e01c      	b.n	80014e2 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	440a      	add	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	440a      	add	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1df      	bne.n	80014a8 <updateEnemy+0x10>
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b092      	sub	sp, #72	; 0x48
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8001506:	e051      	b.n	80015ac <shootEnemy+0xb4>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8001508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	7b12      	ldrb	r2, [r2, #12]
 8001514:	441a      	add	r2, r3
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <shootEnemy+0xc4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d243      	bcs.n	80015a6 <shootEnemy+0xae>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f872 	bl	8001608 <intToFp>
 8001524:	4603      	mov	r3, r0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001528:	2002      	movs	r0, #2
 800152a:	f000 f86d 	bl	8001608 <intToFp>
 800152e:	4603      	mov	r3, r0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(1)};
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685c      	ldr	r4, [r3, #4]
 8001544:	2001      	movs	r0, #1
 8001546:	f000 f85f 	bl	8001608 <intToFp>
 800154a:	4603      	mov	r3, r0
 800154c:	4423      	add	r3, r4
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 8001580:	687d      	ldr	r5, [r7, #4]
 8001582:	466c      	mov	r4, sp
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800158c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001596:	4628      	mov	r0, r5
 8001598:	f000 fe74 	bl	8002284 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <shootEnemy+0xc4>)
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80015ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1aa      	bne.n	8001508 <shootEnemy+0x10>
=======
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 50;      // Returns a pseudo-random integer [0:32].
 8002614:	f002 f84e 	bl	80046b4 <rand>
 8002618:	4603      	mov	r3, r0
 800261a:	4a37      	ldr	r2, [pc, #220]	; (80026f8 <spawnEnemy+0xec>)
 800261c:	fb82 1203 	smull	r1, r2, r2, r3
 8002620:	1111      	asrs	r1, r2, #4
 8002622:	17da      	asrs	r2, r3, #31
 8002624:	1a8a      	subs	r2, r1, r2
 8002626:	2132      	movs	r1, #50	; 0x32
 8002628:	fb01 f202 	mul.w	r2, r1, r2
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d15b      	bne.n	80026ee <spawnEnemy+0xe2>
		int8_t enemyPos = rand() % 156;
 8002636:	f002 f83d 	bl	80046b4 <rand>
 800263a:	4603      	mov	r3, r0
 800263c:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <spawnEnemy+0xf0>)
 800263e:	fb82 1203 	smull	r1, r2, r2, r3
 8002642:	441a      	add	r2, r3
 8002644:	11d1      	asrs	r1, r2, #7
 8002646:	17da      	asrs	r2, r3, #31
 8002648:	1a8a      	subs	r2, r1, r2
 800264a:	219c      	movs	r1, #156	; 0x9c
 800264c:	fb01 f202 	mul.w	r2, r1, r2
 8002650:	1a9a      	subs	r2, r3, r2
 8002652:	4613      	mov	r3, r2
 8002654:	76fb      	strb	r3, [r7, #27]
		//TODO: Fix tilfældighedsgenerator


		enemy_t* enemy = malloc(sizeof(enemy_t));
 8002656:	2014      	movs	r0, #20
 8002658:	f001 ff0e 	bl	8004478 <malloc>
 800265c:	4603      	mov	r3, r0
 800265e:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2202      	movs	r2, #2
 8002664:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 8002666:	2008      	movs	r0, #8
 8002668:	f001 ff06 	bl	8004478 <malloc>
 800266c:	4603      	mov	r3, r0
 800266e:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 8002670:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f904 	bl	8002884 <intToFp>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 8002682:	2002      	movs	r0, #2
 8002684:	f000 f8fe 	bl	8002884 <intToFp>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8002694:	2008      	movs	r0, #8
 8002696:	f001 feef 	bl	8004478 <malloc>
 800269a:	4603      	mov	r3, r0
 800269c:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f8f0 	bl	8002884 <intToFp>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026b0:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 80026b8:	2008      	movs	r0, #8
 80026ba:	f001 fedd 	bl	8004478 <malloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <spawnEnemy+0xf4>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2264      	movs	r2, #100	; 0x64
 80026e4:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f001 f806 	bl	80036fa <appendEnemy>
	}
}
 80026ee:	bf00      	nop
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	51eb851f 	.word	0x51eb851f
 80026fc:	d20d20d3 	.word	0xd20d20d3
 8002700:	200001cc 	.word	0x200001cc

08002704 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002712:	e01c      	b.n	800274e <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	440a      	add	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	440a      	add	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1df      	bne.n	8002714 <updateEnemy+0x10>
	}
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b092      	sub	sp, #72	; 0x48
 8002768:	af04      	add	r7, sp, #16
 800276a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002772:	e051      	b.n	8002818 <shootEnemy+0xb4>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	7b12      	ldrb	r2, [r2, #12]
 8002780:	441a      	add	r2, r3
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <shootEnemy+0xc4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d243      	bcs.n	8002812 <shootEnemy+0xae>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f87a 	bl	8002884 <intToFp>
 8002790:	4603      	mov	r3, r0
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002794:	2002      	movs	r0, #2
 8002796:	f000 f875 	bl	8002884 <intToFp>
 800279a:	4603      	mov	r3, r0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2)};
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685c      	ldr	r4, [r3, #4]
 80027b0:	2002      	movs	r0, #2
 80027b2:	f000 f867 	bl	8002884 <intToFp>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4423      	add	r3, r4
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80027e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e8:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 80027ec:	687d      	ldr	r5, [r7, #4]
 80027ee:	466c      	mov	r4, sp
 80027f0:	f107 0318 	add.w	r3, r7, #24
 80027f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002802:	4628      	mov	r0, r5
 8002804:	f000 ff46 	bl	8003694 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <shootEnemy+0xc4>)
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1aa      	bne.n	8002774 <shootEnemy+0x10>
>>>>>>> Stashed changes
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};

		appendBullet(&(gameState->bulletLL), bullet);
	}*/
}
<<<<<<< Updated upstream
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bdb0      	pop	{r4, r5, r7, pc}
 80015bc:	200001c8 	.word	0x200001c8

080015c0 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80015ce:	e013      	b.n	80015f8 <detectCityHit+0x38>
		if(fpToInt(thisNode->enemy->position->y) >= 40){
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f82a 	bl	8001632 <fpToInt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b27      	cmp	r3, #39	; 0x27
 80015e2:	dd06      	ble.n	80015f2 <detectCityHit+0x32>
			//gameState->cityLives--;
			deleteEnemyNode(gameState, thisNode);
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 feae 	bl	8002348 <deleteEnemyNode>
			drawhearth(gameState);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fa63 	bl	8001ab8 <drawhearth>
		}
		thisNode = thisNode->nextEnemyNode;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e8      	bne.n	80015d0 <detectCityHit+0x10>
	}
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <intToFp>:
>>>>>>> Stashed changes
=======
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bdb0      	pop	{r4, r5, r7, pc}
 8002828:	200001cc 	.word	0x200001cc

0800282c <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800283a:	e01b      	b.n	8002874 <detectCityHit+0x48>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f832 	bl	80028ae <fpToInt>
 800284a:	4603      	mov	r3, r0
 800284c:	2b4f      	cmp	r3, #79	; 0x4f
 800284e:	dd0e      	ble.n	800286e <detectCityHit+0x42>
			gameState->cityLives--;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			deleteEnemyNode(gameState, thisNode);
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 ff78 	bl	8003758 <deleteEnemyNode>
			drawhearth(gameState);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fae5 	bl	8002e38 <drawhearth>
		}
		thisNode = thisNode->nextEnemyNode;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e0      	bne.n	800283c <detectCityHit+0x10>
	}
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <intToFp>:
>>>>>>> Stashed changes
 */

#include "fixedPoint.h"

<<<<<<< Updated upstream
//Converts normal uint_t to fixed point 8.8 format with type uint16_t
uint16_t intToFp(uint8_t n){
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	uint16_t output = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	81fb      	strh	r3, [r7, #14]
	output+=n;
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	b29a      	uxth	r2, r3
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	4413      	add	r3, r2
 8001342:	81fb      	strh	r3, [r7, #14]
	output<<=8;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	81fb      	strh	r3, [r7, #14]
	return output;
 800134a:	89fb      	ldrh	r3, [r7, #14]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <fpToInt>:

//Converts fixed point 8.8 format to normal integer and rounds correctly
uint8_t fpToInt(uint16_t fp){
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
	uint8_t output=0;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
	fp+=128; //128 in 8.8 format is 0,5
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	3380      	adds	r3, #128	; 0x80
 800136a:	80fb      	strh	r3, [r7, #6]
	fp>>=8;
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	80fb      	strh	r3, [r7, #6]
	output+=fp;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	4413      	add	r3, r2
 800137a:	73fb      	strb	r3, [r7, #15]
	return output;
 800137c:	7bfb      	ldrb	r3, [r7, #15]

}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <drawMoon>:
 *  Created on: 8 Jan 2024
 *      Author: Bivertical
 */
#include "graphics.h"

void drawMoon(uint8_t X, uint8_t Y){
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	460a      	mov	r2, r1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	4613      	mov	r3, r2
 8001398:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	3303      	adds	r3, #3
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f7ff fc25 	bl	8000bf4 <gotoxy>
	printf("_");
 80013aa:	205f      	movs	r0, #95	; 0x5f
 80013ac:	f001 f8e6 	bl	800257c <putchar>
	gotoxy(X,Y+3);
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	3303      	adds	r3, #3
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f7ff fc1b 	bl	8000bf4 <gotoxy>
	printf("_");
 80013be:	205f      	movs	r0, #95	; 0x5f
 80013c0:	f001 f8dc 	bl	800257c <putchar>
	gotoxy(X+1,Y+3);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	3303      	adds	r3, #3
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fc10 	bl	8000bf4 <gotoxy>
	printf("_");
 80013d4:	205f      	movs	r0, #95	; 0x5f
 80013d6:	f001 f8d1 	bl	800257c <putchar>
	gotoxy(X-2,Y+3);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	1e9a      	subs	r2, r3, #2
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	3303      	adds	r3, #3
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fc05 	bl	8000bf4 <gotoxy>
	printf("(");
 80013ea:	2028      	movs	r0, #40	; 0x28
 80013ec:	f001 f8c6 	bl	800257c <putchar>
	gotoxy(X+2,Y+3);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	1c9a      	adds	r2, r3, #2
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	3303      	adds	r3, #3
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7ff fbfa 	bl	8000bf4 <gotoxy>
	printf(")");
 8001400:	2029      	movs	r0, #41	; 0x29
 8001402:	f001 f8bb 	bl	800257c <putchar>

	gotoxy(X+3,Y+2);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	1cda      	adds	r2, r3, #3
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	3302      	adds	r3, #2
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fbef 	bl	8000bf4 <gotoxy>
	printf("_");
 8001416:	205f      	movs	r0, #95	; 0x5f
 8001418:	f001 f8b0 	bl	800257c <putchar>
	gotoxy(X-3,Y+2);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	1eda      	subs	r2, r3, #3
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	3302      	adds	r3, #2
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7ff fbe4 	bl	8000bf4 <gotoxy>
	printf("_");
 800142c:	205f      	movs	r0, #95	; 0x5f
 800142e:	f001 f8a5 	bl	800257c <putchar>
	gotoxy(X+4,Y+2);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	1d1a      	adds	r2, r3, #4
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	3302      	adds	r3, #2
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fbd9 	bl	8000bf4 <gotoxy>
	printf("(");
 8001442:	2028      	movs	r0, #40	; 0x28
 8001444:	f001 f89a 	bl	800257c <putchar>
	gotoxy(X-4,Y+2);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	1f1a      	subs	r2, r3, #4
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	3302      	adds	r3, #2
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f7ff fbce 	bl	8000bf4 <gotoxy>
	printf(")");
 8001458:	2029      	movs	r0, #41	; 0x29
 800145a:	f001 f88f 	bl	800257c <putchar>

	gotoxy(X-5,Y+1);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	1f5a      	subs	r2, r3, #5
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	3301      	adds	r3, #1
 8001466:	4619      	mov	r1, r3
 8001468:	4610      	mov	r0, r2
 800146a:	f7ff fbc3 	bl	8000bf4 <gotoxy>
	printf("(");
 800146e:	2028      	movs	r0, #40	; 0x28
 8001470:	f001 f884 	bl	800257c <putchar>
	gotoxy(X+5,Y+1);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	1d5a      	adds	r2, r3, #5
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	3301      	adds	r3, #1
 800147c:	4619      	mov	r1, r3
 800147e:	4610      	mov	r0, r2
 8001480:	f7ff fbb8 	bl	8000bf4 <gotoxy>
	printf("(");
 8001484:	2028      	movs	r0, #40	; 0x28
 8001486:	f001 f879 	bl	800257c <putchar>
	gotoxy(X-6,Y);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3b06      	subs	r3, #6
 800148e:	79ba      	ldrb	r2, [r7, #6]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fbae 	bl	8000bf4 <gotoxy>
	printf("(");
 8001498:	2028      	movs	r0, #40	; 0x28
 800149a:	f001 f86f 	bl	800257c <putchar>
	gotoxy(X+6,Y);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3306      	adds	r3, #6
 80014a2:	79ba      	ldrb	r2, [r7, #6]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fba4 	bl	8000bf4 <gotoxy>
	printf(")");
 80014ac:	2029      	movs	r0, #41	; 0x29
 80014ae:	f001 f865 	bl	800257c <putchar>

	gotoxy(X-5,Y-1);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	1f5a      	subs	r2, r3, #5
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f7ff fb99 	bl	8000bf4 <gotoxy>
	printf("(");
 80014c2:	2028      	movs	r0, #40	; 0x28
 80014c4:	f001 f85a 	bl	800257c <putchar>
	gotoxy(X+5,Y-1);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	1d5a      	adds	r2, r3, #5
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	4610      	mov	r0, r2
 80014d4:	f7ff fb8e 	bl	8000bf4 <gotoxy>
	printf(")");
 80014d8:	2029      	movs	r0, #41	; 0x29
 80014da:	f001 f84f 	bl	800257c <putchar>
	gotoxy(X-4,Y-2);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	1f1a      	subs	r2, r3, #4
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	3b02      	subs	r3, #2
 80014e6:	4619      	mov	r1, r3
 80014e8:	4610      	mov	r0, r2
 80014ea:	f7ff fb83 	bl	8000bf4 <gotoxy>
	printf("(");
 80014ee:	2028      	movs	r0, #40	; 0x28
 80014f0:	f001 f844 	bl	800257c <putchar>
	gotoxy(X+4,Y-2);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff fb78 	bl	8000bf4 <gotoxy>
	printf(")");
 8001504:	2029      	movs	r0, #41	; 0x29
 8001506:	f001 f839 	bl	800257c <putchar>

	gotoxy(X-3,Y-3);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	1eda      	subs	r2, r3, #3
 800150e:	79bb      	ldrb	r3, [r7, #6]
 8001510:	3b03      	subs	r3, #3
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff fb6d 	bl	8000bf4 <gotoxy>
	printf("_");
 800151a:	205f      	movs	r0, #95	; 0x5f
 800151c:	f001 f82e 	bl	800257c <putchar>
	gotoxy(X+3,Y-3);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	1cda      	adds	r2, r3, #3
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	3b03      	subs	r3, #3
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f7ff fb62 	bl	8000bf4 <gotoxy>
	printf("_");
 8001530:	205f      	movs	r0, #95	; 0x5f
 8001532:	f001 f823 	bl	800257c <putchar>
	gotoxy(X-2,Y-3);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	1e9a      	subs	r2, r3, #2
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	3b03      	subs	r3, #3
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fb57 	bl	8000bf4 <gotoxy>
	printf("(");
 8001546:	2028      	movs	r0, #40	; 0x28
 8001548:	f001 f818 	bl	800257c <putchar>
	gotoxy(X+2,Y-3);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	1c9a      	adds	r2, r3, #2
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	3b03      	subs	r3, #3
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f7ff fb4c 	bl	8000bf4 <gotoxy>
	printf(")");
 800155c:	2029      	movs	r0, #41	; 0x29
 800155e:	f001 f80d 	bl	800257c <putchar>

	gotoxy(X-1,Y-4);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	3b04      	subs	r3, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f7ff fb41 	bl	8000bf4 <gotoxy>
	printf("_");
 8001572:	205f      	movs	r0, #95	; 0x5f
 8001574:	f001 f802 	bl	800257c <putchar>
	gotoxy(X,Y-4);
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	3b04      	subs	r3, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f7ff fb37 	bl	8000bf4 <gotoxy>
	printf("_");
 8001586:	205f      	movs	r0, #95	; 0x5f
 8001588:	f000 fff8 	bl	800257c <putchar>
	gotoxy(X+1,Y-4);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	3b04      	subs	r3, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff fb2c 	bl	8000bf4 <gotoxy>
	printf("_");
 800159c:	205f      	movs	r0, #95	; 0x5f
 800159e:	f000 ffed 	bl	800257c <putchar>

	gotoxy(X-2,Y);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b02      	subs	r3, #2
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fb22 	bl	8000bf4 <gotoxy>
	printf("O");
 80015b0:	204f      	movs	r0, #79	; 0x4f
 80015b2:	f000 ffe3 	bl	800257c <putchar>
	gotoxy(X+1,Y+2);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	3302      	adds	r3, #2
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fb17 	bl	8000bf4 <gotoxy>
	printf("o");
 80015c6:	206f      	movs	r0, #111	; 0x6f
 80015c8:	f000 ffd8 	bl	800257c <putchar>
	gotoxy(X+3,Y-1);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	1cda      	adds	r2, r3, #3
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fb0c 	bl	8000bf4 <gotoxy>
	printf("O");
 80015dc:	204f      	movs	r0, #79	; 0x4f
 80015de:	f000 ffcd 	bl	800257c <putchar>



	gotoxy(15,1);
 80015e2:	2101      	movs	r1, #1
 80015e4:	200f      	movs	r0, #15
 80015e6:	f7ff fb05 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 80015ea:	20db      	movs	r0, #219	; 0xdb
 80015ec:	f000 ffc6 	bl	800257c <putchar>
	gotoxy(17,1);
 80015f0:	2101      	movs	r1, #1
 80015f2:	2011      	movs	r0, #17
 80015f4:	f7ff fafe 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 80015f8:	20db      	movs	r0, #219	; 0xdb
 80015fa:	f000 ffbf 	bl	800257c <putchar>
	gotoxy(16,2);
 80015fe:	2102      	movs	r1, #2
 8001600:	2010      	movs	r0, #16
 8001602:	f7ff faf7 	bl	8000bf4 <gotoxy>
	printf("%c",223);
 8001606:	20df      	movs	r0, #223	; 0xdf
 8001608:	f000 ffb8 	bl	800257c <putchar>
	gotoxy(16,1);
 800160c:	2101      	movs	r1, #1
 800160e:	2010      	movs	r0, #16
 8001610:	f7ff faf0 	bl	8000bf4 <gotoxy>
	printf("%c",220);
 8001614:	20dc      	movs	r0, #220	; 0xdc
 8001616:	f000 ffb1 	bl	800257c <putchar>
//	gotoxy(17,2);
//	printf("%c",223);
//	gotoxy(15,2);
//	printf("%c",223);

	gotoxy(19,1);
 800161a:	2101      	movs	r1, #1
 800161c:	2013      	movs	r0, #19
 800161e:	f7ff fae9 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 8001622:	20db      	movs	r0, #219	; 0xdb
 8001624:	f000 ffaa 	bl	800257c <putchar>
	gotoxy(21,1);
 8001628:	2101      	movs	r1, #1
 800162a:	2015      	movs	r0, #21
 800162c:	f7ff fae2 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 8001630:	20db      	movs	r0, #219	; 0xdb
 8001632:	f000 ffa3 	bl	800257c <putchar>
	gotoxy(20,2);
 8001636:	2102      	movs	r1, #2
 8001638:	2014      	movs	r0, #20
 800163a:	f7ff fadb 	bl	8000bf4 <gotoxy>
	printf("%c",223);
 800163e:	20df      	movs	r0, #223	; 0xdf
 8001640:	f000 ff9c 	bl	800257c <putchar>
	gotoxy(20,1);
 8001644:	2101      	movs	r1, #1
 8001646:	2014      	movs	r0, #20
 8001648:	f7ff fad4 	bl	8000bf4 <gotoxy>
	printf("%c",220);
 800164c:	20dc      	movs	r0, #220	; 0xdc
 800164e:	f000 ff95 	bl	800257c <putchar>
//	gotoxy(19,2);
//	printf("%c",223);
//	gotoxy(21,2);
//	printf("%c",223);

	gotoxy(23,1);
 8001652:	2101      	movs	r1, #1
 8001654:	2017      	movs	r0, #23
 8001656:	f7ff facd 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 800165a:	20db      	movs	r0, #219	; 0xdb
 800165c:	f000 ff8e 	bl	800257c <putchar>
	gotoxy(25,1);
 8001660:	2101      	movs	r1, #1
 8001662:	2019      	movs	r0, #25
 8001664:	f7ff fac6 	bl	8000bf4 <gotoxy>
	printf("%c",219);
 8001668:	20db      	movs	r0, #219	; 0xdb
 800166a:	f000 ff87 	bl	800257c <putchar>
	gotoxy(24,2);
 800166e:	2102      	movs	r1, #2
 8001670:	2018      	movs	r0, #24
 8001672:	f7ff fabf 	bl	8000bf4 <gotoxy>
	printf("%c",223);
 8001676:	20df      	movs	r0, #223	; 0xdf
 8001678:	f000 ff80 	bl	800257c <putchar>
	gotoxy(24,1);
 800167c:	2101      	movs	r1, #1
 800167e:	2018      	movs	r0, #24
 8001680:	f7ff fab8 	bl	8000bf4 <gotoxy>
	printf("%c",220);
 8001684:	20dc      	movs	r0, #220	; 0xdc
 8001686:	f000 ff79 	bl	800257c <putchar>

=======
//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
<<<<<<< Updated upstream
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
	output+=n;
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
	output<<=16;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
	return output;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60bb      	str	r3, [r7, #8]
	int output=0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001648:	607b      	str	r3, [r7, #4]
	fp>>=16;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0c1b      	lsrs	r3, r3, #16
 800164e:	607b      	str	r3, [r7, #4]
	output+=fp;
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da03      	bge.n	8001666 <fpToInt+0x34>
		output-=65536;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001664:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8001666:	68fb      	ldr	r3, [r7, #12]

}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <drawbackground>:
 */
=======
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
	output<<=16;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	60fb      	str	r3, [r7, #12]
	return output;
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60bb      	str	r3, [r7, #8]
	int output=0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028c4:	607b      	str	r3, [r7, #4]
	fp>>=16;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	607b      	str	r3, [r7, #4]
	output+=fp;
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da03      	bge.n	80028e2 <fpToInt+0x34>
		output-=65536;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80028e0:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80028e2:	68fb      	ldr	r3, [r7, #12]

}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	n>>=8;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	607b      	str	r3, [r7, #4]
	m>>=8;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	60fb      	str	r3, [r7, #12]

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
 8002924:	68fb      	ldr	r3, [r7, #12]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002932:	b5b0      	push	{r4, r5, r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4608      	mov	r0, r1
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0c03      	lsrs	r3, r0, #16
 8002946:	0402      	lsls	r2, r0, #16
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800295a:	1884      	adds	r4, r0, r2
 800295c:	eb41 0503 	adc.w	r5, r1, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fe f91c 	bl	8000ba8 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    return result;
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}

08002982 <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	1d38      	adds	r0, r7, #4
 800298c:	e880 0006 	stmia.w	r0, {r1, r2}
 8002990:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ffaa 	bl	80028f0 <fpMultiply>
 800299c:	4603      	mov	r3, r0
 800299e:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffa3 	bl	80028f0 <fpMultiply>
 80029aa:	4603      	mov	r3, r0
 80029ac:	617b      	str	r3, [r7, #20]
	return vectorOut;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da02      	bge.n	80029de <fpAbs+0x18>
			output=(~output)+1;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	425b      	negs	r3, r3
 80029dc:	60fb      	str	r3, [r7, #12]
		}
	return output;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <drawbackground>:
>>>>>>> Stashed changes
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"

void drawbackground(){
<<<<<<< Updated upstream
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8001678:	2123      	movs	r1, #35	; 0x23
 800167a:	2037      	movs	r0, #55	; 0x37
 800167c:	f7ff fad6 	bl	8000c2c <gotoxy>
	printf("*");
 8001680:	202a      	movs	r0, #42	; 0x2a
 8001682:	f001 fdb5 	bl	80031f0 <putchar>
	gotoxy(63,27);
 8001686:	211b      	movs	r1, #27
 8001688:	203f      	movs	r0, #63	; 0x3f
 800168a:	f7ff facf 	bl	8000c2c <gotoxy>
	printf("*");
 800168e:	202a      	movs	r0, #42	; 0x2a
 8001690:	f001 fdae 	bl	80031f0 <putchar>
	gotoxy(10,15);
 8001694:	210f      	movs	r1, #15
 8001696:	200a      	movs	r0, #10
 8001698:	f7ff fac8 	bl	8000c2c <gotoxy>
	printf("*");
 800169c:	202a      	movs	r0, #42	; 0x2a
 800169e:	f001 fda7 	bl	80031f0 <putchar>
	gotoxy(20,40);
 80016a2:	2128      	movs	r1, #40	; 0x28
 80016a4:	2014      	movs	r0, #20
 80016a6:	f7ff fac1 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80016aa:	202b      	movs	r0, #43	; 0x2b
 80016ac:	f001 fda0 	bl	80031f0 <putchar>

	gotoxy(155,37);
 80016b0:	2125      	movs	r1, #37	; 0x25
 80016b2:	209b      	movs	r0, #155	; 0x9b
 80016b4:	f7ff faba 	bl	8000c2c <gotoxy>
	printf("*");
 80016b8:	202a      	movs	r0, #42	; 0x2a
 80016ba:	f001 fd99 	bl	80031f0 <putchar>
	gotoxy(110,28);
 80016be:	211c      	movs	r1, #28
 80016c0:	206e      	movs	r0, #110	; 0x6e
 80016c2:	f7ff fab3 	bl	8000c2c <gotoxy>
	printf("*");
 80016c6:	202a      	movs	r0, #42	; 0x2a
 80016c8:	f001 fd92 	bl	80031f0 <putchar>
	gotoxy(95,13);
 80016cc:	210d      	movs	r1, #13
 80016ce:	205f      	movs	r0, #95	; 0x5f
 80016d0:	f7ff faac 	bl	8000c2c <gotoxy>
	printf("*");
 80016d4:	202a      	movs	r0, #42	; 0x2a
 80016d6:	f001 fd8b 	bl	80031f0 <putchar>
	gotoxy(130,19);
 80016da:	2113      	movs	r1, #19
 80016dc:	2082      	movs	r0, #130	; 0x82
 80016de:	f7ff faa5 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80016e2:	202b      	movs	r0, #43	; 0x2b
 80016e4:	f001 fd84 	bl	80031f0 <putchar>

	gotoxy(5,27);
 80016e8:	211b      	movs	r1, #27
 80016ea:	2005      	movs	r0, #5
 80016ec:	f7ff fa9e 	bl	8000c2c <gotoxy>
	printf("*");
 80016f0:	202a      	movs	r0, #42	; 0x2a
 80016f2:	f001 fd7d 	bl	80031f0 <putchar>
	gotoxy(6,5);
 80016f6:	2105      	movs	r1, #5
 80016f8:	2006      	movs	r0, #6
 80016fa:	f7ff fa97 	bl	8000c2c <gotoxy>
	printf("*");
 80016fe:	202a      	movs	r0, #42	; 0x2a
 8001700:	f001 fd76 	bl	80031f0 <putchar>
	gotoxy(13,13);
 8001704:	210d      	movs	r1, #13
 8001706:	200d      	movs	r0, #13
 8001708:	f7ff fa90 	bl	8000c2c <gotoxy>
	printf("*");
 800170c:	202a      	movs	r0, #42	; 0x2a
 800170e:	f001 fd6f 	bl	80031f0 <putchar>
	gotoxy(60,7);
 8001712:	2107      	movs	r1, #7
 8001714:	203c      	movs	r0, #60	; 0x3c
 8001716:	f7ff fa89 	bl	8000c2c <gotoxy>
	printf("%c",43);
 800171a:	202b      	movs	r0, #43	; 0x2b
 800171c:	f001 fd68 	bl	80031f0 <putchar>

	gotoxy(140,3);
 8001720:	2103      	movs	r1, #3
 8001722:	208c      	movs	r0, #140	; 0x8c
 8001724:	f7ff fa82 	bl	8000c2c <gotoxy>
	printf("*");
 8001728:	202a      	movs	r0, #42	; 0x2a
 800172a:	f001 fd61 	bl	80031f0 <putchar>
	gotoxy(120,5);
 800172e:	2105      	movs	r1, #5
 8001730:	2078      	movs	r0, #120	; 0x78
 8001732:	f7ff fa7b 	bl	8000c2c <gotoxy>
	printf("*");
 8001736:	202a      	movs	r0, #42	; 0x2a
 8001738:	f001 fd5a 	bl	80031f0 <putchar>
	gotoxy(110,7);
 800173c:	2107      	movs	r1, #7
 800173e:	206e      	movs	r0, #110	; 0x6e
 8001740:	f7ff fa74 	bl	8000c2c <gotoxy>
	printf("*");
 8001744:	202a      	movs	r0, #42	; 0x2a
 8001746:	f001 fd53 	bl	80031f0 <putchar>
	gotoxy(70,30);
 800174a:	211e      	movs	r1, #30
 800174c:	2046      	movs	r0, #70	; 0x46
 800174e:	f7ff fa6d 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001752:	202b      	movs	r0, #43	; 0x2b
 8001754:	f001 fd4c 	bl	80031f0 <putchar>

	gotoxy(135,33);
 8001758:	2121      	movs	r1, #33	; 0x21
 800175a:	2087      	movs	r0, #135	; 0x87
 800175c:	f7ff fa66 	bl	8000c2c <gotoxy>
	printf("*");
 8001760:	202a      	movs	r0, #42	; 0x2a
 8001762:	f001 fd45 	bl	80031f0 <putchar>
	gotoxy(123,36);
 8001766:	2124      	movs	r1, #36	; 0x24
 8001768:	207b      	movs	r0, #123	; 0x7b
 800176a:	f7ff fa5f 	bl	8000c2c <gotoxy>
	printf("*");
 800176e:	202a      	movs	r0, #42	; 0x2a
 8001770:	f001 fd3e 	bl	80031f0 <putchar>
	gotoxy(138,40);
 8001774:	2128      	movs	r1, #40	; 0x28
 8001776:	208a      	movs	r0, #138	; 0x8a
 8001778:	f7ff fa58 	bl	8000c2c <gotoxy>
	printf("*");
 800177c:	202a      	movs	r0, #42	; 0x2a
 800177e:	f001 fd37 	bl	80031f0 <putchar>
	gotoxy(127,25);
 8001782:	2119      	movs	r1, #25
 8001784:	207f      	movs	r0, #127	; 0x7f
 8001786:	f7ff fa51 	bl	8000c2c <gotoxy>
	printf("%c",43);
 800178a:	202b      	movs	r0, #43	; 0x2b
 800178c:	f001 fd30 	bl	80031f0 <putchar>

	gotoxy(105,32);
 8001790:	2120      	movs	r1, #32
 8001792:	2069      	movs	r0, #105	; 0x69
 8001794:	f7ff fa4a 	bl	8000c2c <gotoxy>
	printf("%c",42);
 8001798:	202a      	movs	r0, #42	; 0x2a
 800179a:	f001 fd29 	bl	80031f0 <putchar>
	gotoxy(106,33);
 800179e:	2121      	movs	r1, #33	; 0x21
 80017a0:	206a      	movs	r0, #106	; 0x6a
 80017a2:	f7ff fa43 	bl	8000c2c <gotoxy>
	printf("%c",92);
 80017a6:	205c      	movs	r0, #92	; 0x5c
 80017a8:	f001 fd22 	bl	80031f0 <putchar>
	gotoxy(107,34);
 80017ac:	2122      	movs	r1, #34	; 0x22
 80017ae:	206b      	movs	r0, #107	; 0x6b
 80017b0:	f7ff fa3c 	bl	8000c2c <gotoxy>
	printf("%c",92);
 80017b4:	205c      	movs	r0, #92	; 0x5c
 80017b6:	f001 fd1b 	bl	80031f0 <putchar>

	gotoxy(23,15);
 80017ba:	210f      	movs	r1, #15
 80017bc:	2017      	movs	r0, #23
 80017be:	f7ff fa35 	bl	8000c2c <gotoxy>
	printf("*");
 80017c2:	202a      	movs	r0, #42	; 0x2a
 80017c4:	f001 fd14 	bl	80031f0 <putchar>
	gotoxy(37,21);
 80017c8:	2115      	movs	r1, #21
 80017ca:	2025      	movs	r0, #37	; 0x25
 80017cc:	f7ff fa2e 	bl	8000c2c <gotoxy>
	printf("*");
 80017d0:	202a      	movs	r0, #42	; 0x2a
 80017d2:	f001 fd0d 	bl	80031f0 <putchar>
	gotoxy(26,24);
 80017d6:	2118      	movs	r1, #24
 80017d8:	201a      	movs	r0, #26
 80017da:	f7ff fa27 	bl	8000c2c <gotoxy>
	printf("*");
 80017de:	202a      	movs	r0, #42	; 0x2a
 80017e0:	f001 fd06 	bl	80031f0 <putchar>
	gotoxy(30,29);
 80017e4:	211d      	movs	r1, #29
 80017e6:	201e      	movs	r0, #30
 80017e8:	f7ff fa20 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80017ec:	202b      	movs	r0, #43	; 0x2b
 80017ee:	f001 fcff 	bl	80031f0 <putchar>

	gotoxy(25,6);
 80017f2:	2106      	movs	r1, #6
 80017f4:	2019      	movs	r0, #25
 80017f6:	f7ff fa19 	bl	8000c2c <gotoxy>
	printf("*");
 80017fa:	202a      	movs	r0, #42	; 0x2a
 80017fc:	f001 fcf8 	bl	80031f0 <putchar>
	gotoxy(39,7);
 8001800:	2107      	movs	r1, #7
 8001802:	2027      	movs	r0, #39	; 0x27
 8001804:	f7ff fa12 	bl	8000c2c <gotoxy>
	printf("*");
 8001808:	202a      	movs	r0, #42	; 0x2a
 800180a:	f001 fcf1 	bl	80031f0 <putchar>
	gotoxy(41,3);
 800180e:	2103      	movs	r1, #3
 8001810:	2029      	movs	r0, #41	; 0x29
 8001812:	f7ff fa0b 	bl	8000c2c <gotoxy>
	printf("*");
 8001816:	202a      	movs	r0, #42	; 0x2a
 8001818:	f001 fcea 	bl	80031f0 <putchar>
	gotoxy(75,10);
 800181c:	210a      	movs	r1, #10
 800181e:	204b      	movs	r0, #75	; 0x4b
 8001820:	f7ff fa04 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001824:	202b      	movs	r0, #43	; 0x2b
 8001826:	f001 fce3 	bl	80031f0 <putchar>

	gotoxy(100,20);
 800182a:	2114      	movs	r1, #20
 800182c:	2064      	movs	r0, #100	; 0x64
 800182e:	f7ff f9fd 	bl	8000c2c <gotoxy>
	printf("%c",197);
 8001832:	20c5      	movs	r0, #197	; 0xc5
 8001834:	f001 fcdc 	bl	80031f0 <putchar>
	gotoxy(135,12);
 8001838:	210c      	movs	r1, #12
 800183a:	2087      	movs	r0, #135	; 0x87
 800183c:	f7ff f9f6 	bl	8000c2c <gotoxy>
	printf("%c",197);
 8001840:	20c5      	movs	r0, #197	; 0xc5
 8001842:	f001 fcd5 	bl	80031f0 <putchar>
	gotoxy(30,5);
 8001846:	2105      	movs	r1, #5
 8001848:	201e      	movs	r0, #30
 800184a:	f7ff f9ef 	bl	8000c2c <gotoxy>
	printf("%c",197);
 800184e:	20c5      	movs	r0, #197	; 0xc5
 8001850:	f001 fcce 	bl	80031f0 <putchar>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	3303      	adds	r3, #3
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff f9da 	bl	8000c2c <gotoxy>
	printf("_");
 8001878:	205f      	movs	r0, #95	; 0x5f
 800187a:	f001 fcb9 	bl	80031f0 <putchar>
	gotoxy(X,Y+3);
 800187e:	79fa      	ldrb	r2, [r7, #7]
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	3303      	adds	r3, #3
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f7ff f9d0 	bl	8000c2c <gotoxy>
	printf("_");
 800188c:	205f      	movs	r0, #95	; 0x5f
 800188e:	f001 fcaf 	bl	80031f0 <putchar>
	gotoxy(X+1,Y+3);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	3303      	adds	r3, #3
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f7ff f9c5 	bl	8000c2c <gotoxy>
	printf("_");
 80018a2:	205f      	movs	r0, #95	; 0x5f
 80018a4:	f001 fca4 	bl	80031f0 <putchar>
	gotoxy(X-2,Y+3);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	1e9a      	subs	r2, r3, #2
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	3303      	adds	r3, #3
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f7ff f9ba 	bl	8000c2c <gotoxy>
	printf("(");
 80018b8:	2028      	movs	r0, #40	; 0x28
 80018ba:	f001 fc99 	bl	80031f0 <putchar>
	gotoxy(X+2,Y+3);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	1c9a      	adds	r2, r3, #2
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	3303      	adds	r3, #3
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff f9af 	bl	8000c2c <gotoxy>
	printf(")");
 80018ce:	2029      	movs	r0, #41	; 0x29
 80018d0:	f001 fc8e 	bl	80031f0 <putchar>

	gotoxy(X+3,Y+2);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	1cda      	adds	r2, r3, #3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	3302      	adds	r3, #2
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f7ff f9a4 	bl	8000c2c <gotoxy>
	printf("_");
 80018e4:	205f      	movs	r0, #95	; 0x5f
 80018e6:	f001 fc83 	bl	80031f0 <putchar>
	gotoxy(X-3,Y+2);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	1eda      	subs	r2, r3, #3
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	3302      	adds	r3, #2
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f7ff f999 	bl	8000c2c <gotoxy>
	printf("_");
 80018fa:	205f      	movs	r0, #95	; 0x5f
 80018fc:	f001 fc78 	bl	80031f0 <putchar>
	gotoxy(X+4,Y+2);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	1d1a      	adds	r2, r3, #4
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	3302      	adds	r3, #2
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff f98e 	bl	8000c2c <gotoxy>
	printf("(");
 8001910:	2028      	movs	r0, #40	; 0x28
 8001912:	f001 fc6d 	bl	80031f0 <putchar>
	gotoxy(X-4,Y+2);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	1f1a      	subs	r2, r3, #4
 800191a:	79bb      	ldrb	r3, [r7, #6]
 800191c:	3302      	adds	r3, #2
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff f983 	bl	8000c2c <gotoxy>
	printf(")");
 8001926:	2029      	movs	r0, #41	; 0x29
 8001928:	f001 fc62 	bl	80031f0 <putchar>

	gotoxy(X-5,Y+1);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	1f5a      	subs	r2, r3, #5
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	3301      	adds	r3, #1
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f7ff f978 	bl	8000c2c <gotoxy>
	printf("(");
 800193c:	2028      	movs	r0, #40	; 0x28
 800193e:	f001 fc57 	bl	80031f0 <putchar>
	gotoxy(X+5,Y+1);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	1d5a      	adds	r2, r3, #5
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	3301      	adds	r3, #1
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7ff f96d 	bl	8000c2c <gotoxy>
	printf("(");
 8001952:	2028      	movs	r0, #40	; 0x28
 8001954:	f001 fc4c 	bl	80031f0 <putchar>
	gotoxy(X-6,Y);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	3b06      	subs	r3, #6
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f963 	bl	8000c2c <gotoxy>
	printf("(");
 8001966:	2028      	movs	r0, #40	; 0x28
 8001968:	f001 fc42 	bl	80031f0 <putchar>
	gotoxy(X+6,Y);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	3306      	adds	r3, #6
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f959 	bl	8000c2c <gotoxy>
	printf(")");
 800197a:	2029      	movs	r0, #41	; 0x29
 800197c:	f001 fc38 	bl	80031f0 <putchar>

	gotoxy(X-5,Y-1);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	1f5a      	subs	r2, r3, #5
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	3b01      	subs	r3, #1
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff f94e 	bl	8000c2c <gotoxy>
	printf("(");
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f001 fc2d 	bl	80031f0 <putchar>
	gotoxy(X+5,Y-1);
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	1d5a      	adds	r2, r3, #5
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7ff f943 	bl	8000c2c <gotoxy>
	printf(")");
 80019a6:	2029      	movs	r0, #41	; 0x29
 80019a8:	f001 fc22 	bl	80031f0 <putchar>
	gotoxy(X-4,Y-2);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	1f1a      	subs	r2, r3, #4
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	3b02      	subs	r3, #2
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff f938 	bl	8000c2c <gotoxy>
	printf("(");
 80019bc:	2028      	movs	r0, #40	; 0x28
 80019be:	f001 fc17 	bl	80031f0 <putchar>
	gotoxy(X+4,Y-2);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	1d1a      	adds	r2, r3, #4
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	3b02      	subs	r3, #2
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff f92d 	bl	8000c2c <gotoxy>
	printf(")");
 80019d2:	2029      	movs	r0, #41	; 0x29
 80019d4:	f001 fc0c 	bl	80031f0 <putchar>

	gotoxy(X-3,Y-3);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	1eda      	subs	r2, r3, #3
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	3b03      	subs	r3, #3
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f7ff f922 	bl	8000c2c <gotoxy>
	printf("_");
 80019e8:	205f      	movs	r0, #95	; 0x5f
 80019ea:	f001 fc01 	bl	80031f0 <putchar>
	gotoxy(X+3,Y-3);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	1cda      	adds	r2, r3, #3
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff f917 	bl	8000c2c <gotoxy>
	printf("_");
 80019fe:	205f      	movs	r0, #95	; 0x5f
 8001a00:	f001 fbf6 	bl	80031f0 <putchar>
	gotoxy(X-2,Y-3);
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	1e9a      	subs	r2, r3, #2
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	3b03      	subs	r3, #3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff f90c 	bl	8000c2c <gotoxy>
	printf("(");
 8001a14:	2028      	movs	r0, #40	; 0x28
 8001a16:	f001 fbeb 	bl	80031f0 <putchar>
	gotoxy(X+2,Y-3);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	1c9a      	adds	r2, r3, #2
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f7ff f901 	bl	8000c2c <gotoxy>
	printf(")");
 8001a2a:	2029      	movs	r0, #41	; 0x29
 8001a2c:	f001 fbe0 	bl	80031f0 <putchar>

	gotoxy(X-1,Y-4);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	3b04      	subs	r3, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f7ff f8f6 	bl	8000c2c <gotoxy>
	printf("_");
 8001a40:	205f      	movs	r0, #95	; 0x5f
 8001a42:	f001 fbd5 	bl	80031f0 <putchar>
	gotoxy(X,Y-4);
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f7ff f8ec 	bl	8000c2c <gotoxy>
	printf("_");
 8001a54:	205f      	movs	r0, #95	; 0x5f
 8001a56:	f001 fbcb 	bl	80031f0 <putchar>
	gotoxy(X+1,Y-4);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	3b04      	subs	r3, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4610      	mov	r0, r2
 8001a66:	f7ff f8e1 	bl	8000c2c <gotoxy>
	printf("_");
 8001a6a:	205f      	movs	r0, #95	; 0x5f
 8001a6c:	f001 fbc0 	bl	80031f0 <putchar>

	gotoxy(X-2,Y);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	3b02      	subs	r3, #2
 8001a74:	79ba      	ldrb	r2, [r7, #6]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f8d7 	bl	8000c2c <gotoxy>
	printf("O");
 8001a7e:	204f      	movs	r0, #79	; 0x4f
 8001a80:	f001 fbb6 	bl	80031f0 <putchar>
	gotoxy(X+1,Y+2);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	79bb      	ldrb	r3, [r7, #6]
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff f8cc 	bl	8000c2c <gotoxy>
	printf("o");
 8001a94:	206f      	movs	r0, #111	; 0x6f
 8001a96:	f001 fbab 	bl	80031f0 <putchar>
	gotoxy(X+3,Y-1);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	1cda      	adds	r2, r3, #3
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f7ff f8c1 	bl	8000c2c <gotoxy>
	printf("O");
 8001aaa:	204f      	movs	r0, #79	; 0x4f
 8001aac:	f001 fba0 	bl	80031f0 <putchar>
>>>>>>> Stashed changes
=======
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 80029f0:	2123      	movs	r1, #35	; 0x23
 80029f2:	2037      	movs	r0, #55	; 0x37
 80029f4:	f7ff f858 	bl	8001aa8 <gotoxy>
	printf("*");
 80029f8:	202a      	movs	r0, #42	; 0x2a
 80029fa:	f001 fe17 	bl	800462c <putchar>
	gotoxy(63,27);
 80029fe:	211b      	movs	r1, #27
 8002a00:	203f      	movs	r0, #63	; 0x3f
 8002a02:	f7ff f851 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a06:	202a      	movs	r0, #42	; 0x2a
 8002a08:	f001 fe10 	bl	800462c <putchar>
	gotoxy(10,15);
 8002a0c:	210f      	movs	r1, #15
 8002a0e:	200a      	movs	r0, #10
 8002a10:	f7ff f84a 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a14:	202a      	movs	r0, #42	; 0x2a
 8002a16:	f001 fe09 	bl	800462c <putchar>
	gotoxy(20,40);
 8002a1a:	2128      	movs	r1, #40	; 0x28
 8002a1c:	2014      	movs	r0, #20
 8002a1e:	f7ff f843 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002a22:	202b      	movs	r0, #43	; 0x2b
 8002a24:	f001 fe02 	bl	800462c <putchar>

	gotoxy(155,37);
 8002a28:	2125      	movs	r1, #37	; 0x25
 8002a2a:	209b      	movs	r0, #155	; 0x9b
 8002a2c:	f7ff f83c 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a30:	202a      	movs	r0, #42	; 0x2a
 8002a32:	f001 fdfb 	bl	800462c <putchar>
	gotoxy(110,28);
 8002a36:	211c      	movs	r1, #28
 8002a38:	206e      	movs	r0, #110	; 0x6e
 8002a3a:	f7ff f835 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a3e:	202a      	movs	r0, #42	; 0x2a
 8002a40:	f001 fdf4 	bl	800462c <putchar>
	gotoxy(95,13);
 8002a44:	210d      	movs	r1, #13
 8002a46:	205f      	movs	r0, #95	; 0x5f
 8002a48:	f7ff f82e 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a4c:	202a      	movs	r0, #42	; 0x2a
 8002a4e:	f001 fded 	bl	800462c <putchar>
	gotoxy(130,19);
 8002a52:	2113      	movs	r1, #19
 8002a54:	2082      	movs	r0, #130	; 0x82
 8002a56:	f7ff f827 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002a5a:	202b      	movs	r0, #43	; 0x2b
 8002a5c:	f001 fde6 	bl	800462c <putchar>

	gotoxy(5,27);
 8002a60:	211b      	movs	r1, #27
 8002a62:	2005      	movs	r0, #5
 8002a64:	f7ff f820 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a68:	202a      	movs	r0, #42	; 0x2a
 8002a6a:	f001 fddf 	bl	800462c <putchar>
	gotoxy(6,5);
 8002a6e:	2105      	movs	r1, #5
 8002a70:	2006      	movs	r0, #6
 8002a72:	f7ff f819 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a76:	202a      	movs	r0, #42	; 0x2a
 8002a78:	f001 fdd8 	bl	800462c <putchar>
	gotoxy(13,13);
 8002a7c:	210d      	movs	r1, #13
 8002a7e:	200d      	movs	r0, #13
 8002a80:	f7ff f812 	bl	8001aa8 <gotoxy>
	printf("*");
 8002a84:	202a      	movs	r0, #42	; 0x2a
 8002a86:	f001 fdd1 	bl	800462c <putchar>
	gotoxy(60,7);
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	203c      	movs	r0, #60	; 0x3c
 8002a8e:	f7ff f80b 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002a92:	202b      	movs	r0, #43	; 0x2b
 8002a94:	f001 fdca 	bl	800462c <putchar>

	gotoxy(140,3);
 8002a98:	2103      	movs	r1, #3
 8002a9a:	208c      	movs	r0, #140	; 0x8c
 8002a9c:	f7ff f804 	bl	8001aa8 <gotoxy>
	printf("*");
 8002aa0:	202a      	movs	r0, #42	; 0x2a
 8002aa2:	f001 fdc3 	bl	800462c <putchar>
	gotoxy(120,5);
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	2078      	movs	r0, #120	; 0x78
 8002aaa:	f7fe fffd 	bl	8001aa8 <gotoxy>
	printf("*");
 8002aae:	202a      	movs	r0, #42	; 0x2a
 8002ab0:	f001 fdbc 	bl	800462c <putchar>
	gotoxy(110,7);
 8002ab4:	2107      	movs	r1, #7
 8002ab6:	206e      	movs	r0, #110	; 0x6e
 8002ab8:	f7fe fff6 	bl	8001aa8 <gotoxy>
	printf("*");
 8002abc:	202a      	movs	r0, #42	; 0x2a
 8002abe:	f001 fdb5 	bl	800462c <putchar>
	gotoxy(70,30);
 8002ac2:	211e      	movs	r1, #30
 8002ac4:	2046      	movs	r0, #70	; 0x46
 8002ac6:	f7fe ffef 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002aca:	202b      	movs	r0, #43	; 0x2b
 8002acc:	f001 fdae 	bl	800462c <putchar>

	gotoxy(135,33);
 8002ad0:	2121      	movs	r1, #33	; 0x21
 8002ad2:	2087      	movs	r0, #135	; 0x87
 8002ad4:	f7fe ffe8 	bl	8001aa8 <gotoxy>
	printf("*");
 8002ad8:	202a      	movs	r0, #42	; 0x2a
 8002ada:	f001 fda7 	bl	800462c <putchar>
	gotoxy(123,36);
 8002ade:	2124      	movs	r1, #36	; 0x24
 8002ae0:	207b      	movs	r0, #123	; 0x7b
 8002ae2:	f7fe ffe1 	bl	8001aa8 <gotoxy>
	printf("*");
 8002ae6:	202a      	movs	r0, #42	; 0x2a
 8002ae8:	f001 fda0 	bl	800462c <putchar>
	gotoxy(138,40);
 8002aec:	2128      	movs	r1, #40	; 0x28
 8002aee:	208a      	movs	r0, #138	; 0x8a
 8002af0:	f7fe ffda 	bl	8001aa8 <gotoxy>
	printf("*");
 8002af4:	202a      	movs	r0, #42	; 0x2a
 8002af6:	f001 fd99 	bl	800462c <putchar>
	gotoxy(127,25);
 8002afa:	2119      	movs	r1, #25
 8002afc:	207f      	movs	r0, #127	; 0x7f
 8002afe:	f7fe ffd3 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002b02:	202b      	movs	r0, #43	; 0x2b
 8002b04:	f001 fd92 	bl	800462c <putchar>

	gotoxy(105,32);
 8002b08:	2120      	movs	r1, #32
 8002b0a:	2069      	movs	r0, #105	; 0x69
 8002b0c:	f7fe ffcc 	bl	8001aa8 <gotoxy>
	printf("%c",42);
 8002b10:	202a      	movs	r0, #42	; 0x2a
 8002b12:	f001 fd8b 	bl	800462c <putchar>
	gotoxy(106,33);
 8002b16:	2121      	movs	r1, #33	; 0x21
 8002b18:	206a      	movs	r0, #106	; 0x6a
 8002b1a:	f7fe ffc5 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8002b1e:	205c      	movs	r0, #92	; 0x5c
 8002b20:	f001 fd84 	bl	800462c <putchar>
	gotoxy(107,34);
 8002b24:	2122      	movs	r1, #34	; 0x22
 8002b26:	206b      	movs	r0, #107	; 0x6b
 8002b28:	f7fe ffbe 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8002b2c:	205c      	movs	r0, #92	; 0x5c
 8002b2e:	f001 fd7d 	bl	800462c <putchar>

	gotoxy(23,15);
 8002b32:	210f      	movs	r1, #15
 8002b34:	2017      	movs	r0, #23
 8002b36:	f7fe ffb7 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b3a:	202a      	movs	r0, #42	; 0x2a
 8002b3c:	f001 fd76 	bl	800462c <putchar>
	gotoxy(37,21);
 8002b40:	2115      	movs	r1, #21
 8002b42:	2025      	movs	r0, #37	; 0x25
 8002b44:	f7fe ffb0 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b48:	202a      	movs	r0, #42	; 0x2a
 8002b4a:	f001 fd6f 	bl	800462c <putchar>
	gotoxy(26,24);
 8002b4e:	2118      	movs	r1, #24
 8002b50:	201a      	movs	r0, #26
 8002b52:	f7fe ffa9 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b56:	202a      	movs	r0, #42	; 0x2a
 8002b58:	f001 fd68 	bl	800462c <putchar>
	gotoxy(30,29);
 8002b5c:	211d      	movs	r1, #29
 8002b5e:	201e      	movs	r0, #30
 8002b60:	f7fe ffa2 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002b64:	202b      	movs	r0, #43	; 0x2b
 8002b66:	f001 fd61 	bl	800462c <putchar>

	gotoxy(25,6);
 8002b6a:	2106      	movs	r1, #6
 8002b6c:	2019      	movs	r0, #25
 8002b6e:	f7fe ff9b 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b72:	202a      	movs	r0, #42	; 0x2a
 8002b74:	f001 fd5a 	bl	800462c <putchar>
	gotoxy(39,7);
 8002b78:	2107      	movs	r1, #7
 8002b7a:	2027      	movs	r0, #39	; 0x27
 8002b7c:	f7fe ff94 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b80:	202a      	movs	r0, #42	; 0x2a
 8002b82:	f001 fd53 	bl	800462c <putchar>
	gotoxy(41,3);
 8002b86:	2103      	movs	r1, #3
 8002b88:	2029      	movs	r0, #41	; 0x29
 8002b8a:	f7fe ff8d 	bl	8001aa8 <gotoxy>
	printf("*");
 8002b8e:	202a      	movs	r0, #42	; 0x2a
 8002b90:	f001 fd4c 	bl	800462c <putchar>
	gotoxy(75,10);
 8002b94:	210a      	movs	r1, #10
 8002b96:	204b      	movs	r0, #75	; 0x4b
 8002b98:	f7fe ff86 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002b9c:	202b      	movs	r0, #43	; 0x2b
 8002b9e:	f001 fd45 	bl	800462c <putchar>

	gotoxy(100,20);
 8002ba2:	2114      	movs	r1, #20
 8002ba4:	2064      	movs	r0, #100	; 0x64
 8002ba6:	f7fe ff7f 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002baa:	20c5      	movs	r0, #197	; 0xc5
 8002bac:	f001 fd3e 	bl	800462c <putchar>
	gotoxy(135,12);
 8002bb0:	210c      	movs	r1, #12
 8002bb2:	2087      	movs	r0, #135	; 0x87
 8002bb4:	f7fe ff78 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002bb8:	20c5      	movs	r0, #197	; 0xc5
 8002bba:	f001 fd37 	bl	800462c <putchar>
	gotoxy(30,5);
 8002bbe:	2105      	movs	r1, #5
 8002bc0:	201e      	movs	r0, #30
 8002bc2:	f7fe ff71 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002bc6:	20c5      	movs	r0, #197	; 0xc5
 8002bc8:	f001 fd30 	bl	800462c <putchar>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460a      	mov	r2, r1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8002be0:	79bb      	ldrb	r3, [r7, #6]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	71bb      	strb	r3, [r7, #6]
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	3303      	adds	r3, #3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7fe ff59 	bl	8001aa8 <gotoxy>
	printf("_");
 8002bf6:	205f      	movs	r0, #95	; 0x5f
 8002bf8:	f001 fd18 	bl	800462c <putchar>
	gotoxy(X,Y+3);
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	3303      	adds	r3, #3
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe ff4f 	bl	8001aa8 <gotoxy>
	printf("_");
 8002c0a:	205f      	movs	r0, #95	; 0x5f
 8002c0c:	f001 fd0e 	bl	800462c <putchar>
	gotoxy(X+1,Y+3);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	79bb      	ldrb	r3, [r7, #6]
 8002c16:	3303      	adds	r3, #3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7fe ff44 	bl	8001aa8 <gotoxy>
	printf("_");
 8002c20:	205f      	movs	r0, #95	; 0x5f
 8002c22:	f001 fd03 	bl	800462c <putchar>
	gotoxy(X-2,Y+3);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	1e9a      	subs	r2, r3, #2
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f7fe ff39 	bl	8001aa8 <gotoxy>
	printf("(");
 8002c36:	2028      	movs	r0, #40	; 0x28
 8002c38:	f001 fcf8 	bl	800462c <putchar>
	gotoxy(X+2,Y+3);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	3303      	adds	r3, #3
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe ff2e 	bl	8001aa8 <gotoxy>
	printf(")");
 8002c4c:	2029      	movs	r0, #41	; 0x29
 8002c4e:	f001 fced 	bl	800462c <putchar>

	gotoxy(X+3,Y+2);
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	1cda      	adds	r2, r3, #3
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7fe ff23 	bl	8001aa8 <gotoxy>
	printf("_");
 8002c62:	205f      	movs	r0, #95	; 0x5f
 8002c64:	f001 fce2 	bl	800462c <putchar>
	gotoxy(X-3,Y+2);
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	1eda      	subs	r2, r3, #3
 8002c6c:	79bb      	ldrb	r3, [r7, #6]
 8002c6e:	3302      	adds	r3, #2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe ff18 	bl	8001aa8 <gotoxy>
	printf("_");
 8002c78:	205f      	movs	r0, #95	; 0x5f
 8002c7a:	f001 fcd7 	bl	800462c <putchar>
	gotoxy(X+4,Y+2);
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	1d1a      	adds	r2, r3, #4
 8002c82:	79bb      	ldrb	r3, [r7, #6]
 8002c84:	3302      	adds	r3, #2
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7fe ff0d 	bl	8001aa8 <gotoxy>
	printf("(");
 8002c8e:	2028      	movs	r0, #40	; 0x28
 8002c90:	f001 fccc 	bl	800462c <putchar>
	gotoxy(X-4,Y+2);
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	1f1a      	subs	r2, r3, #4
 8002c98:	79bb      	ldrb	r3, [r7, #6]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7fe ff02 	bl	8001aa8 <gotoxy>
	printf(")");
 8002ca4:	2029      	movs	r0, #41	; 0x29
 8002ca6:	f001 fcc1 	bl	800462c <putchar>

	gotoxy(X-5,Y+1);
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	1f5a      	subs	r2, r3, #5
 8002cae:	79bb      	ldrb	r3, [r7, #6]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f7fe fef7 	bl	8001aa8 <gotoxy>
	printf("(");
 8002cba:	2028      	movs	r0, #40	; 0x28
 8002cbc:	f001 fcb6 	bl	800462c <putchar>
	gotoxy(X+5,Y+1);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	1d5a      	adds	r2, r3, #5
 8002cc4:	79bb      	ldrb	r3, [r7, #6]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe feec 	bl	8001aa8 <gotoxy>
	printf("(");
 8002cd0:	2028      	movs	r0, #40	; 0x28
 8002cd2:	f001 fcab 	bl	800462c <putchar>
	gotoxy(X-6,Y);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	3b06      	subs	r3, #6
 8002cda:	79ba      	ldrb	r2, [r7, #6]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fee2 	bl	8001aa8 <gotoxy>
	printf("(");
 8002ce4:	2028      	movs	r0, #40	; 0x28
 8002ce6:	f001 fca1 	bl	800462c <putchar>
	gotoxy(X+6,Y);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3306      	adds	r3, #6
 8002cee:	79ba      	ldrb	r2, [r7, #6]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fed8 	bl	8001aa8 <gotoxy>
	printf(")");
 8002cf8:	2029      	movs	r0, #41	; 0x29
 8002cfa:	f001 fc97 	bl	800462c <putchar>

	gotoxy(X-5,Y-1);
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	1f5a      	subs	r2, r3, #5
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fe fecd 	bl	8001aa8 <gotoxy>
	printf("(");
 8002d0e:	2028      	movs	r0, #40	; 0x28
 8002d10:	f001 fc8c 	bl	800462c <putchar>
	gotoxy(X+5,Y-1);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	1d5a      	adds	r2, r3, #5
 8002d18:	79bb      	ldrb	r3, [r7, #6]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7fe fec2 	bl	8001aa8 <gotoxy>
	printf(")");
 8002d24:	2029      	movs	r0, #41	; 0x29
 8002d26:	f001 fc81 	bl	800462c <putchar>
	gotoxy(X-4,Y-2);
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	1f1a      	subs	r2, r3, #4
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	3b02      	subs	r3, #2
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f7fe feb7 	bl	8001aa8 <gotoxy>
	printf("(");
 8002d3a:	2028      	movs	r0, #40	; 0x28
 8002d3c:	f001 fc76 	bl	800462c <putchar>
	gotoxy(X+4,Y-2);
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	1d1a      	adds	r2, r3, #4
 8002d44:	79bb      	ldrb	r3, [r7, #6]
 8002d46:	3b02      	subs	r3, #2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f7fe feac 	bl	8001aa8 <gotoxy>
	printf(")");
 8002d50:	2029      	movs	r0, #41	; 0x29
 8002d52:	f001 fc6b 	bl	800462c <putchar>

	gotoxy(X-3,Y-3);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	1eda      	subs	r2, r3, #3
 8002d5a:	79bb      	ldrb	r3, [r7, #6]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7fe fea1 	bl	8001aa8 <gotoxy>
	printf("_");
 8002d66:	205f      	movs	r0, #95	; 0x5f
 8002d68:	f001 fc60 	bl	800462c <putchar>
	gotoxy(X+3,Y-3);
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	79bb      	ldrb	r3, [r7, #6]
 8002d72:	3b03      	subs	r3, #3
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fe fe96 	bl	8001aa8 <gotoxy>
	printf("_");
 8002d7c:	205f      	movs	r0, #95	; 0x5f
 8002d7e:	f001 fc55 	bl	800462c <putchar>
	gotoxy(X-2,Y-3);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	1e9a      	subs	r2, r3, #2
 8002d86:	79bb      	ldrb	r3, [r7, #6]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7fe fe8b 	bl	8001aa8 <gotoxy>
	printf("(");
 8002d92:	2028      	movs	r0, #40	; 0x28
 8002d94:	f001 fc4a 	bl	800462c <putchar>
	gotoxy(X+2,Y-3);
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	79bb      	ldrb	r3, [r7, #6]
 8002d9e:	3b03      	subs	r3, #3
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fe fe80 	bl	8001aa8 <gotoxy>
	printf(")");
 8002da8:	2029      	movs	r0, #41	; 0x29
 8002daa:	f001 fc3f 	bl	800462c <putchar>

	gotoxy(X-1,Y-4);
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	3b04      	subs	r3, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7fe fe75 	bl	8001aa8 <gotoxy>
	printf("_");
 8002dbe:	205f      	movs	r0, #95	; 0x5f
 8002dc0:	f001 fc34 	bl	800462c <putchar>
	gotoxy(X,Y-4);
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	79bb      	ldrb	r3, [r7, #6]
 8002dc8:	3b04      	subs	r3, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7fe fe6b 	bl	8001aa8 <gotoxy>
	printf("_");
 8002dd2:	205f      	movs	r0, #95	; 0x5f
 8002dd4:	f001 fc2a 	bl	800462c <putchar>
	gotoxy(X+1,Y-4);
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	79bb      	ldrb	r3, [r7, #6]
 8002dde:	3b04      	subs	r3, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7fe fe60 	bl	8001aa8 <gotoxy>
	printf("_");
 8002de8:	205f      	movs	r0, #95	; 0x5f
 8002dea:	f001 fc1f 	bl	800462c <putchar>

	gotoxy(X-2,Y);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	3b02      	subs	r3, #2
 8002df2:	79ba      	ldrb	r2, [r7, #6]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fe56 	bl	8001aa8 <gotoxy>
	printf("O");
 8002dfc:	204f      	movs	r0, #79	; 0x4f
 8002dfe:	f001 fc15 	bl	800462c <putchar>
	gotoxy(X+1,Y+2);
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f7fe fe4b 	bl	8001aa8 <gotoxy>
	printf("o");
 8002e12:	206f      	movs	r0, #111	; 0x6f
 8002e14:	f001 fc0a 	bl	800462c <putchar>
	gotoxy(X+3,Y-1);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	1cda      	adds	r2, r3, #3
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7fe fe40 	bl	8001aa8 <gotoxy>
	printf("O");
 8002e28:	204f      	movs	r0, #79	; 0x4f
 8002e2a:	f001 fbff 	bl	800462c <putchar>
>>>>>>> Stashed changes

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <drawEnemy>:
//	xyPOS = drawMoon(51,17);
//	BulletPOS
//}


void drawEnemy(gameState_t* gameState){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	int isLastElement = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
	enemyNode_t* thisNode = gameState->enemyLL;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

	while(1){
		if(thisNode->enemy->position->x != 0){
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03f      	beq.n	8001732 <drawEnemy+0x9e>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe4c 	bl	8001358 <fpToInt>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461c      	mov	r4, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fe43 	bl	8001358 <fpToInt>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff fa8c 	bl	8000bf4 <gotoxy>
			//printf("%d %d", fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
			printf("  ");
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <drawEnemy+0xb8>)
 80016de:	f000 ff35 	bl	800254c <iprintf>
			gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe34 	bl	8001358 <fpToInt>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461c      	mov	r4, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	885b      	ldrh	r3, [r3, #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe2b 	bl	8001358 <fpToInt>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fa74 	bl	8000bf4 <gotoxy>
			printf(":E");
 800170c:	4810      	ldr	r0, [pc, #64]	; (8001750 <drawEnemy+0xbc>)
 800170e:	f000 ff1d 	bl	800254c <iprintf>
			thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	8812      	ldrh	r2, [r2, #0]
 8001720:	801a      	strh	r2, [r3, #0]
			thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	8852      	ldrh	r2, [r2, #2]
 8001730:	805a      	strh	r2, [r3, #2]
		}
		if(thisNode->nextEnemyNode == 0){
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <drawEnemy+0xae>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 8001740:	e7b1      	b.n	80016a6 <drawEnemy+0x12>
			break;
 8001742:	bf00      	nop
	}
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	080037ac 	.word	0x080037ac
 8001750:	080037b0 	.word	0x080037b0

08001754 <appendEnemy>:
=======
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f7ff f8b2 	bl	8000c2c <gotoxy>
	printf("           ");
 8001ac8:	483b      	ldr	r0, [pc, #236]	; (8001bb8 <drawhearth+0x100>)
 8001aca:	f001 fb79 	bl	80031c0 <iprintf>
	gotoxy(15,2);
 8001ace:	2102      	movs	r1, #2
 8001ad0:	200f      	movs	r0, #15
 8001ad2:	f7ff f8ab 	bl	8000c2c <gotoxy>
	printf("           ");
 8001ad6:	4838      	ldr	r0, [pc, #224]	; (8001bb8 <drawhearth+0x100>)
 8001ad8:	f001 fb72 	bl	80031c0 <iprintf>
	fgcolor(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff f879 	bl	8000bd4 <fgcolor>

	if(gameState->cityLives >= 1){
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <drawhearth+0x6c>
		gotoxy(15,1);
 8001aec:	2101      	movs	r1, #1
 8001aee:	200f      	movs	r0, #15
 8001af0:	f7ff f89c 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001af4:	20db      	movs	r0, #219	; 0xdb
 8001af6:	f001 fb7b 	bl	80031f0 <putchar>
		gotoxy(17,1);
 8001afa:	2101      	movs	r1, #1
 8001afc:	2011      	movs	r0, #17
 8001afe:	f7ff f895 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001b02:	20db      	movs	r0, #219	; 0xdb
 8001b04:	f001 fb74 	bl	80031f0 <putchar>
		gotoxy(16,2);
 8001b08:	2102      	movs	r1, #2
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f7ff f88e 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001b10:	20df      	movs	r0, #223	; 0xdf
 8001b12:	f001 fb6d 	bl	80031f0 <putchar>
		gotoxy(16,1);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2010      	movs	r0, #16
 8001b1a:	f7ff f887 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001b1e:	20dc      	movs	r0, #220	; 0xdc
 8001b20:	f001 fb66 	bl	80031f0 <putchar>
	}
	if(gameState->cityLives >= 2){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d91b      	bls.n	8001b66 <drawhearth+0xae>
		gotoxy(19,1);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2013      	movs	r0, #19
 8001b32:	f7ff f87b 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001b36:	20db      	movs	r0, #219	; 0xdb
 8001b38:	f001 fb5a 	bl	80031f0 <putchar>
		gotoxy(21,1);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2015      	movs	r0, #21
 8001b40:	f7ff f874 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001b44:	20db      	movs	r0, #219	; 0xdb
 8001b46:	f001 fb53 	bl	80031f0 <putchar>
		gotoxy(20,2);
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f7ff f86d 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001b52:	20df      	movs	r0, #223	; 0xdf
 8001b54:	f001 fb4c 	bl	80031f0 <putchar>
		gotoxy(20,1);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2014      	movs	r0, #20
 8001b5c:	f7ff f866 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001b60:	20dc      	movs	r0, #220	; 0xdc
 8001b62:	f001 fb45 	bl	80031f0 <putchar>

	}
	if(gameState->cityLives >= 3){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d91b      	bls.n	8001ba8 <drawhearth+0xf0>
		gotoxy(23,1);
 8001b70:	2101      	movs	r1, #1
 8001b72:	2017      	movs	r0, #23
 8001b74:	f7ff f85a 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001b78:	20db      	movs	r0, #219	; 0xdb
 8001b7a:	f001 fb39 	bl	80031f0 <putchar>
		gotoxy(25,1);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2019      	movs	r0, #25
 8001b82:	f7ff f853 	bl	8000c2c <gotoxy>
		printf("%c",219);
 8001b86:	20db      	movs	r0, #219	; 0xdb
 8001b88:	f001 fb32 	bl	80031f0 <putchar>
		gotoxy(24,2);
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	2018      	movs	r0, #24
 8001b90:	f7ff f84c 	bl	8000c2c <gotoxy>
		printf("%c",223);
 8001b94:	20df      	movs	r0, #223	; 0xdf
 8001b96:	f001 fb2b 	bl	80031f0 <putchar>
		gotoxy(24,1);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2018      	movs	r0, #24
 8001b9e:	f7ff f845 	bl	8000c2c <gotoxy>
		printf("%c",220);
 8001ba2:	20dc      	movs	r0, #220	; 0xdc
 8001ba4:	f001 fb24 	bl	80031f0 <putchar>
	}
	fgcolor(15);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f7ff f813 	bl	8000bd4 <fgcolor>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08004424 	.word	0x08004424

08001bbc <drawEnemy>:
=======
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8002e40:	2101      	movs	r1, #1
 8002e42:	200f      	movs	r0, #15
 8002e44:	f7fe fe30 	bl	8001aa8 <gotoxy>
	printf("           ");
 8002e48:	483b      	ldr	r0, [pc, #236]	; (8002f38 <drawhearth+0x100>)
 8002e4a:	f001 fbd7 	bl	80045fc <iprintf>
	gotoxy(15,2);
 8002e4e:	2102      	movs	r1, #2
 8002e50:	200f      	movs	r0, #15
 8002e52:	f7fe fe29 	bl	8001aa8 <gotoxy>
	printf("           ");
 8002e56:	4838      	ldr	r0, [pc, #224]	; (8002f38 <drawhearth+0x100>)
 8002e58:	f001 fbd0 	bl	80045fc <iprintf>
	fgcolor(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7fe fdf7 	bl	8001a50 <fgcolor>

	if(gameState->cityLives >= 1){
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <drawhearth+0x6c>
		gotoxy(15,1);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	200f      	movs	r0, #15
 8002e70:	f7fe fe1a 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002e74:	20db      	movs	r0, #219	; 0xdb
 8002e76:	f001 fbd9 	bl	800462c <putchar>
		gotoxy(17,1);
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2011      	movs	r0, #17
 8002e7e:	f7fe fe13 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002e82:	20db      	movs	r0, #219	; 0xdb
 8002e84:	f001 fbd2 	bl	800462c <putchar>
		gotoxy(16,2);
 8002e88:	2102      	movs	r1, #2
 8002e8a:	2010      	movs	r0, #16
 8002e8c:	f7fe fe0c 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 8002e90:	20df      	movs	r0, #223	; 0xdf
 8002e92:	f001 fbcb 	bl	800462c <putchar>
		gotoxy(16,1);
 8002e96:	2101      	movs	r1, #1
 8002e98:	2010      	movs	r0, #16
 8002e9a:	f7fe fe05 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 8002e9e:	20dc      	movs	r0, #220	; 0xdc
 8002ea0:	f001 fbc4 	bl	800462c <putchar>
	}
	if(gameState->cityLives >= 2){
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d91b      	bls.n	8002ee6 <drawhearth+0xae>
		gotoxy(19,1);
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2013      	movs	r0, #19
 8002eb2:	f7fe fdf9 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002eb6:	20db      	movs	r0, #219	; 0xdb
 8002eb8:	f001 fbb8 	bl	800462c <putchar>
		gotoxy(21,1);
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2015      	movs	r0, #21
 8002ec0:	f7fe fdf2 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002ec4:	20db      	movs	r0, #219	; 0xdb
 8002ec6:	f001 fbb1 	bl	800462c <putchar>
		gotoxy(20,2);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	2014      	movs	r0, #20
 8002ece:	f7fe fdeb 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 8002ed2:	20df      	movs	r0, #223	; 0xdf
 8002ed4:	f001 fbaa 	bl	800462c <putchar>
		gotoxy(20,1);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2014      	movs	r0, #20
 8002edc:	f7fe fde4 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 8002ee0:	20dc      	movs	r0, #220	; 0xdc
 8002ee2:	f001 fba3 	bl	800462c <putchar>

	}
	if(gameState->cityLives >= 3){
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d91b      	bls.n	8002f28 <drawhearth+0xf0>
		gotoxy(23,1);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	2017      	movs	r0, #23
 8002ef4:	f7fe fdd8 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002ef8:	20db      	movs	r0, #219	; 0xdb
 8002efa:	f001 fb97 	bl	800462c <putchar>
		gotoxy(25,1);
 8002efe:	2101      	movs	r1, #1
 8002f00:	2019      	movs	r0, #25
 8002f02:	f7fe fdd1 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8002f06:	20db      	movs	r0, #219	; 0xdb
 8002f08:	f001 fb90 	bl	800462c <putchar>
		gotoxy(24,2);
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	2018      	movs	r0, #24
 8002f10:	f7fe fdca 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 8002f14:	20df      	movs	r0, #223	; 0xdf
 8002f16:	f001 fb89 	bl	800462c <putchar>
		gotoxy(24,1);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2018      	movs	r0, #24
 8002f1e:	f7fe fdc3 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 8002f22:	20dc      	movs	r0, #220	; 0xdc
 8002f24:	f001 fb82 	bl	800462c <putchar>
	}
	fgcolor(15);
 8002f28:	200f      	movs	r0, #15
 8002f2a:	f7fe fd91 	bl	8001a50 <fgcolor>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	080059c4 	.word	0x080059c4

08002f3c <drawEnemy>:
>>>>>>> Stashed changes
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
<<<<<<< Updated upstream
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	int isLastElement = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8001bce:	e040      	b.n	8001c52 <drawEnemy+0x96>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd2a 	bl	8001632 <fpToInt>
 8001bde:	4604      	mov	r4, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fd22 	bl	8001632 <fpToInt>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff f81a 	bl	8000c2c <gotoxy>
		printf("  ");
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <drawEnemy+0xa8>)
 8001bfa:	f001 fae1 	bl	80031c0 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd13 	bl	8001632 <fpToInt>
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd0b 	bl	8001632 <fpToInt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff f803 	bl	8000c2c <gotoxy>
		printf(":E");
 8001c26:	4810      	ldr	r0, [pc, #64]	; (8001c68 <drawEnemy+0xac>)
 8001c28:	f001 faca 	bl	80031c0 <iprintf>
		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6852      	ldr	r2, [r2, #4]
 8001c4a:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1bb      	bne.n	8001bd0 <drawEnemy+0x14>
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	08004430 	.word	0x08004430
 8001c68:	08004434 	.word	0x08004434

08001c6c <drawCity>:
=======
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af04      	add	r7, sp, #16
 8002f42:	6078      	str	r0, [r7, #4]
	//int isLastElement = 0;
	enemyNode_t* thisNode = gameState->enemyLL;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8002f4a:	e087      	b.n	800305c <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fcaa 	bl	80028ae <fpToInt>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fca2 	bl	80028ae <fpToInt>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	0fda      	lsrs	r2, r3, #31
 8002f6e:	4413      	add	r3, r2
 8002f70:	105b      	asrs	r3, r3, #1
 8002f72:	4619      	mov	r1, r3
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7fe fd97 	bl	8001aa8 <gotoxy>
		printf("       ");
 8002f7a:	483d      	ldr	r0, [pc, #244]	; (8003070 <drawEnemy+0x134>)
 8002f7c:	f001 fb3e 	bl	80045fc <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fc90 	bl	80028ae <fpToInt>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fc88 	bl	80028ae <fpToInt>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	0fda      	lsrs	r2, r3, #31
 8002fa4:	4413      	add	r3, r2
 8002fa6:	105b      	asrs	r3, r3, #1
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fe fd7c 	bl	8001aa8 <gotoxy>
		printf("       ");
 8002fb0:	482f      	ldr	r0, [pc, #188]	; (8003070 <drawEnemy+0x134>)
 8002fb2:	f001 fb23 	bl	80045fc <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fc75 	bl	80028ae <fpToInt>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fc6d 	bl	80028ae <fpToInt>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0fda      	lsrs	r2, r3, #31
 8002fd8:	4413      	add	r3, r2
 8002fda:	105b      	asrs	r3, r3, #1
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7fe fd62 	bl	8001aa8 <gotoxy>
		printf("  o o  ");
 8002fe4:	4823      	ldr	r0, [pc, #140]	; (8003074 <drawEnemy+0x138>)
 8002fe6:	f001 fb09 	bl	80045fc <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fc5b 	bl	80028ae <fpToInt>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fc53 	bl	80028ae <fpToInt>
 8003008:	4603      	mov	r3, r0
 800300a:	3302      	adds	r3, #2
 800300c:	0fda      	lsrs	r2, r3, #31
 800300e:	4413      	add	r3, r2
 8003010:	105b      	asrs	r3, r3, #1
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7fe fd47 	bl	8001aa8 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 800301a:	23bb      	movs	r3, #187	; 0xbb
 800301c:	9303      	str	r3, [sp, #12]
 800301e:	23cd      	movs	r3, #205	; 0xcd
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	23cd      	movs	r3, #205	; 0xcd
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	23cd      	movs	r3, #205	; 0xcd
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	23cd      	movs	r3, #205	; 0xcd
 800302c:	22cd      	movs	r2, #205	; 0xcd
 800302e:	21c9      	movs	r1, #201	; 0xc9
 8003030:	4811      	ldr	r0, [pc, #68]	; (8003078 <drawEnemy+0x13c>)
 8003032:	f001 fae3 	bl	80045fc <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6852      	ldr	r2, [r2, #4]
 8003054:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f47f af74 	bne.w	8002f4c <drawEnemy+0x10>
	}
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	080059d0 	.word	0x080059d0
 8003074:	080059d8 	.word	0x080059d8
 8003078:	080059e0 	.word	0x080059e0

0800307c <drawCity>:
>>>>>>> Stashed changes
//47 92


}

void drawCity(){
<<<<<<< Updated upstream
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

	gotoxy(14,44);
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	200e      	movs	r0, #14
 8001c74:	f7fe ffda 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c78:	20db      	movs	r0, #219	; 0xdb
 8001c7a:	f001 fab9 	bl	80031f0 <putchar>

	gotoxy(16,44);
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	2010      	movs	r0, #16
 8001c82:	f7fe ffd3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c86:	20db      	movs	r0, #219	; 0xdb
 8001c88:	f001 fab2 	bl	80031f0 <putchar>

	gotoxy(17,44);
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	2011      	movs	r0, #17
 8001c90:	f7fe ffcc 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001c94:	20db      	movs	r0, #219	; 0xdb
 8001c96:	f001 faab 	bl	80031f0 <putchar>
	gotoxy(17,43);
 8001c9a:	212b      	movs	r1, #43	; 0x2b
 8001c9c:	2011      	movs	r0, #17
 8001c9e:	f7fe ffc5 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ca2:	20db      	movs	r0, #219	; 0xdb
 8001ca4:	f001 faa4 	bl	80031f0 <putchar>

	gotoxy(19,44);
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	2013      	movs	r0, #19
 8001cac:	f7fe ffbe 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001cb0:	20dc      	movs	r0, #220	; 0xdc
 8001cb2:	f001 fa9d 	bl	80031f0 <putchar>

	gotoxy(21,44);
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	2015      	movs	r0, #21
 8001cba:	f7fe ffb7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001cbe:	20db      	movs	r0, #219	; 0xdb
 8001cc0:	f001 fa96 	bl	80031f0 <putchar>

	gotoxy(23,44);
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	2017      	movs	r0, #23
 8001cc8:	f7fe ffb0 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ccc:	20db      	movs	r0, #219	; 0xdb
 8001cce:	f001 fa8f 	bl	80031f0 <putchar>
	gotoxy(23,43);
 8001cd2:	212b      	movs	r1, #43	; 0x2b
 8001cd4:	2017      	movs	r0, #23
 8001cd6:	f7fe ffa9 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001cda:	20dc      	movs	r0, #220	; 0xdc
 8001cdc:	f001 fa88 	bl	80031f0 <putchar>

	gotoxy(25,44);
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	2019      	movs	r0, #25
 8001ce4:	f7fe ffa2 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ce8:	20db      	movs	r0, #219	; 0xdb
 8001cea:	f001 fa81 	bl	80031f0 <putchar>
	gotoxy(25,43);
 8001cee:	212b      	movs	r1, #43	; 0x2b
 8001cf0:	2019      	movs	r0, #25
 8001cf2:	f7fe ff9b 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001cf6:	20db      	movs	r0, #219	; 0xdb
 8001cf8:	f001 fa7a 	bl	80031f0 <putchar>
	gotoxy(25,42);
 8001cfc:	212a      	movs	r1, #42	; 0x2a
 8001cfe:	2019      	movs	r0, #25
 8001d00:	f7fe ff94 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d04:	20db      	movs	r0, #219	; 0xdb
 8001d06:	f001 fa73 	bl	80031f0 <putchar>

	gotoxy(27,44);
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	201b      	movs	r0, #27
 8001d0e:	f7fe ff8d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d12:	20db      	movs	r0, #219	; 0xdb
 8001d14:	f001 fa6c 	bl	80031f0 <putchar>
	gotoxy(27,43);
 8001d18:	212b      	movs	r1, #43	; 0x2b
 8001d1a:	201b      	movs	r0, #27
 8001d1c:	f7fe ff86 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d20:	20dc      	movs	r0, #220	; 0xdc
 8001d22:	f001 fa65 	bl	80031f0 <putchar>

	gotoxy(28,44);
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	201c      	movs	r0, #28
 8001d2a:	f7fe ff7f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d2e:	20db      	movs	r0, #219	; 0xdb
 8001d30:	f001 fa5e 	bl	80031f0 <putchar>

	gotoxy(36,44);
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	2024      	movs	r0, #36	; 0x24
 8001d38:	f7fe ff78 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d3c:	20db      	movs	r0, #219	; 0xdb
 8001d3e:	f001 fa57 	bl	80031f0 <putchar>
	gotoxy(36,43);
 8001d42:	212b      	movs	r1, #43	; 0x2b
 8001d44:	2024      	movs	r0, #36	; 0x24
 8001d46:	f7fe ff71 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d4a:	20db      	movs	r0, #219	; 0xdb
 8001d4c:	f001 fa50 	bl	80031f0 <putchar>

	gotoxy(37,44);
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	2025      	movs	r0, #37	; 0x25
 8001d54:	f7fe ff6a 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d58:	20db      	movs	r0, #219	; 0xdb
 8001d5a:	f001 fa49 	bl	80031f0 <putchar>

	gotoxy(38,44);
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	2026      	movs	r0, #38	; 0x26
 8001d62:	f7fe ff63 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001d66:	20dc      	movs	r0, #220	; 0xdc
 8001d68:	f001 fa42 	bl	80031f0 <putchar>

	gotoxy(40,44);
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	2028      	movs	r0, #40	; 0x28
 8001d70:	f7fe ff5c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d74:	20db      	movs	r0, #219	; 0xdb
 8001d76:	f001 fa3b 	bl	80031f0 <putchar>
	gotoxy(40,43);
 8001d7a:	212b      	movs	r1, #43	; 0x2b
 8001d7c:	2028      	movs	r0, #40	; 0x28
 8001d7e:	f7fe ff55 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d82:	20db      	movs	r0, #219	; 0xdb
 8001d84:	f001 fa34 	bl	80031f0 <putchar>

	gotoxy(41,43);
 8001d88:	212b      	movs	r1, #43	; 0x2b
 8001d8a:	2029      	movs	r0, #41	; 0x29
 8001d8c:	f7fe ff4e 	bl	8000c2c <gotoxy>
	printf("%c",205);
 8001d90:	20cd      	movs	r0, #205	; 0xcd
 8001d92:	f001 fa2d 	bl	80031f0 <putchar>

	gotoxy(42,44);
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	202a      	movs	r0, #42	; 0x2a
 8001d9a:	f7fe ff47 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001d9e:	20db      	movs	r0, #219	; 0xdb
 8001da0:	f001 fa26 	bl	80031f0 <putchar>
	gotoxy(42,43);
 8001da4:	212b      	movs	r1, #43	; 0x2b
 8001da6:	202a      	movs	r0, #42	; 0x2a
 8001da8:	f7fe ff40 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001dac:	20db      	movs	r0, #219	; 0xdb
 8001dae:	f001 fa1f 	bl	80031f0 <putchar>

	gotoxy(45,44);
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	202d      	movs	r0, #45	; 0x2d
 8001db6:	f7fe ff39 	bl	8000c2c <gotoxy>
	printf("%c",186);
 8001dba:	20ba      	movs	r0, #186	; 0xba
 8001dbc:	f001 fa18 	bl	80031f0 <putchar>

	gotoxy(47,44);
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	202f      	movs	r0, #47	; 0x2f
 8001dc4:	f7fe ff32 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001dc8:	20dc      	movs	r0, #220	; 0xdc
 8001dca:	f001 fa11 	bl	80031f0 <putchar>

	gotoxy(55,44);
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	2037      	movs	r0, #55	; 0x37
 8001dd2:	f7fe ff2b 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001dd6:	20db      	movs	r0, #219	; 0xdb
 8001dd8:	f001 fa0a 	bl	80031f0 <putchar>
	gotoxy(55,43);
 8001ddc:	212b      	movs	r1, #43	; 0x2b
 8001dde:	2037      	movs	r0, #55	; 0x37
 8001de0:	f7fe ff24 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001de4:	20dc      	movs	r0, #220	; 0xdc
 8001de6:	f001 fa03 	bl	80031f0 <putchar>

	gotoxy(58,44);
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	203a      	movs	r0, #58	; 0x3a
 8001dee:	f7fe ff1d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001df2:	20db      	movs	r0, #219	; 0xdb
 8001df4:	f001 f9fc 	bl	80031f0 <putchar>
	gotoxy(58,43);
 8001df8:	212b      	movs	r1, #43	; 0x2b
 8001dfa:	203a      	movs	r0, #58	; 0x3a
 8001dfc:	f7fe ff16 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e00:	20db      	movs	r0, #219	; 0xdb
 8001e02:	f001 f9f5 	bl	80031f0 <putchar>
	gotoxy(58,42);
 8001e06:	212a      	movs	r1, #42	; 0x2a
 8001e08:	203a      	movs	r0, #58	; 0x3a
 8001e0a:	f7fe ff0f 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001e0e:	20dc      	movs	r0, #220	; 0xdc
 8001e10:	f001 f9ee 	bl	80031f0 <putchar>

	gotoxy(59,44);
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	203b      	movs	r0, #59	; 0x3b
 8001e18:	f7fe ff08 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e1c:	20db      	movs	r0, #219	; 0xdb
 8001e1e:	f001 f9e7 	bl	80031f0 <putchar>
	gotoxy(59,43);
 8001e22:	212b      	movs	r1, #43	; 0x2b
 8001e24:	203b      	movs	r0, #59	; 0x3b
 8001e26:	f7fe ff01 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001e2a:	20dc      	movs	r0, #220	; 0xdc
 8001e2c:	f001 f9e0 	bl	80031f0 <putchar>

	gotoxy(60,44);
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	203c      	movs	r0, #60	; 0x3c
 8001e34:	f7fe fefa 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e38:	20db      	movs	r0, #219	; 0xdb
 8001e3a:	f001 f9d9 	bl	80031f0 <putchar>

	gotoxy(61,44);
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	203d      	movs	r0, #61	; 0x3d
 8001e42:	f7fe fef3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e46:	20db      	movs	r0, #219	; 0xdb
 8001e48:	f001 f9d2 	bl	80031f0 <putchar>
	gotoxy(61,43);
 8001e4c:	212b      	movs	r1, #43	; 0x2b
 8001e4e:	203d      	movs	r0, #61	; 0x3d
 8001e50:	f7fe feec 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e54:	20db      	movs	r0, #219	; 0xdb
 8001e56:	f001 f9cb 	bl	80031f0 <putchar>

	gotoxy(63,44);
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	203f      	movs	r0, #63	; 0x3f
 8001e5e:	f7fe fee5 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e62:	20db      	movs	r0, #219	; 0xdb
 8001e64:	f001 f9c4 	bl	80031f0 <putchar>

	gotoxy(64,44);
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	2040      	movs	r0, #64	; 0x40
 8001e6c:	f7fe fede 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001e70:	20dc      	movs	r0, #220	; 0xdc
 8001e72:	f001 f9bd 	bl	80031f0 <putchar>

	gotoxy(65,44);
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	2041      	movs	r0, #65	; 0x41
 8001e7a:	f7fe fed7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e7e:	20db      	movs	r0, #219	; 0xdb
 8001e80:	f001 f9b6 	bl	80031f0 <putchar>

	gotoxy(67,44);
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	2043      	movs	r0, #67	; 0x43
 8001e88:	f7fe fed0 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e8c:	20db      	movs	r0, #219	; 0xdb
 8001e8e:	f001 f9af 	bl	80031f0 <putchar>
	gotoxy(67,43);
 8001e92:	212b      	movs	r1, #43	; 0x2b
 8001e94:	2043      	movs	r0, #67	; 0x43
 8001e96:	f7fe fec9 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001e9a:	20db      	movs	r0, #219	; 0xdb
 8001e9c:	f001 f9a8 	bl	80031f0 <putchar>
	gotoxy(67,42);
 8001ea0:	212a      	movs	r1, #42	; 0x2a
 8001ea2:	2043      	movs	r0, #67	; 0x43
 8001ea4:	f7fe fec2 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ea8:	20db      	movs	r0, #219	; 0xdb
 8001eaa:	f001 f9a1 	bl	80031f0 <putchar>

	gotoxy(69,44);
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	2045      	movs	r0, #69	; 0x45
 8001eb2:	f7fe febb 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001eb6:	20db      	movs	r0, #219	; 0xdb
 8001eb8:	f001 f99a 	bl	80031f0 <putchar>
	gotoxy(69,43);
 8001ebc:	212b      	movs	r1, #43	; 0x2b
 8001ebe:	2045      	movs	r0, #69	; 0x45
 8001ec0:	f7fe feb4 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ec4:	20db      	movs	r0, #219	; 0xdb
 8001ec6:	f001 f993 	bl	80031f0 <putchar>
	gotoxy(69,42);
 8001eca:	212a      	movs	r1, #42	; 0x2a
 8001ecc:	2045      	movs	r0, #69	; 0x45
 8001ece:	f7fe fead 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ed2:	20db      	movs	r0, #219	; 0xdb
 8001ed4:	f001 f98c 	bl	80031f0 <putchar>

	gotoxy(71,44);
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	2047      	movs	r0, #71	; 0x47
 8001edc:	f7fe fea6 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001ee0:	20db      	movs	r0, #219	; 0xdb
 8001ee2:	f001 f985 	bl	80031f0 <putchar>
	gotoxy(71,43);
 8001ee6:	212b      	movs	r1, #43	; 0x2b
 8001ee8:	2047      	movs	r0, #71	; 0x47
 8001eea:	f7fe fe9f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001eee:	20db      	movs	r0, #219	; 0xdb
 8001ef0:	f001 f97e 	bl	80031f0 <putchar>
	gotoxy(71,42);
 8001ef4:	212a      	movs	r1, #42	; 0x2a
 8001ef6:	2047      	movs	r0, #71	; 0x47
 8001ef8:	f7fe fe98 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001efc:	20db      	movs	r0, #219	; 0xdb
 8001efe:	f001 f977 	bl	80031f0 <putchar>

	gotoxy(73,44);
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	2049      	movs	r0, #73	; 0x49
 8001f06:	f7fe fe91 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f0a:	20db      	movs	r0, #219	; 0xdb
 8001f0c:	f001 f970 	bl	80031f0 <putchar>
	gotoxy(73,43);
 8001f10:	212b      	movs	r1, #43	; 0x2b
 8001f12:	2049      	movs	r0, #73	; 0x49
 8001f14:	f7fe fe8a 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f18:	20db      	movs	r0, #219	; 0xdb
 8001f1a:	f001 f969 	bl	80031f0 <putchar>

	gotoxy(74,44);
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	204a      	movs	r0, #74	; 0x4a
 8001f22:	f7fe fe83 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f26:	20db      	movs	r0, #219	; 0xdb
 8001f28:	f001 f962 	bl	80031f0 <putchar>

	gotoxy(76,44);
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	204c      	movs	r0, #76	; 0x4c
 8001f30:	f7fe fe7c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f34:	20db      	movs	r0, #219	; 0xdb
 8001f36:	f001 f95b 	bl	80031f0 <putchar>

	gotoxy(77,44);
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	204d      	movs	r0, #77	; 0x4d
 8001f3e:	f7fe fe75 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f42:	20db      	movs	r0, #219	; 0xdb
 8001f44:	f001 f954 	bl	80031f0 <putchar>
	gotoxy(77,43);
 8001f48:	212b      	movs	r1, #43	; 0x2b
 8001f4a:	204d      	movs	r0, #77	; 0x4d
 8001f4c:	f7fe fe6e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f50:	20db      	movs	r0, #219	; 0xdb
 8001f52:	f001 f94d 	bl	80031f0 <putchar>

	gotoxy(79,44);
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	204f      	movs	r0, #79	; 0x4f
 8001f5a:	f7fe fe67 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f5e:	20db      	movs	r0, #219	; 0xdb
 8001f60:	f001 f946 	bl	80031f0 <putchar>
	gotoxy(79,44);
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	204f      	movs	r0, #79	; 0x4f
 8001f68:	f7fe fe60 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001f6c:	20dc      	movs	r0, #220	; 0xdc
 8001f6e:	f001 f93f 	bl	80031f0 <putchar>

	gotoxy(81,44);
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	2051      	movs	r0, #81	; 0x51
 8001f76:	f7fe fe59 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f7a:	20db      	movs	r0, #219	; 0xdb
 8001f7c:	f001 f938 	bl	80031f0 <putchar>
	gotoxy(81,43);
 8001f80:	212b      	movs	r1, #43	; 0x2b
 8001f82:	2051      	movs	r0, #81	; 0x51
 8001f84:	f7fe fe52 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f88:	20db      	movs	r0, #219	; 0xdb
 8001f8a:	f001 f931 	bl	80031f0 <putchar>

	gotoxy(82,44);
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	2052      	movs	r0, #82	; 0x52
 8001f92:	f7fe fe4b 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001f96:	20db      	movs	r0, #219	; 0xdb
 8001f98:	f001 f92a 	bl	80031f0 <putchar>

	gotoxy(85,44);
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	2055      	movs	r0, #85	; 0x55
 8001fa0:	f7fe fe44 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fa4:	20db      	movs	r0, #219	; 0xdb
 8001fa6:	f001 f923 	bl	80031f0 <putchar>
	gotoxy(85,43);
 8001faa:	212b      	movs	r1, #43	; 0x2b
 8001fac:	2055      	movs	r0, #85	; 0x55
 8001fae:	f7fe fe3d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fb2:	20db      	movs	r0, #219	; 0xdb
 8001fb4:	f001 f91c 	bl	80031f0 <putchar>
	gotoxy(85,42);
 8001fb8:	212a      	movs	r1, #42	; 0x2a
 8001fba:	2055      	movs	r0, #85	; 0x55
 8001fbc:	f7fe fe36 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001fc0:	20dc      	movs	r0, #220	; 0xdc
 8001fc2:	f001 f915 	bl	80031f0 <putchar>

	gotoxy(86,44);
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	2056      	movs	r0, #86	; 0x56
 8001fca:	f7fe fe2f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fce:	20db      	movs	r0, #219	; 0xdb
 8001fd0:	f001 f90e 	bl	80031f0 <putchar>

	gotoxy(87,44);
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	2057      	movs	r0, #87	; 0x57
 8001fd8:	f7fe fe28 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001fdc:	20dc      	movs	r0, #220	; 0xdc
 8001fde:	f001 f907 	bl	80031f0 <putchar>

	gotoxy(88,44);
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	2058      	movs	r0, #88	; 0x58
 8001fe6:	f7fe fe21 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001fea:	20db      	movs	r0, #219	; 0xdb
 8001fec:	f001 f900 	bl	80031f0 <putchar>
	gotoxy(88,43);
 8001ff0:	212b      	movs	r1, #43	; 0x2b
 8001ff2:	2058      	movs	r0, #88	; 0x58
 8001ff4:	f7fe fe1a 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001ff8:	20dc      	movs	r0, #220	; 0xdc
 8001ffa:	f001 f8f9 	bl	80031f0 <putchar>

	gotoxy(93,44);
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	205d      	movs	r0, #93	; 0x5d
 8002002:	f7fe fe13 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002006:	20db      	movs	r0, #219	; 0xdb
 8002008:	f001 f8f2 	bl	80031f0 <putchar>

	gotoxy(94,44);
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	205e      	movs	r0, #94	; 0x5e
 8002010:	f7fe fe0c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002014:	20db      	movs	r0, #219	; 0xdb
 8002016:	f001 f8eb 	bl	80031f0 <putchar>
	gotoxy(94,43);
 800201a:	212b      	movs	r1, #43	; 0x2b
 800201c:	205e      	movs	r0, #94	; 0x5e
 800201e:	f7fe fe05 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002022:	20dc      	movs	r0, #220	; 0xdc
 8002024:	f001 f8e4 	bl	80031f0 <putchar>

	gotoxy(95,44);
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	205f      	movs	r0, #95	; 0x5f
 800202c:	f7fe fdfe 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002030:	20dc      	movs	r0, #220	; 0xdc
 8002032:	f001 f8dd 	bl	80031f0 <putchar>

	gotoxy(96,44);
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	2060      	movs	r0, #96	; 0x60
 800203a:	f7fe fdf7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800203e:	20db      	movs	r0, #219	; 0xdb
 8002040:	f001 f8d6 	bl	80031f0 <putchar>

	gotoxy(98,44);
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	2062      	movs	r0, #98	; 0x62
 8002048:	f7fe fdf0 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800204c:	20db      	movs	r0, #219	; 0xdb
 800204e:	f001 f8cf 	bl	80031f0 <putchar>
	gotoxy(98,43);
 8002052:	212b      	movs	r1, #43	; 0x2b
 8002054:	2062      	movs	r0, #98	; 0x62
 8002056:	f7fe fde9 	bl	8000c2c <gotoxy>
	printf("%c",220);
 800205a:	20dc      	movs	r0, #220	; 0xdc
 800205c:	f001 f8c8 	bl	80031f0 <putchar>

	gotoxy(99,44);
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	2063      	movs	r0, #99	; 0x63
 8002064:	f7fe fde2 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002068:	20db      	movs	r0, #219	; 0xdb
 800206a:	f001 f8c1 	bl	80031f0 <putchar>

	gotoxy(103,44);
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	2067      	movs	r0, #103	; 0x67
 8002072:	f7fe fddb 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002076:	20db      	movs	r0, #219	; 0xdb
 8002078:	f001 f8ba 	bl	80031f0 <putchar>

	gotoxy(104,44);
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	2068      	movs	r0, #104	; 0x68
 8002080:	f7fe fdd4 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002084:	20dc      	movs	r0, #220	; 0xdc
 8002086:	f001 f8b3 	bl	80031f0 <putchar>

	gotoxy(107,44);
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	206b      	movs	r0, #107	; 0x6b
 800208e:	f7fe fdcd 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002092:	20db      	movs	r0, #219	; 0xdb
 8002094:	f001 f8ac 	bl	80031f0 <putchar>

	gotoxy(108,44);
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	206c      	movs	r0, #108	; 0x6c
 800209c:	f7fe fdc6 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020a0:	20db      	movs	r0, #219	; 0xdb
 80020a2:	f001 f8a5 	bl	80031f0 <putchar>
	gotoxy(108,43);
 80020a6:	212b      	movs	r1, #43	; 0x2b
 80020a8:	206c      	movs	r0, #108	; 0x6c
 80020aa:	f7fe fdbf 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020ae:	20db      	movs	r0, #219	; 0xdb
 80020b0:	f001 f89e 	bl	80031f0 <putchar>

	gotoxy(109,44);
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	206d      	movs	r0, #109	; 0x6d
 80020b8:	f7fe fdb8 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80020bc:	20dc      	movs	r0, #220	; 0xdc
 80020be:	f001 f897 	bl	80031f0 <putchar>

	gotoxy(112,44);
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	2070      	movs	r0, #112	; 0x70
 80020c6:	f7fe fdb1 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020ca:	20db      	movs	r0, #219	; 0xdb
 80020cc:	f001 f890 	bl	80031f0 <putchar>

	gotoxy(113,44);
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	2071      	movs	r0, #113	; 0x71
 80020d4:	f7fe fdaa 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80020d8:	20dc      	movs	r0, #220	; 0xdc
 80020da:	f001 f889 	bl	80031f0 <putchar>

	gotoxy(114,44);
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	2072      	movs	r0, #114	; 0x72
 80020e2:	f7fe fda3 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020e6:	20db      	movs	r0, #219	; 0xdb
 80020e8:	f001 f882 	bl	80031f0 <putchar>
	gotoxy(114,43);
 80020ec:	212b      	movs	r1, #43	; 0x2b
 80020ee:	2072      	movs	r0, #114	; 0x72
 80020f0:	f7fe fd9c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80020f4:	20db      	movs	r0, #219	; 0xdb
 80020f6:	f001 f87b 	bl	80031f0 <putchar>

	gotoxy(115,44);
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	2073      	movs	r0, #115	; 0x73
 80020fe:	f7fe fd95 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002102:	20db      	movs	r0, #219	; 0xdb
 8002104:	f001 f874 	bl	80031f0 <putchar>

	gotoxy(120,44);
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	2078      	movs	r0, #120	; 0x78
 800210c:	f7fe fd8e 	bl	8000c2c <gotoxy>
	printf("%c",47);
 8002110:	202f      	movs	r0, #47	; 0x2f
 8002112:	f001 f86d 	bl	80031f0 <putchar>
	gotoxy(121,43);
 8002116:	212b      	movs	r1, #43	; 0x2b
 8002118:	2079      	movs	r0, #121	; 0x79
 800211a:	f7fe fd87 	bl	8000c2c <gotoxy>
	printf("%c",47);
 800211e:	202f      	movs	r0, #47	; 0x2f
 8002120:	f001 f866 	bl	80031f0 <putchar>
	gotoxy(122,43);
 8002124:	212b      	movs	r1, #43	; 0x2b
 8002126:	207a      	movs	r0, #122	; 0x7a
 8002128:	f7fe fd80 	bl	8000c2c <gotoxy>
	printf("%c",223);
 800212c:	20df      	movs	r0, #223	; 0xdf
 800212e:	f001 f85f 	bl	80031f0 <putchar>
	gotoxy(122,42);
 8002132:	212a      	movs	r1, #42	; 0x2a
 8002134:	207a      	movs	r0, #122	; 0x7a
 8002136:	f7fe fd79 	bl	8000c2c <gotoxy>
	printf("%c",168);
 800213a:	20a8      	movs	r0, #168	; 0xa8
 800213c:	f001 f858 	bl	80031f0 <putchar>
	gotoxy(123,43);
 8002140:	212b      	movs	r1, #43	; 0x2b
 8002142:	207b      	movs	r0, #123	; 0x7b
 8002144:	f7fe fd72 	bl	8000c2c <gotoxy>
	printf("%c",92);
 8002148:	205c      	movs	r0, #92	; 0x5c
 800214a:	f001 f851 	bl	80031f0 <putchar>
	gotoxy(124,44);
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	207c      	movs	r0, #124	; 0x7c
 8002152:	f7fe fd6b 	bl	8000c2c <gotoxy>
	printf("%c",92);
 8002156:	205c      	movs	r0, #92	; 0x5c
 8002158:	f001 f84a 	bl	80031f0 <putchar>

	gotoxy(127,44);
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	207f      	movs	r0, #127	; 0x7f
 8002160:	f7fe fd64 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002164:	20db      	movs	r0, #219	; 0xdb
 8002166:	f001 f843 	bl	80031f0 <putchar>
	gotoxy(127,43);
 800216a:	212b      	movs	r1, #43	; 0x2b
 800216c:	207f      	movs	r0, #127	; 0x7f
 800216e:	f7fe fd5d 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002172:	20db      	movs	r0, #219	; 0xdb
 8002174:	f001 f83c 	bl	80031f0 <putchar>
	gotoxy(127,42);
 8002178:	212a      	movs	r1, #42	; 0x2a
 800217a:	207f      	movs	r0, #127	; 0x7f
 800217c:	f7fe fd56 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002180:	20db      	movs	r0, #219	; 0xdb
 8002182:	f001 f835 	bl	80031f0 <putchar>

	gotoxy(129,44);
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	2081      	movs	r0, #129	; 0x81
 800218a:	f7fe fd4f 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800218e:	20db      	movs	r0, #219	; 0xdb
 8002190:	f001 f82e 	bl	80031f0 <putchar>
	gotoxy(129,43);
 8002194:	212b      	movs	r1, #43	; 0x2b
 8002196:	2081      	movs	r0, #129	; 0x81
 8002198:	f7fe fd48 	bl	8000c2c <gotoxy>
	printf("%c",220);
 800219c:	20dc      	movs	r0, #220	; 0xdc
 800219e:	f001 f827 	bl	80031f0 <putchar>

	gotoxy(130,44);
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	2082      	movs	r0, #130	; 0x82
 80021a6:	f7fe fd41 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80021aa:	20db      	movs	r0, #219	; 0xdb
 80021ac:	f001 f820 	bl	80031f0 <putchar>

	gotoxy(131,44);
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	2083      	movs	r0, #131	; 0x83
 80021b4:	f7fe fd3a 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80021b8:	20dc      	movs	r0, #220	; 0xdc
 80021ba:	f001 f819 	bl	80031f0 <putchar>

	gotoxy(132,44);
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	2084      	movs	r0, #132	; 0x84
 80021c2:	f7fe fd33 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80021c6:	20db      	movs	r0, #219	; 0xdb
 80021c8:	f001 f812 	bl	80031f0 <putchar>

	gotoxy(133,44);
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	2085      	movs	r0, #133	; 0x85
 80021d0:	f7fe fd2c 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80021d4:	20db      	movs	r0, #219	; 0xdb
 80021d6:	f001 f80b 	bl	80031f0 <putchar>
	gotoxy(133,43);
 80021da:	212b      	movs	r1, #43	; 0x2b
 80021dc:	2085      	movs	r0, #133	; 0x85
 80021de:	f7fe fd25 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80021e2:	20db      	movs	r0, #219	; 0xdb
 80021e4:	f001 f804 	bl	80031f0 <putchar>

	gotoxy(134,44);
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	2086      	movs	r0, #134	; 0x86
 80021ec:	f7fe fd1e 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80021f0:	20db      	movs	r0, #219	; 0xdb
 80021f2:	f000 fffd 	bl	80031f0 <putchar>

	gotoxy(135,44);
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	2087      	movs	r0, #135	; 0x87
 80021fa:	f7fe fd17 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80021fe:	20dc      	movs	r0, #220	; 0xdc
 8002200:	f000 fff6 	bl	80031f0 <putchar>

	gotoxy(137,44);
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	2089      	movs	r0, #137	; 0x89
 8002208:	f7fe fd10 	bl	8000c2c <gotoxy>
	printf("%c",220);
 800220c:	20dc      	movs	r0, #220	; 0xdc
 800220e:	f000 ffef 	bl	80031f0 <putchar>

	gotoxy(139,44);
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	208b      	movs	r0, #139	; 0x8b
 8002216:	f7fe fd09 	bl	8000c2c <gotoxy>
	printf("%c",220);
 800221a:	20dc      	movs	r0, #220	; 0xdc
 800221c:	f000 ffe8 	bl	80031f0 <putchar>

	gotoxy(141,44);
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	208d      	movs	r0, #141	; 0x8d
 8002224:	f7fe fd02 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8002228:	20db      	movs	r0, #219	; 0xdb
 800222a:	f000 ffe1 	bl	80031f0 <putchar>

	gotoxy(142,44);
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	208e      	movs	r0, #142	; 0x8e
 8002232:	f7fe fcfb 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8002236:	20dc      	movs	r0, #220	; 0xdc
 8002238:	f000 ffda 	bl	80031f0 <putchar>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <createBulletNode>:
=======
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

	gotoxy(14,44);
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	200e      	movs	r0, #14
 8003084:	f7fe fd10 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003088:	20db      	movs	r0, #219	; 0xdb
 800308a:	f001 facf 	bl	800462c <putchar>

	gotoxy(16,44);
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	2010      	movs	r0, #16
 8003092:	f7fe fd09 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003096:	20db      	movs	r0, #219	; 0xdb
 8003098:	f001 fac8 	bl	800462c <putchar>

	gotoxy(17,44);
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	2011      	movs	r0, #17
 80030a0:	f7fe fd02 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80030a4:	20db      	movs	r0, #219	; 0xdb
 80030a6:	f001 fac1 	bl	800462c <putchar>
	gotoxy(17,43);
 80030aa:	212b      	movs	r1, #43	; 0x2b
 80030ac:	2011      	movs	r0, #17
 80030ae:	f7fe fcfb 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80030b2:	20db      	movs	r0, #219	; 0xdb
 80030b4:	f001 faba 	bl	800462c <putchar>

	gotoxy(19,44);
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	2013      	movs	r0, #19
 80030bc:	f7fe fcf4 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80030c0:	20dc      	movs	r0, #220	; 0xdc
 80030c2:	f001 fab3 	bl	800462c <putchar>

	gotoxy(21,44);
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	2015      	movs	r0, #21
 80030ca:	f7fe fced 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80030ce:	20db      	movs	r0, #219	; 0xdb
 80030d0:	f001 faac 	bl	800462c <putchar>

	gotoxy(23,44);
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	2017      	movs	r0, #23
 80030d8:	f7fe fce6 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80030dc:	20db      	movs	r0, #219	; 0xdb
 80030de:	f001 faa5 	bl	800462c <putchar>
	gotoxy(23,43);
 80030e2:	212b      	movs	r1, #43	; 0x2b
 80030e4:	2017      	movs	r0, #23
 80030e6:	f7fe fcdf 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80030ea:	20dc      	movs	r0, #220	; 0xdc
 80030ec:	f001 fa9e 	bl	800462c <putchar>

	gotoxy(25,44);
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	2019      	movs	r0, #25
 80030f4:	f7fe fcd8 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80030f8:	20db      	movs	r0, #219	; 0xdb
 80030fa:	f001 fa97 	bl	800462c <putchar>
	gotoxy(25,43);
 80030fe:	212b      	movs	r1, #43	; 0x2b
 8003100:	2019      	movs	r0, #25
 8003102:	f7fe fcd1 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003106:	20db      	movs	r0, #219	; 0xdb
 8003108:	f001 fa90 	bl	800462c <putchar>
	gotoxy(25,42);
 800310c:	212a      	movs	r1, #42	; 0x2a
 800310e:	2019      	movs	r0, #25
 8003110:	f7fe fcca 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003114:	20db      	movs	r0, #219	; 0xdb
 8003116:	f001 fa89 	bl	800462c <putchar>

	gotoxy(27,44);
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	201b      	movs	r0, #27
 800311e:	f7fe fcc3 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003122:	20db      	movs	r0, #219	; 0xdb
 8003124:	f001 fa82 	bl	800462c <putchar>
	gotoxy(27,43);
 8003128:	212b      	movs	r1, #43	; 0x2b
 800312a:	201b      	movs	r0, #27
 800312c:	f7fe fcbc 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003130:	20dc      	movs	r0, #220	; 0xdc
 8003132:	f001 fa7b 	bl	800462c <putchar>

	gotoxy(28,44);
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	201c      	movs	r0, #28
 800313a:	f7fe fcb5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800313e:	20db      	movs	r0, #219	; 0xdb
 8003140:	f001 fa74 	bl	800462c <putchar>

	gotoxy(36,44);
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	2024      	movs	r0, #36	; 0x24
 8003148:	f7fe fcae 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800314c:	20db      	movs	r0, #219	; 0xdb
 800314e:	f001 fa6d 	bl	800462c <putchar>
	gotoxy(36,43);
 8003152:	212b      	movs	r1, #43	; 0x2b
 8003154:	2024      	movs	r0, #36	; 0x24
 8003156:	f7fe fca7 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800315a:	20db      	movs	r0, #219	; 0xdb
 800315c:	f001 fa66 	bl	800462c <putchar>

	gotoxy(37,44);
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	2025      	movs	r0, #37	; 0x25
 8003164:	f7fe fca0 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003168:	20db      	movs	r0, #219	; 0xdb
 800316a:	f001 fa5f 	bl	800462c <putchar>

	gotoxy(38,44);
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	2026      	movs	r0, #38	; 0x26
 8003172:	f7fe fc99 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003176:	20dc      	movs	r0, #220	; 0xdc
 8003178:	f001 fa58 	bl	800462c <putchar>

	gotoxy(40,44);
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	2028      	movs	r0, #40	; 0x28
 8003180:	f7fe fc92 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003184:	20db      	movs	r0, #219	; 0xdb
 8003186:	f001 fa51 	bl	800462c <putchar>
	gotoxy(40,43);
 800318a:	212b      	movs	r1, #43	; 0x2b
 800318c:	2028      	movs	r0, #40	; 0x28
 800318e:	f7fe fc8b 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003192:	20db      	movs	r0, #219	; 0xdb
 8003194:	f001 fa4a 	bl	800462c <putchar>

	gotoxy(41,43);
 8003198:	212b      	movs	r1, #43	; 0x2b
 800319a:	2029      	movs	r0, #41	; 0x29
 800319c:	f7fe fc84 	bl	8001aa8 <gotoxy>
	printf("%c",205);
 80031a0:	20cd      	movs	r0, #205	; 0xcd
 80031a2:	f001 fa43 	bl	800462c <putchar>

	gotoxy(42,44);
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	202a      	movs	r0, #42	; 0x2a
 80031aa:	f7fe fc7d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80031ae:	20db      	movs	r0, #219	; 0xdb
 80031b0:	f001 fa3c 	bl	800462c <putchar>
	gotoxy(42,43);
 80031b4:	212b      	movs	r1, #43	; 0x2b
 80031b6:	202a      	movs	r0, #42	; 0x2a
 80031b8:	f7fe fc76 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80031bc:	20db      	movs	r0, #219	; 0xdb
 80031be:	f001 fa35 	bl	800462c <putchar>

	gotoxy(45,44);
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	202d      	movs	r0, #45	; 0x2d
 80031c6:	f7fe fc6f 	bl	8001aa8 <gotoxy>
	printf("%c",186);
 80031ca:	20ba      	movs	r0, #186	; 0xba
 80031cc:	f001 fa2e 	bl	800462c <putchar>

	gotoxy(47,44);
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	202f      	movs	r0, #47	; 0x2f
 80031d4:	f7fe fc68 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80031d8:	20dc      	movs	r0, #220	; 0xdc
 80031da:	f001 fa27 	bl	800462c <putchar>

	gotoxy(55,44);
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	2037      	movs	r0, #55	; 0x37
 80031e2:	f7fe fc61 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80031e6:	20db      	movs	r0, #219	; 0xdb
 80031e8:	f001 fa20 	bl	800462c <putchar>
	gotoxy(55,43);
 80031ec:	212b      	movs	r1, #43	; 0x2b
 80031ee:	2037      	movs	r0, #55	; 0x37
 80031f0:	f7fe fc5a 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80031f4:	20dc      	movs	r0, #220	; 0xdc
 80031f6:	f001 fa19 	bl	800462c <putchar>

	gotoxy(58,44);
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	203a      	movs	r0, #58	; 0x3a
 80031fe:	f7fe fc53 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003202:	20db      	movs	r0, #219	; 0xdb
 8003204:	f001 fa12 	bl	800462c <putchar>
	gotoxy(58,43);
 8003208:	212b      	movs	r1, #43	; 0x2b
 800320a:	203a      	movs	r0, #58	; 0x3a
 800320c:	f7fe fc4c 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003210:	20db      	movs	r0, #219	; 0xdb
 8003212:	f001 fa0b 	bl	800462c <putchar>
	gotoxy(58,42);
 8003216:	212a      	movs	r1, #42	; 0x2a
 8003218:	203a      	movs	r0, #58	; 0x3a
 800321a:	f7fe fc45 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800321e:	20dc      	movs	r0, #220	; 0xdc
 8003220:	f001 fa04 	bl	800462c <putchar>

	gotoxy(59,44);
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	203b      	movs	r0, #59	; 0x3b
 8003228:	f7fe fc3e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800322c:	20db      	movs	r0, #219	; 0xdb
 800322e:	f001 f9fd 	bl	800462c <putchar>
	gotoxy(59,43);
 8003232:	212b      	movs	r1, #43	; 0x2b
 8003234:	203b      	movs	r0, #59	; 0x3b
 8003236:	f7fe fc37 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800323a:	20dc      	movs	r0, #220	; 0xdc
 800323c:	f001 f9f6 	bl	800462c <putchar>

	gotoxy(60,44);
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	203c      	movs	r0, #60	; 0x3c
 8003244:	f7fe fc30 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003248:	20db      	movs	r0, #219	; 0xdb
 800324a:	f001 f9ef 	bl	800462c <putchar>

	gotoxy(61,44);
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	203d      	movs	r0, #61	; 0x3d
 8003252:	f7fe fc29 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003256:	20db      	movs	r0, #219	; 0xdb
 8003258:	f001 f9e8 	bl	800462c <putchar>
	gotoxy(61,43);
 800325c:	212b      	movs	r1, #43	; 0x2b
 800325e:	203d      	movs	r0, #61	; 0x3d
 8003260:	f7fe fc22 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003264:	20db      	movs	r0, #219	; 0xdb
 8003266:	f001 f9e1 	bl	800462c <putchar>

	gotoxy(63,44);
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	203f      	movs	r0, #63	; 0x3f
 800326e:	f7fe fc1b 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003272:	20db      	movs	r0, #219	; 0xdb
 8003274:	f001 f9da 	bl	800462c <putchar>

	gotoxy(64,44);
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	2040      	movs	r0, #64	; 0x40
 800327c:	f7fe fc14 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003280:	20dc      	movs	r0, #220	; 0xdc
 8003282:	f001 f9d3 	bl	800462c <putchar>

	gotoxy(65,44);
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	2041      	movs	r0, #65	; 0x41
 800328a:	f7fe fc0d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800328e:	20db      	movs	r0, #219	; 0xdb
 8003290:	f001 f9cc 	bl	800462c <putchar>

	gotoxy(67,44);
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	2043      	movs	r0, #67	; 0x43
 8003298:	f7fe fc06 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800329c:	20db      	movs	r0, #219	; 0xdb
 800329e:	f001 f9c5 	bl	800462c <putchar>
	gotoxy(67,43);
 80032a2:	212b      	movs	r1, #43	; 0x2b
 80032a4:	2043      	movs	r0, #67	; 0x43
 80032a6:	f7fe fbff 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032aa:	20db      	movs	r0, #219	; 0xdb
 80032ac:	f001 f9be 	bl	800462c <putchar>
	gotoxy(67,42);
 80032b0:	212a      	movs	r1, #42	; 0x2a
 80032b2:	2043      	movs	r0, #67	; 0x43
 80032b4:	f7fe fbf8 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032b8:	20db      	movs	r0, #219	; 0xdb
 80032ba:	f001 f9b7 	bl	800462c <putchar>

	gotoxy(69,44);
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	2045      	movs	r0, #69	; 0x45
 80032c2:	f7fe fbf1 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032c6:	20db      	movs	r0, #219	; 0xdb
 80032c8:	f001 f9b0 	bl	800462c <putchar>
	gotoxy(69,43);
 80032cc:	212b      	movs	r1, #43	; 0x2b
 80032ce:	2045      	movs	r0, #69	; 0x45
 80032d0:	f7fe fbea 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032d4:	20db      	movs	r0, #219	; 0xdb
 80032d6:	f001 f9a9 	bl	800462c <putchar>
	gotoxy(69,42);
 80032da:	212a      	movs	r1, #42	; 0x2a
 80032dc:	2045      	movs	r0, #69	; 0x45
 80032de:	f7fe fbe3 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032e2:	20db      	movs	r0, #219	; 0xdb
 80032e4:	f001 f9a2 	bl	800462c <putchar>

	gotoxy(71,44);
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	2047      	movs	r0, #71	; 0x47
 80032ec:	f7fe fbdc 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032f0:	20db      	movs	r0, #219	; 0xdb
 80032f2:	f001 f99b 	bl	800462c <putchar>
	gotoxy(71,43);
 80032f6:	212b      	movs	r1, #43	; 0x2b
 80032f8:	2047      	movs	r0, #71	; 0x47
 80032fa:	f7fe fbd5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032fe:	20db      	movs	r0, #219	; 0xdb
 8003300:	f001 f994 	bl	800462c <putchar>
	gotoxy(71,42);
 8003304:	212a      	movs	r1, #42	; 0x2a
 8003306:	2047      	movs	r0, #71	; 0x47
 8003308:	f7fe fbce 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800330c:	20db      	movs	r0, #219	; 0xdb
 800330e:	f001 f98d 	bl	800462c <putchar>

	gotoxy(73,44);
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	2049      	movs	r0, #73	; 0x49
 8003316:	f7fe fbc7 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800331a:	20db      	movs	r0, #219	; 0xdb
 800331c:	f001 f986 	bl	800462c <putchar>
	gotoxy(73,43);
 8003320:	212b      	movs	r1, #43	; 0x2b
 8003322:	2049      	movs	r0, #73	; 0x49
 8003324:	f7fe fbc0 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003328:	20db      	movs	r0, #219	; 0xdb
 800332a:	f001 f97f 	bl	800462c <putchar>

	gotoxy(74,44);
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	204a      	movs	r0, #74	; 0x4a
 8003332:	f7fe fbb9 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003336:	20db      	movs	r0, #219	; 0xdb
 8003338:	f001 f978 	bl	800462c <putchar>

	gotoxy(76,44);
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	204c      	movs	r0, #76	; 0x4c
 8003340:	f7fe fbb2 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003344:	20db      	movs	r0, #219	; 0xdb
 8003346:	f001 f971 	bl	800462c <putchar>

	gotoxy(77,44);
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	204d      	movs	r0, #77	; 0x4d
 800334e:	f7fe fbab 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003352:	20db      	movs	r0, #219	; 0xdb
 8003354:	f001 f96a 	bl	800462c <putchar>
	gotoxy(77,43);
 8003358:	212b      	movs	r1, #43	; 0x2b
 800335a:	204d      	movs	r0, #77	; 0x4d
 800335c:	f7fe fba4 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003360:	20db      	movs	r0, #219	; 0xdb
 8003362:	f001 f963 	bl	800462c <putchar>

	gotoxy(79,44);
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	204f      	movs	r0, #79	; 0x4f
 800336a:	f7fe fb9d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800336e:	20db      	movs	r0, #219	; 0xdb
 8003370:	f001 f95c 	bl	800462c <putchar>
	gotoxy(79,44);
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	204f      	movs	r0, #79	; 0x4f
 8003378:	f7fe fb96 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800337c:	20dc      	movs	r0, #220	; 0xdc
 800337e:	f001 f955 	bl	800462c <putchar>

	gotoxy(81,44);
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	2051      	movs	r0, #81	; 0x51
 8003386:	f7fe fb8f 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800338a:	20db      	movs	r0, #219	; 0xdb
 800338c:	f001 f94e 	bl	800462c <putchar>
	gotoxy(81,43);
 8003390:	212b      	movs	r1, #43	; 0x2b
 8003392:	2051      	movs	r0, #81	; 0x51
 8003394:	f7fe fb88 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003398:	20db      	movs	r0, #219	; 0xdb
 800339a:	f001 f947 	bl	800462c <putchar>

	gotoxy(82,44);
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	2052      	movs	r0, #82	; 0x52
 80033a2:	f7fe fb81 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033a6:	20db      	movs	r0, #219	; 0xdb
 80033a8:	f001 f940 	bl	800462c <putchar>

	gotoxy(85,44);
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	2055      	movs	r0, #85	; 0x55
 80033b0:	f7fe fb7a 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033b4:	20db      	movs	r0, #219	; 0xdb
 80033b6:	f001 f939 	bl	800462c <putchar>
	gotoxy(85,43);
 80033ba:	212b      	movs	r1, #43	; 0x2b
 80033bc:	2055      	movs	r0, #85	; 0x55
 80033be:	f7fe fb73 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033c2:	20db      	movs	r0, #219	; 0xdb
 80033c4:	f001 f932 	bl	800462c <putchar>
	gotoxy(85,42);
 80033c8:	212a      	movs	r1, #42	; 0x2a
 80033ca:	2055      	movs	r0, #85	; 0x55
 80033cc:	f7fe fb6c 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80033d0:	20dc      	movs	r0, #220	; 0xdc
 80033d2:	f001 f92b 	bl	800462c <putchar>

	gotoxy(86,44);
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	2056      	movs	r0, #86	; 0x56
 80033da:	f7fe fb65 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033de:	20db      	movs	r0, #219	; 0xdb
 80033e0:	f001 f924 	bl	800462c <putchar>

	gotoxy(87,44);
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	2057      	movs	r0, #87	; 0x57
 80033e8:	f7fe fb5e 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80033ec:	20dc      	movs	r0, #220	; 0xdc
 80033ee:	f001 f91d 	bl	800462c <putchar>

	gotoxy(88,44);
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	2058      	movs	r0, #88	; 0x58
 80033f6:	f7fe fb57 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033fa:	20db      	movs	r0, #219	; 0xdb
 80033fc:	f001 f916 	bl	800462c <putchar>
	gotoxy(88,43);
 8003400:	212b      	movs	r1, #43	; 0x2b
 8003402:	2058      	movs	r0, #88	; 0x58
 8003404:	f7fe fb50 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003408:	20dc      	movs	r0, #220	; 0xdc
 800340a:	f001 f90f 	bl	800462c <putchar>

	gotoxy(93,44);
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	205d      	movs	r0, #93	; 0x5d
 8003412:	f7fe fb49 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003416:	20db      	movs	r0, #219	; 0xdb
 8003418:	f001 f908 	bl	800462c <putchar>

	gotoxy(94,44);
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	205e      	movs	r0, #94	; 0x5e
 8003420:	f7fe fb42 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003424:	20db      	movs	r0, #219	; 0xdb
 8003426:	f001 f901 	bl	800462c <putchar>
	gotoxy(94,43);
 800342a:	212b      	movs	r1, #43	; 0x2b
 800342c:	205e      	movs	r0, #94	; 0x5e
 800342e:	f7fe fb3b 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003432:	20dc      	movs	r0, #220	; 0xdc
 8003434:	f001 f8fa 	bl	800462c <putchar>

	gotoxy(95,44);
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	205f      	movs	r0, #95	; 0x5f
 800343c:	f7fe fb34 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003440:	20dc      	movs	r0, #220	; 0xdc
 8003442:	f001 f8f3 	bl	800462c <putchar>

	gotoxy(96,44);
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	2060      	movs	r0, #96	; 0x60
 800344a:	f7fe fb2d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800344e:	20db      	movs	r0, #219	; 0xdb
 8003450:	f001 f8ec 	bl	800462c <putchar>

	gotoxy(98,44);
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	2062      	movs	r0, #98	; 0x62
 8003458:	f7fe fb26 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800345c:	20db      	movs	r0, #219	; 0xdb
 800345e:	f001 f8e5 	bl	800462c <putchar>
	gotoxy(98,43);
 8003462:	212b      	movs	r1, #43	; 0x2b
 8003464:	2062      	movs	r0, #98	; 0x62
 8003466:	f7fe fb1f 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800346a:	20dc      	movs	r0, #220	; 0xdc
 800346c:	f001 f8de 	bl	800462c <putchar>

	gotoxy(99,44);
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	2063      	movs	r0, #99	; 0x63
 8003474:	f7fe fb18 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003478:	20db      	movs	r0, #219	; 0xdb
 800347a:	f001 f8d7 	bl	800462c <putchar>

	gotoxy(103,44);
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	2067      	movs	r0, #103	; 0x67
 8003482:	f7fe fb11 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003486:	20db      	movs	r0, #219	; 0xdb
 8003488:	f001 f8d0 	bl	800462c <putchar>

	gotoxy(104,44);
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	2068      	movs	r0, #104	; 0x68
 8003490:	f7fe fb0a 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003494:	20dc      	movs	r0, #220	; 0xdc
 8003496:	f001 f8c9 	bl	800462c <putchar>

	gotoxy(107,44);
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	206b      	movs	r0, #107	; 0x6b
 800349e:	f7fe fb03 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034a2:	20db      	movs	r0, #219	; 0xdb
 80034a4:	f001 f8c2 	bl	800462c <putchar>

	gotoxy(108,44);
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	206c      	movs	r0, #108	; 0x6c
 80034ac:	f7fe fafc 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034b0:	20db      	movs	r0, #219	; 0xdb
 80034b2:	f001 f8bb 	bl	800462c <putchar>
	gotoxy(108,43);
 80034b6:	212b      	movs	r1, #43	; 0x2b
 80034b8:	206c      	movs	r0, #108	; 0x6c
 80034ba:	f7fe faf5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034be:	20db      	movs	r0, #219	; 0xdb
 80034c0:	f001 f8b4 	bl	800462c <putchar>

	gotoxy(109,44);
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	206d      	movs	r0, #109	; 0x6d
 80034c8:	f7fe faee 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80034cc:	20dc      	movs	r0, #220	; 0xdc
 80034ce:	f001 f8ad 	bl	800462c <putchar>

	gotoxy(112,44);
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	2070      	movs	r0, #112	; 0x70
 80034d6:	f7fe fae7 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034da:	20db      	movs	r0, #219	; 0xdb
 80034dc:	f001 f8a6 	bl	800462c <putchar>

	gotoxy(113,44);
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	2071      	movs	r0, #113	; 0x71
 80034e4:	f7fe fae0 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80034e8:	20dc      	movs	r0, #220	; 0xdc
 80034ea:	f001 f89f 	bl	800462c <putchar>

	gotoxy(114,44);
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	2072      	movs	r0, #114	; 0x72
 80034f2:	f7fe fad9 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034f6:	20db      	movs	r0, #219	; 0xdb
 80034f8:	f001 f898 	bl	800462c <putchar>
	gotoxy(114,43);
 80034fc:	212b      	movs	r1, #43	; 0x2b
 80034fe:	2072      	movs	r0, #114	; 0x72
 8003500:	f7fe fad2 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003504:	20db      	movs	r0, #219	; 0xdb
 8003506:	f001 f891 	bl	800462c <putchar>

	gotoxy(115,44);
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	2073      	movs	r0, #115	; 0x73
 800350e:	f7fe facb 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003512:	20db      	movs	r0, #219	; 0xdb
 8003514:	f001 f88a 	bl	800462c <putchar>

	gotoxy(120,44);
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	2078      	movs	r0, #120	; 0x78
 800351c:	f7fe fac4 	bl	8001aa8 <gotoxy>
	printf("%c",47);
 8003520:	202f      	movs	r0, #47	; 0x2f
 8003522:	f001 f883 	bl	800462c <putchar>
	gotoxy(121,43);
 8003526:	212b      	movs	r1, #43	; 0x2b
 8003528:	2079      	movs	r0, #121	; 0x79
 800352a:	f7fe fabd 	bl	8001aa8 <gotoxy>
	printf("%c",47);
 800352e:	202f      	movs	r0, #47	; 0x2f
 8003530:	f001 f87c 	bl	800462c <putchar>
	gotoxy(122,43);
 8003534:	212b      	movs	r1, #43	; 0x2b
 8003536:	207a      	movs	r0, #122	; 0x7a
 8003538:	f7fe fab6 	bl	8001aa8 <gotoxy>
	printf("%c",223);
 800353c:	20df      	movs	r0, #223	; 0xdf
 800353e:	f001 f875 	bl	800462c <putchar>
	gotoxy(122,42);
 8003542:	212a      	movs	r1, #42	; 0x2a
 8003544:	207a      	movs	r0, #122	; 0x7a
 8003546:	f7fe faaf 	bl	8001aa8 <gotoxy>
	printf("%c",168);
 800354a:	20a8      	movs	r0, #168	; 0xa8
 800354c:	f001 f86e 	bl	800462c <putchar>
	gotoxy(123,43);
 8003550:	212b      	movs	r1, #43	; 0x2b
 8003552:	207b      	movs	r0, #123	; 0x7b
 8003554:	f7fe faa8 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8003558:	205c      	movs	r0, #92	; 0x5c
 800355a:	f001 f867 	bl	800462c <putchar>
	gotoxy(124,44);
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	207c      	movs	r0, #124	; 0x7c
 8003562:	f7fe faa1 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8003566:	205c      	movs	r0, #92	; 0x5c
 8003568:	f001 f860 	bl	800462c <putchar>

	gotoxy(127,44);
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	207f      	movs	r0, #127	; 0x7f
 8003570:	f7fe fa9a 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003574:	20db      	movs	r0, #219	; 0xdb
 8003576:	f001 f859 	bl	800462c <putchar>
	gotoxy(127,43);
 800357a:	212b      	movs	r1, #43	; 0x2b
 800357c:	207f      	movs	r0, #127	; 0x7f
 800357e:	f7fe fa93 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003582:	20db      	movs	r0, #219	; 0xdb
 8003584:	f001 f852 	bl	800462c <putchar>
	gotoxy(127,42);
 8003588:	212a      	movs	r1, #42	; 0x2a
 800358a:	207f      	movs	r0, #127	; 0x7f
 800358c:	f7fe fa8c 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003590:	20db      	movs	r0, #219	; 0xdb
 8003592:	f001 f84b 	bl	800462c <putchar>

	gotoxy(129,44);
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	2081      	movs	r0, #129	; 0x81
 800359a:	f7fe fa85 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800359e:	20db      	movs	r0, #219	; 0xdb
 80035a0:	f001 f844 	bl	800462c <putchar>
	gotoxy(129,43);
 80035a4:	212b      	movs	r1, #43	; 0x2b
 80035a6:	2081      	movs	r0, #129	; 0x81
 80035a8:	f7fe fa7e 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80035ac:	20dc      	movs	r0, #220	; 0xdc
 80035ae:	f001 f83d 	bl	800462c <putchar>

	gotoxy(130,44);
 80035b2:	212c      	movs	r1, #44	; 0x2c
 80035b4:	2082      	movs	r0, #130	; 0x82
 80035b6:	f7fe fa77 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035ba:	20db      	movs	r0, #219	; 0xdb
 80035bc:	f001 f836 	bl	800462c <putchar>

	gotoxy(131,44);
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	2083      	movs	r0, #131	; 0x83
 80035c4:	f7fe fa70 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80035c8:	20dc      	movs	r0, #220	; 0xdc
 80035ca:	f001 f82f 	bl	800462c <putchar>

	gotoxy(132,44);
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	2084      	movs	r0, #132	; 0x84
 80035d2:	f7fe fa69 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035d6:	20db      	movs	r0, #219	; 0xdb
 80035d8:	f001 f828 	bl	800462c <putchar>

	gotoxy(133,44);
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	2085      	movs	r0, #133	; 0x85
 80035e0:	f7fe fa62 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035e4:	20db      	movs	r0, #219	; 0xdb
 80035e6:	f001 f821 	bl	800462c <putchar>
	gotoxy(133,43);
 80035ea:	212b      	movs	r1, #43	; 0x2b
 80035ec:	2085      	movs	r0, #133	; 0x85
 80035ee:	f7fe fa5b 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035f2:	20db      	movs	r0, #219	; 0xdb
 80035f4:	f001 f81a 	bl	800462c <putchar>

	gotoxy(134,44);
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	2086      	movs	r0, #134	; 0x86
 80035fc:	f7fe fa54 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003600:	20db      	movs	r0, #219	; 0xdb
 8003602:	f001 f813 	bl	800462c <putchar>

	gotoxy(135,44);
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	2087      	movs	r0, #135	; 0x87
 800360a:	f7fe fa4d 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800360e:	20dc      	movs	r0, #220	; 0xdc
 8003610:	f001 f80c 	bl	800462c <putchar>

	gotoxy(137,44);
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	2089      	movs	r0, #137	; 0x89
 8003618:	f7fe fa46 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800361c:	20dc      	movs	r0, #220	; 0xdc
 800361e:	f001 f805 	bl	800462c <putchar>

	gotoxy(139,44);
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	208b      	movs	r0, #139	; 0x8b
 8003626:	f7fe fa3f 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800362a:	20dc      	movs	r0, #220	; 0xdc
 800362c:	f000 fffe 	bl	800462c <putchar>

	gotoxy(141,44);
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	208d      	movs	r0, #141	; 0x8d
 8003634:	f7fe fa38 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003638:	20db      	movs	r0, #219	; 0xdb
 800363a:	f000 fff7 	bl	800462c <putchar>

	gotoxy(142,44);
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	208e      	movs	r0, #142	; 0x8e
 8003642:	f7fe fa31 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003646:	20dc      	movs	r0, #220	; 0xdc
 8003648:	f000 fff0 	bl	800462c <putchar>
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}

08003650 <createBulletNode>:
>>>>>>> Stashed changes

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
<<<<<<< Updated upstream
 8002240:	b084      	sub	sp, #16
 8002242:	b5b0      	push	{r4, r5, r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	f107 0418 	add.w	r4, r7, #24
 800224c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8002250:	201c      	movs	r0, #28
 8002252:	f000 fef3 	bl	800303c <malloc>
 8002256:	4603      	mov	r3, r0
 8002258:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	461d      	mov	r5, r3
 800225e:	f107 0418 	add.w	r4, r7, #24
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226a:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
    return newNode;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002280:	b004      	add	sp, #16
 8002282:	4770      	bx	lr

08002284 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8002284:	b084      	sub	sp, #16
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af02      	add	r7, sp, #8
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	f107 001c 	add.w	r0, r7, #28
 8002292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8002296:	466a      	mov	r2, sp
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022aa:	f7ff ffc9 	bl	8002240 <createBulletNode>
 80022ae:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <appendBullet+0x3c>
        *head = newNode;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	601a      	str	r2, [r3, #0]
=======
 8003650:	b084      	sub	sp, #16
 8003652:	b5b0      	push	{r4, r5, r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	f107 0418 	add.w	r4, r7, #24
 800365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8003660:	201c      	movs	r0, #28
 8003662:	f000 ff09 	bl	8004478 <malloc>
 8003666:	4603      	mov	r3, r0
 8003668:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	461d      	mov	r5, r3
 800366e:	f107 0418 	add.w	r4, r7, #24
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367a:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	619a      	str	r2, [r3, #24]
    return newNode;
 8003684:	687b      	ldr	r3, [r7, #4]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003690:	b004      	add	sp, #16
 8003692:	4770      	bx	lr

08003694 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8003694:	b084      	sub	sp, #16
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af02      	add	r7, sp, #8
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	f107 001c 	add.w	r0, r7, #28
 80036a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 80036a6:	466a      	mov	r2, sp
 80036a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ba:	f7ff ffc9 	bl	8003650 <createBulletNode>
 80036be:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <appendBullet+0x3c>
        *head = newNode;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
>>>>>>> Stashed changes
        }
        current->nextBulletAddress = newNode;
    }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 800175e:	2008      	movs	r0, #8
 8001760:	f000 fe3a 	bl	80023d8 <malloc>
 8001764:	4603      	mov	r3, r0
 8001766:	60fb      	str	r3, [r7, #12]
	newEnemy->enemy = enemy;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	617b      	str	r3, [r7, #20]
	int8_t isEndOfList = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	74fb      	strb	r3, [r7, #19]
	while(isEndOfList == 0){
 800177e:	e00c      	b.n	800179a <appendEnemy+0x46>
		if(thisNode->nextEnemyNode == 0){
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <appendEnemy+0x40>
			isEndOfList = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	74fb      	strb	r3, [r7, #19]
			thisNode->nextEnemyNode = newEnemy;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	e002      	b.n	800179a <appendEnemy+0x46>
		}else{
			thisNode = thisNode->nextEnemyNode;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	617b      	str	r3, [r7, #20]
	while(isEndOfList == 0){
 800179a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ee      	beq.n	8001780 <appendEnemy+0x2c>
=======
 80022be:	e00d      	b.n	80022dc <appendBullet+0x58>
        bulletNode_t* current = *head;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80022c6:	e002      	b.n	80022ce <appendBullet+0x4a>
            current = current->nextBulletAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f8      	bne.n	80022c8 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	619a      	str	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022e6:	b004      	add	sp, #16
 80022e8:	4770      	bx	lr

080022ea <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 80022f4:	2008      	movs	r0, #8
 80022f6:	f000 fea1 	bl	800303c <malloc>
 80022fa:	4603      	mov	r3, r0
 80022fc:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10e      	bne.n	8002336 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 800231e:	e00a      	b.n	8002336 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	605a      	str	r2, [r3, #4]
			break;
 800232e:	e006      	b.n	800233e <appendEnemy+0x54>
>>>>>>> Stashed changes
		}
		thisNode = thisNode->nextEnemyNode;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f1      	bne.n	8002320 <appendEnemy+0x36>
	}
}
<<<<<<< Updated upstream
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <initVariables>:
#include "linkedList.h"
=======
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d15b      	bne.n	800241e <deleteEnemyNode+0xd6>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f95f 	bl	8001632 <fpToInt>
 8002374:	4604      	mov	r4, r0
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f957 	bl	8001632 <fpToInt>
 8002384:	4603      	mov	r3, r0
 8002386:	4619      	mov	r1, r3
 8002388:	4620      	mov	r0, r4
 800238a:	f7fe fc4f 	bl	8000c2c <gotoxy>
		printf("  ");
 800238e:	4827      	ldr	r0, [pc, #156]	; (800242c <deleteEnemyNode+0xe4>)
 8002390:	f000 ff16 	bl	80031c0 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]
		free(enemy);
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f000 fe54 	bl	800304c <free>
		return;
 80023a4:	e03e      	b.n	8002424 <deleteEnemyNode+0xdc>
=======
 80036ce:	e00d      	b.n	80036ec <appendBullet+0x58>
        bulletNode_t* current = *head;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80036d6:	e002      	b.n	80036de <appendBullet+0x4a>
            current = current->nextBulletAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f8      	bne.n	80036d8 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	619a      	str	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f6:	b004      	add	sp, #16
 80036f8:	4770      	bx	lr

080036fa <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8003704:	2008      	movs	r0, #8
 8003706:	f000 feb7 	bl	8004478 <malloc>
 800370a:	4603      	mov	r3, r0
 800370c:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 800372e:	e00a      	b.n	8003746 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	605a      	str	r2, [r3, #4]
			break;
 800373e:	e006      	b.n	800374e <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f1      	bne.n	8003730 <appendEnemy+0x36>
	}
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d179      	bne.n	800386a <deleteEnemyNode+0x112>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f895 	bl	80028ae <fpToInt>
 8003784:	4604      	mov	r4, r0
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f88d 	bl	80028ae <fpToInt>
 8003794:	4603      	mov	r3, r0
 8003796:	0fda      	lsrs	r2, r3, #31
 8003798:	4413      	add	r3, r2
 800379a:	105b      	asrs	r3, r3, #1
 800379c:	4619      	mov	r1, r3
 800379e:	4620      	mov	r0, r4
 80037a0:	f7fe f982 	bl	8001aa8 <gotoxy>
		printf("       ");
 80037a4:	4834      	ldr	r0, [pc, #208]	; (8003878 <deleteEnemyNode+0x120>)
 80037a6:	f000 ff29 	bl	80045fc <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f87b 	bl	80028ae <fpToInt>
 80037b8:	4604      	mov	r4, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff f873 	bl	80028ae <fpToInt>
 80037c8:	4603      	mov	r3, r0
 80037ca:	3302      	adds	r3, #2
 80037cc:	0fda      	lsrs	r2, r3, #31
 80037ce:	4413      	add	r3, r2
 80037d0:	105b      	asrs	r3, r3, #1
 80037d2:	4619      	mov	r1, r3
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fe f967 	bl	8001aa8 <gotoxy>
		printf("       ");
 80037da:	4827      	ldr	r0, [pc, #156]	; (8003878 <deleteEnemyNode+0x120>)
 80037dc:	f000 ff0e 	bl	80045fc <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	605a      	str	r2, [r3, #4]
		free(enemy);
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f000 fe4c 	bl	8004488 <free>
		return;
 80037f0:	e03e      	b.n	8003870 <deleteEnemyNode+0x118>
>>>>>>> Stashed changes
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
<<<<<<< Updated upstream
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d132      	bne.n	8002414 <deleteEnemyNode+0xcc>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f93b 	bl	8001632 <fpToInt>
 80023bc:	4604      	mov	r4, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f933 	bl	8001632 <fpToInt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe fc2b 	bl	8000c2c <gotoxy>
			printf("  ");
 80023d6:	4815      	ldr	r0, [pc, #84]	; (800242c <deleteEnemyNode+0xe4>)
 80023d8:	f000 fef2 	bl	80031c0 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fe2e 	bl	800304c <free>
			free(thisNode->enemy->position);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fe28 	bl	800304c <free>
			free(thisNode->enemy->velocity);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fe22 	bl	800304c <free>
			free(thisNode->enemy);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fe1d 	bl	800304c <free>
			return;
 8002412:	e007      	b.n	8002424 <deleteEnemyNode+0xdc>
		}
		preNode = thisNode;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1c0      	bne.n	80023a6 <deleteEnemyNode+0x5e>
	}
}
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	bf00      	nop
 800242c:	08004438 	.word	0x08004438

08002430 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d039      	beq.n	80024b6 <deleteBulletNode+0x86>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d036      	beq.n	80024b6 <deleteBulletNode+0x86>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f8f0 	bl	8001632 <fpToInt>
 8002452:	4604      	mov	r4, r0
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f8ea 	bl	8001632 <fpToInt>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	4620      	mov	r0, r4
 8002464:	f7fe fbe2 	bl	8000c2c <gotoxy>
    printf(" ");
 8002468:	2020      	movs	r0, #32
 800246a:	f000 fec1 	bl	80031f0 <putchar>

    if (*head == nodeToDelete) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <deleteBulletNode+0x58>
        *head = nodeToDelete->nextBulletAddress;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f000 fde3 	bl	800304c <free>
        return;
 8002486:	e017      	b.n	80024b8 <deleteBulletNode+0x88>
    }

    bulletNode_t* current = *head;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 800248e:	e002      	b.n	8002496 <deleteBulletNode+0x66>
        current = current->nextBulletAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <deleteBulletNode+0x76>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d1f4      	bne.n	8002490 <deleteBulletNode+0x60>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f000 fdcc 	bl	800304c <free>
 80024b4:	e000      	b.n	80024b8 <deleteBulletNode+0x88>
        return;
 80024b6:	bf00      	nop
}
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}

080024be <initVariables>:
>>>>>>> Stashed changes
=======
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d132      	bne.n	8003860 <deleteEnemyNode+0x108>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f853 	bl	80028ae <fpToInt>
 8003808:	4604      	mov	r4, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f84b 	bl	80028ae <fpToInt>
 8003818:	4603      	mov	r3, r0
 800381a:	4619      	mov	r1, r3
 800381c:	4620      	mov	r0, r4
 800381e:	f7fe f943 	bl	8001aa8 <gotoxy>
			printf("  ");
 8003822:	4816      	ldr	r0, [pc, #88]	; (800387c <deleteEnemyNode+0x124>)
 8003824:	f000 feea 	bl	80045fc <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe26 	bl	8004488 <free>
			free(thisNode->enemy->position);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fe20 	bl	8004488 <free>
			free(thisNode->enemy->velocity);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fe1a 	bl	8004488 <free>
			free(thisNode->enemy);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fe15 	bl	8004488 <free>
			return;
 800385e:	e007      	b.n	8003870 <deleteEnemyNode+0x118>
		}
		preNode = thisNode;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1c0      	bne.n	80037f2 <deleteEnemyNode+0x9a>
	}
}
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	bf00      	nop
 8003878:	080059f0 	.word	0x080059f0
 800387c:	080059f8 	.word	0x080059f8

08003880 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03c      	beq.n	800390c <deleteBulletNode+0x8c>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d039      	beq.n	800390c <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f806 	bl	80028ae <fpToInt>
 80038a2:	4604      	mov	r4, r0
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f800 	bl	80028ae <fpToInt>
 80038ae:	4603      	mov	r3, r0
 80038b0:	0fda      	lsrs	r2, r3, #31
 80038b2:	4413      	add	r3, r2
 80038b4:	105b      	asrs	r3, r3, #1
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7fe f8f5 	bl	8001aa8 <gotoxy>
    printf(" ");
 80038be:	2020      	movs	r0, #32
 80038c0:	f000 feb4 	bl	800462c <putchar>

    if (*head == nodeToDelete) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d107      	bne.n	80038de <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f000 fdd6 	bl	8004488 <free>
        return;
 80038dc:	e017      	b.n	800390e <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 80038e4:	e002      	b.n	80038ec <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <deleteBulletNode+0x7c>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1f4      	bne.n	80038e6 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f000 fdbf 	bl	8004488 <free>
 800390a:	e000      	b.n	800390e <deleteBulletNode+0x8e>
        return;
 800390c:	bf00      	nop
}
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <initVariables>:
>>>>>>> Stashed changes
#include "graphics.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42)}, {intToFp(2), intToFp(42)}, 1, 20, 0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff fdb2 	bl	800132c <intToFp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	81bb      	strh	r3, [r7, #12]
 80017cc:	202a      	movs	r0, #42	; 0x2a
 80017ce:	f7ff fdad 	bl	800132c <intToFp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	81fb      	strh	r3, [r7, #14]
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7ff fda8 	bl	800132c <intToFp>
 80017dc:	4603      	mov	r3, r0
 80017de:	823b      	strh	r3, [r7, #16]
 80017e0:	202a      	movs	r0, #42	; 0x2a
 80017e2:	f7ff fda3 	bl	800132c <intToFp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	827b      	strh	r3, [r7, #18]
 80017ea:	2301      	movs	r3, #1
 80017ec:	753b      	strb	r3, [r7, #20]
 80017ee:	2314      	movs	r3, #20
 80017f0:	757b      	strb	r3, [r7, #21]

	enemyNode_t* node = malloc(sizeof(enemyNode_t));
 80017f2:	2008      	movs	r0, #8
 80017f4:	f000 fdf0 	bl	80023d8 <malloc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
	enemy_t* enemy = malloc(sizeof(enemy_t));
 80017fc:	2010      	movs	r0, #16
 80017fe:	f000 fdeb 	bl	80023d8 <malloc>
 8001802:	4603      	mov	r3, r0
 8001804:	623b      	str	r3, [r7, #32]
	position_t* pos = malloc(sizeof(position_t));
 8001806:	2004      	movs	r0, #4
 8001808:	f000 fde6 	bl	80023d8 <malloc>
 800180c:	4603      	mov	r3, r0
 800180e:	61fb      	str	r3, [r7, #28]

	node->enemy = enemy;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	6a3a      	ldr	r2, [r7, #32]
 8001814:	601a      	str	r2, [r3, #0]
	pos->x = 0;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
	enemy->position = pos;
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	601a      	str	r2, [r3, #0]
	node->enemy = enemy;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	6a3a      	ldr	r2, [r7, #32]
 8001826:	601a      	str	r2, [r3, #0]
	node->nextEnemyNode = 0;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
	gameState->enemyLL = node;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001832:	605a      	str	r2, [r3, #4]

	gameState->bulletHead = NULL;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2020 	strb.w	r2, [r3, #32]
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->btnSelected=0; //start game
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	gameState->isDead=0;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	gameState->score=0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	83da      	strh	r2, [r3, #30]
	gameState->cityLives=3;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	771a      	strb	r2, [r3, #28]
	gameState->spaceship= initSpaceship;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f103 040c 	add.w	r4, r3, #12
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gameState->bossMode = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	//TODO: continue to initialize everything
}
 800187e:	bf00      	nop
 8001880:	372c      	adds	r7, #44	; 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8001886:	b590      	push	{r4, r7, lr}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	899b      	ldrh	r3, [r3, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fd60 	bl	8001358 <fpToInt>
 8001898:	4603      	mov	r3, r0
 800189a:	461c      	mov	r4, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	89db      	ldrh	r3, [r3, #14]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fd59 	bl	8001358 <fpToInt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff f9a2 	bl	8000bf4 <gotoxy>
	printf(" ");
 80018b0:	2020      	movs	r0, #32
 80018b2:	f000 fe63 	bl	800257c <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	8a1b      	ldrh	r3, [r3, #16]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fd4c 	bl	8001358 <fpToInt>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461c      	mov	r4, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8a5b      	ldrh	r3, [r3, #18]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd45 	bl	8001358 <fpToInt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff f98e 	bl	8000bf4 <gotoxy>
	printf("A");
 80018d8:	2041      	movs	r0, #65	; 0x41
 80018da:	f000 fe4f 	bl	800257c <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6912      	ldr	r2, [r2, #16]
 80018e4:	60da      	str	r2, [r3, #12]

	drawEnemy(gameState);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fed4 	bl	8001694 <drawEnemy>
	drawBullets(gameState->bulletHead);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa81 	bl	8000df8 <drawBullets>

}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
	...

08001900 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8001908:	f7fe ffa6 	bl	8000858 <uart_get_char>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b66      	cmp	r3, #102	; 0x66
 8001914:	d111      	bne.n	800193a <bossKey+0x3a>
		if(gameState->bossMode == 0){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <bossKey+0x2e>
			clrscr();
 8001920:	f7ff f958 	bl	8000bd4 <clrscr>
			gameState->bossMode = 1;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800192c:	e005      	b.n	800193a <bossKey+0x3a>
		}else{
			gameState->bossMode = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			return 2;
 8001936:	2302      	movs	r3, #2
 8001938:	e00e      	b.n	8001958 <bossKey+0x58>
		}
	}

	if(gameState->bossMode == 1){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <bossKey+0x56>
		gotoxy(0,0);
 8001944:	2100      	movs	r1, #0
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff f954 	bl	8000bf4 <gotoxy>
		printf("Noget meget vigtigt!");
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <bossKey+0x60>)
 800194e:	f000 fdfd 	bl	800254c <iprintf>
		return 1;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <bossKey+0x58>
	}
	return 0;
 8001956:	2300      	movs	r3, #0
=======
 80024be:	b5b0      	push	{r4, r5, r7, lr}
 80024c0:	b088      	sub	sp, #32
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42)}, {intToFp(2), intToFp(42)}, 1, 20, 0};
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	615a      	str	r2, [r3, #20]
 80024d8:	2002      	movs	r0, #2
 80024da:	f7ff f895 	bl	8001608 <intToFp>
 80024de:	4603      	mov	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	202a      	movs	r0, #42	; 0x2a
 80024e4:	f7ff f890 	bl	8001608 <intToFp>
 80024e8:	4603      	mov	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	2002      	movs	r0, #2
 80024ee:	f7ff f88b 	bl	8001608 <intToFp>
 80024f2:	4603      	mov	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	202a      	movs	r0, #42	; 0x2a
 80024f8:	f7ff f886 	bl	8001608 <intToFp>
 80024fc:	4603      	mov	r3, r0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	2301      	movs	r3, #1
 8002502:	763b      	strb	r3, [r7, #24]
 8002504:	2314      	movs	r3, #20
 8002506:	767b      	strb	r3, [r7, #25]


	gameState->enemyLL = NULL;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 040c 	add.w	r4, r3, #12
 8002548:	f107 0508 	add.w	r5, r7, #8
 800254c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002550:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002554:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	gameState->lastKeyPressTime = 0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
	//TODO: continue to initialize everything
}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bdb0      	pop	{r4, r5, r7, pc}

0800256e <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f859 	bl	8001632 <fpToInt>
 8002580:	4604      	mov	r4, r0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f853 	bl	8001632 <fpToInt>
 800258c:	4603      	mov	r3, r0
 800258e:	4619      	mov	r1, r3
 8002590:	4620      	mov	r0, r4
 8002592:	f7fe fb4b 	bl	8000c2c <gotoxy>
	printf(" ");
 8002596:	2020      	movs	r0, #32
 8002598:	f000 fe2a 	bl	80031f0 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f846 	bl	8001632 <fpToInt>
 80025a6:	4604      	mov	r4, r0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f840 	bl	8001632 <fpToInt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7fe fb38 	bl	8000c2c <gotoxy>
	printf("A");
 80025bc:	2041      	movs	r0, #65	; 0x41
 80025be:	f000 fe17 	bl	80031f0 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	330c      	adds	r3, #12
 80025c8:	3214      	adds	r2, #20
 80025ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ce:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff faf2 	bl	8001bbc <drawEnemy>
	drawBullets(gameState);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe fc58 	bl	8000e8e <drawBullets>

	drawMoon(51,17); // moon graphics
 80025de:	2111      	movs	r1, #17
 80025e0:	2033      	movs	r0, #51	; 0x33
 80025e2:	f7ff f939 	bl	8001858 <drawMoon>
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}

080025ee <bossKey>:

int8_t bossKey(gameState_t* gameState){
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
		return 1;
	}
	return 0;
>>>>>>> Stashed changes
	uart_clear();
	*/
}
<<<<<<< Updated upstream
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080037b4 	.word	0x080037b4

08001964 <main>:

int main(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b098      	sub	sp, #96	; 0x60
 8001968:	af02      	add	r7, sp, #8
=======
 80025f6:	bf00      	nop
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	if(gameState->cityLives == 0){
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <readKey>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readKey(gameState_t* gameState){
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8002634:	f7fe f910 	bl	8000858 <uart_get_char>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d107      	bne.n	8002652 <readKey+0x26>
		gameState->direction = 1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <readKey+0x5c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(c == 'a'){
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b61      	cmp	r3, #97	; 0x61
 8002656:	d107      	bne.n	8002668 <readKey+0x3c>
		gameState->direction = -1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <readKey+0x5c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <readKey+0x5c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b05      	cmp	r3, #5
 8002674:	d903      	bls.n	800267e <readKey+0x52>
		gameState->direction = 0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200001c8 	.word	0x200001c8

0800268c <main>:

int main(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b09c      	sub	sp, #112	; 0x70
 8002690:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
=======
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42*yScale)}, {intToFp(2), intToFp(42*yScale)}, 1, 20, 0};
 800391c:	f107 0310 	add.w	r3, r7, #16
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
 800392c:	615a      	str	r2, [r3, #20]
 800392e:	2002      	movs	r0, #2
 8003930:	f7fe ffa8 	bl	8002884 <intToFp>
 8003934:	4603      	mov	r3, r0
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	2054      	movs	r0, #84	; 0x54
 800393a:	f7fe ffa3 	bl	8002884 <intToFp>
 800393e:	4603      	mov	r3, r0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	2002      	movs	r0, #2
 8003944:	f7fe ff9e 	bl	8002884 <intToFp>
 8003948:	4603      	mov	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	2054      	movs	r0, #84	; 0x54
 800394e:	f7fe ff99 	bl	8002884 <intToFp>
 8003952:	4603      	mov	r3, r0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3020 	strb.w	r3, [r7, #32]
 800395c:	2314      	movs	r3, #20
 800395e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <initVariables+0xd4>)
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	4611      	mov	r1, r2
 800396c:	8019      	strh	r1, [r3, #0]
 800396e:	3302      	adds	r3, #2
 8003970:	0c12      	lsrs	r2, r2, #16
 8003972:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->btnSelected=0; //start game
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->isDead=0;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->score=0;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 040c 	add.w	r4, r3, #12
 80039b4:	f107 0510 	add.w	r5, r7, #16
 80039b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039c0:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->moon = moon;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3308      	adds	r3, #8
 80039d0:	f107 020c 	add.w	r2, r7, #12
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4611      	mov	r1, r2
 80039d8:	8019      	strh	r1, [r3, #0]
 80039da:	3302      	adds	r3, #2
 80039dc:	0c12      	lsrs	r2, r2, #16
 80039de:	701a      	strb	r2, [r3, #0]
	//TODO: continue to initialize everything
}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bdb0      	pop	{r4, r5, r7, pc}
 80039e8:	080059fc 	.word	0x080059fc

080039ec <drawScreen>:


void drawScreen(gameState_t* gameState) {
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y)/yScale); //TODO
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe ff58 	bl	80028ae <fpToInt>
 80039fe:	4604      	mov	r4, r0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff52 	bl	80028ae <fpToInt>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	0fda      	lsrs	r2, r3, #31
 8003a0e:	4413      	add	r3, r2
 8003a10:	105b      	asrs	r3, r3, #1
 8003a12:	4619      	mov	r1, r3
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7fe f847 	bl	8001aa8 <gotoxy>
	printf(" ");
 8003a1a:	2020      	movs	r0, #32
 8003a1c:	f000 fe06 	bl	800462c <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y)/yScale); //TODO
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe ff42 	bl	80028ae <fpToInt>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ff3c 	bl	80028ae <fpToInt>
 8003a36:	4603      	mov	r3, r0
 8003a38:	0fda      	lsrs	r2, r3, #31
 8003a3a:	4413      	add	r3, r2
 8003a3c:	105b      	asrs	r3, r3, #1
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7fe f831 	bl	8001aa8 <gotoxy>
	printf("A");
 8003a46:	2041      	movs	r0, #65	; 0x41
 8003a48:	f000 fdf0 	bl	800462c <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	330c      	adds	r3, #12
 8003a52:	3214      	adds	r2, #20
 8003a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a58:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fa6d 	bl	8002f3c <drawEnemy>
	drawBullets(gameState);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fa6a 	bl	8001f3c <drawBullets>

	drawhearth(gameState);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff f9e5 	bl	8002e38 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7a1a      	ldrb	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7a5b      	ldrb	r3, [r3, #9]
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7ff f8a9 	bl	8002bd0 <drawMoon>
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}

08003a86 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <readInput>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8003ab4:	f7fd fe0e 	bl	80016d4 <uart_get_char>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d107      	bne.n	8003ad2 <readInput+0x26>
		gameState->direction = 1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gameState->lastKeyPressTime = runtime;
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <readInput+0x90>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(c == 'a'){
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b61      	cmp	r3, #97	; 0x61
 8003ad6:	d107      	bne.n	8003ae8 <readInput+0x3c>
		gameState->direction = -1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gameState->lastKeyPressTime = runtime;
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <readInput+0x90>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(c == 'f'){
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b66      	cmp	r3, #102	; 0x66
 8003aec:	d117      	bne.n	8003b1e <readInput+0x72>
		if(gameState->activeScreen != 4){
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d00c      	beq.n	8003b12 <readInput+0x66>
			clrscr();
 8003af8:	f7fd ffc6 	bl	8001a88 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			gameState->activeScreen = 4;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003b10:	e005      	b.n	8003b1e <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <readInput+0x90>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d903      	bls.n	8003b34 <readInput+0x88>
		gameState->direction = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200001cc 	.word	0x200001cc

08003b40 <main>:

int main(void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b096      	sub	sp, #88	; 0x58
 8003b44:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800196a:	4ad2      	ldr	r2, [pc, #840]	; (8001cb4 <main+0x350>)
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001974:	e883 0003 	stmia.w	r3, {r0, r1}
 8001978:	4acf      	ldr	r2, [pc, #828]	; (8001cb8 <main+0x354>)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001982:	e883 0003 	stmia.w	r3, {r0, r1}
 8001986:	4acd      	ldr	r2, [pc, #820]	; (8001cbc <main+0x358>)
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001990:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8001994:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8001998:	f7ff f802 	bl	80009a0 <uart_init>
	initVariables(&gameState);
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff03 	bl	80017ac <initVariables>
	initTimer();
 80019a6:	f7ff fbcd 	bl	8001144 <initTimer>
	initJoystick();
 80019aa:	f7ff faab 	bl	8000f04 <initJoystick>
	srand(time(NULL));   //RNG
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 ff46 	bl	8002840 <time>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fdf4 	bl	80025a8 <srand>



	while(1){
		switch(gameState.activeScreen){
 80019c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d8fb      	bhi.n	80019c0 <main+0x5c>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <main+0x6c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	08001b95 	.word	0x08001b95
 80019d8:	08001c33 	.word	0x08001c33
 80019dc:	08001ca3 	.word	0x08001ca3
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 80019e0:	f7ff f8f8 	bl	8000bd4 <clrscr>
			drawWindow();
 80019e4:	f000 fa38 	bl	8001e58 <drawWindow>
			drawBox(1,1,156,43,0);//window
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	232b      	movs	r3, #43	; 0x2b
 80019ee:	229c      	movs	r2, #156	; 0x9c
 80019f0:	2101      	movs	r1, #1
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff f910 	bl	8000c18 <drawBox>
			drawbackground(); // stars in background
 80019f8:	f000 fa3c 	bl	8001e74 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 80019fc:	f107 0220 	add.w	r2, r7, #32
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f9ec 	bl	8001de4 <drawMenuScreen>


			while(gameState.activeScreen==0){
 8001a0c:	e0bc      	b.n	8001b88 <main+0x224>

				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff74 	bl	8001900 <bossKey>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
				if(bossKeyChange == 1) continue;
 8001a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d100      	bne.n	8001a24 <main+0xc0>
 8001a22:	e0b1      	b.n	8001b88 <main+0x224>
				else if(bossKeyChange == 2){
 8001a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d111      	bne.n	8001a4e <main+0xea>
					//Initialize window agian
					clrscr();
 8001a2a:	f7ff f8d3 	bl	8000bd4 <clrscr>
					drawBox(1,1,156,43,0);//window
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	232b      	movs	r3, #43	; 0x2b
 8001a34:	229c      	movs	r2, #156	; 0x9c
 8001a36:	2101      	movs	r1, #1
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff f8ed 	bl	8000c18 <drawBox>
					drawMenuScreen(btnList, &gameState);
 8001a3e:	f107 0220 	add.w	r2, r7, #32
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f9cb 	bl	8001de4 <drawMenuScreen>
				}

				if(downIsPressed()){
 8001a4e:	f7ff fb4b 	bl	80010e8 <downIsPressed>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d025      	beq.n	8001aa4 <main+0x140>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8001a58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001a62:	4413      	add	r3, r2
 8001a64:	3b50      	subs	r3, #80	; 0x50
 8001a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a6a:	f000 f99b 	bl	8001da4 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8001a6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <main+0x35c>)
 8001a76:	fb83 3102 	smull	r3, r1, r3, r2
 8001a7a:	17d3      	asrs	r3, r2, #31
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	1ad1      	subs	r1, r2, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8001a8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001a96:	4413      	add	r3, r2
 8001a98:	3b50      	subs	r3, #80	; 0x50
 8001a9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a9e:	f000 f961 	bl	8001d64 <drawBtnAsSelected>
 8001aa2:	e028      	b.n	8001af6 <main+0x192>
				}
				else if(upIsPressed()){
 8001aa4:	f7ff faf2 	bl	800108c <upIsPressed>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d023      	beq.n	8001af6 <main+0x192>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8001aae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b50      	subs	r3, #80	; 0x50
 8001abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac0:	f000 f970 	bl	8001da4 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8001ac4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <main+0x170>
 8001acc:	2302      	movs	r3, #2
 8001ace:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001ad2:	e005      	b.n	8001ae0 <main+0x17c>
					else gameState.btnSelected=gameState.btnSelected-1;
 8001ad4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8001ae0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001aea:	4413      	add	r3, r2
 8001aec:	3b50      	subs	r3, #80	; 0x50
 8001aee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001af2:	f000 f937 	bl	8001d64 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8001af6:	f7ff fa9b 	bl	8001030 <centerIsPressed>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d043      	beq.n	8001b88 <main+0x224>
					if(gameState.btnSelected==0){ //START BUTTON
 8001b00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <main+0x1ac>
						gameState.activeScreen=1; //Game screen
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001b0e:	e03b      	b.n	8001b88 <main+0x224>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8001b10:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d130      	bne.n	8001b7a <main+0x216>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8001b18:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <main+0x35c>)
 8001b20:	fb83 3102 	smull	r3, r1, r3, r2
 8001b24:	17d3      	asrs	r3, r2, #31
 8001b26:	1ac9      	subs	r1, r1, r3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	440b      	add	r3, r1
 8001b2e:	1ad1      	subs	r1, r2, r3
 8001b30:	b2cb      	uxtb	r3, r1
 8001b32:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8001b36:	4b60      	ldr	r3, [pc, #384]	; (8001cb8 <main+0x354>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	330f      	adds	r3, #15
 8001b3c:	4a5e      	ldr	r2, [pc, #376]	; (8001cb8 <main+0x354>)
 8001b3e:	7852      	ldrb	r2, [r2, #1]
 8001b40:	3201      	adds	r2, #1
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f855 	bl	8000bf4 <gotoxy>
						if(gameState.difficulty==0){
 8001b4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <main+0x1f6>
							printf("EASY  ");
 8001b52:	485c      	ldr	r0, [pc, #368]	; (8001cc4 <main+0x360>)
 8001b54:	f000 fcfa 	bl	800254c <iprintf>
 8001b58:	e016      	b.n	8001b88 <main+0x224>
						} else if(gameState.difficulty==1){
 8001b5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d103      	bne.n	8001b6a <main+0x206>
							printf("MEDIUM");
 8001b62:	4859      	ldr	r0, [pc, #356]	; (8001cc8 <main+0x364>)
 8001b64:	f000 fcf2 	bl	800254c <iprintf>
 8001b68:	e00e      	b.n	8001b88 <main+0x224>
						} else if(gameState.difficulty==2){
 8001b6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d10a      	bne.n	8001b88 <main+0x224>
							printf("HARD  ");
 8001b72:	4856      	ldr	r0, [pc, #344]	; (8001ccc <main+0x368>)
 8001b74:	f000 fcea 	bl	800254c <iprintf>
 8001b78:	e006      	b.n	8001b88 <main+0x224>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8001b7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <main+0x224>
						gameState.activeScreen=2;// help screen
 8001b82:	2302      	movs	r3, #2
 8001b84:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==0){
 8001b88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f43f af3e 	beq.w	8001a0e <main+0xaa>
=======
 8002692:	4ad3      	ldr	r2, [pc, #844]	; (80029e0 <main+0x354>)
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269a:	e883 0003 	stmia.w	r3, {r0, r1}
 800269e:	4ad1      	ldr	r2, [pc, #836]	; (80029e4 <main+0x358>)
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80026ac:	4ace      	ldr	r2, [pc, #824]	; (80029e8 <main+0x35c>)
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026b6:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 80026ba:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 80026be:	f7fe f96f 	bl	80009a0 <uart_init>
	initVariables(&gameState);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fef9 	bl	80024be <initVariables>
	initTimer();
 80026cc:	f7fe fd84 	bl	80011d8 <initTimer>
	initJoystick();
 80026d0:	f7fe fc62 	bl	8000f98 <initJoystick>
	I2C_init();
 80026d4:	f7fe fdca 	bl	800126c <I2C_init>
	srand(time(NULL));   //RNG
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 feeb 	bl	80034b4 <time>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fd99 	bl	800321c <srand>

	while(1){
		switch(gameState.activeScreen){
 80026ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d8fb      	bhi.n	80026ea <main+0x5e>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <main+0x6c>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002709 	.word	0x08002709
 80026fc:	080028b1 	.word	0x080028b1
 8002700:	080029a7 	.word	0x080029a7
 8002704:	08002a41 	.word	0x08002a41
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8002708:	f7fe fa80 	bl	8000c0c <clrscr>
			drawWindow();
 800270c:	f000 fa72 	bl	8002bf4 <drawWindow>
			drawbackground(); // stars in background
 8002710:	f7fe ffb0 	bl	8001674 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 8002714:	f107 021c 	add.w	r2, r7, #28
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa2f 	bl	8002b80 <drawMenuScreen>


			while(gameState.activeScreen==0){
 8002722:	e0bf      	b.n	80028a4 <main+0x218>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff60 	bl	80025ee <bossKey>
 800272e:	4603      	mov	r3, r0
 8002730:	657b      	str	r3, [r7, #84]	; 0x54
				if(bossKeyChange == 1) continue;
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	2b01      	cmp	r3, #1
 8002736:	d100      	bne.n	800273a <main+0xae>
 8002738:	e0b4      	b.n	80028a4 <main+0x218>
				else if(bossKeyChange == 2){
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	2b02      	cmp	r3, #2
 800273e:	d114      	bne.n	800276a <main+0xde>
					//Initialize window agian
					clrscr();
 8002740:	f7fe fa64 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	232b      	movs	r3, #43	; 0x2b
 800274a:	229c      	movs	r2, #156	; 0x9c
 800274c:	2101      	movs	r1, #1
 800274e:	2001      	movs	r0, #1
 8002750:	f7fe fa7e 	bl	8000c50 <drawBox>
					drawbackground(); // stars in background
 8002754:	f7fe ff8e 	bl	8001674 <drawbackground>
					drawWindow();
 8002758:	f000 fa4c 	bl	8002bf4 <drawWindow>
					drawMenuScreen(btnList, &gameState);
 800275c:	f107 021c 	add.w	r2, r7, #28
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa0b 	bl	8002b80 <drawMenuScreen>
				}

				if(downIsPressed()){
 800276a:	f7fe fd07 	bl	800117c <downIsPressed>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d025      	beq.n	80027c0 <main+0x134>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002774:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800277e:	4413      	add	r3, r2
 8002780:	3b64      	subs	r3, #100	; 0x64
 8002782:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002786:	f000 f9db 	bl	8002b40 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 800278a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <main+0x360>)
 8002792:	fb83 3102 	smull	r3, r1, r3, r2
 8002796:	17d3      	asrs	r3, r2, #31
 8002798:	1ac9      	subs	r1, r1, r3
 800279a:	460b      	mov	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	1ad1      	subs	r1, r2, r3
 80027a2:	b2cb      	uxtb	r3, r1
 80027a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80027a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80027b2:	4413      	add	r3, r2
 80027b4:	3b64      	subs	r3, #100	; 0x64
 80027b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027ba:	f000 f9a1 	bl	8002b00 <drawBtnAsSelected>
 80027be:	e028      	b.n	8002812 <main+0x186>
				}
				else if(upIsPressed()){
 80027c0:	f7fe fcae 	bl	8001120 <upIsPressed>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d023      	beq.n	8002812 <main+0x186>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80027ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80027d4:	4413      	add	r3, r2
 80027d6:	3b64      	subs	r3, #100	; 0x64
 80027d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027dc:	f000 f9b0 	bl	8002b40 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80027e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <main+0x164>
 80027e8:	2302      	movs	r3, #2
 80027ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80027ee:	e005      	b.n	80027fc <main+0x170>
					else gameState.btnSelected=gameState.btnSelected-1;
 80027f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80027fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002806:	4413      	add	r3, r2
 8002808:	3b64      	subs	r3, #100	; 0x64
 800280a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800280e:	f000 f977 	bl	8002b00 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8002812:	f7fe fc57 	bl	80010c4 <centerIsPressed>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d043      	beq.n	80028a4 <main+0x218>
					if(gameState.btnSelected==0){ //START BUTTON
 800281c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <main+0x1a0>
						gameState.activeScreen=1; //Game screen
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800282a:	e03b      	b.n	80028a4 <main+0x218>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 800282c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002830:	2b01      	cmp	r3, #1
 8002832:	d130      	bne.n	8002896 <main+0x20a>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8002834:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <main+0x360>)
 800283c:	fb83 3102 	smull	r3, r1, r3, r2
 8002840:	17d3      	asrs	r3, r2, #31
 8002842:	1ac9      	subs	r1, r1, r3
 8002844:	460b      	mov	r3, r1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	440b      	add	r3, r1
 800284a:	1ad1      	subs	r1, r2, r3
 800284c:	b2cb      	uxtb	r3, r1
 800284e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8002852:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <main+0x358>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	330f      	adds	r3, #15
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <main+0x358>)
 800285a:	7852      	ldrb	r2, [r2, #1]
 800285c:	3201      	adds	r2, #1
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe f9e3 	bl	8000c2c <gotoxy>
						if(gameState.difficulty==0){
 8002866:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <main+0x1ea>
							printf("EASY  ");
 800286e:	4860      	ldr	r0, [pc, #384]	; (80029f0 <main+0x364>)
 8002870:	f000 fca6 	bl	80031c0 <iprintf>
 8002874:	e016      	b.n	80028a4 <main+0x218>
						} else if(gameState.difficulty==1){
 8002876:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800287a:	2b01      	cmp	r3, #1
 800287c:	d103      	bne.n	8002886 <main+0x1fa>
							printf("MEDIUM");
 800287e:	485d      	ldr	r0, [pc, #372]	; (80029f4 <main+0x368>)
 8002880:	f000 fc9e 	bl	80031c0 <iprintf>
 8002884:	e00e      	b.n	80028a4 <main+0x218>
						} else if(gameState.difficulty==2){
 8002886:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800288a:	2b02      	cmp	r3, #2
 800288c:	d10a      	bne.n	80028a4 <main+0x218>
							printf("HARD  ");
 800288e:	485a      	ldr	r0, [pc, #360]	; (80029f8 <main+0x36c>)
 8002890:	f000 fc96 	bl	80031c0 <iprintf>
 8002894:	e006      	b.n	80028a4 <main+0x218>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8002896:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800289a:	2b02      	cmp	r3, #2
 800289c:	d102      	bne.n	80028a4 <main+0x218>
						gameState.activeScreen=2;// help screen
 800289e:	2302      	movs	r3, #2
 80028a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==0){
 80028a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f43f af3b 	beq.w	8002724 <main+0x98>
>>>>>>> Stashed changes
=======
 8003b46:	4ad7      	ldr	r2, [pc, #860]	; (8003ea4 <main+0x364>)
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b52:	4ad5      	ldr	r2, [pc, #852]	; (8003ea8 <main+0x368>)
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b60:	4ad2      	ldr	r2, [pc, #840]	; (8003eac <main+0x36c>)
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b6a:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8003b6e:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8003b72:	f7fd fe53 	bl	800181c <uart_init>
	initVariables(&gameState);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff feca 	bl	8003914 <initVariables>
	initTimer();
 8003b80:	f7fe fb88 	bl	8002294 <initTimer>
	initJoystick();
 8003b84:	f7fe fa66 	bl	8002054 <initJoystick>
	I2C_init();
 8003b88:	f7fe fbce 	bl	8002328 <I2C_init>
	analogConfigPorts();
 8003b8c:	f7fe fc78 	bl	8002480 <analogConfigPorts>

	srand(readPotentiometer());   //RNG
 8003b90:	f7fe fd1a 	bl	80025c8 <readPotentiometer>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fd5e 	bl	8004658 <srand>

	while(1){
		switch(gameState.activeScreen){
 8003b9c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d8fb      	bhi.n	8003b9c <main+0x5c>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <main+0x6c>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003d3d 	.word	0x08003d3d
 8003bb4:	08003e13 	.word	0x08003e13
 8003bb8:	08003e49 	.word	0x08003e49
 8003bbc:	08003e89 	.word	0x08003e89
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8003bc0:	f7fd ff62 	bl	8001a88 <clrscr>
			drawWindow();
 8003bc4:	f000 fa2a 	bl	800401c <drawWindow>
			drawbackground(); // stars in background
 8003bc8:	f7fe ff10 	bl	80029ec <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8003bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bd0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fffa 	bl	8002bd0 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8003bdc:	f107 021c 	add.w	r2, r7, #28
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f9df 	bl	8003fa8 <drawMenuScreen>


			while(gameState.activeScreen==0){
 8003bea:	e0a1      	b.n	8003d30 <main+0x1f0>
				readInput(&gameState);
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff5b 	bl	8003aac <readInput>
				if(downIsPressed()){
 8003bf6:	f7fe fb1f 	bl	8002238 <downIsPressed>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d025      	beq.n	8003c4c <main+0x10c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003c00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3b54      	subs	r3, #84	; 0x54
 8003c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c12:	f000 f9a9 	bl	8003f68 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8003c16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	4ba4      	ldr	r3, [pc, #656]	; (8003eb0 <main+0x370>)
 8003c1e:	fb83 3102 	smull	r3, r1, r3, r2
 8003c22:	17d3      	asrs	r3, r2, #31
 8003c24:	1ac9      	subs	r1, r1, r3
 8003c26:	460b      	mov	r3, r1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	440b      	add	r3, r1
 8003c2c:	1ad1      	subs	r1, r2, r3
 8003c2e:	b2cb      	uxtb	r3, r1
 8003c30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003c34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b54      	subs	r3, #84	; 0x54
 8003c42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c46:	f000 f96f 	bl	8003f28 <drawBtnAsSelected>
 8003c4a:	e028      	b.n	8003c9e <main+0x15e>
				}
				else if(upIsPressed()){
 8003c4c:	f7fe fac6 	bl	80021dc <upIsPressed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <main+0x15e>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003c56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003c60:	4413      	add	r3, r2
 8003c62:	3b54      	subs	r3, #84	; 0x54
 8003c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c68:	f000 f97e 	bl	8003f68 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8003c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <main+0x13c>
 8003c74:	2302      	movs	r3, #2
 8003c76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003c7a:	e005      	b.n	8003c88 <main+0x148>
					else gameState.btnSelected=gameState.btnSelected-1;
 8003c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003c92:	4413      	add	r3, r2
 8003c94:	3b54      	subs	r3, #84	; 0x54
 8003c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c9a:	f000 f945 	bl	8003f28 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8003c9e:	f7fe fa6f 	bl	8002180 <centerIsPressed>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d043      	beq.n	8003d30 <main+0x1f0>
					if(gameState.btnSelected==0){ //START BUTTON
 8003ca8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <main+0x178>
						gameState.activeScreen=1; //Game screen
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003cb6:	e03b      	b.n	8003d30 <main+0x1f0>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8003cb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d130      	bne.n	8003d22 <main+0x1e2>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8003cc0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	4b7a      	ldr	r3, [pc, #488]	; (8003eb0 <main+0x370>)
 8003cc8:	fb83 3102 	smull	r3, r1, r3, r2
 8003ccc:	17d3      	asrs	r3, r2, #31
 8003cce:	1ac9      	subs	r1, r1, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	440b      	add	r3, r1
 8003cd6:	1ad1      	subs	r1, r2, r3
 8003cd8:	b2cb      	uxtb	r3, r1
 8003cda:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <main+0x368>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	330f      	adds	r3, #15
 8003ce4:	4a70      	ldr	r2, [pc, #448]	; (8003ea8 <main+0x368>)
 8003ce6:	7852      	ldrb	r2, [r2, #1]
 8003ce8:	3201      	adds	r2, #1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fedb 	bl	8001aa8 <gotoxy>
						if(gameState.difficulty==0){
 8003cf2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <main+0x1c2>
							printf("EASY  ");
 8003cfa:	486e      	ldr	r0, [pc, #440]	; (8003eb4 <main+0x374>)
 8003cfc:	f000 fc7e 	bl	80045fc <iprintf>
 8003d00:	e016      	b.n	8003d30 <main+0x1f0>
						} else if(gameState.difficulty==1){
 8003d02:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d103      	bne.n	8003d12 <main+0x1d2>
							printf("MEDIUM");
 8003d0a:	486b      	ldr	r0, [pc, #428]	; (8003eb8 <main+0x378>)
 8003d0c:	f000 fc76 	bl	80045fc <iprintf>
 8003d10:	e00e      	b.n	8003d30 <main+0x1f0>
						} else if(gameState.difficulty==2){
 8003d12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d10a      	bne.n	8003d30 <main+0x1f0>
							printf("HARD  ");
 8003d1a:	4868      	ldr	r0, [pc, #416]	; (8003ebc <main+0x37c>)
 8003d1c:	f000 fc6e 	bl	80045fc <iprintf>
 8003d20:	e006      	b.n	8003d30 <main+0x1f0>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8003d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d102      	bne.n	8003d30 <main+0x1f0>
						gameState.activeScreen=2;// help screen
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			while(gameState.activeScreen==0){
 8003d30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f43f af59 	beq.w	8003bec <main+0xac>
>>>>>>> Stashed changes
					}
				}
			}
			break;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b92:	e0ba      	b.n	8001d0a <main+0x3a6>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8001b94:	f7ff f81e 	bl	8000bd4 <clrscr>
			printf("GAME SCREEN");
 8001b98:	484d      	ldr	r0, [pc, #308]	; (8001cd0 <main+0x36c>)
 8001b9a:	f000 fcd7 	bl	800254c <iprintf>
			uint32_t frameLastUpdated=0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	657b      	str	r3, [r7, #84]	; 0x54
			uint8_t dir = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
			gameState.spaceship.lastShotTime=runtime;
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <main+0x370>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
			drawbackground(); // stars in background
 8001bac:	f000 f962 	bl	8001e74 <drawbackground>
			drawMoon(51,17);
 8001bb0:	2111      	movs	r1, #17
 8001bb2:	2033      	movs	r0, #51	; 0x33
 8001bb4:	f7ff fbe9 	bl	800138a <drawMoon>
			while(gameState.activeScreen==1){
 8001bb8:	e036      	b.n	8001c28 <main+0x2c4>
				if(runtime-frameLastUpdated>=framePeriod){//
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <main+0x370>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d91d      	bls.n	8001c02 <main+0x29e>
					updateSpaceship(&gameState, &dir);
 8001bc6:	1dfa      	adds	r2, r7, #7
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fa42 	bl	8002058 <updateSpaceship>
					spawnEnemy(&gameState);
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fafd 	bl	80011d8 <spawnEnemy>
					updateEnemy(&gameState);
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb6a 	bl	80012bc <updateEnemy>
					//shootSpaceship(&gameState);
//					shootEnemy(&gameState);
					updateBullets(&gameState);
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f8de 	bl	8000dae <updateBullets>
//					detectCityHit(&gameState);
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
//					bossKey(&gameState);

					drawScreen(&gameState);
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe45 	bl	8001886 <drawScreen>
					frameLastUpdated=runtime;
 8001bfc:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <main+0x370>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
				}

				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe7a 	bl	8001900 <bossKey>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(bossKeyChange == 1) continue;
 8001c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d100      	bne.n	8001c18 <main+0x2b4>
 8001c16:	e007      	b.n	8001c28 <main+0x2c4>
				else if(bossKeyChange == 2){
 8001c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d104      	bne.n	8001c28 <main+0x2c4>
					//Initialize window agian
					clrscr();
 8001c1e:	f7fe ffd9 	bl	8000bd4 <clrscr>
					printf("GAME SCREEN");
 8001c22:	482b      	ldr	r0, [pc, #172]	; (8001cd0 <main+0x36c>)
 8001c24:	f000 fc92 	bl	800254c <iprintf>
			while(gameState.activeScreen==1){
 8001c28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d0c4      	beq.n	8001bba <main+0x256>
				}
		}
			break;
 8001c30:	e06b      	b.n	8001d0a <main+0x3a6>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8001c32:	f7fe ffcf 	bl	8000bd4 <clrscr>
			drawWindow();
 8001c36:	f000 f90f 	bl	8001e58 <drawWindow>
			drawBox(1,1,156,43,0);//window
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	232b      	movs	r3, #43	; 0x2b
 8001c40:	229c      	movs	r2, #156	; 0x9c
 8001c42:	2101      	movs	r1, #1
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7fe ffe7 	bl	8000c18 <drawBox>
			drawbackground(); // stars in background
 8001c4a:	f000 f913 	bl	8001e74 <drawbackground>
			drawHelpScreen();
 8001c4e:	f000 f8ed 	bl	8001e2c <drawHelpScreen>
			while(gameState.activeScreen==2){
 8001c52:	e021      	b.n	8001c98 <main+0x334>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe51 	bl	8001900 <bossKey>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
				if(bossKeyChange == 1) continue;
 8001c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d100      	bne.n	8001c6a <main+0x306>
 8001c68:	e016      	b.n	8001c98 <main+0x334>
				else if(bossKeyChange == 2){
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d10b      	bne.n	8001c88 <main+0x324>
					//Initialize window agian
					clrscr();
 8001c70:	f7fe ffb0 	bl	8000bd4 <clrscr>
					drawBox(1,1,156,43,0);//window
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	232b      	movs	r3, #43	; 0x2b
 8001c7a:	229c      	movs	r2, #156	; 0x9c
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7fe ffca 	bl	8000c18 <drawBox>
					drawHelpScreen();
 8001c84:	f000 f8d2 	bl	8001e2c <drawHelpScreen>
				}

				if(centerIsPressed()){
 8001c88:	f7ff f9d2 	bl	8001030 <centerIsPressed>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <main+0x334>
					gameState.activeScreen=0;//MENU SCREEN
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==2){
 8001c98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d0d9      	beq.n	8001c54 <main+0x2f0>
				}
			}
			break;
 8001ca0:	e033      	b.n	8001d0a <main+0x3a6>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8001ca2:	f7fe ff97 	bl	8000bd4 <clrscr>
			printf("GAME OVER\nYour score is %d", gameState.score);
 8001ca6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <main+0x374>)
 8001cac:	f000 fc4e 	bl	800254c <iprintf>
			while(gameState.activeScreen==3){
 8001cb0:	e024      	b.n	8001cfc <main+0x398>
 8001cb2:	bf00      	nop
 8001cb4:	08003858 	.word	0x08003858
 8001cb8:	08003860 	.word	0x08003860
 8001cbc:	08003868 	.word	0x08003868
 8001cc0:	55555556 	.word	0x55555556
 8001cc4:	080037cc 	.word	0x080037cc
 8001cc8:	080037d4 	.word	0x080037d4
 8001ccc:	080037dc 	.word	0x080037dc
 8001cd0:	080037e4 	.word	0x080037e4
 8001cd4:	200001c8 	.word	0x200001c8
 8001cd8:	080037f0 	.word	0x080037f0
				if(bossKey(&gameState)) break;
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fe0d 	bl	8001900 <bossKey>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10c      	bne.n	8001d06 <main+0x3a2>

				if(centerIsPressed()){
 8001cec:	f7ff f9a0 	bl	8001030 <centerIsPressed>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <main+0x398>
					gameState.activeScreen=0;//MENU SCREEN
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==3){
 8001cfc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d0eb      	beq.n	8001cdc <main+0x378>
				}
			}
			break;
 8001d04:	e000      	b.n	8001d08 <main+0x3a4>
				if(bossKey(&gameState)) break;
 8001d06:	bf00      	nop
			break;
 8001d08:	bf00      	nop
		switch(gameState.activeScreen){
 8001d0a:	e659      	b.n	80019c0 <main+0x5c>

08001d0c <drawButton>:
=======
 80028ae:	e0f8      	b.n	8002aa2 <main+0x416>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 80028b0:	f7fe f9ac 	bl	8000c0c <clrscr>
			printf("GAME SCREEN");
 80028b4:	4851      	ldr	r0, [pc, #324]	; (80029fc <main+0x370>)
 80028b6:	f000 fc83 	bl	80031c0 <iprintf>
			uint32_t frameLastUpdated=0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	667b      	str	r3, [r7, #100]	; 0x64
			gameState.spaceship.lastShotTime=runtime;
 80028be:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <main+0x374>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
			drawWindow();
 80028c4:	f000 f996 	bl	8002bf4 <drawWindow>
			drawMoon(51,17);
 80028c8:	2111      	movs	r1, #17
 80028ca:	2033      	movs	r0, #51	; 0x33
 80028cc:	f7fe ffc4 	bl	8001858 <drawMoon>
			drawhearth(&gameState);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f8ef 	bl	8001ab8 <drawhearth>
			drawCity();
 80028da:	f7ff f9c7 	bl	8001c6c <drawCity>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 80028de:	e05d      	b.n	800299c <main+0x310>
				readKey(&gameState);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fea1 	bl	800262c <readKey>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fe7d 	bl	80025ee <bossKey>
 80028f4:	4603      	mov	r3, r0
 80028f6:	65bb      	str	r3, [r7, #88]	; 0x58
				if(bossKeyChange == 1) continue;
 80028f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d100      	bne.n	8002900 <main+0x274>
 80028fe:	e04d      	b.n	800299c <main+0x310>
				else if(bossKeyChange == 2){
 8002900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10a      	bne.n	800291c <main+0x290>
					//Initialize window agian
					clrscr();
 8002906:	f7fe f981 	bl	8000c0c <clrscr>
					gotoxy(0,0);
 800290a:	2100      	movs	r1, #0
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f98d 	bl	8000c2c <gotoxy>
					drawCity();
 8002912:	f7ff f9ab 	bl	8001c6c <drawCity>
					printf("GAME SCREEN");
 8002916:	4839      	ldr	r0, [pc, #228]	; (80029fc <main+0x370>)
 8002918:	f000 fc52 	bl	80031c0 <iprintf>
				}

				readKey(&gameState);
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fe83 	bl	800262c <readKey>
				if(runtime-frameLastUpdated>=framePeriod){//
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <main+0x374>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b03      	cmp	r3, #3
 8002930:	d934      	bls.n	800299c <main+0x310>
					updateSpaceship(&gameState);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f96a 	bl	8002c10 <updateSpaceship>
					spawnEnemy(&gameState);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fd3f 	bl	80013c4 <spawnEnemy>
					updateEnemy(&gameState);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fda4 	bl	8001498 <updateEnemy>
					shootSpaceship(&gameState);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f991 	bl	8002c7c <shootSpaceship>
					shootEnemy(&gameState);
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fdca 	bl	80014f8 <shootEnemy>
					updateBullets(&gameState);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fa3c 	bl	8000de6 <updateBullets>
					detectBulletHit(&gameState);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fa5a 	bl	8000e2c <detectBulletHit>
					detectCityHit(&gameState);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fe1f 	bl	80015c0 <detectCityHit>
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
					checkIfDead(&gameState);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fe3c 	bl	8002604 <checkIfDead>
					drawScreen(&gameState);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fdec 	bl	800256e <drawScreen>
					frameLastUpdated=runtime;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <main+0x374>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
			while(gameState.activeScreen==1){
 800299c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d09d      	beq.n	80028e0 <main+0x254>
				}
		}
			break;
 80029a4:	e07d      	b.n	8002aa2 <main+0x416>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80029a6:	f7fe f931 	bl	8000c0c <clrscr>
			drawWindow();
 80029aa:	f000 f923 	bl	8002bf4 <drawWindow>
			drawBox(1,1,156,43,0);//window
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	232b      	movs	r3, #43	; 0x2b
 80029b4:	229c      	movs	r2, #156	; 0x9c
 80029b6:	2101      	movs	r1, #1
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7fe f949 	bl	8000c50 <drawBox>
			drawbackground(); // stars in background
 80029be:	f7fe fe59 	bl	8001674 <drawbackground>
			drawHelpScreen();
 80029c2:	f000 f901 	bl	8002bc8 <drawHelpScreen>
			while(gameState.activeScreen==2){
 80029c6:	e036      	b.n	8002a36 <main+0x3aa>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe0e 	bl	80025ee <bossKey>
 80029d2:	4603      	mov	r3, r0
 80029d4:	65fb      	str	r3, [r7, #92]	; 0x5c
				if(bossKeyChange == 1) continue;
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d113      	bne.n	8002a04 <main+0x378>
 80029dc:	e02b      	b.n	8002a36 <main+0x3aa>
 80029de:	bf00      	nop
 80029e0:	080044d8 	.word	0x080044d8
 80029e4:	080044e0 	.word	0x080044e0
 80029e8:	080044e8 	.word	0x080044e8
 80029ec:	55555556 	.word	0x55555556
 80029f0:	0800443c 	.word	0x0800443c
 80029f4:	08004444 	.word	0x08004444
 80029f8:	0800444c 	.word	0x0800444c
 80029fc:	08004454 	.word	0x08004454
 8002a00:	200001c8 	.word	0x200001c8
				else if(bossKeyChange == 2){
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d10d      	bne.n	8002a26 <main+0x39a>
					//Initialize window agian
					clrscr();
 8002a0a:	f7fe f8ff 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	232b      	movs	r3, #43	; 0x2b
 8002a14:	229c      	movs	r2, #156	; 0x9c
 8002a16:	2101      	movs	r1, #1
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7fe f919 	bl	8000c50 <drawBox>
					drawbackground(); // stars in background
 8002a1e:	f7fe fe29 	bl	8001674 <drawbackground>
					drawHelpScreen();
 8002a22:	f000 f8d1 	bl	8002bc8 <drawHelpScreen>
				}

				if(centerIsPressed()){
 8002a26:	f7fe fb4d 	bl	80010c4 <centerIsPressed>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <main+0x3aa>
					gameState.activeScreen=0;//MENU SCREEN
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==2){
 8002a36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d0c4      	beq.n	80029c8 <main+0x33c>
				}
			}
			break;
 8002a3e:	e030      	b.n	8002aa2 <main+0x416>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8002a40:	f7fe f8e4 	bl	8000c0c <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8002a44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4816      	ldr	r0, [pc, #88]	; (8002aa4 <main+0x418>)
 8002a4c:	f000 fbb8 	bl	80031c0 <iprintf>
			while(gameState.activeScreen==3){
 8002a50:	e022      	b.n	8002a98 <main+0x40c>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fdc9 	bl	80025ee <bossKey>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
				if(bossKeyChange == 1) continue;
 8002a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d100      	bne.n	8002a68 <main+0x3dc>
 8002a66:	e017      	b.n	8002a98 <main+0x40c>
				else if(bossKeyChange == 2){
 8002a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <main+0x3f2>
					//Initialize window agian
					clrscr();
 8002a6e:	f7fe f8cd 	bl	8000c0c <clrscr>
					printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8002a72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a76:	4619      	mov	r1, r3
 8002a78:	480a      	ldr	r0, [pc, #40]	; (8002aa4 <main+0x418>)
 8002a7a:	f000 fba1 	bl	80031c0 <iprintf>
				}
				if(centerIsPressed()){
 8002a7e:	f7fe fb21 	bl	80010c4 <centerIsPressed>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <main+0x40c>
					initVariables(&gameState);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fd16 	bl	80024be <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			while(gameState.activeScreen==3){
 8002a98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d0d8      	beq.n	8002a52 <main+0x3c6>
				}
			}
			break;
 8002aa0:	bf00      	nop
		switch(gameState.activeScreen){
 8002aa2:	e622      	b.n	80026ea <main+0x5e>
 8002aa4:	08004460 	.word	0x08004460

08002aa8 <drawButton>:
>>>>>>> Stashed changes
=======
 8003d3a:	e0b2      	b.n	8003ea2 <main+0x362>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8003d3c:	f7fd fea4 	bl	8001a88 <clrscr>
			printf("GAME SCREEN");
 8003d40:	485f      	ldr	r0, [pc, #380]	; (8003ec0 <main+0x380>)
 8003d42:	f000 fc5b 	bl	80045fc <iprintf>
			uint32_t frameLastUpdated=0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	657b      	str	r3, [r7, #84]	; 0x54
			gameState.spaceship.lastShotTime=runtime;
 8003d4a:	4b5e      	ldr	r3, [pc, #376]	; (8003ec4 <main+0x384>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
			drawWindow();
 8003d50:	f000 f964 	bl	800401c <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8003d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d58:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe ff36 	bl	8002bd0 <drawMoon>
			drawhearth(&gameState);
 8003d64:	f107 031c 	add.w	r3, r7, #28
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f865 	bl	8002e38 <drawhearth>
			//drawWindow();
			drawCity();
 8003d6e:	f7ff f985 	bl	800307c <drawCity>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 8003d72:	e049      	b.n	8003e08 <main+0x2c8>
				readInput(&gameState);
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fe97 	bl	8003aac <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <main+0x384>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d93e      	bls.n	8003e08 <main+0x2c8>
					updateSpaceship(&gameState);
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f952 	bl	8004038 <updateSpaceship>
					spawnEnemy(&gameState);
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fc37 	bl	800260c <spawnEnemy>
					updateSpaceship(&gameState);
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f948 	bl	8004038 <updateSpaceship>
					spawnEnemy(&gameState);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fc2d 	bl	800260c <spawnEnemy>
					updateEnemy(&gameState);
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fca4 	bl	8002704 <updateEnemy>
					shootSpaceship(&gameState);
 8003dbc:	f107 031c 	add.w	r3, r7, #28
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f983 	bl	80040cc <shootSpaceship>
					shootEnemy(&gameState);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fcca 	bl	8002764 <shootEnemy>
					updateBullets(&gameState);
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd ff44 	bl	8001c62 <updateBullets>
					detectBulletHit(&gameState);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd ffbb 	bl	8001d5a <detectBulletHit>
					detectCityHit(&gameState);
 8003de4:	f107 031c 	add.w	r3, r7, #28
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fd1f 	bl	800282c <detectCityHit>
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
					checkIfDead(&gameState);
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fe47 	bl	8003a86 <checkIfDead>
					drawScreen(&gameState);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fdf5 	bl	80039ec <drawScreen>
					frameLastUpdated=runtime;
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <main+0x384>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
			while(gameState.activeScreen==1){
 8003e08:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d0b1      	beq.n	8003d74 <main+0x234>
				}
		}
			break;
 8003e10:	e047      	b.n	8003ea2 <main+0x362>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8003e12:	f7fd fe39 	bl	8001a88 <clrscr>
			drawWindow();
 8003e16:	f000 f901 	bl	800401c <drawWindow>
			drawbackground(); // stars in background
 8003e1a:	f7fe fde7 	bl	80029ec <drawbackground>
			drawHelpScreen();
 8003e1e:	f000 f8e7 	bl	8003ff0 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8003e22:	e00c      	b.n	8003e3e <main+0x2fe>
				readInput(&gameState);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe3f 	bl	8003aac <readInput>
				if(centerIsPressed()){
 8003e2e:	f7fe f9a7 	bl	8002180 <centerIsPressed>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <main+0x2fe>
					gameState.activeScreen=0;//MENU SCREEN
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			while(gameState.activeScreen==2){
 8003e3e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d0ee      	beq.n	8003e24 <main+0x2e4>
				}
			}
			break;
 8003e46:	e02c      	b.n	8003ea2 <main+0x362>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8003e48:	f7fd fe1e 	bl	8001a88 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8003e4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e50:	4619      	mov	r1, r3
 8003e52:	481d      	ldr	r0, [pc, #116]	; (8003ec8 <main+0x388>)
 8003e54:	f000 fbd2 	bl	80045fc <iprintf>
			while(gameState.activeScreen==3){
 8003e58:	e011      	b.n	8003e7e <main+0x33e>
				readInput(&gameState);
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe24 	bl	8003aac <readInput>
				if(centerIsPressed()){
 8003e64:	f7fe f98c 	bl	8002180 <centerIsPressed>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <main+0x33e>
					initVariables(&gameState);
 8003e6e:	f107 031c 	add.w	r3, r7, #28
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fd4e 	bl	8003914 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			while(gameState.activeScreen==3){
 8003e7e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d0e9      	beq.n	8003e5a <main+0x31a>
				}
			}
			break;
 8003e86:	e00c      	b.n	8003ea2 <main+0x362>
		case 4:
			readInput(&gameState);
 8003e88:	f107 031c 	add.w	r3, r7, #28
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fe0d 	bl	8003aac <readInput>
			gotoxy(0,0);
 8003e92:	2100      	movs	r1, #0
 8003e94:	2000      	movs	r0, #0
 8003e96:	f7fd fe07 	bl	8001aa8 <gotoxy>
			printf("Noget meget vigtigt!");
 8003e9a:	480c      	ldr	r0, [pc, #48]	; (8003ecc <main+0x38c>)
 8003e9c:	f000 fbae 	bl	80045fc <iprintf>
			break;
 8003ea0:	bf00      	nop
		switch(gameState.activeScreen){
 8003ea2:	e67b      	b.n	8003b9c <main+0x5c>
 8003ea4:	08005acc 	.word	0x08005acc
 8003ea8:	08005ad4 	.word	0x08005ad4
 8003eac:	08005adc 	.word	0x08005adc
 8003eb0:	55555556 	.word	0x55555556
 8003eb4:	08005a00 	.word	0x08005a00
 8003eb8:	08005a08 	.word	0x08005a08
 8003ebc:	08005a10 	.word	0x08005a10
 8003ec0:	08005a18 	.word	0x08005a18
 8003ec4:	200001cc 	.word	0x200001cc
 8003ec8:	08005a24 	.word	0x08005a24
 8003ecc:	08005a50 	.word	0x08005a50

08003ed0 <drawButton>:
>>>>>>> Stashed changes
#include "menu.h"




void drawButton(button_t btn){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	463b      	mov	r3, r7
 8001d14:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fa58 	bl	80001d0 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8001d24:	783b      	ldrb	r3, [r7, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	461c      	mov	r4, r3
 8001d2c:	783b      	ldrb	r3, [r7, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	1d5a      	adds	r2, r3, #5
 8001d36:	787b      	ldrb	r3, [r7, #1]
 8001d38:	3302      	adds	r3, #2
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	9100      	str	r1, [sp, #0]
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f7fe ff6a 	bl	8000c18 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8001d44:	783b      	ldrb	r3, [r7, #0]
 8001d46:	3303      	adds	r3, #3
 8001d48:	787a      	ldrb	r2, [r7, #1]
 8001d4a:	3201      	adds	r2, #1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ff50 	bl	8000bf4 <gotoxy>
	printf(btn.text);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fbf8 	bl	800254c <iprintf>
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}

08001d64 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fa2c 	bl	80001d0 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8001d7c:	783b      	ldrb	r3, [r7, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	461c      	mov	r4, r3
 8001d84:	783b      	ldrb	r3, [r7, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	1d5a      	adds	r2, r3, #5
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	3302      	adds	r3, #2
 8001d92:	2101      	movs	r1, #1
 8001d94:	9100      	str	r1, [sp, #0]
 8001d96:	4621      	mov	r1, r4
 8001d98:	f7fe ff3e 	bl	8000c18 <drawBox>
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	463b      	mov	r3, r7
 8001dac:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa0c 	bl	80001d0 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8001dbc:	783b      	ldrb	r3, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	783b      	ldrb	r3, [r7, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	1d5a      	adds	r2, r3, #5
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	9100      	str	r1, [sp, #0]
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f7fe ff1e 	bl	8000c18 <drawBox>
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}

08001de4 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001df4:	f7ff ff8a 	bl	8001d0c <drawButton>
	drawButton(btnList[1]);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e00:	f7ff ff84 	bl	8001d0c <drawButton>
	drawButton(btnList[2]);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3310      	adds	r3, #16
 8001e08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e0c:	f7ff ff7e 	bl	8001d0c <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e20:	f7ff ffa0 	bl	8001d64 <drawBtnAsSelected>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <drawHelpScreen>:


void drawHelpScreen(){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8001e30:	2105      	movs	r1, #5
 8001e32:	2046      	movs	r0, #70	; 0x46
 8001e34:	f7fe fede 	bl	8000bf4 <gotoxy>
	printf("HELP SCREEN");
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <drawHelpScreen+0x24>)
 8001e3a:	f000 fb87 	bl	800254c <iprintf>
	gotoxy(60,7);
 8001e3e:	2107      	movs	r1, #7
 8001e40:	203c      	movs	r0, #60	; 0x3c
 8001e42:	f7fe fed7 	bl	8000bf4 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <drawHelpScreen+0x28>)
 8001e48:	f000 fb80 	bl	800254c <iprintf>

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	08003830 	.word	0x08003830
 8001e54:	0800383c 	.word	0x0800383c

08001e58 <drawWindow>:

void drawWindow(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	232b      	movs	r3, #43	; 0x2b
 8001e64:	229c      	movs	r2, #156	; 0x9c
 8001e66:	2101      	movs	r1, #1
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7fe fed5 	bl	8000c18 <drawBox>
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <drawbackground>:

void drawbackground(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8001e78:	2123      	movs	r1, #35	; 0x23
 8001e7a:	2037      	movs	r0, #55	; 0x37
 8001e7c:	f7fe feba 	bl	8000bf4 <gotoxy>
	printf("*");
 8001e80:	202a      	movs	r0, #42	; 0x2a
 8001e82:	f000 fb7b 	bl	800257c <putchar>
	gotoxy(63,27);
 8001e86:	211b      	movs	r1, #27
 8001e88:	203f      	movs	r0, #63	; 0x3f
 8001e8a:	f7fe feb3 	bl	8000bf4 <gotoxy>
	printf("*");
 8001e8e:	202a      	movs	r0, #42	; 0x2a
 8001e90:	f000 fb74 	bl	800257c <putchar>
	gotoxy(10,15);
 8001e94:	210f      	movs	r1, #15
 8001e96:	200a      	movs	r0, #10
 8001e98:	f7fe feac 	bl	8000bf4 <gotoxy>
	printf("*");
 8001e9c:	202a      	movs	r0, #42	; 0x2a
 8001e9e:	f000 fb6d 	bl	800257c <putchar>
	gotoxy(20,40);
 8001ea2:	2128      	movs	r1, #40	; 0x28
 8001ea4:	2014      	movs	r0, #20
 8001ea6:	f7fe fea5 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001eaa:	202b      	movs	r0, #43	; 0x2b
 8001eac:	f000 fb66 	bl	800257c <putchar>

	gotoxy(155,37);
 8001eb0:	2125      	movs	r1, #37	; 0x25
 8001eb2:	209b      	movs	r0, #155	; 0x9b
 8001eb4:	f7fe fe9e 	bl	8000bf4 <gotoxy>
	printf("*");
 8001eb8:	202a      	movs	r0, #42	; 0x2a
 8001eba:	f000 fb5f 	bl	800257c <putchar>
	gotoxy(110,28);
 8001ebe:	211c      	movs	r1, #28
 8001ec0:	206e      	movs	r0, #110	; 0x6e
 8001ec2:	f7fe fe97 	bl	8000bf4 <gotoxy>
	printf("*");
 8001ec6:	202a      	movs	r0, #42	; 0x2a
 8001ec8:	f000 fb58 	bl	800257c <putchar>
	gotoxy(95,13);
 8001ecc:	210d      	movs	r1, #13
 8001ece:	205f      	movs	r0, #95	; 0x5f
 8001ed0:	f7fe fe90 	bl	8000bf4 <gotoxy>
	printf("*");
 8001ed4:	202a      	movs	r0, #42	; 0x2a
 8001ed6:	f000 fb51 	bl	800257c <putchar>
	gotoxy(130,19);
 8001eda:	2113      	movs	r1, #19
 8001edc:	2082      	movs	r0, #130	; 0x82
 8001ede:	f7fe fe89 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001ee2:	202b      	movs	r0, #43	; 0x2b
 8001ee4:	f000 fb4a 	bl	800257c <putchar>

	gotoxy(5,27);
 8001ee8:	211b      	movs	r1, #27
 8001eea:	2005      	movs	r0, #5
 8001eec:	f7fe fe82 	bl	8000bf4 <gotoxy>
	printf("*");
 8001ef0:	202a      	movs	r0, #42	; 0x2a
 8001ef2:	f000 fb43 	bl	800257c <putchar>
	gotoxy(6,5);
 8001ef6:	2105      	movs	r1, #5
 8001ef8:	2006      	movs	r0, #6
 8001efa:	f7fe fe7b 	bl	8000bf4 <gotoxy>
	printf("*");
 8001efe:	202a      	movs	r0, #42	; 0x2a
 8001f00:	f000 fb3c 	bl	800257c <putchar>
	gotoxy(13,13);
 8001f04:	210d      	movs	r1, #13
 8001f06:	200d      	movs	r0, #13
 8001f08:	f7fe fe74 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f0c:	202a      	movs	r0, #42	; 0x2a
 8001f0e:	f000 fb35 	bl	800257c <putchar>
	gotoxy(60,7);
 8001f12:	2107      	movs	r1, #7
 8001f14:	203c      	movs	r0, #60	; 0x3c
 8001f16:	f7fe fe6d 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001f1a:	202b      	movs	r0, #43	; 0x2b
 8001f1c:	f000 fb2e 	bl	800257c <putchar>

	gotoxy(140,3);
 8001f20:	2103      	movs	r1, #3
 8001f22:	208c      	movs	r0, #140	; 0x8c
 8001f24:	f7fe fe66 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f28:	202a      	movs	r0, #42	; 0x2a
 8001f2a:	f000 fb27 	bl	800257c <putchar>
	gotoxy(120,5);
 8001f2e:	2105      	movs	r1, #5
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f7fe fe5f 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f36:	202a      	movs	r0, #42	; 0x2a
 8001f38:	f000 fb20 	bl	800257c <putchar>
	gotoxy(110,7);
 8001f3c:	2107      	movs	r1, #7
 8001f3e:	206e      	movs	r0, #110	; 0x6e
 8001f40:	f7fe fe58 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f44:	202a      	movs	r0, #42	; 0x2a
 8001f46:	f000 fb19 	bl	800257c <putchar>
	gotoxy(70,30);
 8001f4a:	211e      	movs	r1, #30
 8001f4c:	2046      	movs	r0, #70	; 0x46
 8001f4e:	f7fe fe51 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001f52:	202b      	movs	r0, #43	; 0x2b
 8001f54:	f000 fb12 	bl	800257c <putchar>

	gotoxy(135,33);
 8001f58:	2121      	movs	r1, #33	; 0x21
 8001f5a:	2087      	movs	r0, #135	; 0x87
 8001f5c:	f7fe fe4a 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f60:	202a      	movs	r0, #42	; 0x2a
 8001f62:	f000 fb0b 	bl	800257c <putchar>
	gotoxy(123,36);
 8001f66:	2124      	movs	r1, #36	; 0x24
 8001f68:	207b      	movs	r0, #123	; 0x7b
 8001f6a:	f7fe fe43 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f6e:	202a      	movs	r0, #42	; 0x2a
 8001f70:	f000 fb04 	bl	800257c <putchar>
	gotoxy(138,40);
 8001f74:	2128      	movs	r1, #40	; 0x28
 8001f76:	208a      	movs	r0, #138	; 0x8a
 8001f78:	f7fe fe3c 	bl	8000bf4 <gotoxy>
	printf("*");
 8001f7c:	202a      	movs	r0, #42	; 0x2a
 8001f7e:	f000 fafd 	bl	800257c <putchar>
	gotoxy(127,25);
 8001f82:	2119      	movs	r1, #25
 8001f84:	207f      	movs	r0, #127	; 0x7f
 8001f86:	f7fe fe35 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001f8a:	202b      	movs	r0, #43	; 0x2b
 8001f8c:	f000 faf6 	bl	800257c <putchar>

	gotoxy(105,32);
 8001f90:	2120      	movs	r1, #32
 8001f92:	2069      	movs	r0, #105	; 0x69
 8001f94:	f7fe fe2e 	bl	8000bf4 <gotoxy>
	printf("%c",42);
 8001f98:	202a      	movs	r0, #42	; 0x2a
 8001f9a:	f000 faef 	bl	800257c <putchar>
	gotoxy(106,33);
 8001f9e:	2121      	movs	r1, #33	; 0x21
 8001fa0:	206a      	movs	r0, #106	; 0x6a
 8001fa2:	f7fe fe27 	bl	8000bf4 <gotoxy>
	printf("%c",92);
 8001fa6:	205c      	movs	r0, #92	; 0x5c
 8001fa8:	f000 fae8 	bl	800257c <putchar>
	gotoxy(107,34);
 8001fac:	2122      	movs	r1, #34	; 0x22
 8001fae:	206b      	movs	r0, #107	; 0x6b
 8001fb0:	f7fe fe20 	bl	8000bf4 <gotoxy>
	printf("%c",92);
 8001fb4:	205c      	movs	r0, #92	; 0x5c
 8001fb6:	f000 fae1 	bl	800257c <putchar>

	gotoxy(23,15);
 8001fba:	210f      	movs	r1, #15
 8001fbc:	2017      	movs	r0, #23
 8001fbe:	f7fe fe19 	bl	8000bf4 <gotoxy>
	printf("*");
 8001fc2:	202a      	movs	r0, #42	; 0x2a
 8001fc4:	f000 fada 	bl	800257c <putchar>
	gotoxy(37,21);
 8001fc8:	2115      	movs	r1, #21
 8001fca:	2025      	movs	r0, #37	; 0x25
 8001fcc:	f7fe fe12 	bl	8000bf4 <gotoxy>
	printf("*");
 8001fd0:	202a      	movs	r0, #42	; 0x2a
 8001fd2:	f000 fad3 	bl	800257c <putchar>
	gotoxy(26,24);
 8001fd6:	2118      	movs	r1, #24
 8001fd8:	201a      	movs	r0, #26
 8001fda:	f7fe fe0b 	bl	8000bf4 <gotoxy>
	printf("*");
 8001fde:	202a      	movs	r0, #42	; 0x2a
 8001fe0:	f000 facc 	bl	800257c <putchar>
	gotoxy(30,29);
 8001fe4:	211d      	movs	r1, #29
 8001fe6:	201e      	movs	r0, #30
 8001fe8:	f7fe fe04 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8001fec:	202b      	movs	r0, #43	; 0x2b
 8001fee:	f000 fac5 	bl	800257c <putchar>

	gotoxy(25,6);
 8001ff2:	2106      	movs	r1, #6
 8001ff4:	2019      	movs	r0, #25
 8001ff6:	f7fe fdfd 	bl	8000bf4 <gotoxy>
	printf("*");
 8001ffa:	202a      	movs	r0, #42	; 0x2a
 8001ffc:	f000 fabe 	bl	800257c <putchar>
	gotoxy(39,7);
 8002000:	2107      	movs	r1, #7
 8002002:	2027      	movs	r0, #39	; 0x27
 8002004:	f7fe fdf6 	bl	8000bf4 <gotoxy>
	printf("*");
 8002008:	202a      	movs	r0, #42	; 0x2a
 800200a:	f000 fab7 	bl	800257c <putchar>
	gotoxy(41,3);
 800200e:	2103      	movs	r1, #3
 8002010:	2029      	movs	r0, #41	; 0x29
 8002012:	f7fe fdef 	bl	8000bf4 <gotoxy>
	printf("*");
 8002016:	202a      	movs	r0, #42	; 0x2a
 8002018:	f000 fab0 	bl	800257c <putchar>
	gotoxy(75,10);
 800201c:	210a      	movs	r1, #10
 800201e:	204b      	movs	r0, #75	; 0x4b
 8002020:	f7fe fde8 	bl	8000bf4 <gotoxy>
	printf("%c",43);
 8002024:	202b      	movs	r0, #43	; 0x2b
 8002026:	f000 faa9 	bl	800257c <putchar>

	gotoxy(100,20);
 800202a:	2114      	movs	r1, #20
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	f7fe fde1 	bl	8000bf4 <gotoxy>
	printf("%c",197);
 8002032:	20c5      	movs	r0, #197	; 0xc5
 8002034:	f000 faa2 	bl	800257c <putchar>
	gotoxy(135,12);
 8002038:	210c      	movs	r1, #12
 800203a:	2087      	movs	r0, #135	; 0x87
 800203c:	f7fe fdda 	bl	8000bf4 <gotoxy>
	printf("%c",197);
 8002040:	20c5      	movs	r0, #197	; 0xc5
 8002042:	f000 fa9b 	bl	800257c <putchar>
	gotoxy(30,5);
 8002046:	2105      	movs	r1, #5
 8002048:	201e      	movs	r0, #30
 800204a:	f7fe fdd3 	bl	8000bf4 <gotoxy>
	printf("%c",197);
 800204e:	20c5      	movs	r0, #197	; 0xc5
 8002050:	f000 fa94 	bl	800257c <putchar>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <updateSpaceship>:
=======
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	463b      	mov	r3, r7
 8002ab0:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fb8a 	bl	80001d0 <strlen>
 8002abc:	4603      	mov	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8002ac0:	783b      	ldrb	r3, [r7, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	783b      	ldrb	r3, [r7, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	1d5a      	adds	r2, r3, #5
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	9100      	str	r1, [sp, #0]
 8002ada:	4621      	mov	r1, r4
 8002adc:	f7fe f8b8 	bl	8000c50 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8002ae0:	783b      	ldrb	r3, [r7, #0]
 8002ae2:	3303      	adds	r3, #3
 8002ae4:	787a      	ldrb	r2, [r7, #1]
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe f89e 	bl	8000c2c <gotoxy>
	printf(btn.text);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb64 	bl	80031c0 <iprintf>
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	463b      	mov	r3, r7
 8002b08:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fb5e 	bl	80001d0 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8002b18:	783b      	ldrb	r3, [r7, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	461c      	mov	r4, r3
 8002b20:	783b      	ldrb	r3, [r7, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	1d5a      	adds	r2, r3, #5
 8002b2a:	787b      	ldrb	r3, [r7, #1]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	2101      	movs	r1, #1
 8002b30:	9100      	str	r1, [sp, #0]
 8002b32:	4621      	mov	r1, r4
 8002b34:	f7fe f88c 	bl	8000c50 <drawBox>
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd90      	pop	{r4, r7, pc}

08002b40 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	463b      	mov	r3, r7
 8002b48:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb3e 	bl	80001d0 <strlen>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8002b58:	783b      	ldrb	r3, [r7, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	461c      	mov	r4, r3
 8002b60:	783b      	ldrb	r3, [r7, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	1d5a      	adds	r2, r3, #5
 8002b6a:	787b      	ldrb	r3, [r7, #1]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	2100      	movs	r1, #0
 8002b70:	9100      	str	r1, [sp, #0]
 8002b72:	4621      	mov	r1, r4
 8002b74:	f7fe f86c 	bl	8000c50 <drawBox>
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}

08002b80 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b90:	f7ff ff8a 	bl	8002aa8 <drawButton>
	drawButton(btnList[1]);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3308      	adds	r3, #8
 8002b98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b9c:	f7ff ff84 	bl	8002aa8 <drawButton>
	drawButton(btnList[2]);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ba8:	f7ff ff7e 	bl	8002aa8 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bbc:	f7ff ffa0 	bl	8002b00 <drawBtnAsSelected>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <drawHelpScreen>:


void drawHelpScreen(){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8002bcc:	2105      	movs	r1, #5
 8002bce:	2046      	movs	r0, #70	; 0x46
 8002bd0:	f7fe f82c 	bl	8000c2c <gotoxy>
	printf("HELP SCREEN");
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <drawHelpScreen+0x24>)
 8002bd6:	f000 faf3 	bl	80031c0 <iprintf>
	gotoxy(60,7);
 8002bda:	2107      	movs	r1, #7
 8002bdc:	203c      	movs	r0, #60	; 0x3c
 8002bde:	f7fe f825 	bl	8000c2c <gotoxy>
	printf("Tag dig dog sammen mand!");
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <drawHelpScreen+0x28>)
 8002be4:	f000 faec 	bl	80031c0 <iprintf>

}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	080044b0 	.word	0x080044b0
 8002bf0:	080044bc 	.word	0x080044bc

08002bf4 <drawWindow>:

void drawWindow(){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	232b      	movs	r3, #43	; 0x2b
 8002c00:	229c      	movs	r2, #156	; 0x9c
 8002c02:	2101      	movs	r1, #1
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7fe f823 	bl	8000c50 <drawBox>
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <updateSpaceship>:
>>>>>>> Stashed changes
=======
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc f976 	bl	80001d0 <strlen>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003ee8:	783b      	ldrb	r3, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	461c      	mov	r4, r3
 8003ef0:	783b      	ldrb	r3, [r7, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	1d5a      	adds	r2, r3, #5
 8003efa:	787b      	ldrb	r3, [r7, #1]
 8003efc:	3302      	adds	r3, #2
 8003efe:	2100      	movs	r1, #0
 8003f00:	9100      	str	r1, [sp, #0]
 8003f02:	4621      	mov	r1, r4
 8003f04:	f7fd fde2 	bl	8001acc <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8003f08:	783b      	ldrb	r3, [r7, #0]
 8003f0a:	3303      	adds	r3, #3
 8003f0c:	787a      	ldrb	r2, [r7, #1]
 8003f0e:	3201      	adds	r2, #1
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fdc8 	bl	8001aa8 <gotoxy>
	printf(btn.text);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb6e 	bl	80045fc <iprintf>
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}

08003f28 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	463b      	mov	r3, r7
 8003f30:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc f94a 	bl	80001d0 <strlen>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8003f40:	783b      	ldrb	r3, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	787b      	ldrb	r3, [r7, #1]
 8003f46:	461c      	mov	r4, r3
 8003f48:	783b      	ldrb	r3, [r7, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	1d5a      	adds	r2, r3, #5
 8003f52:	787b      	ldrb	r3, [r7, #1]
 8003f54:	3302      	adds	r3, #2
 8003f56:	2101      	movs	r1, #1
 8003f58:	9100      	str	r1, [sp, #0]
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	f7fd fdb6 	bl	8001acc <drawBox>
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd90      	pop	{r4, r7, pc}

08003f68 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	463b      	mov	r3, r7
 8003f70:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc f92a 	bl	80001d0 <strlen>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003f80:	783b      	ldrb	r3, [r7, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	461c      	mov	r4, r3
 8003f88:	783b      	ldrb	r3, [r7, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	1d5a      	adds	r2, r3, #5
 8003f92:	787b      	ldrb	r3, [r7, #1]
 8003f94:	3302      	adds	r3, #2
 8003f96:	2100      	movs	r1, #0
 8003f98:	9100      	str	r1, [sp, #0]
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	f7fd fd96 	bl	8001acc <drawBox>
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}

08003fa8 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fb8:	f7ff ff8a 	bl	8003ed0 <drawButton>
	drawButton(btnList[1]);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fc4:	f7ff ff84 	bl	8003ed0 <drawButton>
	drawButton(btnList[2]);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fd0:	f7ff ff7e 	bl	8003ed0 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fe4:	f7ff ffa0 	bl	8003f28 <drawBtnAsSelected>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <drawHelpScreen>:


void drawHelpScreen(){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8003ff4:	2105      	movs	r1, #5
 8003ff6:	2046      	movs	r0, #70	; 0x46
 8003ff8:	f7fd fd56 	bl	8001aa8 <gotoxy>
	printf("HELP SCREEN");
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <drawHelpScreen+0x24>)
 8003ffe:	f000 fafd 	bl	80045fc <iprintf>
	gotoxy(60,7);
 8004002:	2107      	movs	r1, #7
 8004004:	203c      	movs	r0, #60	; 0x3c
 8004006:	f7fd fd4f 	bl	8001aa8 <gotoxy>
	printf("Tag dig dog sammen mand!");
 800400a:	4803      	ldr	r0, [pc, #12]	; (8004018 <drawHelpScreen+0x28>)
 800400c:	f000 faf6 	bl	80045fc <iprintf>

}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08005a8c 	.word	0x08005a8c
 8004018:	08005a98 	.word	0x08005a98

0800401c <drawWindow>:

void drawWindow(){
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	232b      	movs	r3, #43	; 0x2b
 8004028:	229c      	movs	r2, #156	; 0x9c
 800402a:	2101      	movs	r1, #1
 800402c:	2001      	movs	r0, #1
 800402e:	f7fd fd4d 	bl	8001acc <drawBox>
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <updateSpaceship>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

<<<<<<< Updated upstream
void updateSpaceship(gameState_t* gameState, uint8_t* dir){
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]

	if(fpToInt(gameState->spaceship.position.x)>=screenWidth-1){
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	899b      	ldrh	r3, [r3, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f976 	bl	8001358 <fpToInt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b9a      	cmp	r3, #154	; 0x9a
 8002070:	d903      	bls.n	800207a <updateSpaceship+0x22>
		*dir =1;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e00a      	b.n	8002090 <updateSpaceship+0x38>
	} else if(fpToInt(gameState->spaceship.position.x)<=2){
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	899b      	ldrh	r3, [r3, #12]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f96a 	bl	8001358 <fpToInt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b02      	cmp	r3, #2
 8002088:	d802      	bhi.n	8002090 <updateSpaceship+0x38>
		*dir =0;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	}
	if(*dir==0){
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <updateSpaceship+0x56>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	899c      	ldrh	r4, [r3, #12]
 800209c:	2002      	movs	r0, #2
 800209e:	f7ff f945 	bl	800132c <intToFp>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4423      	add	r3, r4
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	821a      	strh	r2, [r3, #16]
=======
void updateSpaceship(gameState_t* gameState){
<<<<<<< Updated upstream
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	if(gameState->direction == -1 && gameState->spaceship.position.x > intToFp(2)){
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d110      	bne.n	8002c46 <updateSpaceship+0x36>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68dc      	ldr	r4, [r3, #12]
 8002c28:	2002      	movs	r0, #2
 8002c2a:	f7fe fced 	bl	8001608 <intToFp>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	429c      	cmp	r4, r3
 8002c32:	d908      	bls.n	8002c46 <updateSpaceship+0x36>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x - intToFp(1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68dc      	ldr	r4, [r3, #12]
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fe fce5 	bl	8001608 <intToFp>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	1ae2      	subs	r2, r4, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	615a      	str	r2, [r3, #20]
	}
	if(gameState->direction == 1 && gameState->spaceship.position.x < intToFp(148)){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d110      	bne.n	8002c72 <updateSpaceship+0x62>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68dc      	ldr	r4, [r3, #12]
 8002c54:	2094      	movs	r0, #148	; 0x94
 8002c56:	f7fe fcd7 	bl	8001608 <intToFp>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	d208      	bcs.n	8002c72 <updateSpaceship+0x62>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x + intToFp(1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68dc      	ldr	r4, [r3, #12]
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7fe fccf 	bl	8001608 <intToFp>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	18e2      	adds	r2, r4, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	615a      	str	r2, [r3, #20]
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
>>>>>>> Stashed changes
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
	*/
}
<<<<<<< Updated upstream
 80020ac:	e009      	b.n	80020c2 <updateSpaceship+0x6a>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	899c      	ldrh	r4, [r3, #12]
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7ff f93a 	bl	800132c <intToFp>
 80020b8:	4603      	mov	r3, r0
 80020ba:	1ae3      	subs	r3, r4, r3
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	821a      	strh	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}

080020ca <_getpid>:
=======
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
	...

08002c7c <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b092      	sub	sp, #72	; 0x48
 8002c80:	af04      	add	r7, sp, #16
 8002c82:	6078      	str	r0, [r7, #4]
	uint8_t firingPeriod = gameState->spaceship.firingPeriod;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7f5b      	ldrb	r3, [r3, #29]
 8002c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

=======
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x - intToFp(1);
	}
	if(gameState->direction == 1 && gameState->spaceship.position.x < intToFp(148)){
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x + intToFp(1);
	}*/
	uint16_t potVal = readPotentiometer();
 8004040:	f7fe fac2 	bl	80025c8 <readPotentiometer>
 8004044:	4603      	mov	r3, r0
 8004046:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fc1a 	bl	8002884 <intToFp>
 8004050:	4604      	mov	r4, r0
 8004052:	200d      	movs	r0, #13
 8004054:	f7fe fc16 	bl	8002884 <intToFp>
 8004058:	4603      	mov	r3, r0
 800405a:	4619      	mov	r1, r3
 800405c:	4620      	mov	r0, r4
 800405e:	f7fe fc68 	bl	8002932 <fpDivide>
 8004062:	60f8      	str	r0, [r7, #12]
	if(fpToInt(x) <= 1){
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7fe fc22 	bl	80028ae <fpToInt>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	dc03      	bgt.n	8004078 <updateSpaceship+0x40>
		x = intToFp(2);
 8004070:	2002      	movs	r0, #2
 8004072:	f7fe fc07 	bl	8002884 <intToFp>
 8004076:	60f8      	str	r0, [r7, #12]
	}
	if(fpToInt(x) >= 156){
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7fe fc18 	bl	80028ae <fpToInt>
 800407e:	4603      	mov	r3, r0
 8004080:	2b9b      	cmp	r3, #155	; 0x9b
 8004082:	dd03      	ble.n	800408c <updateSpaceship+0x54>
		x = intToFp(155);
 8004084:	209b      	movs	r0, #155	; 0x9b
 8004086:	f7fe fbfd 	bl	8002884 <intToFp>
 800408a:	60f8      	str	r0, [r7, #12]
	}
	gotoxy(10,10);
 800408c:	210a      	movs	r1, #10
 800408e:	200a      	movs	r0, #10
 8004090:	f7fd fd0a 	bl	8001aa8 <gotoxy>
	printf("               ");
 8004094:	480b      	ldr	r0, [pc, #44]	; (80040c4 <updateSpaceship+0x8c>)
 8004096:	f000 fab1 	bl	80045fc <iprintf>
	gotoxy(10,10);
 800409a:	210a      	movs	r1, #10
 800409c:	200a      	movs	r0, #10
 800409e:	f7fd fd03 	bl	8001aa8 <gotoxy>
	printf("%d, %d", potVal, fpToInt(x));
 80040a2:	897c      	ldrh	r4, [r7, #10]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7fe fc02 	bl	80028ae <fpToInt>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461a      	mov	r2, r3
 80040ae:	4621      	mov	r1, r4
 80040b0:	4805      	ldr	r0, [pc, #20]	; (80040c8 <updateSpaceship+0x90>)
 80040b2:	f000 faa3 	bl	80045fc <iprintf>
	gameState->spaceship.nextPosition.x = x;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	615a      	str	r2, [r3, #20]

}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd90      	pop	{r4, r7, pc}
 80040c4:	08005ab4 	.word	0x08005ab4
 80040c8:	08005ac4 	.word	0x08005ac4

080040cc <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 80040cc:	b5b0      	push	{r4, r5, r7, lr}
 80040ce:	b090      	sub	sp, #64	; 0x40
 80040d0:	af04      	add	r7, sp, #16
 80040d2:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 80040d4:	f7fe f854 	bl	8002180 <centerIsPressed>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03b      	beq.n	8004156 <shootSpaceship+0x8a>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){
>>>>>>> Stashed changes

	if(runtime-gameState->spaceship.lastShotTime>=firingPeriod){//
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <shootSpaceship+0xac>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d33f      	bcc.n	8002d1e <shootSpaceship+0xa2>
		gameState->spaceship.lastShotTime = runtime;
<<<<<<< Updated upstream
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <shootSpaceship+0xac>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),intToFp(-3)};
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fcae 	bl	8001608 <intToFp>
 8002cac:	4603      	mov	r3, r0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8002cb4:	f7fe fca8 	bl	8001608 <intToFp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691c      	ldr	r4, [r3, #16]
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7fe fc9e 	bl	8001608 <intToFp>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	1ae3      	subs	r3, r4, r3
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cde:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cee:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cfe:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 8002d02:	687d      	ldr	r5, [r7, #4]
 8002d04:	466c      	mov	r4, sp
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f7ff fab3 	bl	8002284 <appendBullet>
	}
}
 8002d1e:	bf00      	nop
 8002d20:	3738      	adds	r7, #56	; 0x38
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200001c8 	.word	0x200001c8

08002d2c <_getpid>:
>>>>>>> Stashed changes
=======
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <shootSpaceship+0x94>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fe fbcc 	bl	8002884 <intToFp>
 80040ec:	4603      	mov	r3, r0
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <shootSpaceship+0x98>)
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691c      	ldr	r4, [r3, #16]
 80040fe:	2001      	movs	r0, #1
 8004100:	f7fe fbc0 	bl	8002884 <intToFp>
 8004104:	4603      	mov	r3, r0
 8004106:	1ae3      	subs	r3, r4, r3
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	f107 0220 	add.w	r2, r7, #32
 8004112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004116:	e883 0003 	stmia.w	r3, {r0, r1}
 800411a:	f107 0310 	add.w	r3, r7, #16
 800411e:	f107 0220 	add.w	r2, r7, #32
 8004122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004126:	e883 0003 	stmia.w	r3, {r0, r1}
 800412a:	f107 0318 	add.w	r3, r7, #24
 800412e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004136:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 800413a:	687d      	ldr	r5, [r7, #4]
 800413c:	466c      	mov	r4, sp
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff fa9f 	bl	8003694 <appendBullet>
	}
}
 8004156:	bf00      	nop
 8004158:	3730      	adds	r7, #48	; 0x30
 800415a:	46bd      	mov	sp, r7
 800415c:	bdb0      	pop	{r4, r5, r7, pc}
 800415e:	bf00      	nop
 8004160:	200001cc 	.word	0x200001cc
 8004164:	ffff0000 	.word	0xffff0000

08004168 <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
	return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_kill>:

int _kill(int pid, int sig)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e4:	f000 f94e 	bl	8002384 <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2216      	movs	r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
	return -1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_exit>:

void _exit (int status)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002102:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffe7 	bl	80020da <_kill>
	while (1) {}		/* Make sure we hang here */
 800210c:	e7fe      	b.n	800210c <_exit+0x12>

0800210e <_read>:
=======
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d46:	f000 f94f 	bl	8002fe8 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d6e:	e7fe      	b.n	8002d6e <_exit+0x12>

08002d70 <_read>:
>>>>>>> Stashed changes
=======
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
	return 1;
 800416c:	2301      	movs	r3, #1
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_kill>:

int _kill(int pid, int sig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004182:	f000 f94f 	bl	8004424 <__errno>
 8004186:	4603      	mov	r3, r0
 8004188:	2216      	movs	r2, #22
 800418a:	601a      	str	r2, [r3, #0]
	return -1;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_exit>:

void _exit (int status)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffe7 	bl	8004178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041aa:	e7fe      	b.n	80041aa <_exit+0x12>

080041ac <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e00a      	b.n	8002136 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002120:	f3af 8000 	nop.w
 8002124:	4601      	mov	r1, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	b2ca      	uxtb	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf0      	blt.n	8002120 <_read+0x12>
	}

return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_close>:
=======
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d82:	f3af 8000 	nop.w
 8002d86:	4601      	mov	r1, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf0      	blt.n	8002d82 <_read+0x12>
	}

return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_close>:
>>>>>>> Stashed changes
=======
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e00a      	b.n	80041d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041be:	f3af 8000 	nop.w
 80041c2:	4601      	mov	r1, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	60ba      	str	r2, [r7, #8]
 80041ca:	b2ca      	uxtb	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	dbf0      	blt.n	80041be <_read+0x12>
	}

return len;
 80041dc:	687b      	ldr	r3, [r7, #4]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_close>:
>>>>>>> Stashed changes
	}
	return len;
}

int _close(int file)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	return -1;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_fstat>:
=======
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return -1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_fstat>:
>>>>>>> Stashed changes
=======
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
	return -1;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002170:	605a      	str	r2, [r3, #4]
	return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
	return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
=======
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_isatty>:

int _isatty(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <_sbrk>:
>>>>>>> Stashed changes
=======
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800420e:	605a      	str	r2, [r3, #4]
	return 0;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <_isatty>:

int _isatty(int file)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
	return 1;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	return 0;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <_sbrk>:
>>>>>>> Stashed changes
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
=======
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x50>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x16>
		heap_end = &end;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <_sbrk+0x50>)
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <_sbrk+0x54>)
 80021c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <_sbrk+0x50>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <_sbrk+0x50>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	466a      	mov	r2, sp
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d907      	bls.n	80021ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021da:	f000 f8d3 	bl	8002384 <__errno>
 80021de:	4603      	mov	r3, r0
 80021e0:	220c      	movs	r2, #12
 80021e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e8:	e006      	b.n	80021f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <_sbrk+0x50>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a03      	ldr	r2, [pc, #12]	; (8002200 <_sbrk+0x50>)
 80021f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200001bc 	.word	0x200001bc
 8002204:	200001e0 	.word	0x200001e0

08002208 <SystemInit>:
=======
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x50>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x16>
		heap_end = &end;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <_sbrk+0x50>)
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <_sbrk+0x54>)
 8002e28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <_sbrk+0x50>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <_sbrk+0x50>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	466a      	mov	r2, sp
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d907      	bls.n	8002e4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e3e:	f000 f8d3 	bl	8002fe8 <__errno>
 8002e42:	4603      	mov	r3, r0
 8002e44:	220c      	movs	r2, #12
 8002e46:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4c:	e006      	b.n	8002e5c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <_sbrk+0x50>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <_sbrk+0x50>)
 8002e58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200001bc 	.word	0x200001bc
 8002e68:	200001e0 	.word	0x200001e0

08002e6c <SystemInit>:
>>>>>>> Stashed changes
=======
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <_sbrk+0x50>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <_sbrk+0x16>
		heap_end = &end;
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <_sbrk+0x50>)
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <_sbrk+0x54>)
 8004264:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <_sbrk+0x50>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <_sbrk+0x50>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	466a      	mov	r2, sp
 8004276:	4293      	cmp	r3, r2
 8004278:	d907      	bls.n	800428a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800427a:	f000 f8d3 	bl	8004424 <__errno>
 800427e:	4603      	mov	r3, r0
 8004280:	220c      	movs	r2, #12
 8004282:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004288:	e006      	b.n	8004298 <_sbrk+0x48>
	}

	heap_end += incr;
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <_sbrk+0x50>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <_sbrk+0x50>)
 8004294:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200001c0 	.word	0x200001c0
 80042a4:	200001e0 	.word	0x200001e0

080042a8 <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <SystemInit+0x84>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <SystemInit+0x84>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <SystemInit+0x84>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <SystemInit+0x84>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
=======
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <SystemInit+0x84>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <SystemInit+0x84>)
 80042b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <SystemInit+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <SystemInit+0x88>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <SystemInit+0x88>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4918      	ldr	r1, [pc, #96]	; (8002290 <SystemInit+0x88>)
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <SystemInit+0x8c>)
 8002230:	4013      	ands	r3, r2
 8002232:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <SystemInit+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <SystemInit+0x88>)
 800223a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <SystemInit+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <SystemInit+0x88>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <SystemInit+0x88>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <SystemInit+0x88>)
 8002256:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800225a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <SystemInit+0x88>)
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <SystemInit+0x88>)
 8002262:	f023 030f 	bic.w	r3, r3, #15
 8002266:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <SystemInit+0x88>)
 800226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226c:	4908      	ldr	r1, [pc, #32]	; (8002290 <SystemInit+0x88>)
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <SystemInit+0x90>)
 8002270:	4013      	ands	r3, r2
 8002272:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <SystemInit+0x88>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
=======
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <SystemInit+0x88>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <SystemInit+0x88>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <SystemInit+0x88>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4918      	ldr	r1, [pc, #96]	; (8002ef4 <SystemInit+0x88>)
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <SystemInit+0x8c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <SystemInit+0x88>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <SystemInit+0x88>)
 8002e9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <SystemInit+0x88>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <SystemInit+0x88>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <SystemInit+0x88>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <SystemInit+0x88>)
 8002eba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ebe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <SystemInit+0x88>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <SystemInit+0x88>)
 8002ec6:	f023 030f 	bic.w	r3, r3, #15
 8002eca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <SystemInit+0x88>)
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <SystemInit+0x88>)
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <SystemInit+0x90>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <SystemInit+0x88>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 80042bc:	4b1c      	ldr	r3, [pc, #112]	; (8004330 <SystemInit+0x88>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <SystemInit+0x88>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <SystemInit+0x88>)
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	4918      	ldr	r1, [pc, #96]	; (8004330 <SystemInit+0x88>)
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <SystemInit+0x8c>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80042d4:	4b16      	ldr	r3, [pc, #88]	; (8004330 <SystemInit+0x88>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <SystemInit+0x88>)
 80042da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <SystemInit+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <SystemInit+0x88>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <SystemInit+0x88>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <SystemInit+0x88>)
 80042f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80042fa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <SystemInit+0x88>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <SystemInit+0x88>)
 8004302:	f023 030f 	bic.w	r3, r3, #15
 8004306:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <SystemInit+0x88>)
 800430a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430c:	4908      	ldr	r1, [pc, #32]	; (8004330 <SystemInit+0x88>)
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <SystemInit+0x90>)
 8004310:	4013      	ands	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <SystemInit+0x88>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800227a:	f000 f80f 	bl	800229c <SetSysClock>
=======
 8002ede:	f000 f80f 	bl	8002f00 <SetSysClock>
>>>>>>> Stashed changes
=======
 800431a:	f000 f80f 	bl	800433c <SetSysClock>
>>>>>>> Stashed changes
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <SystemInit+0x84>)
 8002280:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002284:	609a      	str	r2, [r3, #8]
#endif  
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00
 8002290:	40021000 	.word	0x40021000
 8002294:	f87fc00c 	.word	0xf87fc00c
 8002298:	ff00fccc 	.word	0xff00fccc

0800229c <SetSysClock>:
=======
 8002ee2:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <SystemInit+0x84>)
 8002ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee8:	609a      	str	r2, [r3, #8]
#endif  
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	f87fc00c 	.word	0xf87fc00c
 8002efc:	ff00fccc 	.word	0xff00fccc

08002f00 <SetSysClock>:
>>>>>>> Stashed changes
=======
 800431e:	4b03      	ldr	r3, [pc, #12]	; (800432c <SystemInit+0x84>)
 8004320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004324:	609a      	str	r2, [r3, #8]
#endif  
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	40021000 	.word	0x40021000
 8004334:	f87fc00c 	.word	0xf87fc00c
 8004338:	ff00fccc 	.word	0xff00fccc

0800433c <SetSysClock>:
>>>>>>> Stashed changes
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
=======
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <SetSysClock+0x8c>)
 80022a2:	2212      	movs	r2, #18
 80022a4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <SetSysClock+0x90>)
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <SetSysClock+0x90>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <SetSysClock+0x90>)
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <SetSysClock+0x90>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <SetSysClock+0x90>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <SetSysClock+0x90>)
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <SetSysClock+0x90>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <SetSysClock+0x90>)
 80022c8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80022cc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <SetSysClock+0x90>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <SetSysClock+0x90>)
 80022d4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80022d8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <SetSysClock+0x90>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <SetSysClock+0x90>)
 80022e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80022e6:	bf00      	nop
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <SetSysClock+0x90>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f9      	beq.n	80022e8 <SetSysClock+0x4c>
=======
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <SetSysClock+0x8c>)
 8002f06:	2212      	movs	r2, #18
 8002f08:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <SetSysClock+0x90>)
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <SetSysClock+0x90>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <SetSysClock+0x90>)
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <SetSysClock+0x90>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <SetSysClock+0x90>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <SetSysClock+0x90>)
 8002f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f24:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <SetSysClock+0x90>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <SetSysClock+0x90>)
 8002f2c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f30:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <SetSysClock+0x90>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <SetSysClock+0x90>)
 8002f38:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002f3c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <SetSysClock+0x90>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <SetSysClock+0x90>)
 8002f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f48:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002f4a:	bf00      	nop
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <SetSysClock+0x90>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f9      	beq.n	8002f4c <SetSysClock+0x4c>
>>>>>>> Stashed changes
=======
 8004340:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <SetSysClock+0x8c>)
 8004342:	2212      	movs	r2, #18
 8004344:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <SetSysClock+0x90>)
 8004348:	4a20      	ldr	r2, [pc, #128]	; (80043cc <SetSysClock+0x90>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <SetSysClock+0x90>)
 8004350:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <SetSysClock+0x90>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <SetSysClock+0x90>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <SetSysClock+0x90>)
 800435c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004360:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <SetSysClock+0x90>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4a19      	ldr	r2, [pc, #100]	; (80043cc <SetSysClock+0x90>)
 8004368:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800436c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800436e:	4b17      	ldr	r3, [pc, #92]	; (80043cc <SetSysClock+0x90>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <SetSysClock+0x90>)
 8004374:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8004378:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <SetSysClock+0x90>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <SetSysClock+0x90>)
 8004380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004384:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004386:	bf00      	nop
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <SetSysClock+0x90>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f9      	beq.n	8004388 <SetSysClock+0x4c>
>>>>>>> Stashed changes
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <SetSysClock+0x90>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <SetSysClock+0x90>)
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <SetSysClock+0x90>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <SetSysClock+0x90>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800230c:	bf00      	nop
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <SetSysClock+0x90>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d1f9      	bne.n	800230e <SetSysClock+0x72>
  {
  }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000

08002330 <Reset_Handler>:
=======
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <SetSysClock+0x90>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <SetSysClock+0x90>)
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <SetSysClock+0x90>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <SetSysClock+0x90>)
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002f70:	bf00      	nop
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <SetSysClock+0x90>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d1f9      	bne.n	8002f72 <SetSysClock+0x72>
  {
  }
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000

08002f94 <Reset_Handler>:
>>>>>>> Stashed changes
=======
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <SetSysClock+0x90>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <SetSysClock+0x90>)
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <SetSysClock+0x90>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <SetSysClock+0x90>)
 80043a6:	f043 0302 	orr.w	r3, r3, #2
 80043aa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80043ac:	bf00      	nop
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <SetSysClock+0x90>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d1f9      	bne.n	80043ae <SetSysClock+0x72>
  {
  }
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40021000 	.word	0x40021000

080043d0 <Reset_Handler>:
>>>>>>> Stashed changes

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490e      	ldr	r1, [pc, #56]	; (8002370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0b      	ldr	r4, [pc, #44]	; (800237c <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800235a:	f7ff ff55 	bl	8002208 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800235e:	f000 f817 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7ff faff 	bl	8001964 <main>

08002366 <LoopForever>:

LoopForever:
    b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   r0, =_estack
 8002368:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002374:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 8002378:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800237c:	200001dc 	.word	0x200001dc

08002380 <ADC1_2_IRQHandler>:
=======
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopForever+0xe>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopForever+0x16>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fbe:	f7ff ff55 	bl	8002e6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002fc2:	f000 f817 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fc6:	f7ff fb61 	bl	800268c <main>

08002fca <LoopForever>:

LoopForever:
    b LoopForever
 8002fca:	e7fe      	b.n	8002fca <LoopForever>
  ldr   r0, =_estack
 8002fcc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002fd8:	08004644 	.word	0x08004644
  ldr r2, =_sbss
 8002fdc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002fe0:	200001dc 	.word	0x200001dc

08002fe4 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
=======
 80043d0:	480d      	ldr	r0, [pc, #52]	; (8004408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d4:	480d      	ldr	r0, [pc, #52]	; (800440c <LoopForever+0x6>)
  ldr r1, =_edata
 80043d6:	490e      	ldr	r1, [pc, #56]	; (8004410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <LoopForever+0xe>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043dc:	e002      	b.n	80043e4 <LoopCopyDataInit>

080043de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e2:	3304      	adds	r3, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e8:	d3f9      	bcc.n	80043de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043ec:	4c0b      	ldr	r4, [pc, #44]	; (800441c <LoopForever+0x16>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f0:	e001      	b.n	80043f6 <LoopFillZerobss>

080043f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f4:	3204      	adds	r2, #4

080043f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f8:	d3fb      	bcc.n	80043f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043fa:	f7ff ff55 	bl	80042a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043fe:	f000 f817 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004402:	f7ff fb9d 	bl	8003b40 <main>

08004406 <LoopForever>:

LoopForever:
    b LoopForever
 8004406:	e7fe      	b.n	8004406 <LoopForever>
  ldr   r0, =_estack
 8004408:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004414:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8004418:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800441c:	200001e0 	.word	0x200001e0

08004420 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002380:	e7fe      	b.n	8002380 <ADC1_2_IRQHandler>
	...

08002384 <__errno>:
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <__errno+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000002c 	.word	0x2000002c

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4d0d      	ldr	r5, [pc, #52]	; (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2600      	movs	r6, #0
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4d0b      	ldr	r5, [pc, #44]	; (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <__libc_init_array+0x44>)
 80023a4:	f001 f9b6 	bl	8003714 <_init>
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2600      	movs	r6, #0
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	080039bc 	.word	0x080039bc
 80023cc:	080039bc 	.word	0x080039bc
 80023d0:	080039bc 	.word	0x080039bc
 80023d4:	080039c0 	.word	0x080039c0

080023d8 <malloc>:
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <malloc+0xc>)
 80023da:	4601      	mov	r1, r0
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f000 b85b 	b.w	8002498 <_malloc_r>
 80023e2:	bf00      	nop
 80023e4:	2000002c 	.word	0x2000002c

080023e8 <memset>:
 80023e8:	4402      	add	r2, r0
 80023ea:	4603      	mov	r3, r0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d100      	bne.n	80023f2 <memset+0xa>
 80023f0:	4770      	bx	lr
 80023f2:	f803 1b01 	strb.w	r1, [r3], #1
 80023f6:	e7f9      	b.n	80023ec <memset+0x4>

080023f8 <_free_r>:
 80023f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d048      	beq.n	8002490 <_free_r+0x98>
 80023fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002402:	9001      	str	r0, [sp, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f1a1 0404 	sub.w	r4, r1, #4
 800240a:	bfb8      	it	lt
 800240c:	18e4      	addlt	r4, r4, r3
 800240e:	f000 fd53 	bl	8002eb8 <__malloc_lock>
 8002412:	4a20      	ldr	r2, [pc, #128]	; (8002494 <_free_r+0x9c>)
 8002414:	9801      	ldr	r0, [sp, #4]
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	4615      	mov	r5, r2
 800241a:	b933      	cbnz	r3, 800242a <_free_r+0x32>
 800241c:	6063      	str	r3, [r4, #4]
 800241e:	6014      	str	r4, [r2, #0]
 8002420:	b003      	add	sp, #12
 8002422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002426:	f000 bd4d 	b.w	8002ec4 <__malloc_unlock>
 800242a:	42a3      	cmp	r3, r4
 800242c:	d90b      	bls.n	8002446 <_free_r+0x4e>
 800242e:	6821      	ldr	r1, [r4, #0]
 8002430:	1862      	adds	r2, r4, r1
 8002432:	4293      	cmp	r3, r2
 8002434:	bf04      	itt	eq
 8002436:	681a      	ldreq	r2, [r3, #0]
 8002438:	685b      	ldreq	r3, [r3, #4]
 800243a:	6063      	str	r3, [r4, #4]
 800243c:	bf04      	itt	eq
 800243e:	1852      	addeq	r2, r2, r1
 8002440:	6022      	streq	r2, [r4, #0]
 8002442:	602c      	str	r4, [r5, #0]
 8002444:	e7ec      	b.n	8002420 <_free_r+0x28>
 8002446:	461a      	mov	r2, r3
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	b10b      	cbz	r3, 8002450 <_free_r+0x58>
 800244c:	42a3      	cmp	r3, r4
 800244e:	d9fa      	bls.n	8002446 <_free_r+0x4e>
 8002450:	6811      	ldr	r1, [r2, #0]
 8002452:	1855      	adds	r5, r2, r1
 8002454:	42a5      	cmp	r5, r4
 8002456:	d10b      	bne.n	8002470 <_free_r+0x78>
 8002458:	6824      	ldr	r4, [r4, #0]
 800245a:	4421      	add	r1, r4
 800245c:	1854      	adds	r4, r2, r1
 800245e:	42a3      	cmp	r3, r4
 8002460:	6011      	str	r1, [r2, #0]
 8002462:	d1dd      	bne.n	8002420 <_free_r+0x28>
 8002464:	681c      	ldr	r4, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	6053      	str	r3, [r2, #4]
 800246a:	4421      	add	r1, r4
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	e7d7      	b.n	8002420 <_free_r+0x28>
 8002470:	d902      	bls.n	8002478 <_free_r+0x80>
 8002472:	230c      	movs	r3, #12
 8002474:	6003      	str	r3, [r0, #0]
 8002476:	e7d3      	b.n	8002420 <_free_r+0x28>
 8002478:	6825      	ldr	r5, [r4, #0]
 800247a:	1961      	adds	r1, r4, r5
 800247c:	428b      	cmp	r3, r1
 800247e:	bf04      	itt	eq
 8002480:	6819      	ldreq	r1, [r3, #0]
 8002482:	685b      	ldreq	r3, [r3, #4]
 8002484:	6063      	str	r3, [r4, #4]
 8002486:	bf04      	itt	eq
 8002488:	1949      	addeq	r1, r1, r5
 800248a:	6021      	streq	r1, [r4, #0]
 800248c:	6054      	str	r4, [r2, #4]
 800248e:	e7c7      	b.n	8002420 <_free_r+0x28>
 8002490:	b003      	add	sp, #12
 8002492:	bd30      	pop	{r4, r5, pc}
 8002494:	200001c0 	.word	0x200001c0

08002498 <_malloc_r>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	1ccd      	adds	r5, r1, #3
 800249c:	f025 0503 	bic.w	r5, r5, #3
 80024a0:	3508      	adds	r5, #8
 80024a2:	2d0c      	cmp	r5, #12
 80024a4:	bf38      	it	cc
 80024a6:	250c      	movcc	r5, #12
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	4606      	mov	r6, r0
 80024ac:	db01      	blt.n	80024b2 <_malloc_r+0x1a>
 80024ae:	42a9      	cmp	r1, r5
 80024b0:	d903      	bls.n	80024ba <_malloc_r+0x22>
 80024b2:	230c      	movs	r3, #12
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	2000      	movs	r0, #0
 80024b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ba:	f000 fcfd 	bl	8002eb8 <__malloc_lock>
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <_malloc_r+0xac>)
 80024c0:	680a      	ldr	r2, [r1, #0]
 80024c2:	4614      	mov	r4, r2
 80024c4:	b99c      	cbnz	r4, 80024ee <_malloc_r+0x56>
 80024c6:	4f20      	ldr	r7, [pc, #128]	; (8002548 <_malloc_r+0xb0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b923      	cbnz	r3, 80024d6 <_malloc_r+0x3e>
 80024cc:	4621      	mov	r1, r4
 80024ce:	4630      	mov	r0, r6
 80024d0:	f000 f8d8 	bl	8002684 <_sbrk_r>
 80024d4:	6038      	str	r0, [r7, #0]
 80024d6:	4629      	mov	r1, r5
 80024d8:	4630      	mov	r0, r6
 80024da:	f000 f8d3 	bl	8002684 <_sbrk_r>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	d123      	bne.n	800252a <_malloc_r+0x92>
 80024e2:	230c      	movs	r3, #12
 80024e4:	6033      	str	r3, [r6, #0]
 80024e6:	4630      	mov	r0, r6
 80024e8:	f000 fcec 	bl	8002ec4 <__malloc_unlock>
 80024ec:	e7e3      	b.n	80024b6 <_malloc_r+0x1e>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	1b5b      	subs	r3, r3, r5
 80024f2:	d417      	bmi.n	8002524 <_malloc_r+0x8c>
 80024f4:	2b0b      	cmp	r3, #11
 80024f6:	d903      	bls.n	8002500 <_malloc_r+0x68>
 80024f8:	6023      	str	r3, [r4, #0]
 80024fa:	441c      	add	r4, r3
 80024fc:	6025      	str	r5, [r4, #0]
 80024fe:	e004      	b.n	800250a <_malloc_r+0x72>
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	42a2      	cmp	r2, r4
 8002504:	bf0c      	ite	eq
 8002506:	600b      	streq	r3, [r1, #0]
 8002508:	6053      	strne	r3, [r2, #4]
 800250a:	4630      	mov	r0, r6
 800250c:	f000 fcda 	bl	8002ec4 <__malloc_unlock>
 8002510:	f104 000b 	add.w	r0, r4, #11
 8002514:	1d23      	adds	r3, r4, #4
 8002516:	f020 0007 	bic.w	r0, r0, #7
 800251a:	1ac2      	subs	r2, r0, r3
 800251c:	d0cc      	beq.n	80024b8 <_malloc_r+0x20>
 800251e:	1a1b      	subs	r3, r3, r0
 8002520:	50a3      	str	r3, [r4, r2]
 8002522:	e7c9      	b.n	80024b8 <_malloc_r+0x20>
 8002524:	4622      	mov	r2, r4
 8002526:	6864      	ldr	r4, [r4, #4]
 8002528:	e7cc      	b.n	80024c4 <_malloc_r+0x2c>
 800252a:	1cc4      	adds	r4, r0, #3
 800252c:	f024 0403 	bic.w	r4, r4, #3
 8002530:	42a0      	cmp	r0, r4
 8002532:	d0e3      	beq.n	80024fc <_malloc_r+0x64>
 8002534:	1a21      	subs	r1, r4, r0
 8002536:	4630      	mov	r0, r6
 8002538:	f000 f8a4 	bl	8002684 <_sbrk_r>
 800253c:	3001      	adds	r0, #1
 800253e:	d1dd      	bne.n	80024fc <_malloc_r+0x64>
 8002540:	e7cf      	b.n	80024e2 <_malloc_r+0x4a>
 8002542:	bf00      	nop
 8002544:	200001c0 	.word	0x200001c0
 8002548:	200001c4 	.word	0x200001c4

0800254c <iprintf>:
 800254c:	b40f      	push	{r0, r1, r2, r3}
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <iprintf+0x2c>)
 8002550:	b513      	push	{r0, r1, r4, lr}
 8002552:	681c      	ldr	r4, [r3, #0]
 8002554:	b124      	cbz	r4, 8002560 <iprintf+0x14>
 8002556:	69a3      	ldr	r3, [r4, #24]
 8002558:	b913      	cbnz	r3, 8002560 <iprintf+0x14>
 800255a:	4620      	mov	r0, r4
 800255c:	f000 fb82 	bl	8002c64 <__sinit>
 8002560:	ab05      	add	r3, sp, #20
 8002562:	9a04      	ldr	r2, [sp, #16]
 8002564:	68a1      	ldr	r1, [r4, #8]
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	4620      	mov	r0, r4
 800256a:	f000 fcdb 	bl	8002f24 <_vfiprintf_r>
 800256e:	b002      	add	sp, #8
 8002570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002574:	b004      	add	sp, #16
 8002576:	4770      	bx	lr
 8002578:	2000002c 	.word	0x2000002c

0800257c <putchar>:
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <putchar+0x28>)
 800257e:	b513      	push	{r0, r1, r4, lr}
 8002580:	681c      	ldr	r4, [r3, #0]
 8002582:	4601      	mov	r1, r0
 8002584:	b134      	cbz	r4, 8002594 <putchar+0x18>
 8002586:	69a3      	ldr	r3, [r4, #24]
 8002588:	b923      	cbnz	r3, 8002594 <putchar+0x18>
 800258a:	9001      	str	r0, [sp, #4]
 800258c:	4620      	mov	r0, r4
 800258e:	f000 fb69 	bl	8002c64 <__sinit>
 8002592:	9901      	ldr	r1, [sp, #4]
 8002594:	68a2      	ldr	r2, [r4, #8]
 8002596:	4620      	mov	r0, r4
 8002598:	b002      	add	sp, #8
 800259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800259e:	f000 bf85 	b.w	80034ac <_putc_r>
 80025a2:	bf00      	nop
 80025a4:	2000002c 	.word	0x2000002c

080025a8 <srand>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <srand+0x44>)
 80025ac:	681d      	ldr	r5, [r3, #0]
 80025ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025b0:	4604      	mov	r4, r0
 80025b2:	b9b3      	cbnz	r3, 80025e2 <srand+0x3a>
 80025b4:	2018      	movs	r0, #24
 80025b6:	f7ff ff0f 	bl	80023d8 <malloc>
 80025ba:	4602      	mov	r2, r0
 80025bc:	63a8      	str	r0, [r5, #56]	; 0x38
 80025be:	b920      	cbnz	r0, 80025ca <srand+0x22>
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <srand+0x48>)
 80025c2:	480c      	ldr	r0, [pc, #48]	; (80025f4 <srand+0x4c>)
 80025c4:	2142      	movs	r1, #66	; 0x42
 80025c6:	f000 fa15 	bl	80029f4 <__assert_func>
 80025ca:	490b      	ldr	r1, [pc, #44]	; (80025f8 <srand+0x50>)
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <srand+0x54>)
 80025ce:	e9c0 1300 	strd	r1, r3, [r0]
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <srand+0x58>)
 80025d4:	6083      	str	r3, [r0, #8]
 80025d6:	230b      	movs	r3, #11
 80025d8:	8183      	strh	r3, [r0, #12]
 80025da:	2100      	movs	r1, #0
 80025dc:	2001      	movs	r0, #1
 80025de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80025e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025e4:	2200      	movs	r2, #0
 80025e6:	611c      	str	r4, [r3, #16]
 80025e8:	615a      	str	r2, [r3, #20]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	2000002c 	.word	0x2000002c
 80025f0:	08003874 	.word	0x08003874
 80025f4:	0800388b 	.word	0x0800388b
 80025f8:	abcd330e 	.word	0xabcd330e
 80025fc:	e66d1234 	.word	0xe66d1234
 8002600:	0005deec 	.word	0x0005deec

08002604 <rand>:
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <rand+0x60>)
 8002606:	b510      	push	{r4, lr}
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800260c:	b9b3      	cbnz	r3, 800263c <rand+0x38>
 800260e:	2018      	movs	r0, #24
 8002610:	f7ff fee2 	bl	80023d8 <malloc>
 8002614:	63a0      	str	r0, [r4, #56]	; 0x38
 8002616:	b928      	cbnz	r0, 8002624 <rand+0x20>
 8002618:	4602      	mov	r2, r0
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <rand+0x64>)
 800261c:	4813      	ldr	r0, [pc, #76]	; (800266c <rand+0x68>)
 800261e:	214e      	movs	r1, #78	; 0x4e
 8002620:	f000 f9e8 	bl	80029f4 <__assert_func>
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <rand+0x6c>)
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <rand+0x70>)
 8002628:	e9c0 2300 	strd	r2, r3, [r0]
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <rand+0x74>)
 800262e:	6083      	str	r3, [r0, #8]
 8002630:	230b      	movs	r3, #11
 8002632:	8183      	strh	r3, [r0, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	2300      	movs	r3, #0
 8002638:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800263c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800263e:	480f      	ldr	r0, [pc, #60]	; (800267c <rand+0x78>)
 8002640:	690a      	ldr	r2, [r1, #16]
 8002642:	694b      	ldr	r3, [r1, #20]
 8002644:	4c0e      	ldr	r4, [pc, #56]	; (8002680 <rand+0x7c>)
 8002646:	4350      	muls	r0, r2
 8002648:	fb04 0003 	mla	r0, r4, r3, r0
 800264c:	fba2 3404 	umull	r3, r4, r2, r4
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	4404      	add	r4, r0
 8002654:	f144 0000 	adc.w	r0, r4, #0
 8002658:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800265c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002660:	bd10      	pop	{r4, pc}
 8002662:	bf00      	nop
 8002664:	2000002c 	.word	0x2000002c
 8002668:	08003874 	.word	0x08003874
 800266c:	0800388b 	.word	0x0800388b
 8002670:	abcd330e 	.word	0xabcd330e
 8002674:	e66d1234 	.word	0xe66d1234
 8002678:	0005deec 	.word	0x0005deec
 800267c:	5851f42d 	.word	0x5851f42d
 8002680:	4c957f2d 	.word	0x4c957f2d

08002684 <_sbrk_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4d06      	ldr	r5, [pc, #24]	; (80026a0 <_sbrk_r+0x1c>)
 8002688:	2300      	movs	r3, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	602b      	str	r3, [r5, #0]
 8002690:	f7ff fd8e 	bl	80021b0 <_sbrk>
 8002694:	1c43      	adds	r3, r0, #1
 8002696:	d102      	bne.n	800269e <_sbrk_r+0x1a>
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	b103      	cbz	r3, 800269e <_sbrk_r+0x1a>
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	bd38      	pop	{r3, r4, r5, pc}
 80026a0:	200001d8 	.word	0x200001d8

080026a4 <setbuf>:
 80026a4:	2900      	cmp	r1, #0
 80026a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026aa:	bf0c      	ite	eq
 80026ac:	2202      	moveq	r2, #2
 80026ae:	2200      	movne	r2, #0
 80026b0:	f000 b800 	b.w	80026b4 <setvbuf>

080026b4 <setvbuf>:
 80026b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026b8:	461d      	mov	r5, r3
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <setvbuf+0x17c>)
 80026bc:	681f      	ldr	r7, [r3, #0]
 80026be:	4604      	mov	r4, r0
 80026c0:	460e      	mov	r6, r1
 80026c2:	4690      	mov	r8, r2
 80026c4:	b127      	cbz	r7, 80026d0 <setvbuf+0x1c>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	b913      	cbnz	r3, 80026d0 <setvbuf+0x1c>
 80026ca:	4638      	mov	r0, r7
 80026cc:	f000 faca 	bl	8002c64 <__sinit>
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <setvbuf+0x180>)
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d167      	bne.n	80027a6 <setvbuf+0xf2>
 80026d6:	687c      	ldr	r4, [r7, #4]
 80026d8:	f1b8 0f02 	cmp.w	r8, #2
 80026dc:	d006      	beq.n	80026ec <setvbuf+0x38>
 80026de:	f1b8 0f01 	cmp.w	r8, #1
 80026e2:	f200 809f 	bhi.w	8002824 <setvbuf+0x170>
 80026e6:	2d00      	cmp	r5, #0
 80026e8:	f2c0 809c 	blt.w	8002824 <setvbuf+0x170>
 80026ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ee:	07db      	lsls	r3, r3, #31
 80026f0:	d405      	bmi.n	80026fe <setvbuf+0x4a>
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	0598      	lsls	r0, r3, #22
 80026f6:	d402      	bmi.n	80026fe <setvbuf+0x4a>
 80026f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026fa:	f000 fb76 	bl	8002dea <__retarget_lock_acquire_recursive>
 80026fe:	4621      	mov	r1, r4
 8002700:	4638      	mov	r0, r7
 8002702:	f000 fa1b 	bl	8002b3c <_fflush_r>
 8002706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002708:	b141      	cbz	r1, 800271c <setvbuf+0x68>
 800270a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800270e:	4299      	cmp	r1, r3
 8002710:	d002      	beq.n	8002718 <setvbuf+0x64>
 8002712:	4638      	mov	r0, r7
 8002714:	f7ff fe70 	bl	80023f8 <_free_r>
 8002718:	2300      	movs	r3, #0
 800271a:	6363      	str	r3, [r4, #52]	; 0x34
 800271c:	2300      	movs	r3, #0
 800271e:	61a3      	str	r3, [r4, #24]
 8002720:	6063      	str	r3, [r4, #4]
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	0619      	lsls	r1, r3, #24
 8002726:	d503      	bpl.n	8002730 <setvbuf+0x7c>
 8002728:	6921      	ldr	r1, [r4, #16]
 800272a:	4638      	mov	r0, r7
 800272c:	f7ff fe64 	bl	80023f8 <_free_r>
 8002730:	89a3      	ldrh	r3, [r4, #12]
 8002732:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	f1b8 0f02 	cmp.w	r8, #2
 800273e:	81a3      	strh	r3, [r4, #12]
 8002740:	d06c      	beq.n	800281c <setvbuf+0x168>
 8002742:	ab01      	add	r3, sp, #4
 8002744:	466a      	mov	r2, sp
 8002746:	4621      	mov	r1, r4
 8002748:	4638      	mov	r0, r7
 800274a:	f000 fb50 	bl	8002dee <__swhatbuf_r>
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	4318      	orrs	r0, r3
 8002752:	81a0      	strh	r0, [r4, #12]
 8002754:	2d00      	cmp	r5, #0
 8002756:	d130      	bne.n	80027ba <setvbuf+0x106>
 8002758:	9d00      	ldr	r5, [sp, #0]
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff fe3c 	bl	80023d8 <malloc>
 8002760:	4606      	mov	r6, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	d155      	bne.n	8002812 <setvbuf+0x15e>
 8002766:	f8dd 9000 	ldr.w	r9, [sp]
 800276a:	45a9      	cmp	r9, r5
 800276c:	d14a      	bne.n	8002804 <setvbuf+0x150>
 800276e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002772:	2200      	movs	r2, #0
 8002774:	60a2      	str	r2, [r4, #8]
 8002776:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800277a:	6022      	str	r2, [r4, #0]
 800277c:	6122      	str	r2, [r4, #16]
 800277e:	2201      	movs	r2, #1
 8002780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002784:	6162      	str	r2, [r4, #20]
 8002786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	07d2      	lsls	r2, r2, #31
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	d405      	bmi.n	800279e <setvbuf+0xea>
 8002792:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002796:	d102      	bne.n	800279e <setvbuf+0xea>
 8002798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800279a:	f000 fb27 	bl	8002dec <__retarget_lock_release_recursive>
 800279e:	4628      	mov	r0, r5
 80027a0:	b003      	add	sp, #12
 80027a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <setvbuf+0x184>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	d101      	bne.n	80027b0 <setvbuf+0xfc>
 80027ac:	68bc      	ldr	r4, [r7, #8]
 80027ae:	e793      	b.n	80026d8 <setvbuf+0x24>
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <setvbuf+0x188>)
 80027b2:	429c      	cmp	r4, r3
 80027b4:	bf08      	it	eq
 80027b6:	68fc      	ldreq	r4, [r7, #12]
 80027b8:	e78e      	b.n	80026d8 <setvbuf+0x24>
 80027ba:	2e00      	cmp	r6, #0
 80027bc:	d0cd      	beq.n	800275a <setvbuf+0xa6>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	b913      	cbnz	r3, 80027c8 <setvbuf+0x114>
 80027c2:	4638      	mov	r0, r7
 80027c4:	f000 fa4e 	bl	8002c64 <__sinit>
 80027c8:	f1b8 0f01 	cmp.w	r8, #1
 80027cc:	bf08      	it	eq
 80027ce:	89a3      	ldrheq	r3, [r4, #12]
 80027d0:	6026      	str	r6, [r4, #0]
 80027d2:	bf04      	itt	eq
 80027d4:	f043 0301 	orreq.w	r3, r3, #1
 80027d8:	81a3      	strheq	r3, [r4, #12]
 80027da:	89a2      	ldrh	r2, [r4, #12]
 80027dc:	f012 0308 	ands.w	r3, r2, #8
 80027e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80027e4:	d01c      	beq.n	8002820 <setvbuf+0x16c>
 80027e6:	07d3      	lsls	r3, r2, #31
 80027e8:	bf41      	itttt	mi
 80027ea:	2300      	movmi	r3, #0
 80027ec:	426d      	negmi	r5, r5
 80027ee:	60a3      	strmi	r3, [r4, #8]
 80027f0:	61a5      	strmi	r5, [r4, #24]
 80027f2:	bf58      	it	pl
 80027f4:	60a5      	strpl	r5, [r4, #8]
 80027f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80027f8:	f015 0501 	ands.w	r5, r5, #1
 80027fc:	d115      	bne.n	800282a <setvbuf+0x176>
 80027fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002802:	e7c8      	b.n	8002796 <setvbuf+0xe2>
 8002804:	4648      	mov	r0, r9
 8002806:	f7ff fde7 	bl	80023d8 <malloc>
 800280a:	4606      	mov	r6, r0
 800280c:	2800      	cmp	r0, #0
 800280e:	d0ae      	beq.n	800276e <setvbuf+0xba>
 8002810:	464d      	mov	r5, r9
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	81a3      	strh	r3, [r4, #12]
 800281a:	e7d0      	b.n	80027be <setvbuf+0x10a>
 800281c:	2500      	movs	r5, #0
 800281e:	e7a8      	b.n	8002772 <setvbuf+0xbe>
 8002820:	60a3      	str	r3, [r4, #8]
 8002822:	e7e8      	b.n	80027f6 <setvbuf+0x142>
 8002824:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002828:	e7b9      	b.n	800279e <setvbuf+0xea>
 800282a:	2500      	movs	r5, #0
 800282c:	e7b7      	b.n	800279e <setvbuf+0xea>
 800282e:	bf00      	nop
 8002830:	2000002c 	.word	0x2000002c
 8002834:	08003948 	.word	0x08003948
 8002838:	08003968 	.word	0x08003968
 800283c:	08003928 	.word	0x08003928

08002840 <time>:
 8002840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <time+0x30>)
 8002844:	2200      	movs	r2, #0
 8002846:	4669      	mov	r1, sp
 8002848:	4604      	mov	r4, r0
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	f000 faba 	bl	8002dc4 <_gettimeofday_r>
 8002850:	2800      	cmp	r0, #0
 8002852:	bfbe      	ittt	lt
 8002854:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002858:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800285c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002864:	b10c      	cbz	r4, 800286a <time+0x2a>
 8002866:	e9c4 0100 	strd	r0, r1, [r4]
 800286a:	b004      	add	sp, #16
 800286c:	bd10      	pop	{r4, pc}
 800286e:	bf00      	nop
 8002870:	2000002c 	.word	0x2000002c

08002874 <__swbuf_r>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	460e      	mov	r6, r1
 8002878:	4614      	mov	r4, r2
 800287a:	4605      	mov	r5, r0
 800287c:	b118      	cbz	r0, 8002886 <__swbuf_r+0x12>
 800287e:	6983      	ldr	r3, [r0, #24]
 8002880:	b90b      	cbnz	r3, 8002886 <__swbuf_r+0x12>
 8002882:	f000 f9ef 	bl	8002c64 <__sinit>
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <__swbuf_r+0x98>)
 8002888:	429c      	cmp	r4, r3
 800288a:	d12b      	bne.n	80028e4 <__swbuf_r+0x70>
 800288c:	686c      	ldr	r4, [r5, #4]
 800288e:	69a3      	ldr	r3, [r4, #24]
 8002890:	60a3      	str	r3, [r4, #8]
 8002892:	89a3      	ldrh	r3, [r4, #12]
 8002894:	071a      	lsls	r2, r3, #28
 8002896:	d52f      	bpl.n	80028f8 <__swbuf_r+0x84>
 8002898:	6923      	ldr	r3, [r4, #16]
 800289a:	b36b      	cbz	r3, 80028f8 <__swbuf_r+0x84>
 800289c:	6923      	ldr	r3, [r4, #16]
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	1ac0      	subs	r0, r0, r3
 80028a2:	6963      	ldr	r3, [r4, #20]
 80028a4:	b2f6      	uxtb	r6, r6
 80028a6:	4283      	cmp	r3, r0
 80028a8:	4637      	mov	r7, r6
 80028aa:	dc04      	bgt.n	80028b6 <__swbuf_r+0x42>
 80028ac:	4621      	mov	r1, r4
 80028ae:	4628      	mov	r0, r5
 80028b0:	f000 f944 	bl	8002b3c <_fflush_r>
 80028b4:	bb30      	cbnz	r0, 8002904 <__swbuf_r+0x90>
 80028b6:	68a3      	ldr	r3, [r4, #8]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	6022      	str	r2, [r4, #0]
 80028c2:	701e      	strb	r6, [r3, #0]
 80028c4:	6963      	ldr	r3, [r4, #20]
 80028c6:	3001      	adds	r0, #1
 80028c8:	4283      	cmp	r3, r0
 80028ca:	d004      	beq.n	80028d6 <__swbuf_r+0x62>
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	07db      	lsls	r3, r3, #31
 80028d0:	d506      	bpl.n	80028e0 <__swbuf_r+0x6c>
 80028d2:	2e0a      	cmp	r6, #10
 80028d4:	d104      	bne.n	80028e0 <__swbuf_r+0x6c>
 80028d6:	4621      	mov	r1, r4
 80028d8:	4628      	mov	r0, r5
 80028da:	f000 f92f 	bl	8002b3c <_fflush_r>
 80028de:	b988      	cbnz	r0, 8002904 <__swbuf_r+0x90>
 80028e0:	4638      	mov	r0, r7
 80028e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <__swbuf_r+0x9c>)
 80028e6:	429c      	cmp	r4, r3
 80028e8:	d101      	bne.n	80028ee <__swbuf_r+0x7a>
 80028ea:	68ac      	ldr	r4, [r5, #8]
 80028ec:	e7cf      	b.n	800288e <__swbuf_r+0x1a>
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <__swbuf_r+0xa0>)
 80028f0:	429c      	cmp	r4, r3
 80028f2:	bf08      	it	eq
 80028f4:	68ec      	ldreq	r4, [r5, #12]
 80028f6:	e7ca      	b.n	800288e <__swbuf_r+0x1a>
 80028f8:	4621      	mov	r1, r4
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 f80c 	bl	8002918 <__swsetup_r>
 8002900:	2800      	cmp	r0, #0
 8002902:	d0cb      	beq.n	800289c <__swbuf_r+0x28>
 8002904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002908:	e7ea      	b.n	80028e0 <__swbuf_r+0x6c>
 800290a:	bf00      	nop
 800290c:	08003948 	.word	0x08003948
 8002910:	08003968 	.word	0x08003968
 8002914:	08003928 	.word	0x08003928

08002918 <__swsetup_r>:
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <__swsetup_r+0xcc>)
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	681d      	ldr	r5, [r3, #0]
 800291e:	4606      	mov	r6, r0
 8002920:	460c      	mov	r4, r1
 8002922:	b125      	cbz	r5, 800292e <__swsetup_r+0x16>
 8002924:	69ab      	ldr	r3, [r5, #24]
 8002926:	b913      	cbnz	r3, 800292e <__swsetup_r+0x16>
 8002928:	4628      	mov	r0, r5
 800292a:	f000 f99b 	bl	8002c64 <__sinit>
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <__swsetup_r+0xd0>)
 8002930:	429c      	cmp	r4, r3
 8002932:	d10f      	bne.n	8002954 <__swsetup_r+0x3c>
 8002934:	686c      	ldr	r4, [r5, #4]
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800293c:	0719      	lsls	r1, r3, #28
 800293e:	d42c      	bmi.n	800299a <__swsetup_r+0x82>
 8002940:	06dd      	lsls	r5, r3, #27
 8002942:	d411      	bmi.n	8002968 <__swsetup_r+0x50>
 8002944:	2309      	movs	r3, #9
 8002946:	6033      	str	r3, [r6, #0]
 8002948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800294c:	81a3      	strh	r3, [r4, #12]
 800294e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002952:	e03e      	b.n	80029d2 <__swsetup_r+0xba>
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <__swsetup_r+0xd4>)
 8002956:	429c      	cmp	r4, r3
 8002958:	d101      	bne.n	800295e <__swsetup_r+0x46>
 800295a:	68ac      	ldr	r4, [r5, #8]
 800295c:	e7eb      	b.n	8002936 <__swsetup_r+0x1e>
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <__swsetup_r+0xd8>)
 8002960:	429c      	cmp	r4, r3
 8002962:	bf08      	it	eq
 8002964:	68ec      	ldreq	r4, [r5, #12]
 8002966:	e7e6      	b.n	8002936 <__swsetup_r+0x1e>
 8002968:	0758      	lsls	r0, r3, #29
 800296a:	d512      	bpl.n	8002992 <__swsetup_r+0x7a>
 800296c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800296e:	b141      	cbz	r1, 8002982 <__swsetup_r+0x6a>
 8002970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002974:	4299      	cmp	r1, r3
 8002976:	d002      	beq.n	800297e <__swsetup_r+0x66>
 8002978:	4630      	mov	r0, r6
 800297a:	f7ff fd3d 	bl	80023f8 <_free_r>
 800297e:	2300      	movs	r3, #0
 8002980:	6363      	str	r3, [r4, #52]	; 0x34
 8002982:	89a3      	ldrh	r3, [r4, #12]
 8002984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002988:	81a3      	strh	r3, [r4, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	6063      	str	r3, [r4, #4]
 800298e:	6923      	ldr	r3, [r4, #16]
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	b94b      	cbnz	r3, 80029b2 <__swsetup_r+0x9a>
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a8:	d003      	beq.n	80029b2 <__swsetup_r+0x9a>
 80029aa:	4621      	mov	r1, r4
 80029ac:	4630      	mov	r0, r6
 80029ae:	f000 fa43 	bl	8002e38 <__smakebuf_r>
 80029b2:	89a0      	ldrh	r0, [r4, #12]
 80029b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029b8:	f010 0301 	ands.w	r3, r0, #1
 80029bc:	d00a      	beq.n	80029d4 <__swsetup_r+0xbc>
 80029be:	2300      	movs	r3, #0
 80029c0:	60a3      	str	r3, [r4, #8]
 80029c2:	6963      	ldr	r3, [r4, #20]
 80029c4:	425b      	negs	r3, r3
 80029c6:	61a3      	str	r3, [r4, #24]
 80029c8:	6923      	ldr	r3, [r4, #16]
 80029ca:	b943      	cbnz	r3, 80029de <__swsetup_r+0xc6>
 80029cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029d0:	d1ba      	bne.n	8002948 <__swsetup_r+0x30>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	0781      	lsls	r1, r0, #30
 80029d6:	bf58      	it	pl
 80029d8:	6963      	ldrpl	r3, [r4, #20]
 80029da:	60a3      	str	r3, [r4, #8]
 80029dc:	e7f4      	b.n	80029c8 <__swsetup_r+0xb0>
 80029de:	2000      	movs	r0, #0
 80029e0:	e7f7      	b.n	80029d2 <__swsetup_r+0xba>
 80029e2:	bf00      	nop
 80029e4:	2000002c 	.word	0x2000002c
 80029e8:	08003948 	.word	0x08003948
 80029ec:	08003968 	.word	0x08003968
 80029f0:	08003928 	.word	0x08003928

080029f4 <__assert_func>:
 80029f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80029f6:	4614      	mov	r4, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <__assert_func+0x2c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4605      	mov	r5, r0
 8002a00:	68d8      	ldr	r0, [r3, #12]
 8002a02:	b14c      	cbz	r4, 8002a18 <__assert_func+0x24>
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <__assert_func+0x30>)
 8002a06:	9100      	str	r1, [sp, #0]
 8002a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <__assert_func+0x34>)
 8002a0e:	462b      	mov	r3, r5
 8002a10:	f000 f9a6 	bl	8002d60 <fiprintf>
 8002a14:	f000 fdd5 	bl	80035c2 <abort>
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__assert_func+0x38>)
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	e7f3      	b.n	8002a06 <__assert_func+0x12>
 8002a1e:	bf00      	nop
 8002a20:	2000002c 	.word	0x2000002c
 8002a24:	080038ea 	.word	0x080038ea
 8002a28:	080038f7 	.word	0x080038f7
 8002a2c:	08003925 	.word	0x08003925

08002a30 <__sflush_r>:
 8002a30:	898a      	ldrh	r2, [r1, #12]
 8002a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a36:	4605      	mov	r5, r0
 8002a38:	0710      	lsls	r0, r2, #28
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	d458      	bmi.n	8002af0 <__sflush_r+0xc0>
 8002a3e:	684b      	ldr	r3, [r1, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	dc05      	bgt.n	8002a50 <__sflush_r+0x20>
 8002a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dc02      	bgt.n	8002a50 <__sflush_r+0x20>
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a52:	2e00      	cmp	r6, #0
 8002a54:	d0f9      	beq.n	8002a4a <__sflush_r+0x1a>
 8002a56:	2300      	movs	r3, #0
 8002a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a5c:	682f      	ldr	r7, [r5, #0]
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	d032      	beq.n	8002ac8 <__sflush_r+0x98>
 8002a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	075a      	lsls	r2, r3, #29
 8002a68:	d505      	bpl.n	8002a76 <__sflush_r+0x46>
 8002a6a:	6863      	ldr	r3, [r4, #4]
 8002a6c:	1ac0      	subs	r0, r0, r3
 8002a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a70:	b10b      	cbz	r3, 8002a76 <__sflush_r+0x46>
 8002a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a74:	1ac0      	subs	r0, r0, r3
 8002a76:	2300      	movs	r3, #0
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a7c:	6a21      	ldr	r1, [r4, #32]
 8002a7e:	4628      	mov	r0, r5
 8002a80:	47b0      	blx	r6
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	d106      	bne.n	8002a96 <__sflush_r+0x66>
 8002a88:	6829      	ldr	r1, [r5, #0]
 8002a8a:	291d      	cmp	r1, #29
 8002a8c:	d82c      	bhi.n	8002ae8 <__sflush_r+0xb8>
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <__sflush_r+0x108>)
 8002a90:	40ca      	lsrs	r2, r1
 8002a92:	07d6      	lsls	r6, r2, #31
 8002a94:	d528      	bpl.n	8002ae8 <__sflush_r+0xb8>
 8002a96:	2200      	movs	r2, #0
 8002a98:	6062      	str	r2, [r4, #4]
 8002a9a:	04d9      	lsls	r1, r3, #19
 8002a9c:	6922      	ldr	r2, [r4, #16]
 8002a9e:	6022      	str	r2, [r4, #0]
 8002aa0:	d504      	bpl.n	8002aac <__sflush_r+0x7c>
 8002aa2:	1c42      	adds	r2, r0, #1
 8002aa4:	d101      	bne.n	8002aaa <__sflush_r+0x7a>
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	b903      	cbnz	r3, 8002aac <__sflush_r+0x7c>
 8002aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8002aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aae:	602f      	str	r7, [r5, #0]
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d0ca      	beq.n	8002a4a <__sflush_r+0x1a>
 8002ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	d002      	beq.n	8002ac2 <__sflush_r+0x92>
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff fc9b 	bl	80023f8 <_free_r>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ac6:	e7c1      	b.n	8002a4c <__sflush_r+0x1c>
 8002ac8:	6a21      	ldr	r1, [r4, #32]
 8002aca:	2301      	movs	r3, #1
 8002acc:	4628      	mov	r0, r5
 8002ace:	47b0      	blx	r6
 8002ad0:	1c41      	adds	r1, r0, #1
 8002ad2:	d1c7      	bne.n	8002a64 <__sflush_r+0x34>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0c4      	beq.n	8002a64 <__sflush_r+0x34>
 8002ada:	2b1d      	cmp	r3, #29
 8002adc:	d001      	beq.n	8002ae2 <__sflush_r+0xb2>
 8002ade:	2b16      	cmp	r3, #22
 8002ae0:	d101      	bne.n	8002ae6 <__sflush_r+0xb6>
 8002ae2:	602f      	str	r7, [r5, #0]
 8002ae4:	e7b1      	b.n	8002a4a <__sflush_r+0x1a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	e7ad      	b.n	8002a4c <__sflush_r+0x1c>
 8002af0:	690f      	ldr	r7, [r1, #16]
 8002af2:	2f00      	cmp	r7, #0
 8002af4:	d0a9      	beq.n	8002a4a <__sflush_r+0x1a>
 8002af6:	0793      	lsls	r3, r2, #30
 8002af8:	680e      	ldr	r6, [r1, #0]
 8002afa:	bf08      	it	eq
 8002afc:	694b      	ldreq	r3, [r1, #20]
 8002afe:	600f      	str	r7, [r1, #0]
 8002b00:	bf18      	it	ne
 8002b02:	2300      	movne	r3, #0
 8002b04:	eba6 0807 	sub.w	r8, r6, r7
 8002b08:	608b      	str	r3, [r1, #8]
 8002b0a:	f1b8 0f00 	cmp.w	r8, #0
 8002b0e:	dd9c      	ble.n	8002a4a <__sflush_r+0x1a>
 8002b10:	6a21      	ldr	r1, [r4, #32]
 8002b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b14:	4643      	mov	r3, r8
 8002b16:	463a      	mov	r2, r7
 8002b18:	4628      	mov	r0, r5
 8002b1a:	47b0      	blx	r6
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	dc06      	bgt.n	8002b2e <__sflush_r+0xfe>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	e78e      	b.n	8002a4c <__sflush_r+0x1c>
 8002b2e:	4407      	add	r7, r0
 8002b30:	eba8 0800 	sub.w	r8, r8, r0
 8002b34:	e7e9      	b.n	8002b0a <__sflush_r+0xda>
 8002b36:	bf00      	nop
 8002b38:	20400001 	.word	0x20400001

08002b3c <_fflush_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	690b      	ldr	r3, [r1, #16]
 8002b40:	4605      	mov	r5, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	b913      	cbnz	r3, 8002b4c <_fflush_r+0x10>
 8002b46:	2500      	movs	r5, #0
 8002b48:	4628      	mov	r0, r5
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	b118      	cbz	r0, 8002b56 <_fflush_r+0x1a>
 8002b4e:	6983      	ldr	r3, [r0, #24]
 8002b50:	b90b      	cbnz	r3, 8002b56 <_fflush_r+0x1a>
 8002b52:	f000 f887 	bl	8002c64 <__sinit>
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <_fflush_r+0x6c>)
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	d11b      	bne.n	8002b94 <_fflush_r+0x58>
 8002b5c:	686c      	ldr	r4, [r5, #4]
 8002b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <_fflush_r+0xa>
 8002b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b68:	07d0      	lsls	r0, r2, #31
 8002b6a:	d404      	bmi.n	8002b76 <_fflush_r+0x3a>
 8002b6c:	0599      	lsls	r1, r3, #22
 8002b6e:	d402      	bmi.n	8002b76 <_fflush_r+0x3a>
 8002b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b72:	f000 f93a 	bl	8002dea <__retarget_lock_acquire_recursive>
 8002b76:	4628      	mov	r0, r5
 8002b78:	4621      	mov	r1, r4
 8002b7a:	f7ff ff59 	bl	8002a30 <__sflush_r>
 8002b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b80:	07da      	lsls	r2, r3, #31
 8002b82:	4605      	mov	r5, r0
 8002b84:	d4e0      	bmi.n	8002b48 <_fflush_r+0xc>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	059b      	lsls	r3, r3, #22
 8002b8a:	d4dd      	bmi.n	8002b48 <_fflush_r+0xc>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b8e:	f000 f92d 	bl	8002dec <__retarget_lock_release_recursive>
 8002b92:	e7d9      	b.n	8002b48 <_fflush_r+0xc>
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <_fflush_r+0x70>)
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d101      	bne.n	8002b9e <_fflush_r+0x62>
 8002b9a:	68ac      	ldr	r4, [r5, #8]
 8002b9c:	e7df      	b.n	8002b5e <_fflush_r+0x22>
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <_fflush_r+0x74>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	bf08      	it	eq
 8002ba4:	68ec      	ldreq	r4, [r5, #12]
 8002ba6:	e7da      	b.n	8002b5e <_fflush_r+0x22>
 8002ba8:	08003948 	.word	0x08003948
 8002bac:	08003968 	.word	0x08003968
 8002bb0:	08003928 	.word	0x08003928

08002bb4 <std>:
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	b510      	push	{r4, lr}
 8002bb8:	4604      	mov	r4, r0
 8002bba:	e9c0 3300 	strd	r3, r3, [r0]
 8002bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bc2:	6083      	str	r3, [r0, #8]
 8002bc4:	8181      	strh	r1, [r0, #12]
 8002bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8002bc8:	81c2      	strh	r2, [r0, #14]
 8002bca:	6183      	str	r3, [r0, #24]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	2208      	movs	r2, #8
 8002bd0:	305c      	adds	r0, #92	; 0x5c
 8002bd2:	f7ff fc09 	bl	80023e8 <memset>
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <std+0x38>)
 8002bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <std+0x3c>)
 8002bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <std+0x40>)
 8002be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <std+0x44>)
 8002be4:	6224      	str	r4, [r4, #32]
 8002be6:	6323      	str	r3, [r4, #48]	; 0x30
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	bf00      	nop
 8002bec:	0800353d 	.word	0x0800353d
 8002bf0:	0800355f 	.word	0x0800355f
 8002bf4:	08003597 	.word	0x08003597
 8002bf8:	080035bb 	.word	0x080035bb

08002bfc <_cleanup_r>:
 8002bfc:	4901      	ldr	r1, [pc, #4]	; (8002c04 <_cleanup_r+0x8>)
 8002bfe:	f000 b8c1 	b.w	8002d84 <_fwalk_reent>
 8002c02:	bf00      	nop
 8002c04:	08002b3d 	.word	0x08002b3d

08002c08 <__sfmoreglue>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	1e4a      	subs	r2, r1, #1
 8002c0c:	2568      	movs	r5, #104	; 0x68
 8002c0e:	4355      	muls	r5, r2
 8002c10:	460e      	mov	r6, r1
 8002c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c16:	f7ff fc3f 	bl	8002498 <_malloc_r>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	b140      	cbz	r0, 8002c30 <__sfmoreglue+0x28>
 8002c1e:	2100      	movs	r1, #0
 8002c20:	e9c0 1600 	strd	r1, r6, [r0]
 8002c24:	300c      	adds	r0, #12
 8002c26:	60a0      	str	r0, [r4, #8]
 8002c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c2c:	f7ff fbdc 	bl	80023e8 <memset>
 8002c30:	4620      	mov	r0, r4
 8002c32:	bd70      	pop	{r4, r5, r6, pc}

08002c34 <__sfp_lock_acquire>:
 8002c34:	4801      	ldr	r0, [pc, #4]	; (8002c3c <__sfp_lock_acquire+0x8>)
 8002c36:	f000 b8d8 	b.w	8002dea <__retarget_lock_acquire_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	200001d4 	.word	0x200001d4

08002c40 <__sfp_lock_release>:
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <__sfp_lock_release+0x8>)
 8002c42:	f000 b8d3 	b.w	8002dec <__retarget_lock_release_recursive>
 8002c46:	bf00      	nop
 8002c48:	200001d4 	.word	0x200001d4

08002c4c <__sinit_lock_acquire>:
 8002c4c:	4801      	ldr	r0, [pc, #4]	; (8002c54 <__sinit_lock_acquire+0x8>)
 8002c4e:	f000 b8cc 	b.w	8002dea <__retarget_lock_acquire_recursive>
 8002c52:	bf00      	nop
 8002c54:	200001cf 	.word	0x200001cf

08002c58 <__sinit_lock_release>:
 8002c58:	4801      	ldr	r0, [pc, #4]	; (8002c60 <__sinit_lock_release+0x8>)
 8002c5a:	f000 b8c7 	b.w	8002dec <__retarget_lock_release_recursive>
 8002c5e:	bf00      	nop
 8002c60:	200001cf 	.word	0x200001cf

08002c64 <__sinit>:
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
 8002c68:	f7ff fff0 	bl	8002c4c <__sinit_lock_acquire>
 8002c6c:	69a3      	ldr	r3, [r4, #24]
 8002c6e:	b11b      	cbz	r3, 8002c78 <__sinit+0x14>
 8002c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c74:	f7ff bff0 	b.w	8002c58 <__sinit_lock_release>
 8002c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <__sinit+0x68>)
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <__sinit+0x6c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	bf04      	itt	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	61a3      	streq	r3, [r4, #24]
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f000 f820 	bl	8002cd4 <__sfp>
 8002c94:	6060      	str	r0, [r4, #4]
 8002c96:	4620      	mov	r0, r4
 8002c98:	f000 f81c 	bl	8002cd4 <__sfp>
 8002c9c:	60a0      	str	r0, [r4, #8]
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f000 f818 	bl	8002cd4 <__sfp>
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60e0      	str	r0, [r4, #12]
 8002ca8:	2104      	movs	r1, #4
 8002caa:	6860      	ldr	r0, [r4, #4]
 8002cac:	f7ff ff82 	bl	8002bb4 <std>
 8002cb0:	68a0      	ldr	r0, [r4, #8]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2109      	movs	r1, #9
 8002cb6:	f7ff ff7d 	bl	8002bb4 <std>
 8002cba:	68e0      	ldr	r0, [r4, #12]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2112      	movs	r1, #18
 8002cc0:	f7ff ff78 	bl	8002bb4 <std>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	61a3      	str	r3, [r4, #24]
 8002cc8:	e7d2      	b.n	8002c70 <__sinit+0xc>
 8002cca:	bf00      	nop
 8002ccc:	08003870 	.word	0x08003870
 8002cd0:	08002bfd 	.word	0x08002bfd

08002cd4 <__sfp>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	4607      	mov	r7, r0
 8002cd8:	f7ff ffac 	bl	8002c34 <__sfp_lock_acquire>
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <__sfp+0x84>)
 8002cde:	681e      	ldr	r6, [r3, #0]
 8002ce0:	69b3      	ldr	r3, [r6, #24]
 8002ce2:	b913      	cbnz	r3, 8002cea <__sfp+0x16>
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f7ff ffbd 	bl	8002c64 <__sinit>
 8002cea:	3648      	adds	r6, #72	; 0x48
 8002cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	d503      	bpl.n	8002cfc <__sfp+0x28>
 8002cf4:	6833      	ldr	r3, [r6, #0]
 8002cf6:	b30b      	cbz	r3, 8002d3c <__sfp+0x68>
 8002cf8:	6836      	ldr	r6, [r6, #0]
 8002cfa:	e7f7      	b.n	8002cec <__sfp+0x18>
 8002cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d00:	b9d5      	cbnz	r5, 8002d38 <__sfp+0x64>
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <__sfp+0x88>)
 8002d04:	60e3      	str	r3, [r4, #12]
 8002d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8002d0c:	f000 f86c 	bl	8002de8 <__retarget_lock_init_recursive>
 8002d10:	f7ff ff96 	bl	8002c40 <__sfp_lock_release>
 8002d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d1c:	6025      	str	r5, [r4, #0]
 8002d1e:	61a5      	str	r5, [r4, #24]
 8002d20:	2208      	movs	r2, #8
 8002d22:	4629      	mov	r1, r5
 8002d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d28:	f7ff fb5e 	bl	80023e8 <memset>
 8002d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d34:	4620      	mov	r0, r4
 8002d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d38:	3468      	adds	r4, #104	; 0x68
 8002d3a:	e7d9      	b.n	8002cf0 <__sfp+0x1c>
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	4638      	mov	r0, r7
 8002d40:	f7ff ff62 	bl	8002c08 <__sfmoreglue>
 8002d44:	4604      	mov	r4, r0
 8002d46:	6030      	str	r0, [r6, #0]
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d1d5      	bne.n	8002cf8 <__sfp+0x24>
 8002d4c:	f7ff ff78 	bl	8002c40 <__sfp_lock_release>
 8002d50:	230c      	movs	r3, #12
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	e7ee      	b.n	8002d34 <__sfp+0x60>
 8002d56:	bf00      	nop
 8002d58:	08003870 	.word	0x08003870
 8002d5c:	ffff0001 	.word	0xffff0001

08002d60 <fiprintf>:
 8002d60:	b40e      	push	{r1, r2, r3}
 8002d62:	b503      	push	{r0, r1, lr}
 8002d64:	4601      	mov	r1, r0
 8002d66:	ab03      	add	r3, sp, #12
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <fiprintf+0x20>)
 8002d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d6e:	6800      	ldr	r0, [r0, #0]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	f000 f8d7 	bl	8002f24 <_vfiprintf_r>
 8002d76:	b002      	add	sp, #8
 8002d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d7c:	b003      	add	sp, #12
 8002d7e:	4770      	bx	lr
 8002d80:	2000002c 	.word	0x2000002c

08002d84 <_fwalk_reent>:
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d88:	4606      	mov	r6, r0
 8002d8a:	4688      	mov	r8, r1
 8002d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d90:	2700      	movs	r7, #0
 8002d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d96:	f1b9 0901 	subs.w	r9, r9, #1
 8002d9a:	d505      	bpl.n	8002da8 <_fwalk_reent+0x24>
 8002d9c:	6824      	ldr	r4, [r4, #0]
 8002d9e:	2c00      	cmp	r4, #0
 8002da0:	d1f7      	bne.n	8002d92 <_fwalk_reent+0xe>
 8002da2:	4638      	mov	r0, r7
 8002da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002da8:	89ab      	ldrh	r3, [r5, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d907      	bls.n	8002dbe <_fwalk_reent+0x3a>
 8002dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db2:	3301      	adds	r3, #1
 8002db4:	d003      	beq.n	8002dbe <_fwalk_reent+0x3a>
 8002db6:	4629      	mov	r1, r5
 8002db8:	4630      	mov	r0, r6
 8002dba:	47c0      	blx	r8
 8002dbc:	4307      	orrs	r7, r0
 8002dbe:	3568      	adds	r5, #104	; 0x68
 8002dc0:	e7e9      	b.n	8002d96 <_fwalk_reent+0x12>
	...

08002dc4 <_gettimeofday_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4d07      	ldr	r5, [pc, #28]	; (8002de4 <_gettimeofday_r+0x20>)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	602b      	str	r3, [r5, #0]
 8002dd2:	f000 fc97 	bl	8003704 <_gettimeofday>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d102      	bne.n	8002de0 <_gettimeofday_r+0x1c>
 8002dda:	682b      	ldr	r3, [r5, #0]
 8002ddc:	b103      	cbz	r3, 8002de0 <_gettimeofday_r+0x1c>
 8002dde:	6023      	str	r3, [r4, #0]
 8002de0:	bd38      	pop	{r3, r4, r5, pc}
 8002de2:	bf00      	nop
 8002de4:	200001d8 	.word	0x200001d8

08002de8 <__retarget_lock_init_recursive>:
 8002de8:	4770      	bx	lr

08002dea <__retarget_lock_acquire_recursive>:
 8002dea:	4770      	bx	lr

08002dec <__retarget_lock_release_recursive>:
 8002dec:	4770      	bx	lr

08002dee <__swhatbuf_r>:
 8002dee:	b570      	push	{r4, r5, r6, lr}
 8002df0:	460e      	mov	r6, r1
 8002df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df6:	2900      	cmp	r1, #0
 8002df8:	b096      	sub	sp, #88	; 0x58
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	da07      	bge.n	8002e10 <__swhatbuf_r+0x22>
 8002e00:	2300      	movs	r3, #0
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	89b3      	ldrh	r3, [r6, #12]
 8002e06:	061a      	lsls	r2, r3, #24
 8002e08:	d410      	bmi.n	8002e2c <__swhatbuf_r+0x3e>
 8002e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e0e:	e00e      	b.n	8002e2e <__swhatbuf_r+0x40>
 8002e10:	466a      	mov	r2, sp
 8002e12:	f000 fbed 	bl	80035f0 <_fstat_r>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	dbf2      	blt.n	8002e00 <__swhatbuf_r+0x12>
 8002e1a:	9a01      	ldr	r2, [sp, #4]
 8002e1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e24:	425a      	negs	r2, r3
 8002e26:	415a      	adcs	r2, r3
 8002e28:	602a      	str	r2, [r5, #0]
 8002e2a:	e7ee      	b.n	8002e0a <__swhatbuf_r+0x1c>
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	2000      	movs	r0, #0
 8002e30:	6023      	str	r3, [r4, #0]
 8002e32:	b016      	add	sp, #88	; 0x58
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e38 <__smakebuf_r>:
 8002e38:	898b      	ldrh	r3, [r1, #12]
 8002e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e3c:	079d      	lsls	r5, r3, #30
 8002e3e:	4606      	mov	r6, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	d507      	bpl.n	8002e54 <__smakebuf_r+0x1c>
 8002e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	6123      	str	r3, [r4, #16]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	6163      	str	r3, [r4, #20]
 8002e50:	b002      	add	sp, #8
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	ab01      	add	r3, sp, #4
 8002e56:	466a      	mov	r2, sp
 8002e58:	f7ff ffc9 	bl	8002dee <__swhatbuf_r>
 8002e5c:	9900      	ldr	r1, [sp, #0]
 8002e5e:	4605      	mov	r5, r0
 8002e60:	4630      	mov	r0, r6
 8002e62:	f7ff fb19 	bl	8002498 <_malloc_r>
 8002e66:	b948      	cbnz	r0, 8002e7c <__smakebuf_r+0x44>
 8002e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e6c:	059a      	lsls	r2, r3, #22
 8002e6e:	d4ef      	bmi.n	8002e50 <__smakebuf_r+0x18>
 8002e70:	f023 0303 	bic.w	r3, r3, #3
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	81a3      	strh	r3, [r4, #12]
 8002e7a:	e7e3      	b.n	8002e44 <__smakebuf_r+0xc>
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <__smakebuf_r+0x7c>)
 8002e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	6020      	str	r0, [r4, #0]
 8002e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e88:	81a3      	strh	r3, [r4, #12]
 8002e8a:	9b00      	ldr	r3, [sp, #0]
 8002e8c:	6163      	str	r3, [r4, #20]
 8002e8e:	9b01      	ldr	r3, [sp, #4]
 8002e90:	6120      	str	r0, [r4, #16]
 8002e92:	b15b      	cbz	r3, 8002eac <__smakebuf_r+0x74>
 8002e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 fbbb 	bl	8003614 <_isatty_r>
 8002e9e:	b128      	cbz	r0, 8002eac <__smakebuf_r+0x74>
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	89a0      	ldrh	r0, [r4, #12]
 8002eae:	4305      	orrs	r5, r0
 8002eb0:	81a5      	strh	r5, [r4, #12]
 8002eb2:	e7cd      	b.n	8002e50 <__smakebuf_r+0x18>
 8002eb4:	08002bfd 	.word	0x08002bfd

08002eb8 <__malloc_lock>:
 8002eb8:	4801      	ldr	r0, [pc, #4]	; (8002ec0 <__malloc_lock+0x8>)
 8002eba:	f7ff bf96 	b.w	8002dea <__retarget_lock_acquire_recursive>
 8002ebe:	bf00      	nop
 8002ec0:	200001d0 	.word	0x200001d0

08002ec4 <__malloc_unlock>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <__malloc_unlock+0x8>)
 8002ec6:	f7ff bf91 	b.w	8002dec <__retarget_lock_release_recursive>
 8002eca:	bf00      	nop
 8002ecc:	200001d0 	.word	0x200001d0

08002ed0 <__sfputc_r>:
 8002ed0:	6893      	ldr	r3, [r2, #8]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	b410      	push	{r4}
 8002ed8:	6093      	str	r3, [r2, #8]
 8002eda:	da08      	bge.n	8002eee <__sfputc_r+0x1e>
 8002edc:	6994      	ldr	r4, [r2, #24]
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	db01      	blt.n	8002ee6 <__sfputc_r+0x16>
 8002ee2:	290a      	cmp	r1, #10
 8002ee4:	d103      	bne.n	8002eee <__sfputc_r+0x1e>
 8002ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eea:	f7ff bcc3 	b.w	8002874 <__swbuf_r>
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	1c58      	adds	r0, r3, #1
 8002ef2:	6010      	str	r0, [r2, #0]
 8002ef4:	7019      	strb	r1, [r3, #0]
 8002ef6:	4608      	mov	r0, r1
 8002ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <__sfputs_r>:
 8002efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f00:	4606      	mov	r6, r0
 8002f02:	460f      	mov	r7, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	18d5      	adds	r5, r2, r3
 8002f08:	42ac      	cmp	r4, r5
 8002f0a:	d101      	bne.n	8002f10 <__sfputs_r+0x12>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e007      	b.n	8002f20 <__sfputs_r+0x22>
 8002f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f14:	463a      	mov	r2, r7
 8002f16:	4630      	mov	r0, r6
 8002f18:	f7ff ffda 	bl	8002ed0 <__sfputc_r>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d1f3      	bne.n	8002f08 <__sfputs_r+0xa>
 8002f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f24 <_vfiprintf_r>:
 8002f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f28:	460d      	mov	r5, r1
 8002f2a:	b09d      	sub	sp, #116	; 0x74
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	4698      	mov	r8, r3
 8002f30:	4606      	mov	r6, r0
 8002f32:	b118      	cbz	r0, 8002f3c <_vfiprintf_r+0x18>
 8002f34:	6983      	ldr	r3, [r0, #24]
 8002f36:	b90b      	cbnz	r3, 8002f3c <_vfiprintf_r+0x18>
 8002f38:	f7ff fe94 	bl	8002c64 <__sinit>
 8002f3c:	4b89      	ldr	r3, [pc, #548]	; (8003164 <_vfiprintf_r+0x240>)
 8002f3e:	429d      	cmp	r5, r3
 8002f40:	d11b      	bne.n	8002f7a <_vfiprintf_r+0x56>
 8002f42:	6875      	ldr	r5, [r6, #4]
 8002f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f46:	07d9      	lsls	r1, r3, #31
 8002f48:	d405      	bmi.n	8002f56 <_vfiprintf_r+0x32>
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	059a      	lsls	r2, r3, #22
 8002f4e:	d402      	bmi.n	8002f56 <_vfiprintf_r+0x32>
 8002f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f52:	f7ff ff4a 	bl	8002dea <__retarget_lock_acquire_recursive>
 8002f56:	89ab      	ldrh	r3, [r5, #12]
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	d501      	bpl.n	8002f60 <_vfiprintf_r+0x3c>
 8002f5c:	692b      	ldr	r3, [r5, #16]
 8002f5e:	b9eb      	cbnz	r3, 8002f9c <_vfiprintf_r+0x78>
 8002f60:	4629      	mov	r1, r5
 8002f62:	4630      	mov	r0, r6
 8002f64:	f7ff fcd8 	bl	8002918 <__swsetup_r>
 8002f68:	b1c0      	cbz	r0, 8002f9c <_vfiprintf_r+0x78>
 8002f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f6c:	07dc      	lsls	r4, r3, #31
 8002f6e:	d50e      	bpl.n	8002f8e <_vfiprintf_r+0x6a>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f74:	b01d      	add	sp, #116	; 0x74
 8002f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <_vfiprintf_r+0x244>)
 8002f7c:	429d      	cmp	r5, r3
 8002f7e:	d101      	bne.n	8002f84 <_vfiprintf_r+0x60>
 8002f80:	68b5      	ldr	r5, [r6, #8]
 8002f82:	e7df      	b.n	8002f44 <_vfiprintf_r+0x20>
 8002f84:	4b79      	ldr	r3, [pc, #484]	; (800316c <_vfiprintf_r+0x248>)
 8002f86:	429d      	cmp	r5, r3
 8002f88:	bf08      	it	eq
 8002f8a:	68f5      	ldreq	r5, [r6, #12]
 8002f8c:	e7da      	b.n	8002f44 <_vfiprintf_r+0x20>
 8002f8e:	89ab      	ldrh	r3, [r5, #12]
 8002f90:	0598      	lsls	r0, r3, #22
 8002f92:	d4ed      	bmi.n	8002f70 <_vfiprintf_r+0x4c>
 8002f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f96:	f7ff ff29 	bl	8002dec <__retarget_lock_release_recursive>
 8002f9a:	e7e9      	b.n	8002f70 <_vfiprintf_r+0x4c>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002faa:	2330      	movs	r3, #48	; 0x30
 8002fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003170 <_vfiprintf_r+0x24c>
 8002fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fb4:	f04f 0901 	mov.w	r9, #1
 8002fb8:	4623      	mov	r3, r4
 8002fba:	469a      	mov	sl, r3
 8002fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fc0:	b10a      	cbz	r2, 8002fc6 <_vfiprintf_r+0xa2>
 8002fc2:	2a25      	cmp	r2, #37	; 0x25
 8002fc4:	d1f9      	bne.n	8002fba <_vfiprintf_r+0x96>
 8002fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8002fca:	d00b      	beq.n	8002fe4 <_vfiprintf_r+0xc0>
 8002fcc:	465b      	mov	r3, fp
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f7ff ff93 	bl	8002efe <__sfputs_r>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f000 80aa 	beq.w	8003132 <_vfiprintf_r+0x20e>
 8002fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fe0:	445a      	add	r2, fp
 8002fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8002fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a2 	beq.w	8003132 <_vfiprintf_r+0x20e>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff8:	f10a 0a01 	add.w	sl, sl, #1
 8002ffc:	9304      	str	r3, [sp, #16]
 8002ffe:	9307      	str	r3, [sp, #28]
 8003000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003004:	931a      	str	r3, [sp, #104]	; 0x68
 8003006:	4654      	mov	r4, sl
 8003008:	2205      	movs	r2, #5
 800300a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300e:	4858      	ldr	r0, [pc, #352]	; (8003170 <_vfiprintf_r+0x24c>)
 8003010:	f7fd f8e6 	bl	80001e0 <memchr>
 8003014:	9a04      	ldr	r2, [sp, #16]
 8003016:	b9d8      	cbnz	r0, 8003050 <_vfiprintf_r+0x12c>
 8003018:	06d1      	lsls	r1, r2, #27
 800301a:	bf44      	itt	mi
 800301c:	2320      	movmi	r3, #32
 800301e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003022:	0713      	lsls	r3, r2, #28
 8003024:	bf44      	itt	mi
 8003026:	232b      	movmi	r3, #43	; 0x2b
 8003028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800302c:	f89a 3000 	ldrb.w	r3, [sl]
 8003030:	2b2a      	cmp	r3, #42	; 0x2a
 8003032:	d015      	beq.n	8003060 <_vfiprintf_r+0x13c>
 8003034:	9a07      	ldr	r2, [sp, #28]
 8003036:	4654      	mov	r4, sl
 8003038:	2000      	movs	r0, #0
 800303a:	f04f 0c0a 	mov.w	ip, #10
 800303e:	4621      	mov	r1, r4
 8003040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003044:	3b30      	subs	r3, #48	; 0x30
 8003046:	2b09      	cmp	r3, #9
 8003048:	d94e      	bls.n	80030e8 <_vfiprintf_r+0x1c4>
 800304a:	b1b0      	cbz	r0, 800307a <_vfiprintf_r+0x156>
 800304c:	9207      	str	r2, [sp, #28]
 800304e:	e014      	b.n	800307a <_vfiprintf_r+0x156>
 8003050:	eba0 0308 	sub.w	r3, r0, r8
 8003054:	fa09 f303 	lsl.w	r3, r9, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	9304      	str	r3, [sp, #16]
 800305c:	46a2      	mov	sl, r4
 800305e:	e7d2      	b.n	8003006 <_vfiprintf_r+0xe2>
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	1d19      	adds	r1, r3, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	9103      	str	r1, [sp, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	bfbb      	ittet	lt
 800306c:	425b      	neglt	r3, r3
 800306e:	f042 0202 	orrlt.w	r2, r2, #2
 8003072:	9307      	strge	r3, [sp, #28]
 8003074:	9307      	strlt	r3, [sp, #28]
 8003076:	bfb8      	it	lt
 8003078:	9204      	strlt	r2, [sp, #16]
 800307a:	7823      	ldrb	r3, [r4, #0]
 800307c:	2b2e      	cmp	r3, #46	; 0x2e
 800307e:	d10c      	bne.n	800309a <_vfiprintf_r+0x176>
 8003080:	7863      	ldrb	r3, [r4, #1]
 8003082:	2b2a      	cmp	r3, #42	; 0x2a
 8003084:	d135      	bne.n	80030f2 <_vfiprintf_r+0x1ce>
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	9203      	str	r2, [sp, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	bfb8      	it	lt
 8003092:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003096:	3402      	adds	r4, #2
 8003098:	9305      	str	r3, [sp, #20]
 800309a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003180 <_vfiprintf_r+0x25c>
 800309e:	7821      	ldrb	r1, [r4, #0]
 80030a0:	2203      	movs	r2, #3
 80030a2:	4650      	mov	r0, sl
 80030a4:	f7fd f89c 	bl	80001e0 <memchr>
 80030a8:	b140      	cbz	r0, 80030bc <_vfiprintf_r+0x198>
 80030aa:	2340      	movs	r3, #64	; 0x40
 80030ac:	eba0 000a 	sub.w	r0, r0, sl
 80030b0:	fa03 f000 	lsl.w	r0, r3, r0
 80030b4:	9b04      	ldr	r3, [sp, #16]
 80030b6:	4303      	orrs	r3, r0
 80030b8:	3401      	adds	r4, #1
 80030ba:	9304      	str	r3, [sp, #16]
 80030bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c0:	482c      	ldr	r0, [pc, #176]	; (8003174 <_vfiprintf_r+0x250>)
 80030c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030c6:	2206      	movs	r2, #6
 80030c8:	f7fd f88a 	bl	80001e0 <memchr>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d03f      	beq.n	8003150 <_vfiprintf_r+0x22c>
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <_vfiprintf_r+0x254>)
 80030d2:	bb1b      	cbnz	r3, 800311c <_vfiprintf_r+0x1f8>
 80030d4:	9b03      	ldr	r3, [sp, #12]
 80030d6:	3307      	adds	r3, #7
 80030d8:	f023 0307 	bic.w	r3, r3, #7
 80030dc:	3308      	adds	r3, #8
 80030de:	9303      	str	r3, [sp, #12]
 80030e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e2:	443b      	add	r3, r7
 80030e4:	9309      	str	r3, [sp, #36]	; 0x24
 80030e6:	e767      	b.n	8002fb8 <_vfiprintf_r+0x94>
 80030e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80030ec:	460c      	mov	r4, r1
 80030ee:	2001      	movs	r0, #1
 80030f0:	e7a5      	b.n	800303e <_vfiprintf_r+0x11a>
 80030f2:	2300      	movs	r3, #0
 80030f4:	3401      	adds	r4, #1
 80030f6:	9305      	str	r3, [sp, #20]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f04f 0c0a 	mov.w	ip, #10
 80030fe:	4620      	mov	r0, r4
 8003100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003104:	3a30      	subs	r2, #48	; 0x30
 8003106:	2a09      	cmp	r2, #9
 8003108:	d903      	bls.n	8003112 <_vfiprintf_r+0x1ee>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0c5      	beq.n	800309a <_vfiprintf_r+0x176>
 800310e:	9105      	str	r1, [sp, #20]
 8003110:	e7c3      	b.n	800309a <_vfiprintf_r+0x176>
 8003112:	fb0c 2101 	mla	r1, ip, r1, r2
 8003116:	4604      	mov	r4, r0
 8003118:	2301      	movs	r3, #1
 800311a:	e7f0      	b.n	80030fe <_vfiprintf_r+0x1da>
 800311c:	ab03      	add	r3, sp, #12
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	462a      	mov	r2, r5
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <_vfiprintf_r+0x258>)
 8003124:	a904      	add	r1, sp, #16
 8003126:	4630      	mov	r0, r6
 8003128:	f3af 8000 	nop.w
 800312c:	4607      	mov	r7, r0
 800312e:	1c78      	adds	r0, r7, #1
 8003130:	d1d6      	bne.n	80030e0 <_vfiprintf_r+0x1bc>
 8003132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003134:	07d9      	lsls	r1, r3, #31
 8003136:	d405      	bmi.n	8003144 <_vfiprintf_r+0x220>
 8003138:	89ab      	ldrh	r3, [r5, #12]
 800313a:	059a      	lsls	r2, r3, #22
 800313c:	d402      	bmi.n	8003144 <_vfiprintf_r+0x220>
 800313e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003140:	f7ff fe54 	bl	8002dec <__retarget_lock_release_recursive>
 8003144:	89ab      	ldrh	r3, [r5, #12]
 8003146:	065b      	lsls	r3, r3, #25
 8003148:	f53f af12 	bmi.w	8002f70 <_vfiprintf_r+0x4c>
 800314c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800314e:	e711      	b.n	8002f74 <_vfiprintf_r+0x50>
 8003150:	ab03      	add	r3, sp, #12
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	462a      	mov	r2, r5
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <_vfiprintf_r+0x258>)
 8003158:	a904      	add	r1, sp, #16
 800315a:	4630      	mov	r0, r6
 800315c:	f000 f880 	bl	8003260 <_printf_i>
 8003160:	e7e4      	b.n	800312c <_vfiprintf_r+0x208>
 8003162:	bf00      	nop
 8003164:	08003948 	.word	0x08003948
 8003168:	08003968 	.word	0x08003968
 800316c:	08003928 	.word	0x08003928
 8003170:	08003988 	.word	0x08003988
 8003174:	08003992 	.word	0x08003992
 8003178:	00000000 	.word	0x00000000
 800317c:	08002eff 	.word	0x08002eff
 8003180:	0800398e 	.word	0x0800398e

08003184 <_printf_common>:
 8003184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003188:	4616      	mov	r6, r2
 800318a:	4699      	mov	r9, r3
 800318c:	688a      	ldr	r2, [r1, #8]
 800318e:	690b      	ldr	r3, [r1, #16]
 8003190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003194:	4293      	cmp	r3, r2
 8003196:	bfb8      	it	lt
 8003198:	4613      	movlt	r3, r2
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031a0:	4607      	mov	r7, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	b10a      	cbz	r2, 80031aa <_printf_common+0x26>
 80031a6:	3301      	adds	r3, #1
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	0699      	lsls	r1, r3, #26
 80031ae:	bf42      	ittt	mi
 80031b0:	6833      	ldrmi	r3, [r6, #0]
 80031b2:	3302      	addmi	r3, #2
 80031b4:	6033      	strmi	r3, [r6, #0]
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	f015 0506 	ands.w	r5, r5, #6
 80031bc:	d106      	bne.n	80031cc <_printf_common+0x48>
 80031be:	f104 0a19 	add.w	sl, r4, #25
 80031c2:	68e3      	ldr	r3, [r4, #12]
 80031c4:	6832      	ldr	r2, [r6, #0]
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	42ab      	cmp	r3, r5
 80031ca:	dc26      	bgt.n	800321a <_printf_common+0x96>
 80031cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031d0:	1e13      	subs	r3, r2, #0
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	bf18      	it	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	0692      	lsls	r2, r2, #26
 80031da:	d42b      	bmi.n	8003234 <_printf_common+0xb0>
 80031dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e0:	4649      	mov	r1, r9
 80031e2:	4638      	mov	r0, r7
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d01e      	beq.n	8003228 <_printf_common+0xa4>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	68e5      	ldr	r5, [r4, #12]
 80031ee:	6832      	ldr	r2, [r6, #0]
 80031f0:	f003 0306 	and.w	r3, r3, #6
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	bf08      	it	eq
 80031f8:	1aad      	subeq	r5, r5, r2
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	bf0c      	ite	eq
 8003200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003204:	2500      	movne	r5, #0
 8003206:	4293      	cmp	r3, r2
 8003208:	bfc4      	itt	gt
 800320a:	1a9b      	subgt	r3, r3, r2
 800320c:	18ed      	addgt	r5, r5, r3
 800320e:	2600      	movs	r6, #0
 8003210:	341a      	adds	r4, #26
 8003212:	42b5      	cmp	r5, r6
 8003214:	d11a      	bne.n	800324c <_printf_common+0xc8>
 8003216:	2000      	movs	r0, #0
 8003218:	e008      	b.n	800322c <_printf_common+0xa8>
 800321a:	2301      	movs	r3, #1
 800321c:	4652      	mov	r2, sl
 800321e:	4649      	mov	r1, r9
 8003220:	4638      	mov	r0, r7
 8003222:	47c0      	blx	r8
 8003224:	3001      	adds	r0, #1
 8003226:	d103      	bne.n	8003230 <_printf_common+0xac>
 8003228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	3501      	adds	r5, #1
 8003232:	e7c6      	b.n	80031c2 <_printf_common+0x3e>
 8003234:	18e1      	adds	r1, r4, r3
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	2030      	movs	r0, #48	; 0x30
 800323a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800323e:	4422      	add	r2, r4
 8003240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003248:	3302      	adds	r3, #2
 800324a:	e7c7      	b.n	80031dc <_printf_common+0x58>
 800324c:	2301      	movs	r3, #1
 800324e:	4622      	mov	r2, r4
 8003250:	4649      	mov	r1, r9
 8003252:	4638      	mov	r0, r7
 8003254:	47c0      	blx	r8
 8003256:	3001      	adds	r0, #1
 8003258:	d0e6      	beq.n	8003228 <_printf_common+0xa4>
 800325a:	3601      	adds	r6, #1
 800325c:	e7d9      	b.n	8003212 <_printf_common+0x8e>
	...

08003260 <_printf_i>:
 8003260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	460c      	mov	r4, r1
 8003266:	4691      	mov	r9, r2
 8003268:	7e27      	ldrb	r7, [r4, #24]
 800326a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800326c:	2f78      	cmp	r7, #120	; 0x78
 800326e:	4680      	mov	r8, r0
 8003270:	469a      	mov	sl, r3
 8003272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003276:	d807      	bhi.n	8003288 <_printf_i+0x28>
 8003278:	2f62      	cmp	r7, #98	; 0x62
 800327a:	d80a      	bhi.n	8003292 <_printf_i+0x32>
 800327c:	2f00      	cmp	r7, #0
 800327e:	f000 80d8 	beq.w	8003432 <_printf_i+0x1d2>
 8003282:	2f58      	cmp	r7, #88	; 0x58
 8003284:	f000 80a3 	beq.w	80033ce <_printf_i+0x16e>
 8003288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800328c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003290:	e03a      	b.n	8003308 <_printf_i+0xa8>
 8003292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003296:	2b15      	cmp	r3, #21
 8003298:	d8f6      	bhi.n	8003288 <_printf_i+0x28>
 800329a:	a001      	add	r0, pc, #4	; (adr r0, 80032a0 <_printf_i+0x40>)
 800329c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80032a0:	080032f9 	.word	0x080032f9
 80032a4:	0800330d 	.word	0x0800330d
 80032a8:	08003289 	.word	0x08003289
 80032ac:	08003289 	.word	0x08003289
 80032b0:	08003289 	.word	0x08003289
 80032b4:	08003289 	.word	0x08003289
 80032b8:	0800330d 	.word	0x0800330d
 80032bc:	08003289 	.word	0x08003289
 80032c0:	08003289 	.word	0x08003289
 80032c4:	08003289 	.word	0x08003289
 80032c8:	08003289 	.word	0x08003289
 80032cc:	08003419 	.word	0x08003419
 80032d0:	0800333d 	.word	0x0800333d
 80032d4:	080033fb 	.word	0x080033fb
 80032d8:	08003289 	.word	0x08003289
 80032dc:	08003289 	.word	0x08003289
 80032e0:	0800343b 	.word	0x0800343b
 80032e4:	08003289 	.word	0x08003289
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	08003289 	.word	0x08003289
 80032f0:	08003289 	.word	0x08003289
 80032f4:	08003403 	.word	0x08003403
 80032f8:	680b      	ldr	r3, [r1, #0]
 80032fa:	1d1a      	adds	r2, r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	600a      	str	r2, [r1, #0]
 8003300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003308:	2301      	movs	r3, #1
 800330a:	e0a3      	b.n	8003454 <_printf_i+0x1f4>
 800330c:	6825      	ldr	r5, [r4, #0]
 800330e:	6808      	ldr	r0, [r1, #0]
 8003310:	062e      	lsls	r6, r5, #24
 8003312:	f100 0304 	add.w	r3, r0, #4
 8003316:	d50a      	bpl.n	800332e <_printf_i+0xce>
 8003318:	6805      	ldr	r5, [r0, #0]
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	2d00      	cmp	r5, #0
 800331e:	da03      	bge.n	8003328 <_printf_i+0xc8>
 8003320:	232d      	movs	r3, #45	; 0x2d
 8003322:	426d      	negs	r5, r5
 8003324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003328:	485e      	ldr	r0, [pc, #376]	; (80034a4 <_printf_i+0x244>)
 800332a:	230a      	movs	r3, #10
 800332c:	e019      	b.n	8003362 <_printf_i+0x102>
 800332e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003332:	6805      	ldr	r5, [r0, #0]
 8003334:	600b      	str	r3, [r1, #0]
 8003336:	bf18      	it	ne
 8003338:	b22d      	sxthne	r5, r5
 800333a:	e7ef      	b.n	800331c <_printf_i+0xbc>
 800333c:	680b      	ldr	r3, [r1, #0]
 800333e:	6825      	ldr	r5, [r4, #0]
 8003340:	1d18      	adds	r0, r3, #4
 8003342:	6008      	str	r0, [r1, #0]
 8003344:	0628      	lsls	r0, r5, #24
 8003346:	d501      	bpl.n	800334c <_printf_i+0xec>
 8003348:	681d      	ldr	r5, [r3, #0]
 800334a:	e002      	b.n	8003352 <_printf_i+0xf2>
 800334c:	0669      	lsls	r1, r5, #25
 800334e:	d5fb      	bpl.n	8003348 <_printf_i+0xe8>
 8003350:	881d      	ldrh	r5, [r3, #0]
 8003352:	4854      	ldr	r0, [pc, #336]	; (80034a4 <_printf_i+0x244>)
 8003354:	2f6f      	cmp	r7, #111	; 0x6f
 8003356:	bf0c      	ite	eq
 8003358:	2308      	moveq	r3, #8
 800335a:	230a      	movne	r3, #10
 800335c:	2100      	movs	r1, #0
 800335e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003362:	6866      	ldr	r6, [r4, #4]
 8003364:	60a6      	str	r6, [r4, #8]
 8003366:	2e00      	cmp	r6, #0
 8003368:	bfa2      	ittt	ge
 800336a:	6821      	ldrge	r1, [r4, #0]
 800336c:	f021 0104 	bicge.w	r1, r1, #4
 8003370:	6021      	strge	r1, [r4, #0]
 8003372:	b90d      	cbnz	r5, 8003378 <_printf_i+0x118>
 8003374:	2e00      	cmp	r6, #0
 8003376:	d04d      	beq.n	8003414 <_printf_i+0x1b4>
 8003378:	4616      	mov	r6, r2
 800337a:	fbb5 f1f3 	udiv	r1, r5, r3
 800337e:	fb03 5711 	mls	r7, r3, r1, r5
 8003382:	5dc7      	ldrb	r7, [r0, r7]
 8003384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003388:	462f      	mov	r7, r5
 800338a:	42bb      	cmp	r3, r7
 800338c:	460d      	mov	r5, r1
 800338e:	d9f4      	bls.n	800337a <_printf_i+0x11a>
 8003390:	2b08      	cmp	r3, #8
 8003392:	d10b      	bne.n	80033ac <_printf_i+0x14c>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	07df      	lsls	r7, r3, #31
 8003398:	d508      	bpl.n	80033ac <_printf_i+0x14c>
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	6861      	ldr	r1, [r4, #4]
 800339e:	4299      	cmp	r1, r3
 80033a0:	bfde      	ittt	le
 80033a2:	2330      	movle	r3, #48	; 0x30
 80033a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80033ac:	1b92      	subs	r2, r2, r6
 80033ae:	6122      	str	r2, [r4, #16]
 80033b0:	f8cd a000 	str.w	sl, [sp]
 80033b4:	464b      	mov	r3, r9
 80033b6:	aa03      	add	r2, sp, #12
 80033b8:	4621      	mov	r1, r4
 80033ba:	4640      	mov	r0, r8
 80033bc:	f7ff fee2 	bl	8003184 <_printf_common>
 80033c0:	3001      	adds	r0, #1
 80033c2:	d14c      	bne.n	800345e <_printf_i+0x1fe>
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c8:	b004      	add	sp, #16
 80033ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ce:	4835      	ldr	r0, [pc, #212]	; (80034a4 <_printf_i+0x244>)
 80033d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	680e      	ldr	r6, [r1, #0]
 80033d8:	061f      	lsls	r7, r3, #24
 80033da:	f856 5b04 	ldr.w	r5, [r6], #4
 80033de:	600e      	str	r6, [r1, #0]
 80033e0:	d514      	bpl.n	800340c <_printf_i+0x1ac>
 80033e2:	07d9      	lsls	r1, r3, #31
 80033e4:	bf44      	itt	mi
 80033e6:	f043 0320 	orrmi.w	r3, r3, #32
 80033ea:	6023      	strmi	r3, [r4, #0]
 80033ec:	b91d      	cbnz	r5, 80033f6 <_printf_i+0x196>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	f023 0320 	bic.w	r3, r3, #32
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	2310      	movs	r3, #16
 80033f8:	e7b0      	b.n	800335c <_printf_i+0xfc>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	f043 0320 	orr.w	r3, r3, #32
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	2378      	movs	r3, #120	; 0x78
 8003404:	4828      	ldr	r0, [pc, #160]	; (80034a8 <_printf_i+0x248>)
 8003406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800340a:	e7e3      	b.n	80033d4 <_printf_i+0x174>
 800340c:	065e      	lsls	r6, r3, #25
 800340e:	bf48      	it	mi
 8003410:	b2ad      	uxthmi	r5, r5
 8003412:	e7e6      	b.n	80033e2 <_printf_i+0x182>
 8003414:	4616      	mov	r6, r2
 8003416:	e7bb      	b.n	8003390 <_printf_i+0x130>
 8003418:	680b      	ldr	r3, [r1, #0]
 800341a:	6826      	ldr	r6, [r4, #0]
 800341c:	6960      	ldr	r0, [r4, #20]
 800341e:	1d1d      	adds	r5, r3, #4
 8003420:	600d      	str	r5, [r1, #0]
 8003422:	0635      	lsls	r5, r6, #24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	d501      	bpl.n	800342c <_printf_i+0x1cc>
 8003428:	6018      	str	r0, [r3, #0]
 800342a:	e002      	b.n	8003432 <_printf_i+0x1d2>
 800342c:	0671      	lsls	r1, r6, #25
 800342e:	d5fb      	bpl.n	8003428 <_printf_i+0x1c8>
 8003430:	8018      	strh	r0, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	4616      	mov	r6, r2
 8003438:	e7ba      	b.n	80033b0 <_printf_i+0x150>
 800343a:	680b      	ldr	r3, [r1, #0]
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	600a      	str	r2, [r1, #0]
 8003440:	681e      	ldr	r6, [r3, #0]
 8003442:	6862      	ldr	r2, [r4, #4]
 8003444:	2100      	movs	r1, #0
 8003446:	4630      	mov	r0, r6
 8003448:	f7fc feca 	bl	80001e0 <memchr>
 800344c:	b108      	cbz	r0, 8003452 <_printf_i+0x1f2>
 800344e:	1b80      	subs	r0, r0, r6
 8003450:	6060      	str	r0, [r4, #4]
 8003452:	6863      	ldr	r3, [r4, #4]
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	2300      	movs	r3, #0
 8003458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800345c:	e7a8      	b.n	80033b0 <_printf_i+0x150>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	4632      	mov	r2, r6
 8003462:	4649      	mov	r1, r9
 8003464:	4640      	mov	r0, r8
 8003466:	47d0      	blx	sl
 8003468:	3001      	adds	r0, #1
 800346a:	d0ab      	beq.n	80033c4 <_printf_i+0x164>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	079b      	lsls	r3, r3, #30
 8003470:	d413      	bmi.n	800349a <_printf_i+0x23a>
 8003472:	68e0      	ldr	r0, [r4, #12]
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	4298      	cmp	r0, r3
 8003478:	bfb8      	it	lt
 800347a:	4618      	movlt	r0, r3
 800347c:	e7a4      	b.n	80033c8 <_printf_i+0x168>
 800347e:	2301      	movs	r3, #1
 8003480:	4632      	mov	r2, r6
 8003482:	4649      	mov	r1, r9
 8003484:	4640      	mov	r0, r8
 8003486:	47d0      	blx	sl
 8003488:	3001      	adds	r0, #1
 800348a:	d09b      	beq.n	80033c4 <_printf_i+0x164>
 800348c:	3501      	adds	r5, #1
 800348e:	68e3      	ldr	r3, [r4, #12]
 8003490:	9903      	ldr	r1, [sp, #12]
 8003492:	1a5b      	subs	r3, r3, r1
 8003494:	42ab      	cmp	r3, r5
 8003496:	dcf2      	bgt.n	800347e <_printf_i+0x21e>
 8003498:	e7eb      	b.n	8003472 <_printf_i+0x212>
 800349a:	2500      	movs	r5, #0
 800349c:	f104 0619 	add.w	r6, r4, #25
 80034a0:	e7f5      	b.n	800348e <_printf_i+0x22e>
 80034a2:	bf00      	nop
 80034a4:	08003999 	.word	0x08003999
 80034a8:	080039aa 	.word	0x080039aa

080034ac <_putc_r>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	460d      	mov	r5, r1
 80034b0:	4614      	mov	r4, r2
 80034b2:	4606      	mov	r6, r0
 80034b4:	b118      	cbz	r0, 80034be <_putc_r+0x12>
 80034b6:	6983      	ldr	r3, [r0, #24]
 80034b8:	b90b      	cbnz	r3, 80034be <_putc_r+0x12>
 80034ba:	f7ff fbd3 	bl	8002c64 <__sinit>
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <_putc_r+0x84>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	d124      	bne.n	800350e <_putc_r+0x62>
 80034c4:	6874      	ldr	r4, [r6, #4]
 80034c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034c8:	07d8      	lsls	r0, r3, #31
 80034ca:	d405      	bmi.n	80034d8 <_putc_r+0x2c>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	0599      	lsls	r1, r3, #22
 80034d0:	d402      	bmi.n	80034d8 <_putc_r+0x2c>
 80034d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034d4:	f7ff fc89 	bl	8002dea <__retarget_lock_acquire_recursive>
 80034d8:	68a3      	ldr	r3, [r4, #8]
 80034da:	3b01      	subs	r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	da05      	bge.n	80034ee <_putc_r+0x42>
 80034e2:	69a2      	ldr	r2, [r4, #24]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	db1c      	blt.n	8003522 <_putc_r+0x76>
 80034e8:	b2eb      	uxtb	r3, r5
 80034ea:	2b0a      	cmp	r3, #10
 80034ec:	d019      	beq.n	8003522 <_putc_r+0x76>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	6022      	str	r2, [r4, #0]
 80034f4:	701d      	strb	r5, [r3, #0]
 80034f6:	b2ed      	uxtb	r5, r5
 80034f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034fa:	07da      	lsls	r2, r3, #31
 80034fc:	d405      	bmi.n	800350a <_putc_r+0x5e>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	059b      	lsls	r3, r3, #22
 8003502:	d402      	bmi.n	800350a <_putc_r+0x5e>
 8003504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003506:	f7ff fc71 	bl	8002dec <__retarget_lock_release_recursive>
 800350a:	4628      	mov	r0, r5
 800350c:	bd70      	pop	{r4, r5, r6, pc}
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <_putc_r+0x88>)
 8003510:	429c      	cmp	r4, r3
 8003512:	d101      	bne.n	8003518 <_putc_r+0x6c>
 8003514:	68b4      	ldr	r4, [r6, #8]
 8003516:	e7d6      	b.n	80034c6 <_putc_r+0x1a>
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <_putc_r+0x8c>)
 800351a:	429c      	cmp	r4, r3
 800351c:	bf08      	it	eq
 800351e:	68f4      	ldreq	r4, [r6, #12]
 8003520:	e7d1      	b.n	80034c6 <_putc_r+0x1a>
 8003522:	4629      	mov	r1, r5
 8003524:	4622      	mov	r2, r4
 8003526:	4630      	mov	r0, r6
 8003528:	f7ff f9a4 	bl	8002874 <__swbuf_r>
 800352c:	4605      	mov	r5, r0
 800352e:	e7e3      	b.n	80034f8 <_putc_r+0x4c>
 8003530:	08003948 	.word	0x08003948
 8003534:	08003968 	.word	0x08003968
 8003538:	08003928 	.word	0x08003928

0800353c <__sread>:
 800353c:	b510      	push	{r4, lr}
 800353e:	460c      	mov	r4, r1
 8003540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003544:	f000 f888 	bl	8003658 <_read_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	bfab      	itete	ge
 800354c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800354e:	89a3      	ldrhlt	r3, [r4, #12]
 8003550:	181b      	addge	r3, r3, r0
 8003552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003556:	bfac      	ite	ge
 8003558:	6563      	strge	r3, [r4, #84]	; 0x54
 800355a:	81a3      	strhlt	r3, [r4, #12]
 800355c:	bd10      	pop	{r4, pc}

0800355e <__swrite>:
 800355e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003562:	461f      	mov	r7, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	4605      	mov	r5, r0
 800356a:	460c      	mov	r4, r1
 800356c:	4616      	mov	r6, r2
 800356e:	d505      	bpl.n	800357c <__swrite+0x1e>
 8003570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003574:	2302      	movs	r3, #2
 8003576:	2200      	movs	r2, #0
 8003578:	f000 f85c 	bl	8003634 <_lseek_r>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	4632      	mov	r2, r6
 800358a:	463b      	mov	r3, r7
 800358c:	4628      	mov	r0, r5
 800358e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003592:	f7fd b9a5 	b.w	80008e0 <_write_r>

08003596 <__sseek>:
 8003596:	b510      	push	{r4, lr}
 8003598:	460c      	mov	r4, r1
 800359a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359e:	f000 f849 	bl	8003634 <_lseek_r>
 80035a2:	1c43      	adds	r3, r0, #1
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	bf15      	itete	ne
 80035a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80035aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035b2:	81a3      	strheq	r3, [r4, #12]
 80035b4:	bf18      	it	ne
 80035b6:	81a3      	strhne	r3, [r4, #12]
 80035b8:	bd10      	pop	{r4, pc}

080035ba <__sclose>:
 80035ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035be:	f000 b807 	b.w	80035d0 <_close_r>

080035c2 <abort>:
 80035c2:	b508      	push	{r3, lr}
 80035c4:	2006      	movs	r0, #6
 80035c6:	f000 f881 	bl	80036cc <raise>
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fe fd95 	bl	80020fa <_exit>

080035d0 <_close_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4d06      	ldr	r5, [pc, #24]	; (80035ec <_close_r+0x1c>)
 80035d4:	2300      	movs	r3, #0
 80035d6:	4604      	mov	r4, r0
 80035d8:	4608      	mov	r0, r1
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	f7fe fdb4 	bl	8002148 <_close>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d102      	bne.n	80035ea <_close_r+0x1a>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	b103      	cbz	r3, 80035ea <_close_r+0x1a>
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
 80035ec:	200001d8 	.word	0x200001d8

080035f0 <_fstat_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4d07      	ldr	r5, [pc, #28]	; (8003610 <_fstat_r+0x20>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	602b      	str	r3, [r5, #0]
 80035fe:	f7fe fdaf 	bl	8002160 <_fstat>
 8003602:	1c43      	adds	r3, r0, #1
 8003604:	d102      	bne.n	800360c <_fstat_r+0x1c>
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	b103      	cbz	r3, 800360c <_fstat_r+0x1c>
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	bd38      	pop	{r3, r4, r5, pc}
 800360e:	bf00      	nop
 8003610:	200001d8 	.word	0x200001d8

08003614 <_isatty_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d06      	ldr	r5, [pc, #24]	; (8003630 <_isatty_r+0x1c>)
 8003618:	2300      	movs	r3, #0
 800361a:	4604      	mov	r4, r0
 800361c:	4608      	mov	r0, r1
 800361e:	602b      	str	r3, [r5, #0]
 8003620:	f7fe fdae 	bl	8002180 <_isatty>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_isatty_r+0x1a>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_isatty_r+0x1a>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	200001d8 	.word	0x200001d8

08003634 <_lseek_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4d07      	ldr	r5, [pc, #28]	; (8003654 <_lseek_r+0x20>)
 8003638:	4604      	mov	r4, r0
 800363a:	4608      	mov	r0, r1
 800363c:	4611      	mov	r1, r2
 800363e:	2200      	movs	r2, #0
 8003640:	602a      	str	r2, [r5, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f7fe fda7 	bl	8002196 <_lseek>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_lseek_r+0x1e>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	b103      	cbz	r3, 8003652 <_lseek_r+0x1e>
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	200001d8 	.word	0x200001d8

08003658 <_read_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4d07      	ldr	r5, [pc, #28]	; (8003678 <_read_r+0x20>)
 800365c:	4604      	mov	r4, r0
 800365e:	4608      	mov	r0, r1
 8003660:	4611      	mov	r1, r2
 8003662:	2200      	movs	r2, #0
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f7fe fd51 	bl	800210e <_read>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <_read_r+0x1e>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b103      	cbz	r3, 8003676 <_read_r+0x1e>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	200001d8 	.word	0x200001d8

0800367c <_raise_r>:
 800367c:	291f      	cmp	r1, #31
 800367e:	b538      	push	{r3, r4, r5, lr}
 8003680:	4604      	mov	r4, r0
 8003682:	460d      	mov	r5, r1
 8003684:	d904      	bls.n	8003690 <_raise_r+0x14>
 8003686:	2316      	movs	r3, #22
 8003688:	6003      	str	r3, [r0, #0]
 800368a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003692:	b112      	cbz	r2, 800369a <_raise_r+0x1e>
 8003694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003698:	b94b      	cbnz	r3, 80036ae <_raise_r+0x32>
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f830 	bl	8003700 <_getpid_r>
 80036a0:	462a      	mov	r2, r5
 80036a2:	4601      	mov	r1, r0
 80036a4:	4620      	mov	r0, r4
 80036a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036aa:	f000 b817 	b.w	80036dc <_kill_r>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00a      	beq.n	80036c8 <_raise_r+0x4c>
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	d103      	bne.n	80036be <_raise_r+0x42>
 80036b6:	2316      	movs	r3, #22
 80036b8:	6003      	str	r3, [r0, #0]
 80036ba:	2001      	movs	r0, #1
 80036bc:	e7e7      	b.n	800368e <_raise_r+0x12>
 80036be:	2400      	movs	r4, #0
 80036c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80036c4:	4628      	mov	r0, r5
 80036c6:	4798      	blx	r3
 80036c8:	2000      	movs	r0, #0
 80036ca:	e7e0      	b.n	800368e <_raise_r+0x12>

080036cc <raise>:
 80036cc:	4b02      	ldr	r3, [pc, #8]	; (80036d8 <raise+0xc>)
 80036ce:	4601      	mov	r1, r0
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f7ff bfd3 	b.w	800367c <_raise_r>
 80036d6:	bf00      	nop
 80036d8:	2000002c 	.word	0x2000002c

080036dc <_kill_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d07      	ldr	r5, [pc, #28]	; (80036fc <_kill_r+0x20>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	602b      	str	r3, [r5, #0]
 80036ea:	f7fe fcf6 	bl	80020da <_kill>
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	d102      	bne.n	80036f8 <_kill_r+0x1c>
 80036f2:	682b      	ldr	r3, [r5, #0]
 80036f4:	b103      	cbz	r3, 80036f8 <_kill_r+0x1c>
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
 80036fa:	bf00      	nop
 80036fc:	200001d8 	.word	0x200001d8

08003700 <_getpid_r>:
 8003700:	f7fe bce3 	b.w	80020ca <_getpid>

08003704 <_gettimeofday>:
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <_gettimeofday+0xc>)
 8003706:	2258      	movs	r2, #88	; 0x58
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800370e:	4770      	bx	lr
 8003710:	200001d8 	.word	0x200001d8

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
=======
 8002fe4:	e7fe      	b.n	8002fe4 <ADC1_2_IRQHandler>
	...

08002fe8 <__errno>:
 8002fe8:	4b01      	ldr	r3, [pc, #4]	; (8002ff0 <__errno+0x8>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000002c 	.word	0x2000002c

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	; (800302c <__libc_init_array+0x38>)
 8002ff8:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	2600      	movs	r6, #0
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	4d0b      	ldr	r5, [pc, #44]	; (8003034 <__libc_init_array+0x40>)
 8003006:	4c0c      	ldr	r4, [pc, #48]	; (8003038 <__libc_init_array+0x44>)
 8003008:	f001 f9c0 	bl	800438c <_init>
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	2600      	movs	r6, #0
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	0800463c 	.word	0x0800463c
 8003030:	0800463c 	.word	0x0800463c
 8003034:	0800463c 	.word	0x0800463c
 8003038:	08004640 	.word	0x08004640

0800303c <malloc>:
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <malloc+0xc>)
 800303e:	4601      	mov	r1, r0
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	f000 b863 	b.w	800310c <_malloc_r>
 8003046:	bf00      	nop
 8003048:	2000002c 	.word	0x2000002c

0800304c <free>:
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <free+0xc>)
 800304e:	4601      	mov	r1, r0
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f000 b80b 	b.w	800306c <_free_r>
 8003056:	bf00      	nop
 8003058:	2000002c 	.word	0x2000002c

0800305c <memset>:
 800305c:	4402      	add	r2, r0
 800305e:	4603      	mov	r3, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <_free_r>:
 800306c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800306e:	2900      	cmp	r1, #0
 8003070:	d048      	beq.n	8003104 <_free_r+0x98>
 8003072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003076:	9001      	str	r0, [sp, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f1a1 0404 	sub.w	r4, r1, #4
 800307e:	bfb8      	it	lt
 8003080:	18e4      	addlt	r4, r4, r3
 8003082:	f000 fc93 	bl	80039ac <__malloc_lock>
 8003086:	4a20      	ldr	r2, [pc, #128]	; (8003108 <_free_r+0x9c>)
 8003088:	9801      	ldr	r0, [sp, #4]
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	4615      	mov	r5, r2
 800308e:	b933      	cbnz	r3, 800309e <_free_r+0x32>
 8003090:	6063      	str	r3, [r4, #4]
 8003092:	6014      	str	r4, [r2, #0]
 8003094:	b003      	add	sp, #12
 8003096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800309a:	f000 bc8d 	b.w	80039b8 <__malloc_unlock>
 800309e:	42a3      	cmp	r3, r4
 80030a0:	d90b      	bls.n	80030ba <_free_r+0x4e>
 80030a2:	6821      	ldr	r1, [r4, #0]
 80030a4:	1862      	adds	r2, r4, r1
 80030a6:	4293      	cmp	r3, r2
 80030a8:	bf04      	itt	eq
 80030aa:	681a      	ldreq	r2, [r3, #0]
 80030ac:	685b      	ldreq	r3, [r3, #4]
 80030ae:	6063      	str	r3, [r4, #4]
 80030b0:	bf04      	itt	eq
 80030b2:	1852      	addeq	r2, r2, r1
 80030b4:	6022      	streq	r2, [r4, #0]
 80030b6:	602c      	str	r4, [r5, #0]
 80030b8:	e7ec      	b.n	8003094 <_free_r+0x28>
 80030ba:	461a      	mov	r2, r3
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b10b      	cbz	r3, 80030c4 <_free_r+0x58>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d9fa      	bls.n	80030ba <_free_r+0x4e>
 80030c4:	6811      	ldr	r1, [r2, #0]
 80030c6:	1855      	adds	r5, r2, r1
 80030c8:	42a5      	cmp	r5, r4
 80030ca:	d10b      	bne.n	80030e4 <_free_r+0x78>
 80030cc:	6824      	ldr	r4, [r4, #0]
 80030ce:	4421      	add	r1, r4
 80030d0:	1854      	adds	r4, r2, r1
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	d1dd      	bne.n	8003094 <_free_r+0x28>
 80030d8:	681c      	ldr	r4, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	6053      	str	r3, [r2, #4]
 80030de:	4421      	add	r1, r4
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	e7d7      	b.n	8003094 <_free_r+0x28>
 80030e4:	d902      	bls.n	80030ec <_free_r+0x80>
 80030e6:	230c      	movs	r3, #12
 80030e8:	6003      	str	r3, [r0, #0]
 80030ea:	e7d3      	b.n	8003094 <_free_r+0x28>
 80030ec:	6825      	ldr	r5, [r4, #0]
 80030ee:	1961      	adds	r1, r4, r5
 80030f0:	428b      	cmp	r3, r1
 80030f2:	bf04      	itt	eq
 80030f4:	6819      	ldreq	r1, [r3, #0]
 80030f6:	685b      	ldreq	r3, [r3, #4]
 80030f8:	6063      	str	r3, [r4, #4]
 80030fa:	bf04      	itt	eq
 80030fc:	1949      	addeq	r1, r1, r5
 80030fe:	6021      	streq	r1, [r4, #0]
 8003100:	6054      	str	r4, [r2, #4]
 8003102:	e7c7      	b.n	8003094 <_free_r+0x28>
 8003104:	b003      	add	sp, #12
 8003106:	bd30      	pop	{r4, r5, pc}
 8003108:	200001c0 	.word	0x200001c0

0800310c <_malloc_r>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	1ccd      	adds	r5, r1, #3
 8003110:	f025 0503 	bic.w	r5, r5, #3
 8003114:	3508      	adds	r5, #8
 8003116:	2d0c      	cmp	r5, #12
 8003118:	bf38      	it	cc
 800311a:	250c      	movcc	r5, #12
 800311c:	2d00      	cmp	r5, #0
 800311e:	4606      	mov	r6, r0
 8003120:	db01      	blt.n	8003126 <_malloc_r+0x1a>
 8003122:	42a9      	cmp	r1, r5
 8003124:	d903      	bls.n	800312e <_malloc_r+0x22>
 8003126:	230c      	movs	r3, #12
 8003128:	6033      	str	r3, [r6, #0]
 800312a:	2000      	movs	r0, #0
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800312e:	f000 fc3d 	bl	80039ac <__malloc_lock>
 8003132:	4921      	ldr	r1, [pc, #132]	; (80031b8 <_malloc_r+0xac>)
 8003134:	680a      	ldr	r2, [r1, #0]
 8003136:	4614      	mov	r4, r2
 8003138:	b99c      	cbnz	r4, 8003162 <_malloc_r+0x56>
 800313a:	4f20      	ldr	r7, [pc, #128]	; (80031bc <_malloc_r+0xb0>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b923      	cbnz	r3, 800314a <_malloc_r+0x3e>
 8003140:	4621      	mov	r1, r4
 8003142:	4630      	mov	r0, r6
 8003144:	f000 f8d8 	bl	80032f8 <_sbrk_r>
 8003148:	6038      	str	r0, [r7, #0]
 800314a:	4629      	mov	r1, r5
 800314c:	4630      	mov	r0, r6
 800314e:	f000 f8d3 	bl	80032f8 <_sbrk_r>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	d123      	bne.n	800319e <_malloc_r+0x92>
 8003156:	230c      	movs	r3, #12
 8003158:	6033      	str	r3, [r6, #0]
 800315a:	4630      	mov	r0, r6
 800315c:	f000 fc2c 	bl	80039b8 <__malloc_unlock>
 8003160:	e7e3      	b.n	800312a <_malloc_r+0x1e>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	1b5b      	subs	r3, r3, r5
 8003166:	d417      	bmi.n	8003198 <_malloc_r+0x8c>
 8003168:	2b0b      	cmp	r3, #11
 800316a:	d903      	bls.n	8003174 <_malloc_r+0x68>
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	441c      	add	r4, r3
 8003170:	6025      	str	r5, [r4, #0]
 8003172:	e004      	b.n	800317e <_malloc_r+0x72>
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	42a2      	cmp	r2, r4
 8003178:	bf0c      	ite	eq
 800317a:	600b      	streq	r3, [r1, #0]
 800317c:	6053      	strne	r3, [r2, #4]
 800317e:	4630      	mov	r0, r6
 8003180:	f000 fc1a 	bl	80039b8 <__malloc_unlock>
 8003184:	f104 000b 	add.w	r0, r4, #11
 8003188:	1d23      	adds	r3, r4, #4
 800318a:	f020 0007 	bic.w	r0, r0, #7
 800318e:	1ac2      	subs	r2, r0, r3
 8003190:	d0cc      	beq.n	800312c <_malloc_r+0x20>
 8003192:	1a1b      	subs	r3, r3, r0
 8003194:	50a3      	str	r3, [r4, r2]
 8003196:	e7c9      	b.n	800312c <_malloc_r+0x20>
 8003198:	4622      	mov	r2, r4
 800319a:	6864      	ldr	r4, [r4, #4]
 800319c:	e7cc      	b.n	8003138 <_malloc_r+0x2c>
 800319e:	1cc4      	adds	r4, r0, #3
 80031a0:	f024 0403 	bic.w	r4, r4, #3
 80031a4:	42a0      	cmp	r0, r4
 80031a6:	d0e3      	beq.n	8003170 <_malloc_r+0x64>
 80031a8:	1a21      	subs	r1, r4, r0
 80031aa:	4630      	mov	r0, r6
 80031ac:	f000 f8a4 	bl	80032f8 <_sbrk_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	d1dd      	bne.n	8003170 <_malloc_r+0x64>
 80031b4:	e7cf      	b.n	8003156 <_malloc_r+0x4a>
 80031b6:	bf00      	nop
 80031b8:	200001c0 	.word	0x200001c0
 80031bc:	200001c4 	.word	0x200001c4

080031c0 <iprintf>:
 80031c0:	b40f      	push	{r0, r1, r2, r3}
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <iprintf+0x2c>)
 80031c4:	b513      	push	{r0, r1, r4, lr}
 80031c6:	681c      	ldr	r4, [r3, #0]
 80031c8:	b124      	cbz	r4, 80031d4 <iprintf+0x14>
 80031ca:	69a3      	ldr	r3, [r4, #24]
 80031cc:	b913      	cbnz	r3, 80031d4 <iprintf+0x14>
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 fac2 	bl	8003758 <__sinit>
 80031d4:	ab05      	add	r3, sp, #20
 80031d6:	9a04      	ldr	r2, [sp, #16]
 80031d8:	68a1      	ldr	r1, [r4, #8]
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 fc1b 	bl	8003a18 <_vfiprintf_r>
 80031e2:	b002      	add	sp, #8
 80031e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e8:	b004      	add	sp, #16
 80031ea:	4770      	bx	lr
 80031ec:	2000002c 	.word	0x2000002c

080031f0 <putchar>:
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <putchar+0x28>)
 80031f2:	b513      	push	{r0, r1, r4, lr}
 80031f4:	681c      	ldr	r4, [r3, #0]
 80031f6:	4601      	mov	r1, r0
 80031f8:	b134      	cbz	r4, 8003208 <putchar+0x18>
 80031fa:	69a3      	ldr	r3, [r4, #24]
 80031fc:	b923      	cbnz	r3, 8003208 <putchar+0x18>
 80031fe:	9001      	str	r0, [sp, #4]
 8003200:	4620      	mov	r0, r4
 8003202:	f000 faa9 	bl	8003758 <__sinit>
 8003206:	9901      	ldr	r1, [sp, #4]
 8003208:	68a2      	ldr	r2, [r4, #8]
 800320a:	4620      	mov	r0, r4
 800320c:	b002      	add	sp, #8
 800320e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003212:	f000 bec5 	b.w	8003fa0 <_putc_r>
 8003216:	bf00      	nop
 8003218:	2000002c 	.word	0x2000002c

0800321c <srand>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <srand+0x44>)
 8003220:	681d      	ldr	r5, [r3, #0]
 8003222:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003224:	4604      	mov	r4, r0
 8003226:	b9b3      	cbnz	r3, 8003256 <srand+0x3a>
 8003228:	2018      	movs	r0, #24
 800322a:	f7ff ff07 	bl	800303c <malloc>
 800322e:	4602      	mov	r2, r0
 8003230:	63a8      	str	r0, [r5, #56]	; 0x38
 8003232:	b920      	cbnz	r0, 800323e <srand+0x22>
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <srand+0x48>)
 8003236:	480c      	ldr	r0, [pc, #48]	; (8003268 <srand+0x4c>)
 8003238:	2142      	movs	r1, #66	; 0x42
 800323a:	f000 f955 	bl	80034e8 <__assert_func>
 800323e:	490b      	ldr	r1, [pc, #44]	; (800326c <srand+0x50>)
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <srand+0x54>)
 8003242:	e9c0 1300 	strd	r1, r3, [r0]
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <srand+0x58>)
 8003248:	6083      	str	r3, [r0, #8]
 800324a:	230b      	movs	r3, #11
 800324c:	8183      	strh	r3, [r0, #12]
 800324e:	2100      	movs	r1, #0
 8003250:	2001      	movs	r0, #1
 8003252:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003256:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003258:	2200      	movs	r2, #0
 800325a:	611c      	str	r4, [r3, #16]
 800325c:	615a      	str	r2, [r3, #20]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	2000002c 	.word	0x2000002c
 8003264:	080044f4 	.word	0x080044f4
 8003268:	0800450b 	.word	0x0800450b
 800326c:	abcd330e 	.word	0xabcd330e
 8003270:	e66d1234 	.word	0xe66d1234
 8003274:	0005deec 	.word	0x0005deec

08003278 <rand>:
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <rand+0x60>)
 800327a:	b510      	push	{r4, lr}
 800327c:	681c      	ldr	r4, [r3, #0]
 800327e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003280:	b9b3      	cbnz	r3, 80032b0 <rand+0x38>
 8003282:	2018      	movs	r0, #24
 8003284:	f7ff feda 	bl	800303c <malloc>
 8003288:	63a0      	str	r0, [r4, #56]	; 0x38
 800328a:	b928      	cbnz	r0, 8003298 <rand+0x20>
 800328c:	4602      	mov	r2, r0
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <rand+0x64>)
 8003290:	4813      	ldr	r0, [pc, #76]	; (80032e0 <rand+0x68>)
 8003292:	214e      	movs	r1, #78	; 0x4e
 8003294:	f000 f928 	bl	80034e8 <__assert_func>
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <rand+0x6c>)
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <rand+0x70>)
 800329c:	e9c0 2300 	strd	r2, r3, [r0]
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <rand+0x74>)
 80032a2:	6083      	str	r3, [r0, #8]
 80032a4:	230b      	movs	r3, #11
 80032a6:	8183      	strh	r3, [r0, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	2300      	movs	r3, #0
 80032ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80032b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80032b2:	480f      	ldr	r0, [pc, #60]	; (80032f0 <rand+0x78>)
 80032b4:	690a      	ldr	r2, [r1, #16]
 80032b6:	694b      	ldr	r3, [r1, #20]
 80032b8:	4c0e      	ldr	r4, [pc, #56]	; (80032f4 <rand+0x7c>)
 80032ba:	4350      	muls	r0, r2
 80032bc:	fb04 0003 	mla	r0, r4, r3, r0
 80032c0:	fba2 3404 	umull	r3, r4, r2, r4
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	4404      	add	r4, r0
 80032c8:	f144 0000 	adc.w	r0, r4, #0
 80032cc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80032d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	bf00      	nop
 80032d8:	2000002c 	.word	0x2000002c
 80032dc:	080044f4 	.word	0x080044f4
 80032e0:	0800450b 	.word	0x0800450b
 80032e4:	abcd330e 	.word	0xabcd330e
 80032e8:	e66d1234 	.word	0xe66d1234
 80032ec:	0005deec 	.word	0x0005deec
 80032f0:	5851f42d 	.word	0x5851f42d
 80032f4:	4c957f2d 	.word	0x4c957f2d

080032f8 <_sbrk_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	; (8003314 <_sbrk_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7ff fd86 	bl	8002e14 <_sbrk>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_sbrk_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_sbrk_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	200001d8 	.word	0x200001d8

08003318 <setbuf>:
 8003318:	2900      	cmp	r1, #0
 800331a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331e:	bf0c      	ite	eq
 8003320:	2202      	moveq	r2, #2
 8003322:	2200      	movne	r2, #0
 8003324:	f000 b800 	b.w	8003328 <setvbuf>

08003328 <setvbuf>:
 8003328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800332c:	461d      	mov	r5, r3
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <setvbuf+0x17c>)
 8003330:	681f      	ldr	r7, [r3, #0]
 8003332:	4604      	mov	r4, r0
 8003334:	460e      	mov	r6, r1
 8003336:	4690      	mov	r8, r2
 8003338:	b127      	cbz	r7, 8003344 <setvbuf+0x1c>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	b913      	cbnz	r3, 8003344 <setvbuf+0x1c>
 800333e:	4638      	mov	r0, r7
 8003340:	f000 fa0a 	bl	8003758 <__sinit>
 8003344:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <setvbuf+0x180>)
 8003346:	429c      	cmp	r4, r3
 8003348:	d167      	bne.n	800341a <setvbuf+0xf2>
 800334a:	687c      	ldr	r4, [r7, #4]
 800334c:	f1b8 0f02 	cmp.w	r8, #2
 8003350:	d006      	beq.n	8003360 <setvbuf+0x38>
 8003352:	f1b8 0f01 	cmp.w	r8, #1
 8003356:	f200 809f 	bhi.w	8003498 <setvbuf+0x170>
 800335a:	2d00      	cmp	r5, #0
 800335c:	f2c0 809c 	blt.w	8003498 <setvbuf+0x170>
 8003360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003362:	07db      	lsls	r3, r3, #31
 8003364:	d405      	bmi.n	8003372 <setvbuf+0x4a>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	0598      	lsls	r0, r3, #22
 800336a:	d402      	bmi.n	8003372 <setvbuf+0x4a>
 800336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336e:	f000 fab6 	bl	80038de <__retarget_lock_acquire_recursive>
 8003372:	4621      	mov	r1, r4
 8003374:	4638      	mov	r0, r7
 8003376:	f000 f95b 	bl	8003630 <_fflush_r>
 800337a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800337c:	b141      	cbz	r1, 8003390 <setvbuf+0x68>
 800337e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003382:	4299      	cmp	r1, r3
 8003384:	d002      	beq.n	800338c <setvbuf+0x64>
 8003386:	4638      	mov	r0, r7
 8003388:	f7ff fe70 	bl	800306c <_free_r>
 800338c:	2300      	movs	r3, #0
 800338e:	6363      	str	r3, [r4, #52]	; 0x34
 8003390:	2300      	movs	r3, #0
 8003392:	61a3      	str	r3, [r4, #24]
 8003394:	6063      	str	r3, [r4, #4]
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	0619      	lsls	r1, r3, #24
 800339a:	d503      	bpl.n	80033a4 <setvbuf+0x7c>
 800339c:	6921      	ldr	r1, [r4, #16]
 800339e:	4638      	mov	r0, r7
 80033a0:	f7ff fe64 	bl	800306c <_free_r>
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	f1b8 0f02 	cmp.w	r8, #2
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	d06c      	beq.n	8003490 <setvbuf+0x168>
 80033b6:	ab01      	add	r3, sp, #4
 80033b8:	466a      	mov	r2, sp
 80033ba:	4621      	mov	r1, r4
 80033bc:	4638      	mov	r0, r7
 80033be:	f000 fa90 	bl	80038e2 <__swhatbuf_r>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	4318      	orrs	r0, r3
 80033c6:	81a0      	strh	r0, [r4, #12]
 80033c8:	2d00      	cmp	r5, #0
 80033ca:	d130      	bne.n	800342e <setvbuf+0x106>
 80033cc:	9d00      	ldr	r5, [sp, #0]
 80033ce:	4628      	mov	r0, r5
 80033d0:	f7ff fe34 	bl	800303c <malloc>
 80033d4:	4606      	mov	r6, r0
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d155      	bne.n	8003486 <setvbuf+0x15e>
 80033da:	f8dd 9000 	ldr.w	r9, [sp]
 80033de:	45a9      	cmp	r9, r5
 80033e0:	d14a      	bne.n	8003478 <setvbuf+0x150>
 80033e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80033e6:	2200      	movs	r2, #0
 80033e8:	60a2      	str	r2, [r4, #8]
 80033ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80033ee:	6022      	str	r2, [r4, #0]
 80033f0:	6122      	str	r2, [r4, #16]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033f8:	6162      	str	r2, [r4, #20]
 80033fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	07d2      	lsls	r2, r2, #31
 8003402:	81a3      	strh	r3, [r4, #12]
 8003404:	d405      	bmi.n	8003412 <setvbuf+0xea>
 8003406:	f413 7f00 	tst.w	r3, #512	; 0x200
 800340a:	d102      	bne.n	8003412 <setvbuf+0xea>
 800340c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340e:	f000 fa67 	bl	80038e0 <__retarget_lock_release_recursive>
 8003412:	4628      	mov	r0, r5
 8003414:	b003      	add	sp, #12
 8003416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <setvbuf+0x184>)
 800341c:	429c      	cmp	r4, r3
 800341e:	d101      	bne.n	8003424 <setvbuf+0xfc>
 8003420:	68bc      	ldr	r4, [r7, #8]
 8003422:	e793      	b.n	800334c <setvbuf+0x24>
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <setvbuf+0x188>)
 8003426:	429c      	cmp	r4, r3
 8003428:	bf08      	it	eq
 800342a:	68fc      	ldreq	r4, [r7, #12]
 800342c:	e78e      	b.n	800334c <setvbuf+0x24>
 800342e:	2e00      	cmp	r6, #0
 8003430:	d0cd      	beq.n	80033ce <setvbuf+0xa6>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	b913      	cbnz	r3, 800343c <setvbuf+0x114>
 8003436:	4638      	mov	r0, r7
 8003438:	f000 f98e 	bl	8003758 <__sinit>
 800343c:	f1b8 0f01 	cmp.w	r8, #1
 8003440:	bf08      	it	eq
 8003442:	89a3      	ldrheq	r3, [r4, #12]
 8003444:	6026      	str	r6, [r4, #0]
 8003446:	bf04      	itt	eq
 8003448:	f043 0301 	orreq.w	r3, r3, #1
 800344c:	81a3      	strheq	r3, [r4, #12]
 800344e:	89a2      	ldrh	r2, [r4, #12]
 8003450:	f012 0308 	ands.w	r3, r2, #8
 8003454:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003458:	d01c      	beq.n	8003494 <setvbuf+0x16c>
 800345a:	07d3      	lsls	r3, r2, #31
 800345c:	bf41      	itttt	mi
 800345e:	2300      	movmi	r3, #0
 8003460:	426d      	negmi	r5, r5
 8003462:	60a3      	strmi	r3, [r4, #8]
 8003464:	61a5      	strmi	r5, [r4, #24]
 8003466:	bf58      	it	pl
 8003468:	60a5      	strpl	r5, [r4, #8]
 800346a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800346c:	f015 0501 	ands.w	r5, r5, #1
 8003470:	d115      	bne.n	800349e <setvbuf+0x176>
 8003472:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003476:	e7c8      	b.n	800340a <setvbuf+0xe2>
 8003478:	4648      	mov	r0, r9
 800347a:	f7ff fddf 	bl	800303c <malloc>
 800347e:	4606      	mov	r6, r0
 8003480:	2800      	cmp	r0, #0
 8003482:	d0ae      	beq.n	80033e2 <setvbuf+0xba>
 8003484:	464d      	mov	r5, r9
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	e7d0      	b.n	8003432 <setvbuf+0x10a>
 8003490:	2500      	movs	r5, #0
 8003492:	e7a8      	b.n	80033e6 <setvbuf+0xbe>
 8003494:	60a3      	str	r3, [r4, #8]
 8003496:	e7e8      	b.n	800346a <setvbuf+0x142>
 8003498:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800349c:	e7b9      	b.n	8003412 <setvbuf+0xea>
 800349e:	2500      	movs	r5, #0
 80034a0:	e7b7      	b.n	8003412 <setvbuf+0xea>
 80034a2:	bf00      	nop
 80034a4:	2000002c 	.word	0x2000002c
 80034a8:	080045c8 	.word	0x080045c8
 80034ac:	080045e8 	.word	0x080045e8
 80034b0:	080045a8 	.word	0x080045a8

080034b4 <time>:
 80034b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <time+0x30>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	4669      	mov	r1, sp
 80034bc:	4604      	mov	r4, r0
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	f000 f9fa 	bl	80038b8 <_gettimeofday_r>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	bfbe      	ittt	lt
 80034c8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80034cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80034d0:	e9cd 2300 	strdlt	r2, r3, [sp]
 80034d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034d8:	b10c      	cbz	r4, 80034de <time+0x2a>
 80034da:	e9c4 0100 	strd	r0, r1, [r4]
 80034de:	b004      	add	sp, #16
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	2000002c 	.word	0x2000002c

080034e8 <__assert_func>:
 80034e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034ea:	4614      	mov	r4, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <__assert_func+0x2c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4605      	mov	r5, r0
 80034f4:	68d8      	ldr	r0, [r3, #12]
 80034f6:	b14c      	cbz	r4, 800350c <__assert_func+0x24>
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <__assert_func+0x30>)
 80034fa:	9100      	str	r1, [sp, #0]
 80034fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003500:	4906      	ldr	r1, [pc, #24]	; (800351c <__assert_func+0x34>)
 8003502:	462b      	mov	r3, r5
 8003504:	f000 f9a6 	bl	8003854 <fiprintf>
 8003508:	f000 fe96 	bl	8004238 <abort>
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <__assert_func+0x38>)
 800350e:	461c      	mov	r4, r3
 8003510:	e7f3      	b.n	80034fa <__assert_func+0x12>
 8003512:	bf00      	nop
 8003514:	2000002c 	.word	0x2000002c
 8003518:	0800456a 	.word	0x0800456a
 800351c:	08004577 	.word	0x08004577
 8003520:	080045a5 	.word	0x080045a5

08003524 <__sflush_r>:
 8003524:	898a      	ldrh	r2, [r1, #12]
 8003526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	4605      	mov	r5, r0
 800352c:	0710      	lsls	r0, r2, #28
 800352e:	460c      	mov	r4, r1
 8003530:	d458      	bmi.n	80035e4 <__sflush_r+0xc0>
 8003532:	684b      	ldr	r3, [r1, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	dc05      	bgt.n	8003544 <__sflush_r+0x20>
 8003538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	dc02      	bgt.n	8003544 <__sflush_r+0x20>
 800353e:	2000      	movs	r0, #0
 8003540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003546:	2e00      	cmp	r6, #0
 8003548:	d0f9      	beq.n	800353e <__sflush_r+0x1a>
 800354a:	2300      	movs	r3, #0
 800354c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003550:	682f      	ldr	r7, [r5, #0]
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	d032      	beq.n	80035bc <__sflush_r+0x98>
 8003556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	075a      	lsls	r2, r3, #29
 800355c:	d505      	bpl.n	800356a <__sflush_r+0x46>
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	1ac0      	subs	r0, r0, r3
 8003562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003564:	b10b      	cbz	r3, 800356a <__sflush_r+0x46>
 8003566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003568:	1ac0      	subs	r0, r0, r3
 800356a:	2300      	movs	r3, #0
 800356c:	4602      	mov	r2, r0
 800356e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	4628      	mov	r0, r5
 8003574:	47b0      	blx	r6
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	d106      	bne.n	800358a <__sflush_r+0x66>
 800357c:	6829      	ldr	r1, [r5, #0]
 800357e:	291d      	cmp	r1, #29
 8003580:	d82c      	bhi.n	80035dc <__sflush_r+0xb8>
 8003582:	4a2a      	ldr	r2, [pc, #168]	; (800362c <__sflush_r+0x108>)
 8003584:	40ca      	lsrs	r2, r1
 8003586:	07d6      	lsls	r6, r2, #31
 8003588:	d528      	bpl.n	80035dc <__sflush_r+0xb8>
 800358a:	2200      	movs	r2, #0
 800358c:	6062      	str	r2, [r4, #4]
 800358e:	04d9      	lsls	r1, r3, #19
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	6022      	str	r2, [r4, #0]
 8003594:	d504      	bpl.n	80035a0 <__sflush_r+0x7c>
 8003596:	1c42      	adds	r2, r0, #1
 8003598:	d101      	bne.n	800359e <__sflush_r+0x7a>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	b903      	cbnz	r3, 80035a0 <__sflush_r+0x7c>
 800359e:	6560      	str	r0, [r4, #84]	; 0x54
 80035a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a2:	602f      	str	r7, [r5, #0]
 80035a4:	2900      	cmp	r1, #0
 80035a6:	d0ca      	beq.n	800353e <__sflush_r+0x1a>
 80035a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ac:	4299      	cmp	r1, r3
 80035ae:	d002      	beq.n	80035b6 <__sflush_r+0x92>
 80035b0:	4628      	mov	r0, r5
 80035b2:	f7ff fd5b 	bl	800306c <_free_r>
 80035b6:	2000      	movs	r0, #0
 80035b8:	6360      	str	r0, [r4, #52]	; 0x34
 80035ba:	e7c1      	b.n	8003540 <__sflush_r+0x1c>
 80035bc:	6a21      	ldr	r1, [r4, #32]
 80035be:	2301      	movs	r3, #1
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b0      	blx	r6
 80035c4:	1c41      	adds	r1, r0, #1
 80035c6:	d1c7      	bne.n	8003558 <__sflush_r+0x34>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0c4      	beq.n	8003558 <__sflush_r+0x34>
 80035ce:	2b1d      	cmp	r3, #29
 80035d0:	d001      	beq.n	80035d6 <__sflush_r+0xb2>
 80035d2:	2b16      	cmp	r3, #22
 80035d4:	d101      	bne.n	80035da <__sflush_r+0xb6>
 80035d6:	602f      	str	r7, [r5, #0]
 80035d8:	e7b1      	b.n	800353e <__sflush_r+0x1a>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e0:	81a3      	strh	r3, [r4, #12]
 80035e2:	e7ad      	b.n	8003540 <__sflush_r+0x1c>
 80035e4:	690f      	ldr	r7, [r1, #16]
 80035e6:	2f00      	cmp	r7, #0
 80035e8:	d0a9      	beq.n	800353e <__sflush_r+0x1a>
 80035ea:	0793      	lsls	r3, r2, #30
 80035ec:	680e      	ldr	r6, [r1, #0]
 80035ee:	bf08      	it	eq
 80035f0:	694b      	ldreq	r3, [r1, #20]
 80035f2:	600f      	str	r7, [r1, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2300      	movne	r3, #0
 80035f8:	eba6 0807 	sub.w	r8, r6, r7
 80035fc:	608b      	str	r3, [r1, #8]
 80035fe:	f1b8 0f00 	cmp.w	r8, #0
 8003602:	dd9c      	ble.n	800353e <__sflush_r+0x1a>
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003608:	4643      	mov	r3, r8
 800360a:	463a      	mov	r2, r7
 800360c:	4628      	mov	r0, r5
 800360e:	47b0      	blx	r6
 8003610:	2800      	cmp	r0, #0
 8003612:	dc06      	bgt.n	8003622 <__sflush_r+0xfe>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003620:	e78e      	b.n	8003540 <__sflush_r+0x1c>
 8003622:	4407      	add	r7, r0
 8003624:	eba8 0800 	sub.w	r8, r8, r0
 8003628:	e7e9      	b.n	80035fe <__sflush_r+0xda>
 800362a:	bf00      	nop
 800362c:	20400001 	.word	0x20400001

08003630 <_fflush_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	4605      	mov	r5, r0
 8003636:	460c      	mov	r4, r1
 8003638:	b913      	cbnz	r3, 8003640 <_fflush_r+0x10>
 800363a:	2500      	movs	r5, #0
 800363c:	4628      	mov	r0, r5
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	b118      	cbz	r0, 800364a <_fflush_r+0x1a>
 8003642:	6983      	ldr	r3, [r0, #24]
 8003644:	b90b      	cbnz	r3, 800364a <_fflush_r+0x1a>
 8003646:	f000 f887 	bl	8003758 <__sinit>
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <_fflush_r+0x6c>)
 800364c:	429c      	cmp	r4, r3
 800364e:	d11b      	bne.n	8003688 <_fflush_r+0x58>
 8003650:	686c      	ldr	r4, [r5, #4]
 8003652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ef      	beq.n	800363a <_fflush_r+0xa>
 800365a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800365c:	07d0      	lsls	r0, r2, #31
 800365e:	d404      	bmi.n	800366a <_fflush_r+0x3a>
 8003660:	0599      	lsls	r1, r3, #22
 8003662:	d402      	bmi.n	800366a <_fflush_r+0x3a>
 8003664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003666:	f000 f93a 	bl	80038de <__retarget_lock_acquire_recursive>
 800366a:	4628      	mov	r0, r5
 800366c:	4621      	mov	r1, r4
 800366e:	f7ff ff59 	bl	8003524 <__sflush_r>
 8003672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003674:	07da      	lsls	r2, r3, #31
 8003676:	4605      	mov	r5, r0
 8003678:	d4e0      	bmi.n	800363c <_fflush_r+0xc>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	059b      	lsls	r3, r3, #22
 800367e:	d4dd      	bmi.n	800363c <_fflush_r+0xc>
 8003680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003682:	f000 f92d 	bl	80038e0 <__retarget_lock_release_recursive>
 8003686:	e7d9      	b.n	800363c <_fflush_r+0xc>
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <_fflush_r+0x70>)
 800368a:	429c      	cmp	r4, r3
 800368c:	d101      	bne.n	8003692 <_fflush_r+0x62>
 800368e:	68ac      	ldr	r4, [r5, #8]
 8003690:	e7df      	b.n	8003652 <_fflush_r+0x22>
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <_fflush_r+0x74>)
 8003694:	429c      	cmp	r4, r3
 8003696:	bf08      	it	eq
 8003698:	68ec      	ldreq	r4, [r5, #12]
 800369a:	e7da      	b.n	8003652 <_fflush_r+0x22>
 800369c:	080045c8 	.word	0x080045c8
 80036a0:	080045e8 	.word	0x080045e8
 80036a4:	080045a8 	.word	0x080045a8

080036a8 <std>:
 80036a8:	2300      	movs	r3, #0
 80036aa:	b510      	push	{r4, lr}
 80036ac:	4604      	mov	r4, r0
 80036ae:	e9c0 3300 	strd	r3, r3, [r0]
 80036b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036b6:	6083      	str	r3, [r0, #8]
 80036b8:	8181      	strh	r1, [r0, #12]
 80036ba:	6643      	str	r3, [r0, #100]	; 0x64
 80036bc:	81c2      	strh	r2, [r0, #14]
 80036be:	6183      	str	r3, [r0, #24]
 80036c0:	4619      	mov	r1, r3
 80036c2:	2208      	movs	r2, #8
 80036c4:	305c      	adds	r0, #92	; 0x5c
 80036c6:	f7ff fcc9 	bl	800305c <memset>
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <std+0x38>)
 80036cc:	6263      	str	r3, [r4, #36]	; 0x24
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <std+0x3c>)
 80036d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <std+0x40>)
 80036d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <std+0x44>)
 80036d8:	6224      	str	r4, [r4, #32]
 80036da:	6323      	str	r3, [r4, #48]	; 0x30
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	bf00      	nop
 80036e0:	08004031 	.word	0x08004031
 80036e4:	08004053 	.word	0x08004053
 80036e8:	0800408b 	.word	0x0800408b
 80036ec:	080040af 	.word	0x080040af

080036f0 <_cleanup_r>:
 80036f0:	4901      	ldr	r1, [pc, #4]	; (80036f8 <_cleanup_r+0x8>)
 80036f2:	f000 b8c1 	b.w	8003878 <_fwalk_reent>
 80036f6:	bf00      	nop
 80036f8:	08003631 	.word	0x08003631

080036fc <__sfmoreglue>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	1e4a      	subs	r2, r1, #1
 8003700:	2568      	movs	r5, #104	; 0x68
 8003702:	4355      	muls	r5, r2
 8003704:	460e      	mov	r6, r1
 8003706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800370a:	f7ff fcff 	bl	800310c <_malloc_r>
 800370e:	4604      	mov	r4, r0
 8003710:	b140      	cbz	r0, 8003724 <__sfmoreglue+0x28>
 8003712:	2100      	movs	r1, #0
 8003714:	e9c0 1600 	strd	r1, r6, [r0]
 8003718:	300c      	adds	r0, #12
 800371a:	60a0      	str	r0, [r4, #8]
 800371c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003720:	f7ff fc9c 	bl	800305c <memset>
 8003724:	4620      	mov	r0, r4
 8003726:	bd70      	pop	{r4, r5, r6, pc}

08003728 <__sfp_lock_acquire>:
 8003728:	4801      	ldr	r0, [pc, #4]	; (8003730 <__sfp_lock_acquire+0x8>)
 800372a:	f000 b8d8 	b.w	80038de <__retarget_lock_acquire_recursive>
 800372e:	bf00      	nop
 8003730:	200001d4 	.word	0x200001d4

08003734 <__sfp_lock_release>:
 8003734:	4801      	ldr	r0, [pc, #4]	; (800373c <__sfp_lock_release+0x8>)
 8003736:	f000 b8d3 	b.w	80038e0 <__retarget_lock_release_recursive>
 800373a:	bf00      	nop
 800373c:	200001d4 	.word	0x200001d4

08003740 <__sinit_lock_acquire>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__sinit_lock_acquire+0x8>)
 8003742:	f000 b8cc 	b.w	80038de <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	200001cf 	.word	0x200001cf

0800374c <__sinit_lock_release>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__sinit_lock_release+0x8>)
 800374e:	f000 b8c7 	b.w	80038e0 <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	200001cf 	.word	0x200001cf

08003758 <__sinit>:
 8003758:	b510      	push	{r4, lr}
 800375a:	4604      	mov	r4, r0
 800375c:	f7ff fff0 	bl	8003740 <__sinit_lock_acquire>
 8003760:	69a3      	ldr	r3, [r4, #24]
 8003762:	b11b      	cbz	r3, 800376c <__sinit+0x14>
 8003764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003768:	f7ff bff0 	b.w	800374c <__sinit_lock_release>
 800376c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003770:	6523      	str	r3, [r4, #80]	; 0x50
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <__sinit+0x68>)
 8003774:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <__sinit+0x6c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	62a2      	str	r2, [r4, #40]	; 0x28
 800377a:	42a3      	cmp	r3, r4
 800377c:	bf04      	itt	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	61a3      	streq	r3, [r4, #24]
 8003782:	4620      	mov	r0, r4
 8003784:	f000 f820 	bl	80037c8 <__sfp>
 8003788:	6060      	str	r0, [r4, #4]
 800378a:	4620      	mov	r0, r4
 800378c:	f000 f81c 	bl	80037c8 <__sfp>
 8003790:	60a0      	str	r0, [r4, #8]
 8003792:	4620      	mov	r0, r4
 8003794:	f000 f818 	bl	80037c8 <__sfp>
 8003798:	2200      	movs	r2, #0
 800379a:	60e0      	str	r0, [r4, #12]
 800379c:	2104      	movs	r1, #4
 800379e:	6860      	ldr	r0, [r4, #4]
 80037a0:	f7ff ff82 	bl	80036a8 <std>
 80037a4:	68a0      	ldr	r0, [r4, #8]
 80037a6:	2201      	movs	r2, #1
 80037a8:	2109      	movs	r1, #9
 80037aa:	f7ff ff7d 	bl	80036a8 <std>
 80037ae:	68e0      	ldr	r0, [r4, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	2112      	movs	r1, #18
 80037b4:	f7ff ff78 	bl	80036a8 <std>
 80037b8:	2301      	movs	r3, #1
 80037ba:	61a3      	str	r3, [r4, #24]
 80037bc:	e7d2      	b.n	8003764 <__sinit+0xc>
 80037be:	bf00      	nop
 80037c0:	080044f0 	.word	0x080044f0
 80037c4:	080036f1 	.word	0x080036f1

080037c8 <__sfp>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	4607      	mov	r7, r0
 80037cc:	f7ff ffac 	bl	8003728 <__sfp_lock_acquire>
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <__sfp+0x84>)
 80037d2:	681e      	ldr	r6, [r3, #0]
 80037d4:	69b3      	ldr	r3, [r6, #24]
 80037d6:	b913      	cbnz	r3, 80037de <__sfp+0x16>
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff ffbd 	bl	8003758 <__sinit>
 80037de:	3648      	adds	r6, #72	; 0x48
 80037e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	d503      	bpl.n	80037f0 <__sfp+0x28>
 80037e8:	6833      	ldr	r3, [r6, #0]
 80037ea:	b30b      	cbz	r3, 8003830 <__sfp+0x68>
 80037ec:	6836      	ldr	r6, [r6, #0]
 80037ee:	e7f7      	b.n	80037e0 <__sfp+0x18>
 80037f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037f4:	b9d5      	cbnz	r5, 800382c <__sfp+0x64>
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <__sfp+0x88>)
 80037f8:	60e3      	str	r3, [r4, #12]
 80037fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037fe:	6665      	str	r5, [r4, #100]	; 0x64
 8003800:	f000 f86c 	bl	80038dc <__retarget_lock_init_recursive>
 8003804:	f7ff ff96 	bl	8003734 <__sfp_lock_release>
 8003808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800380c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003810:	6025      	str	r5, [r4, #0]
 8003812:	61a5      	str	r5, [r4, #24]
 8003814:	2208      	movs	r2, #8
 8003816:	4629      	mov	r1, r5
 8003818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800381c:	f7ff fc1e 	bl	800305c <memset>
 8003820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003828:	4620      	mov	r0, r4
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	3468      	adds	r4, #104	; 0x68
 800382e:	e7d9      	b.n	80037e4 <__sfp+0x1c>
 8003830:	2104      	movs	r1, #4
 8003832:	4638      	mov	r0, r7
 8003834:	f7ff ff62 	bl	80036fc <__sfmoreglue>
 8003838:	4604      	mov	r4, r0
 800383a:	6030      	str	r0, [r6, #0]
 800383c:	2800      	cmp	r0, #0
 800383e:	d1d5      	bne.n	80037ec <__sfp+0x24>
 8003840:	f7ff ff78 	bl	8003734 <__sfp_lock_release>
 8003844:	230c      	movs	r3, #12
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	e7ee      	b.n	8003828 <__sfp+0x60>
 800384a:	bf00      	nop
 800384c:	080044f0 	.word	0x080044f0
 8003850:	ffff0001 	.word	0xffff0001

08003854 <fiprintf>:
 8003854:	b40e      	push	{r1, r2, r3}
 8003856:	b503      	push	{r0, r1, lr}
 8003858:	4601      	mov	r1, r0
 800385a:	ab03      	add	r3, sp, #12
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <fiprintf+0x20>)
 800385e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	f000 f8d7 	bl	8003a18 <_vfiprintf_r>
 800386a:	b002      	add	sp, #8
 800386c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003870:	b003      	add	sp, #12
 8003872:	4770      	bx	lr
 8003874:	2000002c 	.word	0x2000002c

08003878 <_fwalk_reent>:
 8003878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800387c:	4606      	mov	r6, r0
 800387e:	4688      	mov	r8, r1
 8003880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003884:	2700      	movs	r7, #0
 8003886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800388a:	f1b9 0901 	subs.w	r9, r9, #1
 800388e:	d505      	bpl.n	800389c <_fwalk_reent+0x24>
 8003890:	6824      	ldr	r4, [r4, #0]
 8003892:	2c00      	cmp	r4, #0
 8003894:	d1f7      	bne.n	8003886 <_fwalk_reent+0xe>
 8003896:	4638      	mov	r0, r7
 8003898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800389c:	89ab      	ldrh	r3, [r5, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d907      	bls.n	80038b2 <_fwalk_reent+0x3a>
 80038a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038a6:	3301      	adds	r3, #1
 80038a8:	d003      	beq.n	80038b2 <_fwalk_reent+0x3a>
 80038aa:	4629      	mov	r1, r5
 80038ac:	4630      	mov	r0, r6
 80038ae:	47c0      	blx	r8
 80038b0:	4307      	orrs	r7, r0
 80038b2:	3568      	adds	r5, #104	; 0x68
 80038b4:	e7e9      	b.n	800388a <_fwalk_reent+0x12>
	...

080038b8 <_gettimeofday_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d07      	ldr	r5, [pc, #28]	; (80038d8 <_gettimeofday_r+0x20>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	f000 fd59 	bl	800437c <_gettimeofday>
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	d102      	bne.n	80038d4 <_gettimeofday_r+0x1c>
 80038ce:	682b      	ldr	r3, [r5, #0]
 80038d0:	b103      	cbz	r3, 80038d4 <_gettimeofday_r+0x1c>
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
 80038d6:	bf00      	nop
 80038d8:	200001d8 	.word	0x200001d8

080038dc <__retarget_lock_init_recursive>:
 80038dc:	4770      	bx	lr

080038de <__retarget_lock_acquire_recursive>:
 80038de:	4770      	bx	lr

080038e0 <__retarget_lock_release_recursive>:
 80038e0:	4770      	bx	lr

080038e2 <__swhatbuf_r>:
 80038e2:	b570      	push	{r4, r5, r6, lr}
 80038e4:	460e      	mov	r6, r1
 80038e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ea:	2900      	cmp	r1, #0
 80038ec:	b096      	sub	sp, #88	; 0x58
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	da07      	bge.n	8003904 <__swhatbuf_r+0x22>
 80038f4:	2300      	movs	r3, #0
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	89b3      	ldrh	r3, [r6, #12]
 80038fa:	061a      	lsls	r2, r3, #24
 80038fc:	d410      	bmi.n	8003920 <__swhatbuf_r+0x3e>
 80038fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003902:	e00e      	b.n	8003922 <__swhatbuf_r+0x40>
 8003904:	466a      	mov	r2, sp
 8003906:	f000 fcaf 	bl	8004268 <_fstat_r>
 800390a:	2800      	cmp	r0, #0
 800390c:	dbf2      	blt.n	80038f4 <__swhatbuf_r+0x12>
 800390e:	9a01      	ldr	r2, [sp, #4]
 8003910:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003914:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003918:	425a      	negs	r2, r3
 800391a:	415a      	adcs	r2, r3
 800391c:	602a      	str	r2, [r5, #0]
 800391e:	e7ee      	b.n	80038fe <__swhatbuf_r+0x1c>
 8003920:	2340      	movs	r3, #64	; 0x40
 8003922:	2000      	movs	r0, #0
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	b016      	add	sp, #88	; 0x58
 8003928:	bd70      	pop	{r4, r5, r6, pc}
	...

0800392c <__smakebuf_r>:
 800392c:	898b      	ldrh	r3, [r1, #12]
 800392e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003930:	079d      	lsls	r5, r3, #30
 8003932:	4606      	mov	r6, r0
 8003934:	460c      	mov	r4, r1
 8003936:	d507      	bpl.n	8003948 <__smakebuf_r+0x1c>
 8003938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	2301      	movs	r3, #1
 8003942:	6163      	str	r3, [r4, #20]
 8003944:	b002      	add	sp, #8
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	ab01      	add	r3, sp, #4
 800394a:	466a      	mov	r2, sp
 800394c:	f7ff ffc9 	bl	80038e2 <__swhatbuf_r>
 8003950:	9900      	ldr	r1, [sp, #0]
 8003952:	4605      	mov	r5, r0
 8003954:	4630      	mov	r0, r6
 8003956:	f7ff fbd9 	bl	800310c <_malloc_r>
 800395a:	b948      	cbnz	r0, 8003970 <__smakebuf_r+0x44>
 800395c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003960:	059a      	lsls	r2, r3, #22
 8003962:	d4ef      	bmi.n	8003944 <__smakebuf_r+0x18>
 8003964:	f023 0303 	bic.w	r3, r3, #3
 8003968:	f043 0302 	orr.w	r3, r3, #2
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	e7e3      	b.n	8003938 <__smakebuf_r+0xc>
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <__smakebuf_r+0x7c>)
 8003972:	62b3      	str	r3, [r6, #40]	; 0x28
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	6020      	str	r0, [r4, #0]
 8003978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	9b00      	ldr	r3, [sp, #0]
 8003980:	6163      	str	r3, [r4, #20]
 8003982:	9b01      	ldr	r3, [sp, #4]
 8003984:	6120      	str	r0, [r4, #16]
 8003986:	b15b      	cbz	r3, 80039a0 <__smakebuf_r+0x74>
 8003988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800398c:	4630      	mov	r0, r6
 800398e:	f000 fc7d 	bl	800428c <_isatty_r>
 8003992:	b128      	cbz	r0, 80039a0 <__smakebuf_r+0x74>
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	89a0      	ldrh	r0, [r4, #12]
 80039a2:	4305      	orrs	r5, r0
 80039a4:	81a5      	strh	r5, [r4, #12]
 80039a6:	e7cd      	b.n	8003944 <__smakebuf_r+0x18>
 80039a8:	080036f1 	.word	0x080036f1

080039ac <__malloc_lock>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__malloc_lock+0x8>)
 80039ae:	f7ff bf96 	b.w	80038de <__retarget_lock_acquire_recursive>
 80039b2:	bf00      	nop
 80039b4:	200001d0 	.word	0x200001d0

080039b8 <__malloc_unlock>:
 80039b8:	4801      	ldr	r0, [pc, #4]	; (80039c0 <__malloc_unlock+0x8>)
 80039ba:	f7ff bf91 	b.w	80038e0 <__retarget_lock_release_recursive>
 80039be:	bf00      	nop
 80039c0:	200001d0 	.word	0x200001d0

080039c4 <__sfputc_r>:
 80039c4:	6893      	ldr	r3, [r2, #8]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	b410      	push	{r4}
 80039cc:	6093      	str	r3, [r2, #8]
 80039ce:	da08      	bge.n	80039e2 <__sfputc_r+0x1e>
 80039d0:	6994      	ldr	r4, [r2, #24]
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	db01      	blt.n	80039da <__sfputc_r+0x16>
 80039d6:	290a      	cmp	r1, #10
 80039d8:	d103      	bne.n	80039e2 <__sfputc_r+0x1e>
 80039da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039de:	f000 bb6b 	b.w	80040b8 <__swbuf_r>
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	1c58      	adds	r0, r3, #1
 80039e6:	6010      	str	r0, [r2, #0]
 80039e8:	7019      	strb	r1, [r3, #0]
 80039ea:	4608      	mov	r0, r1
 80039ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <__sfputs_r>:
 80039f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f4:	4606      	mov	r6, r0
 80039f6:	460f      	mov	r7, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	18d5      	adds	r5, r2, r3
 80039fc:	42ac      	cmp	r4, r5
 80039fe:	d101      	bne.n	8003a04 <__sfputs_r+0x12>
 8003a00:	2000      	movs	r0, #0
 8003a02:	e007      	b.n	8003a14 <__sfputs_r+0x22>
 8003a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a08:	463a      	mov	r2, r7
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7ff ffda 	bl	80039c4 <__sfputc_r>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d1f3      	bne.n	80039fc <__sfputs_r+0xa>
 8003a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a18 <_vfiprintf_r>:
 8003a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	b09d      	sub	sp, #116	; 0x74
 8003a20:	4614      	mov	r4, r2
 8003a22:	4698      	mov	r8, r3
 8003a24:	4606      	mov	r6, r0
 8003a26:	b118      	cbz	r0, 8003a30 <_vfiprintf_r+0x18>
 8003a28:	6983      	ldr	r3, [r0, #24]
 8003a2a:	b90b      	cbnz	r3, 8003a30 <_vfiprintf_r+0x18>
 8003a2c:	f7ff fe94 	bl	8003758 <__sinit>
 8003a30:	4b89      	ldr	r3, [pc, #548]	; (8003c58 <_vfiprintf_r+0x240>)
 8003a32:	429d      	cmp	r5, r3
 8003a34:	d11b      	bne.n	8003a6e <_vfiprintf_r+0x56>
 8003a36:	6875      	ldr	r5, [r6, #4]
 8003a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a3a:	07d9      	lsls	r1, r3, #31
 8003a3c:	d405      	bmi.n	8003a4a <_vfiprintf_r+0x32>
 8003a3e:	89ab      	ldrh	r3, [r5, #12]
 8003a40:	059a      	lsls	r2, r3, #22
 8003a42:	d402      	bmi.n	8003a4a <_vfiprintf_r+0x32>
 8003a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a46:	f7ff ff4a 	bl	80038de <__retarget_lock_acquire_recursive>
 8003a4a:	89ab      	ldrh	r3, [r5, #12]
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	d501      	bpl.n	8003a54 <_vfiprintf_r+0x3c>
 8003a50:	692b      	ldr	r3, [r5, #16]
 8003a52:	b9eb      	cbnz	r3, 8003a90 <_vfiprintf_r+0x78>
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 fb80 	bl	800415c <__swsetup_r>
 8003a5c:	b1c0      	cbz	r0, 8003a90 <_vfiprintf_r+0x78>
 8003a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a60:	07dc      	lsls	r4, r3, #31
 8003a62:	d50e      	bpl.n	8003a82 <_vfiprintf_r+0x6a>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a68:	b01d      	add	sp, #116	; 0x74
 8003a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6e:	4b7b      	ldr	r3, [pc, #492]	; (8003c5c <_vfiprintf_r+0x244>)
 8003a70:	429d      	cmp	r5, r3
 8003a72:	d101      	bne.n	8003a78 <_vfiprintf_r+0x60>
 8003a74:	68b5      	ldr	r5, [r6, #8]
 8003a76:	e7df      	b.n	8003a38 <_vfiprintf_r+0x20>
 8003a78:	4b79      	ldr	r3, [pc, #484]	; (8003c60 <_vfiprintf_r+0x248>)
 8003a7a:	429d      	cmp	r5, r3
 8003a7c:	bf08      	it	eq
 8003a7e:	68f5      	ldreq	r5, [r6, #12]
 8003a80:	e7da      	b.n	8003a38 <_vfiprintf_r+0x20>
 8003a82:	89ab      	ldrh	r3, [r5, #12]
 8003a84:	0598      	lsls	r0, r3, #22
 8003a86:	d4ed      	bmi.n	8003a64 <_vfiprintf_r+0x4c>
 8003a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a8a:	f7ff ff29 	bl	80038e0 <__retarget_lock_release_recursive>
 8003a8e:	e7e9      	b.n	8003a64 <_vfiprintf_r+0x4c>
 8003a90:	2300      	movs	r3, #0
 8003a92:	9309      	str	r3, [sp, #36]	; 0x24
 8003a94:	2320      	movs	r3, #32
 8003a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9e:	2330      	movs	r3, #48	; 0x30
 8003aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c64 <_vfiprintf_r+0x24c>
 8003aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa8:	f04f 0901 	mov.w	r9, #1
 8003aac:	4623      	mov	r3, r4
 8003aae:	469a      	mov	sl, r3
 8003ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ab4:	b10a      	cbz	r2, 8003aba <_vfiprintf_r+0xa2>
 8003ab6:	2a25      	cmp	r2, #37	; 0x25
 8003ab8:	d1f9      	bne.n	8003aae <_vfiprintf_r+0x96>
 8003aba:	ebba 0b04 	subs.w	fp, sl, r4
 8003abe:	d00b      	beq.n	8003ad8 <_vfiprintf_r+0xc0>
 8003ac0:	465b      	mov	r3, fp
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff ff93 	bl	80039f2 <__sfputs_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	f000 80aa 	beq.w	8003c26 <_vfiprintf_r+0x20e>
 8003ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ad4:	445a      	add	r2, fp
 8003ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a2 	beq.w	8003c26 <_vfiprintf_r+0x20e>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aec:	f10a 0a01 	add.w	sl, sl, #1
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	9307      	str	r3, [sp, #28]
 8003af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af8:	931a      	str	r3, [sp, #104]	; 0x68
 8003afa:	4654      	mov	r4, sl
 8003afc:	2205      	movs	r2, #5
 8003afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b02:	4858      	ldr	r0, [pc, #352]	; (8003c64 <_vfiprintf_r+0x24c>)
 8003b04:	f7fc fb6c 	bl	80001e0 <memchr>
 8003b08:	9a04      	ldr	r2, [sp, #16]
 8003b0a:	b9d8      	cbnz	r0, 8003b44 <_vfiprintf_r+0x12c>
 8003b0c:	06d1      	lsls	r1, r2, #27
 8003b0e:	bf44      	itt	mi
 8003b10:	2320      	movmi	r3, #32
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b16:	0713      	lsls	r3, r2, #28
 8003b18:	bf44      	itt	mi
 8003b1a:	232b      	movmi	r3, #43	; 0x2b
 8003b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b20:	f89a 3000 	ldrb.w	r3, [sl]
 8003b24:	2b2a      	cmp	r3, #42	; 0x2a
 8003b26:	d015      	beq.n	8003b54 <_vfiprintf_r+0x13c>
 8003b28:	9a07      	ldr	r2, [sp, #28]
 8003b2a:	4654      	mov	r4, sl
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f04f 0c0a 	mov.w	ip, #10
 8003b32:	4621      	mov	r1, r4
 8003b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b38:	3b30      	subs	r3, #48	; 0x30
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d94e      	bls.n	8003bdc <_vfiprintf_r+0x1c4>
 8003b3e:	b1b0      	cbz	r0, 8003b6e <_vfiprintf_r+0x156>
 8003b40:	9207      	str	r2, [sp, #28]
 8003b42:	e014      	b.n	8003b6e <_vfiprintf_r+0x156>
 8003b44:	eba0 0308 	sub.w	r3, r0, r8
 8003b48:	fa09 f303 	lsl.w	r3, r9, r3
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	9304      	str	r3, [sp, #16]
 8003b50:	46a2      	mov	sl, r4
 8003b52:	e7d2      	b.n	8003afa <_vfiprintf_r+0xe2>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	1d19      	adds	r1, r3, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	9103      	str	r1, [sp, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bfbb      	ittet	lt
 8003b60:	425b      	neglt	r3, r3
 8003b62:	f042 0202 	orrlt.w	r2, r2, #2
 8003b66:	9307      	strge	r3, [sp, #28]
 8003b68:	9307      	strlt	r3, [sp, #28]
 8003b6a:	bfb8      	it	lt
 8003b6c:	9204      	strlt	r2, [sp, #16]
 8003b6e:	7823      	ldrb	r3, [r4, #0]
 8003b70:	2b2e      	cmp	r3, #46	; 0x2e
 8003b72:	d10c      	bne.n	8003b8e <_vfiprintf_r+0x176>
 8003b74:	7863      	ldrb	r3, [r4, #1]
 8003b76:	2b2a      	cmp	r3, #42	; 0x2a
 8003b78:	d135      	bne.n	8003be6 <_vfiprintf_r+0x1ce>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	1d1a      	adds	r2, r3, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	9203      	str	r2, [sp, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfb8      	it	lt
 8003b86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b8a:	3402      	adds	r4, #2
 8003b8c:	9305      	str	r3, [sp, #20]
 8003b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c74 <_vfiprintf_r+0x25c>
 8003b92:	7821      	ldrb	r1, [r4, #0]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4650      	mov	r0, sl
 8003b98:	f7fc fb22 	bl	80001e0 <memchr>
 8003b9c:	b140      	cbz	r0, 8003bb0 <_vfiprintf_r+0x198>
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	eba0 000a 	sub.w	r0, r0, sl
 8003ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ba8:	9b04      	ldr	r3, [sp, #16]
 8003baa:	4303      	orrs	r3, r0
 8003bac:	3401      	adds	r4, #1
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb4:	482c      	ldr	r0, [pc, #176]	; (8003c68 <_vfiprintf_r+0x250>)
 8003bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bba:	2206      	movs	r2, #6
 8003bbc:	f7fc fb10 	bl	80001e0 <memchr>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d03f      	beq.n	8003c44 <_vfiprintf_r+0x22c>
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <_vfiprintf_r+0x254>)
 8003bc6:	bb1b      	cbnz	r3, 8003c10 <_vfiprintf_r+0x1f8>
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	3307      	adds	r3, #7
 8003bcc:	f023 0307 	bic.w	r3, r3, #7
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	9303      	str	r3, [sp, #12]
 8003bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd6:	443b      	add	r3, r7
 8003bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bda:	e767      	b.n	8003aac <_vfiprintf_r+0x94>
 8003bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be0:	460c      	mov	r4, r1
 8003be2:	2001      	movs	r0, #1
 8003be4:	e7a5      	b.n	8003b32 <_vfiprintf_r+0x11a>
 8003be6:	2300      	movs	r3, #0
 8003be8:	3401      	adds	r4, #1
 8003bea:	9305      	str	r3, [sp, #20]
 8003bec:	4619      	mov	r1, r3
 8003bee:	f04f 0c0a 	mov.w	ip, #10
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf8:	3a30      	subs	r2, #48	; 0x30
 8003bfa:	2a09      	cmp	r2, #9
 8003bfc:	d903      	bls.n	8003c06 <_vfiprintf_r+0x1ee>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0c5      	beq.n	8003b8e <_vfiprintf_r+0x176>
 8003c02:	9105      	str	r1, [sp, #20]
 8003c04:	e7c3      	b.n	8003b8e <_vfiprintf_r+0x176>
 8003c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e7f0      	b.n	8003bf2 <_vfiprintf_r+0x1da>
 8003c10:	ab03      	add	r3, sp, #12
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	462a      	mov	r2, r5
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <_vfiprintf_r+0x258>)
 8003c18:	a904      	add	r1, sp, #16
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f3af 8000 	nop.w
 8003c20:	4607      	mov	r7, r0
 8003c22:	1c78      	adds	r0, r7, #1
 8003c24:	d1d6      	bne.n	8003bd4 <_vfiprintf_r+0x1bc>
 8003c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c28:	07d9      	lsls	r1, r3, #31
 8003c2a:	d405      	bmi.n	8003c38 <_vfiprintf_r+0x220>
 8003c2c:	89ab      	ldrh	r3, [r5, #12]
 8003c2e:	059a      	lsls	r2, r3, #22
 8003c30:	d402      	bmi.n	8003c38 <_vfiprintf_r+0x220>
 8003c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c34:	f7ff fe54 	bl	80038e0 <__retarget_lock_release_recursive>
 8003c38:	89ab      	ldrh	r3, [r5, #12]
 8003c3a:	065b      	lsls	r3, r3, #25
 8003c3c:	f53f af12 	bmi.w	8003a64 <_vfiprintf_r+0x4c>
 8003c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c42:	e711      	b.n	8003a68 <_vfiprintf_r+0x50>
 8003c44:	ab03      	add	r3, sp, #12
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <_vfiprintf_r+0x258>)
 8003c4c:	a904      	add	r1, sp, #16
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f000 f880 	bl	8003d54 <_printf_i>
 8003c54:	e7e4      	b.n	8003c20 <_vfiprintf_r+0x208>
 8003c56:	bf00      	nop
 8003c58:	080045c8 	.word	0x080045c8
 8003c5c:	080045e8 	.word	0x080045e8
 8003c60:	080045a8 	.word	0x080045a8
 8003c64:	08004608 	.word	0x08004608
 8003c68:	08004612 	.word	0x08004612
 8003c6c:	00000000 	.word	0x00000000
 8003c70:	080039f3 	.word	0x080039f3
 8003c74:	0800460e 	.word	0x0800460e

08003c78 <_printf_common>:
 8003c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	4699      	mov	r9, r3
 8003c80:	688a      	ldr	r2, [r1, #8]
 8003c82:	690b      	ldr	r3, [r1, #16]
 8003c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bfb8      	it	lt
 8003c8c:	4613      	movlt	r3, r2
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c94:	4607      	mov	r7, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	b10a      	cbz	r2, 8003c9e <_printf_common+0x26>
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	6033      	str	r3, [r6, #0]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	0699      	lsls	r1, r3, #26
 8003ca2:	bf42      	ittt	mi
 8003ca4:	6833      	ldrmi	r3, [r6, #0]
 8003ca6:	3302      	addmi	r3, #2
 8003ca8:	6033      	strmi	r3, [r6, #0]
 8003caa:	6825      	ldr	r5, [r4, #0]
 8003cac:	f015 0506 	ands.w	r5, r5, #6
 8003cb0:	d106      	bne.n	8003cc0 <_printf_common+0x48>
 8003cb2:	f104 0a19 	add.w	sl, r4, #25
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	6832      	ldr	r2, [r6, #0]
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	42ab      	cmp	r3, r5
 8003cbe:	dc26      	bgt.n	8003d0e <_printf_common+0x96>
 8003cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cc4:	1e13      	subs	r3, r2, #0
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	0692      	lsls	r2, r2, #26
 8003cce:	d42b      	bmi.n	8003d28 <_printf_common+0xb0>
 8003cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	47c0      	blx	r8
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d01e      	beq.n	8003d1c <_printf_common+0xa4>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	68e5      	ldr	r5, [r4, #12]
 8003ce2:	6832      	ldr	r2, [r6, #0]
 8003ce4:	f003 0306 	and.w	r3, r3, #6
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	bf08      	it	eq
 8003cec:	1aad      	subeq	r5, r5, r2
 8003cee:	68a3      	ldr	r3, [r4, #8]
 8003cf0:	6922      	ldr	r2, [r4, #16]
 8003cf2:	bf0c      	ite	eq
 8003cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf8:	2500      	movne	r5, #0
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	bfc4      	itt	gt
 8003cfe:	1a9b      	subgt	r3, r3, r2
 8003d00:	18ed      	addgt	r5, r5, r3
 8003d02:	2600      	movs	r6, #0
 8003d04:	341a      	adds	r4, #26
 8003d06:	42b5      	cmp	r5, r6
 8003d08:	d11a      	bne.n	8003d40 <_printf_common+0xc8>
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	e008      	b.n	8003d20 <_printf_common+0xa8>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4652      	mov	r2, sl
 8003d12:	4649      	mov	r1, r9
 8003d14:	4638      	mov	r0, r7
 8003d16:	47c0      	blx	r8
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d103      	bne.n	8003d24 <_printf_common+0xac>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d24:	3501      	adds	r5, #1
 8003d26:	e7c6      	b.n	8003cb6 <_printf_common+0x3e>
 8003d28:	18e1      	adds	r1, r4, r3
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	2030      	movs	r0, #48	; 0x30
 8003d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d32:	4422      	add	r2, r4
 8003d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	e7c7      	b.n	8003cd0 <_printf_common+0x58>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4622      	mov	r2, r4
 8003d44:	4649      	mov	r1, r9
 8003d46:	4638      	mov	r0, r7
 8003d48:	47c0      	blx	r8
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d0e6      	beq.n	8003d1c <_printf_common+0xa4>
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7d9      	b.n	8003d06 <_printf_common+0x8e>
	...

08003d54 <_printf_i>:
 8003d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	460c      	mov	r4, r1
 8003d5a:	4691      	mov	r9, r2
 8003d5c:	7e27      	ldrb	r7, [r4, #24]
 8003d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d60:	2f78      	cmp	r7, #120	; 0x78
 8003d62:	4680      	mov	r8, r0
 8003d64:	469a      	mov	sl, r3
 8003d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d6a:	d807      	bhi.n	8003d7c <_printf_i+0x28>
 8003d6c:	2f62      	cmp	r7, #98	; 0x62
 8003d6e:	d80a      	bhi.n	8003d86 <_printf_i+0x32>
 8003d70:	2f00      	cmp	r7, #0
 8003d72:	f000 80d8 	beq.w	8003f26 <_printf_i+0x1d2>
 8003d76:	2f58      	cmp	r7, #88	; 0x58
 8003d78:	f000 80a3 	beq.w	8003ec2 <_printf_i+0x16e>
 8003d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d84:	e03a      	b.n	8003dfc <_printf_i+0xa8>
 8003d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d8a:	2b15      	cmp	r3, #21
 8003d8c:	d8f6      	bhi.n	8003d7c <_printf_i+0x28>
 8003d8e:	a001      	add	r0, pc, #4	; (adr r0, 8003d94 <_printf_i+0x40>)
 8003d90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d94:	08003ded 	.word	0x08003ded
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003d7d 	.word	0x08003d7d
 8003da0:	08003d7d 	.word	0x08003d7d
 8003da4:	08003d7d 	.word	0x08003d7d
 8003da8:	08003d7d 	.word	0x08003d7d
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003d7d 	.word	0x08003d7d
 8003db4:	08003d7d 	.word	0x08003d7d
 8003db8:	08003d7d 	.word	0x08003d7d
 8003dbc:	08003d7d 	.word	0x08003d7d
 8003dc0:	08003f0d 	.word	0x08003f0d
 8003dc4:	08003e31 	.word	0x08003e31
 8003dc8:	08003eef 	.word	0x08003eef
 8003dcc:	08003d7d 	.word	0x08003d7d
 8003dd0:	08003d7d 	.word	0x08003d7d
 8003dd4:	08003f2f 	.word	0x08003f2f
 8003dd8:	08003d7d 	.word	0x08003d7d
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003d7d 	.word	0x08003d7d
 8003de4:	08003d7d 	.word	0x08003d7d
 8003de8:	08003ef7 	.word	0x08003ef7
 8003dec:	680b      	ldr	r3, [r1, #0]
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	600a      	str	r2, [r1, #0]
 8003df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0a3      	b.n	8003f48 <_printf_i+0x1f4>
 8003e00:	6825      	ldr	r5, [r4, #0]
 8003e02:	6808      	ldr	r0, [r1, #0]
 8003e04:	062e      	lsls	r6, r5, #24
 8003e06:	f100 0304 	add.w	r3, r0, #4
 8003e0a:	d50a      	bpl.n	8003e22 <_printf_i+0xce>
 8003e0c:	6805      	ldr	r5, [r0, #0]
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	2d00      	cmp	r5, #0
 8003e12:	da03      	bge.n	8003e1c <_printf_i+0xc8>
 8003e14:	232d      	movs	r3, #45	; 0x2d
 8003e16:	426d      	negs	r5, r5
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1c:	485e      	ldr	r0, [pc, #376]	; (8003f98 <_printf_i+0x244>)
 8003e1e:	230a      	movs	r3, #10
 8003e20:	e019      	b.n	8003e56 <_printf_i+0x102>
 8003e22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e26:	6805      	ldr	r5, [r0, #0]
 8003e28:	600b      	str	r3, [r1, #0]
 8003e2a:	bf18      	it	ne
 8003e2c:	b22d      	sxthne	r5, r5
 8003e2e:	e7ef      	b.n	8003e10 <_printf_i+0xbc>
 8003e30:	680b      	ldr	r3, [r1, #0]
 8003e32:	6825      	ldr	r5, [r4, #0]
 8003e34:	1d18      	adds	r0, r3, #4
 8003e36:	6008      	str	r0, [r1, #0]
 8003e38:	0628      	lsls	r0, r5, #24
 8003e3a:	d501      	bpl.n	8003e40 <_printf_i+0xec>
 8003e3c:	681d      	ldr	r5, [r3, #0]
 8003e3e:	e002      	b.n	8003e46 <_printf_i+0xf2>
 8003e40:	0669      	lsls	r1, r5, #25
 8003e42:	d5fb      	bpl.n	8003e3c <_printf_i+0xe8>
 8003e44:	881d      	ldrh	r5, [r3, #0]
 8003e46:	4854      	ldr	r0, [pc, #336]	; (8003f98 <_printf_i+0x244>)
 8003e48:	2f6f      	cmp	r7, #111	; 0x6f
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2308      	moveq	r3, #8
 8003e4e:	230a      	movne	r3, #10
 8003e50:	2100      	movs	r1, #0
 8003e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e56:	6866      	ldr	r6, [r4, #4]
 8003e58:	60a6      	str	r6, [r4, #8]
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	bfa2      	ittt	ge
 8003e5e:	6821      	ldrge	r1, [r4, #0]
 8003e60:	f021 0104 	bicge.w	r1, r1, #4
 8003e64:	6021      	strge	r1, [r4, #0]
 8003e66:	b90d      	cbnz	r5, 8003e6c <_printf_i+0x118>
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	d04d      	beq.n	8003f08 <_printf_i+0x1b4>
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e72:	fb03 5711 	mls	r7, r3, r1, r5
 8003e76:	5dc7      	ldrb	r7, [r0, r7]
 8003e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e7c:	462f      	mov	r7, r5
 8003e7e:	42bb      	cmp	r3, r7
 8003e80:	460d      	mov	r5, r1
 8003e82:	d9f4      	bls.n	8003e6e <_printf_i+0x11a>
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d10b      	bne.n	8003ea0 <_printf_i+0x14c>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	07df      	lsls	r7, r3, #31
 8003e8c:	d508      	bpl.n	8003ea0 <_printf_i+0x14c>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	6861      	ldr	r1, [r4, #4]
 8003e92:	4299      	cmp	r1, r3
 8003e94:	bfde      	ittt	le
 8003e96:	2330      	movle	r3, #48	; 0x30
 8003e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003ea0:	1b92      	subs	r2, r2, r6
 8003ea2:	6122      	str	r2, [r4, #16]
 8003ea4:	f8cd a000 	str.w	sl, [sp]
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	aa03      	add	r2, sp, #12
 8003eac:	4621      	mov	r1, r4
 8003eae:	4640      	mov	r0, r8
 8003eb0:	f7ff fee2 	bl	8003c78 <_printf_common>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d14c      	bne.n	8003f52 <_printf_i+0x1fe>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	b004      	add	sp, #16
 8003ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec2:	4835      	ldr	r0, [pc, #212]	; (8003f98 <_printf_i+0x244>)
 8003ec4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	680e      	ldr	r6, [r1, #0]
 8003ecc:	061f      	lsls	r7, r3, #24
 8003ece:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ed2:	600e      	str	r6, [r1, #0]
 8003ed4:	d514      	bpl.n	8003f00 <_printf_i+0x1ac>
 8003ed6:	07d9      	lsls	r1, r3, #31
 8003ed8:	bf44      	itt	mi
 8003eda:	f043 0320 	orrmi.w	r3, r3, #32
 8003ede:	6023      	strmi	r3, [r4, #0]
 8003ee0:	b91d      	cbnz	r5, 8003eea <_printf_i+0x196>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	f023 0320 	bic.w	r3, r3, #32
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	2310      	movs	r3, #16
 8003eec:	e7b0      	b.n	8003e50 <_printf_i+0xfc>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f043 0320 	orr.w	r3, r3, #32
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	2378      	movs	r3, #120	; 0x78
 8003ef8:	4828      	ldr	r0, [pc, #160]	; (8003f9c <_printf_i+0x248>)
 8003efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003efe:	e7e3      	b.n	8003ec8 <_printf_i+0x174>
 8003f00:	065e      	lsls	r6, r3, #25
 8003f02:	bf48      	it	mi
 8003f04:	b2ad      	uxthmi	r5, r5
 8003f06:	e7e6      	b.n	8003ed6 <_printf_i+0x182>
 8003f08:	4616      	mov	r6, r2
 8003f0a:	e7bb      	b.n	8003e84 <_printf_i+0x130>
 8003f0c:	680b      	ldr	r3, [r1, #0]
 8003f0e:	6826      	ldr	r6, [r4, #0]
 8003f10:	6960      	ldr	r0, [r4, #20]
 8003f12:	1d1d      	adds	r5, r3, #4
 8003f14:	600d      	str	r5, [r1, #0]
 8003f16:	0635      	lsls	r5, r6, #24
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	d501      	bpl.n	8003f20 <_printf_i+0x1cc>
 8003f1c:	6018      	str	r0, [r3, #0]
 8003f1e:	e002      	b.n	8003f26 <_printf_i+0x1d2>
 8003f20:	0671      	lsls	r1, r6, #25
 8003f22:	d5fb      	bpl.n	8003f1c <_printf_i+0x1c8>
 8003f24:	8018      	strh	r0, [r3, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	4616      	mov	r6, r2
 8003f2c:	e7ba      	b.n	8003ea4 <_printf_i+0x150>
 8003f2e:	680b      	ldr	r3, [r1, #0]
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	600a      	str	r2, [r1, #0]
 8003f34:	681e      	ldr	r6, [r3, #0]
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7fc f950 	bl	80001e0 <memchr>
 8003f40:	b108      	cbz	r0, 8003f46 <_printf_i+0x1f2>
 8003f42:	1b80      	subs	r0, r0, r6
 8003f44:	6060      	str	r0, [r4, #4]
 8003f46:	6863      	ldr	r3, [r4, #4]
 8003f48:	6123      	str	r3, [r4, #16]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f50:	e7a8      	b.n	8003ea4 <_printf_i+0x150>
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	4632      	mov	r2, r6
 8003f56:	4649      	mov	r1, r9
 8003f58:	4640      	mov	r0, r8
 8003f5a:	47d0      	blx	sl
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d0ab      	beq.n	8003eb8 <_printf_i+0x164>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	079b      	lsls	r3, r3, #30
 8003f64:	d413      	bmi.n	8003f8e <_printf_i+0x23a>
 8003f66:	68e0      	ldr	r0, [r4, #12]
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	4298      	cmp	r0, r3
 8003f6c:	bfb8      	it	lt
 8003f6e:	4618      	movlt	r0, r3
 8003f70:	e7a4      	b.n	8003ebc <_printf_i+0x168>
 8003f72:	2301      	movs	r3, #1
 8003f74:	4632      	mov	r2, r6
 8003f76:	4649      	mov	r1, r9
 8003f78:	4640      	mov	r0, r8
 8003f7a:	47d0      	blx	sl
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d09b      	beq.n	8003eb8 <_printf_i+0x164>
 8003f80:	3501      	adds	r5, #1
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	9903      	ldr	r1, [sp, #12]
 8003f86:	1a5b      	subs	r3, r3, r1
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	dcf2      	bgt.n	8003f72 <_printf_i+0x21e>
 8003f8c:	e7eb      	b.n	8003f66 <_printf_i+0x212>
 8003f8e:	2500      	movs	r5, #0
 8003f90:	f104 0619 	add.w	r6, r4, #25
 8003f94:	e7f5      	b.n	8003f82 <_printf_i+0x22e>
 8003f96:	bf00      	nop
 8003f98:	08004619 	.word	0x08004619
 8003f9c:	0800462a 	.word	0x0800462a

08003fa0 <_putc_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	b118      	cbz	r0, 8003fb2 <_putc_r+0x12>
 8003faa:	6983      	ldr	r3, [r0, #24]
 8003fac:	b90b      	cbnz	r3, 8003fb2 <_putc_r+0x12>
 8003fae:	f7ff fbd3 	bl	8003758 <__sinit>
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <_putc_r+0x84>)
 8003fb4:	429c      	cmp	r4, r3
 8003fb6:	d124      	bne.n	8004002 <_putc_r+0x62>
 8003fb8:	6874      	ldr	r4, [r6, #4]
 8003fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fbc:	07d8      	lsls	r0, r3, #31
 8003fbe:	d405      	bmi.n	8003fcc <_putc_r+0x2c>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	0599      	lsls	r1, r3, #22
 8003fc4:	d402      	bmi.n	8003fcc <_putc_r+0x2c>
 8003fc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc8:	f7ff fc89 	bl	80038de <__retarget_lock_acquire_recursive>
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	60a3      	str	r3, [r4, #8]
 8003fd4:	da05      	bge.n	8003fe2 <_putc_r+0x42>
 8003fd6:	69a2      	ldr	r2, [r4, #24]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	db1c      	blt.n	8004016 <_putc_r+0x76>
 8003fdc:	b2eb      	uxtb	r3, r5
 8003fde:	2b0a      	cmp	r3, #10
 8003fe0:	d019      	beq.n	8004016 <_putc_r+0x76>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	6022      	str	r2, [r4, #0]
 8003fe8:	701d      	strb	r5, [r3, #0]
 8003fea:	b2ed      	uxtb	r5, r5
 8003fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fee:	07da      	lsls	r2, r3, #31
 8003ff0:	d405      	bmi.n	8003ffe <_putc_r+0x5e>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	059b      	lsls	r3, r3, #22
 8003ff6:	d402      	bmi.n	8003ffe <_putc_r+0x5e>
 8003ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffa:	f7ff fc71 	bl	80038e0 <__retarget_lock_release_recursive>
 8003ffe:	4628      	mov	r0, r5
 8004000:	bd70      	pop	{r4, r5, r6, pc}
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <_putc_r+0x88>)
 8004004:	429c      	cmp	r4, r3
 8004006:	d101      	bne.n	800400c <_putc_r+0x6c>
 8004008:	68b4      	ldr	r4, [r6, #8]
 800400a:	e7d6      	b.n	8003fba <_putc_r+0x1a>
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <_putc_r+0x8c>)
 800400e:	429c      	cmp	r4, r3
 8004010:	bf08      	it	eq
 8004012:	68f4      	ldreq	r4, [r6, #12]
 8004014:	e7d1      	b.n	8003fba <_putc_r+0x1a>
 8004016:	4629      	mov	r1, r5
 8004018:	4622      	mov	r2, r4
 800401a:	4630      	mov	r0, r6
 800401c:	f000 f84c 	bl	80040b8 <__swbuf_r>
 8004020:	4605      	mov	r5, r0
 8004022:	e7e3      	b.n	8003fec <_putc_r+0x4c>
 8004024:	080045c8 	.word	0x080045c8
 8004028:	080045e8 	.word	0x080045e8
 800402c:	080045a8 	.word	0x080045a8

08004030 <__sread>:
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004038:	f000 f94a 	bl	80042d0 <_read_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	bfab      	itete	ge
 8004040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004042:	89a3      	ldrhlt	r3, [r4, #12]
 8004044:	181b      	addge	r3, r3, r0
 8004046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800404a:	bfac      	ite	ge
 800404c:	6563      	strge	r3, [r4, #84]	; 0x54
 800404e:	81a3      	strhlt	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__swrite>:
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	461f      	mov	r7, r3
 8004058:	898b      	ldrh	r3, [r1, #12]
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4616      	mov	r6, r2
 8004062:	d505      	bpl.n	8004070 <__swrite+0x1e>
 8004064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004068:	2302      	movs	r3, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f91e 	bl	80042ac <_lseek_r>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4632      	mov	r2, r6
 800407e:	463b      	mov	r3, r7
 8004080:	4628      	mov	r0, r5
 8004082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004086:	f7fc bc2b 	b.w	80008e0 <_write_r>

0800408a <__sseek>:
 800408a:	b510      	push	{r4, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 f90b 	bl	80042ac <_lseek_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	bf15      	itete	ne
 800409c:	6560      	strne	r0, [r4, #84]	; 0x54
 800409e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040a6:	81a3      	strheq	r3, [r4, #12]
 80040a8:	bf18      	it	ne
 80040aa:	81a3      	strhne	r3, [r4, #12]
 80040ac:	bd10      	pop	{r4, pc}

080040ae <__sclose>:
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 b8c9 	b.w	8004248 <_close_r>
	...

080040b8 <__swbuf_r>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	460e      	mov	r6, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	4605      	mov	r5, r0
 80040c0:	b118      	cbz	r0, 80040ca <__swbuf_r+0x12>
 80040c2:	6983      	ldr	r3, [r0, #24]
 80040c4:	b90b      	cbnz	r3, 80040ca <__swbuf_r+0x12>
 80040c6:	f7ff fb47 	bl	8003758 <__sinit>
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <__swbuf_r+0x98>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	d12b      	bne.n	8004128 <__swbuf_r+0x70>
 80040d0:	686c      	ldr	r4, [r5, #4]
 80040d2:	69a3      	ldr	r3, [r4, #24]
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	071a      	lsls	r2, r3, #28
 80040da:	d52f      	bpl.n	800413c <__swbuf_r+0x84>
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	b36b      	cbz	r3, 800413c <__swbuf_r+0x84>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	1ac0      	subs	r0, r0, r3
 80040e6:	6963      	ldr	r3, [r4, #20]
 80040e8:	b2f6      	uxtb	r6, r6
 80040ea:	4283      	cmp	r3, r0
 80040ec:	4637      	mov	r7, r6
 80040ee:	dc04      	bgt.n	80040fa <__swbuf_r+0x42>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f7ff fa9c 	bl	8003630 <_fflush_r>
 80040f8:	bb30      	cbnz	r0, 8004148 <__swbuf_r+0x90>
 80040fa:	68a3      	ldr	r3, [r4, #8]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	60a3      	str	r3, [r4, #8]
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	6022      	str	r2, [r4, #0]
 8004106:	701e      	strb	r6, [r3, #0]
 8004108:	6963      	ldr	r3, [r4, #20]
 800410a:	3001      	adds	r0, #1
 800410c:	4283      	cmp	r3, r0
 800410e:	d004      	beq.n	800411a <__swbuf_r+0x62>
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	07db      	lsls	r3, r3, #31
 8004114:	d506      	bpl.n	8004124 <__swbuf_r+0x6c>
 8004116:	2e0a      	cmp	r6, #10
 8004118:	d104      	bne.n	8004124 <__swbuf_r+0x6c>
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f7ff fa87 	bl	8003630 <_fflush_r>
 8004122:	b988      	cbnz	r0, 8004148 <__swbuf_r+0x90>
 8004124:	4638      	mov	r0, r7
 8004126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <__swbuf_r+0x9c>)
 800412a:	429c      	cmp	r4, r3
 800412c:	d101      	bne.n	8004132 <__swbuf_r+0x7a>
 800412e:	68ac      	ldr	r4, [r5, #8]
 8004130:	e7cf      	b.n	80040d2 <__swbuf_r+0x1a>
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <__swbuf_r+0xa0>)
 8004134:	429c      	cmp	r4, r3
 8004136:	bf08      	it	eq
 8004138:	68ec      	ldreq	r4, [r5, #12]
 800413a:	e7ca      	b.n	80040d2 <__swbuf_r+0x1a>
 800413c:	4621      	mov	r1, r4
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f80c 	bl	800415c <__swsetup_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	d0cb      	beq.n	80040e0 <__swbuf_r+0x28>
 8004148:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800414c:	e7ea      	b.n	8004124 <__swbuf_r+0x6c>
 800414e:	bf00      	nop
 8004150:	080045c8 	.word	0x080045c8
 8004154:	080045e8 	.word	0x080045e8
 8004158:	080045a8 	.word	0x080045a8

0800415c <__swsetup_r>:
 800415c:	4b32      	ldr	r3, [pc, #200]	; (8004228 <__swsetup_r+0xcc>)
 800415e:	b570      	push	{r4, r5, r6, lr}
 8004160:	681d      	ldr	r5, [r3, #0]
 8004162:	4606      	mov	r6, r0
 8004164:	460c      	mov	r4, r1
 8004166:	b125      	cbz	r5, 8004172 <__swsetup_r+0x16>
 8004168:	69ab      	ldr	r3, [r5, #24]
 800416a:	b913      	cbnz	r3, 8004172 <__swsetup_r+0x16>
 800416c:	4628      	mov	r0, r5
 800416e:	f7ff faf3 	bl	8003758 <__sinit>
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <__swsetup_r+0xd0>)
 8004174:	429c      	cmp	r4, r3
 8004176:	d10f      	bne.n	8004198 <__swsetup_r+0x3c>
 8004178:	686c      	ldr	r4, [r5, #4]
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004180:	0719      	lsls	r1, r3, #28
 8004182:	d42c      	bmi.n	80041de <__swsetup_r+0x82>
 8004184:	06dd      	lsls	r5, r3, #27
 8004186:	d411      	bmi.n	80041ac <__swsetup_r+0x50>
 8004188:	2309      	movs	r3, #9
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004196:	e03e      	b.n	8004216 <__swsetup_r+0xba>
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <__swsetup_r+0xd4>)
 800419a:	429c      	cmp	r4, r3
 800419c:	d101      	bne.n	80041a2 <__swsetup_r+0x46>
 800419e:	68ac      	ldr	r4, [r5, #8]
 80041a0:	e7eb      	b.n	800417a <__swsetup_r+0x1e>
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <__swsetup_r+0xd8>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	bf08      	it	eq
 80041a8:	68ec      	ldreq	r4, [r5, #12]
 80041aa:	e7e6      	b.n	800417a <__swsetup_r+0x1e>
 80041ac:	0758      	lsls	r0, r3, #29
 80041ae:	d512      	bpl.n	80041d6 <__swsetup_r+0x7a>
 80041b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b2:	b141      	cbz	r1, 80041c6 <__swsetup_r+0x6a>
 80041b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b8:	4299      	cmp	r1, r3
 80041ba:	d002      	beq.n	80041c2 <__swsetup_r+0x66>
 80041bc:	4630      	mov	r0, r6
 80041be:	f7fe ff55 	bl	800306c <_free_r>
 80041c2:	2300      	movs	r3, #0
 80041c4:	6363      	str	r3, [r4, #52]	; 0x34
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	2300      	movs	r3, #0
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f043 0308 	orr.w	r3, r3, #8
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	b94b      	cbnz	r3, 80041f6 <__swsetup_r+0x9a>
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ec:	d003      	beq.n	80041f6 <__swsetup_r+0x9a>
 80041ee:	4621      	mov	r1, r4
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff fb9b 	bl	800392c <__smakebuf_r>
 80041f6:	89a0      	ldrh	r0, [r4, #12]
 80041f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041fc:	f010 0301 	ands.w	r3, r0, #1
 8004200:	d00a      	beq.n	8004218 <__swsetup_r+0xbc>
 8004202:	2300      	movs	r3, #0
 8004204:	60a3      	str	r3, [r4, #8]
 8004206:	6963      	ldr	r3, [r4, #20]
 8004208:	425b      	negs	r3, r3
 800420a:	61a3      	str	r3, [r4, #24]
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	b943      	cbnz	r3, 8004222 <__swsetup_r+0xc6>
 8004210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004214:	d1ba      	bne.n	800418c <__swsetup_r+0x30>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	0781      	lsls	r1, r0, #30
 800421a:	bf58      	it	pl
 800421c:	6963      	ldrpl	r3, [r4, #20]
 800421e:	60a3      	str	r3, [r4, #8]
 8004220:	e7f4      	b.n	800420c <__swsetup_r+0xb0>
 8004222:	2000      	movs	r0, #0
 8004224:	e7f7      	b.n	8004216 <__swsetup_r+0xba>
 8004226:	bf00      	nop
 8004228:	2000002c 	.word	0x2000002c
 800422c:	080045c8 	.word	0x080045c8
 8004230:	080045e8 	.word	0x080045e8
 8004234:	080045a8 	.word	0x080045a8

08004238 <abort>:
 8004238:	b508      	push	{r3, lr}
 800423a:	2006      	movs	r0, #6
 800423c:	f000 f882 	bl	8004344 <raise>
 8004240:	2001      	movs	r0, #1
 8004242:	f7fe fd8b 	bl	8002d5c <_exit>
	...

08004248 <_close_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_close_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fe fda9 	bl	8002daa <_close>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_close_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_close_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200001d8 	.word	0x200001d8

08004268 <_fstat_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d07      	ldr	r5, [pc, #28]	; (8004288 <_fstat_r+0x20>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	f7fe fda4 	bl	8002dc2 <_fstat>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	d102      	bne.n	8004284 <_fstat_r+0x1c>
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	b103      	cbz	r3, 8004284 <_fstat_r+0x1c>
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	bd38      	pop	{r3, r4, r5, pc}
 8004286:	bf00      	nop
 8004288:	200001d8 	.word	0x200001d8

0800428c <_isatty_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_isatty_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fe fda3 	bl	8002de2 <_isatty>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_isatty_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_isatty_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	200001d8 	.word	0x200001d8

080042ac <_lseek_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d07      	ldr	r5, [pc, #28]	; (80042cc <_lseek_r+0x20>)
 80042b0:	4604      	mov	r4, r0
 80042b2:	4608      	mov	r0, r1
 80042b4:	4611      	mov	r1, r2
 80042b6:	2200      	movs	r2, #0
 80042b8:	602a      	str	r2, [r5, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f7fe fd9c 	bl	8002df8 <_lseek>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_lseek_r+0x1e>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_lseek_r+0x1e>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	200001d8 	.word	0x200001d8

080042d0 <_read_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	; (80042f0 <_read_r+0x20>)
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fe fd46 	bl	8002d70 <_read>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_read_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_read_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200001d8 	.word	0x200001d8

080042f4 <_raise_r>:
 80042f4:	291f      	cmp	r1, #31
 80042f6:	b538      	push	{r3, r4, r5, lr}
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	d904      	bls.n	8004308 <_raise_r+0x14>
 80042fe:	2316      	movs	r3, #22
 8004300:	6003      	str	r3, [r0, #0]
 8004302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004306:	bd38      	pop	{r3, r4, r5, pc}
 8004308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800430a:	b112      	cbz	r2, 8004312 <_raise_r+0x1e>
 800430c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004310:	b94b      	cbnz	r3, 8004326 <_raise_r+0x32>
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f830 	bl	8004378 <_getpid_r>
 8004318:	462a      	mov	r2, r5
 800431a:	4601      	mov	r1, r0
 800431c:	4620      	mov	r0, r4
 800431e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004322:	f000 b817 	b.w	8004354 <_kill_r>
 8004326:	2b01      	cmp	r3, #1
 8004328:	d00a      	beq.n	8004340 <_raise_r+0x4c>
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	d103      	bne.n	8004336 <_raise_r+0x42>
 800432e:	2316      	movs	r3, #22
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	2001      	movs	r0, #1
 8004334:	e7e7      	b.n	8004306 <_raise_r+0x12>
 8004336:	2400      	movs	r4, #0
 8004338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800433c:	4628      	mov	r0, r5
 800433e:	4798      	blx	r3
 8004340:	2000      	movs	r0, #0
 8004342:	e7e0      	b.n	8004306 <_raise_r+0x12>

08004344 <raise>:
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <raise+0xc>)
 8004346:	4601      	mov	r1, r0
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	f7ff bfd3 	b.w	80042f4 <_raise_r>
 800434e:	bf00      	nop
 8004350:	2000002c 	.word	0x2000002c

08004354 <_kill_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4d07      	ldr	r5, [pc, #28]	; (8004374 <_kill_r+0x20>)
 8004358:	2300      	movs	r3, #0
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	f7fe fceb 	bl	8002d3c <_kill>
 8004366:	1c43      	adds	r3, r0, #1
 8004368:	d102      	bne.n	8004370 <_kill_r+0x1c>
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	b103      	cbz	r3, 8004370 <_kill_r+0x1c>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	bd38      	pop	{r3, r4, r5, pc}
 8004372:	bf00      	nop
 8004374:	200001d8 	.word	0x200001d8

08004378 <_getpid_r>:
 8004378:	f7fe bcd8 	b.w	8002d2c <_getpid>

0800437c <_gettimeofday>:
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <_gettimeofday+0xc>)
 800437e:	2258      	movs	r2, #88	; 0x58
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004386:	4770      	bx	lr
 8004388:	200001d8 	.word	0x200001d8

0800438c <_init>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr

08004398 <_fini>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr
>>>>>>> Stashed changes
=======
 8004420:	e7fe      	b.n	8004420 <ADC1_2_IRQHandler>
	...

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000002c 	.word	0x2000002c

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x38>)
 8004434:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	2600      	movs	r6, #0
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <__libc_init_array+0x40>)
 8004442:	4c0c      	ldr	r4, [pc, #48]	; (8004474 <__libc_init_array+0x44>)
 8004444:	f001 fa72 	bl	800592c <_init>
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	2600      	movs	r6, #0
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	08005c38 	.word	0x08005c38
 800446c:	08005c38 	.word	0x08005c38
 8004470:	08005c38 	.word	0x08005c38
 8004474:	08005c3c 	.word	0x08005c3c

08004478 <malloc>:
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <malloc+0xc>)
 800447a:	4601      	mov	r1, r0
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f000 b863 	b.w	8004548 <_malloc_r>
 8004482:	bf00      	nop
 8004484:	2000002c 	.word	0x2000002c

08004488 <free>:
 8004488:	4b02      	ldr	r3, [pc, #8]	; (8004494 <free+0xc>)
 800448a:	4601      	mov	r1, r0
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f000 b80b 	b.w	80044a8 <_free_r>
 8004492:	bf00      	nop
 8004494:	2000002c 	.word	0x2000002c

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <_free_r>:
 80044a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044aa:	2900      	cmp	r1, #0
 80044ac:	d048      	beq.n	8004540 <_free_r+0x98>
 80044ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b2:	9001      	str	r0, [sp, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f1a1 0404 	sub.w	r4, r1, #4
 80044ba:	bfb8      	it	lt
 80044bc:	18e4      	addlt	r4, r4, r3
 80044be:	f000 fc65 	bl	8004d8c <__malloc_lock>
 80044c2:	4a20      	ldr	r2, [pc, #128]	; (8004544 <_free_r+0x9c>)
 80044c4:	9801      	ldr	r0, [sp, #4]
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	4615      	mov	r5, r2
 80044ca:	b933      	cbnz	r3, 80044da <_free_r+0x32>
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6014      	str	r4, [r2, #0]
 80044d0:	b003      	add	sp, #12
 80044d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044d6:	f000 bc5f 	b.w	8004d98 <__malloc_unlock>
 80044da:	42a3      	cmp	r3, r4
 80044dc:	d90b      	bls.n	80044f6 <_free_r+0x4e>
 80044de:	6821      	ldr	r1, [r4, #0]
 80044e0:	1862      	adds	r2, r4, r1
 80044e2:	4293      	cmp	r3, r2
 80044e4:	bf04      	itt	eq
 80044e6:	681a      	ldreq	r2, [r3, #0]
 80044e8:	685b      	ldreq	r3, [r3, #4]
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	bf04      	itt	eq
 80044ee:	1852      	addeq	r2, r2, r1
 80044f0:	6022      	streq	r2, [r4, #0]
 80044f2:	602c      	str	r4, [r5, #0]
 80044f4:	e7ec      	b.n	80044d0 <_free_r+0x28>
 80044f6:	461a      	mov	r2, r3
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b10b      	cbz	r3, 8004500 <_free_r+0x58>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d9fa      	bls.n	80044f6 <_free_r+0x4e>
 8004500:	6811      	ldr	r1, [r2, #0]
 8004502:	1855      	adds	r5, r2, r1
 8004504:	42a5      	cmp	r5, r4
 8004506:	d10b      	bne.n	8004520 <_free_r+0x78>
 8004508:	6824      	ldr	r4, [r4, #0]
 800450a:	4421      	add	r1, r4
 800450c:	1854      	adds	r4, r2, r1
 800450e:	42a3      	cmp	r3, r4
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	d1dd      	bne.n	80044d0 <_free_r+0x28>
 8004514:	681c      	ldr	r4, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6053      	str	r3, [r2, #4]
 800451a:	4421      	add	r1, r4
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	e7d7      	b.n	80044d0 <_free_r+0x28>
 8004520:	d902      	bls.n	8004528 <_free_r+0x80>
 8004522:	230c      	movs	r3, #12
 8004524:	6003      	str	r3, [r0, #0]
 8004526:	e7d3      	b.n	80044d0 <_free_r+0x28>
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1961      	adds	r1, r4, r5
 800452c:	428b      	cmp	r3, r1
 800452e:	bf04      	itt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	bf04      	itt	eq
 8004538:	1949      	addeq	r1, r1, r5
 800453a:	6021      	streq	r1, [r4, #0]
 800453c:	6054      	str	r4, [r2, #4]
 800453e:	e7c7      	b.n	80044d0 <_free_r+0x28>
 8004540:	b003      	add	sp, #12
 8004542:	bd30      	pop	{r4, r5, pc}
 8004544:	200001c4 	.word	0x200001c4

08004548 <_malloc_r>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	1ccd      	adds	r5, r1, #3
 800454c:	f025 0503 	bic.w	r5, r5, #3
 8004550:	3508      	adds	r5, #8
 8004552:	2d0c      	cmp	r5, #12
 8004554:	bf38      	it	cc
 8004556:	250c      	movcc	r5, #12
 8004558:	2d00      	cmp	r5, #0
 800455a:	4606      	mov	r6, r0
 800455c:	db01      	blt.n	8004562 <_malloc_r+0x1a>
 800455e:	42a9      	cmp	r1, r5
 8004560:	d903      	bls.n	800456a <_malloc_r+0x22>
 8004562:	230c      	movs	r3, #12
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	2000      	movs	r0, #0
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456a:	f000 fc0f 	bl	8004d8c <__malloc_lock>
 800456e:	4921      	ldr	r1, [pc, #132]	; (80045f4 <_malloc_r+0xac>)
 8004570:	680a      	ldr	r2, [r1, #0]
 8004572:	4614      	mov	r4, r2
 8004574:	b99c      	cbnz	r4, 800459e <_malloc_r+0x56>
 8004576:	4f20      	ldr	r7, [pc, #128]	; (80045f8 <_malloc_r+0xb0>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b923      	cbnz	r3, 8004586 <_malloc_r+0x3e>
 800457c:	4621      	mov	r1, r4
 800457e:	4630      	mov	r0, r6
 8004580:	f000 f8d8 	bl	8004734 <_sbrk_r>
 8004584:	6038      	str	r0, [r7, #0]
 8004586:	4629      	mov	r1, r5
 8004588:	4630      	mov	r0, r6
 800458a:	f000 f8d3 	bl	8004734 <_sbrk_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	d123      	bne.n	80045da <_malloc_r+0x92>
 8004592:	230c      	movs	r3, #12
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	4630      	mov	r0, r6
 8004598:	f000 fbfe 	bl	8004d98 <__malloc_unlock>
 800459c:	e7e3      	b.n	8004566 <_malloc_r+0x1e>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	1b5b      	subs	r3, r3, r5
 80045a2:	d417      	bmi.n	80045d4 <_malloc_r+0x8c>
 80045a4:	2b0b      	cmp	r3, #11
 80045a6:	d903      	bls.n	80045b0 <_malloc_r+0x68>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	441c      	add	r4, r3
 80045ac:	6025      	str	r5, [r4, #0]
 80045ae:	e004      	b.n	80045ba <_malloc_r+0x72>
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	42a2      	cmp	r2, r4
 80045b4:	bf0c      	ite	eq
 80045b6:	600b      	streq	r3, [r1, #0]
 80045b8:	6053      	strne	r3, [r2, #4]
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 fbec 	bl	8004d98 <__malloc_unlock>
 80045c0:	f104 000b 	add.w	r0, r4, #11
 80045c4:	1d23      	adds	r3, r4, #4
 80045c6:	f020 0007 	bic.w	r0, r0, #7
 80045ca:	1ac2      	subs	r2, r0, r3
 80045cc:	d0cc      	beq.n	8004568 <_malloc_r+0x20>
 80045ce:	1a1b      	subs	r3, r3, r0
 80045d0:	50a3      	str	r3, [r4, r2]
 80045d2:	e7c9      	b.n	8004568 <_malloc_r+0x20>
 80045d4:	4622      	mov	r2, r4
 80045d6:	6864      	ldr	r4, [r4, #4]
 80045d8:	e7cc      	b.n	8004574 <_malloc_r+0x2c>
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d0e3      	beq.n	80045ac <_malloc_r+0x64>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 f8a4 	bl	8004734 <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d1dd      	bne.n	80045ac <_malloc_r+0x64>
 80045f0:	e7cf      	b.n	8004592 <_malloc_r+0x4a>
 80045f2:	bf00      	nop
 80045f4:	200001c4 	.word	0x200001c4
 80045f8:	200001c8 	.word	0x200001c8

080045fc <iprintf>:
 80045fc:	b40f      	push	{r0, r1, r2, r3}
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <iprintf+0x2c>)
 8004600:	b513      	push	{r0, r1, r4, lr}
 8004602:	681c      	ldr	r4, [r3, #0]
 8004604:	b124      	cbz	r4, 8004610 <iprintf+0x14>
 8004606:	69a3      	ldr	r3, [r4, #24]
 8004608:	b913      	cbnz	r3, 8004610 <iprintf+0x14>
 800460a:	4620      	mov	r0, r4
 800460c:	f000 faa8 	bl	8004b60 <__sinit>
 8004610:	ab05      	add	r3, sp, #20
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	68a1      	ldr	r1, [r4, #8]
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	4620      	mov	r0, r4
 800461a:	f000 fbed 	bl	8004df8 <_vfiprintf_r>
 800461e:	b002      	add	sp, #8
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004624:	b004      	add	sp, #16
 8004626:	4770      	bx	lr
 8004628:	2000002c 	.word	0x2000002c

0800462c <putchar>:
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <putchar+0x28>)
 800462e:	b513      	push	{r0, r1, r4, lr}
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	4601      	mov	r1, r0
 8004634:	b134      	cbz	r4, 8004644 <putchar+0x18>
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	b923      	cbnz	r3, 8004644 <putchar+0x18>
 800463a:	9001      	str	r0, [sp, #4]
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fa8f 	bl	8004b60 <__sinit>
 8004642:	9901      	ldr	r1, [sp, #4]
 8004644:	68a2      	ldr	r2, [r4, #8]
 8004646:	4620      	mov	r0, r4
 8004648:	b002      	add	sp, #8
 800464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800464e:	f000 be97 	b.w	8005380 <_putc_r>
 8004652:	bf00      	nop
 8004654:	2000002c 	.word	0x2000002c

08004658 <srand>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <srand+0x44>)
 800465c:	681d      	ldr	r5, [r3, #0]
 800465e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004660:	4604      	mov	r4, r0
 8004662:	b9b3      	cbnz	r3, 8004692 <srand+0x3a>
 8004664:	2018      	movs	r0, #24
 8004666:	f7ff ff07 	bl	8004478 <malloc>
 800466a:	4602      	mov	r2, r0
 800466c:	63a8      	str	r0, [r5, #56]	; 0x38
 800466e:	b920      	cbnz	r0, 800467a <srand+0x22>
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <srand+0x48>)
 8004672:	480c      	ldr	r0, [pc, #48]	; (80046a4 <srand+0x4c>)
 8004674:	2142      	movs	r1, #66	; 0x42
 8004676:	f000 f93b 	bl	80048f0 <__assert_func>
 800467a:	490b      	ldr	r1, [pc, #44]	; (80046a8 <srand+0x50>)
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <srand+0x54>)
 800467e:	e9c0 1300 	strd	r1, r3, [r0]
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <srand+0x58>)
 8004684:	6083      	str	r3, [r0, #8]
 8004686:	230b      	movs	r3, #11
 8004688:	8183      	strh	r3, [r0, #12]
 800468a:	2100      	movs	r1, #0
 800468c:	2001      	movs	r0, #1
 800468e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004692:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004694:	2200      	movs	r2, #0
 8004696:	611c      	str	r4, [r3, #16]
 8004698:	615a      	str	r2, [r3, #20]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	2000002c 	.word	0x2000002c
 80046a0:	08005ae8 	.word	0x08005ae8
 80046a4:	08005aff 	.word	0x08005aff
 80046a8:	abcd330e 	.word	0xabcd330e
 80046ac:	e66d1234 	.word	0xe66d1234
 80046b0:	0005deec 	.word	0x0005deec

080046b4 <rand>:
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <rand+0x60>)
 80046b6:	b510      	push	{r4, lr}
 80046b8:	681c      	ldr	r4, [r3, #0]
 80046ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046bc:	b9b3      	cbnz	r3, 80046ec <rand+0x38>
 80046be:	2018      	movs	r0, #24
 80046c0:	f7ff feda 	bl	8004478 <malloc>
 80046c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80046c6:	b928      	cbnz	r0, 80046d4 <rand+0x20>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <rand+0x64>)
 80046cc:	4813      	ldr	r0, [pc, #76]	; (800471c <rand+0x68>)
 80046ce:	214e      	movs	r1, #78	; 0x4e
 80046d0:	f000 f90e 	bl	80048f0 <__assert_func>
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <rand+0x6c>)
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <rand+0x70>)
 80046d8:	e9c0 2300 	strd	r2, r3, [r0]
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <rand+0x74>)
 80046de:	6083      	str	r3, [r0, #8]
 80046e0:	230b      	movs	r3, #11
 80046e2:	8183      	strh	r3, [r0, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	2300      	movs	r3, #0
 80046e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80046ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046ee:	480f      	ldr	r0, [pc, #60]	; (800472c <rand+0x78>)
 80046f0:	690a      	ldr	r2, [r1, #16]
 80046f2:	694b      	ldr	r3, [r1, #20]
 80046f4:	4c0e      	ldr	r4, [pc, #56]	; (8004730 <rand+0x7c>)
 80046f6:	4350      	muls	r0, r2
 80046f8:	fb04 0003 	mla	r0, r4, r3, r0
 80046fc:	fba2 3404 	umull	r3, r4, r2, r4
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	4404      	add	r4, r0
 8004704:	f144 0000 	adc.w	r0, r4, #0
 8004708:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800470c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004710:	bd10      	pop	{r4, pc}
 8004712:	bf00      	nop
 8004714:	2000002c 	.word	0x2000002c
 8004718:	08005ae8 	.word	0x08005ae8
 800471c:	08005aff 	.word	0x08005aff
 8004720:	abcd330e 	.word	0xabcd330e
 8004724:	e66d1234 	.word	0xe66d1234
 8004728:	0005deec 	.word	0x0005deec
 800472c:	5851f42d 	.word	0x5851f42d
 8004730:	4c957f2d 	.word	0x4c957f2d

08004734 <_sbrk_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d06      	ldr	r5, [pc, #24]	; (8004750 <_sbrk_r+0x1c>)
 8004738:	2300      	movs	r3, #0
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	f7ff fd86 	bl	8004250 <_sbrk>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_sbrk_r+0x1a>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_sbrk_r+0x1a>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200001dc 	.word	0x200001dc

08004754 <setbuf>:
 8004754:	2900      	cmp	r1, #0
 8004756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475a:	bf0c      	ite	eq
 800475c:	2202      	moveq	r2, #2
 800475e:	2200      	movne	r2, #0
 8004760:	f000 b800 	b.w	8004764 <setvbuf>

08004764 <setvbuf>:
 8004764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004768:	461d      	mov	r5, r3
 800476a:	4b5d      	ldr	r3, [pc, #372]	; (80048e0 <setvbuf+0x17c>)
 800476c:	681f      	ldr	r7, [r3, #0]
 800476e:	4604      	mov	r4, r0
 8004770:	460e      	mov	r6, r1
 8004772:	4690      	mov	r8, r2
 8004774:	b127      	cbz	r7, 8004780 <setvbuf+0x1c>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	b913      	cbnz	r3, 8004780 <setvbuf+0x1c>
 800477a:	4638      	mov	r0, r7
 800477c:	f000 f9f0 	bl	8004b60 <__sinit>
 8004780:	4b58      	ldr	r3, [pc, #352]	; (80048e4 <setvbuf+0x180>)
 8004782:	429c      	cmp	r4, r3
 8004784:	d167      	bne.n	8004856 <setvbuf+0xf2>
 8004786:	687c      	ldr	r4, [r7, #4]
 8004788:	f1b8 0f02 	cmp.w	r8, #2
 800478c:	d006      	beq.n	800479c <setvbuf+0x38>
 800478e:	f1b8 0f01 	cmp.w	r8, #1
 8004792:	f200 809f 	bhi.w	80048d4 <setvbuf+0x170>
 8004796:	2d00      	cmp	r5, #0
 8004798:	f2c0 809c 	blt.w	80048d4 <setvbuf+0x170>
 800479c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d405      	bmi.n	80047ae <setvbuf+0x4a>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	0598      	lsls	r0, r3, #22
 80047a6:	d402      	bmi.n	80047ae <setvbuf+0x4a>
 80047a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047aa:	f000 fa89 	bl	8004cc0 <__retarget_lock_acquire_recursive>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4638      	mov	r0, r7
 80047b2:	f000 f941 	bl	8004a38 <_fflush_r>
 80047b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b8:	b141      	cbz	r1, 80047cc <setvbuf+0x68>
 80047ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047be:	4299      	cmp	r1, r3
 80047c0:	d002      	beq.n	80047c8 <setvbuf+0x64>
 80047c2:	4638      	mov	r0, r7
 80047c4:	f7ff fe70 	bl	80044a8 <_free_r>
 80047c8:	2300      	movs	r3, #0
 80047ca:	6363      	str	r3, [r4, #52]	; 0x34
 80047cc:	2300      	movs	r3, #0
 80047ce:	61a3      	str	r3, [r4, #24]
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0619      	lsls	r1, r3, #24
 80047d6:	d503      	bpl.n	80047e0 <setvbuf+0x7c>
 80047d8:	6921      	ldr	r1, [r4, #16]
 80047da:	4638      	mov	r0, r7
 80047dc:	f7ff fe64 	bl	80044a8 <_free_r>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	f1b8 0f02 	cmp.w	r8, #2
 80047ee:	81a3      	strh	r3, [r4, #12]
 80047f0:	d06c      	beq.n	80048cc <setvbuf+0x168>
 80047f2:	ab01      	add	r3, sp, #4
 80047f4:	466a      	mov	r2, sp
 80047f6:	4621      	mov	r1, r4
 80047f8:	4638      	mov	r0, r7
 80047fa:	f000 fa63 	bl	8004cc4 <__swhatbuf_r>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	4318      	orrs	r0, r3
 8004802:	81a0      	strh	r0, [r4, #12]
 8004804:	2d00      	cmp	r5, #0
 8004806:	d130      	bne.n	800486a <setvbuf+0x106>
 8004808:	9d00      	ldr	r5, [sp, #0]
 800480a:	4628      	mov	r0, r5
 800480c:	f7ff fe34 	bl	8004478 <malloc>
 8004810:	4606      	mov	r6, r0
 8004812:	2800      	cmp	r0, #0
 8004814:	d155      	bne.n	80048c2 <setvbuf+0x15e>
 8004816:	f8dd 9000 	ldr.w	r9, [sp]
 800481a:	45a9      	cmp	r9, r5
 800481c:	d14a      	bne.n	80048b4 <setvbuf+0x150>
 800481e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004822:	2200      	movs	r2, #0
 8004824:	60a2      	str	r2, [r4, #8]
 8004826:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	6122      	str	r2, [r4, #16]
 800482e:	2201      	movs	r2, #1
 8004830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004834:	6162      	str	r2, [r4, #20]
 8004836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	07d2      	lsls	r2, r2, #31
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	d405      	bmi.n	800484e <setvbuf+0xea>
 8004842:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004846:	d102      	bne.n	800484e <setvbuf+0xea>
 8004848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484a:	f000 fa3a 	bl	8004cc2 <__retarget_lock_release_recursive>
 800484e:	4628      	mov	r0, r5
 8004850:	b003      	add	sp, #12
 8004852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <setvbuf+0x184>)
 8004858:	429c      	cmp	r4, r3
 800485a:	d101      	bne.n	8004860 <setvbuf+0xfc>
 800485c:	68bc      	ldr	r4, [r7, #8]
 800485e:	e793      	b.n	8004788 <setvbuf+0x24>
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <setvbuf+0x188>)
 8004862:	429c      	cmp	r4, r3
 8004864:	bf08      	it	eq
 8004866:	68fc      	ldreq	r4, [r7, #12]
 8004868:	e78e      	b.n	8004788 <setvbuf+0x24>
 800486a:	2e00      	cmp	r6, #0
 800486c:	d0cd      	beq.n	800480a <setvbuf+0xa6>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	b913      	cbnz	r3, 8004878 <setvbuf+0x114>
 8004872:	4638      	mov	r0, r7
 8004874:	f000 f974 	bl	8004b60 <__sinit>
 8004878:	f1b8 0f01 	cmp.w	r8, #1
 800487c:	bf08      	it	eq
 800487e:	89a3      	ldrheq	r3, [r4, #12]
 8004880:	6026      	str	r6, [r4, #0]
 8004882:	bf04      	itt	eq
 8004884:	f043 0301 	orreq.w	r3, r3, #1
 8004888:	81a3      	strheq	r3, [r4, #12]
 800488a:	89a2      	ldrh	r2, [r4, #12]
 800488c:	f012 0308 	ands.w	r3, r2, #8
 8004890:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004894:	d01c      	beq.n	80048d0 <setvbuf+0x16c>
 8004896:	07d3      	lsls	r3, r2, #31
 8004898:	bf41      	itttt	mi
 800489a:	2300      	movmi	r3, #0
 800489c:	426d      	negmi	r5, r5
 800489e:	60a3      	strmi	r3, [r4, #8]
 80048a0:	61a5      	strmi	r5, [r4, #24]
 80048a2:	bf58      	it	pl
 80048a4:	60a5      	strpl	r5, [r4, #8]
 80048a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80048a8:	f015 0501 	ands.w	r5, r5, #1
 80048ac:	d115      	bne.n	80048da <setvbuf+0x176>
 80048ae:	f412 7f00 	tst.w	r2, #512	; 0x200
 80048b2:	e7c8      	b.n	8004846 <setvbuf+0xe2>
 80048b4:	4648      	mov	r0, r9
 80048b6:	f7ff fddf 	bl	8004478 <malloc>
 80048ba:	4606      	mov	r6, r0
 80048bc:	2800      	cmp	r0, #0
 80048be:	d0ae      	beq.n	800481e <setvbuf+0xba>
 80048c0:	464d      	mov	r5, r9
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	e7d0      	b.n	800486e <setvbuf+0x10a>
 80048cc:	2500      	movs	r5, #0
 80048ce:	e7a8      	b.n	8004822 <setvbuf+0xbe>
 80048d0:	60a3      	str	r3, [r4, #8]
 80048d2:	e7e8      	b.n	80048a6 <setvbuf+0x142>
 80048d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048d8:	e7b9      	b.n	800484e <setvbuf+0xea>
 80048da:	2500      	movs	r5, #0
 80048dc:	e7b7      	b.n	800484e <setvbuf+0xea>
 80048de:	bf00      	nop
 80048e0:	2000002c 	.word	0x2000002c
 80048e4:	08005bbc 	.word	0x08005bbc
 80048e8:	08005bdc 	.word	0x08005bdc
 80048ec:	08005b9c 	.word	0x08005b9c

080048f0 <__assert_func>:
 80048f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048f2:	4614      	mov	r4, r2
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <__assert_func+0x2c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4605      	mov	r5, r0
 80048fc:	68d8      	ldr	r0, [r3, #12]
 80048fe:	b14c      	cbz	r4, 8004914 <__assert_func+0x24>
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <__assert_func+0x30>)
 8004902:	9100      	str	r1, [sp, #0]
 8004904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004908:	4906      	ldr	r1, [pc, #24]	; (8004924 <__assert_func+0x34>)
 800490a:	462b      	mov	r3, r5
 800490c:	f000 f9a6 	bl	8004c5c <fiprintf>
 8004910:	f000 fe82 	bl	8005618 <abort>
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__assert_func+0x38>)
 8004916:	461c      	mov	r4, r3
 8004918:	e7f3      	b.n	8004902 <__assert_func+0x12>
 800491a:	bf00      	nop
 800491c:	2000002c 	.word	0x2000002c
 8004920:	08005b5e 	.word	0x08005b5e
 8004924:	08005b6b 	.word	0x08005b6b
 8004928:	08005b99 	.word	0x08005b99

0800492c <__sflush_r>:
 800492c:	898a      	ldrh	r2, [r1, #12]
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	0710      	lsls	r0, r2, #28
 8004936:	460c      	mov	r4, r1
 8004938:	d458      	bmi.n	80049ec <__sflush_r+0xc0>
 800493a:	684b      	ldr	r3, [r1, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc05      	bgt.n	800494c <__sflush_r+0x20>
 8004940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc02      	bgt.n	800494c <__sflush_r+0x20>
 8004946:	2000      	movs	r0, #0
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800494e:	2e00      	cmp	r6, #0
 8004950:	d0f9      	beq.n	8004946 <__sflush_r+0x1a>
 8004952:	2300      	movs	r3, #0
 8004954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004958:	682f      	ldr	r7, [r5, #0]
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	d032      	beq.n	80049c4 <__sflush_r+0x98>
 800495e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	075a      	lsls	r2, r3, #29
 8004964:	d505      	bpl.n	8004972 <__sflush_r+0x46>
 8004966:	6863      	ldr	r3, [r4, #4]
 8004968:	1ac0      	subs	r0, r0, r3
 800496a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800496c:	b10b      	cbz	r3, 8004972 <__sflush_r+0x46>
 800496e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004970:	1ac0      	subs	r0, r0, r3
 8004972:	2300      	movs	r3, #0
 8004974:	4602      	mov	r2, r0
 8004976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	d106      	bne.n	8004992 <__sflush_r+0x66>
 8004984:	6829      	ldr	r1, [r5, #0]
 8004986:	291d      	cmp	r1, #29
 8004988:	d82c      	bhi.n	80049e4 <__sflush_r+0xb8>
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <__sflush_r+0x108>)
 800498c:	40ca      	lsrs	r2, r1
 800498e:	07d6      	lsls	r6, r2, #31
 8004990:	d528      	bpl.n	80049e4 <__sflush_r+0xb8>
 8004992:	2200      	movs	r2, #0
 8004994:	6062      	str	r2, [r4, #4]
 8004996:	04d9      	lsls	r1, r3, #19
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	d504      	bpl.n	80049a8 <__sflush_r+0x7c>
 800499e:	1c42      	adds	r2, r0, #1
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0x7a>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	b903      	cbnz	r3, 80049a8 <__sflush_r+0x7c>
 80049a6:	6560      	str	r0, [r4, #84]	; 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d0ca      	beq.n	8004946 <__sflush_r+0x1a>
 80049b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d002      	beq.n	80049be <__sflush_r+0x92>
 80049b8:	4628      	mov	r0, r5
 80049ba:	f7ff fd75 	bl	80044a8 <_free_r>
 80049be:	2000      	movs	r0, #0
 80049c0:	6360      	str	r0, [r4, #52]	; 0x34
 80049c2:	e7c1      	b.n	8004948 <__sflush_r+0x1c>
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	1c41      	adds	r1, r0, #1
 80049ce:	d1c7      	bne.n	8004960 <__sflush_r+0x34>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0c4      	beq.n	8004960 <__sflush_r+0x34>
 80049d6:	2b1d      	cmp	r3, #29
 80049d8:	d001      	beq.n	80049de <__sflush_r+0xb2>
 80049da:	2b16      	cmp	r3, #22
 80049dc:	d101      	bne.n	80049e2 <__sflush_r+0xb6>
 80049de:	602f      	str	r7, [r5, #0]
 80049e0:	e7b1      	b.n	8004946 <__sflush_r+0x1a>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	e7ad      	b.n	8004948 <__sflush_r+0x1c>
 80049ec:	690f      	ldr	r7, [r1, #16]
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d0a9      	beq.n	8004946 <__sflush_r+0x1a>
 80049f2:	0793      	lsls	r3, r2, #30
 80049f4:	680e      	ldr	r6, [r1, #0]
 80049f6:	bf08      	it	eq
 80049f8:	694b      	ldreq	r3, [r1, #20]
 80049fa:	600f      	str	r7, [r1, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2300      	movne	r3, #0
 8004a00:	eba6 0807 	sub.w	r8, r6, r7
 8004a04:	608b      	str	r3, [r1, #8]
 8004a06:	f1b8 0f00 	cmp.w	r8, #0
 8004a0a:	dd9c      	ble.n	8004946 <__sflush_r+0x1a>
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a10:	4643      	mov	r3, r8
 8004a12:	463a      	mov	r2, r7
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b0      	blx	r6
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	dc06      	bgt.n	8004a2a <__sflush_r+0xfe>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a28:	e78e      	b.n	8004948 <__sflush_r+0x1c>
 8004a2a:	4407      	add	r7, r0
 8004a2c:	eba8 0800 	sub.w	r8, r8, r0
 8004a30:	e7e9      	b.n	8004a06 <__sflush_r+0xda>
 8004a32:	bf00      	nop
 8004a34:	20400001 	.word	0x20400001

08004a38 <_fflush_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b913      	cbnz	r3, 8004a48 <_fflush_r+0x10>
 8004a42:	2500      	movs	r5, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	b118      	cbz	r0, 8004a52 <_fflush_r+0x1a>
 8004a4a:	6983      	ldr	r3, [r0, #24]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <_fflush_r+0x1a>
 8004a4e:	f000 f887 	bl	8004b60 <__sinit>
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <_fflush_r+0x6c>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	d11b      	bne.n	8004a90 <_fflush_r+0x58>
 8004a58:	686c      	ldr	r4, [r5, #4]
 8004a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <_fflush_r+0xa>
 8004a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a64:	07d0      	lsls	r0, r2, #31
 8004a66:	d404      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a68:	0599      	lsls	r1, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f000 f927 	bl	8004cc0 <__retarget_lock_acquire_recursive>
 8004a72:	4628      	mov	r0, r5
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7ff ff59 	bl	800492c <__sflush_r>
 8004a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a7c:	07da      	lsls	r2, r3, #31
 8004a7e:	4605      	mov	r5, r0
 8004a80:	d4e0      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	059b      	lsls	r3, r3, #22
 8004a86:	d4dd      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8a:	f000 f91a 	bl	8004cc2 <__retarget_lock_release_recursive>
 8004a8e:	e7d9      	b.n	8004a44 <_fflush_r+0xc>
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <_fflush_r+0x70>)
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d101      	bne.n	8004a9a <_fflush_r+0x62>
 8004a96:	68ac      	ldr	r4, [r5, #8]
 8004a98:	e7df      	b.n	8004a5a <_fflush_r+0x22>
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <_fflush_r+0x74>)
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	bf08      	it	eq
 8004aa0:	68ec      	ldreq	r4, [r5, #12]
 8004aa2:	e7da      	b.n	8004a5a <_fflush_r+0x22>
 8004aa4:	08005bbc 	.word	0x08005bbc
 8004aa8:	08005bdc 	.word	0x08005bdc
 8004aac:	08005b9c 	.word	0x08005b9c

08004ab0 <std>:
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004abe:	6083      	str	r3, [r0, #8]
 8004ac0:	8181      	strh	r1, [r0, #12]
 8004ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ac4:	81c2      	strh	r2, [r0, #14]
 8004ac6:	6183      	str	r3, [r0, #24]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2208      	movs	r2, #8
 8004acc:	305c      	adds	r0, #92	; 0x5c
 8004ace:	f7ff fce3 	bl	8004498 <memset>
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <std+0x38>)
 8004ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <std+0x3c>)
 8004ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <std+0x40>)
 8004adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <std+0x44>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08005411 	.word	0x08005411
 8004aec:	08005433 	.word	0x08005433
 8004af0:	0800546b 	.word	0x0800546b
 8004af4:	0800548f 	.word	0x0800548f

08004af8 <_cleanup_r>:
 8004af8:	4901      	ldr	r1, [pc, #4]	; (8004b00 <_cleanup_r+0x8>)
 8004afa:	f000 b8c1 	b.w	8004c80 <_fwalk_reent>
 8004afe:	bf00      	nop
 8004b00:	08004a39 	.word	0x08004a39

08004b04 <__sfmoreglue>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	1e4a      	subs	r2, r1, #1
 8004b08:	2568      	movs	r5, #104	; 0x68
 8004b0a:	4355      	muls	r5, r2
 8004b0c:	460e      	mov	r6, r1
 8004b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b12:	f7ff fd19 	bl	8004548 <_malloc_r>
 8004b16:	4604      	mov	r4, r0
 8004b18:	b140      	cbz	r0, 8004b2c <__sfmoreglue+0x28>
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b20:	300c      	adds	r0, #12
 8004b22:	60a0      	str	r0, [r4, #8]
 8004b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b28:	f7ff fcb6 	bl	8004498 <memset>
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <__sfp_lock_acquire>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sfp_lock_acquire+0x8>)
 8004b32:	f000 b8c5 	b.w	8004cc0 <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	200001d8 	.word	0x200001d8

08004b3c <__sfp_lock_release>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__sfp_lock_release+0x8>)
 8004b3e:	f000 b8c0 	b.w	8004cc2 <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	200001d8 	.word	0x200001d8

08004b48 <__sinit_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sinit_lock_acquire+0x8>)
 8004b4a:	f000 b8b9 	b.w	8004cc0 <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	200001d3 	.word	0x200001d3

08004b54 <__sinit_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sinit_lock_release+0x8>)
 8004b56:	f000 b8b4 	b.w	8004cc2 <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	200001d3 	.word	0x200001d3

08004b60 <__sinit>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	f7ff fff0 	bl	8004b48 <__sinit_lock_acquire>
 8004b68:	69a3      	ldr	r3, [r4, #24]
 8004b6a:	b11b      	cbz	r3, 8004b74 <__sinit+0x14>
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f7ff bff0 	b.w	8004b54 <__sinit_lock_release>
 8004b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b78:	6523      	str	r3, [r4, #80]	; 0x50
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <__sinit+0x68>)
 8004b7c:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <__sinit+0x6c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	bf04      	itt	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	61a3      	streq	r3, [r4, #24]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 f820 	bl	8004bd0 <__sfp>
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 f81c 	bl	8004bd0 <__sfp>
 8004b98:	60a0      	str	r0, [r4, #8]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f818 	bl	8004bd0 <__sfp>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60e0      	str	r0, [r4, #12]
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	6860      	ldr	r0, [r4, #4]
 8004ba8:	f7ff ff82 	bl	8004ab0 <std>
 8004bac:	68a0      	ldr	r0, [r4, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2109      	movs	r1, #9
 8004bb2:	f7ff ff7d 	bl	8004ab0 <std>
 8004bb6:	68e0      	ldr	r0, [r4, #12]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	2112      	movs	r1, #18
 8004bbc:	f7ff ff78 	bl	8004ab0 <std>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	61a3      	str	r3, [r4, #24]
 8004bc4:	e7d2      	b.n	8004b6c <__sinit+0xc>
 8004bc6:	bf00      	nop
 8004bc8:	08005ae4 	.word	0x08005ae4
 8004bcc:	08004af9 	.word	0x08004af9

08004bd0 <__sfp>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	f7ff ffac 	bl	8004b30 <__sfp_lock_acquire>
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <__sfp+0x84>)
 8004bda:	681e      	ldr	r6, [r3, #0]
 8004bdc:	69b3      	ldr	r3, [r6, #24]
 8004bde:	b913      	cbnz	r3, 8004be6 <__sfp+0x16>
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff ffbd 	bl	8004b60 <__sinit>
 8004be6:	3648      	adds	r6, #72	; 0x48
 8004be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	d503      	bpl.n	8004bf8 <__sfp+0x28>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	b30b      	cbz	r3, 8004c38 <__sfp+0x68>
 8004bf4:	6836      	ldr	r6, [r6, #0]
 8004bf6:	e7f7      	b.n	8004be8 <__sfp+0x18>
 8004bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bfc:	b9d5      	cbnz	r5, 8004c34 <__sfp+0x64>
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <__sfp+0x88>)
 8004c00:	60e3      	str	r3, [r4, #12]
 8004c02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c06:	6665      	str	r5, [r4, #100]	; 0x64
 8004c08:	f000 f859 	bl	8004cbe <__retarget_lock_init_recursive>
 8004c0c:	f7ff ff96 	bl	8004b3c <__sfp_lock_release>
 8004c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	61a5      	str	r5, [r4, #24]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c24:	f7ff fc38 	bl	8004498 <memset>
 8004c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c30:	4620      	mov	r0, r4
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c34:	3468      	adds	r4, #104	; 0x68
 8004c36:	e7d9      	b.n	8004bec <__sfp+0x1c>
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f7ff ff62 	bl	8004b04 <__sfmoreglue>
 8004c40:	4604      	mov	r4, r0
 8004c42:	6030      	str	r0, [r6, #0]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1d5      	bne.n	8004bf4 <__sfp+0x24>
 8004c48:	f7ff ff78 	bl	8004b3c <__sfp_lock_release>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	e7ee      	b.n	8004c30 <__sfp+0x60>
 8004c52:	bf00      	nop
 8004c54:	08005ae4 	.word	0x08005ae4
 8004c58:	ffff0001 	.word	0xffff0001

08004c5c <fiprintf>:
 8004c5c:	b40e      	push	{r1, r2, r3}
 8004c5e:	b503      	push	{r0, r1, lr}
 8004c60:	4601      	mov	r1, r0
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <fiprintf+0x20>)
 8004c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	f000 f8c3 	bl	8004df8 <_vfiprintf_r>
 8004c72:	b002      	add	sp, #8
 8004c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c78:	b003      	add	sp, #12
 8004c7a:	4770      	bx	lr
 8004c7c:	2000002c 	.word	0x2000002c

08004c80 <_fwalk_reent>:
 8004c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c84:	4606      	mov	r6, r0
 8004c86:	4688      	mov	r8, r1
 8004c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c8c:	2700      	movs	r7, #0
 8004c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c92:	f1b9 0901 	subs.w	r9, r9, #1
 8004c96:	d505      	bpl.n	8004ca4 <_fwalk_reent+0x24>
 8004c98:	6824      	ldr	r4, [r4, #0]
 8004c9a:	2c00      	cmp	r4, #0
 8004c9c:	d1f7      	bne.n	8004c8e <_fwalk_reent+0xe>
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca4:	89ab      	ldrh	r3, [r5, #12]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d907      	bls.n	8004cba <_fwalk_reent+0x3a>
 8004caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	d003      	beq.n	8004cba <_fwalk_reent+0x3a>
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	47c0      	blx	r8
 8004cb8:	4307      	orrs	r7, r0
 8004cba:	3568      	adds	r5, #104	; 0x68
 8004cbc:	e7e9      	b.n	8004c92 <_fwalk_reent+0x12>

08004cbe <__retarget_lock_init_recursive>:
 8004cbe:	4770      	bx	lr

08004cc0 <__retarget_lock_acquire_recursive>:
 8004cc0:	4770      	bx	lr

08004cc2 <__retarget_lock_release_recursive>:
 8004cc2:	4770      	bx	lr

08004cc4 <__swhatbuf_r>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	460e      	mov	r6, r1
 8004cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	b096      	sub	sp, #88	; 0x58
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	da07      	bge.n	8004ce6 <__swhatbuf_r+0x22>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	89b3      	ldrh	r3, [r6, #12]
 8004cdc:	061a      	lsls	r2, r3, #24
 8004cde:	d410      	bmi.n	8004d02 <__swhatbuf_r+0x3e>
 8004ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce4:	e00e      	b.n	8004d04 <__swhatbuf_r+0x40>
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	f000 fcae 	bl	8005648 <_fstat_r>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	dbf2      	blt.n	8004cd6 <__swhatbuf_r+0x12>
 8004cf0:	9a01      	ldr	r2, [sp, #4]
 8004cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cfa:	425a      	negs	r2, r3
 8004cfc:	415a      	adcs	r2, r3
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	e7ee      	b.n	8004ce0 <__swhatbuf_r+0x1c>
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	2000      	movs	r0, #0
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	b016      	add	sp, #88	; 0x58
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}

08004d0c <__smakebuf_r>:
 8004d0c:	898b      	ldrh	r3, [r1, #12]
 8004d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d10:	079d      	lsls	r5, r3, #30
 8004d12:	4606      	mov	r6, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	d507      	bpl.n	8004d28 <__smakebuf_r+0x1c>
 8004d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	2301      	movs	r3, #1
 8004d22:	6163      	str	r3, [r4, #20]
 8004d24:	b002      	add	sp, #8
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	ab01      	add	r3, sp, #4
 8004d2a:	466a      	mov	r2, sp
 8004d2c:	f7ff ffca 	bl	8004cc4 <__swhatbuf_r>
 8004d30:	9900      	ldr	r1, [sp, #0]
 8004d32:	4605      	mov	r5, r0
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7ff fc07 	bl	8004548 <_malloc_r>
 8004d3a:	b948      	cbnz	r0, 8004d50 <__smakebuf_r+0x44>
 8004d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d40:	059a      	lsls	r2, r3, #22
 8004d42:	d4ef      	bmi.n	8004d24 <__smakebuf_r+0x18>
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	e7e3      	b.n	8004d18 <__smakebuf_r+0xc>
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <__smakebuf_r+0x7c>)
 8004d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	9b00      	ldr	r3, [sp, #0]
 8004d60:	6163      	str	r3, [r4, #20]
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	6120      	str	r0, [r4, #16]
 8004d66:	b15b      	cbz	r3, 8004d80 <__smakebuf_r+0x74>
 8004d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 fc7d 	bl	800566c <_isatty_r>
 8004d72:	b128      	cbz	r0, 8004d80 <__smakebuf_r+0x74>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	89a0      	ldrh	r0, [r4, #12]
 8004d82:	4305      	orrs	r5, r0
 8004d84:	81a5      	strh	r5, [r4, #12]
 8004d86:	e7cd      	b.n	8004d24 <__smakebuf_r+0x18>
 8004d88:	08004af9 	.word	0x08004af9

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f7ff bf97 	b.w	8004cc0 <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	200001d4 	.word	0x200001d4

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f7ff bf92 	b.w	8004cc2 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	200001d4 	.word	0x200001d4

08004da4 <__sfputc_r>:
 8004da4:	6893      	ldr	r3, [r2, #8]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	b410      	push	{r4}
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	da08      	bge.n	8004dc2 <__sfputc_r+0x1e>
 8004db0:	6994      	ldr	r4, [r2, #24]
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	db01      	blt.n	8004dba <__sfputc_r+0x16>
 8004db6:	290a      	cmp	r1, #10
 8004db8:	d103      	bne.n	8004dc2 <__sfputc_r+0x1e>
 8004dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dbe:	f000 bb6b 	b.w	8005498 <__swbuf_r>
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	1c58      	adds	r0, r3, #1
 8004dc6:	6010      	str	r0, [r2, #0]
 8004dc8:	7019      	strb	r1, [r3, #0]
 8004dca:	4608      	mov	r0, r1
 8004dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <__sfputs_r>:
 8004dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	18d5      	adds	r5, r2, r3
 8004ddc:	42ac      	cmp	r4, r5
 8004dde:	d101      	bne.n	8004de4 <__sfputs_r+0x12>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e007      	b.n	8004df4 <__sfputs_r+0x22>
 8004de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de8:	463a      	mov	r2, r7
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ffda 	bl	8004da4 <__sfputc_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d1f3      	bne.n	8004ddc <__sfputs_r+0xa>
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df8 <_vfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	b09d      	sub	sp, #116	; 0x74
 8004e00:	4614      	mov	r4, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	4606      	mov	r6, r0
 8004e06:	b118      	cbz	r0, 8004e10 <_vfiprintf_r+0x18>
 8004e08:	6983      	ldr	r3, [r0, #24]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_vfiprintf_r+0x18>
 8004e0c:	f7ff fea8 	bl	8004b60 <__sinit>
 8004e10:	4b89      	ldr	r3, [pc, #548]	; (8005038 <_vfiprintf_r+0x240>)
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d11b      	bne.n	8004e4e <_vfiprintf_r+0x56>
 8004e16:	6875      	ldr	r5, [r6, #4]
 8004e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e1a:	07d9      	lsls	r1, r3, #31
 8004e1c:	d405      	bmi.n	8004e2a <_vfiprintf_r+0x32>
 8004e1e:	89ab      	ldrh	r3, [r5, #12]
 8004e20:	059a      	lsls	r2, r3, #22
 8004e22:	d402      	bmi.n	8004e2a <_vfiprintf_r+0x32>
 8004e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e26:	f7ff ff4b 	bl	8004cc0 <__retarget_lock_acquire_recursive>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	d501      	bpl.n	8004e34 <_vfiprintf_r+0x3c>
 8004e30:	692b      	ldr	r3, [r5, #16]
 8004e32:	b9eb      	cbnz	r3, 8004e70 <_vfiprintf_r+0x78>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 fb80 	bl	800553c <__swsetup_r>
 8004e3c:	b1c0      	cbz	r0, 8004e70 <_vfiprintf_r+0x78>
 8004e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e40:	07dc      	lsls	r4, r3, #31
 8004e42:	d50e      	bpl.n	8004e62 <_vfiprintf_r+0x6a>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e48:	b01d      	add	sp, #116	; 0x74
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <_vfiprintf_r+0x244>)
 8004e50:	429d      	cmp	r5, r3
 8004e52:	d101      	bne.n	8004e58 <_vfiprintf_r+0x60>
 8004e54:	68b5      	ldr	r5, [r6, #8]
 8004e56:	e7df      	b.n	8004e18 <_vfiprintf_r+0x20>
 8004e58:	4b79      	ldr	r3, [pc, #484]	; (8005040 <_vfiprintf_r+0x248>)
 8004e5a:	429d      	cmp	r5, r3
 8004e5c:	bf08      	it	eq
 8004e5e:	68f5      	ldreq	r5, [r6, #12]
 8004e60:	e7da      	b.n	8004e18 <_vfiprintf_r+0x20>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	0598      	lsls	r0, r3, #22
 8004e66:	d4ed      	bmi.n	8004e44 <_vfiprintf_r+0x4c>
 8004e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e6a:	f7ff ff2a 	bl	8004cc2 <__retarget_lock_release_recursive>
 8004e6e:	e7e9      	b.n	8004e44 <_vfiprintf_r+0x4c>
 8004e70:	2300      	movs	r3, #0
 8004e72:	9309      	str	r3, [sp, #36]	; 0x24
 8004e74:	2320      	movs	r3, #32
 8004e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7e:	2330      	movs	r3, #48	; 0x30
 8004e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005044 <_vfiprintf_r+0x24c>
 8004e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e88:	f04f 0901 	mov.w	r9, #1
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	469a      	mov	sl, r3
 8004e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e94:	b10a      	cbz	r2, 8004e9a <_vfiprintf_r+0xa2>
 8004e96:	2a25      	cmp	r2, #37	; 0x25
 8004e98:	d1f9      	bne.n	8004e8e <_vfiprintf_r+0x96>
 8004e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9e:	d00b      	beq.n	8004eb8 <_vfiprintf_r+0xc0>
 8004ea0:	465b      	mov	r3, fp
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f7ff ff93 	bl	8004dd2 <__sfputs_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	f000 80aa 	beq.w	8005006 <_vfiprintf_r+0x20e>
 8004eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb4:	445a      	add	r2, fp
 8004eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a2 	beq.w	8005006 <_vfiprintf_r+0x20e>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ecc:	f10a 0a01 	add.w	sl, sl, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eda:	4654      	mov	r4, sl
 8004edc:	2205      	movs	r2, #5
 8004ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee2:	4858      	ldr	r0, [pc, #352]	; (8005044 <_vfiprintf_r+0x24c>)
 8004ee4:	f7fb f97c 	bl	80001e0 <memchr>
 8004ee8:	9a04      	ldr	r2, [sp, #16]
 8004eea:	b9d8      	cbnz	r0, 8004f24 <_vfiprintf_r+0x12c>
 8004eec:	06d1      	lsls	r1, r2, #27
 8004eee:	bf44      	itt	mi
 8004ef0:	2320      	movmi	r3, #32
 8004ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef6:	0713      	lsls	r3, r2, #28
 8004ef8:	bf44      	itt	mi
 8004efa:	232b      	movmi	r3, #43	; 0x2b
 8004efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f00:	f89a 3000 	ldrb.w	r3, [sl]
 8004f04:	2b2a      	cmp	r3, #42	; 0x2a
 8004f06:	d015      	beq.n	8004f34 <_vfiprintf_r+0x13c>
 8004f08:	9a07      	ldr	r2, [sp, #28]
 8004f0a:	4654      	mov	r4, sl
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f04f 0c0a 	mov.w	ip, #10
 8004f12:	4621      	mov	r1, r4
 8004f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f18:	3b30      	subs	r3, #48	; 0x30
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d94e      	bls.n	8004fbc <_vfiprintf_r+0x1c4>
 8004f1e:	b1b0      	cbz	r0, 8004f4e <_vfiprintf_r+0x156>
 8004f20:	9207      	str	r2, [sp, #28]
 8004f22:	e014      	b.n	8004f4e <_vfiprintf_r+0x156>
 8004f24:	eba0 0308 	sub.w	r3, r0, r8
 8004f28:	fa09 f303 	lsl.w	r3, r9, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	46a2      	mov	sl, r4
 8004f32:	e7d2      	b.n	8004eda <_vfiprintf_r+0xe2>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d19      	adds	r1, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfbb      	ittet	lt
 8004f40:	425b      	neglt	r3, r3
 8004f42:	f042 0202 	orrlt.w	r2, r2, #2
 8004f46:	9307      	strge	r3, [sp, #28]
 8004f48:	9307      	strlt	r3, [sp, #28]
 8004f4a:	bfb8      	it	lt
 8004f4c:	9204      	strlt	r2, [sp, #16]
 8004f4e:	7823      	ldrb	r3, [r4, #0]
 8004f50:	2b2e      	cmp	r3, #46	; 0x2e
 8004f52:	d10c      	bne.n	8004f6e <_vfiprintf_r+0x176>
 8004f54:	7863      	ldrb	r3, [r4, #1]
 8004f56:	2b2a      	cmp	r3, #42	; 0x2a
 8004f58:	d135      	bne.n	8004fc6 <_vfiprintf_r+0x1ce>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	9203      	str	r2, [sp, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfb8      	it	lt
 8004f66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f6a:	3402      	adds	r4, #2
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005054 <_vfiprintf_r+0x25c>
 8004f72:	7821      	ldrb	r1, [r4, #0]
 8004f74:	2203      	movs	r2, #3
 8004f76:	4650      	mov	r0, sl
 8004f78:	f7fb f932 	bl	80001e0 <memchr>
 8004f7c:	b140      	cbz	r0, 8004f90 <_vfiprintf_r+0x198>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	eba0 000a 	sub.w	r0, r0, sl
 8004f84:	fa03 f000 	lsl.w	r0, r3, r0
 8004f88:	9b04      	ldr	r3, [sp, #16]
 8004f8a:	4303      	orrs	r3, r0
 8004f8c:	3401      	adds	r4, #1
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	482c      	ldr	r0, [pc, #176]	; (8005048 <_vfiprintf_r+0x250>)
 8004f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	f7fb f920 	bl	80001e0 <memchr>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d03f      	beq.n	8005024 <_vfiprintf_r+0x22c>
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <_vfiprintf_r+0x254>)
 8004fa6:	bb1b      	cbnz	r3, 8004ff0 <_vfiprintf_r+0x1f8>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	3307      	adds	r3, #7
 8004fac:	f023 0307 	bic.w	r3, r3, #7
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	9303      	str	r3, [sp, #12]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	443b      	add	r3, r7
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	e767      	b.n	8004e8c <_vfiprintf_r+0x94>
 8004fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7a5      	b.n	8004f12 <_vfiprintf_r+0x11a>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	3401      	adds	r4, #1
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 0c0a 	mov.w	ip, #10
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd8:	3a30      	subs	r2, #48	; 0x30
 8004fda:	2a09      	cmp	r2, #9
 8004fdc:	d903      	bls.n	8004fe6 <_vfiprintf_r+0x1ee>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0c5      	beq.n	8004f6e <_vfiprintf_r+0x176>
 8004fe2:	9105      	str	r1, [sp, #20]
 8004fe4:	e7c3      	b.n	8004f6e <_vfiprintf_r+0x176>
 8004fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fea:	4604      	mov	r4, r0
 8004fec:	2301      	movs	r3, #1
 8004fee:	e7f0      	b.n	8004fd2 <_vfiprintf_r+0x1da>
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <_vfiprintf_r+0x258>)
 8004ff8:	a904      	add	r1, sp, #16
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f3af 8000 	nop.w
 8005000:	4607      	mov	r7, r0
 8005002:	1c78      	adds	r0, r7, #1
 8005004:	d1d6      	bne.n	8004fb4 <_vfiprintf_r+0x1bc>
 8005006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005008:	07d9      	lsls	r1, r3, #31
 800500a:	d405      	bmi.n	8005018 <_vfiprintf_r+0x220>
 800500c:	89ab      	ldrh	r3, [r5, #12]
 800500e:	059a      	lsls	r2, r3, #22
 8005010:	d402      	bmi.n	8005018 <_vfiprintf_r+0x220>
 8005012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005014:	f7ff fe55 	bl	8004cc2 <__retarget_lock_release_recursive>
 8005018:	89ab      	ldrh	r3, [r5, #12]
 800501a:	065b      	lsls	r3, r3, #25
 800501c:	f53f af12 	bmi.w	8004e44 <_vfiprintf_r+0x4c>
 8005020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005022:	e711      	b.n	8004e48 <_vfiprintf_r+0x50>
 8005024:	ab03      	add	r3, sp, #12
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	462a      	mov	r2, r5
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <_vfiprintf_r+0x258>)
 800502c:	a904      	add	r1, sp, #16
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f880 	bl	8005134 <_printf_i>
 8005034:	e7e4      	b.n	8005000 <_vfiprintf_r+0x208>
 8005036:	bf00      	nop
 8005038:	08005bbc 	.word	0x08005bbc
 800503c:	08005bdc 	.word	0x08005bdc
 8005040:	08005b9c 	.word	0x08005b9c
 8005044:	08005bfc 	.word	0x08005bfc
 8005048:	08005c06 	.word	0x08005c06
 800504c:	00000000 	.word	0x00000000
 8005050:	08004dd3 	.word	0x08004dd3
 8005054:	08005c02 	.word	0x08005c02

08005058 <_printf_common>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	4616      	mov	r6, r2
 800505e:	4699      	mov	r9, r3
 8005060:	688a      	ldr	r2, [r1, #8]
 8005062:	690b      	ldr	r3, [r1, #16]
 8005064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005068:	4293      	cmp	r3, r2
 800506a:	bfb8      	it	lt
 800506c:	4613      	movlt	r3, r2
 800506e:	6033      	str	r3, [r6, #0]
 8005070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005074:	4607      	mov	r7, r0
 8005076:	460c      	mov	r4, r1
 8005078:	b10a      	cbz	r2, 800507e <_printf_common+0x26>
 800507a:	3301      	adds	r3, #1
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	0699      	lsls	r1, r3, #26
 8005082:	bf42      	ittt	mi
 8005084:	6833      	ldrmi	r3, [r6, #0]
 8005086:	3302      	addmi	r3, #2
 8005088:	6033      	strmi	r3, [r6, #0]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d106      	bne.n	80050a0 <_printf_common+0x48>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	6832      	ldr	r2, [r6, #0]
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	42ab      	cmp	r3, r5
 800509e:	dc26      	bgt.n	80050ee <_printf_common+0x96>
 80050a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a4:	1e13      	subs	r3, r2, #0
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	bf18      	it	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	0692      	lsls	r2, r2, #26
 80050ae:	d42b      	bmi.n	8005108 <_printf_common+0xb0>
 80050b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b4:	4649      	mov	r1, r9
 80050b6:	4638      	mov	r0, r7
 80050b8:	47c0      	blx	r8
 80050ba:	3001      	adds	r0, #1
 80050bc:	d01e      	beq.n	80050fc <_printf_common+0xa4>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	68e5      	ldr	r5, [r4, #12]
 80050c2:	6832      	ldr	r2, [r6, #0]
 80050c4:	f003 0306 	and.w	r3, r3, #6
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	bf08      	it	eq
 80050cc:	1aad      	subeq	r5, r5, r2
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	bf0c      	ite	eq
 80050d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d8:	2500      	movne	r5, #0
 80050da:	4293      	cmp	r3, r2
 80050dc:	bfc4      	itt	gt
 80050de:	1a9b      	subgt	r3, r3, r2
 80050e0:	18ed      	addgt	r5, r5, r3
 80050e2:	2600      	movs	r6, #0
 80050e4:	341a      	adds	r4, #26
 80050e6:	42b5      	cmp	r5, r6
 80050e8:	d11a      	bne.n	8005120 <_printf_common+0xc8>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e008      	b.n	8005100 <_printf_common+0xa8>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4652      	mov	r2, sl
 80050f2:	4649      	mov	r1, r9
 80050f4:	4638      	mov	r0, r7
 80050f6:	47c0      	blx	r8
 80050f8:	3001      	adds	r0, #1
 80050fa:	d103      	bne.n	8005104 <_printf_common+0xac>
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005104:	3501      	adds	r5, #1
 8005106:	e7c6      	b.n	8005096 <_printf_common+0x3e>
 8005108:	18e1      	adds	r1, r4, r3
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	2030      	movs	r0, #48	; 0x30
 800510e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005112:	4422      	add	r2, r4
 8005114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800511c:	3302      	adds	r3, #2
 800511e:	e7c7      	b.n	80050b0 <_printf_common+0x58>
 8005120:	2301      	movs	r3, #1
 8005122:	4622      	mov	r2, r4
 8005124:	4649      	mov	r1, r9
 8005126:	4638      	mov	r0, r7
 8005128:	47c0      	blx	r8
 800512a:	3001      	adds	r0, #1
 800512c:	d0e6      	beq.n	80050fc <_printf_common+0xa4>
 800512e:	3601      	adds	r6, #1
 8005130:	e7d9      	b.n	80050e6 <_printf_common+0x8e>
	...

08005134 <_printf_i>:
 8005134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	460c      	mov	r4, r1
 800513a:	4691      	mov	r9, r2
 800513c:	7e27      	ldrb	r7, [r4, #24]
 800513e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005140:	2f78      	cmp	r7, #120	; 0x78
 8005142:	4680      	mov	r8, r0
 8005144:	469a      	mov	sl, r3
 8005146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800514a:	d807      	bhi.n	800515c <_printf_i+0x28>
 800514c:	2f62      	cmp	r7, #98	; 0x62
 800514e:	d80a      	bhi.n	8005166 <_printf_i+0x32>
 8005150:	2f00      	cmp	r7, #0
 8005152:	f000 80d8 	beq.w	8005306 <_printf_i+0x1d2>
 8005156:	2f58      	cmp	r7, #88	; 0x58
 8005158:	f000 80a3 	beq.w	80052a2 <_printf_i+0x16e>
 800515c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005164:	e03a      	b.n	80051dc <_printf_i+0xa8>
 8005166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800516a:	2b15      	cmp	r3, #21
 800516c:	d8f6      	bhi.n	800515c <_printf_i+0x28>
 800516e:	a001      	add	r0, pc, #4	; (adr r0, 8005174 <_printf_i+0x40>)
 8005170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051e1 	.word	0x080051e1
 800517c:	0800515d 	.word	0x0800515d
 8005180:	0800515d 	.word	0x0800515d
 8005184:	0800515d 	.word	0x0800515d
 8005188:	0800515d 	.word	0x0800515d
 800518c:	080051e1 	.word	0x080051e1
 8005190:	0800515d 	.word	0x0800515d
 8005194:	0800515d 	.word	0x0800515d
 8005198:	0800515d 	.word	0x0800515d
 800519c:	0800515d 	.word	0x0800515d
 80051a0:	080052ed 	.word	0x080052ed
 80051a4:	08005211 	.word	0x08005211
 80051a8:	080052cf 	.word	0x080052cf
 80051ac:	0800515d 	.word	0x0800515d
 80051b0:	0800515d 	.word	0x0800515d
 80051b4:	0800530f 	.word	0x0800530f
 80051b8:	0800515d 	.word	0x0800515d
 80051bc:	08005211 	.word	0x08005211
 80051c0:	0800515d 	.word	0x0800515d
 80051c4:	0800515d 	.word	0x0800515d
 80051c8:	080052d7 	.word	0x080052d7
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	600a      	str	r2, [r1, #0]
 80051d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051dc:	2301      	movs	r3, #1
 80051de:	e0a3      	b.n	8005328 <_printf_i+0x1f4>
 80051e0:	6825      	ldr	r5, [r4, #0]
 80051e2:	6808      	ldr	r0, [r1, #0]
 80051e4:	062e      	lsls	r6, r5, #24
 80051e6:	f100 0304 	add.w	r3, r0, #4
 80051ea:	d50a      	bpl.n	8005202 <_printf_i+0xce>
 80051ec:	6805      	ldr	r5, [r0, #0]
 80051ee:	600b      	str	r3, [r1, #0]
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	da03      	bge.n	80051fc <_printf_i+0xc8>
 80051f4:	232d      	movs	r3, #45	; 0x2d
 80051f6:	426d      	negs	r5, r5
 80051f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fc:	485e      	ldr	r0, [pc, #376]	; (8005378 <_printf_i+0x244>)
 80051fe:	230a      	movs	r3, #10
 8005200:	e019      	b.n	8005236 <_printf_i+0x102>
 8005202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005206:	6805      	ldr	r5, [r0, #0]
 8005208:	600b      	str	r3, [r1, #0]
 800520a:	bf18      	it	ne
 800520c:	b22d      	sxthne	r5, r5
 800520e:	e7ef      	b.n	80051f0 <_printf_i+0xbc>
 8005210:	680b      	ldr	r3, [r1, #0]
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	1d18      	adds	r0, r3, #4
 8005216:	6008      	str	r0, [r1, #0]
 8005218:	0628      	lsls	r0, r5, #24
 800521a:	d501      	bpl.n	8005220 <_printf_i+0xec>
 800521c:	681d      	ldr	r5, [r3, #0]
 800521e:	e002      	b.n	8005226 <_printf_i+0xf2>
 8005220:	0669      	lsls	r1, r5, #25
 8005222:	d5fb      	bpl.n	800521c <_printf_i+0xe8>
 8005224:	881d      	ldrh	r5, [r3, #0]
 8005226:	4854      	ldr	r0, [pc, #336]	; (8005378 <_printf_i+0x244>)
 8005228:	2f6f      	cmp	r7, #111	; 0x6f
 800522a:	bf0c      	ite	eq
 800522c:	2308      	moveq	r3, #8
 800522e:	230a      	movne	r3, #10
 8005230:	2100      	movs	r1, #0
 8005232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005236:	6866      	ldr	r6, [r4, #4]
 8005238:	60a6      	str	r6, [r4, #8]
 800523a:	2e00      	cmp	r6, #0
 800523c:	bfa2      	ittt	ge
 800523e:	6821      	ldrge	r1, [r4, #0]
 8005240:	f021 0104 	bicge.w	r1, r1, #4
 8005244:	6021      	strge	r1, [r4, #0]
 8005246:	b90d      	cbnz	r5, 800524c <_printf_i+0x118>
 8005248:	2e00      	cmp	r6, #0
 800524a:	d04d      	beq.n	80052e8 <_printf_i+0x1b4>
 800524c:	4616      	mov	r6, r2
 800524e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005252:	fb03 5711 	mls	r7, r3, r1, r5
 8005256:	5dc7      	ldrb	r7, [r0, r7]
 8005258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800525c:	462f      	mov	r7, r5
 800525e:	42bb      	cmp	r3, r7
 8005260:	460d      	mov	r5, r1
 8005262:	d9f4      	bls.n	800524e <_printf_i+0x11a>
 8005264:	2b08      	cmp	r3, #8
 8005266:	d10b      	bne.n	8005280 <_printf_i+0x14c>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	07df      	lsls	r7, r3, #31
 800526c:	d508      	bpl.n	8005280 <_printf_i+0x14c>
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	4299      	cmp	r1, r3
 8005274:	bfde      	ittt	le
 8005276:	2330      	movle	r3, #48	; 0x30
 8005278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800527c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005280:	1b92      	subs	r2, r2, r6
 8005282:	6122      	str	r2, [r4, #16]
 8005284:	f8cd a000 	str.w	sl, [sp]
 8005288:	464b      	mov	r3, r9
 800528a:	aa03      	add	r2, sp, #12
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f7ff fee2 	bl	8005058 <_printf_common>
 8005294:	3001      	adds	r0, #1
 8005296:	d14c      	bne.n	8005332 <_printf_i+0x1fe>
 8005298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800529c:	b004      	add	sp, #16
 800529e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a2:	4835      	ldr	r0, [pc, #212]	; (8005378 <_printf_i+0x244>)
 80052a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	680e      	ldr	r6, [r1, #0]
 80052ac:	061f      	lsls	r7, r3, #24
 80052ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80052b2:	600e      	str	r6, [r1, #0]
 80052b4:	d514      	bpl.n	80052e0 <_printf_i+0x1ac>
 80052b6:	07d9      	lsls	r1, r3, #31
 80052b8:	bf44      	itt	mi
 80052ba:	f043 0320 	orrmi.w	r3, r3, #32
 80052be:	6023      	strmi	r3, [r4, #0]
 80052c0:	b91d      	cbnz	r5, 80052ca <_printf_i+0x196>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f023 0320 	bic.w	r3, r3, #32
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	2310      	movs	r3, #16
 80052cc:	e7b0      	b.n	8005230 <_printf_i+0xfc>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f043 0320 	orr.w	r3, r3, #32
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	2378      	movs	r3, #120	; 0x78
 80052d8:	4828      	ldr	r0, [pc, #160]	; (800537c <_printf_i+0x248>)
 80052da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052de:	e7e3      	b.n	80052a8 <_printf_i+0x174>
 80052e0:	065e      	lsls	r6, r3, #25
 80052e2:	bf48      	it	mi
 80052e4:	b2ad      	uxthmi	r5, r5
 80052e6:	e7e6      	b.n	80052b6 <_printf_i+0x182>
 80052e8:	4616      	mov	r6, r2
 80052ea:	e7bb      	b.n	8005264 <_printf_i+0x130>
 80052ec:	680b      	ldr	r3, [r1, #0]
 80052ee:	6826      	ldr	r6, [r4, #0]
 80052f0:	6960      	ldr	r0, [r4, #20]
 80052f2:	1d1d      	adds	r5, r3, #4
 80052f4:	600d      	str	r5, [r1, #0]
 80052f6:	0635      	lsls	r5, r6, #24
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	d501      	bpl.n	8005300 <_printf_i+0x1cc>
 80052fc:	6018      	str	r0, [r3, #0]
 80052fe:	e002      	b.n	8005306 <_printf_i+0x1d2>
 8005300:	0671      	lsls	r1, r6, #25
 8005302:	d5fb      	bpl.n	80052fc <_printf_i+0x1c8>
 8005304:	8018      	strh	r0, [r3, #0]
 8005306:	2300      	movs	r3, #0
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	4616      	mov	r6, r2
 800530c:	e7ba      	b.n	8005284 <_printf_i+0x150>
 800530e:	680b      	ldr	r3, [r1, #0]
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	600a      	str	r2, [r1, #0]
 8005314:	681e      	ldr	r6, [r3, #0]
 8005316:	6862      	ldr	r2, [r4, #4]
 8005318:	2100      	movs	r1, #0
 800531a:	4630      	mov	r0, r6
 800531c:	f7fa ff60 	bl	80001e0 <memchr>
 8005320:	b108      	cbz	r0, 8005326 <_printf_i+0x1f2>
 8005322:	1b80      	subs	r0, r0, r6
 8005324:	6060      	str	r0, [r4, #4]
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	2300      	movs	r3, #0
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	e7a8      	b.n	8005284 <_printf_i+0x150>
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	4632      	mov	r2, r6
 8005336:	4649      	mov	r1, r9
 8005338:	4640      	mov	r0, r8
 800533a:	47d0      	blx	sl
 800533c:	3001      	adds	r0, #1
 800533e:	d0ab      	beq.n	8005298 <_printf_i+0x164>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	079b      	lsls	r3, r3, #30
 8005344:	d413      	bmi.n	800536e <_printf_i+0x23a>
 8005346:	68e0      	ldr	r0, [r4, #12]
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	4298      	cmp	r0, r3
 800534c:	bfb8      	it	lt
 800534e:	4618      	movlt	r0, r3
 8005350:	e7a4      	b.n	800529c <_printf_i+0x168>
 8005352:	2301      	movs	r3, #1
 8005354:	4632      	mov	r2, r6
 8005356:	4649      	mov	r1, r9
 8005358:	4640      	mov	r0, r8
 800535a:	47d0      	blx	sl
 800535c:	3001      	adds	r0, #1
 800535e:	d09b      	beq.n	8005298 <_printf_i+0x164>
 8005360:	3501      	adds	r5, #1
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	9903      	ldr	r1, [sp, #12]
 8005366:	1a5b      	subs	r3, r3, r1
 8005368:	42ab      	cmp	r3, r5
 800536a:	dcf2      	bgt.n	8005352 <_printf_i+0x21e>
 800536c:	e7eb      	b.n	8005346 <_printf_i+0x212>
 800536e:	2500      	movs	r5, #0
 8005370:	f104 0619 	add.w	r6, r4, #25
 8005374:	e7f5      	b.n	8005362 <_printf_i+0x22e>
 8005376:	bf00      	nop
 8005378:	08005c0d 	.word	0x08005c0d
 800537c:	08005c1e 	.word	0x08005c1e

08005380 <_putc_r>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	460d      	mov	r5, r1
 8005384:	4614      	mov	r4, r2
 8005386:	4606      	mov	r6, r0
 8005388:	b118      	cbz	r0, 8005392 <_putc_r+0x12>
 800538a:	6983      	ldr	r3, [r0, #24]
 800538c:	b90b      	cbnz	r3, 8005392 <_putc_r+0x12>
 800538e:	f7ff fbe7 	bl	8004b60 <__sinit>
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <_putc_r+0x84>)
 8005394:	429c      	cmp	r4, r3
 8005396:	d124      	bne.n	80053e2 <_putc_r+0x62>
 8005398:	6874      	ldr	r4, [r6, #4]
 800539a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800539c:	07d8      	lsls	r0, r3, #31
 800539e:	d405      	bmi.n	80053ac <_putc_r+0x2c>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	0599      	lsls	r1, r3, #22
 80053a4:	d402      	bmi.n	80053ac <_putc_r+0x2c>
 80053a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a8:	f7ff fc8a 	bl	8004cc0 <__retarget_lock_acquire_recursive>
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	60a3      	str	r3, [r4, #8]
 80053b4:	da05      	bge.n	80053c2 <_putc_r+0x42>
 80053b6:	69a2      	ldr	r2, [r4, #24]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	db1c      	blt.n	80053f6 <_putc_r+0x76>
 80053bc:	b2eb      	uxtb	r3, r5
 80053be:	2b0a      	cmp	r3, #10
 80053c0:	d019      	beq.n	80053f6 <_putc_r+0x76>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	701d      	strb	r5, [r3, #0]
 80053ca:	b2ed      	uxtb	r5, r5
 80053cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ce:	07da      	lsls	r2, r3, #31
 80053d0:	d405      	bmi.n	80053de <_putc_r+0x5e>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	d402      	bmi.n	80053de <_putc_r+0x5e>
 80053d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053da:	f7ff fc72 	bl	8004cc2 <__retarget_lock_release_recursive>
 80053de:	4628      	mov	r0, r5
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <_putc_r+0x88>)
 80053e4:	429c      	cmp	r4, r3
 80053e6:	d101      	bne.n	80053ec <_putc_r+0x6c>
 80053e8:	68b4      	ldr	r4, [r6, #8]
 80053ea:	e7d6      	b.n	800539a <_putc_r+0x1a>
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <_putc_r+0x8c>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	bf08      	it	eq
 80053f2:	68f4      	ldreq	r4, [r6, #12]
 80053f4:	e7d1      	b.n	800539a <_putc_r+0x1a>
 80053f6:	4629      	mov	r1, r5
 80053f8:	4622      	mov	r2, r4
 80053fa:	4630      	mov	r0, r6
 80053fc:	f000 f84c 	bl	8005498 <__swbuf_r>
 8005400:	4605      	mov	r5, r0
 8005402:	e7e3      	b.n	80053cc <_putc_r+0x4c>
 8005404:	08005bbc 	.word	0x08005bbc
 8005408:	08005bdc 	.word	0x08005bdc
 800540c:	08005b9c 	.word	0x08005b9c

08005410 <__sread>:
 8005410:	b510      	push	{r4, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	f000 f94a 	bl	80056b0 <_read_r>
 800541c:	2800      	cmp	r0, #0
 800541e:	bfab      	itete	ge
 8005420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005422:	89a3      	ldrhlt	r3, [r4, #12]
 8005424:	181b      	addge	r3, r3, r0
 8005426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542a:	bfac      	ite	ge
 800542c:	6563      	strge	r3, [r4, #84]	; 0x54
 800542e:	81a3      	strhlt	r3, [r4, #12]
 8005430:	bd10      	pop	{r4, pc}

08005432 <__swrite>:
 8005432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005436:	461f      	mov	r7, r3
 8005438:	898b      	ldrh	r3, [r1, #12]
 800543a:	05db      	lsls	r3, r3, #23
 800543c:	4605      	mov	r5, r0
 800543e:	460c      	mov	r4, r1
 8005440:	4616      	mov	r6, r2
 8005442:	d505      	bpl.n	8005450 <__swrite+0x1e>
 8005444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f000 f91e 	bl	800568c <_lseek_r>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	4628      	mov	r0, r5
 8005462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005466:	f7fc b979 	b.w	800175c <_write_r>

0800546a <__sseek>:
 800546a:	b510      	push	{r4, lr}
 800546c:	460c      	mov	r4, r1
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 f90b 	bl	800568c <_lseek_r>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	bf15      	itete	ne
 800547c:	6560      	strne	r0, [r4, #84]	; 0x54
 800547e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005486:	81a3      	strheq	r3, [r4, #12]
 8005488:	bf18      	it	ne
 800548a:	81a3      	strhne	r3, [r4, #12]
 800548c:	bd10      	pop	{r4, pc}

0800548e <__sclose>:
 800548e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005492:	f000 b8c9 	b.w	8005628 <_close_r>
	...

08005498 <__swbuf_r>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	460e      	mov	r6, r1
 800549c:	4614      	mov	r4, r2
 800549e:	4605      	mov	r5, r0
 80054a0:	b118      	cbz	r0, 80054aa <__swbuf_r+0x12>
 80054a2:	6983      	ldr	r3, [r0, #24]
 80054a4:	b90b      	cbnz	r3, 80054aa <__swbuf_r+0x12>
 80054a6:	f7ff fb5b 	bl	8004b60 <__sinit>
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <__swbuf_r+0x98>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d12b      	bne.n	8005508 <__swbuf_r+0x70>
 80054b0:	686c      	ldr	r4, [r5, #4]
 80054b2:	69a3      	ldr	r3, [r4, #24]
 80054b4:	60a3      	str	r3, [r4, #8]
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	071a      	lsls	r2, r3, #28
 80054ba:	d52f      	bpl.n	800551c <__swbuf_r+0x84>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	b36b      	cbz	r3, 800551c <__swbuf_r+0x84>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	1ac0      	subs	r0, r0, r3
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	b2f6      	uxtb	r6, r6
 80054ca:	4283      	cmp	r3, r0
 80054cc:	4637      	mov	r7, r6
 80054ce:	dc04      	bgt.n	80054da <__swbuf_r+0x42>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7ff fab0 	bl	8004a38 <_fflush_r>
 80054d8:	bb30      	cbnz	r0, 8005528 <__swbuf_r+0x90>
 80054da:	68a3      	ldr	r3, [r4, #8]
 80054dc:	3b01      	subs	r3, #1
 80054de:	60a3      	str	r3, [r4, #8]
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	6022      	str	r2, [r4, #0]
 80054e6:	701e      	strb	r6, [r3, #0]
 80054e8:	6963      	ldr	r3, [r4, #20]
 80054ea:	3001      	adds	r0, #1
 80054ec:	4283      	cmp	r3, r0
 80054ee:	d004      	beq.n	80054fa <__swbuf_r+0x62>
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	07db      	lsls	r3, r3, #31
 80054f4:	d506      	bpl.n	8005504 <__swbuf_r+0x6c>
 80054f6:	2e0a      	cmp	r6, #10
 80054f8:	d104      	bne.n	8005504 <__swbuf_r+0x6c>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f7ff fa9b 	bl	8004a38 <_fflush_r>
 8005502:	b988      	cbnz	r0, 8005528 <__swbuf_r+0x90>
 8005504:	4638      	mov	r0, r7
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <__swbuf_r+0x9c>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d101      	bne.n	8005512 <__swbuf_r+0x7a>
 800550e:	68ac      	ldr	r4, [r5, #8]
 8005510:	e7cf      	b.n	80054b2 <__swbuf_r+0x1a>
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <__swbuf_r+0xa0>)
 8005514:	429c      	cmp	r4, r3
 8005516:	bf08      	it	eq
 8005518:	68ec      	ldreq	r4, [r5, #12]
 800551a:	e7ca      	b.n	80054b2 <__swbuf_r+0x1a>
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f80c 	bl	800553c <__swsetup_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	d0cb      	beq.n	80054c0 <__swbuf_r+0x28>
 8005528:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800552c:	e7ea      	b.n	8005504 <__swbuf_r+0x6c>
 800552e:	bf00      	nop
 8005530:	08005bbc 	.word	0x08005bbc
 8005534:	08005bdc 	.word	0x08005bdc
 8005538:	08005b9c 	.word	0x08005b9c

0800553c <__swsetup_r>:
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <__swsetup_r+0xcc>)
 800553e:	b570      	push	{r4, r5, r6, lr}
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	b125      	cbz	r5, 8005552 <__swsetup_r+0x16>
 8005548:	69ab      	ldr	r3, [r5, #24]
 800554a:	b913      	cbnz	r3, 8005552 <__swsetup_r+0x16>
 800554c:	4628      	mov	r0, r5
 800554e:	f7ff fb07 	bl	8004b60 <__sinit>
 8005552:	4b2e      	ldr	r3, [pc, #184]	; (800560c <__swsetup_r+0xd0>)
 8005554:	429c      	cmp	r4, r3
 8005556:	d10f      	bne.n	8005578 <__swsetup_r+0x3c>
 8005558:	686c      	ldr	r4, [r5, #4]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005560:	0719      	lsls	r1, r3, #28
 8005562:	d42c      	bmi.n	80055be <__swsetup_r+0x82>
 8005564:	06dd      	lsls	r5, r3, #27
 8005566:	d411      	bmi.n	800558c <__swsetup_r+0x50>
 8005568:	2309      	movs	r3, #9
 800556a:	6033      	str	r3, [r6, #0]
 800556c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005576:	e03e      	b.n	80055f6 <__swsetup_r+0xba>
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <__swsetup_r+0xd4>)
 800557a:	429c      	cmp	r4, r3
 800557c:	d101      	bne.n	8005582 <__swsetup_r+0x46>
 800557e:	68ac      	ldr	r4, [r5, #8]
 8005580:	e7eb      	b.n	800555a <__swsetup_r+0x1e>
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <__swsetup_r+0xd8>)
 8005584:	429c      	cmp	r4, r3
 8005586:	bf08      	it	eq
 8005588:	68ec      	ldreq	r4, [r5, #12]
 800558a:	e7e6      	b.n	800555a <__swsetup_r+0x1e>
 800558c:	0758      	lsls	r0, r3, #29
 800558e:	d512      	bpl.n	80055b6 <__swsetup_r+0x7a>
 8005590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005592:	b141      	cbz	r1, 80055a6 <__swsetup_r+0x6a>
 8005594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005598:	4299      	cmp	r1, r3
 800559a:	d002      	beq.n	80055a2 <__swsetup_r+0x66>
 800559c:	4630      	mov	r0, r6
 800559e:	f7fe ff83 	bl	80044a8 <_free_r>
 80055a2:	2300      	movs	r3, #0
 80055a4:	6363      	str	r3, [r4, #52]	; 0x34
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	b94b      	cbnz	r3, 80055d6 <__swsetup_r+0x9a>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	d003      	beq.n	80055d6 <__swsetup_r+0x9a>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff fb9b 	bl	8004d0c <__smakebuf_r>
 80055d6:	89a0      	ldrh	r0, [r4, #12]
 80055d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055dc:	f010 0301 	ands.w	r3, r0, #1
 80055e0:	d00a      	beq.n	80055f8 <__swsetup_r+0xbc>
 80055e2:	2300      	movs	r3, #0
 80055e4:	60a3      	str	r3, [r4, #8]
 80055e6:	6963      	ldr	r3, [r4, #20]
 80055e8:	425b      	negs	r3, r3
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	b943      	cbnz	r3, 8005602 <__swsetup_r+0xc6>
 80055f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055f4:	d1ba      	bne.n	800556c <__swsetup_r+0x30>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	0781      	lsls	r1, r0, #30
 80055fa:	bf58      	it	pl
 80055fc:	6963      	ldrpl	r3, [r4, #20]
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	e7f4      	b.n	80055ec <__swsetup_r+0xb0>
 8005602:	2000      	movs	r0, #0
 8005604:	e7f7      	b.n	80055f6 <__swsetup_r+0xba>
 8005606:	bf00      	nop
 8005608:	2000002c 	.word	0x2000002c
 800560c:	08005bbc 	.word	0x08005bbc
 8005610:	08005bdc 	.word	0x08005bdc
 8005614:	08005b9c 	.word	0x08005b9c

08005618 <abort>:
 8005618:	b508      	push	{r3, lr}
 800561a:	2006      	movs	r0, #6
 800561c:	f000 f882 	bl	8005724 <raise>
 8005620:	2001      	movs	r0, #1
 8005622:	f7fe fdb9 	bl	8004198 <_exit>
	...

08005628 <_close_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d06      	ldr	r5, [pc, #24]	; (8005644 <_close_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fe fdd7 	bl	80041e6 <_close>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_close_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_close_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200001dc 	.word	0x200001dc

08005648 <_fstat_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d07      	ldr	r5, [pc, #28]	; (8005668 <_fstat_r+0x20>)
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	f7fe fdd2 	bl	80041fe <_fstat>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d102      	bne.n	8005664 <_fstat_r+0x1c>
 800565e:	682b      	ldr	r3, [r5, #0]
 8005660:	b103      	cbz	r3, 8005664 <_fstat_r+0x1c>
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	bd38      	pop	{r3, r4, r5, pc}
 8005666:	bf00      	nop
 8005668:	200001dc 	.word	0x200001dc

0800566c <_isatty_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4d06      	ldr	r5, [pc, #24]	; (8005688 <_isatty_r+0x1c>)
 8005670:	2300      	movs	r3, #0
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	602b      	str	r3, [r5, #0]
 8005678:	f7fe fdd1 	bl	800421e <_isatty>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_isatty_r+0x1a>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_isatty_r+0x1a>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	200001dc 	.word	0x200001dc

0800568c <_lseek_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	; (80056ac <_lseek_r+0x20>)
 8005690:	4604      	mov	r4, r0
 8005692:	4608      	mov	r0, r1
 8005694:	4611      	mov	r1, r2
 8005696:	2200      	movs	r2, #0
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fe fdca 	bl	8004234 <_lseek>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_lseek_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_lseek_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	200001dc 	.word	0x200001dc

080056b0 <_read_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_read_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fe fd74 	bl	80041ac <_read>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_read_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_read_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200001dc 	.word	0x200001dc

080056d4 <_raise_r>:
 80056d4:	291f      	cmp	r1, #31
 80056d6:	b538      	push	{r3, r4, r5, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	d904      	bls.n	80056e8 <_raise_r+0x14>
 80056de:	2316      	movs	r3, #22
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80056ea:	b112      	cbz	r2, 80056f2 <_raise_r+0x1e>
 80056ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056f0:	b94b      	cbnz	r3, 8005706 <_raise_r+0x32>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f830 	bl	8005758 <_getpid_r>
 80056f8:	462a      	mov	r2, r5
 80056fa:	4601      	mov	r1, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005702:	f000 b817 	b.w	8005734 <_kill_r>
 8005706:	2b01      	cmp	r3, #1
 8005708:	d00a      	beq.n	8005720 <_raise_r+0x4c>
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	d103      	bne.n	8005716 <_raise_r+0x42>
 800570e:	2316      	movs	r3, #22
 8005710:	6003      	str	r3, [r0, #0]
 8005712:	2001      	movs	r0, #1
 8005714:	e7e7      	b.n	80056e6 <_raise_r+0x12>
 8005716:	2400      	movs	r4, #0
 8005718:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800571c:	4628      	mov	r0, r5
 800571e:	4798      	blx	r3
 8005720:	2000      	movs	r0, #0
 8005722:	e7e0      	b.n	80056e6 <_raise_r+0x12>

08005724 <raise>:
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <raise+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f7ff bfd3 	b.w	80056d4 <_raise_r>
 800572e:	bf00      	nop
 8005730:	2000002c 	.word	0x2000002c

08005734 <_kill_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_kill_r+0x20>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	f7fe fd19 	bl	8004178 <_kill>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d102      	bne.n	8005750 <_kill_r+0x1c>
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	b103      	cbz	r3, 8005750 <_kill_r+0x1c>
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	bf00      	nop
 8005754:	200001dc 	.word	0x200001dc

08005758 <_getpid_r>:
 8005758:	f7fe bd06 	b.w	8004168 <_getpid>

0800575c <sqrt>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	ed2d 8b02 	vpush	{d8}
 8005762:	ec55 4b10 	vmov	r4, r5, d0
 8005766:	f000 f82d 	bl	80057c4 <__ieee754_sqrt>
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <sqrt+0x64>)
 800576c:	eeb0 8a40 	vmov.f32	s16, s0
 8005770:	eef0 8a60 	vmov.f32	s17, s1
 8005774:	f993 3000 	ldrsb.w	r3, [r3]
 8005778:	3301      	adds	r3, #1
 800577a:	d019      	beq.n	80057b0 <sqrt+0x54>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fb f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8005788:	b990      	cbnz	r0, 80057b0 <sqrt+0x54>
 800578a:	2200      	movs	r2, #0
 800578c:	2300      	movs	r3, #0
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f7fb f9a3 	bl	8000adc <__aeabi_dcmplt>
 8005796:	b158      	cbz	r0, 80057b0 <sqrt+0x54>
 8005798:	f7fe fe44 	bl	8004424 <__errno>
 800579c:	2321      	movs	r3, #33	; 0x21
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7fb f850 	bl	800084c <__aeabi_ddiv>
 80057ac:	ec41 0b18 	vmov	d8, r0, r1
 80057b0:	eeb0 0a48 	vmov.f32	s0, s16
 80057b4:	eef0 0a68 	vmov.f32	s1, s17
 80057b8:	ecbd 8b02 	vpop	{d8}
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	20000090 	.word	0x20000090

080057c4 <__ieee754_sqrt>:
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	ec55 4b10 	vmov	r4, r5, d0
 80057cc:	4e56      	ldr	r6, [pc, #344]	; (8005928 <__ieee754_sqrt+0x164>)
 80057ce:	43ae      	bics	r6, r5
 80057d0:	ee10 0a10 	vmov	r0, s0
 80057d4:	ee10 3a10 	vmov	r3, s0
 80057d8:	4629      	mov	r1, r5
 80057da:	462a      	mov	r2, r5
 80057dc:	d110      	bne.n	8005800 <__ieee754_sqrt+0x3c>
 80057de:	ee10 2a10 	vmov	r2, s0
 80057e2:	462b      	mov	r3, r5
 80057e4:	f7fa ff08 	bl	80005f8 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fd4c 	bl	800028c <__adddf3>
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	ec45 4b10 	vmov	d0, r4, r5
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	2d00      	cmp	r5, #0
 8005802:	dc10      	bgt.n	8005826 <__ieee754_sqrt+0x62>
 8005804:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005808:	4330      	orrs	r0, r6
 800580a:	d0f5      	beq.n	80057f8 <__ieee754_sqrt+0x34>
 800580c:	b15d      	cbz	r5, 8005826 <__ieee754_sqrt+0x62>
 800580e:	ee10 2a10 	vmov	r2, s0
 8005812:	462b      	mov	r3, r5
 8005814:	ee10 0a10 	vmov	r0, s0
 8005818:	f7fa fd36 	bl	8000288 <__aeabi_dsub>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	f7fb f814 	bl	800084c <__aeabi_ddiv>
 8005824:	e7e6      	b.n	80057f4 <__ieee754_sqrt+0x30>
 8005826:	1509      	asrs	r1, r1, #20
 8005828:	d076      	beq.n	8005918 <__ieee754_sqrt+0x154>
 800582a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800582e:	07ce      	lsls	r6, r1, #31
 8005830:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005834:	bf5e      	ittt	pl
 8005836:	0fda      	lsrpl	r2, r3, #31
 8005838:	005b      	lslpl	r3, r3, #1
 800583a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800583e:	0fda      	lsrs	r2, r3, #31
 8005840:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005844:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005848:	2000      	movs	r0, #0
 800584a:	106d      	asrs	r5, r5, #1
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	f04f 0e16 	mov.w	lr, #22
 8005852:	4684      	mov	ip, r0
 8005854:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005858:	eb0c 0401 	add.w	r4, ip, r1
 800585c:	4294      	cmp	r4, r2
 800585e:	bfde      	ittt	le
 8005860:	1b12      	suble	r2, r2, r4
 8005862:	eb04 0c01 	addle.w	ip, r4, r1
 8005866:	1840      	addle	r0, r0, r1
 8005868:	0052      	lsls	r2, r2, #1
 800586a:	f1be 0e01 	subs.w	lr, lr, #1
 800586e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005872:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800587a:	d1ed      	bne.n	8005858 <__ieee754_sqrt+0x94>
 800587c:	4671      	mov	r1, lr
 800587e:	2720      	movs	r7, #32
 8005880:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005884:	4562      	cmp	r2, ip
 8005886:	eb04 060e 	add.w	r6, r4, lr
 800588a:	dc02      	bgt.n	8005892 <__ieee754_sqrt+0xce>
 800588c:	d113      	bne.n	80058b6 <__ieee754_sqrt+0xf2>
 800588e:	429e      	cmp	r6, r3
 8005890:	d811      	bhi.n	80058b6 <__ieee754_sqrt+0xf2>
 8005892:	2e00      	cmp	r6, #0
 8005894:	eb06 0e04 	add.w	lr, r6, r4
 8005898:	da43      	bge.n	8005922 <__ieee754_sqrt+0x15e>
 800589a:	f1be 0f00 	cmp.w	lr, #0
 800589e:	db40      	blt.n	8005922 <__ieee754_sqrt+0x15e>
 80058a0:	f10c 0801 	add.w	r8, ip, #1
 80058a4:	eba2 020c 	sub.w	r2, r2, ip
 80058a8:	429e      	cmp	r6, r3
 80058aa:	bf88      	it	hi
 80058ac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80058b0:	1b9b      	subs	r3, r3, r6
 80058b2:	4421      	add	r1, r4
 80058b4:	46c4      	mov	ip, r8
 80058b6:	0052      	lsls	r2, r2, #1
 80058b8:	3f01      	subs	r7, #1
 80058ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80058be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80058c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058c6:	d1dd      	bne.n	8005884 <__ieee754_sqrt+0xc0>
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d006      	beq.n	80058da <__ieee754_sqrt+0x116>
 80058cc:	1c4c      	adds	r4, r1, #1
 80058ce:	bf13      	iteet	ne
 80058d0:	3101      	addne	r1, #1
 80058d2:	3001      	addeq	r0, #1
 80058d4:	4639      	moveq	r1, r7
 80058d6:	f021 0101 	bicne.w	r1, r1, #1
 80058da:	1043      	asrs	r3, r0, #1
 80058dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80058e0:	0849      	lsrs	r1, r1, #1
 80058e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80058e6:	07c2      	lsls	r2, r0, #31
 80058e8:	bf48      	it	mi
 80058ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80058ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80058f2:	460c      	mov	r4, r1
 80058f4:	463d      	mov	r5, r7
 80058f6:	e77f      	b.n	80057f8 <__ieee754_sqrt+0x34>
 80058f8:	0ada      	lsrs	r2, r3, #11
 80058fa:	3815      	subs	r0, #21
 80058fc:	055b      	lsls	r3, r3, #21
 80058fe:	2a00      	cmp	r2, #0
 8005900:	d0fa      	beq.n	80058f8 <__ieee754_sqrt+0x134>
 8005902:	02d7      	lsls	r7, r2, #11
 8005904:	d50a      	bpl.n	800591c <__ieee754_sqrt+0x158>
 8005906:	f1c1 0420 	rsb	r4, r1, #32
 800590a:	fa23 f404 	lsr.w	r4, r3, r4
 800590e:	1e4d      	subs	r5, r1, #1
 8005910:	408b      	lsls	r3, r1
 8005912:	4322      	orrs	r2, r4
 8005914:	1b41      	subs	r1, r0, r5
 8005916:	e788      	b.n	800582a <__ieee754_sqrt+0x66>
 8005918:	4608      	mov	r0, r1
 800591a:	e7f0      	b.n	80058fe <__ieee754_sqrt+0x13a>
 800591c:	0052      	lsls	r2, r2, #1
 800591e:	3101      	adds	r1, #1
 8005920:	e7ef      	b.n	8005902 <__ieee754_sqrt+0x13e>
 8005922:	46e0      	mov	r8, ip
 8005924:	e7be      	b.n	80058a4 <__ieee754_sqrt+0xe0>
 8005926:	bf00      	nop
 8005928:	7ff00000 	.word	0x7ff00000

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
>>>>>>> Stashed changes
