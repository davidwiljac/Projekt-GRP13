
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005308  08005308  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005310  08005310  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  080053a8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080053a8  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec8e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252c  00000000  00000000  0002ed4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000504e  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae27  00000000  00000000  00037156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b114  00000000  00000000  00041f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009d091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  0009d0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009fa9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009fac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800501c 	.word	0x0800501c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800501c 	.word	0x0800501c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000578:	b480      	push	{r7}
 800057a:	b08b      	sub	sp, #44	; 0x2c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005a0:	4b91      	ldr	r3, [pc, #580]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f003 030c 	and.w	r3, r3, #12
 80005a8:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d011      	beq.n	80005d4 <RCC_GetClocksFreq+0x5c>
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	2b08      	cmp	r3, #8
 80005b4:	d837      	bhi.n	8000626 <RCC_GetClocksFreq+0xae>
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <RCC_GetClocksFreq+0x4c>
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	2b04      	cmp	r3, #4
 80005c0:	d004      	beq.n	80005cc <RCC_GetClocksFreq+0x54>
 80005c2:	e030      	b.n	8000626 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a89      	ldr	r2, [pc, #548]	; (80007ec <RCC_GetClocksFreq+0x274>)
 80005c8:	601a      	str	r2, [r3, #0]
      break;
 80005ca:	e030      	b.n	800062e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a87      	ldr	r2, [pc, #540]	; (80007ec <RCC_GetClocksFreq+0x274>)
 80005d0:	601a      	str	r2, [r3, #0]
      break;
 80005d2:	e02c      	b.n	800062e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80005d4:	4b84      	ldr	r3, [pc, #528]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005dc:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80005de:	4b82      	ldr	r3, [pc, #520]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e6:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	0c9b      	lsrs	r3, r3, #18
 80005ec:	3302      	adds	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d105      	bne.n	8000602 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	4a7d      	ldr	r2, [pc, #500]	; (80007f0 <RCC_GetClocksFreq+0x278>)
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	e00d      	b.n	800061e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000602:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800060e:	4a77      	ldr	r2, [pc, #476]	; (80007ec <RCC_GetClocksFreq+0x274>)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fbb2 f2f3 	udiv	r2, r2, r3
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000622:	601a      	str	r2, [r3, #0]
      break;
 8000624:	e003      	b.n	800062e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a70      	ldr	r2, [pc, #448]	; (80007ec <RCC_GetClocksFreq+0x274>)
 800062a:	601a      	str	r2, [r3, #0]
      break;
 800062c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000636:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	091b      	lsrs	r3, r3, #4
 800063c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800063e:	4a6d      	ldr	r2, [pc, #436]	; (80007f4 <RCC_GetClocksFreq+0x27c>)
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	4413      	add	r3, r2
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	40da      	lsrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000656:	4b64      	ldr	r3, [pc, #400]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800065e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000666:	4a63      	ldr	r2, [pc, #396]	; (80007f4 <RCC_GetClocksFreq+0x27c>)
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	40da      	lsrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000686:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	0adb      	lsrs	r3, r3, #11
 800068c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800068e:	4a59      	ldr	r2, [pc, #356]	; (80007f4 <RCC_GetClocksFreq+0x27c>)
 8000690:	6a3b      	ldr	r3, [r7, #32]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80006ae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006b0:	6a3b      	ldr	r3, [r7, #32]
 80006b2:	091b      	lsrs	r3, r3, #4
 80006b4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80006b6:	4a50      	ldr	r2, [pc, #320]	; (80007f8 <RCC_GetClocksFreq+0x280>)
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d006      	beq.n	80006da <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80006cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	e003      	b.n	80006e2 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80006ea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	0a5b      	lsrs	r3, r3, #9
 80006f0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80006f2:	4a41      	ldr	r2, [pc, #260]	; (80007f8 <RCC_GetClocksFreq+0x280>)
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	2b00      	cmp	r3, #0
 8000706:	d006      	beq.n	8000716 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	e003      	b.n	800071e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	2b10      	cmp	r3, #16
 8000728:	d003      	beq.n	8000732 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a2f      	ldr	r2, [pc, #188]	; (80007ec <RCC_GetClocksFreq+0x274>)
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	e003      	b.n	800073a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0320 	and.w	r3, r3, #32
 8000742:	2b20      	cmp	r3, #32
 8000744:	d003      	beq.n	800074e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <RCC_GetClocksFreq+0x274>)
 800074a:	61da      	str	r2, [r3, #28]
 800074c:	e003      	b.n	8000756 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000762:	d10d      	bne.n	8000780 <RCC_GetClocksFreq+0x208>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800076a:	429a      	cmp	r2, r3
 800076c:	d108      	bne.n	8000780 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	429a      	cmp	r2, r3
 8000774:	d104      	bne.n	8000780 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	005a      	lsls	r2, r3, #1
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	621a      	str	r2, [r3, #32]
 800077e:	e003      	b.n	8000788 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000794:	d10d      	bne.n	80007b2 <RCC_GetClocksFreq+0x23a>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079c:	429a      	cmp	r2, r3
 800079e:	d108      	bne.n	80007b2 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d104      	bne.n	80007b2 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	005a      	lsls	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
 80007b0:	e003      	b.n	80007ba <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68da      	ldr	r2, [r3, #12]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
 80007ce:	e029      	b.n	8000824 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <RCC_GetClocksFreq+0x270>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10f      	bne.n	80007fc <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
 80007e4:	e01e      	b.n	8000824 <RCC_GetClocksFreq+0x2ac>
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	007a1200 	.word	0x007a1200
 80007f0:	003d0900 	.word	0x003d0900
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80007fc:	4b66      	ldr	r3, [pc, #408]	; (8000998 <RCC_GetClocksFreq+0x420>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0303 	and.w	r3, r3, #3
 8000804:	2b02      	cmp	r3, #2
 8000806:	d104      	bne.n	8000812 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
 8000810:	e008      	b.n	8000824 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000812:	4b61      	ldr	r3, [pc, #388]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	2b03      	cmp	r3, #3
 800081c:	d102      	bne.n	8000824 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a5e      	ldr	r2, [pc, #376]	; (800099c <RCC_GetClocksFreq+0x424>)
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000824:	4b5c      	ldr	r3, [pc, #368]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
 8000838:	e021      	b.n	800087e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800083a:	4b57      	ldr	r3, [pc, #348]	; (8000998 <RCC_GetClocksFreq+0x420>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000846:	d104      	bne.n	8000852 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000850:	e015      	b.n	800087e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000852:	4b51      	ldr	r3, [pc, #324]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800085a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800085e:	d104      	bne.n	800086a <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
 8000868:	e009      	b.n	800087e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800086a:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <RCC_GetClocksFreq+0x420>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000876:	d102      	bne.n	800087e <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a48      	ldr	r2, [pc, #288]	; (800099c <RCC_GetClocksFreq+0x424>)
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d104      	bne.n	8000894 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
 8000892:	e021      	b.n	80008d8 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800089c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80008a0:	d104      	bne.n	80008ac <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
 80008aa:	e015      	b.n	80008d8 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80008ac:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <RCC_GetClocksFreq+0x420>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80008b8:	d104      	bne.n	80008c4 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
 80008c2:	e009      	b.n	80008d8 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <RCC_GetClocksFreq+0x420>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80008d0:	d102      	bne.n	80008d8 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a31      	ldr	r2, [pc, #196]	; (800099c <RCC_GetClocksFreq+0x424>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <RCC_GetClocksFreq+0x420>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d104      	bne.n	80008ee <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
 80008ec:	e021      	b.n	8000932 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <RCC_GetClocksFreq+0x420>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80008fa:	d104      	bne.n	8000906 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
 8000904:	e015      	b.n	8000932 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800090e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000912:	d104      	bne.n	800091e <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
 800091c:	e009      	b.n	8000932 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800092a:	d102      	bne.n	8000932 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <RCC_GetClocksFreq+0x424>)
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d104      	bne.n	8000948 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000946:	e021      	b.n	800098c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <RCC_GetClocksFreq+0x420>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000954:	d104      	bne.n	8000960 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800095e:	e015      	b.n	800098c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <RCC_GetClocksFreq+0x420>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800096c:	d104      	bne.n	8000978 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000976:	e009      	b.n	800098c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <RCC_GetClocksFreq+0x420>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000984:	d102      	bne.n	800098c <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <RCC_GetClocksFreq+0x424>)
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800098c:	bf00      	nop
 800098e:	372c      	adds	r7, #44	; 0x2c
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	007a1200 	.word	0x007a1200

080009a0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	4613      	mov	r3, r2
 80009d0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d103      	bne.n	8000a0e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	e005      	b.n	8000a1a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d102      	bne.n	8000a1a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3308      	adds	r3, #8
 8000a18:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a2c:	e006      	b.n	8000a3c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43da      	mvns	r2, r3
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	400a      	ands	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	3724      	adds	r7, #36	; 0x24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e001      	b.n	8000a6c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b087      	sub	sp, #28
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d105      	bne.n	8000ac0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	4013      	ands	r3, r2
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e00d      	b.n	8000adc <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d105      	bne.n	8000ad2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4013      	ands	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e004      	b.n	8000adc <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4013      	ands	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d005      	beq.n	8000b08 <USART_GetITStatus+0x8e>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000b02:	2301      	movs	r3, #1
 8000b04:	74fb      	strb	r3, [r7, #19]
 8000b06:	e001      	b.n	8000b0c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 031f 	and.w	r3, r3, #31
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	fa02 f103 	lsl.w	r1, r2, r3
 8000b32:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <NVIC_EnableIRQ+0x30>)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	095b      	lsrs	r3, r3, #5
 8000b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <uart_get_char+0x48>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d011      	beq.n	8000b88 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <uart_get_char+0x4c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	b2d1      	uxtb	r1, r2
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <uart_get_char+0x4c>)
 8000b70:	7011      	strb	r1, [r2, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <uart_get_char+0x50>)
 8000b76:	5c9b      	ldrb	r3, [r3, r2]
 8000b78:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <uart_get_char+0x48>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <uart_get_char+0x48>)
 8000b86:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001ae 	.word	0x200001ae
 8000b9c:	200001ad 	.word	0x200001ad
 8000ba0:	200000ac 	.word	0x200000ac

08000ba4 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <uart_put_char+0x30>)
 8000bb6:	f7ff fef3 	bl	80009a0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000bba:	bf00      	nop
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <uart_put_char+0x30>)
 8000bc0:	f7ff ff42 	bl	8000a48 <USART_GetFlagStatus>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f8      	beq.n	8000bbc <uart_put_char+0x18>
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e012      	b.n	8000c12 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b0a      	cmp	r3, #10
 8000bf6:	d102      	bne.n	8000bfe <_write_r+0x26>
            uart_put_char('\r');
 8000bf8:	200d      	movs	r0, #13
 8000bfa:	f7ff ffd3 	bl	8000ba4 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffcc 	bl	8000ba4 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbe8      	blt.n	8000bec <_write_r+0x14>
    }

    return len;
 8000c1a:	683b      	ldr	r3, [r7, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000c28:	4915      	ldr	r1, [pc, #84]	; (8000c80 <USART2_IRQHandler+0x5c>)
 8000c2a:	4816      	ldr	r0, [pc, #88]	; (8000c84 <USART2_IRQHandler+0x60>)
 8000c2c:	f7ff ff25 	bl	8000a7a <USART_GetITStatus>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d021      	beq.n	8000c7a <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <USART2_IRQHandler+0x60>)
 8000c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <USART2_IRQHandler+0x64>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	b2d0      	uxtb	r0, r2
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <USART2_IRQHandler+0x64>)
 8000c48:	7010      	strb	r0, [r2, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	b2c9      	uxtb	r1, r1
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <USART2_IRQHandler+0x68>)
 8000c50:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <USART2_IRQHandler+0x6c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d107      	bne.n	8000c6c <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <USART2_IRQHandler+0x70>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <USART2_IRQHandler+0x70>)
 8000c68:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000c6a:	e006      	b.n	8000c7a <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <USART2_IRQHandler+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <USART2_IRQHandler+0x6c>)
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	00050105 	.word	0x00050105
 8000c84:	40004400 	.word	0x40004400
 8000c88:	200001ac 	.word	0x200001ac
 8000c8c:	200000ac 	.word	0x200000ac
 8000c90:	200001ae 	.word	0x200001ae
 8000c94:	200001ad 	.word	0x200001ad

08000c98 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000ca0:	4b86      	ldr	r3, [pc, #536]	; (8000ebc <uart_init+0x224>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 f97d 	bl	8003fa8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000cae:	4b83      	ldr	r3, [pc, #524]	; (8000ebc <uart_init+0x224>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f976 	bl	8003fa8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000cbc:	4b80      	ldr	r3, [pc, #512]	; (8000ec0 <uart_init+0x228>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a7f      	ldr	r2, [pc, #508]	; (8000ec0 <uart_init+0x228>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000cc8:	4b7d      	ldr	r3, [pc, #500]	; (8000ec0 <uart_init+0x228>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	4a7c      	ldr	r2, [pc, #496]	; (8000ec0 <uart_init+0x228>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ce2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cf2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000d02:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000d12:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d22:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000d32:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d38:	889b      	ldrh	r3, [r3, #4]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d40:	f023 030c 	bic.w	r3, r3, #12
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000d48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d50:	8892      	ldrh	r2, [r2, #4]
 8000d52:	b292      	uxth	r2, r2
 8000d54:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000d56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d64:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d70:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d74:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d84:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000d86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d90:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000d94:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000d96:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <uart_init+0x22c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a4a      	ldr	r2, [pc, #296]	; (8000ec4 <uart_init+0x22c>)
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000da2:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <uart_init+0x22c>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <uart_init+0x22c>)
 8000da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dac:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000dae:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <uart_init+0x22c>)
 8000db0:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <uart_init+0x22c>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000db6:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <uart_init+0x22c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <uart_init+0x22c>)
 8000dbc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000dc0:	f023 030c 	bic.w	r3, r3, #12
 8000dc4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <uart_init+0x22c>)
 8000dc8:	4a3e      	ldr	r2, [pc, #248]	; (8000ec4 <uart_init+0x22c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000dce:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <uart_init+0x22c>)
 8000dd0:	4a3c      	ldr	r2, [pc, #240]	; (8000ec4 <uart_init+0x22c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <uart_init+0x22c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a3a      	ldr	r2, [pc, #232]	; (8000ec4 <uart_init+0x22c>)
 8000ddc:	f043 030c 	orr.w	r3, r3, #12
 8000de0:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <uart_init+0x22c>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <uart_init+0x22c>)
 8000de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dec:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <uart_init+0x22c>)
 8000df0:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <uart_init+0x22c>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8000dfe:	2300      	movs	r3, #0
 8000e00:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fbb6 	bl	8000578 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <uart_init+0x22c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d010      	beq.n	8000e3e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e1e:	005a      	lsls	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	fb01 f202 	mul.w	r2, r1, r2
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e3c:	e00d      	b.n	8000e5a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	fb01 f202 	mul.w	r2, r1, r2
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d302      	bcc.n	8000e6a <uart_init+0x1d2>
        divider++;
 8000e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e66:	3301      	adds	r3, #1
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <uart_init+0x22c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e82:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000e86:	4013      	ands	r3, r2
 8000e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <uart_init+0x22c>)
 8000e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e92:	b292      	uxth	r2, r2
 8000e94:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <uart_init+0x22c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <uart_init+0x22c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <uart_init+0x230>)
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <uart_init+0x22c>)
 8000ea8:	f7ff fd8c 	bl	80009c4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000eac:	2026      	movs	r0, #38	; 0x26
 8000eae:	f7ff fe35 	bl	8000b1c <NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3750      	adds	r7, #80	; 0x50
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000002c 	.word	0x2000002c
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	00050105 	.word	0x00050105

08000ecc <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000ed6:	2316      	movs	r3, #22
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d904      	bls.n	8000eea <fgcolor+0x1e>
	  type = 1;                // bold text
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3b08      	subs	r3, #8
 8000ee8:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	331e      	adds	r3, #30
 8000ef0:	211b      	movs	r1, #27
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <fgcolor+0x34>)
 8000ef4:	f002 ffac 	bl	8003e50 <iprintf>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	08005034 	.word	0x08005034

08000f04 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8000f08:	211b      	movs	r1, #27
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <clrscr+0x18>)
 8000f0c:	f002 ffa0 	bl	8003e50 <iprintf>
    printf("%c[J", ESC);
 8000f10:	211b      	movs	r1, #27
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <clrscr+0x1c>)
 8000f14:	f002 ff9c 	bl	8003e50 <iprintf>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	08005060 	.word	0x08005060
 8000f20:	08005068 	.word	0x08005068

08000f24 <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	211b      	movs	r1, #27
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <gotoxy+0x20>)
 8000f36:	f002 ff8b 	bl	8003e50 <iprintf>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08005078 	.word	0x08005078

08000f48 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d15e      	bne.n	800101a <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	e019      	b.n	8000f96 <drawBox+0x4e>
			 gotoxy(x1,y);
 8000f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff ffdd 	bl	8000f24 <gotoxy>
			 if (y==y1){
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d103      	bne.n	8000f7a <drawBox+0x32>
				printf("%c", 201);
 8000f72:	20c9      	movs	r0, #201	; 0xc9
 8000f74:	f002 ff84 	bl	8003e80 <putchar>
 8000f78:	e00a      	b.n	8000f90 <drawBox+0x48>
			 }
			 else if(y==y2){
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d103      	bne.n	8000f8a <drawBox+0x42>
				printf("%c", 200);
 8000f82:	20c8      	movs	r0, #200	; 0xc8
 8000f84:	f002 ff7c 	bl	8003e80 <putchar>
 8000f88:	e002      	b.n	8000f90 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000f8a:	20ba      	movs	r0, #186	; 0xba
 8000f8c:	f002 ff78 	bl	8003e80 <putchar>
		 for(int y = y1; y <= y2; y++){
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	3301      	adds	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dde1      	ble.n	8000f62 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	e014      	b.n	8000fce <drawBox+0x86>
   			 if(x!=x1){
 8000fa4:	6a3a      	ldr	r2, [r7, #32]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d00d      	beq.n	8000fc8 <drawBox+0x80>
				 gotoxy(x,y1);
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6a38      	ldr	r0, [r7, #32]
 8000fb0:	f7ff ffb8 	bl	8000f24 <gotoxy>
				 printf("%c", 205);
 8000fb4:	20cd      	movs	r0, #205	; 0xcd
 8000fb6:	f002 ff63 	bl	8003e80 <putchar>
				 gotoxy(x,y2);
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	6a38      	ldr	r0, [r7, #32]
 8000fbe:	f7ff ffb1 	bl	8000f24 <gotoxy>
				 printf("%c", 205);
 8000fc2:	20cd      	movs	r0, #205	; 0xcd
 8000fc4:	f002 ff5c 	bl	8003e80 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	6a3a      	ldr	r2, [r7, #32]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dde6      	ble.n	8000fa4 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e019      	b.n	8001010 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000fdc:	69f9      	ldr	r1, [r7, #28]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa0 	bl	8000f24 <gotoxy>
   			 if (y==y1){
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d103      	bne.n	8000ff4 <drawBox+0xac>
				printf("%c", 187);
 8000fec:	20bb      	movs	r0, #187	; 0xbb
 8000fee:	f002 ff47 	bl	8003e80 <putchar>
 8000ff2:	e00a      	b.n	800100a <drawBox+0xc2>
			 }
			 else if(y==y2){
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d103      	bne.n	8001004 <drawBox+0xbc>
				printf("%c", 188);
 8000ffc:	20bc      	movs	r0, #188	; 0xbc
 8000ffe:	f002 ff3f 	bl	8003e80 <putchar>
 8001002:	e002      	b.n	800100a <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001004:	20ba      	movs	r0, #186	; 0xba
 8001006:	f002 ff3b 	bl	8003e80 <putchar>
   		 for(int y = y1; y <= y2; y++){
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	dde1      	ble.n	8000fdc <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001018:	e05d      	b.n	80010d6 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	e019      	b.n	8001054 <drawBox+0x10c>
			 gotoxy(x1,y);
 8001020:	69b9      	ldr	r1, [r7, #24]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ff7e 	bl	8000f24 <gotoxy>
			 if (y==y1){
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d103      	bne.n	8001038 <drawBox+0xf0>
				printf("%c", 218);
 8001030:	20da      	movs	r0, #218	; 0xda
 8001032:	f002 ff25 	bl	8003e80 <putchar>
 8001036:	e00a      	b.n	800104e <drawBox+0x106>
			 else if(y==y2){
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d103      	bne.n	8001048 <drawBox+0x100>
				printf("%c", 192);
 8001040:	20c0      	movs	r0, #192	; 0xc0
 8001042:	f002 ff1d 	bl	8003e80 <putchar>
 8001046:	e002      	b.n	800104e <drawBox+0x106>
				printf("%c", 179);
 8001048:	20b3      	movs	r0, #179	; 0xb3
 800104a:	f002 ff19 	bl	8003e80 <putchar>
		for(int y = y1; y <= y2; y++){
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	3301      	adds	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	dde1      	ble.n	8001020 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e014      	b.n	800108c <drawBox+0x144>
			if(x!=x1){
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	429a      	cmp	r2, r3
 8001068:	d00d      	beq.n	8001086 <drawBox+0x13e>
				 gotoxy(x,y1);
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f7ff ff59 	bl	8000f24 <gotoxy>
				 printf("%c", 196);
 8001072:	20c4      	movs	r0, #196	; 0xc4
 8001074:	f002 ff04 	bl	8003e80 <putchar>
				 gotoxy(x,y2);
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff52 	bl	8000f24 <gotoxy>
				 printf("%c", 196);
 8001080:	20c4      	movs	r0, #196	; 0xc4
 8001082:	f002 fefd 	bl	8003e80 <putchar>
		for(int x = x1; x <= x2; x++){
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	dde6      	ble.n	8001062 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e019      	b.n	80010ce <drawBox+0x186>
			 gotoxy(x2,y);
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff41 	bl	8000f24 <gotoxy>
			if (y==y1){
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d103      	bne.n	80010b2 <drawBox+0x16a>
				printf("%c", 191);
 80010aa:	20bf      	movs	r0, #191	; 0xbf
 80010ac:	f002 fee8 	bl	8003e80 <putchar>
 80010b0:	e00a      	b.n	80010c8 <drawBox+0x180>
			 else if(y==y2){
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d103      	bne.n	80010c2 <drawBox+0x17a>
				printf("%c", 217);
 80010ba:	20d9      	movs	r0, #217	; 0xd9
 80010bc:	f002 fee0 	bl	8003e80 <putchar>
 80010c0:	e002      	b.n	80010c8 <drawBox+0x180>
				printf("%c", 179);
 80010c2:	20b3      	movs	r0, #179	; 0xb3
 80010c4:	f002 fedc 	bl	8003e80 <putchar>
		for(int y = y1; y <= y2; y++){
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dde1      	ble.n	800109a <drawBox+0x152>
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 80010de:	b590      	push	{r4, r7, lr}
 80010e0:	b089      	sub	sp, #36	; 0x24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 80010ec:	e073      	b.n	80011d6 <updateBullets+0xf8>

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7a1b      	ldrb	r3, [r3, #8]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fc82 	bl	80019fe <intToFp>
 80010fa:	4602      	mov	r2, r0
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7a5b      	ldrb	r3, [r3, #9]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fc77 	bl	80019fe <intToFp>
 8001110:	4602      	mov	r2, r0
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fd0f 	bl	8001b40 <fpAbs>
 8001122:	4604      	mov	r4, r0
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd0a 	bl	8001b40 <fpAbs>
 800112c:	4603      	mov	r3, r0
 800112e:	4423      	add	r3, r4
 8001130:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fc98 	bl	8001a6a <fpMultiply>
 800113a:	4602      	mov	r2, r0
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 8001140:	2001      	movs	r0, #1
 8001142:	f000 fc5c 	bl	80019fe <intToFp>
 8001146:	4602      	mov	r2, r0
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f000 fcac 	bl	8001aac <fpDivide>
 8001154:	4603      	mov	r3, r0
 8001156:	f107 0014 	add.w	r0, r7, #20
 800115a:	f107 0214 	add.w	r2, r7, #20
 800115e:	ca06      	ldmia	r2, {r1, r2}
 8001160:	f000 fccc 	bl	8001afc <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a9b      	ldrb	r3, [r3, #10]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fc47 	bl	80019fe <intToFp>
 8001170:	4604      	mov	r4, r0
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4619      	mov	r1, r3
 800117c:	4610      	mov	r0, r2
 800117e:	f000 fc74 	bl	8001a6a <fpMultiply>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	4620      	mov	r0, r4
 8001188:	f000 fc90 	bl	8001aac <fpDivide>
 800118c:	4603      	mov	r3, r0
 800118e:	f107 000c 	add.w	r0, r7, #12
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	ca06      	ldmia	r2, {r1, r2}
 8001198:	f000 fcb0 	bl	8001afc <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	441a      	add	r2, r3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	441a      	add	r2, r3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	615a      	str	r2, [r3, #20]


		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	441a      	add	r2, r3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	441a      	add	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d188      	bne.n	80010ee <updateBullets+0x10>
	}

}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}

080011e6 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]

	bulletNode_t* current = gameState->bulletLL;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 80011f4:	e031      	b.n	800125a <detectBulletHit+0x74>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fc14 	bl	8001a28 <fpToInt>
 8001200:	4603      	mov	r3, r0
 8001202:	72fb      	strb	r3, [r7, #11]

		if(fpToInt(current->bullet.nextPosition.y)<=1 || fpToInt(current->bullet.nextPosition.y)>=43*yScale || fpToInt(current->bullet.nextPosition.x)<=1 ||fpToInt(current->bullet.nextPosition.x)>=153 ||distToMoon<=6){ //TODO: add other boundaries
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fc0d 	bl	8001a28 <fpToInt>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	dd1a      	ble.n	800124a <detectBulletHit+0x64>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fc05 	bl	8001a28 <fpToInt>
 800121e:	4603      	mov	r3, r0
 8001220:	2b55      	cmp	r3, #85	; 0x55
 8001222:	dc12      	bgt.n	800124a <detectBulletHit+0x64>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fbfd 	bl	8001a28 <fpToInt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	dd0a      	ble.n	800124a <detectBulletHit+0x64>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fbf5 	bl	8001a28 <fpToInt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b98      	cmp	r3, #152	; 0x98
 8001242:	dc02      	bgt.n	800124a <detectBulletHit+0x64>
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	2b06      	cmp	r3, #6
 8001248:	d804      	bhi.n	8001254 <detectBulletHit+0x6e>
			deleteBulletNode(&(gameState->bulletLL), current);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68f9      	ldr	r1, [r7, #12]
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fcf4 	bl	8002c3c <deleteBulletNode>
		}
		current = current->nextBulletAddress;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ca      	bne.n	80011f6 <detectBulletHit+0x10>
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <drawBullets>:

void drawBullets(gameState_t* gameState){
 800126a:	b590      	push	{r4, r7, lr}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8001278:	e036      	b.n	80012e8 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fbd2 	bl	8001a28 <fpToInt>
 8001284:	4604      	mov	r4, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fbcc 	bl	8001a28 <fpToInt>
 8001290:	4603      	mov	r3, r0
 8001292:	0fda      	lsrs	r2, r3, #31
 8001294:	4413      	add	r3, r2
 8001296:	105b      	asrs	r3, r3, #1
 8001298:	4619      	mov	r1, r3
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff fe42 	bl	8000f24 <gotoxy>
		printf(" ");
 80012a0:	2020      	movs	r0, #32
 80012a2:	f002 fded 	bl	8003e80 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fbbc 	bl	8001a28 <fpToInt>
 80012b0:	4604      	mov	r4, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fbb6 	bl	8001a28 <fpToInt>
 80012bc:	4603      	mov	r3, r0
 80012be:	0fda      	lsrs	r2, r3, #31
 80012c0:	4413      	add	r3, r2
 80012c2:	105b      	asrs	r3, r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	4620      	mov	r0, r4
 80012c8:	f7ff fe2c 	bl	8000f24 <gotoxy>
		printf("O");
 80012cc:	204f      	movs	r0, #79	; 0x4f
 80012ce:	f002 fdd7 	bl	8003e80 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1c5      	bne.n	800127a <drawBullets+0x10>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <NVIC_EnableIRQ>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2201      	movs	r2, #1
 800130a:	fa02 f103 	lsl.w	r1, r2, r3
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <NVIC_EnableIRQ+0x30>)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	da0b      	bge.n	8001358 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <NVIC_SetPriority+0x4c>)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	3b04      	subs	r3, #4
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001356:	e009      	b.n	800136c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <NVIC_SetPriority+0x50>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	e000e100 	.word	0xe000e100

08001380 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <initJoystick+0x120>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a45      	ldr	r2, [pc, #276]	; (80014a0 <initJoystick+0x120>)
 800138a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <initJoystick+0x120>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <initJoystick+0x120>)
 8001396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139a:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <initJoystick+0x120>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <initJoystick+0x120>)
 80013a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013a6:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <initJoystick+0x124>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <initJoystick+0x124>)
 80013ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013b2:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <initJoystick+0x124>)
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <initJoystick+0x124>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <initJoystick+0x124>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a38      	ldr	r2, [pc, #224]	; (80014a4 <initJoystick+0x124>)
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <initJoystick+0x124>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <initJoystick+0x124>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80013d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013e2:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80013e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80013f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <initJoystick+0x124>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <initJoystick+0x124>)
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <initJoystick+0x124>)
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <initJoystick+0x124>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <initJoystick+0x124>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <initJoystick+0x124>)
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <initJoystick+0x124>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <initJoystick+0x124>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <initJoystick+0x128>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <initJoystick+0x128>)
 8001442:	f023 030c 	bic.w	r3, r3, #12
 8001446:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <initJoystick+0x128>)
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <initJoystick+0x128>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <initJoystick+0x128>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <initJoystick+0x128>)
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <initJoystick+0x128>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <initJoystick+0x128>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <initJoystick+0x128>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <initJoystick+0x128>)
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <initJoystick+0x128>)
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <initJoystick+0x128>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <initJoystick+0x128>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <initJoystick+0x128>)
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <initJoystick+0x128>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <initJoystick+0x128>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	60d3      	str	r3, [r2, #12]

}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800

080014ac <centerIsPressed>:



uint8_t centerIsPressed(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <centerIsPressed+0x50>)
 80014b2:	8a1b      	ldrh	r3, [r3, #16]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <centerIsPressed+0x2c>
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <centerIsPressed+0x54>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <centerIsPressed+0x58>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b1e      	cmp	r3, #30
 80014ca:	d905      	bls.n	80014d8 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <centerIsPressed+0x54>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <centerIsPressed+0x58>)
 80014d2:	6013      	str	r3, [r2, #0]
		 return 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00c      	b.n	80014f2 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <centerIsPressed+0x50>)
 80014da:	8a1b      	ldrh	r3, [r3, #16]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d104      	bne.n	80014f0 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <centerIsPressed+0x54>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3b1e      	subs	r3, #30
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <centerIsPressed+0x58>)
 80014ee:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80014f0:	2300      	movs	r3, #0
	 }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	48000400 	.word	0x48000400
 8001500:	200001c8 	.word	0x200001c8
 8001504:	200001b0 	.word	0x200001b0

08001508 <upIsPressed>:

uint8_t upIsPressed(){
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 800150c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001510:	8a1b      	ldrh	r3, [r3, #16]
 8001512:	b29b      	uxth	r3, r3
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <upIsPressed+0x2e>
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <upIsPressed+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <upIsPressed+0x58>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b1e      	cmp	r3, #30
 8001528:	d905      	bls.n	8001536 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <upIsPressed+0x54>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <upIsPressed+0x58>)
 8001530:	6013      	str	r3, [r2, #0]
			 return 1;
 8001532:	2301      	movs	r3, #1
 8001534:	e00d      	b.n	8001552 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800153a:	8a1b      	ldrh	r3, [r3, #16]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <upIsPressed+0x54>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3b1e      	subs	r3, #30
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <upIsPressed+0x58>)
 800154e:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001550:	2300      	movs	r3, #0
		 }
	 }
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200001c8 	.word	0x200001c8
 8001560:	200001b4 	.word	0x200001b4

08001564 <downIsPressed>:

uint8_t downIsPressed(){
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <downIsPressed+0x50>)
 800156a:	8a1b      	ldrh	r3, [r3, #16]
 800156c:	b29b      	uxth	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00c      	beq.n	8001590 <downIsPressed+0x2c>
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <downIsPressed+0x54>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <downIsPressed+0x58>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b1e      	cmp	r3, #30
 8001582:	d905      	bls.n	8001590 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <downIsPressed+0x54>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <downIsPressed+0x58>)
 800158a:	6013      	str	r3, [r2, #0]
			 return 1;
 800158c:	2301      	movs	r3, #1
 800158e:	e00c      	b.n	80015aa <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <downIsPressed+0x50>)
 8001592:	8a1b      	ldrh	r3, [r3, #16]
 8001594:	b29b      	uxth	r3, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <downIsPressed+0x54>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3b1e      	subs	r3, #30
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <downIsPressed+0x58>)
 80015a6:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80015a8:	2300      	movs	r3, #0
		 }
	 }
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	48000400 	.word	0x48000400
 80015b8:	200001c8 	.word	0x200001c8
 80015bc:	200001b8 	.word	0x200001b8

080015c0 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <initTimer+0x60>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <initTimer+0x60>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <initTimer+0x64>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <initTimer+0x64>)
 80015d8:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80015dc:	f023 030f 	bic.w	r3, r3, #15
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <initTimer+0x64>)
 80015e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <initTimer+0x64>)
 80015ee:	2209      	movs	r2, #9
 80015f0:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <initTimer+0x64>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <initTimer+0x64>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <initTimer+0x64>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <initTimer+0x64>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800160e:	2100      	movs	r1, #0
 8001610:	2018      	movs	r0, #24
 8001612:	f7ff fe8b 	bl	800132c <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001616:	2018      	movs	r0, #24
 8001618:	f7ff fe6e 	bl	80012f8 <NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40014000 	.word	0x40014000

08001628 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	runtime++;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a06      	ldr	r2, [pc, #24]	; (800164c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001634:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6113      	str	r3, [r2, #16]
 }
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	200001c8 	.word	0x200001c8
 8001650:	40014000 	.word	0x40014000

08001654 <I2C_init>:

    return val;
}

void I2C_init()
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <I2C_init+0x144>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <I2C_init+0x144>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8001664:	4b4d      	ldr	r3, [pc, #308]	; (800179c <I2C_init+0x148>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	4a4c      	ldr	r2, [pc, #304]	; (800179c <I2C_init+0x148>)
 800166a:	f023 030f 	bic.w	r3, r3, #15
 800166e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <I2C_init+0x148>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <I2C_init+0x148>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <I2C_init+0x148>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <I2C_init+0x148>)
 8001682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001686:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8001688:	4b44      	ldr	r3, [pc, #272]	; (800179c <I2C_init+0x148>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	4a43      	ldr	r2, [pc, #268]	; (800179c <I2C_init+0x148>)
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <I2C_init+0x148>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a40      	ldr	r2, [pc, #256]	; (800179c <I2C_init+0x148>)
 800169a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800169e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <I2C_init+0x148>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a3d      	ldr	r2, [pc, #244]	; (800179c <I2C_init+0x148>)
 80016a6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80016aa:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <I2C_init+0x148>)
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4a3a      	ldr	r2, [pc, #232]	; (800179c <I2C_init+0x148>)
 80016b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <I2C_init+0x148>)
 80016be:	889b      	ldrh	r3, [r3, #4]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4a36      	ldr	r2, [pc, #216]	; (800179c <I2C_init+0x148>)
 80016c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <I2C_init+0x148>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a32      	ldr	r2, [pc, #200]	; (800179c <I2C_init+0x148>)
 80016d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80016d6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <I2C_init+0x148>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <I2C_init+0x148>)
 80016de:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80016e2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <I2C_init+0x148>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <I2C_init+0x148>)
 80016ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80016ee:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <I2C_init+0x148>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <I2C_init+0x148>)
 80016f6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80016fa:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <I2C_init+0x144>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <I2C_init+0x144>)
 8001702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001706:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <I2C_init+0x14c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <I2C_init+0x14c>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <I2C_init+0x14c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4921      	ldr	r1, [pc, #132]	; (80017a0 <I2C_init+0x14c>)
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <I2C_init+0x150>)
 800171c:	4013      	ands	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <I2C_init+0x14c>)
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <I2C_init+0x14c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <I2C_init+0x14c>)
 800172a:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <I2C_init+0x14c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <I2C_init+0x14c>)
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <I2C_init+0x154>)
 8001734:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <I2C_init+0x14c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <I2C_init+0x14c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <I2C_init+0x14c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <I2C_init+0x14c>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <I2C_init+0x14c>)
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <I2C_init+0x14c>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <I2C_init+0x14c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <I2C_init+0x14c>)
 800175c:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001760:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <I2C_init+0x14c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <I2C_init+0x14c>)
 8001768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176c:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <I2C_init+0x14c>)
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <I2C_init+0x14c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <I2C_init+0x14c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <I2C_init+0x14c>)
 800177c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001784:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <I2C_init+0x14c>)
 8001788:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <I2C_init+0x14c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	6053      	str	r3, [r2, #4]
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	48000400 	.word	0x48000400
 80017a0:	40005400 	.word	0x40005400
 80017a4:	00cfe0ff 	.word	0x00cfe0ff
 80017a8:	10805e89 	.word	0x10805e89

080017ac <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 80017b4:	f002 fba8 	bl	8003f08 <rand>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <spawnEnemy+0xcc>)
 80017bc:	fb82 1203 	smull	r1, r2, r2, r3
 80017c0:	1151      	asrs	r1, r2, #5
 80017c2:	17da      	asrs	r2, r3, #31
 80017c4:	1a8a      	subs	r2, r1, r2
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	fb01 f202 	mul.w	r2, r1, r2
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d14c      	bne.n	8001870 <spawnEnemy+0xc4>
		//int8_t enemyPos = rand() % 156;
		//TODO: Fix tilfældighedsgenerator
		uint8_t enemyPos = 20;
 80017d6:	2314      	movs	r3, #20
 80017d8:	76fb      	strb	r3, [r7, #27]


		enemy_t* enemy = malloc(sizeof(enemy_t));
 80017da:	2014      	movs	r0, #20
 80017dc:	f002 fa76 	bl	8003ccc <malloc>
 80017e0:	4603      	mov	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2202      	movs	r2, #2
 80017e8:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 80017ea:	2008      	movs	r0, #8
 80017ec:	f002 fa6e 	bl	8003ccc <malloc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 80017f4:	7efb      	ldrb	r3, [r7, #27]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f900 	bl	80019fe <intToFp>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 8001804:	2002      	movs	r0, #2
 8001806:	f000 f8fa 	bl	80019fe <intToFp>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8001816:	2008      	movs	r0, #8
 8001818:	f002 fa58 	bl	8003ccc <malloc>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 f8ec 	bl	80019fe <intToFp>
 8001826:	4602      	mov	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000 * yScale;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001832:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 800183a:	2008      	movs	r0, #8
 800183c:	f002 fa46 	bl	8003ccc <malloc>
 8001840:	4603      	mov	r3, r0
 8001842:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <spawnEnemy+0xd0>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2264      	movs	r2, #100	; 0x64
 8001866:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f001 f924 	bl	8002ab8 <appendEnemy>
	}
}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	51eb851f 	.word	0x51eb851f
 800187c:	200001c8 	.word	0x200001c8

08001880 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800188e:	e01c      	b.n	80018ca <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	440a      	add	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	440a      	add	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1df      	bne.n	8001890 <updateEnemy+0x10>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b092      	sub	sp, #72	; 0x48
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80018ee:	e05a      	b.n	80019a6 <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	7b12      	ldrb	r2, [r2, #12]
 80018fc:	441a      	add	r2, r3
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <shootEnemy+0xd8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d24c      	bcs.n	80019a0 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f879 	bl	80019fe <intToFp>
 800190c:	4603      	mov	r3, r0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001910:	2002      	movs	r0, #2
 8001912:	f000 f874 	bl	80019fe <intToFp>
 8001916:	4603      	mov	r3, r0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2)};
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685c      	ldr	r4, [r3, #4]
 800192c:	2002      	movs	r0, #2
 800192e:	f000 f866 	bl	80019fe <intToFp>
 8001932:	4603      	mov	r3, r0
 8001934:	4423      	add	r3, r4
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	615a      	str	r2, [r3, #20]
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001958:	e883 0003 	stmia.w	r3, {r0, r1}
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001968:	e883 0003 	stmia.w	r3, {r0, r1}
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001978:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 800197c:	687d      	ldr	r5, [r7, #4]
 800197e:	466c      	mov	r4, sp
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001990:	4628      	mov	r0, r5
 8001992:	f001 f85e 	bl	8002a52 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <shootEnemy+0xd8>)
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1a1      	bne.n	80018f0 <shootEnemy+0x10>
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};

		appendBullet(&(gameState->bulletLL), bullet);
	}*/
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3738      	adds	r7, #56	; 0x38
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001c8 	.word	0x200001c8

080019bc <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80019ca:	e010      	b.n	80019ee <detectCityHit+0x32>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f827 	bl	8001a28 <fpToInt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b4f      	cmp	r3, #79	; 0x4f
 80019de:	dd03      	ble.n	80019e8 <detectCityHit+0x2c>
			//gameState->cityLives--;
			deleteEnemyNode(gameState, thisNode);
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f001 f896 	bl	8002b14 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1eb      	bne.n	80019cc <detectCityHit+0x10>
	}
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
	output+=n;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	60fb      	str	r3, [r7, #12]
	return output;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60bb      	str	r3, [r7, #8]
	int output=0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a3e:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	607b      	str	r3, [r7, #4]
	output+=fp;
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da03      	bge.n	8001a5c <fpToInt+0x34>
		output-=65536;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001a5a:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8001a5c:	68fb      	ldr	r3, [r7, #12]

}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	n>>=8;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	607b      	str	r3, [r7, #4]
	m>>=8;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	60fb      	str	r3, [r7, #12]

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0c03      	lsrs	r3, r0, #16
 8001ac0:	0402      	lsls	r2, r0, #16
 8001ac2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ad4:	1884      	adds	r4, r0, r2
 8001ad6:	eb41 0503 	adc.w	r5, r1, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fbcb 	bl	8000280 <__aeabi_uldivmod>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4613      	mov	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]

    return result;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	1d38      	adds	r0, r7, #4
 8001b06:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b0a:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ffaa 	bl	8001a6a <fpMultiply>
 8001b16:	4603      	mov	r3, r0
 8001b18:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ffa3 	bl	8001a6a <fpMultiply>
 8001b24:	4603      	mov	r3, r0
 8001b26:	617b      	str	r3, [r7, #20]
	return vectorOut;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b34:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <fpAbs+0x18>
			output=(~output)+1;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	425b      	negs	r3, r3
 8001b56:	60fb      	str	r3, [r7, #12]
		}
	return output;
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <drawbackground>:
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8001b6a:	2123      	movs	r1, #35	; 0x23
 8001b6c:	2037      	movs	r0, #55	; 0x37
 8001b6e:	f7ff f9d9 	bl	8000f24 <gotoxy>
	printf("*");
 8001b72:	202a      	movs	r0, #42	; 0x2a
 8001b74:	f002 f984 	bl	8003e80 <putchar>
	gotoxy(63,27);
 8001b78:	211b      	movs	r1, #27
 8001b7a:	203f      	movs	r0, #63	; 0x3f
 8001b7c:	f7ff f9d2 	bl	8000f24 <gotoxy>
	printf("*");
 8001b80:	202a      	movs	r0, #42	; 0x2a
 8001b82:	f002 f97d 	bl	8003e80 <putchar>
	gotoxy(10,15);
 8001b86:	210f      	movs	r1, #15
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff f9cb 	bl	8000f24 <gotoxy>
	printf("*");
 8001b8e:	202a      	movs	r0, #42	; 0x2a
 8001b90:	f002 f976 	bl	8003e80 <putchar>
	gotoxy(20,40);
 8001b94:	2128      	movs	r1, #40	; 0x28
 8001b96:	2014      	movs	r0, #20
 8001b98:	f7ff f9c4 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001b9c:	202b      	movs	r0, #43	; 0x2b
 8001b9e:	f002 f96f 	bl	8003e80 <putchar>

	gotoxy(155,37);
 8001ba2:	2125      	movs	r1, #37	; 0x25
 8001ba4:	209b      	movs	r0, #155	; 0x9b
 8001ba6:	f7ff f9bd 	bl	8000f24 <gotoxy>
	printf("*");
 8001baa:	202a      	movs	r0, #42	; 0x2a
 8001bac:	f002 f968 	bl	8003e80 <putchar>
	gotoxy(110,28);
 8001bb0:	211c      	movs	r1, #28
 8001bb2:	206e      	movs	r0, #110	; 0x6e
 8001bb4:	f7ff f9b6 	bl	8000f24 <gotoxy>
	printf("*");
 8001bb8:	202a      	movs	r0, #42	; 0x2a
 8001bba:	f002 f961 	bl	8003e80 <putchar>
	gotoxy(95,13);
 8001bbe:	210d      	movs	r1, #13
 8001bc0:	205f      	movs	r0, #95	; 0x5f
 8001bc2:	f7ff f9af 	bl	8000f24 <gotoxy>
	printf("*");
 8001bc6:	202a      	movs	r0, #42	; 0x2a
 8001bc8:	f002 f95a 	bl	8003e80 <putchar>
	gotoxy(130,19);
 8001bcc:	2113      	movs	r1, #19
 8001bce:	2082      	movs	r0, #130	; 0x82
 8001bd0:	f7ff f9a8 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001bd4:	202b      	movs	r0, #43	; 0x2b
 8001bd6:	f002 f953 	bl	8003e80 <putchar>

	gotoxy(5,27);
 8001bda:	211b      	movs	r1, #27
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f7ff f9a1 	bl	8000f24 <gotoxy>
	printf("*");
 8001be2:	202a      	movs	r0, #42	; 0x2a
 8001be4:	f002 f94c 	bl	8003e80 <putchar>
	gotoxy(6,5);
 8001be8:	2105      	movs	r1, #5
 8001bea:	2006      	movs	r0, #6
 8001bec:	f7ff f99a 	bl	8000f24 <gotoxy>
	printf("*");
 8001bf0:	202a      	movs	r0, #42	; 0x2a
 8001bf2:	f002 f945 	bl	8003e80 <putchar>
	gotoxy(13,13);
 8001bf6:	210d      	movs	r1, #13
 8001bf8:	200d      	movs	r0, #13
 8001bfa:	f7ff f993 	bl	8000f24 <gotoxy>
	printf("*");
 8001bfe:	202a      	movs	r0, #42	; 0x2a
 8001c00:	f002 f93e 	bl	8003e80 <putchar>
	gotoxy(60,7);
 8001c04:	2107      	movs	r1, #7
 8001c06:	203c      	movs	r0, #60	; 0x3c
 8001c08:	f7ff f98c 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001c0c:	202b      	movs	r0, #43	; 0x2b
 8001c0e:	f002 f937 	bl	8003e80 <putchar>

	gotoxy(140,3);
 8001c12:	2103      	movs	r1, #3
 8001c14:	208c      	movs	r0, #140	; 0x8c
 8001c16:	f7ff f985 	bl	8000f24 <gotoxy>
	printf("*");
 8001c1a:	202a      	movs	r0, #42	; 0x2a
 8001c1c:	f002 f930 	bl	8003e80 <putchar>
	gotoxy(120,5);
 8001c20:	2105      	movs	r1, #5
 8001c22:	2078      	movs	r0, #120	; 0x78
 8001c24:	f7ff f97e 	bl	8000f24 <gotoxy>
	printf("*");
 8001c28:	202a      	movs	r0, #42	; 0x2a
 8001c2a:	f002 f929 	bl	8003e80 <putchar>
	gotoxy(110,7);
 8001c2e:	2107      	movs	r1, #7
 8001c30:	206e      	movs	r0, #110	; 0x6e
 8001c32:	f7ff f977 	bl	8000f24 <gotoxy>
	printf("*");
 8001c36:	202a      	movs	r0, #42	; 0x2a
 8001c38:	f002 f922 	bl	8003e80 <putchar>
	gotoxy(70,30);
 8001c3c:	211e      	movs	r1, #30
 8001c3e:	2046      	movs	r0, #70	; 0x46
 8001c40:	f7ff f970 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001c44:	202b      	movs	r0, #43	; 0x2b
 8001c46:	f002 f91b 	bl	8003e80 <putchar>

	gotoxy(135,33);
 8001c4a:	2121      	movs	r1, #33	; 0x21
 8001c4c:	2087      	movs	r0, #135	; 0x87
 8001c4e:	f7ff f969 	bl	8000f24 <gotoxy>
	printf("*");
 8001c52:	202a      	movs	r0, #42	; 0x2a
 8001c54:	f002 f914 	bl	8003e80 <putchar>
	gotoxy(123,36);
 8001c58:	2124      	movs	r1, #36	; 0x24
 8001c5a:	207b      	movs	r0, #123	; 0x7b
 8001c5c:	f7ff f962 	bl	8000f24 <gotoxy>
	printf("*");
 8001c60:	202a      	movs	r0, #42	; 0x2a
 8001c62:	f002 f90d 	bl	8003e80 <putchar>
	gotoxy(138,40);
 8001c66:	2128      	movs	r1, #40	; 0x28
 8001c68:	208a      	movs	r0, #138	; 0x8a
 8001c6a:	f7ff f95b 	bl	8000f24 <gotoxy>
	printf("*");
 8001c6e:	202a      	movs	r0, #42	; 0x2a
 8001c70:	f002 f906 	bl	8003e80 <putchar>
	gotoxy(127,25);
 8001c74:	2119      	movs	r1, #25
 8001c76:	207f      	movs	r0, #127	; 0x7f
 8001c78:	f7ff f954 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001c7c:	202b      	movs	r0, #43	; 0x2b
 8001c7e:	f002 f8ff 	bl	8003e80 <putchar>

	gotoxy(105,32);
 8001c82:	2120      	movs	r1, #32
 8001c84:	2069      	movs	r0, #105	; 0x69
 8001c86:	f7ff f94d 	bl	8000f24 <gotoxy>
	printf("%c",42);
 8001c8a:	202a      	movs	r0, #42	; 0x2a
 8001c8c:	f002 f8f8 	bl	8003e80 <putchar>
	gotoxy(106,33);
 8001c90:	2121      	movs	r1, #33	; 0x21
 8001c92:	206a      	movs	r0, #106	; 0x6a
 8001c94:	f7ff f946 	bl	8000f24 <gotoxy>
	printf("%c",92);
 8001c98:	205c      	movs	r0, #92	; 0x5c
 8001c9a:	f002 f8f1 	bl	8003e80 <putchar>
	gotoxy(107,34);
 8001c9e:	2122      	movs	r1, #34	; 0x22
 8001ca0:	206b      	movs	r0, #107	; 0x6b
 8001ca2:	f7ff f93f 	bl	8000f24 <gotoxy>
	printf("%c",92);
 8001ca6:	205c      	movs	r0, #92	; 0x5c
 8001ca8:	f002 f8ea 	bl	8003e80 <putchar>

	gotoxy(23,15);
 8001cac:	210f      	movs	r1, #15
 8001cae:	2017      	movs	r0, #23
 8001cb0:	f7ff f938 	bl	8000f24 <gotoxy>
	printf("*");
 8001cb4:	202a      	movs	r0, #42	; 0x2a
 8001cb6:	f002 f8e3 	bl	8003e80 <putchar>
	gotoxy(37,21);
 8001cba:	2115      	movs	r1, #21
 8001cbc:	2025      	movs	r0, #37	; 0x25
 8001cbe:	f7ff f931 	bl	8000f24 <gotoxy>
	printf("*");
 8001cc2:	202a      	movs	r0, #42	; 0x2a
 8001cc4:	f002 f8dc 	bl	8003e80 <putchar>
	gotoxy(26,24);
 8001cc8:	2118      	movs	r1, #24
 8001cca:	201a      	movs	r0, #26
 8001ccc:	f7ff f92a 	bl	8000f24 <gotoxy>
	printf("*");
 8001cd0:	202a      	movs	r0, #42	; 0x2a
 8001cd2:	f002 f8d5 	bl	8003e80 <putchar>
	gotoxy(30,29);
 8001cd6:	211d      	movs	r1, #29
 8001cd8:	201e      	movs	r0, #30
 8001cda:	f7ff f923 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001cde:	202b      	movs	r0, #43	; 0x2b
 8001ce0:	f002 f8ce 	bl	8003e80 <putchar>

	gotoxy(25,6);
 8001ce4:	2106      	movs	r1, #6
 8001ce6:	2019      	movs	r0, #25
 8001ce8:	f7ff f91c 	bl	8000f24 <gotoxy>
	printf("*");
 8001cec:	202a      	movs	r0, #42	; 0x2a
 8001cee:	f002 f8c7 	bl	8003e80 <putchar>
	gotoxy(39,7);
 8001cf2:	2107      	movs	r1, #7
 8001cf4:	2027      	movs	r0, #39	; 0x27
 8001cf6:	f7ff f915 	bl	8000f24 <gotoxy>
	printf("*");
 8001cfa:	202a      	movs	r0, #42	; 0x2a
 8001cfc:	f002 f8c0 	bl	8003e80 <putchar>
	gotoxy(41,3);
 8001d00:	2103      	movs	r1, #3
 8001d02:	2029      	movs	r0, #41	; 0x29
 8001d04:	f7ff f90e 	bl	8000f24 <gotoxy>
	printf("*");
 8001d08:	202a      	movs	r0, #42	; 0x2a
 8001d0a:	f002 f8b9 	bl	8003e80 <putchar>
	gotoxy(75,10);
 8001d0e:	210a      	movs	r1, #10
 8001d10:	204b      	movs	r0, #75	; 0x4b
 8001d12:	f7ff f907 	bl	8000f24 <gotoxy>
	printf("%c",43);
 8001d16:	202b      	movs	r0, #43	; 0x2b
 8001d18:	f002 f8b2 	bl	8003e80 <putchar>

	gotoxy(100,20);
 8001d1c:	2114      	movs	r1, #20
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f7ff f900 	bl	8000f24 <gotoxy>
	printf("%c",197);
 8001d24:	20c5      	movs	r0, #197	; 0xc5
 8001d26:	f002 f8ab 	bl	8003e80 <putchar>
	gotoxy(135,12);
 8001d2a:	210c      	movs	r1, #12
 8001d2c:	2087      	movs	r0, #135	; 0x87
 8001d2e:	f7ff f8f9 	bl	8000f24 <gotoxy>
	printf("%c",197);
 8001d32:	20c5      	movs	r0, #197	; 0xc5
 8001d34:	f002 f8a4 	bl	8003e80 <putchar>
	gotoxy(30,5);
 8001d38:	2105      	movs	r1, #5
 8001d3a:	201e      	movs	r0, #30
 8001d3c:	f7ff f8f2 	bl	8000f24 <gotoxy>
	printf("%c",197);
 8001d40:	20c5      	movs	r0, #197	; 0xc5
 8001d42:	f002 f89d 	bl	8003e80 <putchar>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	460a      	mov	r2, r1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	71bb      	strb	r3, [r7, #6]
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	3303      	adds	r3, #3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff f8da 	bl	8000f24 <gotoxy>
	printf("_");
 8001d70:	205f      	movs	r0, #95	; 0x5f
 8001d72:	f002 f885 	bl	8003e80 <putchar>
	gotoxy(X,Y+3);
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff f8d0 	bl	8000f24 <gotoxy>
	printf("_");
 8001d84:	205f      	movs	r0, #95	; 0x5f
 8001d86:	f002 f87b 	bl	8003e80 <putchar>
	gotoxy(X+1,Y+3);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	3303      	adds	r3, #3
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f7ff f8c5 	bl	8000f24 <gotoxy>
	printf("_");
 8001d9a:	205f      	movs	r0, #95	; 0x5f
 8001d9c:	f002 f870 	bl	8003e80 <putchar>
	gotoxy(X-2,Y+3);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	1e9a      	subs	r2, r3, #2
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	3303      	adds	r3, #3
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7ff f8ba 	bl	8000f24 <gotoxy>
	printf("(");
 8001db0:	2028      	movs	r0, #40	; 0x28
 8001db2:	f002 f865 	bl	8003e80 <putchar>
	gotoxy(X+2,Y+3);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7ff f8af 	bl	8000f24 <gotoxy>
	printf(")");
 8001dc6:	2029      	movs	r0, #41	; 0x29
 8001dc8:	f002 f85a 	bl	8003e80 <putchar>

	gotoxy(X+3,Y+2);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	1cda      	adds	r2, r3, #3
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7ff f8a4 	bl	8000f24 <gotoxy>
	printf("_");
 8001ddc:	205f      	movs	r0, #95	; 0x5f
 8001dde:	f002 f84f 	bl	8003e80 <putchar>
	gotoxy(X-3,Y+2);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	1eda      	subs	r2, r3, #3
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	3302      	adds	r3, #2
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7ff f899 	bl	8000f24 <gotoxy>
	printf("_");
 8001df2:	205f      	movs	r0, #95	; 0x5f
 8001df4:	f002 f844 	bl	8003e80 <putchar>
	gotoxy(X+4,Y+2);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f7ff f88e 	bl	8000f24 <gotoxy>
	printf("(");
 8001e08:	2028      	movs	r0, #40	; 0x28
 8001e0a:	f002 f839 	bl	8003e80 <putchar>
	gotoxy(X-4,Y+2);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	1f1a      	subs	r2, r3, #4
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	3302      	adds	r3, #2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f7ff f883 	bl	8000f24 <gotoxy>
	printf(")");
 8001e1e:	2029      	movs	r0, #41	; 0x29
 8001e20:	f002 f82e 	bl	8003e80 <putchar>

	gotoxy(X-5,Y+1);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	1f5a      	subs	r2, r3, #5
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff f878 	bl	8000f24 <gotoxy>
	printf("(");
 8001e34:	2028      	movs	r0, #40	; 0x28
 8001e36:	f002 f823 	bl	8003e80 <putchar>
	gotoxy(X+5,Y+1);
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	1d5a      	adds	r2, r3, #5
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f7ff f86d 	bl	8000f24 <gotoxy>
	printf("(");
 8001e4a:	2028      	movs	r0, #40	; 0x28
 8001e4c:	f002 f818 	bl	8003e80 <putchar>
	gotoxy(X-6,Y);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	3b06      	subs	r3, #6
 8001e54:	79ba      	ldrb	r2, [r7, #6]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f863 	bl	8000f24 <gotoxy>
	printf("(");
 8001e5e:	2028      	movs	r0, #40	; 0x28
 8001e60:	f002 f80e 	bl	8003e80 <putchar>
	gotoxy(X+6,Y);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	3306      	adds	r3, #6
 8001e68:	79ba      	ldrb	r2, [r7, #6]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f859 	bl	8000f24 <gotoxy>
	printf(")");
 8001e72:	2029      	movs	r0, #41	; 0x29
 8001e74:	f002 f804 	bl	8003e80 <putchar>

	gotoxy(X-5,Y-1);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	1f5a      	subs	r2, r3, #5
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff f84e 	bl	8000f24 <gotoxy>
	printf("(");
 8001e88:	2028      	movs	r0, #40	; 0x28
 8001e8a:	f001 fff9 	bl	8003e80 <putchar>
	gotoxy(X+5,Y-1);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	1d5a      	adds	r2, r3, #5
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7ff f843 	bl	8000f24 <gotoxy>
	printf(")");
 8001e9e:	2029      	movs	r0, #41	; 0x29
 8001ea0:	f001 ffee 	bl	8003e80 <putchar>
	gotoxy(X-4,Y-2);
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	1f1a      	subs	r2, r3, #4
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	3b02      	subs	r3, #2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f7ff f838 	bl	8000f24 <gotoxy>
	printf("(");
 8001eb4:	2028      	movs	r0, #40	; 0x28
 8001eb6:	f001 ffe3 	bl	8003e80 <putchar>
	gotoxy(X+4,Y-2);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	1d1a      	adds	r2, r3, #4
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	3b02      	subs	r3, #2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7ff f82d 	bl	8000f24 <gotoxy>
	printf(")");
 8001eca:	2029      	movs	r0, #41	; 0x29
 8001ecc:	f001 ffd8 	bl	8003e80 <putchar>

	gotoxy(X-3,Y-3);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	1eda      	subs	r2, r3, #3
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	3b03      	subs	r3, #3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7ff f822 	bl	8000f24 <gotoxy>
	printf("_");
 8001ee0:	205f      	movs	r0, #95	; 0x5f
 8001ee2:	f001 ffcd 	bl	8003e80 <putchar>
	gotoxy(X+3,Y-3);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	1cda      	adds	r2, r3, #3
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7ff f817 	bl	8000f24 <gotoxy>
	printf("_");
 8001ef6:	205f      	movs	r0, #95	; 0x5f
 8001ef8:	f001 ffc2 	bl	8003e80 <putchar>
	gotoxy(X-2,Y-3);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	1e9a      	subs	r2, r3, #2
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	3b03      	subs	r3, #3
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff f80c 	bl	8000f24 <gotoxy>
	printf("(");
 8001f0c:	2028      	movs	r0, #40	; 0x28
 8001f0e:	f001 ffb7 	bl	8003e80 <putchar>
	gotoxy(X+2,Y-3);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	1c9a      	adds	r2, r3, #2
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f7ff f801 	bl	8000f24 <gotoxy>
	printf(")");
 8001f22:	2029      	movs	r0, #41	; 0x29
 8001f24:	f001 ffac 	bl	8003e80 <putchar>

	gotoxy(X-1,Y-4);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f7fe fff6 	bl	8000f24 <gotoxy>
	printf("_");
 8001f38:	205f      	movs	r0, #95	; 0x5f
 8001f3a:	f001 ffa1 	bl	8003e80 <putchar>
	gotoxy(X,Y-4);
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	3b04      	subs	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f7fe ffec 	bl	8000f24 <gotoxy>
	printf("_");
 8001f4c:	205f      	movs	r0, #95	; 0x5f
 8001f4e:	f001 ff97 	bl	8003e80 <putchar>
	gotoxy(X+1,Y-4);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	3b04      	subs	r3, #4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f7fe ffe1 	bl	8000f24 <gotoxy>
	printf("_");
 8001f62:	205f      	movs	r0, #95	; 0x5f
 8001f64:	f001 ff8c 	bl	8003e80 <putchar>

	gotoxy(X-2,Y);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	3b02      	subs	r3, #2
 8001f6c:	79ba      	ldrb	r2, [r7, #6]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ffd7 	bl	8000f24 <gotoxy>
	printf("O");
 8001f76:	204f      	movs	r0, #79	; 0x4f
 8001f78:	f001 ff82 	bl	8003e80 <putchar>
	gotoxy(X+1,Y+2);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	3302      	adds	r3, #2
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7fe ffcc 	bl	8000f24 <gotoxy>
	printf("o");
 8001f8c:	206f      	movs	r0, #111	; 0x6f
 8001f8e:	f001 ff77 	bl	8003e80 <putchar>
	gotoxy(X+3,Y-1);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	1cda      	adds	r2, r3, #3
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe ffc1 	bl	8000f24 <gotoxy>
	printf("O");
 8001fa2:	204f      	movs	r0, #79	; 0x4f
 8001fa4:	f001 ff6c 	bl	8003e80 <putchar>

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f7fe ffb2 	bl	8000f24 <gotoxy>
	printf("           ");
 8001fc0:	483b      	ldr	r0, [pc, #236]	; (80020b0 <drawhearth+0x100>)
 8001fc2:	f001 ff45 	bl	8003e50 <iprintf>
	gotoxy(15,2);
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f7fe ffab 	bl	8000f24 <gotoxy>
	printf("           ");
 8001fce:	4838      	ldr	r0, [pc, #224]	; (80020b0 <drawhearth+0x100>)
 8001fd0:	f001 ff3e 	bl	8003e50 <iprintf>
	fgcolor(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe ff79 	bl	8000ecc <fgcolor>

	if(gameState->cityLives >= 1){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <drawhearth+0x6c>
		gotoxy(15,1);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f7fe ff9c 	bl	8000f24 <gotoxy>
		printf("%c",219);
 8001fec:	20db      	movs	r0, #219	; 0xdb
 8001fee:	f001 ff47 	bl	8003e80 <putchar>
		gotoxy(17,1);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2011      	movs	r0, #17
 8001ff6:	f7fe ff95 	bl	8000f24 <gotoxy>
		printf("%c",219);
 8001ffa:	20db      	movs	r0, #219	; 0xdb
 8001ffc:	f001 ff40 	bl	8003e80 <putchar>
		gotoxy(16,2);
 8002000:	2102      	movs	r1, #2
 8002002:	2010      	movs	r0, #16
 8002004:	f7fe ff8e 	bl	8000f24 <gotoxy>
		printf("%c",223);
 8002008:	20df      	movs	r0, #223	; 0xdf
 800200a:	f001 ff39 	bl	8003e80 <putchar>
		gotoxy(16,1);
 800200e:	2101      	movs	r1, #1
 8002010:	2010      	movs	r0, #16
 8002012:	f7fe ff87 	bl	8000f24 <gotoxy>
		printf("%c",220);
 8002016:	20dc      	movs	r0, #220	; 0xdc
 8002018:	f001 ff32 	bl	8003e80 <putchar>
	}
	if(gameState->cityLives >= 2){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	2b01      	cmp	r3, #1
 8002024:	d91b      	bls.n	800205e <drawhearth+0xae>
		gotoxy(19,1);
 8002026:	2101      	movs	r1, #1
 8002028:	2013      	movs	r0, #19
 800202a:	f7fe ff7b 	bl	8000f24 <gotoxy>
		printf("%c",219);
 800202e:	20db      	movs	r0, #219	; 0xdb
 8002030:	f001 ff26 	bl	8003e80 <putchar>
		gotoxy(21,1);
 8002034:	2101      	movs	r1, #1
 8002036:	2015      	movs	r0, #21
 8002038:	f7fe ff74 	bl	8000f24 <gotoxy>
		printf("%c",219);
 800203c:	20db      	movs	r0, #219	; 0xdb
 800203e:	f001 ff1f 	bl	8003e80 <putchar>
		gotoxy(20,2);
 8002042:	2102      	movs	r1, #2
 8002044:	2014      	movs	r0, #20
 8002046:	f7fe ff6d 	bl	8000f24 <gotoxy>
		printf("%c",223);
 800204a:	20df      	movs	r0, #223	; 0xdf
 800204c:	f001 ff18 	bl	8003e80 <putchar>
		gotoxy(20,1);
 8002050:	2101      	movs	r1, #1
 8002052:	2014      	movs	r0, #20
 8002054:	f7fe ff66 	bl	8000f24 <gotoxy>
		printf("%c",220);
 8002058:	20dc      	movs	r0, #220	; 0xdc
 800205a:	f001 ff11 	bl	8003e80 <putchar>

	}
	if(gameState->cityLives >= 3){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002064:	2b02      	cmp	r3, #2
 8002066:	d91b      	bls.n	80020a0 <drawhearth+0xf0>
		gotoxy(23,1);
 8002068:	2101      	movs	r1, #1
 800206a:	2017      	movs	r0, #23
 800206c:	f7fe ff5a 	bl	8000f24 <gotoxy>
		printf("%c",219);
 8002070:	20db      	movs	r0, #219	; 0xdb
 8002072:	f001 ff05 	bl	8003e80 <putchar>
		gotoxy(25,1);
 8002076:	2101      	movs	r1, #1
 8002078:	2019      	movs	r0, #25
 800207a:	f7fe ff53 	bl	8000f24 <gotoxy>
		printf("%c",219);
 800207e:	20db      	movs	r0, #219	; 0xdb
 8002080:	f001 fefe 	bl	8003e80 <putchar>
		gotoxy(24,2);
 8002084:	2102      	movs	r1, #2
 8002086:	2018      	movs	r0, #24
 8002088:	f7fe ff4c 	bl	8000f24 <gotoxy>
		printf("%c",223);
 800208c:	20df      	movs	r0, #223	; 0xdf
 800208e:	f001 fef7 	bl	8003e80 <putchar>
		gotoxy(24,1);
 8002092:	2101      	movs	r1, #1
 8002094:	2018      	movs	r0, #24
 8002096:	f7fe ff45 	bl	8000f24 <gotoxy>
		printf("%c",220);
 800209a:	20dc      	movs	r0, #220	; 0xdc
 800209c:	f001 fef0 	bl	8003e80 <putchar>
	}
	fgcolor(15);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7fe ff13 	bl	8000ecc <fgcolor>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	080050b4 	.word	0x080050b4

080020b4 <drawEnemy>:
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af04      	add	r7, sp, #16
 80020ba:	6078      	str	r0, [r7, #4]
	//int isLastElement = 0;
	enemyNode_t* thisNode = gameState->enemyLL;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 80020c2:	e087      	b.n	80021d4 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fcab 	bl	8001a28 <fpToInt>
 80020d2:	4604      	mov	r4, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fca3 	bl	8001a28 <fpToInt>
 80020e2:	4603      	mov	r3, r0
 80020e4:	0fda      	lsrs	r2, r3, #31
 80020e6:	4413      	add	r3, r2
 80020e8:	105b      	asrs	r3, r3, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7fe ff19 	bl	8000f24 <gotoxy>
		printf("       ");
 80020f2:	483d      	ldr	r0, [pc, #244]	; (80021e8 <drawEnemy+0x134>)
 80020f4:	f001 feac 	bl	8003e50 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc91 	bl	8001a28 <fpToInt>
 8002106:	4604      	mov	r4, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fc89 	bl	8001a28 <fpToInt>
 8002116:	4603      	mov	r3, r0
 8002118:	3302      	adds	r3, #2
 800211a:	0fda      	lsrs	r2, r3, #31
 800211c:	4413      	add	r3, r2
 800211e:	105b      	asrs	r3, r3, #1
 8002120:	4619      	mov	r1, r3
 8002122:	4620      	mov	r0, r4
 8002124:	f7fe fefe 	bl	8000f24 <gotoxy>
		printf("       ");
 8002128:	482f      	ldr	r0, [pc, #188]	; (80021e8 <drawEnemy+0x134>)
 800212a:	f001 fe91 	bl	8003e50 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc76 	bl	8001a28 <fpToInt>
 800213c:	4604      	mov	r4, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc6e 	bl	8001a28 <fpToInt>
 800214c:	4603      	mov	r3, r0
 800214e:	0fda      	lsrs	r2, r3, #31
 8002150:	4413      	add	r3, r2
 8002152:	105b      	asrs	r3, r3, #1
 8002154:	4619      	mov	r1, r3
 8002156:	4620      	mov	r0, r4
 8002158:	f7fe fee4 	bl	8000f24 <gotoxy>
		printf("  o o  ");
 800215c:	4823      	ldr	r0, [pc, #140]	; (80021ec <drawEnemy+0x138>)
 800215e:	f001 fe77 	bl	8003e50 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fc5c 	bl	8001a28 <fpToInt>
 8002170:	4604      	mov	r4, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fc54 	bl	8001a28 <fpToInt>
 8002180:	4603      	mov	r3, r0
 8002182:	3302      	adds	r3, #2
 8002184:	0fda      	lsrs	r2, r3, #31
 8002186:	4413      	add	r3, r2
 8002188:	105b      	asrs	r3, r3, #1
 800218a:	4619      	mov	r1, r3
 800218c:	4620      	mov	r0, r4
 800218e:	f7fe fec9 	bl	8000f24 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8002192:	23bb      	movs	r3, #187	; 0xbb
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	23cd      	movs	r3, #205	; 0xcd
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	23cd      	movs	r3, #205	; 0xcd
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	23cd      	movs	r3, #205	; 0xcd
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	23cd      	movs	r3, #205	; 0xcd
 80021a4:	22cd      	movs	r2, #205	; 0xcd
 80021a6:	21c9      	movs	r1, #201	; 0xc9
 80021a8:	4811      	ldr	r0, [pc, #68]	; (80021f0 <drawEnemy+0x13c>)
 80021aa:	f001 fe51 	bl	8003e50 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6852      	ldr	r2, [r2, #4]
 80021cc:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f af74 	bne.w	80020c4 <drawEnemy+0x10>
	}
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	080050c0 	.word	0x080050c0
 80021ec:	080050c8 	.word	0x080050c8
 80021f0:	080050d0 	.word	0x080050d0

080021f4 <drawCity>:
	printf("%c",127);
}



void drawCity(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

	gotoxy(14,44);
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	200e      	movs	r0, #14
 80021fc:	f7fe fe92 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002200:	20db      	movs	r0, #219	; 0xdb
 8002202:	f001 fe3d 	bl	8003e80 <putchar>

	gotoxy(16,44);
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	2010      	movs	r0, #16
 800220a:	f7fe fe8b 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800220e:	20db      	movs	r0, #219	; 0xdb
 8002210:	f001 fe36 	bl	8003e80 <putchar>

	gotoxy(17,44);
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	2011      	movs	r0, #17
 8002218:	f7fe fe84 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800221c:	20db      	movs	r0, #219	; 0xdb
 800221e:	f001 fe2f 	bl	8003e80 <putchar>
	gotoxy(17,43);
 8002222:	212b      	movs	r1, #43	; 0x2b
 8002224:	2011      	movs	r0, #17
 8002226:	f7fe fe7d 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800222a:	20db      	movs	r0, #219	; 0xdb
 800222c:	f001 fe28 	bl	8003e80 <putchar>

	gotoxy(19,44);
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	2013      	movs	r0, #19
 8002234:	f7fe fe76 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002238:	20dc      	movs	r0, #220	; 0xdc
 800223a:	f001 fe21 	bl	8003e80 <putchar>

	gotoxy(21,44);
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	2015      	movs	r0, #21
 8002242:	f7fe fe6f 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002246:	20db      	movs	r0, #219	; 0xdb
 8002248:	f001 fe1a 	bl	8003e80 <putchar>

	gotoxy(23,44);
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	2017      	movs	r0, #23
 8002250:	f7fe fe68 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002254:	20db      	movs	r0, #219	; 0xdb
 8002256:	f001 fe13 	bl	8003e80 <putchar>
	gotoxy(23,43);
 800225a:	212b      	movs	r1, #43	; 0x2b
 800225c:	2017      	movs	r0, #23
 800225e:	f7fe fe61 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002262:	20dc      	movs	r0, #220	; 0xdc
 8002264:	f001 fe0c 	bl	8003e80 <putchar>

	gotoxy(25,44);
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	2019      	movs	r0, #25
 800226c:	f7fe fe5a 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002270:	20db      	movs	r0, #219	; 0xdb
 8002272:	f001 fe05 	bl	8003e80 <putchar>
	gotoxy(25,43);
 8002276:	212b      	movs	r1, #43	; 0x2b
 8002278:	2019      	movs	r0, #25
 800227a:	f7fe fe53 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800227e:	20db      	movs	r0, #219	; 0xdb
 8002280:	f001 fdfe 	bl	8003e80 <putchar>
	gotoxy(25,42);
 8002284:	212a      	movs	r1, #42	; 0x2a
 8002286:	2019      	movs	r0, #25
 8002288:	f7fe fe4c 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800228c:	20db      	movs	r0, #219	; 0xdb
 800228e:	f001 fdf7 	bl	8003e80 <putchar>

	gotoxy(27,44);
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	201b      	movs	r0, #27
 8002296:	f7fe fe45 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800229a:	20db      	movs	r0, #219	; 0xdb
 800229c:	f001 fdf0 	bl	8003e80 <putchar>
	gotoxy(27,43);
 80022a0:	212b      	movs	r1, #43	; 0x2b
 80022a2:	201b      	movs	r0, #27
 80022a4:	f7fe fe3e 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80022a8:	20dc      	movs	r0, #220	; 0xdc
 80022aa:	f001 fde9 	bl	8003e80 <putchar>

	gotoxy(28,44);
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	201c      	movs	r0, #28
 80022b2:	f7fe fe37 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80022b6:	20db      	movs	r0, #219	; 0xdb
 80022b8:	f001 fde2 	bl	8003e80 <putchar>

	gotoxy(36,44);
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	2024      	movs	r0, #36	; 0x24
 80022c0:	f7fe fe30 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80022c4:	20db      	movs	r0, #219	; 0xdb
 80022c6:	f001 fddb 	bl	8003e80 <putchar>
	gotoxy(36,43);
 80022ca:	212b      	movs	r1, #43	; 0x2b
 80022cc:	2024      	movs	r0, #36	; 0x24
 80022ce:	f7fe fe29 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80022d2:	20db      	movs	r0, #219	; 0xdb
 80022d4:	f001 fdd4 	bl	8003e80 <putchar>

	gotoxy(37,44);
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	2025      	movs	r0, #37	; 0x25
 80022dc:	f7fe fe22 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80022e0:	20db      	movs	r0, #219	; 0xdb
 80022e2:	f001 fdcd 	bl	8003e80 <putchar>

	gotoxy(38,44);
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	2026      	movs	r0, #38	; 0x26
 80022ea:	f7fe fe1b 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80022ee:	20dc      	movs	r0, #220	; 0xdc
 80022f0:	f001 fdc6 	bl	8003e80 <putchar>

	gotoxy(40,44);
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	2028      	movs	r0, #40	; 0x28
 80022f8:	f7fe fe14 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80022fc:	20db      	movs	r0, #219	; 0xdb
 80022fe:	f001 fdbf 	bl	8003e80 <putchar>
	gotoxy(40,43);
 8002302:	212b      	movs	r1, #43	; 0x2b
 8002304:	2028      	movs	r0, #40	; 0x28
 8002306:	f7fe fe0d 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800230a:	20db      	movs	r0, #219	; 0xdb
 800230c:	f001 fdb8 	bl	8003e80 <putchar>

	gotoxy(41,43);
 8002310:	212b      	movs	r1, #43	; 0x2b
 8002312:	2029      	movs	r0, #41	; 0x29
 8002314:	f7fe fe06 	bl	8000f24 <gotoxy>
	printf("%c",205);
 8002318:	20cd      	movs	r0, #205	; 0xcd
 800231a:	f001 fdb1 	bl	8003e80 <putchar>

	gotoxy(42,44);
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	202a      	movs	r0, #42	; 0x2a
 8002322:	f7fe fdff 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002326:	20db      	movs	r0, #219	; 0xdb
 8002328:	f001 fdaa 	bl	8003e80 <putchar>
	gotoxy(42,43);
 800232c:	212b      	movs	r1, #43	; 0x2b
 800232e:	202a      	movs	r0, #42	; 0x2a
 8002330:	f7fe fdf8 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002334:	20db      	movs	r0, #219	; 0xdb
 8002336:	f001 fda3 	bl	8003e80 <putchar>

	gotoxy(45,44);
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	202d      	movs	r0, #45	; 0x2d
 800233e:	f7fe fdf1 	bl	8000f24 <gotoxy>
	printf("%c",186);
 8002342:	20ba      	movs	r0, #186	; 0xba
 8002344:	f001 fd9c 	bl	8003e80 <putchar>

	gotoxy(47,44);
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	202f      	movs	r0, #47	; 0x2f
 800234c:	f7fe fdea 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002350:	20dc      	movs	r0, #220	; 0xdc
 8002352:	f001 fd95 	bl	8003e80 <putchar>

	gotoxy(55,44);
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	2037      	movs	r0, #55	; 0x37
 800235a:	f7fe fde3 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800235e:	20db      	movs	r0, #219	; 0xdb
 8002360:	f001 fd8e 	bl	8003e80 <putchar>
	gotoxy(55,43);
 8002364:	212b      	movs	r1, #43	; 0x2b
 8002366:	2037      	movs	r0, #55	; 0x37
 8002368:	f7fe fddc 	bl	8000f24 <gotoxy>
	printf("%c",220);
 800236c:	20dc      	movs	r0, #220	; 0xdc
 800236e:	f001 fd87 	bl	8003e80 <putchar>

	gotoxy(58,44);
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	203a      	movs	r0, #58	; 0x3a
 8002376:	f7fe fdd5 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800237a:	20db      	movs	r0, #219	; 0xdb
 800237c:	f001 fd80 	bl	8003e80 <putchar>
	gotoxy(58,43);
 8002380:	212b      	movs	r1, #43	; 0x2b
 8002382:	203a      	movs	r0, #58	; 0x3a
 8002384:	f7fe fdce 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002388:	20db      	movs	r0, #219	; 0xdb
 800238a:	f001 fd79 	bl	8003e80 <putchar>
	gotoxy(58,42);
 800238e:	212a      	movs	r1, #42	; 0x2a
 8002390:	203a      	movs	r0, #58	; 0x3a
 8002392:	f7fe fdc7 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002396:	20dc      	movs	r0, #220	; 0xdc
 8002398:	f001 fd72 	bl	8003e80 <putchar>

	gotoxy(59,44);
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	203b      	movs	r0, #59	; 0x3b
 80023a0:	f7fe fdc0 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80023a4:	20db      	movs	r0, #219	; 0xdb
 80023a6:	f001 fd6b 	bl	8003e80 <putchar>
	gotoxy(59,43);
 80023aa:	212b      	movs	r1, #43	; 0x2b
 80023ac:	203b      	movs	r0, #59	; 0x3b
 80023ae:	f7fe fdb9 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80023b2:	20dc      	movs	r0, #220	; 0xdc
 80023b4:	f001 fd64 	bl	8003e80 <putchar>

	gotoxy(60,44);
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	203c      	movs	r0, #60	; 0x3c
 80023bc:	f7fe fdb2 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80023c0:	20db      	movs	r0, #219	; 0xdb
 80023c2:	f001 fd5d 	bl	8003e80 <putchar>

	gotoxy(61,44);
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	203d      	movs	r0, #61	; 0x3d
 80023ca:	f7fe fdab 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80023ce:	20db      	movs	r0, #219	; 0xdb
 80023d0:	f001 fd56 	bl	8003e80 <putchar>
	gotoxy(61,43);
 80023d4:	212b      	movs	r1, #43	; 0x2b
 80023d6:	203d      	movs	r0, #61	; 0x3d
 80023d8:	f7fe fda4 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80023dc:	20db      	movs	r0, #219	; 0xdb
 80023de:	f001 fd4f 	bl	8003e80 <putchar>

	gotoxy(63,44);
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	203f      	movs	r0, #63	; 0x3f
 80023e6:	f7fe fd9d 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80023ea:	20db      	movs	r0, #219	; 0xdb
 80023ec:	f001 fd48 	bl	8003e80 <putchar>

	gotoxy(64,44);
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	2040      	movs	r0, #64	; 0x40
 80023f4:	f7fe fd96 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80023f8:	20dc      	movs	r0, #220	; 0xdc
 80023fa:	f001 fd41 	bl	8003e80 <putchar>

	gotoxy(65,44);
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	2041      	movs	r0, #65	; 0x41
 8002402:	f7fe fd8f 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002406:	20db      	movs	r0, #219	; 0xdb
 8002408:	f001 fd3a 	bl	8003e80 <putchar>

	gotoxy(67,44);
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	2043      	movs	r0, #67	; 0x43
 8002410:	f7fe fd88 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002414:	20db      	movs	r0, #219	; 0xdb
 8002416:	f001 fd33 	bl	8003e80 <putchar>
	gotoxy(67,43);
 800241a:	212b      	movs	r1, #43	; 0x2b
 800241c:	2043      	movs	r0, #67	; 0x43
 800241e:	f7fe fd81 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002422:	20db      	movs	r0, #219	; 0xdb
 8002424:	f001 fd2c 	bl	8003e80 <putchar>
	gotoxy(67,42);
 8002428:	212a      	movs	r1, #42	; 0x2a
 800242a:	2043      	movs	r0, #67	; 0x43
 800242c:	f7fe fd7a 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002430:	20db      	movs	r0, #219	; 0xdb
 8002432:	f001 fd25 	bl	8003e80 <putchar>

	gotoxy(69,44);
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	2045      	movs	r0, #69	; 0x45
 800243a:	f7fe fd73 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800243e:	20db      	movs	r0, #219	; 0xdb
 8002440:	f001 fd1e 	bl	8003e80 <putchar>
	gotoxy(69,43);
 8002444:	212b      	movs	r1, #43	; 0x2b
 8002446:	2045      	movs	r0, #69	; 0x45
 8002448:	f7fe fd6c 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800244c:	20db      	movs	r0, #219	; 0xdb
 800244e:	f001 fd17 	bl	8003e80 <putchar>
	gotoxy(69,42);
 8002452:	212a      	movs	r1, #42	; 0x2a
 8002454:	2045      	movs	r0, #69	; 0x45
 8002456:	f7fe fd65 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800245a:	20db      	movs	r0, #219	; 0xdb
 800245c:	f001 fd10 	bl	8003e80 <putchar>

	gotoxy(71,44);
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	2047      	movs	r0, #71	; 0x47
 8002464:	f7fe fd5e 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002468:	20db      	movs	r0, #219	; 0xdb
 800246a:	f001 fd09 	bl	8003e80 <putchar>
	gotoxy(71,43);
 800246e:	212b      	movs	r1, #43	; 0x2b
 8002470:	2047      	movs	r0, #71	; 0x47
 8002472:	f7fe fd57 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002476:	20db      	movs	r0, #219	; 0xdb
 8002478:	f001 fd02 	bl	8003e80 <putchar>
	gotoxy(71,42);
 800247c:	212a      	movs	r1, #42	; 0x2a
 800247e:	2047      	movs	r0, #71	; 0x47
 8002480:	f7fe fd50 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002484:	20db      	movs	r0, #219	; 0xdb
 8002486:	f001 fcfb 	bl	8003e80 <putchar>

	gotoxy(73,44);
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	2049      	movs	r0, #73	; 0x49
 800248e:	f7fe fd49 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002492:	20db      	movs	r0, #219	; 0xdb
 8002494:	f001 fcf4 	bl	8003e80 <putchar>
	gotoxy(73,43);
 8002498:	212b      	movs	r1, #43	; 0x2b
 800249a:	2049      	movs	r0, #73	; 0x49
 800249c:	f7fe fd42 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024a0:	20db      	movs	r0, #219	; 0xdb
 80024a2:	f001 fced 	bl	8003e80 <putchar>

	gotoxy(74,44);
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	204a      	movs	r0, #74	; 0x4a
 80024aa:	f7fe fd3b 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024ae:	20db      	movs	r0, #219	; 0xdb
 80024b0:	f001 fce6 	bl	8003e80 <putchar>

	gotoxy(76,44);
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	204c      	movs	r0, #76	; 0x4c
 80024b8:	f7fe fd34 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024bc:	20db      	movs	r0, #219	; 0xdb
 80024be:	f001 fcdf 	bl	8003e80 <putchar>

	gotoxy(77,44);
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	204d      	movs	r0, #77	; 0x4d
 80024c6:	f7fe fd2d 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024ca:	20db      	movs	r0, #219	; 0xdb
 80024cc:	f001 fcd8 	bl	8003e80 <putchar>
	gotoxy(77,43);
 80024d0:	212b      	movs	r1, #43	; 0x2b
 80024d2:	204d      	movs	r0, #77	; 0x4d
 80024d4:	f7fe fd26 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024d8:	20db      	movs	r0, #219	; 0xdb
 80024da:	f001 fcd1 	bl	8003e80 <putchar>

	gotoxy(79,44);
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	204f      	movs	r0, #79	; 0x4f
 80024e2:	f7fe fd1f 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80024e6:	20db      	movs	r0, #219	; 0xdb
 80024e8:	f001 fcca 	bl	8003e80 <putchar>
	gotoxy(79,44);
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	204f      	movs	r0, #79	; 0x4f
 80024f0:	f7fe fd18 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80024f4:	20dc      	movs	r0, #220	; 0xdc
 80024f6:	f001 fcc3 	bl	8003e80 <putchar>

	gotoxy(81,44);
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	2051      	movs	r0, #81	; 0x51
 80024fe:	f7fe fd11 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002502:	20db      	movs	r0, #219	; 0xdb
 8002504:	f001 fcbc 	bl	8003e80 <putchar>
	gotoxy(81,43);
 8002508:	212b      	movs	r1, #43	; 0x2b
 800250a:	2051      	movs	r0, #81	; 0x51
 800250c:	f7fe fd0a 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002510:	20db      	movs	r0, #219	; 0xdb
 8002512:	f001 fcb5 	bl	8003e80 <putchar>

	gotoxy(82,44);
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	2052      	movs	r0, #82	; 0x52
 800251a:	f7fe fd03 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800251e:	20db      	movs	r0, #219	; 0xdb
 8002520:	f001 fcae 	bl	8003e80 <putchar>

	gotoxy(85,44);
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	2055      	movs	r0, #85	; 0x55
 8002528:	f7fe fcfc 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800252c:	20db      	movs	r0, #219	; 0xdb
 800252e:	f001 fca7 	bl	8003e80 <putchar>
	gotoxy(85,43);
 8002532:	212b      	movs	r1, #43	; 0x2b
 8002534:	2055      	movs	r0, #85	; 0x55
 8002536:	f7fe fcf5 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800253a:	20db      	movs	r0, #219	; 0xdb
 800253c:	f001 fca0 	bl	8003e80 <putchar>
	gotoxy(85,42);
 8002540:	212a      	movs	r1, #42	; 0x2a
 8002542:	2055      	movs	r0, #85	; 0x55
 8002544:	f7fe fcee 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002548:	20dc      	movs	r0, #220	; 0xdc
 800254a:	f001 fc99 	bl	8003e80 <putchar>

	gotoxy(86,44);
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	2056      	movs	r0, #86	; 0x56
 8002552:	f7fe fce7 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002556:	20db      	movs	r0, #219	; 0xdb
 8002558:	f001 fc92 	bl	8003e80 <putchar>

	gotoxy(87,44);
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	2057      	movs	r0, #87	; 0x57
 8002560:	f7fe fce0 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002564:	20dc      	movs	r0, #220	; 0xdc
 8002566:	f001 fc8b 	bl	8003e80 <putchar>

	gotoxy(88,44);
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	2058      	movs	r0, #88	; 0x58
 800256e:	f7fe fcd9 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002572:	20db      	movs	r0, #219	; 0xdb
 8002574:	f001 fc84 	bl	8003e80 <putchar>
	gotoxy(88,43);
 8002578:	212b      	movs	r1, #43	; 0x2b
 800257a:	2058      	movs	r0, #88	; 0x58
 800257c:	f7fe fcd2 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002580:	20dc      	movs	r0, #220	; 0xdc
 8002582:	f001 fc7d 	bl	8003e80 <putchar>

	gotoxy(93,44);
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	205d      	movs	r0, #93	; 0x5d
 800258a:	f7fe fccb 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800258e:	20db      	movs	r0, #219	; 0xdb
 8002590:	f001 fc76 	bl	8003e80 <putchar>

	gotoxy(94,44);
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	205e      	movs	r0, #94	; 0x5e
 8002598:	f7fe fcc4 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800259c:	20db      	movs	r0, #219	; 0xdb
 800259e:	f001 fc6f 	bl	8003e80 <putchar>
	gotoxy(94,43);
 80025a2:	212b      	movs	r1, #43	; 0x2b
 80025a4:	205e      	movs	r0, #94	; 0x5e
 80025a6:	f7fe fcbd 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80025aa:	20dc      	movs	r0, #220	; 0xdc
 80025ac:	f001 fc68 	bl	8003e80 <putchar>

	gotoxy(95,44);
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	205f      	movs	r0, #95	; 0x5f
 80025b4:	f7fe fcb6 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80025b8:	20dc      	movs	r0, #220	; 0xdc
 80025ba:	f001 fc61 	bl	8003e80 <putchar>

	gotoxy(96,44);
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	2060      	movs	r0, #96	; 0x60
 80025c2:	f7fe fcaf 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80025c6:	20db      	movs	r0, #219	; 0xdb
 80025c8:	f001 fc5a 	bl	8003e80 <putchar>

	gotoxy(98,44);
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	2062      	movs	r0, #98	; 0x62
 80025d0:	f7fe fca8 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80025d4:	20db      	movs	r0, #219	; 0xdb
 80025d6:	f001 fc53 	bl	8003e80 <putchar>
	gotoxy(98,43);
 80025da:	212b      	movs	r1, #43	; 0x2b
 80025dc:	2062      	movs	r0, #98	; 0x62
 80025de:	f7fe fca1 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80025e2:	20dc      	movs	r0, #220	; 0xdc
 80025e4:	f001 fc4c 	bl	8003e80 <putchar>

	gotoxy(99,44);
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	2063      	movs	r0, #99	; 0x63
 80025ec:	f7fe fc9a 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80025f0:	20db      	movs	r0, #219	; 0xdb
 80025f2:	f001 fc45 	bl	8003e80 <putchar>

	gotoxy(103,44);
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	2067      	movs	r0, #103	; 0x67
 80025fa:	f7fe fc93 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80025fe:	20db      	movs	r0, #219	; 0xdb
 8002600:	f001 fc3e 	bl	8003e80 <putchar>

	gotoxy(104,44);
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	2068      	movs	r0, #104	; 0x68
 8002608:	f7fe fc8c 	bl	8000f24 <gotoxy>
	printf("%c",220);
 800260c:	20dc      	movs	r0, #220	; 0xdc
 800260e:	f001 fc37 	bl	8003e80 <putchar>

	gotoxy(107,44);
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	206b      	movs	r0, #107	; 0x6b
 8002616:	f7fe fc85 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800261a:	20db      	movs	r0, #219	; 0xdb
 800261c:	f001 fc30 	bl	8003e80 <putchar>

	gotoxy(108,44);
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	206c      	movs	r0, #108	; 0x6c
 8002624:	f7fe fc7e 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002628:	20db      	movs	r0, #219	; 0xdb
 800262a:	f001 fc29 	bl	8003e80 <putchar>
	gotoxy(108,43);
 800262e:	212b      	movs	r1, #43	; 0x2b
 8002630:	206c      	movs	r0, #108	; 0x6c
 8002632:	f7fe fc77 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002636:	20db      	movs	r0, #219	; 0xdb
 8002638:	f001 fc22 	bl	8003e80 <putchar>

	gotoxy(109,44);
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	206d      	movs	r0, #109	; 0x6d
 8002640:	f7fe fc70 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002644:	20dc      	movs	r0, #220	; 0xdc
 8002646:	f001 fc1b 	bl	8003e80 <putchar>

	gotoxy(112,44);
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	2070      	movs	r0, #112	; 0x70
 800264e:	f7fe fc69 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002652:	20db      	movs	r0, #219	; 0xdb
 8002654:	f001 fc14 	bl	8003e80 <putchar>

	gotoxy(113,44);
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	2071      	movs	r0, #113	; 0x71
 800265c:	f7fe fc62 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002660:	20dc      	movs	r0, #220	; 0xdc
 8002662:	f001 fc0d 	bl	8003e80 <putchar>

	gotoxy(114,44);
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	2072      	movs	r0, #114	; 0x72
 800266a:	f7fe fc5b 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800266e:	20db      	movs	r0, #219	; 0xdb
 8002670:	f001 fc06 	bl	8003e80 <putchar>
	gotoxy(114,43);
 8002674:	212b      	movs	r1, #43	; 0x2b
 8002676:	2072      	movs	r0, #114	; 0x72
 8002678:	f7fe fc54 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800267c:	20db      	movs	r0, #219	; 0xdb
 800267e:	f001 fbff 	bl	8003e80 <putchar>

	gotoxy(115,44);
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	2073      	movs	r0, #115	; 0x73
 8002686:	f7fe fc4d 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800268a:	20db      	movs	r0, #219	; 0xdb
 800268c:	f001 fbf8 	bl	8003e80 <putchar>

	gotoxy(120,44);
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	2078      	movs	r0, #120	; 0x78
 8002694:	f7fe fc46 	bl	8000f24 <gotoxy>
	printf("%c",47);
 8002698:	202f      	movs	r0, #47	; 0x2f
 800269a:	f001 fbf1 	bl	8003e80 <putchar>
	gotoxy(121,43);
 800269e:	212b      	movs	r1, #43	; 0x2b
 80026a0:	2079      	movs	r0, #121	; 0x79
 80026a2:	f7fe fc3f 	bl	8000f24 <gotoxy>
	printf("%c",47);
 80026a6:	202f      	movs	r0, #47	; 0x2f
 80026a8:	f001 fbea 	bl	8003e80 <putchar>
	gotoxy(122,43);
 80026ac:	212b      	movs	r1, #43	; 0x2b
 80026ae:	207a      	movs	r0, #122	; 0x7a
 80026b0:	f7fe fc38 	bl	8000f24 <gotoxy>
	printf("%c",223);
 80026b4:	20df      	movs	r0, #223	; 0xdf
 80026b6:	f001 fbe3 	bl	8003e80 <putchar>
	gotoxy(122,42);
 80026ba:	212a      	movs	r1, #42	; 0x2a
 80026bc:	207a      	movs	r0, #122	; 0x7a
 80026be:	f7fe fc31 	bl	8000f24 <gotoxy>
	printf("%c",168);
 80026c2:	20a8      	movs	r0, #168	; 0xa8
 80026c4:	f001 fbdc 	bl	8003e80 <putchar>
	gotoxy(123,43);
 80026c8:	212b      	movs	r1, #43	; 0x2b
 80026ca:	207b      	movs	r0, #123	; 0x7b
 80026cc:	f7fe fc2a 	bl	8000f24 <gotoxy>
	printf("%c",92);
 80026d0:	205c      	movs	r0, #92	; 0x5c
 80026d2:	f001 fbd5 	bl	8003e80 <putchar>
	gotoxy(124,44);
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	207c      	movs	r0, #124	; 0x7c
 80026da:	f7fe fc23 	bl	8000f24 <gotoxy>
	printf("%c",92);
 80026de:	205c      	movs	r0, #92	; 0x5c
 80026e0:	f001 fbce 	bl	8003e80 <putchar>

	gotoxy(127,44);
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	207f      	movs	r0, #127	; 0x7f
 80026e8:	f7fe fc1c 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80026ec:	20db      	movs	r0, #219	; 0xdb
 80026ee:	f001 fbc7 	bl	8003e80 <putchar>
	gotoxy(127,43);
 80026f2:	212b      	movs	r1, #43	; 0x2b
 80026f4:	207f      	movs	r0, #127	; 0x7f
 80026f6:	f7fe fc15 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80026fa:	20db      	movs	r0, #219	; 0xdb
 80026fc:	f001 fbc0 	bl	8003e80 <putchar>
	gotoxy(127,42);
 8002700:	212a      	movs	r1, #42	; 0x2a
 8002702:	207f      	movs	r0, #127	; 0x7f
 8002704:	f7fe fc0e 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002708:	20db      	movs	r0, #219	; 0xdb
 800270a:	f001 fbb9 	bl	8003e80 <putchar>

	gotoxy(129,44);
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	2081      	movs	r0, #129	; 0x81
 8002712:	f7fe fc07 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002716:	20db      	movs	r0, #219	; 0xdb
 8002718:	f001 fbb2 	bl	8003e80 <putchar>
	gotoxy(129,43);
 800271c:	212b      	movs	r1, #43	; 0x2b
 800271e:	2081      	movs	r0, #129	; 0x81
 8002720:	f7fe fc00 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002724:	20dc      	movs	r0, #220	; 0xdc
 8002726:	f001 fbab 	bl	8003e80 <putchar>

	gotoxy(130,44);
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	2082      	movs	r0, #130	; 0x82
 800272e:	f7fe fbf9 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002732:	20db      	movs	r0, #219	; 0xdb
 8002734:	f001 fba4 	bl	8003e80 <putchar>

	gotoxy(131,44);
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	2083      	movs	r0, #131	; 0x83
 800273c:	f7fe fbf2 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002740:	20dc      	movs	r0, #220	; 0xdc
 8002742:	f001 fb9d 	bl	8003e80 <putchar>

	gotoxy(132,44);
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	2084      	movs	r0, #132	; 0x84
 800274a:	f7fe fbeb 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800274e:	20db      	movs	r0, #219	; 0xdb
 8002750:	f001 fb96 	bl	8003e80 <putchar>

	gotoxy(133,44);
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	2085      	movs	r0, #133	; 0x85
 8002758:	f7fe fbe4 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800275c:	20db      	movs	r0, #219	; 0xdb
 800275e:	f001 fb8f 	bl	8003e80 <putchar>
	gotoxy(133,43);
 8002762:	212b      	movs	r1, #43	; 0x2b
 8002764:	2085      	movs	r0, #133	; 0x85
 8002766:	f7fe fbdd 	bl	8000f24 <gotoxy>
	printf("%c",219);
 800276a:	20db      	movs	r0, #219	; 0xdb
 800276c:	f001 fb88 	bl	8003e80 <putchar>

	gotoxy(134,44);
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	2086      	movs	r0, #134	; 0x86
 8002774:	f7fe fbd6 	bl	8000f24 <gotoxy>
	printf("%c",219);
 8002778:	20db      	movs	r0, #219	; 0xdb
 800277a:	f001 fb81 	bl	8003e80 <putchar>

	gotoxy(135,44);
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	2087      	movs	r0, #135	; 0x87
 8002782:	f7fe fbcf 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002786:	20dc      	movs	r0, #220	; 0xdc
 8002788:	f001 fb7a 	bl	8003e80 <putchar>

	gotoxy(137,44);
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	2089      	movs	r0, #137	; 0x89
 8002790:	f7fe fbc8 	bl	8000f24 <gotoxy>
	printf("%c",220);
 8002794:	20dc      	movs	r0, #220	; 0xdc
 8002796:	f001 fb73 	bl	8003e80 <putchar>

	gotoxy(139,44);
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	208b      	movs	r0, #139	; 0x8b
 800279e:	f7fe fbc1 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80027a2:	20dc      	movs	r0, #220	; 0xdc
 80027a4:	f001 fb6c 	bl	8003e80 <putchar>

	gotoxy(141,44);
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	208d      	movs	r0, #141	; 0x8d
 80027ac:	f7fe fbba 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80027b0:	20db      	movs	r0, #219	; 0xdb
 80027b2:	f001 fb65 	bl	8003e80 <putchar>

	gotoxy(142,44);
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	208e      	movs	r0, #142	; 0x8e
 80027ba:	f7fe fbb3 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80027be:	20dc      	movs	r0, #220	; 0xdc
 80027c0:	f001 fb5e 	bl	8003e80 <putchar>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	79ba      	ldrb	r2, [r7, #6]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fba0 	bl	8000f24 <gotoxy>
	printf("%c",219);
 80027e4:	20db      	movs	r0, #219	; 0xdb
 80027e6:	f001 fb4b 	bl	8003e80 <putchar>
	gotoxy(X-1,Y);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	79ba      	ldrb	r2, [r7, #6]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb96 	bl	8000f24 <gotoxy>
	printf("%c",220);
 80027f8:	20dc      	movs	r0, #220	; 0xdc
 80027fa:	f001 fb41 	bl	8003e80 <putchar>
	gotoxy(X+1,Y);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	3301      	adds	r3, #1
 8002802:	79ba      	ldrb	r2, [r7, #6]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fb8c 	bl	8000f24 <gotoxy>
	printf("%c",220);
 800280c:	20dc      	movs	r0, #220	; 0xdc
 800280e:	f001 fb37 	bl	8003e80 <putchar>
	gotoxy(X-1,Y+1);
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	3301      	adds	r3, #1
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fb81 	bl	8000f24 <gotoxy>
	printf("%c",223);
 8002822:	20df      	movs	r0, #223	; 0xdf
 8002824:	f001 fb2c 	bl	8003e80 <putchar>
	gotoxy(X+1,Y+1);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	79bb      	ldrb	r3, [r7, #6]
 800282e:	3301      	adds	r3, #1
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f7fe fb76 	bl	8000f24 <gotoxy>
	printf("%c",223);
 8002838:	20df      	movs	r0, #223	; 0xdf
 800283a:	f001 fb21 	bl	8003e80 <putchar>

	gotoxy(X,Y-1);
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	3b01      	subs	r3, #1
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f7fe fb6c 	bl	8000f24 <gotoxy>
	printf("%c",179);
 800284c:	20b3      	movs	r0, #179	; 0xb3
 800284e:	f001 fb17 	bl	8003e80 <putchar>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	460a      	mov	r2, r1
 8002864:	71fb      	strb	r3, [r7, #7]
 8002866:	4613      	mov	r3, r2
 8002868:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	79ba      	ldrb	r2, [r7, #6]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fb57 	bl	8000f24 <gotoxy>
	printf(" ");
 8002876:	2020      	movs	r0, #32
 8002878:	f001 fb02 	bl	8003e80 <putchar>
	gotoxy(X-1,Y);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	3b01      	subs	r3, #1
 8002880:	79ba      	ldrb	r2, [r7, #6]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fb4d 	bl	8000f24 <gotoxy>
	printf(" ");
 800288a:	2020      	movs	r0, #32
 800288c:	f001 faf8 	bl	8003e80 <putchar>
	gotoxy(X+1,Y);
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	3301      	adds	r3, #1
 8002894:	79ba      	ldrb	r2, [r7, #6]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fb43 	bl	8000f24 <gotoxy>
	printf(" ");
 800289e:	2020      	movs	r0, #32
 80028a0:	f001 faee 	bl	8003e80 <putchar>
	gotoxy(X-1,Y+1);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fb38 	bl	8000f24 <gotoxy>
	printf(" ");
 80028b4:	2020      	movs	r0, #32
 80028b6:	f001 fae3 	bl	8003e80 <putchar>
	gotoxy(X+1,Y+1);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	79bb      	ldrb	r3, [r7, #6]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe fb2d 	bl	8000f24 <gotoxy>
	printf(" ");
 80028ca:	2020      	movs	r0, #32
 80028cc:	f001 fad8 	bl	8003e80 <putchar>

	gotoxy(X,Y-1);
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	79bb      	ldrb	r3, [r7, #6]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f7fe fb23 	bl	8000f24 <gotoxy>
	printf(" ");
 80028de:	2020      	movs	r0, #32
 80028e0:	f001 face 	bl	8003e80 <putchar>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	460a      	mov	r2, r1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	3302      	adds	r3, #2
 8002900:	79ba      	ldrb	r2, [r7, #6]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fb0d 	bl	8000f24 <gotoxy>
	printf("____");
 800290a:	4808      	ldr	r0, [pc, #32]	; (800292c <drawAttachmentRods+0x40>)
 800290c:	f001 faa0 	bl	8003e50 <iprintf>
	gotoxy(x-5, y);
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	3b05      	subs	r3, #5
 8002914:	79ba      	ldrb	r2, [r7, #6]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fb03 	bl	8000f24 <gotoxy>
	printf("____");
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <drawAttachmentRods+0x40>)
 8002920:	f001 fa96 	bl	8003e50 <iprintf>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	080050e0 	.word	0x080050e0

08002930 <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	3302      	adds	r3, #2
 8002944:	79ba      	ldrb	r2, [r7, #6]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe faeb 	bl	8000f24 <gotoxy>
	printf("    ");
 800294e:	4808      	ldr	r0, [pc, #32]	; (8002970 <deleteAttachmentRods+0x40>)
 8002950:	f001 fa7e 	bl	8003e50 <iprintf>
	gotoxy(x-5, y);
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	3b05      	subs	r3, #5
 8002958:	79ba      	ldrb	r2, [r7, #6]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fae1 	bl	8000f24 <gotoxy>
	printf("    ");
 8002962:	4803      	ldr	r0, [pc, #12]	; (8002970 <deleteAttachmentRods+0x40>)
 8002964:	f001 fa74 	bl	8003e50 <iprintf>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	080050e8 	.word	0x080050e8

08002974 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	460a      	mov	r2, r1
 800297e:	71fb      	strb	r3, [r7, #7]
 8002980:	4613      	mov	r3, r2
 8002982:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	79ba      	ldrb	r2, [r7, #6]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe faca 	bl	8000f24 <gotoxy>
	printf("     ");
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <deletePowerupGraphics+0x54>)
 8002992:	f001 fa5d 	bl	8003e50 <iprintf>
	gotoxy(x, y+1);
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	3301      	adds	r3, #1
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7fe fac0 	bl	8000f24 <gotoxy>
	printf("     ");
 80029a4:	4808      	ldr	r0, [pc, #32]	; (80029c8 <deletePowerupGraphics+0x54>)
 80029a6:	f001 fa53 	bl	8003e50 <iprintf>
	gotoxy(x, y+2);
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	3302      	adds	r3, #2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f7fe fab6 	bl	8000f24 <gotoxy>
	printf("     ");
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <deletePowerupGraphics+0x54>)
 80029ba:	f001 fa49 	bl	8003e50 <iprintf>

}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	080050f0 	.word	0x080050f0

080029cc <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	4603      	mov	r3, r0
 80029d4:	460a      	mov	r2, r1
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	4613      	mov	r3, r2
 80029da:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 80029dc:	79f8      	ldrb	r0, [r7, #7]
 80029de:	79b9      	ldrb	r1, [r7, #6]
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	3302      	adds	r3, #2
 80029e8:	2401      	movs	r4, #1
 80029ea:	9400      	str	r4, [sp, #0]
 80029ec:	f7fe faac 	bl	8000f48 <drawBox>
 gotoxy(x+2, y+1);
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f7fe fa92 	bl	8000f24 <gotoxy>
 printf("$");
 8002a00:	2024      	movs	r0, #36	; 0x24
 8002a02:	f001 fa3d 	bl	8003e80 <putchar>
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}

08002a0e <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 8002a0e:	b084      	sub	sp, #16
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	f107 0418 	add.w	r4, r7, #24
 8002a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8002a1e:	2020      	movs	r0, #32
 8002a20:	f001 f954 	bl	8003ccc <malloc>
 8002a24:	4603      	mov	r3, r0
 8002a26:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	f107 0418 	add.w	r4, r7, #24
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
    return newNode;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a4e:	b004      	add	sp, #16
 8002a50:	4770      	bx	lr

08002a52 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8002a52:	b084      	sub	sp, #16
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af04      	add	r7, sp, #16
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002a60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8002a64:	466c      	mov	r4, sp
 8002a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a78:	f7ff ffc9 	bl	8002a0e <createBulletNode>
 8002a7c:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <appendBullet+0x3c>
        *head = newNode;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8002a8c:	e00d      	b.n	8002aaa <appendBullet+0x58>
        bulletNode_t* current = *head;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8002a94:	e002      	b.n	8002a9c <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f8      	bne.n	8002a96 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	61da      	str	r2, [r3, #28]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002ab4:	b004      	add	sp, #16
 8002ab6:	4770      	bx	lr

08002ab8 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8002ac2:	2008      	movs	r0, #8
 8002ac4:	f001 f902 	bl	8003ccc <malloc>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 8002aec:	e00a      	b.n	8002b04 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	605a      	str	r2, [r3, #4]
			break;
 8002afc:	e006      	b.n	8002b0c <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f1      	bne.n	8002aee <appendEnemy+0x36>
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d179      	bne.n	8002c26 <deleteEnemyNode+0x112>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe ff74 	bl	8001a28 <fpToInt>
 8002b40:	4604      	mov	r4, r0
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ff6c 	bl	8001a28 <fpToInt>
 8002b50:	4603      	mov	r3, r0
 8002b52:	0fda      	lsrs	r2, r3, #31
 8002b54:	4413      	add	r3, r2
 8002b56:	105b      	asrs	r3, r3, #1
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7fe f9e2 	bl	8000f24 <gotoxy>
		printf("       ");
 8002b60:	4834      	ldr	r0, [pc, #208]	; (8002c34 <deleteEnemyNode+0x120>)
 8002b62:	f001 f975 	bl	8003e50 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe ff5a 	bl	8001a28 <fpToInt>
 8002b74:	4604      	mov	r4, r0
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe ff52 	bl	8001a28 <fpToInt>
 8002b84:	4603      	mov	r3, r0
 8002b86:	3302      	adds	r3, #2
 8002b88:	0fda      	lsrs	r2, r3, #31
 8002b8a:	4413      	add	r3, r2
 8002b8c:	105b      	asrs	r3, r3, #1
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7fe f9c7 	bl	8000f24 <gotoxy>
		printf("       ");
 8002b96:	4827      	ldr	r0, [pc, #156]	; (8002c34 <deleteEnemyNode+0x120>)
 8002b98:	f001 f95a 	bl	8003e50 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	605a      	str	r2, [r3, #4]
		free(enemy);
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f001 f898 	bl	8003cdc <free>
		return;
 8002bac:	e03e      	b.n	8002c2c <deleteEnemyNode+0x118>
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d132      	bne.n	8002c1c <deleteEnemyNode+0x108>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe ff32 	bl	8001a28 <fpToInt>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe ff2a 	bl	8001a28 <fpToInt>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fe f9a3 	bl	8000f24 <gotoxy>
			printf("  ");
 8002bde:	4816      	ldr	r0, [pc, #88]	; (8002c38 <deleteEnemyNode+0x124>)
 8002be0:	f001 f936 	bl	8003e50 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f872 	bl	8003cdc <free>
			free(thisNode->enemy->position);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f86c 	bl	8003cdc <free>
			free(thisNode->enemy->velocity);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f866 	bl	8003cdc <free>
			free(thisNode->enemy);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f861 	bl	8003cdc <free>
			return;
 8002c1a:	e007      	b.n	8002c2c <deleteEnemyNode+0x118>
		}
		preNode = thisNode;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c0      	bne.n	8002bae <deleteEnemyNode+0x9a>
	}
}
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	080050f8 	.word	0x080050f8
 8002c38:	08005100 	.word	0x08005100

08002c3c <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03c      	beq.n	8002cc8 <deleteBulletNode+0x8c>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d039      	beq.n	8002cc8 <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fee5 	bl	8001a28 <fpToInt>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fedf 	bl	8001a28 <fpToInt>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	0fda      	lsrs	r2, r3, #31
 8002c6e:	4413      	add	r3, r2
 8002c70:	105b      	asrs	r3, r3, #1
 8002c72:	4619      	mov	r1, r3
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7fe f955 	bl	8000f24 <gotoxy>
    printf(" ");
 8002c7a:	2020      	movs	r0, #32
 8002c7c:	f001 f900 	bl	8003e80 <putchar>

    if (*head == nodeToDelete) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d107      	bne.n	8002c9a <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	f001 f822 	bl	8003cdc <free>
        return;
 8002c98:	e017      	b.n	8002cca <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8002ca0:	e002      	b.n	8002ca8 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <deleteBulletNode+0x7c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1f4      	bne.n	8002ca2 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f001 f80b 	bl	8003cdc <free>
 8002cc6:	e000      	b.n	8002cca <deleteBulletNode+0x8e>
        return;
 8002cc8:	bf00      	nop
}
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}

08002cd0 <initVariables>:
#include "powerup.h"


#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(42*yScale)}, {intToFp(3), intToFp(42*yScale)}, 1, 20, 0};
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	2003      	movs	r0, #3
 8002cec:	f7fe fe87 	bl	80019fe <intToFp>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	2054      	movs	r0, #84	; 0x54
 8002cf6:	f7fe fe82 	bl	80019fe <intToFp>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	2003      	movs	r0, #3
 8002d00:	f7fe fe7d 	bl	80019fe <intToFp>
 8002d04:	4603      	mov	r3, r0
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	2054      	movs	r0, #84	; 0x54
 8002d0a:	f7fe fe78 	bl	80019fe <intToFp>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3020 	strb.w	r3, [r7, #32]
 8002d18:	2314      	movs	r3, #20
 8002d1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 8002d1e:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <initVariables+0xe4>)
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	4611      	mov	r1, r2
 8002d28:	8019      	strh	r1, [r3, #0]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	0c12      	lsrs	r2, r2, #16
 8002d2e:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2203      	movs	r2, #3
 8002d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 040c 	add.w	r4, r3, #12
 8002d70:	f107 0510 	add.w	r5, r7, #16
 8002d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d7c:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	gameState->moon = moon;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	f107 020c 	add.w	r2, r7, #12
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	4611      	mov	r1, r2
 8002d94:	8019      	strh	r1, [r3, #0]
 8002d96:	3302      	adds	r3, #2
 8002d98:	0c12      	lsrs	r2, r2, #16
 8002d9a:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	651a      	str	r2, [r3, #80]	; 0x50
	gameState->powerup.isVisible=0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//TODO: continue to initialize everything
}
 8002daa:	bf00      	nop
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08005104 	.word	0x08005104

08002db8 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fd49 	bl	8003858 <drawSpaceship>
	drawEnemy(gameState);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff f974 	bl	80020b4 <drawEnemy>
	drawBullets(gameState);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fe fa4c 	bl	800126a <drawBullets>
	drawPowerup(gameState);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc0f 	bl	80035f6 <drawPowerup>
	drawhearth(gameState);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff f8e9 	bl	8001fb0 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a1a      	ldrb	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7a5b      	ldrb	r3, [r3, #9]
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f7fe ffae 	bl	8001d4a <drawMoon>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
	return;
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
		return 1;
	}
	return 0;
	uart_clear();
	*/
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <readKey>:
		gameState->activeScreen = 3;
	}
}

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readKey(gameState_t* gameState){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8002e18:	f7fd fe9a 	bl	8000b50 <uart_get_char>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d107      	bne.n	8002e36 <readKey+0x26>
		gameState->direction = 1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <readKey+0x5c>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(c == 'a'){
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b61      	cmp	r3, #97	; 0x61
 8002e3a:	d107      	bne.n	8002e4c <readKey+0x3c>
		gameState->direction = -1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		gameState->lastKeyPressTime = runtime;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <readKey+0x5c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <readKey+0x5c>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d903      	bls.n	8002e62 <readKey+0x52>
		gameState->direction = 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200001c8 	.word	0x200001c8

08002e70 <main>:

int main(void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0a2      	sub	sp, #136	; 0x88
 8002e74:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 8002e76:	4ad2      	ldr	r2, [pc, #840]	; (80031c0 <main+0x350>)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e82:	4ad0      	ldr	r2, [pc, #832]	; (80031c4 <main+0x354>)
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e90:	4acd      	ldr	r2, [pc, #820]	; (80031c8 <main+0x358>)
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e9a:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8002e9e:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8002ea2:	f7fd fef9 	bl	8000c98 <uart_init>
	initVariables(&gameState);
 8002ea6:	f107 0318 	add.w	r3, r7, #24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff10 	bl	8002cd0 <initVariables>
	initTimer();
 8002eb0:	f7fe fb86 	bl	80015c0 <initTimer>
	initJoystick();
 8002eb4:	f7fe fa64 	bl	8001380 <initJoystick>
	I2C_init();
 8002eb8:	f7fe fbcc 	bl	8001654 <I2C_init>
	srand(time(NULL));   //RNG
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f001 f941 	bl	8004144 <time>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 ffef 	bl	8003eac <srand>

	while(1){
		switch(gameState.activeScreen){
 8002ece:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d8fb      	bhi.n	8002ece <main+0x5e>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <main+0x6c>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08003095 	.word	0x08003095
 8002ee4:	08003199 	.word	0x08003199
 8002ee8:	08003221 	.word	0x08003221
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8002eec:	f7fe f80a 	bl	8000f04 <clrscr>
			drawWindow();
 8002ef0:	f000 fa6e 	bl	80033d0 <drawWindow>
			drawbackground(); // stars in background
 8002ef4:	f7fe fe37 	bl	8001b66 <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8002ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002efc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff21 	bl	8001d4a <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8002f08:	f107 0218 	add.w	r2, r7, #24
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fa23 	bl	800335c <drawMenuScreen>


			while(gameState.activeScreen==0){
 8002f16:	e0b7      	b.n	8003088 <main+0x218>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002f18:	f107 0318 	add.w	r3, r7, #24
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff6a 	bl	8002df6 <bossKey>
 8002f22:	4603      	mov	r3, r0
 8002f24:	66fb      	str	r3, [r7, #108]	; 0x6c
				if(bossKeyChange == 1) continue;
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d100      	bne.n	8002f2e <main+0xbe>
 8002f2c:	e0ac      	b.n	8003088 <main+0x218>
				else if(bossKeyChange == 2){
 8002f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d10c      	bne.n	8002f4e <main+0xde>
					//Initialize window agian
					clrscr();
 8002f34:	f7fd ffe6 	bl	8000f04 <clrscr>
					drawbackground(); // stars in background
 8002f38:	f7fe fe15 	bl	8001b66 <drawbackground>
					drawWindow();
 8002f3c:	f000 fa48 	bl	80033d0 <drawWindow>
					drawMenuScreen(btnList, &gameState);
 8002f40:	f107 0218 	add.w	r2, r7, #24
 8002f44:	463b      	mov	r3, r7
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa07 	bl	800335c <drawMenuScreen>
				}

				if(downIsPressed()){
 8002f4e:	f7fe fb09 	bl	8001564 <downIsPressed>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d025      	beq.n	8002fa4 <main+0x134>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002f58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002f62:	4413      	add	r3, r2
 8002f64:	3b80      	subs	r3, #128	; 0x80
 8002f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f6a:	f000 f9d7 	bl	800331c <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8002f6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4b95      	ldr	r3, [pc, #596]	; (80031cc <main+0x35c>)
 8002f76:	fb83 3102 	smull	r3, r1, r3, r2
 8002f7a:	17d3      	asrs	r3, r2, #31
 8002f7c:	1ac9      	subs	r1, r1, r3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	440b      	add	r3, r1
 8002f84:	1ad1      	subs	r1, r2, r3
 8002f86:	b2cb      	uxtb	r3, r1
 8002f88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8002f8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002f96:	4413      	add	r3, r2
 8002f98:	3b80      	subs	r3, #128	; 0x80
 8002f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f9e:	f000 f99d 	bl	80032dc <drawBtnAsSelected>
 8002fa2:	e028      	b.n	8002ff6 <main+0x186>
				}
				else if(upIsPressed()){
 8002fa4:	f7fe fab0 	bl	8001508 <upIsPressed>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d023      	beq.n	8002ff6 <main+0x186>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002fae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b80      	subs	r3, #128	; 0x80
 8002fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc0:	f000 f9ac 	bl	800331c <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8002fc4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <main+0x164>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002fd2:	e005      	b.n	8002fe0 <main+0x170>
					else gameState.btnSelected=gameState.btnSelected-1;
 8002fd4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8002fe0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002fea:	4413      	add	r3, r2
 8002fec:	3b80      	subs	r3, #128	; 0x80
 8002fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ff2:	f000 f973 	bl	80032dc <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8002ff6:	f7fe fa59 	bl	80014ac <centerIsPressed>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <main+0x218>
					if(gameState.btnSelected==0){ //START BUTTON
 8003000:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <main+0x1a0>
						gameState.activeScreen=1; //Game screen
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800300e:	e03b      	b.n	8003088 <main+0x218>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8003010:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003014:	2b01      	cmp	r3, #1
 8003016:	d130      	bne.n	800307a <main+0x20a>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8003018:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	4b6b      	ldr	r3, [pc, #428]	; (80031cc <main+0x35c>)
 8003020:	fb83 3102 	smull	r3, r1, r3, r2
 8003024:	17d3      	asrs	r3, r2, #31
 8003026:	1ac9      	subs	r1, r1, r3
 8003028:	460b      	mov	r3, r1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	440b      	add	r3, r1
 800302e:	1ad1      	subs	r1, r2, r3
 8003030:	b2cb      	uxtb	r3, r1
 8003032:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <main+0x354>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	330f      	adds	r3, #15
 800303c:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <main+0x354>)
 800303e:	7852      	ldrb	r2, [r2, #1]
 8003040:	3201      	adds	r2, #1
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd ff6d 	bl	8000f24 <gotoxy>
						if(gameState.difficulty==0){
 800304a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <main+0x1ea>
							printf("EASY  ");
 8003052:	485f      	ldr	r0, [pc, #380]	; (80031d0 <main+0x360>)
 8003054:	f000 fefc 	bl	8003e50 <iprintf>
 8003058:	e016      	b.n	8003088 <main+0x218>
						} else if(gameState.difficulty==1){
 800305a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800305e:	2b01      	cmp	r3, #1
 8003060:	d103      	bne.n	800306a <main+0x1fa>
							printf("MEDIUM");
 8003062:	485c      	ldr	r0, [pc, #368]	; (80031d4 <main+0x364>)
 8003064:	f000 fef4 	bl	8003e50 <iprintf>
 8003068:	e00e      	b.n	8003088 <main+0x218>
						} else if(gameState.difficulty==2){
 800306a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800306e:	2b02      	cmp	r3, #2
 8003070:	d10a      	bne.n	8003088 <main+0x218>
							printf("HARD  ");
 8003072:	4859      	ldr	r0, [pc, #356]	; (80031d8 <main+0x368>)
 8003074:	f000 feec 	bl	8003e50 <iprintf>
 8003078:	e006      	b.n	8003088 <main+0x218>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 800307a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800307e:	2b02      	cmp	r3, #2
 8003080:	d102      	bne.n	8003088 <main+0x218>
						gameState.activeScreen=2;// help screen
 8003082:	2302      	movs	r3, #2
 8003084:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==0){
 8003088:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	f43f af43 	beq.w	8002f18 <main+0xa8>
					}
				}
			}
			break;
 8003092:	e0f4      	b.n	800327e <main+0x40e>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8003094:	f7fd ff36 	bl	8000f04 <clrscr>
			printf("GAME SCREEN");
 8003098:	4850      	ldr	r0, [pc, #320]	; (80031dc <main+0x36c>)
 800309a:	f000 fed9 	bl	8003e50 <iprintf>
			uint32_t frameLastUpdated=0;
 800309e:	2300      	movs	r3, #0
 80030a0:	67fb      	str	r3, [r7, #124]	; 0x7c
			gameState.spaceship.lastShotTime=runtime;
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <main+0x370>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
			gameState.powerup.lastUseTime = runtime;
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <main+0x370>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	66bb      	str	r3, [r7, #104]	; 0x68
			drawWindow();
 80030ae:	f000 f98f 	bl	80033d0 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80030b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030b6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fe44 	bl	8001d4a <drawMoon>
			drawhearth(&gameState);
 80030c2:	f107 0318 	add.w	r3, r7, #24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe ff72 	bl	8001fb0 <drawhearth>
			//drawWindow();
			drawCity();
 80030cc:	f7ff f892 	bl	80021f4 <drawCity>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 80030d0:	e05d      	b.n	800318e <main+0x31e>
				readKey(&gameState);
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe9a 	bl	8002e10 <readKey>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe88 	bl	8002df6 <bossKey>
 80030e6:	4603      	mov	r3, r0
 80030e8:	673b      	str	r3, [r7, #112]	; 0x70
				if(bossKeyChange == 1) continue;
 80030ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d100      	bne.n	80030f2 <main+0x282>
 80030f0:	e04d      	b.n	800318e <main+0x31e>
				else if(bossKeyChange == 2){
 80030f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d10a      	bne.n	800310e <main+0x29e>
					//Initialize window agian
					clrscr();
 80030f8:	f7fd ff04 	bl	8000f04 <clrscr>
					gotoxy(0,0);
 80030fc:	2100      	movs	r1, #0
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd ff10 	bl	8000f24 <gotoxy>
					drawCity();
 8003104:	f7ff f876 	bl	80021f4 <drawCity>
					printf("GAME SCREEN");
 8003108:	4834      	ldr	r0, [pc, #208]	; (80031dc <main+0x36c>)
 800310a:	f000 fea1 	bl	8003e50 <iprintf>
				}

				if(runtime-frameLastUpdated>=framePeriod){//
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <main+0x370>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d939      	bls.n	800318e <main+0x31e>
					updateSpaceship(&gameState);
 800311a:	f107 0318 	add.w	r3, r7, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f000 faa8 	bl	8003674 <updateSpaceship>
					spawnEnemy(&gameState);
 8003124:	f107 0318 	add.w	r3, r7, #24
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fb3f 	bl	80017ac <spawnEnemy>
					spawnPowerup(&gameState);
 800312e:	f107 0318 	add.w	r3, r7, #24
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f95a 	bl	80033ec <spawnPowerup>


					updateEnemy(&gameState);
 8003138:	f107 0318 	add.w	r3, r7, #24
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fb9f 	bl	8001880 <updateEnemy>
					updatePowerup(&gameState);
 8003142:	f107 0318 	add.w	r3, r7, #24
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f996 	bl	8003478 <updatePowerup>

					shootSpaceship(&gameState);
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fac5 	bl	80036e0 <shootSpaceship>
					shootEnemy(&gameState);
 8003156:	f107 0318 	add.w	r3, r7, #24
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fbc0 	bl	80018e0 <shootEnemy>
					updateBullets(&gameState);
 8003160:	f107 0318 	add.w	r3, r7, #24
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd ffba 	bl	80010de <updateBullets>

					detectBulletHit(&gameState);
 800316a:	f107 0318 	add.w	r3, r7, #24
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f839 	bl	80011e6 <detectBulletHit>
					detectCityHit(&gameState);
 8003174:	f107 0318 	add.w	r3, r7, #24
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fc1f 	bl	80019bc <detectCityHit>

//					nukeUpdate(&gameState);
					//checkIfDead(&gameState);
					drawScreen(&gameState);
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fe18 	bl	8002db8 <drawScreen>
					frameLastUpdated=runtime;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <main+0x370>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(gameState.activeScreen==1){
 800318e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003192:	2b01      	cmp	r3, #1
 8003194:	d09d      	beq.n	80030d2 <main+0x262>
				}
		}
			break;
 8003196:	e072      	b.n	800327e <main+0x40e>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8003198:	f7fd feb4 	bl	8000f04 <clrscr>
			drawWindow();
 800319c:	f000 f918 	bl	80033d0 <drawWindow>
			drawbackground(); // stars in background
 80031a0:	f7fe fce1 	bl	8001b66 <drawbackground>
			drawHelpScreen();
 80031a4:	f000 f8fe 	bl	80033a4 <drawHelpScreen>
			while(gameState.activeScreen==2){
 80031a8:	e035      	b.n	8003216 <main+0x3a6>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fe21 	bl	8002df6 <bossKey>
 80031b4:	4603      	mov	r3, r0
 80031b6:	677b      	str	r3, [r7, #116]	; 0x74
				if(bossKeyChange == 1) continue;
 80031b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d112      	bne.n	80031e4 <main+0x374>
 80031be:	e02a      	b.n	8003216 <main+0x3a6>
 80031c0:	080051a4 	.word	0x080051a4
 80031c4:	080051ac 	.word	0x080051ac
 80031c8:	080051b4 	.word	0x080051b4
 80031cc:	55555556 	.word	0x55555556
 80031d0:	08005108 	.word	0x08005108
 80031d4:	08005110 	.word	0x08005110
 80031d8:	08005118 	.word	0x08005118
 80031dc:	08005120 	.word	0x08005120
 80031e0:	200001c8 	.word	0x200001c8
				else if(bossKeyChange == 2){
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d10d      	bne.n	8003206 <main+0x396>
					//Initialize window agian
					clrscr();
 80031ea:	f7fd fe8b 	bl	8000f04 <clrscr>
					drawBox(1,1,156,43,0);//window
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	232b      	movs	r3, #43	; 0x2b
 80031f4:	229c      	movs	r2, #156	; 0x9c
 80031f6:	2101      	movs	r1, #1
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fd fea5 	bl	8000f48 <drawBox>
					drawbackground(); // stars in background
 80031fe:	f7fe fcb2 	bl	8001b66 <drawbackground>
					drawHelpScreen();
 8003202:	f000 f8cf 	bl	80033a4 <drawHelpScreen>
				}

				if(centerIsPressed()){
 8003206:	f7fe f951 	bl	80014ac <centerIsPressed>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <main+0x3a6>
					gameState.activeScreen=0;//MENU SCREEN
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==2){
 8003216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800321a:	2b02      	cmp	r3, #2
 800321c:	d0c5      	beq.n	80031aa <main+0x33a>
				}
			}
			break;
 800321e:	e02e      	b.n	800327e <main+0x40e>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8003220:	f7fd fe70 	bl	8000f04 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8003224:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003226:	4619      	mov	r1, r3
 8003228:	4815      	ldr	r0, [pc, #84]	; (8003280 <main+0x410>)
 800322a:	f000 fe11 	bl	8003e50 <iprintf>
			while(gameState.activeScreen==3){
 800322e:	e021      	b.n	8003274 <main+0x404>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fdde 	bl	8002df6 <bossKey>
 800323a:	4603      	mov	r3, r0
 800323c:	67bb      	str	r3, [r7, #120]	; 0x78
				if(bossKeyChange == 1) continue;
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	2b01      	cmp	r3, #1
 8003242:	d100      	bne.n	8003246 <main+0x3d6>
 8003244:	e016      	b.n	8003274 <main+0x404>
				else if(bossKeyChange == 2){
 8003246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003248:	2b02      	cmp	r3, #2
 800324a:	d106      	bne.n	800325a <main+0x3ea>
					//Initialize window agian
					clrscr();
 800324c:	f7fd fe5a 	bl	8000f04 <clrscr>
					printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8003250:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003252:	4619      	mov	r1, r3
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <main+0x410>)
 8003256:	f000 fdfb 	bl	8003e50 <iprintf>
				}
				if(centerIsPressed()){
 800325a:	f7fe f927 	bl	80014ac <centerIsPressed>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <main+0x404>
					initVariables(&gameState);
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fd31 	bl	8002cd0 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			while(gameState.activeScreen==3){
 8003274:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003278:	2b03      	cmp	r3, #3
 800327a:	d0d9      	beq.n	8003230 <main+0x3c0>
				}
			}
			break;
 800327c:	bf00      	nop
		switch(gameState.activeScreen){
 800327e:	e626      	b.n	8002ece <main+0x5e>
 8003280:	0800512c 	.word	0x0800512c

08003284 <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b087      	sub	sp, #28
 8003288:	af02      	add	r7, sp, #8
 800328a:	463b      	mov	r3, r7
 800328c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fc ff9c 	bl	80001d0 <strlen>
 8003298:	4603      	mov	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 800329c:	783b      	ldrb	r3, [r7, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	461c      	mov	r4, r3
 80032a4:	783b      	ldrb	r3, [r7, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	1d5a      	adds	r2, r3, #5
 80032ae:	787b      	ldrb	r3, [r7, #1]
 80032b0:	3302      	adds	r3, #2
 80032b2:	2100      	movs	r1, #0
 80032b4:	9100      	str	r1, [sp, #0]
 80032b6:	4621      	mov	r1, r4
 80032b8:	f7fd fe46 	bl	8000f48 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80032bc:	783b      	ldrb	r3, [r7, #0]
 80032be:	3303      	adds	r3, #3
 80032c0:	787a      	ldrb	r2, [r7, #1]
 80032c2:	3201      	adds	r2, #1
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fe2c 	bl	8000f24 <gotoxy>
	printf(btn.text);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fdbe 	bl	8003e50 <iprintf>
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	463b      	mov	r3, r7
 80032e4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fc ff70 	bl	80001d0 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 80032f4:	783b      	ldrb	r3, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	461c      	mov	r4, r3
 80032fc:	783b      	ldrb	r3, [r7, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	1d5a      	adds	r2, r3, #5
 8003306:	787b      	ldrb	r3, [r7, #1]
 8003308:	3302      	adds	r3, #2
 800330a:	2101      	movs	r1, #1
 800330c:	9100      	str	r1, [sp, #0]
 800330e:	4621      	mov	r1, r4
 8003310:	f7fd fe1a 	bl	8000f48 <drawBox>
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b087      	sub	sp, #28
 8003320:	af02      	add	r7, sp, #8
 8003322:	463b      	mov	r3, r7
 8003324:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fc ff50 	bl	80001d0 <strlen>
 8003330:	4603      	mov	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003334:	783b      	ldrb	r3, [r7, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	461c      	mov	r4, r3
 800333c:	783b      	ldrb	r3, [r7, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	1d5a      	adds	r2, r3, #5
 8003346:	787b      	ldrb	r3, [r7, #1]
 8003348:	3302      	adds	r3, #2
 800334a:	2100      	movs	r1, #0
 800334c:	9100      	str	r1, [sp, #0]
 800334e:	4621      	mov	r1, r4
 8003350:	f7fd fdfa 	bl	8000f48 <drawBox>
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bd90      	pop	{r4, r7, pc}

0800335c <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800336c:	f7ff ff8a 	bl	8003284 <drawButton>
	drawButton(btnList[1]);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3308      	adds	r3, #8
 8003374:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003378:	f7ff ff84 	bl	8003284 <drawButton>
	drawButton(btnList[2]);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3310      	adds	r3, #16
 8003380:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003384:	f7ff ff7e 	bl	8003284 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003398:	f7ff ffa0 	bl	80032dc <drawBtnAsSelected>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <drawHelpScreen>:


void drawHelpScreen(){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 80033a8:	2105      	movs	r1, #5
 80033aa:	2046      	movs	r0, #70	; 0x46
 80033ac:	f7fd fdba 	bl	8000f24 <gotoxy>
	printf("HELP SCREEN");
 80033b0:	4805      	ldr	r0, [pc, #20]	; (80033c8 <drawHelpScreen+0x24>)
 80033b2:	f000 fd4d 	bl	8003e50 <iprintf>
	gotoxy(60,7);
 80033b6:	2107      	movs	r1, #7
 80033b8:	203c      	movs	r0, #60	; 0x3c
 80033ba:	f7fd fdb3 	bl	8000f24 <gotoxy>
	printf("Tag dig dog sammen mand!");
 80033be:	4803      	ldr	r0, [pc, #12]	; (80033cc <drawHelpScreen+0x28>)
 80033c0:	f000 fd46 	bl	8003e50 <iprintf>

}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0800517c 	.word	0x0800517c
 80033cc:	08005188 	.word	0x08005188

080033d0 <drawWindow>:

void drawWindow(){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 80033d6:	2300      	movs	r3, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	232b      	movs	r3, #43	; 0x2b
 80033dc:	229c      	movs	r2, #156	; 0x9c
 80033de:	2101      	movs	r1, #1
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7fd fdb1 	bl	8000f48 <drawBox>
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <spawnPowerup>:
 *      Author: david
 */
#include "powerup.h"
#define spawnPeriod 600

void spawnPowerup(gameState_t* gameState){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 80033f4:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <spawnPowerup+0x88>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003402:	d332      	bcc.n	800346a <spawnPowerup+0x7e>



		gameState->powerup.lastUseTime=runtime;
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <spawnPowerup+0x88>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	651a      	str	r2, [r3, #80]	; 0x50
		gameState->powerup.isVisible=1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		position_t spawnPos = {intToFp(100), intToFp(2)*yScale};
 8003414:	2064      	movs	r0, #100	; 0x64
 8003416:	f7fe faf2 	bl	80019fe <intToFp>
 800341a:	4603      	mov	r3, r0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	2002      	movs	r0, #2
 8003420:	f7fe faed 	bl	80019fe <intToFp>
 8003424:	4603      	mov	r3, r0
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	617b      	str	r3, [r7, #20]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 800342a:	2000      	movs	r0, #0
 800342c:	f7fe fae7 	bl	80019fe <intToFp>
 8003430:	4603      	mov	r3, r0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003438:	60fb      	str	r3, [r7, #12]
		gameState->powerup.position=spawnPos;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3338      	adds	r3, #56	; 0x38
 800343e:	f107 0210 	add.w	r2, r7, #16
 8003442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003446:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3340      	adds	r3, #64	; 0x40
 800344e:	f107 0210 	add.w	r2, r7, #16
 8003452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003456:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	f107 0208 	add.w	r2, r7, #8
 8003462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003466:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200001c8 	.word	0x200001c8

08003478 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b1 	beq.w	80035ee <updatePowerup+0x176>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=39){
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fabb 	bl	8001a28 <fpToInt>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b4d      	cmp	r3, #77	; 0x4d
 80034b6:	dd79      	ble.n	80035ac <updatePowerup+0x134>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7f1b      	ldrb	r3, [r3, #28]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d125      	bne.n	800350c <updatePowerup+0x94>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe faaf 	bl	8001a28 <fpToInt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f103 0408 	add.w	r4, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe faa7 	bl	8001a28 <fpToInt>
 80034da:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 80034dc:	429c      	cmp	r4, r3
 80034de:	db12      	blt.n	8003506 <updatePowerup+0x8e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fa9f 	bl	8001a28 <fpToInt>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f1a3 0408 	sub.w	r4, r3, #8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fa97 	bl	8001a28 <fpToInt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	3304      	adds	r3, #4
 80034fe:	429c      	cmp	r4, r3
 8003500:	dc01      	bgt.n	8003506 <updatePowerup+0x8e>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <updatePowerup+0x90>
 8003506:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e029      	b.n	8003560 <updatePowerup+0xe8>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fa89 	bl	8001a28 <fpToInt>
 8003516:	4603      	mov	r3, r0
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7f1b      	ldrb	r3, [r3, #28]
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	18cc      	adds	r4, r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fa7b 	bl	8001a28 <fpToInt>
 8003532:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8003534:	429c      	cmp	r4, r3
 8003536:	db11      	blt.n	800355c <updatePowerup+0xe4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fa73 	bl	8001a28 <fpToInt>
 8003542:	4603      	mov	r3, r0
 8003544:	1e5c      	subs	r4, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fa6c 	bl	8001a28 <fpToInt>
 8003550:	4603      	mov	r3, r0
 8003552:	3304      	adds	r3, #4
 8003554:	429c      	cmp	r4, r3
 8003556:	dc01      	bgt.n	800355c <updatePowerup+0xe4>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <updatePowerup+0xe6>
 800355c:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 800355e:	73fb      	strb	r3, [r7, #15]

			}


			if(powerupIsTaken){
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d022      	beq.n	80035ac <updatePowerup+0x134>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fa5c 	bl	8001a28 <fpToInt>
 8003570:	4603      	mov	r3, r0
 8003572:	b2dc      	uxtb	r4, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fa55 	bl	8001a28 <fpToInt>
 800357e:	4603      	mov	r3, r0
 8003580:	0fda      	lsrs	r2, r3, #31
 8003582:	4413      	add	r3, r2
 8003584:	105b      	asrs	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff f9f2 	bl	8002974 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7f1b      	ldrb	r3, [r3, #28]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d805      	bhi.n	80035ac <updatePowerup+0x134>
					gameState->spaceship.numberOfParts++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7f1b      	ldrb	r3, [r3, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	771a      	strb	r2, [r3, #28]
					//TODO: tilføj point??
				}

			}
		}
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=42){
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fa39 	bl	8001a28 <fpToInt>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b53      	cmp	r3, #83	; 0x53
 80035ba:	dd18      	ble.n	80035ee <updatePowerup+0x176>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fa31 	bl	8001a28 <fpToInt>
 80035c6:	4603      	mov	r3, r0
 80035c8:	b2dc      	uxtb	r4, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fa2a 	bl	8001a28 <fpToInt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	0fda      	lsrs	r2, r3, #31
 80035d8:	4413      	add	r3, r2
 80035da:	105b      	asrs	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff f9c7 	bl	8002974 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


	}


}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}

080035f6 <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 80035f6:	b590      	push	{r4, r7, lr}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d031      	beq.n	800366c <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fa0b 	bl	8001a28 <fpToInt>
 8003612:	4603      	mov	r3, r0
 8003614:	b2dc      	uxtb	r4, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fa04 	bl	8001a28 <fpToInt>
 8003620:	4603      	mov	r3, r0
 8003622:	0fda      	lsrs	r2, r3, #31
 8003624:	4413      	add	r3, r2
 8003626:	105b      	asrs	r3, r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff f9a1 	bl	8002974 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f9f6 	bl	8001a28 <fpToInt>
 800363c:	4603      	mov	r3, r0
 800363e:	b2dc      	uxtb	r4, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe f9ef 	bl	8001a28 <fpToInt>
 800364a:	4603      	mov	r3, r0
 800364c:	0fda      	lsrs	r2, r3, #31
 800364e:	4413      	add	r3, r2
 8003650:	105b      	asrs	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff f9b8 	bl	80029cc <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	3338      	adds	r3, #56	; 0x38
 8003662:	3240      	adds	r2, #64	; 0x40
 8003664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003668:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	if(gameState->direction == -1 && gameState->spaceship.position.x > intToFp(2)){
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d110      	bne.n	80036aa <updateSpaceship+0x36>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68dc      	ldr	r4, [r3, #12]
 800368c:	2002      	movs	r0, #2
 800368e:	f7fe f9b6 	bl	80019fe <intToFp>
 8003692:	4603      	mov	r3, r0
 8003694:	429c      	cmp	r4, r3
 8003696:	d908      	bls.n	80036aa <updateSpaceship+0x36>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x - intToFp(1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68dc      	ldr	r4, [r3, #12]
 800369c:	2001      	movs	r0, #1
 800369e:	f7fe f9ae 	bl	80019fe <intToFp>
 80036a2:	4603      	mov	r3, r0
 80036a4:	1ae2      	subs	r2, r4, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	615a      	str	r2, [r3, #20]
	}
	if(gameState->direction == 1 && gameState->spaceship.position.x < intToFp(148)){
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d110      	bne.n	80036d6 <updateSpaceship+0x62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68dc      	ldr	r4, [r3, #12]
 80036b8:	2094      	movs	r0, #148	; 0x94
 80036ba:	f7fe f9a0 	bl	80019fe <intToFp>
 80036be:	4603      	mov	r3, r0
 80036c0:	429c      	cmp	r4, r3
 80036c2:	d208      	bcs.n	80036d6 <updateSpaceship+0x62>
		gameState->spaceship.nextPosition.x = gameState->spaceship.position.x + intToFp(1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68dc      	ldr	r4, [r3, #12]
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fe f998 	bl	80019fe <intToFp>
 80036ce:	4603      	mov	r3, r0
 80036d0:	18e2      	adds	r2, r4, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	615a      	str	r2, [r3, #20]
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
	*/
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
	...

080036e0 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	b09e      	sub	sp, #120	; 0x78
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 80036e8:	f7fd fee0 	bl	80014ac <centerIsPressed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a9 	beq.w	8003846 <shootSpaceship+0x166>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <shootSpaceship+0x170>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]

		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80036fc:	2300      	movs	r3, #0
 80036fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003700:	e09a      	b.n	8003838 <shootSpaceship+0x158>
			if(i ==2){
 8003702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003704:	2b02      	cmp	r3, #2
 8003706:	d147      	bne.n	8003798 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8003708:	2000      	movs	r0, #0
 800370a:	f7fe f978 	bl	80019fe <intToFp>
 800370e:	4603      	mov	r3, r0
 8003710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003712:	4b50      	ldr	r3, [pc, #320]	; (8003854 <shootSpaceship+0x174>)
 8003714:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68dc      	ldr	r4, [r3, #12]
 800371a:	2007      	movs	r0, #7
 800371c:	f7fe f96f 	bl	80019fe <intToFp>
 8003720:	4603      	mov	r3, r0
 8003722:	1ae3      	subs	r3, r4, r3
 8003724:	657b      	str	r3, [r7, #84]	; 0x54
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691c      	ldr	r4, [r3, #16]
 800372a:	2001      	movs	r0, #1
 800372c:	f7fe f967 	bl	80019fe <intToFp>
 8003730:	4603      	mov	r3, r0
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	1ae3      	subs	r3, r4, r3
 8003736:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8003738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	615a      	str	r2, [r3, #20]
 800374a:	619a      	str	r2, [r3, #24]
 800374c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003750:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003758:	e883 0003 	stmia.w	r3, {r0, r1}
 800375c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003760:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003768:	e883 0003 	stmia.w	r3, {r0, r1}
 800376c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003770:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003778:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 800377c:	687d      	ldr	r5, [r7, #4]
 800377e:	466c      	mov	r4, sp
 8003780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800378a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	4628      	mov	r0, r5
 8003792:	f7ff f95e 	bl	8002a52 <appendBullet>
 8003796:	e04c      	b.n	8003832 <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8003798:	2000      	movs	r0, #0
 800379a:	f7fe f930 	bl	80019fe <intToFp>
 800379e:	4603      	mov	r3, r0
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <shootSpaceship+0x174>)
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68dc      	ldr	r4, [r3, #12]
 80037aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	00d2      	lsls	r2, r2, #3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe f921 	bl	80019fe <intToFp>
 80037bc:	4603      	mov	r3, r0
 80037be:	4423      	add	r3, r4
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691c      	ldr	r4, [r3, #16]
 80037c6:	2001      	movs	r0, #1
 80037c8:	f7fe f919 	bl	80019fe <intToFp>
 80037cc:	4603      	mov	r3, r0
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	1ae3      	subs	r3, r4, r3
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	619a      	str	r2, [r3, #24]
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003804:	e883 0003 	stmia.w	r3, {r0, r1}
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003814:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8003818:	687d      	ldr	r5, [r7, #4]
 800381a:	466c      	mov	r4, sp
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff f910 	bl	8002a52 <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8003832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003834:	3301      	adds	r3, #1
 8003836:	667b      	str	r3, [r7, #100]	; 0x64
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7f1b      	ldrb	r3, [r3, #28]
 800383c:	461a      	mov	r2, r3
 800383e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003840:	4293      	cmp	r3, r2
 8003842:	f6ff af5e 	blt.w	8003702 <shootSpaceship+0x22>
		}


	}

}
 8003846:	bf00      	nop
 8003848:	3768      	adds	r7, #104	; 0x68
 800384a:	46bd      	mov	sp, r7
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	bf00      	nop
 8003850:	200001c8 	.word	0x200001c8
 8003854:	ffff0000 	.word	0xffff0000

08003858 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe f8df 	bl	8001a28 <fpToInt>
 800386a:	4603      	mov	r3, r0
 800386c:	b2dc      	uxtb	r4, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe f8d8 	bl	8001a28 <fpToInt>
 8003878:	4603      	mov	r3, r0
 800387a:	0fda      	lsrs	r2, r3, #31
 800387c:	4413      	add	r3, r2
 800387e:	105b      	asrs	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff f853 	bl	8002930 <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f8ca 	bl	8001a28 <fpToInt>
 8003894:	4603      	mov	r3, r0
 8003896:	b2dc      	uxtb	r4, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe f8c3 	bl	8001a28 <fpToInt>
 80038a2:	4603      	mov	r3, r0
 80038a4:	0fda      	lsrs	r2, r3, #31
 80038a6:	4413      	add	r3, r2
 80038a8:	105b      	asrs	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff f81c 	bl	80028ec <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e06e      	b.n	8003998 <drawSpaceship+0x140>

		if(i == 2){
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d12e      	bne.n	800391e <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe f8af 	bl	8001a28 <fpToInt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b07      	subs	r3, #7
 80038d0:	b2dc      	uxtb	r4, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe f8a6 	bl	8001a28 <fpToInt>
 80038dc:	4603      	mov	r3, r0
 80038de:	0fda      	lsrs	r2, r3, #31
 80038e0:	4413      	add	r3, r2
 80038e2:	105b      	asrs	r3, r3, #1
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7fe ffb6 	bl	800285a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe f898 	bl	8001a28 <fpToInt>
 80038f8:	4603      	mov	r3, r0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3b07      	subs	r3, #7
 80038fe:	b2dc      	uxtb	r4, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe f88f 	bl	8001a28 <fpToInt>
 800390a:	4603      	mov	r3, r0
 800390c:	0fda      	lsrs	r2, r3, #31
 800390e:	4413      	add	r3, r2
 8003910:	105b      	asrs	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	4620      	mov	r0, r4
 8003918:	f7fe ff56 	bl	80027c8 <drawMe>
 800391c:	e039      	b.n	8003992 <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe f880 	bl	8001a28 <fpToInt>
 8003928:	4603      	mov	r3, r0
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	4619      	mov	r1, r3
 8003932:	00c9      	lsls	r1, r1, #3
 8003934:	1acb      	subs	r3, r1, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	b2dc      	uxtb	r4, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe f871 	bl	8001a28 <fpToInt>
 8003946:	4603      	mov	r3, r0
 8003948:	0fda      	lsrs	r2, r3, #31
 800394a:	4413      	add	r3, r2
 800394c:	105b      	asrs	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4619      	mov	r1, r3
 8003952:	4620      	mov	r0, r4
 8003954:	f7fe ff81 	bl	800285a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe f863 	bl	8001a28 <fpToInt>
 8003962:	4603      	mov	r3, r0
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4619      	mov	r1, r3
 800396c:	00c9      	lsls	r1, r1, #3
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4413      	add	r3, r2
 8003974:	b2dc      	uxtb	r4, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe f854 	bl	8001a28 <fpToInt>
 8003980:	4603      	mov	r3, r0
 8003982:	0fda      	lsrs	r2, r3, #31
 8003984:	4413      	add	r3, r2
 8003986:	105b      	asrs	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	4620      	mov	r0, r4
 800398e:	f7fe ff1b 	bl	80027c8 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7f1b      	ldrb	r3, [r3, #28]
 800399c:	461a      	mov	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	db8a      	blt.n	80038ba <drawSpaceship+0x62>

	}



	gameState->spaceship.position=gameState->spaceship.nextPosition;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	330c      	adds	r3, #12
 80039aa:	3214      	adds	r2, #20
 80039ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	return 1;
 80039c0:	2301      	movs	r3, #1
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_kill>:

int _kill(int pid, int sig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039d6:	f000 f94f 	bl	8003c78 <__errno>
 80039da:	4603      	mov	r3, r0
 80039dc:	2216      	movs	r2, #22
 80039de:	601a      	str	r2, [r3, #0]
	return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_exit>:

void _exit (int status)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffe7 	bl	80039cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80039fe:	e7fe      	b.n	80039fe <_exit+0x12>

08003a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e00a      	b.n	8003a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a12:	f3af 8000 	nop.w
 8003a16:	4601      	mov	r1, r0
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	60ba      	str	r2, [r7, #8]
 8003a1e:	b2ca      	uxtb	r2, r1
 8003a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dbf0      	blt.n	8003a12 <_read+0x12>
	}

return len;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	return -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a62:	605a      	str	r2, [r3, #4]
	return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_isatty>:

int _isatty(int file)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
	return 1;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	return 0;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <_sbrk+0x50>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <_sbrk+0x16>
		heap_end = &end;
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <_sbrk+0x50>)
 8003ab6:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <_sbrk+0x54>)
 8003ab8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <_sbrk+0x50>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <_sbrk+0x50>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	466a      	mov	r2, sp
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d907      	bls.n	8003ade <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ace:	f000 f8d3 	bl	8003c78 <__errno>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	e006      	b.n	8003aec <_sbrk+0x48>
	}

	heap_end += incr;
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <_sbrk+0x50>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <_sbrk+0x50>)
 8003ae8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	200001bc 	.word	0x200001bc
 8003af8:	200001e0 	.word	0x200001e0

08003afc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <SystemInit+0x84>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <SystemInit+0x84>)
 8003b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <SystemInit+0x88>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <SystemInit+0x88>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <SystemInit+0x88>)
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4918      	ldr	r1, [pc, #96]	; (8003b84 <SystemInit+0x88>)
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <SystemInit+0x8c>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b28:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <SystemInit+0x88>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <SystemInit+0x88>)
 8003b2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <SystemInit+0x88>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <SystemInit+0x88>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <SystemInit+0x88>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <SystemInit+0x88>)
 8003b4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003b4e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <SystemInit+0x88>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <SystemInit+0x88>)
 8003b56:	f023 030f 	bic.w	r3, r3, #15
 8003b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <SystemInit+0x88>)
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	4908      	ldr	r1, [pc, #32]	; (8003b84 <SystemInit+0x88>)
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <SystemInit+0x90>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <SystemInit+0x88>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003b6e:	f000 f80f 	bl	8003b90 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <SystemInit+0x84>)
 8003b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b78:	609a      	str	r2, [r3, #8]
#endif  
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	40021000 	.word	0x40021000
 8003b88:	f87fc00c 	.word	0xf87fc00c
 8003b8c:	ff00fccc 	.word	0xff00fccc

08003b90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <SetSysClock+0x8c>)
 8003b96:	2212      	movs	r2, #18
 8003b98:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <SetSysClock+0x90>)
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <SetSysClock+0x90>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <SetSysClock+0x90>)
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <SetSysClock+0x90>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <SetSysClock+0x90>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <SetSysClock+0x90>)
 8003bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bb4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <SetSysClock+0x90>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <SetSysClock+0x90>)
 8003bbc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003bc0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8003bc2:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <SetSysClock+0x90>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <SetSysClock+0x90>)
 8003bc8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8003bcc:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <SetSysClock+0x90>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <SetSysClock+0x90>)
 8003bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003bda:	bf00      	nop
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <SetSysClock+0x90>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f9      	beq.n	8003bdc <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <SetSysClock+0x90>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <SetSysClock+0x90>)
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <SetSysClock+0x90>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <SetSysClock+0x90>)
 8003bfa:	f043 0302 	orr.w	r3, r3, #2
 8003bfe:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003c00:	bf00      	nop
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <SetSysClock+0x90>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d1f9      	bne.n	8003c02 <SetSysClock+0x72>
  {
  }
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000

08003c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c24:	480d      	ldr	r0, [pc, #52]	; (8003c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c28:	480d      	ldr	r0, [pc, #52]	; (8003c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c2a:	490e      	ldr	r1, [pc, #56]	; (8003c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c2c:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <LoopForever+0xe>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c30:	e002      	b.n	8003c38 <LoopCopyDataInit>

08003c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c36:	3304      	adds	r3, #4

08003c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c3c:	d3f9      	bcc.n	8003c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c40:	4c0b      	ldr	r4, [pc, #44]	; (8003c70 <LoopForever+0x16>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c44:	e001      	b.n	8003c4a <LoopFillZerobss>

08003c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c48:	3204      	adds	r2, #4

08003c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c4c:	d3fb      	bcc.n	8003c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c4e:	f7ff ff55 	bl	8003afc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c52:	f000 f817 	bl	8003c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c56:	f7ff f90b 	bl	8002e70 <main>

08003c5a <LoopForever>:

LoopForever:
    b LoopForever
 8003c5a:	e7fe      	b.n	8003c5a <LoopForever>
  ldr   r0, =_estack
 8003c5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003c68:	08005318 	.word	0x08005318
  ldr r2, =_sbss
 8003c6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003c70:	200001dc 	.word	0x200001dc

08003c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c74:	e7fe      	b.n	8003c74 <ADC1_2_IRQHandler>
	...

08003c78 <__errno>:
 8003c78:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <__errno+0x8>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000002c 	.word	0x2000002c

08003c84 <__libc_init_array>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	4d0d      	ldr	r5, [pc, #52]	; (8003cbc <__libc_init_array+0x38>)
 8003c88:	4c0d      	ldr	r4, [pc, #52]	; (8003cc0 <__libc_init_array+0x3c>)
 8003c8a:	1b64      	subs	r4, r4, r5
 8003c8c:	10a4      	asrs	r4, r4, #2
 8003c8e:	2600      	movs	r6, #0
 8003c90:	42a6      	cmp	r6, r4
 8003c92:	d109      	bne.n	8003ca8 <__libc_init_array+0x24>
 8003c94:	4d0b      	ldr	r5, [pc, #44]	; (8003cc4 <__libc_init_array+0x40>)
 8003c96:	4c0c      	ldr	r4, [pc, #48]	; (8003cc8 <__libc_init_array+0x44>)
 8003c98:	f001 f9c0 	bl	800501c <_init>
 8003c9c:	1b64      	subs	r4, r4, r5
 8003c9e:	10a4      	asrs	r4, r4, #2
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	42a6      	cmp	r6, r4
 8003ca4:	d105      	bne.n	8003cb2 <__libc_init_array+0x2e>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cac:	4798      	blx	r3
 8003cae:	3601      	adds	r6, #1
 8003cb0:	e7ee      	b.n	8003c90 <__libc_init_array+0xc>
 8003cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb6:	4798      	blx	r3
 8003cb8:	3601      	adds	r6, #1
 8003cba:	e7f2      	b.n	8003ca2 <__libc_init_array+0x1e>
 8003cbc:	08005310 	.word	0x08005310
 8003cc0:	08005310 	.word	0x08005310
 8003cc4:	08005310 	.word	0x08005310
 8003cc8:	08005314 	.word	0x08005314

08003ccc <malloc>:
 8003ccc:	4b02      	ldr	r3, [pc, #8]	; (8003cd8 <malloc+0xc>)
 8003cce:	4601      	mov	r1, r0
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	f000 b863 	b.w	8003d9c <_malloc_r>
 8003cd6:	bf00      	nop
 8003cd8:	2000002c 	.word	0x2000002c

08003cdc <free>:
 8003cdc:	4b02      	ldr	r3, [pc, #8]	; (8003ce8 <free+0xc>)
 8003cde:	4601      	mov	r1, r0
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f000 b80b 	b.w	8003cfc <_free_r>
 8003ce6:	bf00      	nop
 8003ce8:	2000002c 	.word	0x2000002c

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <_free_r>:
 8003cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d048      	beq.n	8003d94 <_free_r+0x98>
 8003d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d06:	9001      	str	r0, [sp, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d0e:	bfb8      	it	lt
 8003d10:	18e4      	addlt	r4, r4, r3
 8003d12:	f000 fc93 	bl	800463c <__malloc_lock>
 8003d16:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <_free_r+0x9c>)
 8003d18:	9801      	ldr	r0, [sp, #4]
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	4615      	mov	r5, r2
 8003d1e:	b933      	cbnz	r3, 8003d2e <_free_r+0x32>
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6014      	str	r4, [r2, #0]
 8003d24:	b003      	add	sp, #12
 8003d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d2a:	f000 bc8d 	b.w	8004648 <__malloc_unlock>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d90b      	bls.n	8003d4a <_free_r+0x4e>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1862      	adds	r2, r4, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf04      	itt	eq
 8003d3a:	681a      	ldreq	r2, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	bf04      	itt	eq
 8003d42:	1852      	addeq	r2, r2, r1
 8003d44:	6022      	streq	r2, [r4, #0]
 8003d46:	602c      	str	r4, [r5, #0]
 8003d48:	e7ec      	b.n	8003d24 <_free_r+0x28>
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b10b      	cbz	r3, 8003d54 <_free_r+0x58>
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x4e>
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	1855      	adds	r5, r2, r1
 8003d58:	42a5      	cmp	r5, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x78>
 8003d5c:	6824      	ldr	r4, [r4, #0]
 8003d5e:	4421      	add	r1, r4
 8003d60:	1854      	adds	r4, r2, r1
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	d1dd      	bne.n	8003d24 <_free_r+0x28>
 8003d68:	681c      	ldr	r4, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	6053      	str	r3, [r2, #4]
 8003d6e:	4421      	add	r1, r4
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	e7d7      	b.n	8003d24 <_free_r+0x28>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x80>
 8003d76:	230c      	movs	r3, #12
 8003d78:	6003      	str	r3, [r0, #0]
 8003d7a:	e7d3      	b.n	8003d24 <_free_r+0x28>
 8003d7c:	6825      	ldr	r5, [r4, #0]
 8003d7e:	1961      	adds	r1, r4, r5
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf04      	itt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	bf04      	itt	eq
 8003d8c:	1949      	addeq	r1, r1, r5
 8003d8e:	6021      	streq	r1, [r4, #0]
 8003d90:	6054      	str	r4, [r2, #4]
 8003d92:	e7c7      	b.n	8003d24 <_free_r+0x28>
 8003d94:	b003      	add	sp, #12
 8003d96:	bd30      	pop	{r4, r5, pc}
 8003d98:	200001c0 	.word	0x200001c0

08003d9c <_malloc_r>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	1ccd      	adds	r5, r1, #3
 8003da0:	f025 0503 	bic.w	r5, r5, #3
 8003da4:	3508      	adds	r5, #8
 8003da6:	2d0c      	cmp	r5, #12
 8003da8:	bf38      	it	cc
 8003daa:	250c      	movcc	r5, #12
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	4606      	mov	r6, r0
 8003db0:	db01      	blt.n	8003db6 <_malloc_r+0x1a>
 8003db2:	42a9      	cmp	r1, r5
 8003db4:	d903      	bls.n	8003dbe <_malloc_r+0x22>
 8003db6:	230c      	movs	r3, #12
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dbe:	f000 fc3d 	bl	800463c <__malloc_lock>
 8003dc2:	4921      	ldr	r1, [pc, #132]	; (8003e48 <_malloc_r+0xac>)
 8003dc4:	680a      	ldr	r2, [r1, #0]
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	b99c      	cbnz	r4, 8003df2 <_malloc_r+0x56>
 8003dca:	4f20      	ldr	r7, [pc, #128]	; (8003e4c <_malloc_r+0xb0>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b923      	cbnz	r3, 8003dda <_malloc_r+0x3e>
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f000 f8d8 	bl	8003f88 <_sbrk_r>
 8003dd8:	6038      	str	r0, [r7, #0]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f000 f8d3 	bl	8003f88 <_sbrk_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d123      	bne.n	8003e2e <_malloc_r+0x92>
 8003de6:	230c      	movs	r3, #12
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 fc2c 	bl	8004648 <__malloc_unlock>
 8003df0:	e7e3      	b.n	8003dba <_malloc_r+0x1e>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	1b5b      	subs	r3, r3, r5
 8003df6:	d417      	bmi.n	8003e28 <_malloc_r+0x8c>
 8003df8:	2b0b      	cmp	r3, #11
 8003dfa:	d903      	bls.n	8003e04 <_malloc_r+0x68>
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	441c      	add	r4, r3
 8003e00:	6025      	str	r5, [r4, #0]
 8003e02:	e004      	b.n	8003e0e <_malloc_r+0x72>
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	42a2      	cmp	r2, r4
 8003e08:	bf0c      	ite	eq
 8003e0a:	600b      	streq	r3, [r1, #0]
 8003e0c:	6053      	strne	r3, [r2, #4]
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f000 fc1a 	bl	8004648 <__malloc_unlock>
 8003e14:	f104 000b 	add.w	r0, r4, #11
 8003e18:	1d23      	adds	r3, r4, #4
 8003e1a:	f020 0007 	bic.w	r0, r0, #7
 8003e1e:	1ac2      	subs	r2, r0, r3
 8003e20:	d0cc      	beq.n	8003dbc <_malloc_r+0x20>
 8003e22:	1a1b      	subs	r3, r3, r0
 8003e24:	50a3      	str	r3, [r4, r2]
 8003e26:	e7c9      	b.n	8003dbc <_malloc_r+0x20>
 8003e28:	4622      	mov	r2, r4
 8003e2a:	6864      	ldr	r4, [r4, #4]
 8003e2c:	e7cc      	b.n	8003dc8 <_malloc_r+0x2c>
 8003e2e:	1cc4      	adds	r4, r0, #3
 8003e30:	f024 0403 	bic.w	r4, r4, #3
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d0e3      	beq.n	8003e00 <_malloc_r+0x64>
 8003e38:	1a21      	subs	r1, r4, r0
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 f8a4 	bl	8003f88 <_sbrk_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d1dd      	bne.n	8003e00 <_malloc_r+0x64>
 8003e44:	e7cf      	b.n	8003de6 <_malloc_r+0x4a>
 8003e46:	bf00      	nop
 8003e48:	200001c0 	.word	0x200001c0
 8003e4c:	200001c4 	.word	0x200001c4

08003e50 <iprintf>:
 8003e50:	b40f      	push	{r0, r1, r2, r3}
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <iprintf+0x2c>)
 8003e54:	b513      	push	{r0, r1, r4, lr}
 8003e56:	681c      	ldr	r4, [r3, #0]
 8003e58:	b124      	cbz	r4, 8003e64 <iprintf+0x14>
 8003e5a:	69a3      	ldr	r3, [r4, #24]
 8003e5c:	b913      	cbnz	r3, 8003e64 <iprintf+0x14>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 fac2 	bl	80043e8 <__sinit>
 8003e64:	ab05      	add	r3, sp, #20
 8003e66:	9a04      	ldr	r2, [sp, #16]
 8003e68:	68a1      	ldr	r1, [r4, #8]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 fc1b 	bl	80046a8 <_vfiprintf_r>
 8003e72:	b002      	add	sp, #8
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e78:	b004      	add	sp, #16
 8003e7a:	4770      	bx	lr
 8003e7c:	2000002c 	.word	0x2000002c

08003e80 <putchar>:
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <putchar+0x28>)
 8003e82:	b513      	push	{r0, r1, r4, lr}
 8003e84:	681c      	ldr	r4, [r3, #0]
 8003e86:	4601      	mov	r1, r0
 8003e88:	b134      	cbz	r4, 8003e98 <putchar+0x18>
 8003e8a:	69a3      	ldr	r3, [r4, #24]
 8003e8c:	b923      	cbnz	r3, 8003e98 <putchar+0x18>
 8003e8e:	9001      	str	r0, [sp, #4]
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 faa9 	bl	80043e8 <__sinit>
 8003e96:	9901      	ldr	r1, [sp, #4]
 8003e98:	68a2      	ldr	r2, [r4, #8]
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	b002      	add	sp, #8
 8003e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea2:	f000 bec5 	b.w	8004c30 <_putc_r>
 8003ea6:	bf00      	nop
 8003ea8:	2000002c 	.word	0x2000002c

08003eac <srand>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <srand+0x44>)
 8003eb0:	681d      	ldr	r5, [r3, #0]
 8003eb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	b9b3      	cbnz	r3, 8003ee6 <srand+0x3a>
 8003eb8:	2018      	movs	r0, #24
 8003eba:	f7ff ff07 	bl	8003ccc <malloc>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	63a8      	str	r0, [r5, #56]	; 0x38
 8003ec2:	b920      	cbnz	r0, 8003ece <srand+0x22>
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <srand+0x48>)
 8003ec6:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <srand+0x4c>)
 8003ec8:	2142      	movs	r1, #66	; 0x42
 8003eca:	f000 f955 	bl	8004178 <__assert_func>
 8003ece:	490b      	ldr	r1, [pc, #44]	; (8003efc <srand+0x50>)
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <srand+0x54>)
 8003ed2:	e9c0 1300 	strd	r1, r3, [r0]
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <srand+0x58>)
 8003ed8:	6083      	str	r3, [r0, #8]
 8003eda:	230b      	movs	r3, #11
 8003edc:	8183      	strh	r3, [r0, #12]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003ee6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611c      	str	r4, [r3, #16]
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	2000002c 	.word	0x2000002c
 8003ef4:	080051c0 	.word	0x080051c0
 8003ef8:	080051d7 	.word	0x080051d7
 8003efc:	abcd330e 	.word	0xabcd330e
 8003f00:	e66d1234 	.word	0xe66d1234
 8003f04:	0005deec 	.word	0x0005deec

08003f08 <rand>:
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <rand+0x60>)
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	681c      	ldr	r4, [r3, #0]
 8003f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f10:	b9b3      	cbnz	r3, 8003f40 <rand+0x38>
 8003f12:	2018      	movs	r0, #24
 8003f14:	f7ff feda 	bl	8003ccc <malloc>
 8003f18:	63a0      	str	r0, [r4, #56]	; 0x38
 8003f1a:	b928      	cbnz	r0, 8003f28 <rand+0x20>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <rand+0x64>)
 8003f20:	4813      	ldr	r0, [pc, #76]	; (8003f70 <rand+0x68>)
 8003f22:	214e      	movs	r1, #78	; 0x4e
 8003f24:	f000 f928 	bl	8004178 <__assert_func>
 8003f28:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <rand+0x6c>)
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <rand+0x70>)
 8003f2c:	e9c0 2300 	strd	r2, r3, [r0]
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <rand+0x74>)
 8003f32:	6083      	str	r3, [r0, #8]
 8003f34:	230b      	movs	r3, #11
 8003f36:	8183      	strh	r3, [r0, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003f40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f42:	480f      	ldr	r0, [pc, #60]	; (8003f80 <rand+0x78>)
 8003f44:	690a      	ldr	r2, [r1, #16]
 8003f46:	694b      	ldr	r3, [r1, #20]
 8003f48:	4c0e      	ldr	r4, [pc, #56]	; (8003f84 <rand+0x7c>)
 8003f4a:	4350      	muls	r0, r2
 8003f4c:	fb04 0003 	mla	r0, r4, r3, r0
 8003f50:	fba2 3404 	umull	r3, r4, r2, r4
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	4404      	add	r4, r0
 8003f58:	f144 0000 	adc.w	r0, r4, #0
 8003f5c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003f60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003f64:	bd10      	pop	{r4, pc}
 8003f66:	bf00      	nop
 8003f68:	2000002c 	.word	0x2000002c
 8003f6c:	080051c0 	.word	0x080051c0
 8003f70:	080051d7 	.word	0x080051d7
 8003f74:	abcd330e 	.word	0xabcd330e
 8003f78:	e66d1234 	.word	0xe66d1234
 8003f7c:	0005deec 	.word	0x0005deec
 8003f80:	5851f42d 	.word	0x5851f42d
 8003f84:	4c957f2d 	.word	0x4c957f2d

08003f88 <_sbrk_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d06      	ldr	r5, [pc, #24]	; (8003fa4 <_sbrk_r+0x1c>)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	f7ff fd86 	bl	8003aa4 <_sbrk>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_sbrk_r+0x1a>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_sbrk_r+0x1a>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200001d8 	.word	0x200001d8

08003fa8 <setbuf>:
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fae:	bf0c      	ite	eq
 8003fb0:	2202      	moveq	r2, #2
 8003fb2:	2200      	movne	r2, #0
 8003fb4:	f000 b800 	b.w	8003fb8 <setvbuf>

08003fb8 <setvbuf>:
 8003fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fbc:	461d      	mov	r5, r3
 8003fbe:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <setvbuf+0x17c>)
 8003fc0:	681f      	ldr	r7, [r3, #0]
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460e      	mov	r6, r1
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	b127      	cbz	r7, 8003fd4 <setvbuf+0x1c>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	b913      	cbnz	r3, 8003fd4 <setvbuf+0x1c>
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f000 fa0a 	bl	80043e8 <__sinit>
 8003fd4:	4b58      	ldr	r3, [pc, #352]	; (8004138 <setvbuf+0x180>)
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d167      	bne.n	80040aa <setvbuf+0xf2>
 8003fda:	687c      	ldr	r4, [r7, #4]
 8003fdc:	f1b8 0f02 	cmp.w	r8, #2
 8003fe0:	d006      	beq.n	8003ff0 <setvbuf+0x38>
 8003fe2:	f1b8 0f01 	cmp.w	r8, #1
 8003fe6:	f200 809f 	bhi.w	8004128 <setvbuf+0x170>
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	f2c0 809c 	blt.w	8004128 <setvbuf+0x170>
 8003ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff2:	07db      	lsls	r3, r3, #31
 8003ff4:	d405      	bmi.n	8004002 <setvbuf+0x4a>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	0598      	lsls	r0, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <setvbuf+0x4a>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f000 fab6 	bl	800456e <__retarget_lock_acquire_recursive>
 8004002:	4621      	mov	r1, r4
 8004004:	4638      	mov	r0, r7
 8004006:	f000 f95b 	bl	80042c0 <_fflush_r>
 800400a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800400c:	b141      	cbz	r1, 8004020 <setvbuf+0x68>
 800400e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004012:	4299      	cmp	r1, r3
 8004014:	d002      	beq.n	800401c <setvbuf+0x64>
 8004016:	4638      	mov	r0, r7
 8004018:	f7ff fe70 	bl	8003cfc <_free_r>
 800401c:	2300      	movs	r3, #0
 800401e:	6363      	str	r3, [r4, #52]	; 0x34
 8004020:	2300      	movs	r3, #0
 8004022:	61a3      	str	r3, [r4, #24]
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	0619      	lsls	r1, r3, #24
 800402a:	d503      	bpl.n	8004034 <setvbuf+0x7c>
 800402c:	6921      	ldr	r1, [r4, #16]
 800402e:	4638      	mov	r0, r7
 8004030:	f7ff fe64 	bl	8003cfc <_free_r>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	f1b8 0f02 	cmp.w	r8, #2
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	d06c      	beq.n	8004120 <setvbuf+0x168>
 8004046:	ab01      	add	r3, sp, #4
 8004048:	466a      	mov	r2, sp
 800404a:	4621      	mov	r1, r4
 800404c:	4638      	mov	r0, r7
 800404e:	f000 fa90 	bl	8004572 <__swhatbuf_r>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	4318      	orrs	r0, r3
 8004056:	81a0      	strh	r0, [r4, #12]
 8004058:	2d00      	cmp	r5, #0
 800405a:	d130      	bne.n	80040be <setvbuf+0x106>
 800405c:	9d00      	ldr	r5, [sp, #0]
 800405e:	4628      	mov	r0, r5
 8004060:	f7ff fe34 	bl	8003ccc <malloc>
 8004064:	4606      	mov	r6, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	d155      	bne.n	8004116 <setvbuf+0x15e>
 800406a:	f8dd 9000 	ldr.w	r9, [sp]
 800406e:	45a9      	cmp	r9, r5
 8004070:	d14a      	bne.n	8004108 <setvbuf+0x150>
 8004072:	f04f 35ff 	mov.w	r5, #4294967295
 8004076:	2200      	movs	r2, #0
 8004078:	60a2      	str	r2, [r4, #8]
 800407a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	6122      	str	r2, [r4, #16]
 8004082:	2201      	movs	r2, #1
 8004084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004088:	6162      	str	r2, [r4, #20]
 800408a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	07d2      	lsls	r2, r2, #31
 8004092:	81a3      	strh	r3, [r4, #12]
 8004094:	d405      	bmi.n	80040a2 <setvbuf+0xea>
 8004096:	f413 7f00 	tst.w	r3, #512	; 0x200
 800409a:	d102      	bne.n	80040a2 <setvbuf+0xea>
 800409c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800409e:	f000 fa67 	bl	8004570 <__retarget_lock_release_recursive>
 80040a2:	4628      	mov	r0, r5
 80040a4:	b003      	add	sp, #12
 80040a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <setvbuf+0x184>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d101      	bne.n	80040b4 <setvbuf+0xfc>
 80040b0:	68bc      	ldr	r4, [r7, #8]
 80040b2:	e793      	b.n	8003fdc <setvbuf+0x24>
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <setvbuf+0x188>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	bf08      	it	eq
 80040ba:	68fc      	ldreq	r4, [r7, #12]
 80040bc:	e78e      	b.n	8003fdc <setvbuf+0x24>
 80040be:	2e00      	cmp	r6, #0
 80040c0:	d0cd      	beq.n	800405e <setvbuf+0xa6>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	b913      	cbnz	r3, 80040cc <setvbuf+0x114>
 80040c6:	4638      	mov	r0, r7
 80040c8:	f000 f98e 	bl	80043e8 <__sinit>
 80040cc:	f1b8 0f01 	cmp.w	r8, #1
 80040d0:	bf08      	it	eq
 80040d2:	89a3      	ldrheq	r3, [r4, #12]
 80040d4:	6026      	str	r6, [r4, #0]
 80040d6:	bf04      	itt	eq
 80040d8:	f043 0301 	orreq.w	r3, r3, #1
 80040dc:	81a3      	strheq	r3, [r4, #12]
 80040de:	89a2      	ldrh	r2, [r4, #12]
 80040e0:	f012 0308 	ands.w	r3, r2, #8
 80040e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80040e8:	d01c      	beq.n	8004124 <setvbuf+0x16c>
 80040ea:	07d3      	lsls	r3, r2, #31
 80040ec:	bf41      	itttt	mi
 80040ee:	2300      	movmi	r3, #0
 80040f0:	426d      	negmi	r5, r5
 80040f2:	60a3      	strmi	r3, [r4, #8]
 80040f4:	61a5      	strmi	r5, [r4, #24]
 80040f6:	bf58      	it	pl
 80040f8:	60a5      	strpl	r5, [r4, #8]
 80040fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80040fc:	f015 0501 	ands.w	r5, r5, #1
 8004100:	d115      	bne.n	800412e <setvbuf+0x176>
 8004102:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004106:	e7c8      	b.n	800409a <setvbuf+0xe2>
 8004108:	4648      	mov	r0, r9
 800410a:	f7ff fddf 	bl	8003ccc <malloc>
 800410e:	4606      	mov	r6, r0
 8004110:	2800      	cmp	r0, #0
 8004112:	d0ae      	beq.n	8004072 <setvbuf+0xba>
 8004114:	464d      	mov	r5, r9
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	e7d0      	b.n	80040c2 <setvbuf+0x10a>
 8004120:	2500      	movs	r5, #0
 8004122:	e7a8      	b.n	8004076 <setvbuf+0xbe>
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	e7e8      	b.n	80040fa <setvbuf+0x142>
 8004128:	f04f 35ff 	mov.w	r5, #4294967295
 800412c:	e7b9      	b.n	80040a2 <setvbuf+0xea>
 800412e:	2500      	movs	r5, #0
 8004130:	e7b7      	b.n	80040a2 <setvbuf+0xea>
 8004132:	bf00      	nop
 8004134:	2000002c 	.word	0x2000002c
 8004138:	08005294 	.word	0x08005294
 800413c:	080052b4 	.word	0x080052b4
 8004140:	08005274 	.word	0x08005274

08004144 <time>:
 8004144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <time+0x30>)
 8004148:	2200      	movs	r2, #0
 800414a:	4669      	mov	r1, sp
 800414c:	4604      	mov	r4, r0
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f000 f9fa 	bl	8004548 <_gettimeofday_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	bfbe      	ittt	lt
 8004158:	f04f 32ff 	movlt.w	r2, #4294967295
 800415c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004160:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004168:	b10c      	cbz	r4, 800416e <time+0x2a>
 800416a:	e9c4 0100 	strd	r0, r1, [r4]
 800416e:	b004      	add	sp, #16
 8004170:	bd10      	pop	{r4, pc}
 8004172:	bf00      	nop
 8004174:	2000002c 	.word	0x2000002c

08004178 <__assert_func>:
 8004178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800417a:	4614      	mov	r4, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <__assert_func+0x2c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4605      	mov	r5, r0
 8004184:	68d8      	ldr	r0, [r3, #12]
 8004186:	b14c      	cbz	r4, 800419c <__assert_func+0x24>
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <__assert_func+0x30>)
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004190:	4906      	ldr	r1, [pc, #24]	; (80041ac <__assert_func+0x34>)
 8004192:	462b      	mov	r3, r5
 8004194:	f000 f9a6 	bl	80044e4 <fiprintf>
 8004198:	f000 fe96 	bl	8004ec8 <abort>
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__assert_func+0x38>)
 800419e:	461c      	mov	r4, r3
 80041a0:	e7f3      	b.n	800418a <__assert_func+0x12>
 80041a2:	bf00      	nop
 80041a4:	2000002c 	.word	0x2000002c
 80041a8:	08005236 	.word	0x08005236
 80041ac:	08005243 	.word	0x08005243
 80041b0:	08005271 	.word	0x08005271

080041b4 <__sflush_r>:
 80041b4:	898a      	ldrh	r2, [r1, #12]
 80041b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ba:	4605      	mov	r5, r0
 80041bc:	0710      	lsls	r0, r2, #28
 80041be:	460c      	mov	r4, r1
 80041c0:	d458      	bmi.n	8004274 <__sflush_r+0xc0>
 80041c2:	684b      	ldr	r3, [r1, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dc05      	bgt.n	80041d4 <__sflush_r+0x20>
 80041c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dc02      	bgt.n	80041d4 <__sflush_r+0x20>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	d0f9      	beq.n	80041ce <__sflush_r+0x1a>
 80041da:	2300      	movs	r3, #0
 80041dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041e0:	682f      	ldr	r7, [r5, #0]
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	d032      	beq.n	800424c <__sflush_r+0x98>
 80041e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	075a      	lsls	r2, r3, #29
 80041ec:	d505      	bpl.n	80041fa <__sflush_r+0x46>
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	1ac0      	subs	r0, r0, r3
 80041f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041f4:	b10b      	cbz	r3, 80041fa <__sflush_r+0x46>
 80041f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f8:	1ac0      	subs	r0, r0, r3
 80041fa:	2300      	movs	r3, #0
 80041fc:	4602      	mov	r2, r0
 80041fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004200:	6a21      	ldr	r1, [r4, #32]
 8004202:	4628      	mov	r0, r5
 8004204:	47b0      	blx	r6
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	d106      	bne.n	800421a <__sflush_r+0x66>
 800420c:	6829      	ldr	r1, [r5, #0]
 800420e:	291d      	cmp	r1, #29
 8004210:	d82c      	bhi.n	800426c <__sflush_r+0xb8>
 8004212:	4a2a      	ldr	r2, [pc, #168]	; (80042bc <__sflush_r+0x108>)
 8004214:	40ca      	lsrs	r2, r1
 8004216:	07d6      	lsls	r6, r2, #31
 8004218:	d528      	bpl.n	800426c <__sflush_r+0xb8>
 800421a:	2200      	movs	r2, #0
 800421c:	6062      	str	r2, [r4, #4]
 800421e:	04d9      	lsls	r1, r3, #19
 8004220:	6922      	ldr	r2, [r4, #16]
 8004222:	6022      	str	r2, [r4, #0]
 8004224:	d504      	bpl.n	8004230 <__sflush_r+0x7c>
 8004226:	1c42      	adds	r2, r0, #1
 8004228:	d101      	bne.n	800422e <__sflush_r+0x7a>
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	b903      	cbnz	r3, 8004230 <__sflush_r+0x7c>
 800422e:	6560      	str	r0, [r4, #84]	; 0x54
 8004230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004232:	602f      	str	r7, [r5, #0]
 8004234:	2900      	cmp	r1, #0
 8004236:	d0ca      	beq.n	80041ce <__sflush_r+0x1a>
 8004238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800423c:	4299      	cmp	r1, r3
 800423e:	d002      	beq.n	8004246 <__sflush_r+0x92>
 8004240:	4628      	mov	r0, r5
 8004242:	f7ff fd5b 	bl	8003cfc <_free_r>
 8004246:	2000      	movs	r0, #0
 8004248:	6360      	str	r0, [r4, #52]	; 0x34
 800424a:	e7c1      	b.n	80041d0 <__sflush_r+0x1c>
 800424c:	6a21      	ldr	r1, [r4, #32]
 800424e:	2301      	movs	r3, #1
 8004250:	4628      	mov	r0, r5
 8004252:	47b0      	blx	r6
 8004254:	1c41      	adds	r1, r0, #1
 8004256:	d1c7      	bne.n	80041e8 <__sflush_r+0x34>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0c4      	beq.n	80041e8 <__sflush_r+0x34>
 800425e:	2b1d      	cmp	r3, #29
 8004260:	d001      	beq.n	8004266 <__sflush_r+0xb2>
 8004262:	2b16      	cmp	r3, #22
 8004264:	d101      	bne.n	800426a <__sflush_r+0xb6>
 8004266:	602f      	str	r7, [r5, #0]
 8004268:	e7b1      	b.n	80041ce <__sflush_r+0x1a>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	e7ad      	b.n	80041d0 <__sflush_r+0x1c>
 8004274:	690f      	ldr	r7, [r1, #16]
 8004276:	2f00      	cmp	r7, #0
 8004278:	d0a9      	beq.n	80041ce <__sflush_r+0x1a>
 800427a:	0793      	lsls	r3, r2, #30
 800427c:	680e      	ldr	r6, [r1, #0]
 800427e:	bf08      	it	eq
 8004280:	694b      	ldreq	r3, [r1, #20]
 8004282:	600f      	str	r7, [r1, #0]
 8004284:	bf18      	it	ne
 8004286:	2300      	movne	r3, #0
 8004288:	eba6 0807 	sub.w	r8, r6, r7
 800428c:	608b      	str	r3, [r1, #8]
 800428e:	f1b8 0f00 	cmp.w	r8, #0
 8004292:	dd9c      	ble.n	80041ce <__sflush_r+0x1a>
 8004294:	6a21      	ldr	r1, [r4, #32]
 8004296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004298:	4643      	mov	r3, r8
 800429a:	463a      	mov	r2, r7
 800429c:	4628      	mov	r0, r5
 800429e:	47b0      	blx	r6
 80042a0:	2800      	cmp	r0, #0
 80042a2:	dc06      	bgt.n	80042b2 <__sflush_r+0xfe>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	e78e      	b.n	80041d0 <__sflush_r+0x1c>
 80042b2:	4407      	add	r7, r0
 80042b4:	eba8 0800 	sub.w	r8, r8, r0
 80042b8:	e7e9      	b.n	800428e <__sflush_r+0xda>
 80042ba:	bf00      	nop
 80042bc:	20400001 	.word	0x20400001

080042c0 <_fflush_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	690b      	ldr	r3, [r1, #16]
 80042c4:	4605      	mov	r5, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	b913      	cbnz	r3, 80042d0 <_fflush_r+0x10>
 80042ca:	2500      	movs	r5, #0
 80042cc:	4628      	mov	r0, r5
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	b118      	cbz	r0, 80042da <_fflush_r+0x1a>
 80042d2:	6983      	ldr	r3, [r0, #24]
 80042d4:	b90b      	cbnz	r3, 80042da <_fflush_r+0x1a>
 80042d6:	f000 f887 	bl	80043e8 <__sinit>
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <_fflush_r+0x6c>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	d11b      	bne.n	8004318 <_fflush_r+0x58>
 80042e0:	686c      	ldr	r4, [r5, #4]
 80042e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ef      	beq.n	80042ca <_fflush_r+0xa>
 80042ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042ec:	07d0      	lsls	r0, r2, #31
 80042ee:	d404      	bmi.n	80042fa <_fflush_r+0x3a>
 80042f0:	0599      	lsls	r1, r3, #22
 80042f2:	d402      	bmi.n	80042fa <_fflush_r+0x3a>
 80042f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f6:	f000 f93a 	bl	800456e <__retarget_lock_acquire_recursive>
 80042fa:	4628      	mov	r0, r5
 80042fc:	4621      	mov	r1, r4
 80042fe:	f7ff ff59 	bl	80041b4 <__sflush_r>
 8004302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004304:	07da      	lsls	r2, r3, #31
 8004306:	4605      	mov	r5, r0
 8004308:	d4e0      	bmi.n	80042cc <_fflush_r+0xc>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	059b      	lsls	r3, r3, #22
 800430e:	d4dd      	bmi.n	80042cc <_fflush_r+0xc>
 8004310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004312:	f000 f92d 	bl	8004570 <__retarget_lock_release_recursive>
 8004316:	e7d9      	b.n	80042cc <_fflush_r+0xc>
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <_fflush_r+0x70>)
 800431a:	429c      	cmp	r4, r3
 800431c:	d101      	bne.n	8004322 <_fflush_r+0x62>
 800431e:	68ac      	ldr	r4, [r5, #8]
 8004320:	e7df      	b.n	80042e2 <_fflush_r+0x22>
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <_fflush_r+0x74>)
 8004324:	429c      	cmp	r4, r3
 8004326:	bf08      	it	eq
 8004328:	68ec      	ldreq	r4, [r5, #12]
 800432a:	e7da      	b.n	80042e2 <_fflush_r+0x22>
 800432c:	08005294 	.word	0x08005294
 8004330:	080052b4 	.word	0x080052b4
 8004334:	08005274 	.word	0x08005274

08004338 <std>:
 8004338:	2300      	movs	r3, #0
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	e9c0 3300 	strd	r3, r3, [r0]
 8004342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004346:	6083      	str	r3, [r0, #8]
 8004348:	8181      	strh	r1, [r0, #12]
 800434a:	6643      	str	r3, [r0, #100]	; 0x64
 800434c:	81c2      	strh	r2, [r0, #14]
 800434e:	6183      	str	r3, [r0, #24]
 8004350:	4619      	mov	r1, r3
 8004352:	2208      	movs	r2, #8
 8004354:	305c      	adds	r0, #92	; 0x5c
 8004356:	f7ff fcc9 	bl	8003cec <memset>
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <std+0x38>)
 800435c:	6263      	str	r3, [r4, #36]	; 0x24
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x3c>)
 8004360:	62a3      	str	r3, [r4, #40]	; 0x28
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x40>)
 8004364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x44>)
 8004368:	6224      	str	r4, [r4, #32]
 800436a:	6323      	str	r3, [r4, #48]	; 0x30
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	08004cc1 	.word	0x08004cc1
 8004374:	08004ce3 	.word	0x08004ce3
 8004378:	08004d1b 	.word	0x08004d1b
 800437c:	08004d3f 	.word	0x08004d3f

08004380 <_cleanup_r>:
 8004380:	4901      	ldr	r1, [pc, #4]	; (8004388 <_cleanup_r+0x8>)
 8004382:	f000 b8c1 	b.w	8004508 <_fwalk_reent>
 8004386:	bf00      	nop
 8004388:	080042c1 	.word	0x080042c1

0800438c <__sfmoreglue>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	1e4a      	subs	r2, r1, #1
 8004390:	2568      	movs	r5, #104	; 0x68
 8004392:	4355      	muls	r5, r2
 8004394:	460e      	mov	r6, r1
 8004396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800439a:	f7ff fcff 	bl	8003d9c <_malloc_r>
 800439e:	4604      	mov	r4, r0
 80043a0:	b140      	cbz	r0, 80043b4 <__sfmoreglue+0x28>
 80043a2:	2100      	movs	r1, #0
 80043a4:	e9c0 1600 	strd	r1, r6, [r0]
 80043a8:	300c      	adds	r0, #12
 80043aa:	60a0      	str	r0, [r4, #8]
 80043ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043b0:	f7ff fc9c 	bl	8003cec <memset>
 80043b4:	4620      	mov	r0, r4
 80043b6:	bd70      	pop	{r4, r5, r6, pc}

080043b8 <__sfp_lock_acquire>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__sfp_lock_acquire+0x8>)
 80043ba:	f000 b8d8 	b.w	800456e <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	200001d4 	.word	0x200001d4

080043c4 <__sfp_lock_release>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__sfp_lock_release+0x8>)
 80043c6:	f000 b8d3 	b.w	8004570 <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	200001d4 	.word	0x200001d4

080043d0 <__sinit_lock_acquire>:
 80043d0:	4801      	ldr	r0, [pc, #4]	; (80043d8 <__sinit_lock_acquire+0x8>)
 80043d2:	f000 b8cc 	b.w	800456e <__retarget_lock_acquire_recursive>
 80043d6:	bf00      	nop
 80043d8:	200001cf 	.word	0x200001cf

080043dc <__sinit_lock_release>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__sinit_lock_release+0x8>)
 80043de:	f000 b8c7 	b.w	8004570 <__retarget_lock_release_recursive>
 80043e2:	bf00      	nop
 80043e4:	200001cf 	.word	0x200001cf

080043e8 <__sinit>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4604      	mov	r4, r0
 80043ec:	f7ff fff0 	bl	80043d0 <__sinit_lock_acquire>
 80043f0:	69a3      	ldr	r3, [r4, #24]
 80043f2:	b11b      	cbz	r3, 80043fc <__sinit+0x14>
 80043f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f8:	f7ff bff0 	b.w	80043dc <__sinit_lock_release>
 80043fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004400:	6523      	str	r3, [r4, #80]	; 0x50
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <__sinit+0x68>)
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <__sinit+0x6c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	62a2      	str	r2, [r4, #40]	; 0x28
 800440a:	42a3      	cmp	r3, r4
 800440c:	bf04      	itt	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	61a3      	streq	r3, [r4, #24]
 8004412:	4620      	mov	r0, r4
 8004414:	f000 f820 	bl	8004458 <__sfp>
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f81c 	bl	8004458 <__sfp>
 8004420:	60a0      	str	r0, [r4, #8]
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f818 	bl	8004458 <__sfp>
 8004428:	2200      	movs	r2, #0
 800442a:	60e0      	str	r0, [r4, #12]
 800442c:	2104      	movs	r1, #4
 800442e:	6860      	ldr	r0, [r4, #4]
 8004430:	f7ff ff82 	bl	8004338 <std>
 8004434:	68a0      	ldr	r0, [r4, #8]
 8004436:	2201      	movs	r2, #1
 8004438:	2109      	movs	r1, #9
 800443a:	f7ff ff7d 	bl	8004338 <std>
 800443e:	68e0      	ldr	r0, [r4, #12]
 8004440:	2202      	movs	r2, #2
 8004442:	2112      	movs	r1, #18
 8004444:	f7ff ff78 	bl	8004338 <std>
 8004448:	2301      	movs	r3, #1
 800444a:	61a3      	str	r3, [r4, #24]
 800444c:	e7d2      	b.n	80043f4 <__sinit+0xc>
 800444e:	bf00      	nop
 8004450:	080051bc 	.word	0x080051bc
 8004454:	08004381 	.word	0x08004381

08004458 <__sfp>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	4607      	mov	r7, r0
 800445c:	f7ff ffac 	bl	80043b8 <__sfp_lock_acquire>
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <__sfp+0x84>)
 8004462:	681e      	ldr	r6, [r3, #0]
 8004464:	69b3      	ldr	r3, [r6, #24]
 8004466:	b913      	cbnz	r3, 800446e <__sfp+0x16>
 8004468:	4630      	mov	r0, r6
 800446a:	f7ff ffbd 	bl	80043e8 <__sinit>
 800446e:	3648      	adds	r6, #72	; 0x48
 8004470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004474:	3b01      	subs	r3, #1
 8004476:	d503      	bpl.n	8004480 <__sfp+0x28>
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	b30b      	cbz	r3, 80044c0 <__sfp+0x68>
 800447c:	6836      	ldr	r6, [r6, #0]
 800447e:	e7f7      	b.n	8004470 <__sfp+0x18>
 8004480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004484:	b9d5      	cbnz	r5, 80044bc <__sfp+0x64>
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <__sfp+0x88>)
 8004488:	60e3      	str	r3, [r4, #12]
 800448a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800448e:	6665      	str	r5, [r4, #100]	; 0x64
 8004490:	f000 f86c 	bl	800456c <__retarget_lock_init_recursive>
 8004494:	f7ff ff96 	bl	80043c4 <__sfp_lock_release>
 8004498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800449c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044a0:	6025      	str	r5, [r4, #0]
 80044a2:	61a5      	str	r5, [r4, #24]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4629      	mov	r1, r5
 80044a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ac:	f7ff fc1e 	bl	8003cec <memset>
 80044b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044b8:	4620      	mov	r0, r4
 80044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044bc:	3468      	adds	r4, #104	; 0x68
 80044be:	e7d9      	b.n	8004474 <__sfp+0x1c>
 80044c0:	2104      	movs	r1, #4
 80044c2:	4638      	mov	r0, r7
 80044c4:	f7ff ff62 	bl	800438c <__sfmoreglue>
 80044c8:	4604      	mov	r4, r0
 80044ca:	6030      	str	r0, [r6, #0]
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d1d5      	bne.n	800447c <__sfp+0x24>
 80044d0:	f7ff ff78 	bl	80043c4 <__sfp_lock_release>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	e7ee      	b.n	80044b8 <__sfp+0x60>
 80044da:	bf00      	nop
 80044dc:	080051bc 	.word	0x080051bc
 80044e0:	ffff0001 	.word	0xffff0001

080044e4 <fiprintf>:
 80044e4:	b40e      	push	{r1, r2, r3}
 80044e6:	b503      	push	{r0, r1, lr}
 80044e8:	4601      	mov	r1, r0
 80044ea:	ab03      	add	r3, sp, #12
 80044ec:	4805      	ldr	r0, [pc, #20]	; (8004504 <fiprintf+0x20>)
 80044ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	f000 f8d7 	bl	80046a8 <_vfiprintf_r>
 80044fa:	b002      	add	sp, #8
 80044fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004500:	b003      	add	sp, #12
 8004502:	4770      	bx	lr
 8004504:	2000002c 	.word	0x2000002c

08004508 <_fwalk_reent>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	4606      	mov	r6, r0
 800450e:	4688      	mov	r8, r1
 8004510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004514:	2700      	movs	r7, #0
 8004516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800451a:	f1b9 0901 	subs.w	r9, r9, #1
 800451e:	d505      	bpl.n	800452c <_fwalk_reent+0x24>
 8004520:	6824      	ldr	r4, [r4, #0]
 8004522:	2c00      	cmp	r4, #0
 8004524:	d1f7      	bne.n	8004516 <_fwalk_reent+0xe>
 8004526:	4638      	mov	r0, r7
 8004528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452c:	89ab      	ldrh	r3, [r5, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d907      	bls.n	8004542 <_fwalk_reent+0x3a>
 8004532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004536:	3301      	adds	r3, #1
 8004538:	d003      	beq.n	8004542 <_fwalk_reent+0x3a>
 800453a:	4629      	mov	r1, r5
 800453c:	4630      	mov	r0, r6
 800453e:	47c0      	blx	r8
 8004540:	4307      	orrs	r7, r0
 8004542:	3568      	adds	r5, #104	; 0x68
 8004544:	e7e9      	b.n	800451a <_fwalk_reent+0x12>
	...

08004548 <_gettimeofday_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	; (8004568 <_gettimeofday_r+0x20>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	f000 fd59 	bl	800500c <_gettimeofday>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d102      	bne.n	8004564 <_gettimeofday_r+0x1c>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	b103      	cbz	r3, 8004564 <_gettimeofday_r+0x1c>
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	bd38      	pop	{r3, r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	200001d8 	.word	0x200001d8

0800456c <__retarget_lock_init_recursive>:
 800456c:	4770      	bx	lr

0800456e <__retarget_lock_acquire_recursive>:
 800456e:	4770      	bx	lr

08004570 <__retarget_lock_release_recursive>:
 8004570:	4770      	bx	lr

08004572 <__swhatbuf_r>:
 8004572:	b570      	push	{r4, r5, r6, lr}
 8004574:	460e      	mov	r6, r1
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	2900      	cmp	r1, #0
 800457c:	b096      	sub	sp, #88	; 0x58
 800457e:	4614      	mov	r4, r2
 8004580:	461d      	mov	r5, r3
 8004582:	da07      	bge.n	8004594 <__swhatbuf_r+0x22>
 8004584:	2300      	movs	r3, #0
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	89b3      	ldrh	r3, [r6, #12]
 800458a:	061a      	lsls	r2, r3, #24
 800458c:	d410      	bmi.n	80045b0 <__swhatbuf_r+0x3e>
 800458e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004592:	e00e      	b.n	80045b2 <__swhatbuf_r+0x40>
 8004594:	466a      	mov	r2, sp
 8004596:	f000 fcaf 	bl	8004ef8 <_fstat_r>
 800459a:	2800      	cmp	r0, #0
 800459c:	dbf2      	blt.n	8004584 <__swhatbuf_r+0x12>
 800459e:	9a01      	ldr	r2, [sp, #4]
 80045a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045a8:	425a      	negs	r2, r3
 80045aa:	415a      	adcs	r2, r3
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	e7ee      	b.n	800458e <__swhatbuf_r+0x1c>
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	2000      	movs	r0, #0
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	b016      	add	sp, #88	; 0x58
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080045bc <__smakebuf_r>:
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045c0:	079d      	lsls	r5, r3, #30
 80045c2:	4606      	mov	r6, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	d507      	bpl.n	80045d8 <__smakebuf_r+0x1c>
 80045c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	2301      	movs	r3, #1
 80045d2:	6163      	str	r3, [r4, #20]
 80045d4:	b002      	add	sp, #8
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	ab01      	add	r3, sp, #4
 80045da:	466a      	mov	r2, sp
 80045dc:	f7ff ffc9 	bl	8004572 <__swhatbuf_r>
 80045e0:	9900      	ldr	r1, [sp, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff fbd9 	bl	8003d9c <_malloc_r>
 80045ea:	b948      	cbnz	r0, 8004600 <__smakebuf_r+0x44>
 80045ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f0:	059a      	lsls	r2, r3, #22
 80045f2:	d4ef      	bmi.n	80045d4 <__smakebuf_r+0x18>
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e7e3      	b.n	80045c8 <__smakebuf_r+0xc>
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <__smakebuf_r+0x7c>)
 8004602:	62b3      	str	r3, [r6, #40]	; 0x28
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	6020      	str	r0, [r4, #0]
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	9b00      	ldr	r3, [sp, #0]
 8004610:	6163      	str	r3, [r4, #20]
 8004612:	9b01      	ldr	r3, [sp, #4]
 8004614:	6120      	str	r0, [r4, #16]
 8004616:	b15b      	cbz	r3, 8004630 <__smakebuf_r+0x74>
 8004618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800461c:	4630      	mov	r0, r6
 800461e:	f000 fc7d 	bl	8004f1c <_isatty_r>
 8004622:	b128      	cbz	r0, 8004630 <__smakebuf_r+0x74>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	89a0      	ldrh	r0, [r4, #12]
 8004632:	4305      	orrs	r5, r0
 8004634:	81a5      	strh	r5, [r4, #12]
 8004636:	e7cd      	b.n	80045d4 <__smakebuf_r+0x18>
 8004638:	08004381 	.word	0x08004381

0800463c <__malloc_lock>:
 800463c:	4801      	ldr	r0, [pc, #4]	; (8004644 <__malloc_lock+0x8>)
 800463e:	f7ff bf96 	b.w	800456e <__retarget_lock_acquire_recursive>
 8004642:	bf00      	nop
 8004644:	200001d0 	.word	0x200001d0

08004648 <__malloc_unlock>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__malloc_unlock+0x8>)
 800464a:	f7ff bf91 	b.w	8004570 <__retarget_lock_release_recursive>
 800464e:	bf00      	nop
 8004650:	200001d0 	.word	0x200001d0

08004654 <__sfputc_r>:
 8004654:	6893      	ldr	r3, [r2, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	b410      	push	{r4}
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	da08      	bge.n	8004672 <__sfputc_r+0x1e>
 8004660:	6994      	ldr	r4, [r2, #24]
 8004662:	42a3      	cmp	r3, r4
 8004664:	db01      	blt.n	800466a <__sfputc_r+0x16>
 8004666:	290a      	cmp	r1, #10
 8004668:	d103      	bne.n	8004672 <__sfputc_r+0x1e>
 800466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466e:	f000 bb6b 	b.w	8004d48 <__swbuf_r>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	1c58      	adds	r0, r3, #1
 8004676:	6010      	str	r0, [r2, #0]
 8004678:	7019      	strb	r1, [r3, #0]
 800467a:	4608      	mov	r0, r1
 800467c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004680:	4770      	bx	lr

08004682 <__sfputs_r>:
 8004682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004684:	4606      	mov	r6, r0
 8004686:	460f      	mov	r7, r1
 8004688:	4614      	mov	r4, r2
 800468a:	18d5      	adds	r5, r2, r3
 800468c:	42ac      	cmp	r4, r5
 800468e:	d101      	bne.n	8004694 <__sfputs_r+0x12>
 8004690:	2000      	movs	r0, #0
 8004692:	e007      	b.n	80046a4 <__sfputs_r+0x22>
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	463a      	mov	r2, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffda 	bl	8004654 <__sfputc_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d1f3      	bne.n	800468c <__sfputs_r+0xa>
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a8 <_vfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	460d      	mov	r5, r1
 80046ae:	b09d      	sub	sp, #116	; 0x74
 80046b0:	4614      	mov	r4, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	4606      	mov	r6, r0
 80046b6:	b118      	cbz	r0, 80046c0 <_vfiprintf_r+0x18>
 80046b8:	6983      	ldr	r3, [r0, #24]
 80046ba:	b90b      	cbnz	r3, 80046c0 <_vfiprintf_r+0x18>
 80046bc:	f7ff fe94 	bl	80043e8 <__sinit>
 80046c0:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <_vfiprintf_r+0x240>)
 80046c2:	429d      	cmp	r5, r3
 80046c4:	d11b      	bne.n	80046fe <_vfiprintf_r+0x56>
 80046c6:	6875      	ldr	r5, [r6, #4]
 80046c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ca:	07d9      	lsls	r1, r3, #31
 80046cc:	d405      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	059a      	lsls	r2, r3, #22
 80046d2:	d402      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d6:	f7ff ff4a 	bl	800456e <__retarget_lock_acquire_recursive>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	d501      	bpl.n	80046e4 <_vfiprintf_r+0x3c>
 80046e0:	692b      	ldr	r3, [r5, #16]
 80046e2:	b9eb      	cbnz	r3, 8004720 <_vfiprintf_r+0x78>
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 fb80 	bl	8004dec <__swsetup_r>
 80046ec:	b1c0      	cbz	r0, 8004720 <_vfiprintf_r+0x78>
 80046ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046f0:	07dc      	lsls	r4, r3, #31
 80046f2:	d50e      	bpl.n	8004712 <_vfiprintf_r+0x6a>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	b01d      	add	sp, #116	; 0x74
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fe:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <_vfiprintf_r+0x244>)
 8004700:	429d      	cmp	r5, r3
 8004702:	d101      	bne.n	8004708 <_vfiprintf_r+0x60>
 8004704:	68b5      	ldr	r5, [r6, #8]
 8004706:	e7df      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004708:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <_vfiprintf_r+0x248>)
 800470a:	429d      	cmp	r5, r3
 800470c:	bf08      	it	eq
 800470e:	68f5      	ldreq	r5, [r6, #12]
 8004710:	e7da      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	0598      	lsls	r0, r3, #22
 8004716:	d4ed      	bmi.n	80046f4 <_vfiprintf_r+0x4c>
 8004718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471a:	f7ff ff29 	bl	8004570 <__retarget_lock_release_recursive>
 800471e:	e7e9      	b.n	80046f4 <_vfiprintf_r+0x4c>
 8004720:	2300      	movs	r3, #0
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	2320      	movs	r3, #32
 8004726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800472a:	f8cd 800c 	str.w	r8, [sp, #12]
 800472e:	2330      	movs	r3, #48	; 0x30
 8004730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048f4 <_vfiprintf_r+0x24c>
 8004734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004738:	f04f 0901 	mov.w	r9, #1
 800473c:	4623      	mov	r3, r4
 800473e:	469a      	mov	sl, r3
 8004740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004744:	b10a      	cbz	r2, 800474a <_vfiprintf_r+0xa2>
 8004746:	2a25      	cmp	r2, #37	; 0x25
 8004748:	d1f9      	bne.n	800473e <_vfiprintf_r+0x96>
 800474a:	ebba 0b04 	subs.w	fp, sl, r4
 800474e:	d00b      	beq.n	8004768 <_vfiprintf_r+0xc0>
 8004750:	465b      	mov	r3, fp
 8004752:	4622      	mov	r2, r4
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff ff93 	bl	8004682 <__sfputs_r>
 800475c:	3001      	adds	r0, #1
 800475e:	f000 80aa 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004764:	445a      	add	r2, fp
 8004766:	9209      	str	r2, [sp, #36]	; 0x24
 8004768:	f89a 3000 	ldrb.w	r3, [sl]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a2 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004772:	2300      	movs	r3, #0
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800477c:	f10a 0a01 	add.w	sl, sl, #1
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	9307      	str	r3, [sp, #28]
 8004784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004788:	931a      	str	r3, [sp, #104]	; 0x68
 800478a:	4654      	mov	r4, sl
 800478c:	2205      	movs	r2, #5
 800478e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004792:	4858      	ldr	r0, [pc, #352]	; (80048f4 <_vfiprintf_r+0x24c>)
 8004794:	f7fb fd24 	bl	80001e0 <memchr>
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	b9d8      	cbnz	r0, 80047d4 <_vfiprintf_r+0x12c>
 800479c:	06d1      	lsls	r1, r2, #27
 800479e:	bf44      	itt	mi
 80047a0:	2320      	movmi	r3, #32
 80047a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a6:	0713      	lsls	r3, r2, #28
 80047a8:	bf44      	itt	mi
 80047aa:	232b      	movmi	r3, #43	; 0x2b
 80047ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b0:	f89a 3000 	ldrb.w	r3, [sl]
 80047b4:	2b2a      	cmp	r3, #42	; 0x2a
 80047b6:	d015      	beq.n	80047e4 <_vfiprintf_r+0x13c>
 80047b8:	9a07      	ldr	r2, [sp, #28]
 80047ba:	4654      	mov	r4, sl
 80047bc:	2000      	movs	r0, #0
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c8:	3b30      	subs	r3, #48	; 0x30
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d94e      	bls.n	800486c <_vfiprintf_r+0x1c4>
 80047ce:	b1b0      	cbz	r0, 80047fe <_vfiprintf_r+0x156>
 80047d0:	9207      	str	r2, [sp, #28]
 80047d2:	e014      	b.n	80047fe <_vfiprintf_r+0x156>
 80047d4:	eba0 0308 	sub.w	r3, r0, r8
 80047d8:	fa09 f303 	lsl.w	r3, r9, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	46a2      	mov	sl, r4
 80047e2:	e7d2      	b.n	800478a <_vfiprintf_r+0xe2>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	1d19      	adds	r1, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	9103      	str	r1, [sp, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bfbb      	ittet	lt
 80047f0:	425b      	neglt	r3, r3
 80047f2:	f042 0202 	orrlt.w	r2, r2, #2
 80047f6:	9307      	strge	r3, [sp, #28]
 80047f8:	9307      	strlt	r3, [sp, #28]
 80047fa:	bfb8      	it	lt
 80047fc:	9204      	strlt	r2, [sp, #16]
 80047fe:	7823      	ldrb	r3, [r4, #0]
 8004800:	2b2e      	cmp	r3, #46	; 0x2e
 8004802:	d10c      	bne.n	800481e <_vfiprintf_r+0x176>
 8004804:	7863      	ldrb	r3, [r4, #1]
 8004806:	2b2a      	cmp	r3, #42	; 0x2a
 8004808:	d135      	bne.n	8004876 <_vfiprintf_r+0x1ce>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9203      	str	r2, [sp, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfb8      	it	lt
 8004816:	f04f 33ff 	movlt.w	r3, #4294967295
 800481a:	3402      	adds	r4, #2
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004904 <_vfiprintf_r+0x25c>
 8004822:	7821      	ldrb	r1, [r4, #0]
 8004824:	2203      	movs	r2, #3
 8004826:	4650      	mov	r0, sl
 8004828:	f7fb fcda 	bl	80001e0 <memchr>
 800482c:	b140      	cbz	r0, 8004840 <_vfiprintf_r+0x198>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	eba0 000a 	sub.w	r0, r0, sl
 8004834:	fa03 f000 	lsl.w	r0, r3, r0
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	4303      	orrs	r3, r0
 800483c:	3401      	adds	r4, #1
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004844:	482c      	ldr	r0, [pc, #176]	; (80048f8 <_vfiprintf_r+0x250>)
 8004846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800484a:	2206      	movs	r2, #6
 800484c:	f7fb fcc8 	bl	80001e0 <memchr>
 8004850:	2800      	cmp	r0, #0
 8004852:	d03f      	beq.n	80048d4 <_vfiprintf_r+0x22c>
 8004854:	4b29      	ldr	r3, [pc, #164]	; (80048fc <_vfiprintf_r+0x254>)
 8004856:	bb1b      	cbnz	r3, 80048a0 <_vfiprintf_r+0x1f8>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	3307      	adds	r3, #7
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004866:	443b      	add	r3, r7
 8004868:	9309      	str	r3, [sp, #36]	; 0x24
 800486a:	e767      	b.n	800473c <_vfiprintf_r+0x94>
 800486c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004870:	460c      	mov	r4, r1
 8004872:	2001      	movs	r0, #1
 8004874:	e7a5      	b.n	80047c2 <_vfiprintf_r+0x11a>
 8004876:	2300      	movs	r3, #0
 8004878:	3401      	adds	r4, #1
 800487a:	9305      	str	r3, [sp, #20]
 800487c:	4619      	mov	r1, r3
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4620      	mov	r0, r4
 8004884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004888:	3a30      	subs	r2, #48	; 0x30
 800488a:	2a09      	cmp	r2, #9
 800488c:	d903      	bls.n	8004896 <_vfiprintf_r+0x1ee>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0c5      	beq.n	800481e <_vfiprintf_r+0x176>
 8004892:	9105      	str	r1, [sp, #20]
 8004894:	e7c3      	b.n	800481e <_vfiprintf_r+0x176>
 8004896:	fb0c 2101 	mla	r1, ip, r1, r2
 800489a:	4604      	mov	r4, r0
 800489c:	2301      	movs	r3, #1
 800489e:	e7f0      	b.n	8004882 <_vfiprintf_r+0x1da>
 80048a0:	ab03      	add	r3, sp, #12
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	462a      	mov	r2, r5
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <_vfiprintf_r+0x258>)
 80048a8:	a904      	add	r1, sp, #16
 80048aa:	4630      	mov	r0, r6
 80048ac:	f3af 8000 	nop.w
 80048b0:	4607      	mov	r7, r0
 80048b2:	1c78      	adds	r0, r7, #1
 80048b4:	d1d6      	bne.n	8004864 <_vfiprintf_r+0x1bc>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b8:	07d9      	lsls	r1, r3, #31
 80048ba:	d405      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	059a      	lsls	r2, r3, #22
 80048c0:	d402      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048c4:	f7ff fe54 	bl	8004570 <__retarget_lock_release_recursive>
 80048c8:	89ab      	ldrh	r3, [r5, #12]
 80048ca:	065b      	lsls	r3, r3, #25
 80048cc:	f53f af12 	bmi.w	80046f4 <_vfiprintf_r+0x4c>
 80048d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048d2:	e711      	b.n	80046f8 <_vfiprintf_r+0x50>
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	462a      	mov	r2, r5
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <_vfiprintf_r+0x258>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4630      	mov	r0, r6
 80048e0:	f000 f880 	bl	80049e4 <_printf_i>
 80048e4:	e7e4      	b.n	80048b0 <_vfiprintf_r+0x208>
 80048e6:	bf00      	nop
 80048e8:	08005294 	.word	0x08005294
 80048ec:	080052b4 	.word	0x080052b4
 80048f0:	08005274 	.word	0x08005274
 80048f4:	080052d4 	.word	0x080052d4
 80048f8:	080052de 	.word	0x080052de
 80048fc:	00000000 	.word	0x00000000
 8004900:	08004683 	.word	0x08004683
 8004904:	080052da 	.word	0x080052da

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68e5      	ldr	r5, [r4, #12]
 8004972:	6832      	ldr	r2, [r6, #0]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf08      	it	eq
 800497c:	1aad      	subeq	r5, r5, r2
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	; 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	460c      	mov	r4, r1
 80049ea:	4691      	mov	r9, r2
 80049ec:	7e27      	ldrb	r7, [r4, #24]
 80049ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049f0:	2f78      	cmp	r7, #120	; 0x78
 80049f2:	4680      	mov	r8, r0
 80049f4:	469a      	mov	sl, r3
 80049f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d8 	beq.w	8004bb6 <_printf_i+0x1d2>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a3 	beq.w	8004b52 <_printf_i+0x16e>
 8004a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a001      	add	r0, pc, #4	; (adr r0, 8004a24 <_printf_i+0x40>)
 8004a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9d 	.word	0x08004b9d
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b7f 	.word	0x08004b7f
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bbf 	.word	0x08004bbf
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b87 	.word	0x08004b87
 8004a7c:	680b      	ldr	r3, [r1, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	600a      	str	r2, [r1, #0]
 8004a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a3      	b.n	8004bd8 <_printf_i+0x1f4>
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	6808      	ldr	r0, [r1, #0]
 8004a94:	062e      	lsls	r6, r5, #24
 8004a96:	f100 0304 	add.w	r3, r0, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	6805      	ldr	r5, [r0, #0]
 8004a9e:	600b      	str	r3, [r1, #0]
 8004aa0:	2d00      	cmp	r5, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	426d      	negs	r5, r5
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ab6:	6805      	ldr	r5, [r0, #0]
 8004ab8:	600b      	str	r3, [r1, #0]
 8004aba:	bf18      	it	ne
 8004abc:	b22d      	sxthne	r5, r5
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	680b      	ldr	r3, [r1, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	1d18      	adds	r0, r3, #4
 8004ac6:	6008      	str	r0, [r1, #0]
 8004ac8:	0628      	lsls	r0, r5, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681d      	ldr	r5, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0669      	lsls	r1, r5, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881d      	ldrh	r5, [r3, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_printf_i+0x244>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6866      	ldr	r6, [r4, #4]
 8004ae8:	60a6      	str	r6, [r4, #8]
 8004aea:	2e00      	cmp	r6, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90d      	cbnz	r5, 8004afc <_printf_i+0x118>
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d04d      	beq.n	8004b98 <_printf_i+0x1b4>
 8004afc:	4616      	mov	r6, r2
 8004afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b02:	fb03 5711 	mls	r7, r3, r1, r5
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b0c:	462f      	mov	r7, r5
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460d      	mov	r5, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x11a>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x14c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07df      	lsls	r7, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b30:	1b92      	subs	r2, r2, r6
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee2 	bl	8004908 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14c      	bne.n	8004be2 <_printf_i+0x1fe>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <_printf_i+0x244>)
 8004b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	680e      	ldr	r6, [r1, #0]
 8004b5c:	061f      	lsls	r7, r3, #24
 8004b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b62:	600e      	str	r6, [r1, #0]
 8004b64:	d514      	bpl.n	8004b90 <_printf_i+0x1ac>
 8004b66:	07d9      	lsls	r1, r3, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6e:	6023      	strmi	r3, [r4, #0]
 8004b70:	b91d      	cbnz	r5, 8004b7a <_printf_i+0x196>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7b0      	b.n	8004ae0 <_printf_i+0xfc>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8e:	e7e3      	b.n	8004b58 <_printf_i+0x174>
 8004b90:	065e      	lsls	r6, r3, #25
 8004b92:	bf48      	it	mi
 8004b94:	b2ad      	uxthmi	r5, r5
 8004b96:	e7e6      	b.n	8004b66 <_printf_i+0x182>
 8004b98:	4616      	mov	r6, r2
 8004b9a:	e7bb      	b.n	8004b14 <_printf_i+0x130>
 8004b9c:	680b      	ldr	r3, [r1, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6960      	ldr	r0, [r4, #20]
 8004ba2:	1d1d      	adds	r5, r3, #4
 8004ba4:	600d      	str	r5, [r1, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1cc>
 8004bac:	6018      	str	r0, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1d2>
 8004bb0:	0671      	lsls	r1, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c8>
 8004bb4:	8018      	strh	r0, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4616      	mov	r6, r2
 8004bbc:	e7ba      	b.n	8004b34 <_printf_i+0x150>
 8004bbe:	680b      	ldr	r3, [r1, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	600a      	str	r2, [r1, #0]
 8004bc4:	681e      	ldr	r6, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7fb fb08 	bl	80001e0 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1f2>
 8004bd2:	1b80      	subs	r0, r0, r6
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7a8      	b.n	8004b34 <_printf_i+0x150>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	4632      	mov	r2, r6
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ab      	beq.n	8004b48 <_printf_i+0x164>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x23a>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a4      	b.n	8004b4c <_printf_i+0x168>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09b      	beq.n	8004b48 <_printf_i+0x164>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x21e>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x212>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x22e>
 8004c26:	bf00      	nop
 8004c28:	080052e5 	.word	0x080052e5
 8004c2c:	080052f6 	.word	0x080052f6

08004c30 <_putc_r>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	460d      	mov	r5, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	4606      	mov	r6, r0
 8004c38:	b118      	cbz	r0, 8004c42 <_putc_r+0x12>
 8004c3a:	6983      	ldr	r3, [r0, #24]
 8004c3c:	b90b      	cbnz	r3, 8004c42 <_putc_r+0x12>
 8004c3e:	f7ff fbd3 	bl	80043e8 <__sinit>
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <_putc_r+0x84>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d124      	bne.n	8004c92 <_putc_r+0x62>
 8004c48:	6874      	ldr	r4, [r6, #4]
 8004c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c4c:	07d8      	lsls	r0, r3, #31
 8004c4e:	d405      	bmi.n	8004c5c <_putc_r+0x2c>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	0599      	lsls	r1, r3, #22
 8004c54:	d402      	bmi.n	8004c5c <_putc_r+0x2c>
 8004c56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c58:	f7ff fc89 	bl	800456e <__retarget_lock_acquire_recursive>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	da05      	bge.n	8004c72 <_putc_r+0x42>
 8004c66:	69a2      	ldr	r2, [r4, #24]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	db1c      	blt.n	8004ca6 <_putc_r+0x76>
 8004c6c:	b2eb      	uxtb	r3, r5
 8004c6e:	2b0a      	cmp	r3, #10
 8004c70:	d019      	beq.n	8004ca6 <_putc_r+0x76>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	701d      	strb	r5, [r3, #0]
 8004c7a:	b2ed      	uxtb	r5, r5
 8004c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d405      	bmi.n	8004c8e <_putc_r+0x5e>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	059b      	lsls	r3, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_putc_r+0x5e>
 8004c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8a:	f7ff fc71 	bl	8004570 <__retarget_lock_release_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <_putc_r+0x88>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d101      	bne.n	8004c9c <_putc_r+0x6c>
 8004c98:	68b4      	ldr	r4, [r6, #8]
 8004c9a:	e7d6      	b.n	8004c4a <_putc_r+0x1a>
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <_putc_r+0x8c>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	bf08      	it	eq
 8004ca2:	68f4      	ldreq	r4, [r6, #12]
 8004ca4:	e7d1      	b.n	8004c4a <_putc_r+0x1a>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4630      	mov	r0, r6
 8004cac:	f000 f84c 	bl	8004d48 <__swbuf_r>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	e7e3      	b.n	8004c7c <_putc_r+0x4c>
 8004cb4:	08005294 	.word	0x08005294
 8004cb8:	080052b4 	.word	0x080052b4
 8004cbc:	08005274 	.word	0x08005274

08004cc0 <__sread>:
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	f000 f94a 	bl	8004f60 <_read_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	bfab      	itete	ge
 8004cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cd4:	181b      	addge	r3, r3, r0
 8004cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cda:	bfac      	ite	ge
 8004cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cde:	81a3      	strhlt	r3, [r4, #12]
 8004ce0:	bd10      	pop	{r4, pc}

08004ce2 <__swrite>:
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	898b      	ldrh	r3, [r1, #12]
 8004cea:	05db      	lsls	r3, r3, #23
 8004cec:	4605      	mov	r5, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	d505      	bpl.n	8004d00 <__swrite+0x1e>
 8004cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f000 f91e 	bl	8004f3c <_lseek_r>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	f7fb bf5f 	b.w	8000bd8 <_write_r>

08004d1a <__sseek>:
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d22:	f000 f90b 	bl	8004f3c <_lseek_r>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	bf15      	itete	ne
 8004d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d36:	81a3      	strheq	r3, [r4, #12]
 8004d38:	bf18      	it	ne
 8004d3a:	81a3      	strhne	r3, [r4, #12]
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <__sclose>:
 8004d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d42:	f000 b8c9 	b.w	8004ed8 <_close_r>
	...

08004d48 <__swbuf_r>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	460e      	mov	r6, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	4605      	mov	r5, r0
 8004d50:	b118      	cbz	r0, 8004d5a <__swbuf_r+0x12>
 8004d52:	6983      	ldr	r3, [r0, #24]
 8004d54:	b90b      	cbnz	r3, 8004d5a <__swbuf_r+0x12>
 8004d56:	f7ff fb47 	bl	80043e8 <__sinit>
 8004d5a:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <__swbuf_r+0x98>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d12b      	bne.n	8004db8 <__swbuf_r+0x70>
 8004d60:	686c      	ldr	r4, [r5, #4]
 8004d62:	69a3      	ldr	r3, [r4, #24]
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	071a      	lsls	r2, r3, #28
 8004d6a:	d52f      	bpl.n	8004dcc <__swbuf_r+0x84>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	b36b      	cbz	r3, 8004dcc <__swbuf_r+0x84>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	6820      	ldr	r0, [r4, #0]
 8004d74:	1ac0      	subs	r0, r0, r3
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	b2f6      	uxtb	r6, r6
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	dc04      	bgt.n	8004d8a <__swbuf_r+0x42>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f7ff fa9c 	bl	80042c0 <_fflush_r>
 8004d88:	bb30      	cbnz	r0, 8004dd8 <__swbuf_r+0x90>
 8004d8a:	68a3      	ldr	r3, [r4, #8]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	60a3      	str	r3, [r4, #8]
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	6022      	str	r2, [r4, #0]
 8004d96:	701e      	strb	r6, [r3, #0]
 8004d98:	6963      	ldr	r3, [r4, #20]
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	d004      	beq.n	8004daa <__swbuf_r+0x62>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	07db      	lsls	r3, r3, #31
 8004da4:	d506      	bpl.n	8004db4 <__swbuf_r+0x6c>
 8004da6:	2e0a      	cmp	r6, #10
 8004da8:	d104      	bne.n	8004db4 <__swbuf_r+0x6c>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff fa87 	bl	80042c0 <_fflush_r>
 8004db2:	b988      	cbnz	r0, 8004dd8 <__swbuf_r+0x90>
 8004db4:	4638      	mov	r0, r7
 8004db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <__swbuf_r+0x9c>)
 8004dba:	429c      	cmp	r4, r3
 8004dbc:	d101      	bne.n	8004dc2 <__swbuf_r+0x7a>
 8004dbe:	68ac      	ldr	r4, [r5, #8]
 8004dc0:	e7cf      	b.n	8004d62 <__swbuf_r+0x1a>
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <__swbuf_r+0xa0>)
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	bf08      	it	eq
 8004dc8:	68ec      	ldreq	r4, [r5, #12]
 8004dca:	e7ca      	b.n	8004d62 <__swbuf_r+0x1a>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f80c 	bl	8004dec <__swsetup_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0cb      	beq.n	8004d70 <__swbuf_r+0x28>
 8004dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8004ddc:	e7ea      	b.n	8004db4 <__swbuf_r+0x6c>
 8004dde:	bf00      	nop
 8004de0:	08005294 	.word	0x08005294
 8004de4:	080052b4 	.word	0x080052b4
 8004de8:	08005274 	.word	0x08005274

08004dec <__swsetup_r>:
 8004dec:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <__swsetup_r+0xcc>)
 8004dee:	b570      	push	{r4, r5, r6, lr}
 8004df0:	681d      	ldr	r5, [r3, #0]
 8004df2:	4606      	mov	r6, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	b125      	cbz	r5, 8004e02 <__swsetup_r+0x16>
 8004df8:	69ab      	ldr	r3, [r5, #24]
 8004dfa:	b913      	cbnz	r3, 8004e02 <__swsetup_r+0x16>
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f7ff faf3 	bl	80043e8 <__sinit>
 8004e02:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <__swsetup_r+0xd0>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d10f      	bne.n	8004e28 <__swsetup_r+0x3c>
 8004e08:	686c      	ldr	r4, [r5, #4]
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e10:	0719      	lsls	r1, r3, #28
 8004e12:	d42c      	bmi.n	8004e6e <__swsetup_r+0x82>
 8004e14:	06dd      	lsls	r5, r3, #27
 8004e16:	d411      	bmi.n	8004e3c <__swsetup_r+0x50>
 8004e18:	2309      	movs	r3, #9
 8004e1a:	6033      	str	r3, [r6, #0]
 8004e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	f04f 30ff 	mov.w	r0, #4294967295
 8004e26:	e03e      	b.n	8004ea6 <__swsetup_r+0xba>
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <__swsetup_r+0xd4>)
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d101      	bne.n	8004e32 <__swsetup_r+0x46>
 8004e2e:	68ac      	ldr	r4, [r5, #8]
 8004e30:	e7eb      	b.n	8004e0a <__swsetup_r+0x1e>
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <__swsetup_r+0xd8>)
 8004e34:	429c      	cmp	r4, r3
 8004e36:	bf08      	it	eq
 8004e38:	68ec      	ldreq	r4, [r5, #12]
 8004e3a:	e7e6      	b.n	8004e0a <__swsetup_r+0x1e>
 8004e3c:	0758      	lsls	r0, r3, #29
 8004e3e:	d512      	bpl.n	8004e66 <__swsetup_r+0x7a>
 8004e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e42:	b141      	cbz	r1, 8004e56 <__swsetup_r+0x6a>
 8004e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	d002      	beq.n	8004e52 <__swsetup_r+0x66>
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7fe ff55 	bl	8003cfc <_free_r>
 8004e52:	2300      	movs	r3, #0
 8004e54:	6363      	str	r3, [r4, #52]	; 0x34
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f043 0308 	orr.w	r3, r3, #8
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	b94b      	cbnz	r3, 8004e86 <__swsetup_r+0x9a>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d003      	beq.n	8004e86 <__swsetup_r+0x9a>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff fb9b 	bl	80045bc <__smakebuf_r>
 8004e86:	89a0      	ldrh	r0, [r4, #12]
 8004e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e8c:	f010 0301 	ands.w	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <__swsetup_r+0xbc>
 8004e92:	2300      	movs	r3, #0
 8004e94:	60a3      	str	r3, [r4, #8]
 8004e96:	6963      	ldr	r3, [r4, #20]
 8004e98:	425b      	negs	r3, r3
 8004e9a:	61a3      	str	r3, [r4, #24]
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	b943      	cbnz	r3, 8004eb2 <__swsetup_r+0xc6>
 8004ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ea4:	d1ba      	bne.n	8004e1c <__swsetup_r+0x30>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	0781      	lsls	r1, r0, #30
 8004eaa:	bf58      	it	pl
 8004eac:	6963      	ldrpl	r3, [r4, #20]
 8004eae:	60a3      	str	r3, [r4, #8]
 8004eb0:	e7f4      	b.n	8004e9c <__swsetup_r+0xb0>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e7f7      	b.n	8004ea6 <__swsetup_r+0xba>
 8004eb6:	bf00      	nop
 8004eb8:	2000002c 	.word	0x2000002c
 8004ebc:	08005294 	.word	0x08005294
 8004ec0:	080052b4 	.word	0x080052b4
 8004ec4:	08005274 	.word	0x08005274

08004ec8 <abort>:
 8004ec8:	b508      	push	{r3, lr}
 8004eca:	2006      	movs	r0, #6
 8004ecc:	f000 f882 	bl	8004fd4 <raise>
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f7fe fd8b 	bl	80039ec <_exit>
	...

08004ed8 <_close_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	; (8004ef4 <_close_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fe fda9 	bl	8003a3a <_close>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_close_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_close_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200001d8 	.word	0x200001d8

08004ef8 <_fstat_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_fstat_r+0x20>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	f7fe fda4 	bl	8003a52 <_fstat>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d102      	bne.n	8004f14 <_fstat_r+0x1c>
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	b103      	cbz	r3, 8004f14 <_fstat_r+0x1c>
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	bf00      	nop
 8004f18:	200001d8 	.word	0x200001d8

08004f1c <_isatty_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	; (8004f38 <_isatty_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fe fda3 	bl	8003a72 <_isatty>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_isatty_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_isatty_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	200001d8 	.word	0x200001d8

08004f3c <_lseek_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	; (8004f5c <_lseek_r+0x20>)
 8004f40:	4604      	mov	r4, r0
 8004f42:	4608      	mov	r0, r1
 8004f44:	4611      	mov	r1, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fe fd9c 	bl	8003a88 <_lseek>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_lseek_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_lseek_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	200001d8 	.word	0x200001d8

08004f60 <_read_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <_read_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fe fd46 	bl	8003a00 <_read>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_read_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_read_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	200001d8 	.word	0x200001d8

08004f84 <_raise_r>:
 8004f84:	291f      	cmp	r1, #31
 8004f86:	b538      	push	{r3, r4, r5, lr}
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	d904      	bls.n	8004f98 <_raise_r+0x14>
 8004f8e:	2316      	movs	r3, #22
 8004f90:	6003      	str	r3, [r0, #0]
 8004f92:	f04f 30ff 	mov.w	r0, #4294967295
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f9a:	b112      	cbz	r2, 8004fa2 <_raise_r+0x1e>
 8004f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fa0:	b94b      	cbnz	r3, 8004fb6 <_raise_r+0x32>
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f830 	bl	8005008 <_getpid_r>
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4601      	mov	r1, r0
 8004fac:	4620      	mov	r0, r4
 8004fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fb2:	f000 b817 	b.w	8004fe4 <_kill_r>
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d00a      	beq.n	8004fd0 <_raise_r+0x4c>
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	d103      	bne.n	8004fc6 <_raise_r+0x42>
 8004fbe:	2316      	movs	r3, #22
 8004fc0:	6003      	str	r3, [r0, #0]
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7e7      	b.n	8004f96 <_raise_r+0x12>
 8004fc6:	2400      	movs	r4, #0
 8004fc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	4798      	blx	r3
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e7e0      	b.n	8004f96 <_raise_r+0x12>

08004fd4 <raise>:
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <raise+0xc>)
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f7ff bfd3 	b.w	8004f84 <_raise_r>
 8004fde:	bf00      	nop
 8004fe0:	2000002c 	.word	0x2000002c

08004fe4 <_kill_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d07      	ldr	r5, [pc, #28]	; (8005004 <_kill_r+0x20>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	f7fe fceb 	bl	80039cc <_kill>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d102      	bne.n	8005000 <_kill_r+0x1c>
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	b103      	cbz	r3, 8005000 <_kill_r+0x1c>
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	200001d8 	.word	0x200001d8

08005008 <_getpid_r>:
 8005008:	f7fe bcd8 	b.w	80039bc <_getpid>

0800500c <_gettimeofday>:
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <_gettimeofday+0xc>)
 800500e:	2258      	movs	r2, #88	; 0x58
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	4770      	bx	lr
 8005018:	200001d8 	.word	0x200001d8

0800501c <_init>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr

08005028 <_fini>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr
