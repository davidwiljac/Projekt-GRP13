
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00005b38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb4  08005fb4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fbc  08005fbc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000094  08006058  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08006058  000201e0  2**0
=======
  1 .text         00006610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f04  08006f04  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f0c  08006f0c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08006fa4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006fa4  000201dc  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 12 .debug_info   0001035e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277e  00000000  00000000  00030422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  00033570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119c0  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c514  00000000  00000000  000457d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bac1  00000000  00000000  00051cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ad7ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  000ad800  2**2
=======
 12 .debug_info   00012e76  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d85  00000000  00000000  00032f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012614  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f219  00000000  00000000  00049b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c508  00000000  00000000  00058d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b523d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  000b5290  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b0:	08005cb0 	.word	0x08005cb0
=======
 80001b0:	08006788 	.word	0x08006788
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08005cb0 	.word	0x08005cb0
=======
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006788 	.word	0x08006788
>>>>>>> Stashed changes

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	70fb      	strb	r3, [r7, #3]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	70bb      	strb	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d821      	bhi.n	8000f0c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000ece:	78ba      	ldrb	r2, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	4093      	lsls	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000eea:	78f9      	ldrb	r1, [r7, #3]
 8000eec:	78ba      	ldrb	r2, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0a:	e074      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d823      	bhi.n	8000f5a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	1f5a      	subs	r2, r3, #5
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	461a      	mov	r2, r3
 8000f26:	231f      	movs	r3, #31
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4013      	ands	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	1f5a      	subs	r2, r3, #5
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	e04d      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000f5a:	78bb      	ldrb	r3, [r7, #2]
 8000f5c:	2b0e      	cmp	r3, #14
 8000f5e:	d825      	bhi.n	8000fac <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	f1a3 020a 	sub.w	r2, r3, #10
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	231f      	movs	r3, #31
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000f86:	78f9      	ldrb	r1, [r7, #3]
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000faa:	e024      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000fb2:	78bb      	ldrb	r3, [r7, #2]
 8000fb4:	f1a3 020f 	sub.w	r2, r3, #15
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000fd2:	78f9      	ldrb	r1, [r7, #3]
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	f1a3 020f 	sub.w	r2, r3, #15
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d923      	bls.n	8001044 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	f1a3 020a 	sub.w	r2, r3, #10
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6999      	ldr	r1, [r3, #24]
 8001028:	7878      	ldrb	r0, [r7, #1]
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	f1a3 020a 	sub.w	r2, r3, #10
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	fa00 f303 	lsl.w	r3, r0, r3
 800103a:	ea41 0203 	orr.w	r2, r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001042:	e01f      	b.n	8001084 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6959      	ldr	r1, [r3, #20]
 800106e:	7878      	ldrb	r0, [r7, #1]
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	fa00 f303 	lsl.w	r3, r0, r3
 800107c:	ea41 0203 	orr.w	r2, r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f043 0204 	orr.w	r2, r3, #4
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	b29b      	uxth	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

<<<<<<< Updated upstream
080010fc <RCC_GetClocksFreq>:
=======
080007d4 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <FLASH_Unlock+0x28>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d005      	beq.n	80007f0 <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <FLASH_Unlock+0x28>)
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <FLASH_Unlock+0x2c>)
 80007e8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <FLASH_Unlock+0x28>)
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <FLASH_Unlock+0x30>)
 80007ee:	605a      	str	r2, [r3, #4]
  }  
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000
 8000800:	45670123 	.word	0x45670123
 8000804:	cdef89ab 	.word	0xcdef89ab

08000808 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <FLASH_Lock+0x1c>)
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <FLASH_Lock+0x1c>)
 8000812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000816:	6113      	str	r3, [r2, #16]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000830:	2304      	movs	r3, #4
 8000832:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000834:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000838:	f000 f892 	bl	8000960 <FLASH_WaitForLastOperation>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d11a      	bne.n	800087c <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <FLASH_ErasePage+0x60>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <FLASH_ErasePage+0x60>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 8000852:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <FLASH_ErasePage+0x60>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <FLASH_ErasePage+0x60>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <FLASH_ErasePage+0x60>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000864:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000868:	f000 f87a 	bl	8000960 <FLASH_WaitForLastOperation>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <FLASH_ErasePage+0x60>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <FLASH_ErasePage+0x60>)
 8000876:	f023 0302 	bic.w	r3, r3, #2
 800087a:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8000898:	2304      	movs	r3, #4
 800089a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800089c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80008a0:	f000 f85e 	bl	8000960 <FLASH_WaitForLastOperation>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d114      	bne.n	80008d8 <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	887a      	ldrh	r2, [r7, #2]
 80008be:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80008c0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80008c4:	f000 f84c 	bl	8000960 <FLASH_WaitForLastOperation>
 80008c8:	4603      	mov	r3, r0
 80008ca:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <FLASH_ClearFlag+0x1c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60d3      	str	r3, [r2, #12]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 800090e:	2304      	movs	r3, #4
 8000910:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <FLASH_GetStatus+0x54>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 800091e:	2301      	movs	r3, #1
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e013      	b.n	800094c <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <FLASH_GetStatus+0x54>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8000930:	2302      	movs	r3, #2
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	e00a      	b.n	800094c <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <FLASH_GetStatus+0x54>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 8000942:	2303      	movs	r3, #3
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e001      	b.n	800094c <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8000948:	2304      	movs	r3, #4
 800094a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000968:	2304      	movs	r3, #4
 800096a:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800096c:	f7ff ffcc 	bl	8000908 <FLASH_GetStatus>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000974:	e006      	b.n	8000984 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 8000976:	f7ff ffc7 	bl	8000908 <FLASH_GetStatus>
 800097a:	4603      	mov	r3, r0
 800097c:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d102      	bne.n	8000990 <FLASH_WaitForLastOperation+0x30>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f2      	bne.n	8000976 <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8000996:	2305      	movs	r3, #5
 8000998:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	817b      	strh	r3, [r7, #10]
 80009b2:	4613      	mov	r3, r2
 80009b4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <I2C_TransferHandling+0x54>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80009c8:	897b      	ldrh	r3, [r7, #10]
 80009ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80009ce:	7a7b      	ldrb	r3, [r7, #9]
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	431a      	orrs	r2, r3
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	4313      	orrs	r3, r2
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	605a      	str	r2, [r3, #4]
}  
 80009ec:	bf00      	nop
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	fc009800 	.word	0xfc009800

080009fc <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	b2db      	uxtb	r3, r3
}  
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e001      	b.n	8000a64 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}  
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	61da      	str	r2, [r3, #28]
  }
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <RCC_GetClocksFreq>:
>>>>>>> Stashed changes
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
<<<<<<< Updated upstream
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001124:	4b91      	ldr	r3, [pc, #580]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d011      	beq.n	8001158 <RCC_GetClocksFreq+0x5c>
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d837      	bhi.n	80011aa <RCC_GetClocksFreq+0xae>
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <RCC_GetClocksFreq+0x4c>
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d004      	beq.n	8001150 <RCC_GetClocksFreq+0x54>
 8001146:	e030      	b.n	80011aa <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a89      	ldr	r2, [pc, #548]	; (8001370 <RCC_GetClocksFreq+0x274>)
 800114c:	601a      	str	r2, [r3, #0]
      break;
 800114e:	e030      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a87      	ldr	r2, [pc, #540]	; (8001370 <RCC_GetClocksFreq+0x274>)
 8001154:	601a      	str	r2, [r3, #0]
      break;
 8001156:	e02c      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <RCC_GetClocksFreq+0x270>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001160:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	3302      	adds	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	4a7d      	ldr	r2, [pc, #500]	; (8001374 <RCC_GetClocksFreq+0x278>)
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e00d      	b.n	80011a2 <RCC_GetClocksFreq+0xa6>
=======
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ab8:	4b91      	ldr	r3, [pc, #580]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d011      	beq.n	8000aec <RCC_GetClocksFreq+0x5c>
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d837      	bhi.n	8000b3e <RCC_GetClocksFreq+0xae>
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <RCC_GetClocksFreq+0x4c>
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d004      	beq.n	8000ae4 <RCC_GetClocksFreq+0x54>
 8000ada:	e030      	b.n	8000b3e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a89      	ldr	r2, [pc, #548]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000ae0:	601a      	str	r2, [r3, #0]
      break;
 8000ae2:	e030      	b.n	8000b46 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a87      	ldr	r2, [pc, #540]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000ae8:	601a      	str	r2, [r3, #0]
      break;
 8000aea:	e02c      	b.n	8000b46 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000aec:	4b84      	ldr	r3, [pc, #528]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000af4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000af6:	4b82      	ldr	r3, [pc, #520]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	3302      	adds	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	4a7d      	ldr	r2, [pc, #500]	; (8000d08 <RCC_GetClocksFreq+0x278>)
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
 8000b18:	e00d      	b.n	8000b36 <RCC_GetClocksFreq+0xa6>
>>>>>>> Stashed changes
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
<<<<<<< Updated upstream
 8001186:	4b79      	ldr	r3, [pc, #484]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8001192:	4a77      	ldr	r2, [pc, #476]	; (8001370 <RCC_GetClocksFreq+0x274>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fbb2 f2f3 	udiv	r2, r2, r3
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	601a      	str	r2, [r3, #0]
      break;
 80011a8:	e003      	b.n	80011b2 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a70      	ldr	r2, [pc, #448]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80011ae:	601a      	str	r2, [r3, #0]
      break;
 80011b0:	bf00      	nop
=======
 8000b1a:	4b79      	ldr	r3, [pc, #484]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b26:	4a77      	ldr	r2, [pc, #476]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3a:	601a      	str	r2, [r3, #0]
      break;
 8000b3c:	e003      	b.n	8000b46 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a70      	ldr	r2, [pc, #448]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000b42:	601a      	str	r2, [r3, #0]
      break;
 8000b44:	bf00      	nop
>>>>>>> Stashed changes
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
<<<<<<< Updated upstream
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <RCC_GetClocksFreq+0x270>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ba:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80011c2:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	40da      	lsrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <RCC_GetClocksFreq+0x270>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	40da      	lsrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800120a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	0adb      	lsrs	r3, r3, #11
 8001210:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001212:	4a59      	ldr	r2, [pc, #356]	; (8001378 <RCC_GetClocksFreq+0x27c>)
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	40da      	lsrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800122a:	4b50      	ldr	r3, [pc, #320]	; (800136c <RCC_GetClocksFreq+0x270>)
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001232:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800123a:	4a50      	ldr	r2, [pc, #320]	; (800137c <RCC_GetClocksFreq+0x280>)
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001242:	b29b      	uxth	r3, r3
 8001244:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fbb2 f2f3 	udiv	r2, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	e003      	b.n	8001266 <RCC_GetClocksFreq+0x16a>
=======
 8000b46:	4b6e      	ldr	r3, [pc, #440]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000b56:	4a6d      	ldr	r2, [pc, #436]	; (8000d0c <RCC_GetClocksFreq+0x27c>)
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	40da      	lsrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b6e:	4b64      	ldr	r3, [pc, #400]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b76:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000b7e:	4a63      	ldr	r2, [pc, #396]	; (8000d0c <RCC_GetClocksFreq+0x27c>)
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	40da      	lsrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b96:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b9e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	0adb      	lsrs	r3, r3, #11
 8000ba4:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000ba6:	4a59      	ldr	r2, [pc, #356]	; (8000d0c <RCC_GetClocksFreq+0x27c>)
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	40da      	lsrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000bbe:	4b50      	ldr	r3, [pc, #320]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000bc6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000bce:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <RCC_GetClocksFreq+0x280>)
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	e003      	b.n	8000bfa <RCC_GetClocksFreq+0x16a>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	611a      	str	r2, [r3, #16]
=======
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
<<<<<<< Updated upstream
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800126e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	0a5b      	lsrs	r3, r3, #9
 8001274:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001276:	4a41      	ldr	r2, [pc, #260]	; (800137c <RCC_GetClocksFreq+0x280>)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	b29b      	uxth	r3, r3
 8001280:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fbb2 f2f3 	udiv	r2, r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	e003      	b.n	80012a2 <RCC_GetClocksFreq+0x1a6>
=======
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfe:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c02:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	0a5b      	lsrs	r3, r3, #9
 8000c08:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c0a:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <RCC_GetClocksFreq+0x280>)
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	e003      	b.n	8000c36 <RCC_GetClocksFreq+0x1a6>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	615a      	str	r2, [r3, #20]
=======
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
<<<<<<< Updated upstream
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d003      	beq.n	80012b6 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80012b2:	619a      	str	r2, [r3, #24]
 80012b4:	e003      	b.n	80012be <RCC_GetClocksFreq+0x1c2>
=======
 8000c36:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d003      	beq.n	8000c4a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000c46:	619a      	str	r2, [r3, #24]
 8000c48:	e003      	b.n	8000c52 <RCC_GetClocksFreq+0x1c2>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
=======
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
<<<<<<< Updated upstream
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	d003      	beq.n	80012d2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <RCC_GetClocksFreq+0x274>)
 80012ce:	61da      	str	r2, [r3, #28]
 80012d0:	e003      	b.n	80012da <RCC_GetClocksFreq+0x1de>
=======
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	d003      	beq.n	8000c66 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <RCC_GetClocksFreq+0x274>)
 8000c62:	61da      	str	r2, [r3, #28]
 8000c64:	e003      	b.n	8000c6e <RCC_GetClocksFreq+0x1de>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	61da      	str	r2, [r3, #28]
=======
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <RCC_GetClocksFreq+0x270>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e6:	d10d      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d108      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d104      	bne.n	8001304 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	005a      	lsls	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	e003      	b.n	800130c <RCC_GetClocksFreq+0x210>
=======
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c7a:	d10d      	bne.n	8000c98 <RCC_GetClocksFreq+0x208>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d108      	bne.n	8000c98 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d104      	bne.n	8000c98 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	005a      	lsls	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	621a      	str	r2, [r3, #32]
 8000c96:	e003      	b.n	8000ca0 <RCC_GetClocksFreq+0x210>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	621a      	str	r2, [r3, #32]
=======
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <RCC_GetClocksFreq+0x270>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d10d      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	429a      	cmp	r2, r3
 8001322:	d108      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	d104      	bne.n	8001336 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	005a      	lsls	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
 8001334:	e003      	b.n	800133e <RCC_GetClocksFreq+0x242>
=======
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cac:	d10d      	bne.n	8000cca <RCC_GetClocksFreq+0x23a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d108      	bne.n	8000cca <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d104      	bne.n	8000cca <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	005a      	lsls	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc8:	e003      	b.n	8000cd2 <RCC_GetClocksFreq+0x242>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
<<<<<<< Updated upstream
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d104      	bne.n	8001354 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
 8001352:	e029      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <RCC_GetClocksFreq+0x270>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10f      	bne.n	8001380 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
 8001368:	e01e      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	007a1200 	.word	0x007a1200
 8001374:	003d0900 	.word	0x003d0900
 8001378:	20000000 	.word	0x20000000
 800137c:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001380:	4b66      	ldr	r3, [pc, #408]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d104      	bne.n	8001396 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
 8001394:	e008      	b.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d102      	bne.n	80013a8 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a5e      	ldr	r2, [pc, #376]	; (8001520 <RCC_GetClocksFreq+0x424>)
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ce6:	e029      	b.n	8000d3c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <RCC_GetClocksFreq+0x270>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d10f      	bne.n	8000d14 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8000cfc:	e01e      	b.n	8000d3c <RCC_GetClocksFreq+0x2ac>
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	007a1200 	.word	0x007a1200
 8000d08:	003d0900 	.word	0x003d0900
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000d14:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
 8000d28:	e008      	b.n	8000d3c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000d2a:	4b61      	ldr	r3, [pc, #388]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d102      	bne.n	8000d3c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a5e      	ldr	r2, [pc, #376]	; (8000eb4 <RCC_GetClocksFreq+0x424>)
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
<<<<<<< Updated upstream
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80013bc:	e021      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d104      	bne.n	80013d6 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d4:	e015      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013e2:	d104      	bne.n	80013ee <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ec:	e009      	b.n	8001402 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <RCC_GetClocksFreq+0x420>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013fa:	d102      	bne.n	8001402 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <RCC_GetClocksFreq+0x424>)
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8000d3c:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d104      	bne.n	8000d52 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d50:	e021      	b.n	8000d96 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000d52:	4b57      	ldr	r3, [pc, #348]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5e:	d104      	bne.n	8000d6a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d68:	e015      	b.n	8000d96 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000d6a:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d76:	d104      	bne.n	8000d82 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d80:	e009      	b.n	8000d96 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000d82:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d8e:	d102      	bne.n	8000d96 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <RCC_GetClocksFreq+0x424>)
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
<<<<<<< Updated upstream
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
 8001416:	e021      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <RCC_GetClocksFreq+0x420>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001424:	d104      	bne.n	8001430 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e015      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800143c:	d104      	bne.n	8001448 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	e009      	b.n	800145c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <RCC_GetClocksFreq+0x420>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001450:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001454:	d102      	bne.n	800145c <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <RCC_GetClocksFreq+0x424>)
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
 8000daa:	e021      	b.n	8000df0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000db8:	d104      	bne.n	8000dc4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc2:	e015      	b.n	8000df0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000dcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000dd0:	d104      	bne.n	8000ddc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dda:	e009      	b.n	8000df0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000de4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000de8:	d102      	bne.n	8000df0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <RCC_GetClocksFreq+0x424>)
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
<<<<<<< Updated upstream
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <RCC_GetClocksFreq+0x420>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	e021      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <RCC_GetClocksFreq+0x420>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800147a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800147e:	d104      	bne.n	800148a <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
 8001488:	e015      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <RCC_GetClocksFreq+0x420>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001496:	d104      	bne.n	80014a2 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
 80014a0:	e009      	b.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80014ae:	d102      	bne.n	80014b6 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <RCC_GetClocksFreq+0x424>)
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
 8000e04:	e021      	b.n	8000e4a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e12:	d104      	bne.n	8000e1e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	e015      	b.n	8000e4a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e2a:	d104      	bne.n	8000e36 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
 8000e34:	e009      	b.n	8000e4a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e42:	d102      	bne.n	8000e4a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <RCC_GetClocksFreq+0x424>)
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
<<<<<<< Updated upstream
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
<<<<<<< Updated upstream
 80014ca:	e021      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d8:	d104      	bne.n	80014e4 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014e2:	e015      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014f0:	d104      	bne.n	80014fc <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014fa:	e009      	b.n	8001510 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <RCC_GetClocksFreq+0x420>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001508:	d102      	bne.n	8001510 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <RCC_GetClocksFreq+0x424>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001510:	bf00      	nop
 8001512:	372c      	adds	r7, #44	; 0x2c
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200

08001524 <USART_SendData>:
=======
 8000e5e:	e021      	b.n	8000ea4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e6c:	d104      	bne.n	8000e78 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e76:	e015      	b.n	8000ea4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e84:	d104      	bne.n	8000e90 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e8e:	e009      	b.n	8000ea4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <RCC_GetClocksFreq+0x420>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e9c:	d102      	bne.n	8000ea4 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <RCC_GetClocksFreq+0x424>)
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ea4:	bf00      	nop
 8000ea6:	372c      	adds	r7, #44	; 0x2c
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	007a1200 	.word	0x007a1200

08000eb8 <USART_SendData>:
>>>>>>> Stashed changes
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
<<<<<<< Updated upstream
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
=======
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
<<<<<<< Updated upstream
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <USART_ITConfig>:
=======
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <USART_ITConfig>:
>>>>>>> Stashed changes
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
<<<<<<< Updated upstream
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4613      	mov	r3, r2
 8001554:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
=======
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
<<<<<<< Updated upstream
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	b29b      	uxth	r3, r3
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800157a:	2201      	movs	r2, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d103      	bne.n	8001592 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e005      	b.n	800159e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d102      	bne.n	800159e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3308      	adds	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
=======
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d103      	bne.n	8000f26 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	e005      	b.n	8000f32 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d102      	bne.n	8000f32 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
<<<<<<< Updated upstream
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
=======
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
<<<<<<< Updated upstream
 80015b0:	e006      	b.n	80015c0 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <USART_GetFlagStatus>:
=======
 8000f44:	e006      	b.n	8000f54 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	400a      	ands	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3724      	adds	r7, #36	; 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <USART_GetFlagStatus>:
>>>>>>> Stashed changes
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
<<<<<<< Updated upstream
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
=======
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
<<<<<<< Updated upstream
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e001      	b.n	80015f0 <USART_GetFlagStatus+0x24>
=======
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e001      	b.n	8000f84 <USART_GetFlagStatus+0x24>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <USART_GetITStatus>:
=======
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <USART_GetITStatus>:
>>>>>>> Stashed changes
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
<<<<<<< Updated upstream
 80015fe:	b480      	push	{r7}
 8001600:	b087      	sub	sp, #28
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	74fb      	strb	r3, [r7, #19]
=======
 8000f92:	b480      	push	{r7}
 8000f94:	b087      	sub	sp, #28
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	74fb      	strb	r3, [r7, #19]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
<<<<<<< Updated upstream
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	b29b      	uxth	r3, r3
 8001620:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001628:	2201      	movs	r2, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4013      	ands	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e00d      	b.n	8001660 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d105      	bne.n	8001656 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e004      	b.n	8001660 <USART_GetITStatus+0x62>
=======
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d105      	bne.n	8000fd8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e00d      	b.n	8000ff4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d105      	bne.n	8000fea <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e004      	b.n	8000ff4 <USART_GetITStatus+0x62>
>>>>>>> Stashed changes
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
<<<<<<< Updated upstream
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001666:	2201      	movs	r2, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <USART_GetITStatus+0x8e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	74fb      	strb	r3, [r7, #19]
 800168a:	e001      	b.n	8001690 <USART_GetITStatus+0x92>
=======
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <USART_GetITStatus+0x8e>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800101a:	2301      	movs	r3, #1
 800101c:	74fb      	strb	r3, [r7, #19]
 800101e:	e001      	b.n	8001024 <USART_GetITStatus+0x92>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 800168c:	2300      	movs	r3, #0
 800168e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001690:	7cfb      	ldrb	r3, [r7, #19]
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <NVIC_EnableIRQ>:
=======
 8001020:	2300      	movs	r3, #0
 8001022:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001024:	7cfb      	ldrb	r3, [r7, #19]
}
 8001026:	4618      	mov	r0, r3
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <NVIC_EnableIRQ>:
>>>>>>> Stashed changes
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2201      	movs	r2, #1
 80016b2:	fa02 f103 	lsl.w	r1, r2, r3
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <NVIC_EnableIRQ+0x30>)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <uart_get_char>:
=======
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	2201      	movs	r2, #1
 8001046:	fa02 f103 	lsl.w	r1, r2, r3
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <NVIC_EnableIRQ+0x30>)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <uart_get_char>:
>>>>>>> Stashed changes
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
<<<<<<< Updated upstream
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <uart_get_char+0x48>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d011      	beq.n	800170c <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <uart_get_char+0x4c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <uart_get_char+0x4c>)
 80016f4:	7011      	strb	r1, [r2, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <uart_get_char+0x50>)
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <uart_get_char+0x48>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <uart_get_char+0x48>)
 800170a:	701a      	strb	r2, [r3, #0]
    }
    return val;
 800170c:	79fb      	ldrb	r3, [r7, #7]
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200001b2 	.word	0x200001b2
 8001720:	200001b1 	.word	0x200001b1
 8001724:	200000b0 	.word	0x200000b0

08001728 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <uart_put_char+0x30>)
 800173a:	f7ff fef3 	bl	8001524 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800173e:	bf00      	nop
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <uart_put_char+0x30>)
 8001744:	f7ff ff42 	bl	80015cc <USART_GetFlagStatus>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f8      	beq.n	8001740 <uart_put_char+0x18>
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004400 	.word	0x40004400

0800175c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e012      	b.n	8001796 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d102      	bne.n	8001782 <_write_r+0x26>
            uart_put_char('\r');
 800177c:	200d      	movs	r0, #13
 800177e:	f7ff ffd3 	bl	8001728 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffcc 	bl	8001728 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbe8      	blt.n	8001770 <_write_r+0x14>
    }

    return len;
 800179e:	683b      	ldr	r3, [r7, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <USART2_IRQHandler+0x5c>)
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <USART2_IRQHandler+0x60>)
 80017b0:	f7ff ff25 	bl	80015fe <USART_GetITStatus>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d021      	beq.n	80017fe <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <USART2_IRQHandler+0x60>)
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	b299      	uxth	r1, r3
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <USART2_IRQHandler+0x64>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	b2d0      	uxtb	r0, r2
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <USART2_IRQHandler+0x64>)
 80017cc:	7010      	strb	r0, [r2, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	b2c9      	uxtb	r1, r1
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <USART2_IRQHandler+0x68>)
 80017d4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	d107      	bne.n	80017f0 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <USART2_IRQHandler+0x70>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <USART2_IRQHandler+0x70>)
 80017ec:	701a      	strb	r2, [r3, #0]
=======
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <uart_get_char+0x48>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d011      	beq.n	80010a0 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <uart_get_char+0x4c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	b2d1      	uxtb	r1, r2
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <uart_get_char+0x4c>)
 8001088:	7011      	strb	r1, [r2, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <uart_get_char+0x50>)
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <uart_get_char+0x48>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3b01      	subs	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <uart_get_char+0x48>)
 800109e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200001ae 	.word	0x200001ae
 80010b4:	200001ad 	.word	0x200001ad
 80010b8:	200000ac 	.word	0x200000ac

080010bc <uart_put_char>:

void uart_put_char(uint8_t c) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <uart_put_char+0x30>)
 80010ce:	f7ff fef3 	bl	8000eb8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80010d2:	bf00      	nop
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <uart_put_char+0x30>)
 80010d8:	f7ff ff42 	bl	8000f60 <USART_GetFlagStatus>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f8      	beq.n	80010d4 <uart_put_char+0x18>
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004400 	.word	0x40004400

080010f0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e012      	b.n	800112a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b0a      	cmp	r3, #10
 800110e:	d102      	bne.n	8001116 <_write_r+0x26>
            uart_put_char('\r');
 8001110:	200d      	movs	r0, #13
 8001112:	f7ff ffd3 	bl	80010bc <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffcc 	bl	80010bc <uart_put_char>
    for (n = 0; n < len; n++) {
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbe8      	blt.n	8001104 <_write_r+0x14>
    }

    return len;
 8001132:	683b      	ldr	r3, [r7, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001140:	4915      	ldr	r1, [pc, #84]	; (8001198 <USART2_IRQHandler+0x5c>)
 8001142:	4816      	ldr	r0, [pc, #88]	; (800119c <USART2_IRQHandler+0x60>)
 8001144:	f7ff ff25 	bl	8000f92 <USART_GetITStatus>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d021      	beq.n	8001192 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <USART2_IRQHandler+0x60>)
 8001150:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001152:	b299      	uxth	r1, r3
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <USART2_IRQHandler+0x64>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	b2d0      	uxtb	r0, r2
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <USART2_IRQHandler+0x64>)
 8001160:	7010      	strb	r0, [r2, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <USART2_IRQHandler+0x68>)
 8001168:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <USART2_IRQHandler+0x6c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2bff      	cmp	r3, #255	; 0xff
 8001172:	d107      	bne.n	8001184 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <USART2_IRQHandler+0x70>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <USART2_IRQHandler+0x70>)
 8001180:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        } else {
            UART_COUNT++;
        }
    }
}
<<<<<<< Updated upstream
 80017ee:	e006      	b.n	80017fe <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <USART2_IRQHandler+0x6c>)
 80017fc:	701a      	strb	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00050105 	.word	0x00050105
 8001808:	40004400 	.word	0x40004400
 800180c:	200001b0 	.word	0x200001b0
 8001810:	200000b0 	.word	0x200000b0
 8001814:	200001b2 	.word	0x200001b2
 8001818:	200001b1 	.word	0x200001b1

0800181c <uart_init>:
=======
 8001182:	e006      	b.n	8001192 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	00050105 	.word	0x00050105
 800119c:	40004400 	.word	0x40004400
 80011a0:	200001ac 	.word	0x200001ac
 80011a4:	200000ac 	.word	0x200000ac
 80011a8:	200001ae 	.word	0x200001ae
 80011ac:	200001ad 	.word	0x200001ad

080011b0 <uart_init>:
>>>>>>> Stashed changes

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
<<<<<<< Updated upstream
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001824:	4b86      	ldr	r3, [pc, #536]	; (8001a40 <uart_init+0x224>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f953 	bl	8004ad8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001832:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <uart_init+0x224>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f003 f94c 	bl	8004ad8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <uart_init+0x228>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a7f      	ldr	r2, [pc, #508]	; (8001a44 <uart_init+0x228>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800184c:	4b7d      	ldr	r3, [pc, #500]	; (8001a44 <uart_init+0x228>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <uart_init+0x228>)
 8001852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001856:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001866:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001876:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001886:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001892:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001896:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80018a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018b2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80018b6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80018b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018bc:	889b      	ldrh	r3, [r3, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018c4:	f023 030c 	bic.w	r3, r3, #12
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80018cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d4:	8892      	ldrh	r2, [r2, #4]
 80018d6:	b292      	uxth	r2, r2
 80018d8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80018da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e8:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80018ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80018f8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80018fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001908:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800190a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001914:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001918:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <uart_init+0x22c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <uart_init+0x22c>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <uart_init+0x22c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <uart_init+0x22c>)
 800192c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001930:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001932:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <uart_init+0x22c>)
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <uart_init+0x22c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <uart_init+0x22c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <uart_init+0x22c>)
 8001940:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001944:	f023 030c 	bic.w	r3, r3, #12
 8001948:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <uart_init+0x22c>)
 800194c:	4a3e      	ldr	r2, [pc, #248]	; (8001a48 <uart_init+0x22c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <uart_init+0x22c>)
 8001954:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <uart_init+0x22c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <uart_init+0x22c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <uart_init+0x22c>)
 8001960:	f043 030c 	orr.w	r3, r3, #12
 8001964:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <uart_init+0x22c>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <uart_init+0x22c>)
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <uart_init+0x22c>)
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <uart_init+0x22c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
 8001982:	2300      	movs	r3, #0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fbb6 	bl	80010fc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <uart_init+0x22c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80019ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	fb01 f202 	mul.w	r2, r1, r2
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c0:	e00d      	b.n	80019de <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80019c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	fb01 f202 	mul.w	r2, r1, r2
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <uart_init+0x1d2>
        divider++;
 80019e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ea:	3301      	adds	r3, #1
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <uart_init+0x22c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <uart_init+0x22c>)
 8001a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a16:	b292      	uxth	r2, r2
 8001a18:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <uart_init+0x22c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <uart_init+0x22c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001a26:	2201      	movs	r2, #1
 8001a28:	4908      	ldr	r1, [pc, #32]	; (8001a4c <uart_init+0x230>)
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <uart_init+0x22c>)
 8001a2c:	f7ff fd8c 	bl	8001548 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001a30:	2026      	movs	r0, #38	; 0x26
 8001a32:	f7ff fe35 	bl	80016a0 <NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	; 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000002c 	.word	0x2000002c
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40004400 	.word	0x40004400
 8001a4c:	00050105 	.word	0x00050105

08001a50 <fgcolor>:
=======
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80011b8:	4b86      	ldr	r3, [pc, #536]	; (80013d4 <uart_init+0x224>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fadf 	bl	8005784 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80011c6:	4b83      	ldr	r3, [pc, #524]	; (80013d4 <uart_init+0x224>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fad8 	bl	8005784 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80011d4:	4b80      	ldr	r3, [pc, #512]	; (80013d8 <uart_init+0x228>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4a7f      	ldr	r2, [pc, #508]	; (80013d8 <uart_init+0x228>)
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80011e0:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <uart_init+0x228>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a7c      	ldr	r2, [pc, #496]	; (80013d8 <uart_init+0x228>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80011ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80011fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800120a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 800120c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800121a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 800121c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001226:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800122a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 800122c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800123a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800123c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001246:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800124a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 800124c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001258:	f023 030c 	bic.w	r3, r3, #12
 800125c:	b29b      	uxth	r3, r3
 800125e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001260:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001268:	8892      	ldrh	r2, [r2, #4]
 800126a:	b292      	uxth	r2, r2
 800126c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 800126e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800127e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001288:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800128c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 800128e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800129c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800129e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012ac:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <uart_init+0x22c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4a      	ldr	r2, [pc, #296]	; (80013dc <uart_init+0x22c>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80012ba:	4b48      	ldr	r3, [pc, #288]	; (80013dc <uart_init+0x22c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a47      	ldr	r2, [pc, #284]	; (80013dc <uart_init+0x22c>)
 80012c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012c4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <uart_init+0x22c>)
 80012c8:	4a44      	ldr	r2, [pc, #272]	; (80013dc <uart_init+0x22c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <uart_init+0x22c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <uart_init+0x22c>)
 80012d4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80012d8:	f023 030c 	bic.w	r3, r3, #12
 80012dc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <uart_init+0x22c>)
 80012e0:	4a3e      	ldr	r2, [pc, #248]	; (80013dc <uart_init+0x22c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <uart_init+0x22c>)
 80012e8:	4a3c      	ldr	r2, [pc, #240]	; (80013dc <uart_init+0x22c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <uart_init+0x22c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <uart_init+0x22c>)
 80012f4:	f043 030c 	orr.w	r3, r3, #12
 80012f8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <uart_init+0x22c>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	4a37      	ldr	r2, [pc, #220]	; (80013dc <uart_init+0x22c>)
 8001300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001304:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <uart_init+0x22c>)
 8001308:	4a34      	ldr	r2, [pc, #208]	; (80013dc <uart_init+0x22c>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001312:	2300      	movs	r3, #0
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
 8001316:	2300      	movs	r3, #0
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fbb6 	bl	8000a90 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <uart_init+0x22c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d010      	beq.n	8001356 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001336:	005a      	lsls	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	fbb3 f2f2 	udiv	r2, r3, r2
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	fb01 f202 	mul.w	r2, r1, r2
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
 8001354:	e00d      	b.n	8001372 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	fbb3 f2f2 	udiv	r2, r3, r2
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	fb01 f202 	mul.w	r2, r1, r2
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001378:	429a      	cmp	r2, r3
 800137a:	d302      	bcc.n	8001382 <uart_init+0x1d2>
        divider++;
 800137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137e:	3301      	adds	r3, #1
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <uart_init+0x22c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800138e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800139a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800139e:	4013      	ands	r3, r2
 80013a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013a2:	4313      	orrs	r3, r2
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <uart_init+0x22c>)
 80013a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013aa:	b292      	uxth	r2, r2
 80013ac:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <uart_init+0x22c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <uart_init+0x22c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013ba:	2201      	movs	r2, #1
 80013bc:	4908      	ldr	r1, [pc, #32]	; (80013e0 <uart_init+0x230>)
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <uart_init+0x22c>)
 80013c0:	f7ff fd8c 	bl	8000edc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f7ff fe35 	bl	8001034 <NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	; 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000002c 	.word	0x2000002c
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40004400 	.word	0x40004400
 80013e0:	00050105 	.word	0x00050105

080013e4 <fgcolor>:
>>>>>>> Stashed changes
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
<<<<<<< Updated upstream
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
=======
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
<<<<<<< Updated upstream
 8001a5a:	2316      	movs	r3, #22
 8001a5c:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d904      	bls.n	8001a6e <fgcolor+0x1e>
	  type = 1;                // bold text
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3b08      	subs	r3, #8
 8001a6c:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	331e      	adds	r3, #30
 8001a74:	211b      	movs	r1, #27
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <fgcolor+0x34>)
 8001a78:	f002 ff82 	bl	8004980 <iprintf>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	08005cc8 	.word	0x08005cc8

08001a88 <clrscr>:
=======
 80013ee:	2316      	movs	r3, #22
 80013f0:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b07      	cmp	r3, #7
 80013f6:	d904      	bls.n	8001402 <fgcolor+0x1e>
	  type = 1;                // bold text
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3b08      	subs	r3, #8
 8001400:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	331e      	adds	r3, #30
 8001408:	211b      	movs	r1, #27
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <fgcolor+0x34>)
 800140c:	f004 f898 	bl	8005540 <iprintf>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	080067a0 	.word	0x080067a0

0800141c <clrscr>:
>>>>>>> Stashed changes
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
<<<<<<< Updated upstream
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001a8c:	211b      	movs	r1, #27
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <clrscr+0x18>)
 8001a90:	f002 ff76 	bl	8004980 <iprintf>
    printf("%c[J", ESC);
 8001a94:	211b      	movs	r1, #27
 8001a96:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <clrscr+0x1c>)
 8001a98:	f002 ff72 	bl	8004980 <iprintf>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	08005cf4 	.word	0x08005cf4
 8001aa4:	08005cfc 	.word	0x08005cfc

08001aa8 <gotoxy>:
=======
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001420:	211b      	movs	r1, #27
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <clrscr+0x18>)
 8001424:	f004 f88c 	bl	8005540 <iprintf>
    printf("%c[J", ESC);
 8001428:	211b      	movs	r1, #27
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <clrscr+0x1c>)
 800142c:	f004 f888 	bl	8005540 <iprintf>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	080067cc 	.word	0x080067cc
 8001438:	080067d4 	.word	0x080067d4

0800143c <gotoxy>:
>>>>>>> Stashed changes
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
<<<<<<< Updated upstream
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	211b      	movs	r1, #27
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <gotoxy+0x20>)
 8001aba:	f002 ff61 	bl	8004980 <iprintf>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08005d0c 	.word	0x08005d0c

08001acc <drawBox>:
=======
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	211b      	movs	r1, #27
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <gotoxy+0x20>)
 800144e:	f004 f877 	bl	8005540 <iprintf>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	080067e4 	.word	0x080067e4

08001460 <drawBox>:
>>>>>>> Stashed changes
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
<<<<<<< Updated upstream
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d15e      	bne.n	8001b9e <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e019      	b.n	8001b1a <drawBox+0x4e>
			 gotoxy(x1,y);
 8001ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ffdd 	bl	8001aa8 <gotoxy>
			 if (y==y1){
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d103      	bne.n	8001afe <drawBox+0x32>
				printf("%c", 201);
 8001af6:	20c9      	movs	r0, #201	; 0xc9
 8001af8:	f002 ff5a 	bl	80049b0 <putchar>
 8001afc:	e00a      	b.n	8001b14 <drawBox+0x48>
			 }
			 else if(y==y2){
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d103      	bne.n	8001b0e <drawBox+0x42>
				printf("%c", 200);
 8001b06:	20c8      	movs	r0, #200	; 0xc8
 8001b08:	f002 ff52 	bl	80049b0 <putchar>
 8001b0c:	e002      	b.n	8001b14 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001b0e:	20ba      	movs	r0, #186	; 0xba
 8001b10:	f002 ff4e 	bl	80049b0 <putchar>
		 for(int y = y1; y <= y2; y++){
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dde1      	ble.n	8001ae6 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	e014      	b.n	8001b52 <drawBox+0x86>
   			 if(x!=x1){
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d00d      	beq.n	8001b4c <drawBox+0x80>
				 gotoxy(x,y1);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6a38      	ldr	r0, [r7, #32]
 8001b34:	f7ff ffb8 	bl	8001aa8 <gotoxy>
				 printf("%c", 205);
 8001b38:	20cd      	movs	r0, #205	; 0xcd
 8001b3a:	f002 ff39 	bl	80049b0 <putchar>
				 gotoxy(x,y2);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	6a38      	ldr	r0, [r7, #32]
 8001b42:	f7ff ffb1 	bl	8001aa8 <gotoxy>
				 printf("%c", 205);
 8001b46:	20cd      	movs	r0, #205	; 0xcd
 8001b48:	f002 ff32 	bl	80049b0 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dde6      	ble.n	8001b28 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e019      	b.n	8001b94 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001b60:	69f9      	ldr	r1, [r7, #28]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa0 	bl	8001aa8 <gotoxy>
   			 if (y==y1){
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d103      	bne.n	8001b78 <drawBox+0xac>
				printf("%c", 187);
 8001b70:	20bb      	movs	r0, #187	; 0xbb
 8001b72:	f002 ff1d 	bl	80049b0 <putchar>
 8001b76:	e00a      	b.n	8001b8e <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d103      	bne.n	8001b88 <drawBox+0xbc>
				printf("%c", 188);
 8001b80:	20bc      	movs	r0, #188	; 0xbc
 8001b82:	f002 ff15 	bl	80049b0 <putchar>
 8001b86:	e002      	b.n	8001b8e <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001b88:	20ba      	movs	r0, #186	; 0xba
 8001b8a:	f002 ff11 	bl	80049b0 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dde1      	ble.n	8001b60 <drawBox+0x94>
=======
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 800146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001470:	2b01      	cmp	r3, #1
 8001472:	d15e      	bne.n	8001532 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
 8001478:	e019      	b.n	80014ae <drawBox+0x4e>
			 gotoxy(x1,y);
 800147a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff ffdd 	bl	800143c <gotoxy>
			 if (y==y1){
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d103      	bne.n	8001492 <drawBox+0x32>
				printf("%c", 201);
 800148a:	20c9      	movs	r0, #201	; 0xc9
 800148c:	f004 f870 	bl	8005570 <putchar>
 8001490:	e00a      	b.n	80014a8 <drawBox+0x48>
			 }
			 else if(y==y2){
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d103      	bne.n	80014a2 <drawBox+0x42>
				printf("%c", 200);
 800149a:	20c8      	movs	r0, #200	; 0xc8
 800149c:	f004 f868 	bl	8005570 <putchar>
 80014a0:	e002      	b.n	80014a8 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 80014a2:	20ba      	movs	r0, #186	; 0xba
 80014a4:	f004 f864 	bl	8005570 <putchar>
		 for(int y = y1; y <= y2; y++){
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3301      	adds	r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dde1      	ble.n	800147a <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	e014      	b.n	80014e6 <drawBox+0x86>
   			 if(x!=x1){
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d00d      	beq.n	80014e0 <drawBox+0x80>
				 gotoxy(x,y1);
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6a38      	ldr	r0, [r7, #32]
 80014c8:	f7ff ffb8 	bl	800143c <gotoxy>
				 printf("%c", 205);
 80014cc:	20cd      	movs	r0, #205	; 0xcd
 80014ce:	f004 f84f 	bl	8005570 <putchar>
				 gotoxy(x,y2);
 80014d2:	6839      	ldr	r1, [r7, #0]
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7ff ffb1 	bl	800143c <gotoxy>
				 printf("%c", 205);
 80014da:	20cd      	movs	r0, #205	; 0xcd
 80014dc:	f004 f848 	bl	8005570 <putchar>
   		 for(int x = x1; x <= x2; x++){
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	3301      	adds	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
 80014e6:	6a3a      	ldr	r2, [r7, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dde6      	ble.n	80014bc <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e019      	b.n	8001528 <drawBox+0xc8>
   			 gotoxy(x2,y);
 80014f4:	69f9      	ldr	r1, [r7, #28]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa0 	bl	800143c <gotoxy>
   			 if (y==y1){
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	429a      	cmp	r2, r3
 8001502:	d103      	bne.n	800150c <drawBox+0xac>
				printf("%c", 187);
 8001504:	20bb      	movs	r0, #187	; 0xbb
 8001506:	f004 f833 	bl	8005570 <putchar>
 800150a:	e00a      	b.n	8001522 <drawBox+0xc2>
			 }
			 else if(y==y2){
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d103      	bne.n	800151c <drawBox+0xbc>
				printf("%c", 188);
 8001514:	20bc      	movs	r0, #188	; 0xbc
 8001516:	f004 f82b 	bl	8005570 <putchar>
 800151a:	e002      	b.n	8001522 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 800151c:	20ba      	movs	r0, #186	; 0xba
 800151e:	f004 f827 	bl	8005570 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	dde1      	ble.n	80014f4 <drawBox+0x94>
>>>>>>> Stashed changes
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
<<<<<<< Updated upstream
 8001b9c:	e05d      	b.n	8001c5a <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e019      	b.n	8001bd8 <drawBox+0x10c>
			 gotoxy(x1,y);
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff ff7e 	bl	8001aa8 <gotoxy>
			 if (y==y1){
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d103      	bne.n	8001bbc <drawBox+0xf0>
				printf("%c", 218);
 8001bb4:	20da      	movs	r0, #218	; 0xda
 8001bb6:	f002 fefb 	bl	80049b0 <putchar>
 8001bba:	e00a      	b.n	8001bd2 <drawBox+0x106>
			 else if(y==y2){
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d103      	bne.n	8001bcc <drawBox+0x100>
				printf("%c", 192);
 8001bc4:	20c0      	movs	r0, #192	; 0xc0
 8001bc6:	f002 fef3 	bl	80049b0 <putchar>
 8001bca:	e002      	b.n	8001bd2 <drawBox+0x106>
				printf("%c", 179);
 8001bcc:	20b3      	movs	r0, #179	; 0xb3
 8001bce:	f002 feef 	bl	80049b0 <putchar>
		for(int y = y1; y <= y2; y++){
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dde1      	ble.n	8001ba4 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e014      	b.n	8001c10 <drawBox+0x144>
			if(x!=x1){
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00d      	beq.n	8001c0a <drawBox+0x13e>
				 gotoxy(x,y1);
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ff59 	bl	8001aa8 <gotoxy>
				 printf("%c", 196);
 8001bf6:	20c4      	movs	r0, #196	; 0xc4
 8001bf8:	f002 feda 	bl	80049b0 <putchar>
				 gotoxy(x,y2);
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff52 	bl	8001aa8 <gotoxy>
				 printf("%c", 196);
 8001c04:	20c4      	movs	r0, #196	; 0xc4
 8001c06:	f002 fed3 	bl	80049b0 <putchar>
		for(int x = x1; x <= x2; x++){
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dde6      	ble.n	8001be6 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e019      	b.n	8001c52 <drawBox+0x186>
			 gotoxy(x2,y);
 8001c1e:	6939      	ldr	r1, [r7, #16]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff41 	bl	8001aa8 <gotoxy>
			if (y==y1){
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d103      	bne.n	8001c36 <drawBox+0x16a>
				printf("%c", 191);
 8001c2e:	20bf      	movs	r0, #191	; 0xbf
 8001c30:	f002 febe 	bl	80049b0 <putchar>
 8001c34:	e00a      	b.n	8001c4c <drawBox+0x180>
			 else if(y==y2){
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d103      	bne.n	8001c46 <drawBox+0x17a>
				printf("%c", 217);
 8001c3e:	20d9      	movs	r0, #217	; 0xd9
 8001c40:	f002 feb6 	bl	80049b0 <putchar>
 8001c44:	e002      	b.n	8001c4c <drawBox+0x180>
				printf("%c", 179);
 8001c46:	20b3      	movs	r0, #179	; 0xb3
 8001c48:	f002 feb2 	bl	80049b0 <putchar>
		for(int y = y1; y <= y2; y++){
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dde1      	ble.n	8001c1e <drawBox+0x152>
}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <updateBullets>:
=======
 8001530:	e05d      	b.n	80015ee <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	e019      	b.n	800156c <drawBox+0x10c>
			 gotoxy(x1,y);
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff7e 	bl	800143c <gotoxy>
			 if (y==y1){
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	429a      	cmp	r2, r3
 8001546:	d103      	bne.n	8001550 <drawBox+0xf0>
				printf("%c", 218);
 8001548:	20da      	movs	r0, #218	; 0xda
 800154a:	f004 f811 	bl	8005570 <putchar>
 800154e:	e00a      	b.n	8001566 <drawBox+0x106>
			 else if(y==y2){
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d103      	bne.n	8001560 <drawBox+0x100>
				printf("%c", 192);
 8001558:	20c0      	movs	r0, #192	; 0xc0
 800155a:	f004 f809 	bl	8005570 <putchar>
 800155e:	e002      	b.n	8001566 <drawBox+0x106>
				printf("%c", 179);
 8001560:	20b3      	movs	r0, #179	; 0xb3
 8001562:	f004 f805 	bl	8005570 <putchar>
		for(int y = y1; y <= y2; y++){
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	3301      	adds	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	dde1      	ble.n	8001538 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e014      	b.n	80015a4 <drawBox+0x144>
			if(x!=x1){
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	429a      	cmp	r2, r3
 8001580:	d00d      	beq.n	800159e <drawBox+0x13e>
				 gotoxy(x,y1);
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	6978      	ldr	r0, [r7, #20]
 8001586:	f7ff ff59 	bl	800143c <gotoxy>
				 printf("%c", 196);
 800158a:	20c4      	movs	r0, #196	; 0xc4
 800158c:	f003 fff0 	bl	8005570 <putchar>
				 gotoxy(x,y2);
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff52 	bl	800143c <gotoxy>
				 printf("%c", 196);
 8001598:	20c4      	movs	r0, #196	; 0xc4
 800159a:	f003 ffe9 	bl	8005570 <putchar>
		for(int x = x1; x <= x2; x++){
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dde6      	ble.n	800157a <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	e019      	b.n	80015e6 <drawBox+0x186>
			 gotoxy(x2,y);
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff41 	bl	800143c <gotoxy>
			if (y==y1){
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d103      	bne.n	80015ca <drawBox+0x16a>
				printf("%c", 191);
 80015c2:	20bf      	movs	r0, #191	; 0xbf
 80015c4:	f003 ffd4 	bl	8005570 <putchar>
 80015c8:	e00a      	b.n	80015e0 <drawBox+0x180>
			 else if(y==y2){
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <drawBox+0x17a>
				printf("%c", 217);
 80015d2:	20d9      	movs	r0, #217	; 0xd9
 80015d4:	f003 ffcc 	bl	8005570 <putchar>
 80015d8:	e002      	b.n	80015e0 <drawBox+0x180>
				printf("%c", 179);
 80015da:	20b3      	movs	r0, #179	; 0xb3
 80015dc:	f003 ffc8 	bl	8005570 <putchar>
		for(int y = y1; y <= y2; y++){
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dde1      	ble.n	80015b2 <drawBox+0x152>
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <updateBullets>:
>>>>>>> Stashed changes
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
<<<<<<< Updated upstream
 8001c62:	b590      	push	{r4, r7, lr}
 8001c64:	b089      	sub	sp, #36	; 0x24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001c70:	e06b      	b.n	8001d4a <updateBullets+0xe8>
//		v = scaleVector(v, fpDivide(intToFp(1),vLength));
//		//v har nu længde 1
//		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7a1b      	ldrb	r3, [r3, #8]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 ff37 	bl	8002aec <intToFp>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7a5b      	ldrb	r3, [r3, #9]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 ff2c 	bl	8002aec <intToFp>
 8001c94:	4602      	mov	r2, r0
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
		uint32_t vLength = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 ffc4 	bl	8002c2e <fpAbs>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 ffbf 	bl	8002c2e <fpAbs>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4423      	add	r3, r4
 8001cb4:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 ff4d 	bl	8002b58 <fpMultiply>
 8001cbe:	61b8      	str	r0, [r7, #24]
		v = scaleVector(v, fpDivide(intToFp(1),vLength));
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 ff13 	bl	8002aec <intToFp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 ff65 	bl	8002b9a <fpDivide>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f107 0010 	add.w	r0, r7, #16
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	ca06      	ldmia	r2, {r1, r2}
 8001cdc:	f000 ff85 	bl	8002bea <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7a9b      	ldrb	r3, [r3, #10]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 ff00 	bl	8002aec <intToFp>
 8001cec:	4604      	mov	r4, r0
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	69b8      	ldr	r0, [r7, #24]
 8001cf2:	f000 ff31 	bl	8002b58 <fpMultiply>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f000 ff4d 	bl	8002b9a <fpDivide>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f107 0008 	add.w	r0, r7, #8
 8001d06:	f107 0210 	add.w	r2, r7, #16
 8001d0a:	ca06      	ldmia	r2, {r1, r2}
 8001d0c:	f000 ff6d 	bl	8002bea <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	441a      	add	r2, r3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	441a      	add	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	441a      	add	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	441a      	add	r2, r3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d190      	bne.n	8001c72 <updateBullets+0x10>
	}

}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}

08001d5a <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001d5a:	b5b0      	push	{r4, r5, r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001d68:	e0e7      	b.n	8001f3a <detectBulletHit+0x1e0>
		//Check if bullet hit a wall or the moon
		vector_t v = {intToFp(gameState->moon.x-fpToInt(current->bullet.position.x)), intToFp(gameState->moon.y-fpToInt(current->bullet.position.y))};
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7a1b      	ldrb	r3, [r3, #8]
 8001d6e:	b29c      	uxth	r4, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fece 	bl	8002b16 <fpToInt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ae3      	subs	r3, r4, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 feb2 	bl	8002aec <intToFp>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	b29c      	uxth	r4, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 febd 	bl	8002b16 <fpToInt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ae3      	subs	r3, r4, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fea1 	bl	8002aec <intToFp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	60fb      	str	r3, [r7, #12]
		int distToMoon = (int)sqrt(fpToInt(v.x)*fpToInt(v.x)+fpToInt(v.y)*fpToInt(v.y));
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 feb0 	bl	8002b16 <fpToInt>
 8001db6:	4604      	mov	r4, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 feab 	bl	8002b16 <fpToInt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	fb03 f404 	mul.w	r4, r3, r4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fea4 	bl	8002b16 <fpToInt>
 8001dce:	4605      	mov	r5, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fe9f 	bl	8002b16 <fpToInt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	fb03 f305 	mul.w	r3, r3, r5
 8001dde:	4423      	add	r3, r4
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb9f 	bl	8000524 <__aeabi_i2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ec43 2b10 	vmov	d0, r2, r3
 8001dee:	f003 fe77 	bl	8005ae0 <sqrt>
 8001df2:	ec53 2b10 	vmov	r2, r3, d0
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fead 	bl	8000b58 <__aeabi_d2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	617b      	str	r3, [r7, #20]
		//TODO: afstandsberegning herover kan optimeres. Den beregnes allerede i updateBullet();

		int8_t hitInertObject = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	74fb      	strb	r3, [r7, #19]
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fe83 	bl	8002b16 <fpToInt>
 8001e10:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	dd1a      	ble.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fe7b 	bl	8002b16 <fpToInt>
 8001e20:	4603      	mov	r3, r0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001e22:	2b55      	cmp	r3, #85	; 0x55
 8001e24:	dc12      	bgt.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fe73 	bl	8002b16 <fpToInt>
 8001e30:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	dd0a      	ble.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fe6b 	bl	8002b16 <fpToInt>
 8001e40:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001e42:	2b9b      	cmp	r3, #155	; 0x9b
 8001e44:	dc02      	bgt.n	8001e4c <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	dc01      	bgt.n	8001e50 <detectBulletHit+0xf6>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <detectBulletHit+0xf8>
 8001e50:	2300      	movs	r3, #0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001e52:	74fb      	strb	r3, [r7, #19]
				distToMoon<=6;

		if(hitInertObject){ //TODO: add other boundaries
 8001e54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <detectBulletHit+0x10c>
			deleteBulletNode(&(gameState->bulletLL), current);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69f9      	ldr	r1, [r7, #28]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fe75 	bl	8003b50 <deleteBulletNode>
=======
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b089      	sub	sp, #36	; 0x24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001604:	e073      	b.n	80016ee <updateBullets+0xf8>

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7a1b      	ldrb	r3, [r3, #8]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f001 f800 	bl	8002612 <intToFp>
 8001612:	4602      	mov	r2, r0
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7a5b      	ldrb	r3, [r3, #9]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fff5 	bl	8002612 <intToFp>
 8001628:	4602      	mov	r2, r0
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	4618      	mov	r0, r3
 8001636:	f001 f88d 	bl	8002754 <fpAbs>
 800163a:	4604      	mov	r4, r0
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4618      	mov	r0, r3
 8001640:	f001 f888 	bl	8002754 <fpAbs>
 8001644:	4603      	mov	r3, r0
 8001646:	4423      	add	r3, r4
 8001648:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 800164c:	4618      	mov	r0, r3
 800164e:	f001 f816 	bl	800267e <fpMultiply>
 8001652:	4602      	mov	r2, r0
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 8001658:	2001      	movs	r0, #1
 800165a:	f000 ffda 	bl	8002612 <intToFp>
 800165e:	4602      	mov	r2, r0
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f001 f82a 	bl	80026c0 <fpDivide>
 800166c:	4603      	mov	r3, r0
 800166e:	f107 0014 	add.w	r0, r7, #20
 8001672:	f107 0214 	add.w	r2, r7, #20
 8001676:	ca06      	ldmia	r2, {r1, r2}
 8001678:	f001 f84a 	bl	8002710 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7a9b      	ldrb	r3, [r3, #10]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 ffc5 	bl	8002612 <intToFp>
 8001688:	4604      	mov	r4, r0
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	699a      	ldr	r2, [r3, #24]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f000 fff2 	bl	800267e <fpMultiply>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f001 f80e 	bl	80026c0 <fpDivide>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f107 000c 	add.w	r0, r7, #12
 80016aa:	f107 0214 	add.w	r2, r7, #20
 80016ae:	ca06      	ldmia	r2, {r1, r2}
 80016b0:	f001 f82e 	bl	8002710 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	441a      	add	r2, r3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	441a      	add	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	441a      	add	r2, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	441a      	add	r2, r3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d188      	bne.n	8001606 <updateBullets+0x10>
	}

}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}

080016fe <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 800170c:	e0a2      	b.n	8001854 <detectBulletHit+0x156>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 ff92 	bl	800263c <fpToInt>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]

		int8_t hitInertObject = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73bb      	strb	r3, [r7, #14]
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 ff89 	bl	800263c <fpToInt>
 800172a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 800172c:	2b04      	cmp	r3, #4
 800172e:	dd1a      	ble.n	8001766 <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 ff81 	bl	800263c <fpToInt>
 800173a:	4603      	mov	r3, r0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 800173c:	2b55      	cmp	r3, #85	; 0x55
 800173e:	dc12      	bgt.n	8001766 <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 ff79 	bl	800263c <fpToInt>
 800174a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 800174c:	2b01      	cmp	r3, #1
 800174e:	dd0a      	ble.n	8001766 <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 ff71 	bl	800263c <fpToInt>
 800175a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 800175c:	2b9b      	cmp	r3, #155	; 0x9b
 800175e:	dc02      	bgt.n	8001766 <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2b06      	cmp	r3, #6
 8001764:	d801      	bhi.n	800176a <detectBulletHit+0x6c>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <detectBulletHit+0x6e>
 800176a:	2300      	movs	r3, #0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 800176c:	73bb      	strb	r3, [r7, #14]
				distToMoon<=6;

		if(hitInertObject){ //TODO: add other boundaries
 800176e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <detectBulletHit+0x82>
			deleteBulletNode(&(gameState->bulletLL), current);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fbec 	bl	8003f58 <deleteBulletNode>
>>>>>>> Stashed changes
		}

		//Check if the bullet hit an enemy
		enemyNode_t* currentEnemy = gameState->enemyLL;
<<<<<<< Updated upstream
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 8001e6c:	e05f      	b.n	8001f2e <detectBulletHit+0x1d4>
			uint8_t hitEnemy = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	74bb      	strb	r3, [r7, #18]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fe4d 	bl	8002b16 <fpToInt>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fe45 	bl	8002b16 <fpToInt>
 8001e8c:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	db33      	blt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fe3d 	bl	8002b16 <fpToInt>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fe35 	bl	8002b16 <fpToInt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	dc22      	bgt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fe2c 	bl	8002b16 <fpToInt>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fe24 	bl	8002b16 <fpToInt>
 8001ece:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	db12      	blt.n	8001efa <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fe1c 	bl	8002b16 <fpToInt>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe14 	bl	8002b16 <fpToInt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001ef2:	429c      	cmp	r4, r3
 8001ef4:	dc01      	bgt.n	8001efa <detectBulletHit+0x1a0>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <detectBulletHit+0x1a2>
 8001efa:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001efc:	74bb      	strb	r3, [r7, #18]
			if(hitEnemy == 1){
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d111      	bne.n	8001f28 <detectBulletHit+0x1ce>
				gameState->score += 10;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	330a      	adds	r3, #10
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 fcd1 	bl	80038b8 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69f9      	ldr	r1, [r7, #28]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 fe18 	bl	8003b50 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 fd60 	bl	80039e8 <deleteEnemyNode>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d19c      	bne.n	8001e6e <detectBulletHit+0x114>
		}
		current = current->nextBulletAddress;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f af14 	bne.w	8001d6a <detectBulletHit+0x10>
	}
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdb0      	pop	{r4, r5, r7, pc}

08001f4c <drawBullets>:

void drawBullets(gameState_t* gameState){
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8001f5a:	e036      	b.n	8001fca <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fdd8 	bl	8002b16 <fpToInt>
 8001f66:	4604      	mov	r4, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fdd2 	bl	8002b16 <fpToInt>
 8001f72:	4603      	mov	r3, r0
 8001f74:	0fda      	lsrs	r2, r3, #31
 8001f76:	4413      	add	r3, r2
 8001f78:	105b      	asrs	r3, r3, #1
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff fd93 	bl	8001aa8 <gotoxy>
		printf(" ");
 8001f82:	2020      	movs	r0, #32
 8001f84:	f002 fd14 	bl	80049b0 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fdc2 	bl	8002b16 <fpToInt>
 8001f92:	4604      	mov	r4, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fdbc 	bl	8002b16 <fpToInt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	0fda      	lsrs	r2, r3, #31
 8001fa2:	4413      	add	r3, r2
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7ff fd7d 	bl	8001aa8 <gotoxy>
		printf("O");
 8001fae:	204f      	movs	r0, #79	; 0x4f
 8001fb0:	f002 fcfe 	bl	80049b0 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1c5      	bne.n	8001f5c <drawBullets+0x10>
	}
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
	...

08001fdc <NVIC_EnableIRQ>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2201      	movs	r2, #1
 8001fee:	fa02 f103 	lsl.w	r1, r2, r3
 8001ff2:	4a06      	ldr	r2, [pc, #24]	; (800200c <NVIC_EnableIRQ+0x30>)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <NVIC_SetPriority>:
=======
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
		while(currentEnemy != NULL){
 8001786:	e05f      	b.n	8001848 <detectBulletHit+0x14a>
			uint8_t hitEnemy = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	737b      	strb	r3, [r7, #13]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 ff53 	bl	800263c <fpToInt>
 8001796:	4604      	mov	r4, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 ff4b 	bl	800263c <fpToInt>
 80017a6:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80017a8:	429c      	cmp	r4, r3
 80017aa:	db33      	blt.n	8001814 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 ff43 	bl	800263c <fpToInt>
 80017b6:	4604      	mov	r4, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 ff3b 	bl	800263c <fpToInt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80017ca:	429c      	cmp	r4, r3
 80017cc:	dc22      	bgt.n	8001814 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 ff32 	bl	800263c <fpToInt>
 80017d8:	4604      	mov	r4, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 ff2a 	bl	800263c <fpToInt>
 80017e8:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 80017ea:	429c      	cmp	r4, r3
 80017ec:	db12      	blt.n	8001814 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 ff22 	bl	800263c <fpToInt>
 80017f8:	4604      	mov	r4, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 ff1a 	bl	800263c <fpToInt>
 8001808:	4603      	mov	r3, r0
 800180a:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 800180c:	429c      	cmp	r4, r3
 800180e:	dc01      	bgt.n	8001814 <detectBulletHit+0x116>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <detectBulletHit+0x118>
 8001814:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001816:	737b      	strb	r3, [r7, #13]
			if(hitEnemy == 1){
 8001818:	7b7b      	ldrb	r3, [r7, #13]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d111      	bne.n	8001842 <detectBulletHit+0x144>
				gameState->score += 10;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001822:	330a      	adds	r3, #10
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 fdd6 	bl	80033dc <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6979      	ldr	r1, [r7, #20]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fb8f 	bl	8003f58 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 800183a:	6939      	ldr	r1, [r7, #16]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f002 fad7 	bl	8003df0 <deleteEnemyNode>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	613b      	str	r3, [r7, #16]
		while(currentEnemy != NULL){
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d19c      	bne.n	8001788 <detectBulletHit+0x8a>
		}
		current = current->nextBulletAddress;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f47f af59 	bne.w	800170e <detectBulletHit+0x10>
	}
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}

08001866 <drawBullets>:

void drawBullets(gameState_t* gameState){
 8001866:	b590      	push	{r4, r7, lr}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8001874:	e036      	b.n	80018e4 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fede 	bl	800263c <fpToInt>
 8001880:	4604      	mov	r4, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fed8 	bl	800263c <fpToInt>
 800188c:	4603      	mov	r3, r0
 800188e:	0fda      	lsrs	r2, r3, #31
 8001890:	4413      	add	r3, r2
 8001892:	105b      	asrs	r3, r3, #1
 8001894:	4619      	mov	r1, r3
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fdd0 	bl	800143c <gotoxy>
		printf(" ");
 800189c:	2020      	movs	r0, #32
 800189e:	f003 fe67 	bl	8005570 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fec8 	bl	800263c <fpToInt>
 80018ac:	4604      	mov	r4, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fec2 	bl	800263c <fpToInt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	0fda      	lsrs	r2, r3, #31
 80018bc:	4413      	add	r3, r2
 80018be:	105b      	asrs	r3, r3, #1
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff fdba 	bl	800143c <gotoxy>
		printf("O");
 80018c8:	204f      	movs	r0, #79	; 0x4f
 80018ca:	f003 fe51 	bl	8005570 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1c5      	bne.n	8001876 <drawBullets+0x10>
	}
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}

080018f4 <NVIC_EnableIRQ>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2201      	movs	r2, #1
 8001906:	fa02 f103 	lsl.w	r1, r2, r3
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <NVIC_EnableIRQ+0x30>)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <NVIC_SetPriority>:
>>>>>>> Stashed changes

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	da0b      	bge.n	800203c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <NVIC_SetPriority+0x4c>)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	3b04      	subs	r3, #4
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800203a:	e009      	b.n	8002050 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <NVIC_SetPriority+0x50>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	e000e100 	.word	0xe000e100

08002064 <initJoystick>:
=======
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da0b      	bge.n	8001954 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <NVIC_SetPriority+0x4c>)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	3b04      	subs	r3, #4
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001952:	e009      	b.n	8001968 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <NVIC_SetPriority+0x50>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	e000e100 	.word	0xe000e100

0800197c <initJoystick>:
>>>>>>> Stashed changes
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
<<<<<<< Updated upstream
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <initJoystick+0x120>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	4a45      	ldr	r2, [pc, #276]	; (8002184 <initJoystick+0x120>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <initJoystick+0x120>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	4a42      	ldr	r2, [pc, #264]	; (8002184 <initJoystick+0x120>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <initJoystick+0x120>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <initJoystick+0x120>)
 8002086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800208a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 800208c:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <initJoystick+0x124>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3d      	ldr	r2, [pc, #244]	; (8002188 <initJoystick+0x124>)
 8002092:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002096:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002098:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <initJoystick+0x124>)
 800209a:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <initJoystick+0x124>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <initJoystick+0x124>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a38      	ldr	r2, [pc, #224]	; (8002188 <initJoystick+0x124>)
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <initJoystick+0x124>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a35      	ldr	r2, [pc, #212]	; (8002188 <initJoystick+0x124>)
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	60d3      	str	r3, [r2, #12]
=======
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <initJoystick+0x120>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a45      	ldr	r2, [pc, #276]	; (8001a9c <initJoystick+0x120>)
 8001986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198a:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 800198c:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <initJoystick+0x120>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <initJoystick+0x120>)
 8001992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001996:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <initJoystick+0x120>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <initJoystick+0x120>)
 800199e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019a2:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <initJoystick+0x124>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <initJoystick+0x124>)
 80019aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019ae:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80019b0:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <initJoystick+0x124>)
 80019b2:	4a3b      	ldr	r2, [pc, #236]	; (8001aa0 <initJoystick+0x124>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <initJoystick+0x124>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <initJoystick+0x124>)
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <initJoystick+0x124>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a35      	ldr	r2, [pc, #212]	; (8001aa0 <initJoystick+0x124>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
<<<<<<< Updated upstream
 80020b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80020c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80020d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80020e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <initJoystick+0x124>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <initJoystick+0x124>)
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <initJoystick+0x124>)
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <initJoystick+0x124>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <initJoystick+0x124>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <initJoystick+0x124>)
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <initJoystick+0x124>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <initJoystick+0x124>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <initJoystick+0x128>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <initJoystick+0x128>)
 8002126:	f023 030c 	bic.w	r3, r3, #12
 800212a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <initJoystick+0x128>)
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <initJoystick+0x128>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <initJoystick+0x128>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <initJoystick+0x128>)
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <initJoystick+0x128>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a11      	ldr	r2, [pc, #68]	; (800218c <initJoystick+0x128>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <initJoystick+0x128>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <initJoystick+0x128>)
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <initJoystick+0x128>)
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <initJoystick+0x128>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <initJoystick+0x128>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <initJoystick+0x128>)
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <initJoystick+0x128>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <initJoystick+0x128>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	60d3      	str	r3, [r2, #12]

}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800

08002190 <centerIsPressed>:

uint8_t centerIsPressed(){
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <centerIsPressed+0x50>)
 8002196:	8a1b      	ldrh	r3, [r3, #16]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <centerIsPressed+0x2c>
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <centerIsPressed+0x54>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <centerIsPressed+0x58>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b1e      	cmp	r3, #30
 80021ae:	d905      	bls.n	80021bc <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <centerIsPressed+0x54>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <centerIsPressed+0x58>)
 80021b6:	6013      	str	r3, [r2, #0]
		 return 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e00c      	b.n	80021d6 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <centerIsPressed+0x50>)
 80021be:	8a1b      	ldrh	r3, [r3, #16]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d104      	bne.n	80021d4 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <centerIsPressed+0x54>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3b1e      	subs	r3, #30
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <centerIsPressed+0x58>)
 80021d2:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80021d4:	2300      	movs	r3, #0
	 }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	48000400 	.word	0x48000400
 80021e4:	200001cc 	.word	0x200001cc
 80021e8:	200001b4 	.word	0x200001b4

080021ec <upIsPressed>:

uint8_t upIsPressed(){
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 80021f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021f4:	8a1b      	ldrh	r3, [r3, #16]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <upIsPressed+0x2e>
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <upIsPressed+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <upIsPressed+0x58>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b1e      	cmp	r3, #30
 800220c:	d905      	bls.n	800221a <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <upIsPressed+0x54>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <upIsPressed+0x58>)
 8002214:	6013      	str	r3, [r2, #0]
			 return 1;
 8002216:	2301      	movs	r3, #1
 8002218:	e00d      	b.n	8002236 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800221a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800221e:	8a1b      	ldrh	r3, [r3, #16]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <upIsPressed+0x54>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3b1e      	subs	r3, #30
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <upIsPressed+0x58>)
 8002232:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8002234:	2300      	movs	r3, #0
		 }
	 }
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	200001cc 	.word	0x200001cc
 8002244:	200001b8 	.word	0x200001b8

08002248 <downIsPressed>:

uint8_t downIsPressed(){
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <downIsPressed+0x50>)
 800224e:	8a1b      	ldrh	r3, [r3, #16]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <downIsPressed+0x2c>
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <downIsPressed+0x54>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <downIsPressed+0x58>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b1e      	cmp	r3, #30
 8002266:	d905      	bls.n	8002274 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <downIsPressed+0x54>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <downIsPressed+0x58>)
 800226e:	6013      	str	r3, [r2, #0]
			 return 1;
 8002270:	2301      	movs	r3, #1
 8002272:	e00c      	b.n	800228e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <downIsPressed+0x50>)
 8002276:	8a1b      	ldrh	r3, [r3, #16]
 8002278:	b29b      	uxth	r3, r3
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <downIsPressed+0x54>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3b1e      	subs	r3, #30
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <downIsPressed+0x58>)
 800228a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 800228c:	2300      	movs	r3, #0
		 }
	 }
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	48000400 	.word	0x48000400
 800229c:	200001cc 	.word	0x200001cc
 80022a0:	200001bc 	.word	0x200001bc

080022a4 <initTimer>:
=======
 80019d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019de:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80019e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80019ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80019fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <initJoystick+0x124>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <initJoystick+0x124>)
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <initJoystick+0x124>)
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <initJoystick+0x124>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <initJoystick+0x124>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <initJoystick+0x124>)
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <initJoystick+0x124>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <initJoystick+0x124>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <initJoystick+0x128>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <initJoystick+0x128>)
 8001a3e:	f023 030c 	bic.w	r3, r3, #12
 8001a42:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <initJoystick+0x128>)
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <initJoystick+0x128>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <initJoystick+0x128>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <initJoystick+0x128>)
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <initJoystick+0x128>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <initJoystick+0x128>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <initJoystick+0x128>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <initJoystick+0x128>)
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <initJoystick+0x128>)
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <initJoystick+0x128>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <initJoystick+0x128>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <initJoystick+0x128>)
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <initJoystick+0x128>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <initJoystick+0x128>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	60d3      	str	r3, [r2, #12]

}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800

08001aa8 <centerIsPressed>:

uint8_t centerIsPressed(){
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <centerIsPressed+0x50>)
 8001aae:	8a1b      	ldrh	r3, [r3, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <centerIsPressed+0x2c>
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <centerIsPressed+0x54>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <centerIsPressed+0x58>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b1e      	cmp	r3, #30
 8001ac6:	d905      	bls.n	8001ad4 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <centerIsPressed+0x54>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <centerIsPressed+0x58>)
 8001ace:	6013      	str	r3, [r2, #0]
		 return 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e00c      	b.n	8001aee <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <centerIsPressed+0x50>)
 8001ad6:	8a1b      	ldrh	r3, [r3, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <centerIsPressed+0x54>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <centerIsPressed+0x58>)
 8001aea:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001aec:	2300      	movs	r3, #0
	 }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	48000400 	.word	0x48000400
 8001afc:	200001c8 	.word	0x200001c8
 8001b00:	200001b0 	.word	0x200001b0

08001b04 <upIsPressed>:

uint8_t upIsPressed(){
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001b08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b0c:	8a1b      	ldrh	r3, [r3, #16]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <upIsPressed+0x2e>
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <upIsPressed+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <upIsPressed+0x58>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b1e      	cmp	r3, #30
 8001b24:	d905      	bls.n	8001b32 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <upIsPressed+0x54>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <upIsPressed+0x58>)
 8001b2c:	6013      	str	r3, [r2, #0]
			 return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00d      	b.n	8001b4e <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001b32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b36:	8a1b      	ldrh	r3, [r3, #16]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d104      	bne.n	8001b4c <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <upIsPressed+0x54>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3b1e      	subs	r3, #30
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <upIsPressed+0x58>)
 8001b4a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001b4c:	2300      	movs	r3, #0
		 }
	 }
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	200001c8 	.word	0x200001c8
 8001b5c:	200001b4 	.word	0x200001b4

08001b60 <downIsPressed>:

uint8_t downIsPressed(){
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <downIsPressed+0x50>)
 8001b66:	8a1b      	ldrh	r3, [r3, #16]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <downIsPressed+0x2c>
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <downIsPressed+0x54>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <downIsPressed+0x58>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b1e      	cmp	r3, #30
 8001b7e:	d905      	bls.n	8001b8c <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <downIsPressed+0x54>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <downIsPressed+0x58>)
 8001b86:	6013      	str	r3, [r2, #0]
			 return 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e00c      	b.n	8001ba6 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <downIsPressed+0x50>)
 8001b8e:	8a1b      	ldrh	r3, [r3, #16]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d104      	bne.n	8001ba4 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <downIsPressed+0x54>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b1e      	subs	r3, #30
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <downIsPressed+0x58>)
 8001ba2:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001ba4:	2300      	movs	r3, #0
		 }
	 }
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	200001c8 	.word	0x200001c8
 8001bb8:	200001b8 	.word	0x200001b8

08001bbc <initTimer>:
>>>>>>> Stashed changes
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
<<<<<<< Updated upstream
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <initTimer+0x60>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a15      	ldr	r2, [pc, #84]	; (8002304 <initTimer+0x60>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <initTimer+0x64>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <initTimer+0x64>)
 80022bc:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80022c0:	f023 030f 	bic.w	r3, r3, #15
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <initTimer+0x64>)
 80022ca:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <initTimer+0x64>)
 80022d2:	2209      	movs	r2, #9
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <initTimer+0x64>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <initTimer+0x64>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <initTimer+0x64>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <initTimer+0x64>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80022f2:	2100      	movs	r1, #0
 80022f4:	2018      	movs	r0, #24
 80022f6:	f7ff fe8b 	bl	8002010 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80022fa:	2018      	movs	r0, #24
 80022fc:	f7ff fe6e 	bl	8001fdc <NVIC_EnableIRQ>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	40014000 	.word	0x40014000

0800230c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	runtime++;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a06      	ldr	r2, [pc, #24]	; (8002330 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002318:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6113      	str	r3, [r2, #16]
 }
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	200001cc 	.word	0x200001cc
 8002334:	40014000 	.word	0x40014000

08002338 <I2C_init>:
=======
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <initTimer+0x60>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <initTimer+0x60>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <initTimer+0x64>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <initTimer+0x64>)
 8001bd4:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <initTimer+0x64>)
 8001be2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <initTimer+0x64>)
 8001bea:	2209      	movs	r2, #9
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <initTimer+0x64>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <initTimer+0x64>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <initTimer+0x64>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <initTimer+0x64>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2018      	movs	r0, #24
 8001c0e:	f7ff fe8b 	bl	8001928 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001c12:	2018      	movs	r0, #24
 8001c14:	f7ff fe6e 	bl	80018f4 <NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40014000 	.word	0x40014000

08001c24 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	runtime++;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001c30:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6113      	str	r3, [r2, #16]
 }
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200001c8 	.word	0x200001c8
 8001c4c:	40014000 	.word	0x40014000

08001c50 <I2C_Write>:

// TIMER ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


//I2C shit TODO: ret kommentar
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	717b      	strb	r3, [r7, #5]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 8001c62:	bf00      	nop
 8001c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c68:	4825      	ldr	r0, [pc, #148]	; (8001d00 <I2C_Write+0xb0>)
 8001c6a:	f7fe fee3 	bl	8000a34 <I2C_GetFlagStatus>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d0f7      	beq.n	8001c64 <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 8001c74:	88f9      	ldrh	r1, [r7, #6]
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c80:	2201      	movs	r2, #1
 8001c82:	481f      	ldr	r0, [pc, #124]	; (8001d00 <I2C_Write+0xb0>)
 8001c84:	f7fe fe8e 	bl	80009a4 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8001c88:	bf00      	nop
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <I2C_Write+0xb0>)
 8001c8e:	f7fe fed1 	bl	8000a34 <I2C_GetFlagStatus>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f8      	beq.n	8001c8a <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 8001c98:	797b      	ldrb	r3, [r7, #5]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4818      	ldr	r0, [pc, #96]	; (8001d00 <I2C_Write+0xb0>)
 8001c9e:	f7fe fead 	bl	80009fc <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 8001ca2:	bf00      	nop
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <I2C_Write+0xb0>)
 8001ca8:	f7fe fec4 	bl	8000a34 <I2C_GetFlagStatus>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f8      	beq.n	8001ca4 <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 8001cb2:	88f9      	ldrh	r1, [r7, #6]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <I2C_Write+0xb0>)
 8001cc0:	f7fe fe70 	bl	80009a4 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8001cc4:	bf00      	nop
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <I2C_Write+0xb0>)
 8001cca:	f7fe feb3 	bl	8000a34 <I2C_GetFlagStatus>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f8      	beq.n	8001cc6 <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 8001cd4:	793b      	ldrb	r3, [r7, #4]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <I2C_Write+0xb0>)
 8001cda:	f7fe fe8f 	bl	80009fc <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8001cde:	bf00      	nop
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <I2C_Write+0xb0>)
 8001ce4:	f7fe fea6 	bl	8000a34 <I2C_GetFlagStatus>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f8      	beq.n	8001ce0 <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8001cee:	2120      	movs	r1, #32
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <I2C_Write+0xb0>)
 8001cf2:	f7fe febe 	bl	8000a72 <I2C_ClearFlag>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005400 	.word	0x40005400

08001d04 <I2C_Read>:


uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	603a      	str	r2, [r7, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	717b      	strb	r3, [r7, #5]
 8001d16:	4613      	mov	r3, r2
 8001d18:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 8001d1e:	bf00      	nop
 8001d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d24:	4830      	ldr	r0, [pc, #192]	; (8001de8 <I2C_Read+0xe4>)
 8001d26:	f7fe fe85 	bl	8000a34 <I2C_GetFlagStatus>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d0f7      	beq.n	8001d20 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 8001d30:	88f9      	ldrh	r1, [r7, #6]
 8001d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	482a      	ldr	r0, [pc, #168]	; (8001de8 <I2C_Read+0xe4>)
 8001d3e:	f7fe fe31 	bl	80009a4 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8001d42:	bf00      	nop
 8001d44:	2102      	movs	r1, #2
 8001d46:	4828      	ldr	r0, [pc, #160]	; (8001de8 <I2C_Read+0xe4>)
 8001d48:	f7fe fe74 	bl	8000a34 <I2C_GetFlagStatus>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f8      	beq.n	8001d44 <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4824      	ldr	r0, [pc, #144]	; (8001de8 <I2C_Read+0xe4>)
 8001d58:	f7fe fe50 	bl	80009fc <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 8001d5c:	bf00      	nop
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <I2C_Read+0xe4>)
 8001d62:	f7fe fe67 	bl	8000a34 <I2C_GetFlagStatus>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f8      	beq.n	8001d5e <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 8001d6c:	793a      	ldrb	r2, [r7, #4]
 8001d6e:	88f9      	ldrh	r1, [r7, #6]
 8001d70:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <I2C_Read+0xe4>)
 8001d7c:	f7fe fe12 	bl	80009a4 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
 8001d84:	e01b      	b.n	8001dbe <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 8001d86:	bf00      	nop
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <I2C_Read+0xe4>)
 8001d8c:	f7fe fe52 	bl	8000a34 <I2C_GetFlagStatus>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f8      	beq.n	8001d88 <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d908      	bls.n	8001dae <I2C_Read+0xaa>
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	18d4      	adds	r4, r2, r3
 8001da2:	4811      	ldr	r0, [pc, #68]	; (8001de8 <I2C_Read+0xe4>)
 8001da4:	f7fe fe39 	bl	8000a1a <I2C_ReceiveData>
 8001da8:	4603      	mov	r3, r0
 8001daa:	7023      	strb	r3, [r4, #0]
 8001dac:	e004      	b.n	8001db8 <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <I2C_Read+0xe4>)
 8001db0:	f7fe fe33 	bl	8000a1a <I2C_ReceiveData>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73bb      	strb	r3, [r7, #14]
 8001dbe:	7bba      	ldrb	r2, [r7, #14]
 8001dc0:	793b      	ldrb	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3df      	bcc.n	8001d86 <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8001dc6:	bf00      	nop
 8001dc8:	2120      	movs	r1, #32
 8001dca:	4807      	ldr	r0, [pc, #28]	; (8001de8 <I2C_Read+0xe4>)
 8001dcc:	f7fe fe32 	bl	8000a34 <I2C_GetFlagStatus>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f8      	beq.n	8001dc8 <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <I2C_Read+0xe4>)
 8001dda:	f7fe fe4a 	bl	8000a72 <I2C_ClearFlag>
>>>>>>> Stashed changes

    return val;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	40005400 	.word	0x40005400

08001dec <I2C_init>:

void I2C_init()
{
<<<<<<< Updated upstream
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
=======
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
<<<<<<< Updated upstream
 800233c:	4b4f      	ldr	r3, [pc, #316]	; (800247c <I2C_init+0x144>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4a4e      	ldr	r2, [pc, #312]	; (800247c <I2C_init+0x144>)
 8002342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002346:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002348:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <I2C_init+0x148>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <I2C_init+0x148>)
 800234e:	f023 030f 	bic.w	r3, r3, #15
 8002352:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002354:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <I2C_init+0x148>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	4a49      	ldr	r2, [pc, #292]	; (8002480 <I2C_init+0x148>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8002360:	4b47      	ldr	r3, [pc, #284]	; (8002480 <I2C_init+0x148>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <I2C_init+0x148>)
 8002366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <I2C_init+0x148>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	4a43      	ldr	r2, [pc, #268]	; (8002480 <I2C_init+0x148>)
 8002372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002376:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <I2C_init+0x148>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a40      	ldr	r2, [pc, #256]	; (8002480 <I2C_init+0x148>)
 800237e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002382:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002384:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <I2C_init+0x148>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <I2C_init+0x148>)
 800238a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800238e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <I2C_init+0x148>)
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <I2C_init+0x148>)
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239c:	b29b      	uxth	r3, r3
 800239e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <I2C_init+0x148>)
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4a36      	ldr	r2, [pc, #216]	; (8002480 <I2C_init+0x148>)
 80023a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <I2C_init+0x148>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <I2C_init+0x148>)
 80023b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80023ba:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <I2C_init+0x148>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <I2C_init+0x148>)
 80023c2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80023c6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <I2C_init+0x148>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <I2C_init+0x148>)
 80023ce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80023d2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <I2C_init+0x148>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <I2C_init+0x148>)
 80023da:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80023de:	60d3      	str	r3, [r2, #12]
=======
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <I2C_init+0x15c>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <I2C_init+0x15c>)
 8001df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfa:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <I2C_init+0x160>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <I2C_init+0x160>)
 8001e02:	f023 030f 	bic.w	r3, r3, #15
 8001e06:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <I2C_init+0x160>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <I2C_init+0x160>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <I2C_init+0x160>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	4a4c      	ldr	r2, [pc, #304]	; (8001f4c <I2C_init+0x160>)
 8001e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <I2C_init+0x160>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <I2C_init+0x160>)
 8001e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <I2C_init+0x160>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a46      	ldr	r2, [pc, #280]	; (8001f4c <I2C_init+0x160>)
 8001e32:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001e36:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001e38:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <I2C_init+0x160>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <I2C_init+0x160>)
 8001e3e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001e42:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <I2C_init+0x160>)
 8001e46:	889b      	ldrh	r3, [r3, #4]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4a40      	ldr	r2, [pc, #256]	; (8001f4c <I2C_init+0x160>)
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <I2C_init+0x160>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <I2C_init+0x160>)
 8001e5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <I2C_init+0x160>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <I2C_init+0x160>)
 8001e6a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001e6e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <I2C_init+0x160>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a35      	ldr	r2, [pc, #212]	; (8001f4c <I2C_init+0x160>)
 8001e76:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8001e7a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <I2C_init+0x160>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <I2C_init+0x160>)
 8001e82:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001e86:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <I2C_init+0x160>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <I2C_init+0x160>)
 8001e8e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001e92:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
<<<<<<< Updated upstream
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <I2C_init+0x144>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <I2C_init+0x144>)
 80023e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ea:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <I2C_init+0x14c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a24      	ldr	r2, [pc, #144]	; (8002484 <I2C_init+0x14c>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <I2C_init+0x14c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4921      	ldr	r1, [pc, #132]	; (8002484 <I2C_init+0x14c>)
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <I2C_init+0x150>)
 8002400:	4013      	ands	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <I2C_init+0x14c>)
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <I2C_init+0x14c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <I2C_init+0x14c>)
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <I2C_init+0x14c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <I2C_init+0x14c>)
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <I2C_init+0x154>)
 8002418:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <I2C_init+0x14c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <I2C_init+0x14c>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <I2C_init+0x14c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <I2C_init+0x14c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <I2C_init+0x14c>)
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <I2C_init+0x14c>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <I2C_init+0x14c>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <I2C_init+0x14c>)
 8002440:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002444:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <I2C_init+0x14c>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <I2C_init+0x14c>)
 800244c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002450:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <I2C_init+0x14c>)
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <I2C_init+0x14c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <I2C_init+0x14c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <I2C_init+0x14c>)
 8002460:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002468:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <I2C_init+0x14c>)
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <I2C_init+0x14c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	6053      	str	r3, [r2, #4]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40021000 	.word	0x40021000
 8002480:	48000400 	.word	0x48000400
 8002484:	40005400 	.word	0x40005400
 8002488:	00cfe0ff 	.word	0x00cfe0ff
 800248c:	10805e89 	.word	0x10805e89

08002490 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <analogConfigPorts+0x140>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <analogConfigPorts+0x140>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6153      	str	r3, [r2, #20]

	int pin = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 80024a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	0052      	lsls	r2, r2, #1
 80024b0:	2103      	movs	r1, #3
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	43d2      	mvns	r2, r2
 80024b8:	4611      	mov	r1, r2
 80024ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024be:	400b      	ands	r3, r1
 80024c0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 80024c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 80024ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	2103      	movs	r1, #3
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	43d2      	mvns	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024e6:	400b      	ands	r3, r1
 80024e8:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 80024ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	0052      	lsls	r2, r2, #1
 80024f4:	2103      	movs	r1, #3
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002500:	430b      	orrs	r3, r1
 8002502:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <analogConfigPorts+0x140>)
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	4a31      	ldr	r2, [pc, #196]	; (80025d0 <analogConfigPorts+0x140>)
 800250a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800250e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <analogConfigPorts+0x140>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <analogConfigPorts+0x140>)
 8002516:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 800251a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <analogConfigPorts+0x140>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <analogConfigPorts+0x140>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <analogConfigPorts+0x144>)
 800253c:	4013      	ands	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800254a:	f023 030f 	bic.w	r3, r3, #15
 800254e:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e002      	b.n	800256c <analogConfigPorts+0xdc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002572:	dbf8      	blt.n	8002566 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800257e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002582:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002584:	bf00      	nop
 8002586:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	dafa      	bge.n	8002586 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e002      	b.n	800259c <analogConfigPorts+0x10c>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b63      	cmp	r3, #99	; 0x63
 80025a0:	ddf9      	ble.n	8002596 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 80025a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 80025b2:	bf00      	nop
 80025b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f8      	beq.n	80025b4 <analogConfigPorts+0x124>
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	fdffc007 	.word	0xfdffc007

080025d8 <readPotentiometer>:

uint16_t readPotentiometer(){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 80025de:	2300      	movs	r3, #0
 80025e0:	2201      	movs	r2, #1
 80025e2:	2101      	movs	r1, #1
 80025e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025e8:	f7fe fc5a 	bl	8000ea0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 80025ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025f0:	f7fe fd4e 	bl	8001090 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 80025f4:	bf00      	nop
 80025f6:	2104      	movs	r1, #4
 80025f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025fc:	f7fe fd65 	bl	80010ca <ADC_GetFlagStatus>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f7      	beq.n	80025f6 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8002606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800260a:	f7fe fd51 	bl	80010b0 <ADC_GetConversionValue>
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002612:	88fb      	ldrh	r3, [r7, #6]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8002622:	2309      	movs	r3, #9
 8002624:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	79fa      	ldrb	r2, [r7, #7]
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	2103      	movs	r1, #3
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	43d2      	mvns	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800263e:	400b      	ands	r3, r1
 8002640:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8002642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	0052      	lsls	r2, r2, #1
 800264c:	2102      	movs	r1, #2
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	4611      	mov	r1, r2
 8002654:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002658:	430b      	orrs	r3, r1
 800265a:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 800265c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002660:	889b      	ldrh	r3, [r3, #4]
 8002662:	b29b      	uxth	r3, r3
 8002664:	b21a      	sxth	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	b21b      	sxth	r3, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	b21b      	sxth	r3, r3
 8002674:	4013      	ands	r3, r2
 8002676:	b21a      	sxth	r2, r3
 8002678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800267c:	b292      	uxth	r2, r2
 800267e:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 8002680:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002688:	8892      	ldrh	r2, [r2, #4]
 800268a:	b292      	uxth	r2, r2
 800268c:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 800268e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	0052      	lsls	r2, r2, #1
 8002698:	2103      	movs	r1, #3
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	43d2      	mvns	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026a6:	400b      	ands	r3, r1
 80026a8:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 80026aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	0052      	lsls	r2, r2, #1
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	4611      	mov	r1, r2
 80026bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 80026c4:	2307      	movs	r3, #7
 80026c6:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 80026c8:	4b46      	ldr	r3, [pc, #280]	; (80027e4 <initRGB+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	2103      	movs	r1, #3
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	43d2      	mvns	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4a42      	ldr	r2, [pc, #264]	; (80027e4 <initRGB+0x1c8>)
 80026dc:	400b      	ands	r3, r1
 80026de:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <initRGB+0x1c8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	0052      	lsls	r2, r2, #1
 80026e8:	2102      	movs	r1, #2
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4611      	mov	r1, r2
 80026f0:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <initRGB+0x1c8>)
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <initRGB+0x1c8>)
 80026f8:	889b      	ldrh	r3, [r3, #4]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	b21b      	sxth	r3, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	b21b      	sxth	r3, r3
 800270c:	4013      	ands	r3, r2
 800270e:	b21a      	sxth	r2, r3
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <initRGB+0x1c8>)
 8002712:	b292      	uxth	r2, r2
 8002714:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 8002716:	4a33      	ldr	r2, [pc, #204]	; (80027e4 <initRGB+0x1c8>)
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <initRGB+0x1c8>)
 800271a:	8892      	ldrh	r2, [r2, #4]
 800271c:	b292      	uxth	r2, r2
 800271e:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <initRGB+0x1c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	79fa      	ldrb	r2, [r7, #7]
 8002726:	0052      	lsls	r2, r2, #1
 8002728:	2103      	movs	r1, #3
 800272a:	fa01 f202 	lsl.w	r2, r1, r2
 800272e:	43d2      	mvns	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <initRGB+0x1c8>)
 8002734:	400b      	ands	r3, r1
 8002736:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <initRGB+0x1c8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <initRGB+0x1c8>)
 800274a:	430b      	orrs	r3, r1
 800274c:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 800274e:	2304      	movs	r3, #4
 8002750:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <initRGB+0x1cc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	0052      	lsls	r2, r2, #1
 800275a:	2103      	movs	r1, #3
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	43d2      	mvns	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <initRGB+0x1cc>)
 8002766:	400b      	ands	r3, r1
 8002768:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <initRGB+0x1cc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	0052      	lsls	r2, r2, #1
 8002772:	2102      	movs	r1, #2
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <initRGB+0x1cc>)
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <initRGB+0x1cc>)
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	b29b      	uxth	r3, r3
 8002786:	b21a      	sxth	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	b21b      	sxth	r3, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	b21b      	sxth	r3, r3
 8002796:	4013      	ands	r3, r2
 8002798:	b21a      	sxth	r2, r3
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <initRGB+0x1cc>)
 800279c:	b292      	uxth	r2, r2
 800279e:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <initRGB+0x1cc>)
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <initRGB+0x1cc>)
 80027a4:	8892      	ldrh	r2, [r2, #4]
 80027a6:	b292      	uxth	r2, r2
 80027a8:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <initRGB+0x1cc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	0052      	lsls	r2, r2, #1
 80027b2:	2103      	movs	r1, #3
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	43d2      	mvns	r2, r2
 80027ba:	4611      	mov	r1, r2
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <initRGB+0x1cc>)
 80027be:	400b      	ands	r3, r1
 80027c0:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <initRGB+0x1cc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	79fa      	ldrb	r2, [r7, #7]
 80027c8:	0052      	lsls	r2, r2, #1
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <initRGB+0x1cc>)
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	48000800 	.word	0x48000800
 80027e8:	48000400 	.word	0x48000400

080027ec <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <RGBColor+0x88>)
 80027f6:	8a9b      	ldrh	r3, [r3, #20]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <RGBColor+0x88>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	b29b      	uxth	r3, r3
 8002802:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <RGBColor+0x8c>)
 8002806:	8a9b      	ldrh	r3, [r3, #20]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <RGBColor+0x8c>)
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	b29b      	uxth	r3, r3
 8002812:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002818:	8a9b      	ldrh	r3, [r3, #20]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002824:	b29b      	uxth	r3, r3
 8002826:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d104      	bne.n	800283a <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <RGBColor+0x88>)
 8002832:	8a9b      	ldrh	r3, [r3, #20]
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <RGBColor+0x88>)
 8002836:	2200      	movs	r2, #0
 8002838:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3301      	adds	r3, #1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d104      	bne.n	800284e <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <RGBColor+0x8c>)
 8002846:	8a9b      	ldrh	r3, [r3, #20]
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <RGBColor+0x8c>)
 800284a:	2200      	movs	r2, #0
 800284c:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3302      	adds	r3, #2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800285c:	8a9b      	ldrh	r3, [r3, #20]
 800285e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002862:	2200      	movs	r2, #0
 8002864:	829a      	strh	r2, [r3, #20]
	}
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	48000400 	.word	0x48000400
 8002878:	48000800 	.word	0x48000800

0800287c <spawnEnemy>:
=======
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <I2C_init+0x15c>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <I2C_init+0x15c>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <I2C_init+0x164>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <I2C_init+0x164>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <I2C_init+0x164>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4927      	ldr	r1, [pc, #156]	; (8001f50 <I2C_init+0x164>)
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <I2C_init+0x168>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <I2C_init+0x164>)
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <I2C_init+0x164>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001ec0:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <I2C_init+0x164>)
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <I2C_init+0x164>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <I2C_init+0x164>)
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <I2C_init+0x16c>)
 8001ecc:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <I2C_init+0x164>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <I2C_init+0x164>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <I2C_init+0x164>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <I2C_init+0x164>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <I2C_init+0x164>)
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <I2C_init+0x164>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <I2C_init+0x164>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <I2C_init+0x164>)
 8001ef4:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001ef8:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <I2C_init+0x164>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <I2C_init+0x164>)
 8001f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f04:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <I2C_init+0x164>)
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <I2C_init+0x164>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <I2C_init+0x164>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <I2C_init+0x164>)
 8001f14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f1c:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <I2C_init+0x164>)
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <I2C_init+0x164>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 8001f26:	2201      	movs	r2, #1
 8001f28:	2107      	movs	r1, #7
 8001f2a:	2098      	movs	r0, #152	; 0x98
 8001f2c:	f7ff fe90 	bl	8001c50 <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 8001f30:	2200      	movs	r2, #0
 8001f32:	210a      	movs	r1, #10
 8001f34:	2098      	movs	r0, #152	; 0x98
 8001f36:	f7ff fe8b 	bl	8001c50 <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	2109      	movs	r1, #9
 8001f3e:	2098      	movs	r0, #152	; 0x98
 8001f40:	f7ff fe86 	bl	8001c50 <I2C_Write>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	40005400 	.word	0x40005400
 8001f54:	00cfe0ff 	.word	0x00cfe0ff
 8001f58:	10805e89 	.word	0x10805e89

08001f5c <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <analogConfigPorts+0x140>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <analogConfigPorts+0x140>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8001f72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	43d2      	mvns	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8001f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8001f9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	0052      	lsls	r2, r2, #1
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	43d2      	mvns	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8001fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	0052      	lsls	r2, r2, #1
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <analogConfigPorts+0x140>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a31      	ldr	r2, [pc, #196]	; (800209c <analogConfigPorts+0x140>)
 8001fd6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <analogConfigPorts+0x140>)
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <analogConfigPorts+0x140>)
 8001fe2:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8001fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <analogConfigPorts+0x140>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <analogConfigPorts+0x140>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8001ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8001ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <analogConfigPorts+0x144>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 800200c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002016:	f023 030f 	bic.w	r3, r3, #15
 800201a:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 800201c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e002      	b.n	8002038 <analogConfigPorts+0xdc>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203e:	dbf8      	blt.n	8002032 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800204a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800204e:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002050:	bf00      	nop
 8002052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	dafa      	bge.n	8002052 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	e002      	b.n	8002068 <analogConfigPorts+0x10c>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b63      	cmp	r3, #99	; 0x63
 800206c:	ddf9      	ble.n	8002062 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 800206e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 800207e:	bf00      	nop
 8002080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f8      	beq.n	8002080 <analogConfigPorts+0x124>
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	fdffc007 	.word	0xfdffc007

080020a4 <readPotentiometer>:

uint16_t readPotentiometer(){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 80020aa:	2300      	movs	r3, #0
 80020ac:	2201      	movs	r2, #1
 80020ae:	2101      	movs	r1, #1
 80020b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020b4:	f7fe fa60 	bl	8000578 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 80020b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020bc:	f7fe fb54 	bl	8000768 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 80020c0:	bf00      	nop
 80020c2:	2104      	movs	r1, #4
 80020c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020c8:	f7fe fb6b 	bl	80007a2 <ADC_GetFlagStatus>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f7      	beq.n	80020c2 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 80020d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d6:	f7fe fb57 	bl	8000788 <ADC_GetConversionValue>
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
	return potVal;
 80020de:	88fb      	ldrh	r3, [r7, #6]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 80020ee:	2309      	movs	r3, #9
 80020f0:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 80020f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	0052      	lsls	r2, r2, #1
 80020fc:	2103      	movs	r1, #3
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	43d2      	mvns	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800210a:	400b      	ands	r3, r1
 800210c:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 800210e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	0052      	lsls	r2, r2, #1
 8002118:	2102      	movs	r1, #2
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4611      	mov	r1, r2
 8002120:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 8002128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	b29b      	uxth	r3, r3
 8002130:	b21a      	sxth	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	b21b      	sxth	r3, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	b21b      	sxth	r3, r3
 8002140:	4013      	ands	r3, r2
 8002142:	b21a      	sxth	r2, r3
 8002144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002148:	b292      	uxth	r2, r2
 800214a:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 800214c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002154:	8892      	ldrh	r2, [r2, #4]
 8002156:	b292      	uxth	r2, r2
 8002158:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 800215a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	0052      	lsls	r2, r2, #1
 8002164:	2103      	movs	r1, #3
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	43d2      	mvns	r2, r2
 800216c:	4611      	mov	r1, r2
 800216e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002172:	400b      	ands	r3, r1
 8002174:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 8002176:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	79fa      	ldrb	r2, [r7, #7]
 800217e:	0052      	lsls	r2, r2, #1
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	4611      	mov	r1, r2
 8002188:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800218c:	430b      	orrs	r3, r1
 800218e:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8002190:	2307      	movs	r3, #7
 8002192:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002194:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <initRGB+0x1c8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	0052      	lsls	r2, r2, #1
 800219c:	2103      	movs	r1, #3
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	43d2      	mvns	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <initRGB+0x1c8>)
 80021a8:	400b      	ands	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 80021ac:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <initRGB+0x1c8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	0052      	lsls	r2, r2, #1
 80021b4:	2102      	movs	r1, #2
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4611      	mov	r1, r2
 80021bc:	4a3c      	ldr	r2, [pc, #240]	; (80022b0 <initRGB+0x1c8>)
 80021be:	430b      	orrs	r3, r1
 80021c0:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <initRGB+0x1c8>)
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <initRGB+0x1c8>)
 80021de:	b292      	uxth	r2, r2
 80021e0:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 80021e2:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <initRGB+0x1c8>)
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <initRGB+0x1c8>)
 80021e6:	8892      	ldrh	r2, [r2, #4]
 80021e8:	b292      	uxth	r2, r2
 80021ea:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <initRGB+0x1c8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	79fa      	ldrb	r2, [r7, #7]
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	2103      	movs	r1, #3
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	43d2      	mvns	r2, r2
 80021fc:	4611      	mov	r1, r2
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <initRGB+0x1c8>)
 8002200:	400b      	ands	r3, r1
 8002202:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <initRGB+0x1c8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	0052      	lsls	r2, r2, #1
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <initRGB+0x1c8>)
 8002216:	430b      	orrs	r3, r1
 8002218:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 800221a:	2304      	movs	r3, #4
 800221c:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <initRGB+0x1cc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	0052      	lsls	r2, r2, #1
 8002226:	2103      	movs	r1, #3
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	43d2      	mvns	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <initRGB+0x1cc>)
 8002232:	400b      	ands	r3, r1
 8002234:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <initRGB+0x1cc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	0052      	lsls	r2, r2, #1
 800223e:	2102      	movs	r1, #2
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <initRGB+0x1cc>)
 8002248:	430b      	orrs	r3, r1
 800224a:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <initRGB+0x1cc>)
 800224e:	889b      	ldrh	r3, [r3, #4]
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	b21b      	sxth	r3, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	b21b      	sxth	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	b21a      	sxth	r2, r3
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <initRGB+0x1cc>)
 8002268:	b292      	uxth	r2, r2
 800226a:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <initRGB+0x1cc>)
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <initRGB+0x1cc>)
 8002270:	8892      	ldrh	r2, [r2, #4]
 8002272:	b292      	uxth	r2, r2
 8002274:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <initRGB+0x1cc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	0052      	lsls	r2, r2, #1
 800227e:	2103      	movs	r1, #3
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	43d2      	mvns	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <initRGB+0x1cc>)
 800228a:	400b      	ands	r3, r1
 800228c:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <initRGB+0x1cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	0052      	lsls	r2, r2, #1
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <initRGB+0x1cc>)
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	48000800 	.word	0x48000800
 80022b4:	48000400 	.word	0x48000400

080022b8 <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <RGBColor+0x88>)
 80022c2:	8a9b      	ldrh	r3, [r3, #20]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <RGBColor+0x88>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <RGBColor+0x8c>)
 80022d2:	8a9b      	ldrh	r3, [r3, #20]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <RGBColor+0x8c>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 80022e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022e4:	8a9b      	ldrh	r3, [r3, #20]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <RGBColor+0x88>)
 80022fe:	8a9b      	ldrh	r3, [r3, #20]
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <RGBColor+0x88>)
 8002302:	2200      	movs	r2, #0
 8002304:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3301      	adds	r3, #1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d104      	bne.n	800231a <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <RGBColor+0x8c>)
 8002312:	8a9b      	ldrh	r3, [r3, #20]
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <RGBColor+0x8c>)
 8002316:	2200      	movs	r2, #0
 8002318:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3302      	adds	r3, #2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002324:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002328:	8a9b      	ldrh	r3, [r3, #20]
 800232a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800232e:	2200      	movs	r2, #0
 8002330:	829a      	strh	r2, [r3, #20]
	}
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	48000400 	.word	0x48000400
 8002344:	48000800 	.word	0x48000800

08002348 <writeToFlash>:

//Flash memory
void writeToFlash(uint16_t data, uint32_t address){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8002354:	f7fe fa3e 	bl	80007d4 <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8002358:	2034      	movs	r0, #52	; 0x34
 800235a:	f7fe fac5 	bl	80008e8 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7fe fa62 	bl	8000828 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4619      	mov	r1, r3
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f7fe fa8f 	bl	800088c <FLASH_ProgramHalfWord>
	FLASH_Lock();
 800236e:	f7fe fa4b 	bl	8000808 <FLASH_Lock>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <readFromFlash>:

uint16_t readFromFlash(uint32_t address){
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	881b      	ldrh	r3, [r3, #0]
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <spawnEnemy>:
>>>>>>> Stashed changes
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
<<<<<<< Updated upstream
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 8002884:	f002 f8d8 	bl	8004a38 <rand>
 8002888:	4603      	mov	r3, r0
 800288a:	4a35      	ldr	r2, [pc, #212]	; (8002960 <spawnEnemy+0xe4>)
 800288c:	fb82 1203 	smull	r1, r2, r2, r3
 8002890:	1151      	asrs	r1, r2, #5
 8002892:	17da      	asrs	r2, r3, #31
 8002894:	1a8a      	subs	r2, r1, r2
 8002896:	2164      	movs	r1, #100	; 0x64
 8002898:	fb01 f202 	mul.w	r2, r1, r2
 800289c:	1a9a      	subs	r2, r3, r2
 800289e:	4613      	mov	r3, r2
 80028a0:	77fb      	strb	r3, [r7, #31]
	if(shouldGenEnemy == 0){
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d156      	bne.n	8002956 <spawnEnemy+0xda>
		//TODO: Fix tilfældighedsgenerator
		uint16_t enemyPos = (rand() % 149) + 1;
 80028a8:	f002 f8c6 	bl	8004a38 <rand>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <spawnEnemy+0xe8>)
 80028b0:	fb82 1203 	smull	r1, r2, r2, r3
 80028b4:	10d1      	asrs	r1, r2, #3
 80028b6:	17da      	asrs	r2, r3, #31
 80028b8:	1a8a      	subs	r2, r1, r2
 80028ba:	2195      	movs	r1, #149	; 0x95
 80028bc:	fb01 f202 	mul.w	r2, r1, r2
 80028c0:	1a9a      	subs	r2, r3, r2
 80028c2:	b293      	uxth	r3, r2
 80028c4:	3301      	adds	r3, #1
 80028c6:	83bb      	strh	r3, [r7, #28]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 80028c8:	2014      	movs	r0, #20
 80028ca:	f001 ff97 	bl	80047fc <malloc>
 80028ce:	4603      	mov	r3, r0
 80028d0:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 80028d2:	2008      	movs	r0, #8
 80028d4:	f001 ff92 	bl	80047fc <malloc>
 80028d8:	4603      	mov	r3, r0
 80028da:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 80028dc:	8bbb      	ldrh	r3, [r7, #28]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f904 	bl	8002aec <intToFp>
 80028e4:	4602      	mov	r2, r0
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 80028ea:	2006      	movs	r0, #6
 80028ec:	f000 f8fe 	bl	8002aec <intToFp>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 80028fc:	2008      	movs	r0, #8
 80028fe:	f001 ff7d 	bl	80047fc <malloc>
 8002902:	4603      	mov	r3, r0
 8002904:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 8002906:	2000      	movs	r0, #0
 8002908:	f000 f8f0 	bl	8002aec <intToFp>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002918:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8002920:	2008      	movs	r0, #8
 8002922:	f001 ff6b 	bl	80047fc <malloc>
 8002926:	4603      	mov	r3, r0
 8002928:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <spawnEnemy+0xec>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f001 f81a 	bl	800398a <appendEnemy>
	}
}
 8002956:	bf00      	nop
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	51eb851f 	.word	0x51eb851f
 8002964:	0dbeb61f 	.word	0x0dbeb61f
 8002968:	200001cc 	.word	0x200001cc

0800296c <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800297a:	e01c      	b.n	80029b6 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	440a      	add	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	440a      	add	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1df      	bne.n	800297c <updateEnemy+0x10>
	}
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b092      	sub	sp, #72	; 0x48
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80029da:	e051      	b.n	8002a80 <shootEnemy+0xb4>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	7b12      	ldrb	r2, [r2, #12]
 80029e8:	441a      	add	r2, r3
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <shootEnemy+0xc4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d243      	bcs.n	8002a7a <shootEnemy+0xae>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f87a 	bl	8002aec <intToFp>
 80029f8:	4603      	mov	r3, r0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fc:	2002      	movs	r0, #2
 80029fe:	f000 f875 	bl	8002aec <intToFp>
 8002a02:	4603      	mov	r3, r0
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685c      	ldr	r4, [r3, #4]
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f000 f867 	bl	8002aec <intToFp>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4423      	add	r3, r4
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a30:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a40:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a50:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 8002a54:	687d      	ldr	r5, [r7, #4]
 8002a56:	466c      	mov	r4, sp
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f000 ff5a 	bl	8003924 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <shootEnemy+0xc4>)
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1aa      	bne.n	80029dc <shootEnemy+0x10>
	}
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	3738      	adds	r7, #56	; 0x38
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a90:	200001cc 	.word	0x200001cc

08002a94 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002aa2:	e01b      	b.n	8002adc <detectCityHit+0x48>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f832 	bl	8002b16 <fpToInt>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b4f      	cmp	r3, #79	; 0x4f
 8002ab6:	dd0e      	ble.n	8002ad6 <detectCityHit+0x42>
			gameState->cityLives--;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			deleteEnemyNode(gameState, thisNode);
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 ff8c 	bl	80039e8 <deleteEnemyNode>
			drawhearth(gameState);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fae5 	bl	80030a0 <drawhearth>
		}
		thisNode = thisNode->nextEnemyNode;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e0      	bne.n	8002aa4 <detectCityHit+0x10>
	}
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <intToFp>:
=======
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 800239c:	f003 f9a2 	bl	80056e4 <rand>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a35      	ldr	r2, [pc, #212]	; (8002478 <spawnEnemy+0xe4>)
 80023a4:	fb82 1203 	smull	r1, r2, r2, r3
 80023a8:	1151      	asrs	r1, r2, #5
 80023aa:	17da      	asrs	r2, r3, #31
 80023ac:	1a8a      	subs	r2, r1, r2
 80023ae:	2164      	movs	r1, #100	; 0x64
 80023b0:	fb01 f202 	mul.w	r2, r1, r2
 80023b4:	1a9a      	subs	r2, r3, r2
 80023b6:	4613      	mov	r3, r2
 80023b8:	77fb      	strb	r3, [r7, #31]
	if(shouldGenEnemy == 0){
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d156      	bne.n	800246e <spawnEnemy+0xda>
		//TODO: Fix tilfældighedsgenerator
		uint16_t enemyPos = (rand() % 149) + 1;
 80023c0:	f003 f990 	bl	80056e4 <rand>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a2d      	ldr	r2, [pc, #180]	; (800247c <spawnEnemy+0xe8>)
 80023c8:	fb82 1203 	smull	r1, r2, r2, r3
 80023cc:	10d1      	asrs	r1, r2, #3
 80023ce:	17da      	asrs	r2, r3, #31
 80023d0:	1a8a      	subs	r2, r1, r2
 80023d2:	2195      	movs	r1, #149	; 0x95
 80023d4:	fb01 f202 	mul.w	r2, r1, r2
 80023d8:	1a9a      	subs	r2, r3, r2
 80023da:	b293      	uxth	r3, r2
 80023dc:	3301      	adds	r3, #1
 80023de:	83bb      	strh	r3, [r7, #28]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 80023e0:	2014      	movs	r0, #20
 80023e2:	f002 ffeb 	bl	80053bc <malloc>
 80023e6:	4603      	mov	r3, r0
 80023e8:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 80023ea:	2008      	movs	r0, #8
 80023ec:	f002 ffe6 	bl	80053bc <malloc>
 80023f0:	4603      	mov	r3, r0
 80023f2:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 80023f4:	8bbb      	ldrh	r3, [r7, #28]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f90b 	bl	8002612 <intToFp>
 80023fc:	4602      	mov	r2, r0
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 8002402:	2006      	movs	r0, #6
 8002404:	f000 f905 	bl	8002612 <intToFp>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8002414:	2008      	movs	r0, #8
 8002416:	f002 ffd1 	bl	80053bc <malloc>
 800241a:	4603      	mov	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 800241e:	2000      	movs	r0, #0
 8002420:	f000 f8f7 	bl	8002612 <intToFp>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002430:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8002438:	2008      	movs	r0, #8
 800243a:	f002 ffbf 	bl	80053bc <malloc>
 800243e:	4603      	mov	r3, r0
 8002440:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <spawnEnemy+0xec>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2264      	movs	r2, #100	; 0x64
 8002464:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8002466:	69b9      	ldr	r1, [r7, #24]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f001 fc92 	bl	8003d92 <appendEnemy>
	}
}
 800246e:	bf00      	nop
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	51eb851f 	.word	0x51eb851f
 800247c:	0dbeb61f 	.word	0x0dbeb61f
 8002480:	200001c8 	.word	0x200001c8

08002484 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002492:	e01c      	b.n	80024ce <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	440a      	add	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	440a      	add	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1df      	bne.n	8002494 <updateEnemy+0x10>
	}
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b092      	sub	sp, #72	; 0x48
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80024f2:	e05a      	b.n	80025aa <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	7b12      	ldrb	r2, [r2, #12]
 8002500:	441a      	add	r2, r3
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <shootEnemy+0xd8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d24c      	bcs.n	80025a4 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f881 	bl	8002612 <intToFp>
 8002510:	4603      	mov	r3, r0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002514:	2002      	movs	r0, #2
 8002516:	f000 f87c 	bl	8002612 <intToFp>
 800251a:	4603      	mov	r3, r0
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685c      	ldr	r4, [r3, #4]
 8002530:	2004      	movs	r0, #4
 8002532:	f000 f86e 	bl	8002612 <intToFp>
 8002536:	4603      	mov	r3, r0
 8002538:	4423      	add	r3, r4
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
 800254c:	615a      	str	r2, [r3, #20]
 800254e:	619a      	str	r2, [r3, #24]
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800256c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 8002580:	687d      	ldr	r5, [r7, #4]
 8002582:	466c      	mov	r4, sp
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800258a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002594:	4628      	mov	r0, r5
 8002596:	f001 fbc9 	bl	8003d2c <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <shootEnemy+0xd8>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1a1      	bne.n	80024f4 <shootEnemy+0x10>
	}
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3738      	adds	r7, #56	; 0x38
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200001c8 	.word	0x200001c8

080025c0 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80025ce:	e018      	b.n	8002602 <detectCityHit+0x42>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f82f 	bl	800263c <fpToInt>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b4f      	cmp	r3, #79	; 0x4f
 80025e2:	dd0b      	ble.n	80025fc <detectCityHit+0x3c>
			gameState->cityLives--;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			deleteEnemyNode(gameState, thisNode);
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f001 fbfa 	bl	8003df0 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <detectCityHit+0x10>
	}
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <intToFp>:
>>>>>>> Stashed changes
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
<<<<<<< Updated upstream
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	60fb      	str	r3, [r7, #12]
	return output;
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60bb      	str	r3, [r7, #8]
	int output=0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b2c:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	607b      	str	r3, [r7, #4]
	output+=fp;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da03      	bge.n	8002b4a <fpToInt+0x34>
		output-=65536;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002b48:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002b4a:	68fb      	ldr	r3, [r7, #12]

}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	n>>=8;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	607b      	str	r3, [r7, #4]
	m>>=8;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
=======
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4413      	add	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	60fb      	str	r3, [r7, #12]
	return output;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60bb      	str	r3, [r7, #8]
	int output=0;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002652:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	607b      	str	r3, [r7, #4]
	output+=fp;
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	da03      	bge.n	8002670 <fpToInt+0x34>
		output-=65536;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800266e:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002670:	68fb      	ldr	r3, [r7, #12]

}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
	n>>=8;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	607b      	str	r3, [r7, #4]
	m>>=8;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
<<<<<<< Updated upstream
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002b9a:	b5b0      	push	{r4, r5, r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4608      	mov	r0, r1
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	0c03      	lsrs	r3, r0, #16
 8002bae:	0402      	lsls	r2, r0, #16
 8002bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bc2:	1884      	adds	r4, r0, r2
 8002bc4:	eb41 0503 	adc.w	r5, r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7fd ffe8 	bl	8000ba8 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    return result;
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdb0      	pop	{r4, r5, r7, pc}

08002bea <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	1d38      	adds	r0, r7, #4
 8002bf4:	e880 0006 	stmia.w	r0, {r1, r2}
 8002bf8:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ffaa 	bl	8002b58 <fpMultiply>
 8002c04:	4603      	mov	r3, r0
 8002c06:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6839      	ldr	r1, [r7, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ffa3 	bl	8002b58 <fpMultiply>
 8002c12:	4603      	mov	r3, r0
 8002c14:	617b      	str	r3, [r7, #20]
	return vectorOut;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c22:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da02      	bge.n	8002c46 <fpAbs+0x18>
			output=(~output)+1;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	425b      	negs	r3, r3
 8002c44:	60fb      	str	r3, [r7, #12]
		}
	return output;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <drawbackground>:
=======
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4608      	mov	r0, r1
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	0c03      	lsrs	r3, r0, #16
 80026d4:	0402      	lsls	r2, r0, #16
 80026d6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026e8:	1884      	adds	r4, r0, r2
 80026ea:	eb41 0503 	adc.w	r5, r1, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fd fdc1 	bl	8000280 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4613      	mov	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

    return result;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bdb0      	pop	{r4, r5, r7, pc}

08002710 <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	1d38      	adds	r0, r7, #4
 800271a:	e880 0006 	stmia.w	r0, {r1, r2}
 800271e:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ffaa 	bl	800267e <fpMultiply>
 800272a:	4603      	mov	r3, r0
 800272c:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6839      	ldr	r1, [r7, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffa3 	bl	800267e <fpMultiply>
 8002738:	4603      	mov	r3, r0
 800273a:	617b      	str	r3, [r7, #20]
	return vectorOut;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	461a      	mov	r2, r3
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002748:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	da02      	bge.n	800276c <fpAbs+0x18>
			output=(~output)+1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	425b      	negs	r3, r3
 800276a:	60fb      	str	r3, [r7, #12]
		}
	return output;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <drawbackground>:
>>>>>>> Stashed changes
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
<<<<<<< Updated upstream
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8002c58:	2123      	movs	r1, #35	; 0x23
 8002c5a:	2037      	movs	r0, #55	; 0x37
 8002c5c:	f7fe ff24 	bl	8001aa8 <gotoxy>
	printf("*");
 8002c60:	202a      	movs	r0, #42	; 0x2a
 8002c62:	f001 fea5 	bl	80049b0 <putchar>
	gotoxy(63,27);
 8002c66:	211b      	movs	r1, #27
 8002c68:	203f      	movs	r0, #63	; 0x3f
 8002c6a:	f7fe ff1d 	bl	8001aa8 <gotoxy>
	printf("*");
 8002c6e:	202a      	movs	r0, #42	; 0x2a
 8002c70:	f001 fe9e 	bl	80049b0 <putchar>
	gotoxy(10,15);
 8002c74:	210f      	movs	r1, #15
 8002c76:	200a      	movs	r0, #10
 8002c78:	f7fe ff16 	bl	8001aa8 <gotoxy>
	printf("*");
 8002c7c:	202a      	movs	r0, #42	; 0x2a
 8002c7e:	f001 fe97 	bl	80049b0 <putchar>
	gotoxy(20,40);
 8002c82:	2128      	movs	r1, #40	; 0x28
 8002c84:	2014      	movs	r0, #20
 8002c86:	f7fe ff0f 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002c8a:	202b      	movs	r0, #43	; 0x2b
 8002c8c:	f001 fe90 	bl	80049b0 <putchar>

	gotoxy(155,37);
 8002c90:	2125      	movs	r1, #37	; 0x25
 8002c92:	209b      	movs	r0, #155	; 0x9b
 8002c94:	f7fe ff08 	bl	8001aa8 <gotoxy>
	printf("*");
 8002c98:	202a      	movs	r0, #42	; 0x2a
 8002c9a:	f001 fe89 	bl	80049b0 <putchar>
	gotoxy(110,28);
 8002c9e:	211c      	movs	r1, #28
 8002ca0:	206e      	movs	r0, #110	; 0x6e
 8002ca2:	f7fe ff01 	bl	8001aa8 <gotoxy>
	printf("*");
 8002ca6:	202a      	movs	r0, #42	; 0x2a
 8002ca8:	f001 fe82 	bl	80049b0 <putchar>
	gotoxy(95,13);
 8002cac:	210d      	movs	r1, #13
 8002cae:	205f      	movs	r0, #95	; 0x5f
 8002cb0:	f7fe fefa 	bl	8001aa8 <gotoxy>
	printf("*");
 8002cb4:	202a      	movs	r0, #42	; 0x2a
 8002cb6:	f001 fe7b 	bl	80049b0 <putchar>
	gotoxy(130,19);
 8002cba:	2113      	movs	r1, #19
 8002cbc:	2082      	movs	r0, #130	; 0x82
 8002cbe:	f7fe fef3 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002cc2:	202b      	movs	r0, #43	; 0x2b
 8002cc4:	f001 fe74 	bl	80049b0 <putchar>

	gotoxy(5,27);
 8002cc8:	211b      	movs	r1, #27
 8002cca:	2005      	movs	r0, #5
 8002ccc:	f7fe feec 	bl	8001aa8 <gotoxy>
	printf("*");
 8002cd0:	202a      	movs	r0, #42	; 0x2a
 8002cd2:	f001 fe6d 	bl	80049b0 <putchar>
	gotoxy(6,5);
 8002cd6:	2105      	movs	r1, #5
 8002cd8:	2006      	movs	r0, #6
 8002cda:	f7fe fee5 	bl	8001aa8 <gotoxy>
	printf("*");
 8002cde:	202a      	movs	r0, #42	; 0x2a
 8002ce0:	f001 fe66 	bl	80049b0 <putchar>
	gotoxy(13,13);
 8002ce4:	210d      	movs	r1, #13
 8002ce6:	200d      	movs	r0, #13
 8002ce8:	f7fe fede 	bl	8001aa8 <gotoxy>
	printf("*");
 8002cec:	202a      	movs	r0, #42	; 0x2a
 8002cee:	f001 fe5f 	bl	80049b0 <putchar>
	gotoxy(60,7);
 8002cf2:	2107      	movs	r1, #7
 8002cf4:	203c      	movs	r0, #60	; 0x3c
 8002cf6:	f7fe fed7 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002cfa:	202b      	movs	r0, #43	; 0x2b
 8002cfc:	f001 fe58 	bl	80049b0 <putchar>

	gotoxy(140,3);
 8002d00:	2103      	movs	r1, #3
 8002d02:	208c      	movs	r0, #140	; 0x8c
 8002d04:	f7fe fed0 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d08:	202a      	movs	r0, #42	; 0x2a
 8002d0a:	f001 fe51 	bl	80049b0 <putchar>
	gotoxy(120,5);
 8002d0e:	2105      	movs	r1, #5
 8002d10:	2078      	movs	r0, #120	; 0x78
 8002d12:	f7fe fec9 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d16:	202a      	movs	r0, #42	; 0x2a
 8002d18:	f001 fe4a 	bl	80049b0 <putchar>
	gotoxy(110,7);
 8002d1c:	2107      	movs	r1, #7
 8002d1e:	206e      	movs	r0, #110	; 0x6e
 8002d20:	f7fe fec2 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d24:	202a      	movs	r0, #42	; 0x2a
 8002d26:	f001 fe43 	bl	80049b0 <putchar>
	gotoxy(70,30);
 8002d2a:	211e      	movs	r1, #30
 8002d2c:	2046      	movs	r0, #70	; 0x46
 8002d2e:	f7fe febb 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002d32:	202b      	movs	r0, #43	; 0x2b
 8002d34:	f001 fe3c 	bl	80049b0 <putchar>

	gotoxy(135,33);
 8002d38:	2121      	movs	r1, #33	; 0x21
 8002d3a:	2087      	movs	r0, #135	; 0x87
 8002d3c:	f7fe feb4 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d40:	202a      	movs	r0, #42	; 0x2a
 8002d42:	f001 fe35 	bl	80049b0 <putchar>
	gotoxy(123,36);
 8002d46:	2124      	movs	r1, #36	; 0x24
 8002d48:	207b      	movs	r0, #123	; 0x7b
 8002d4a:	f7fe fead 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d4e:	202a      	movs	r0, #42	; 0x2a
 8002d50:	f001 fe2e 	bl	80049b0 <putchar>
	gotoxy(138,40);
 8002d54:	2128      	movs	r1, #40	; 0x28
 8002d56:	208a      	movs	r0, #138	; 0x8a
 8002d58:	f7fe fea6 	bl	8001aa8 <gotoxy>
	printf("*");
 8002d5c:	202a      	movs	r0, #42	; 0x2a
 8002d5e:	f001 fe27 	bl	80049b0 <putchar>
	gotoxy(127,25);
 8002d62:	2119      	movs	r1, #25
 8002d64:	207f      	movs	r0, #127	; 0x7f
 8002d66:	f7fe fe9f 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002d6a:	202b      	movs	r0, #43	; 0x2b
 8002d6c:	f001 fe20 	bl	80049b0 <putchar>

	gotoxy(105,32);
 8002d70:	2120      	movs	r1, #32
 8002d72:	2069      	movs	r0, #105	; 0x69
 8002d74:	f7fe fe98 	bl	8001aa8 <gotoxy>
	printf("%c",42);
 8002d78:	202a      	movs	r0, #42	; 0x2a
 8002d7a:	f001 fe19 	bl	80049b0 <putchar>
	gotoxy(106,33);
 8002d7e:	2121      	movs	r1, #33	; 0x21
 8002d80:	206a      	movs	r0, #106	; 0x6a
 8002d82:	f7fe fe91 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8002d86:	205c      	movs	r0, #92	; 0x5c
 8002d88:	f001 fe12 	bl	80049b0 <putchar>
	gotoxy(107,34);
 8002d8c:	2122      	movs	r1, #34	; 0x22
 8002d8e:	206b      	movs	r0, #107	; 0x6b
 8002d90:	f7fe fe8a 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 8002d94:	205c      	movs	r0, #92	; 0x5c
 8002d96:	f001 fe0b 	bl	80049b0 <putchar>

	gotoxy(23,15);
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	2017      	movs	r0, #23
 8002d9e:	f7fe fe83 	bl	8001aa8 <gotoxy>
	printf("*");
 8002da2:	202a      	movs	r0, #42	; 0x2a
 8002da4:	f001 fe04 	bl	80049b0 <putchar>
	gotoxy(37,21);
 8002da8:	2115      	movs	r1, #21
 8002daa:	2025      	movs	r0, #37	; 0x25
 8002dac:	f7fe fe7c 	bl	8001aa8 <gotoxy>
	printf("*");
 8002db0:	202a      	movs	r0, #42	; 0x2a
 8002db2:	f001 fdfd 	bl	80049b0 <putchar>
	gotoxy(26,24);
 8002db6:	2118      	movs	r1, #24
 8002db8:	201a      	movs	r0, #26
 8002dba:	f7fe fe75 	bl	8001aa8 <gotoxy>
	printf("*");
 8002dbe:	202a      	movs	r0, #42	; 0x2a
 8002dc0:	f001 fdf6 	bl	80049b0 <putchar>
	gotoxy(30,29);
 8002dc4:	211d      	movs	r1, #29
 8002dc6:	201e      	movs	r0, #30
 8002dc8:	f7fe fe6e 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002dcc:	202b      	movs	r0, #43	; 0x2b
 8002dce:	f001 fdef 	bl	80049b0 <putchar>

	gotoxy(25,6);
 8002dd2:	2106      	movs	r1, #6
 8002dd4:	2019      	movs	r0, #25
 8002dd6:	f7fe fe67 	bl	8001aa8 <gotoxy>
	printf("*");
 8002dda:	202a      	movs	r0, #42	; 0x2a
 8002ddc:	f001 fde8 	bl	80049b0 <putchar>
	gotoxy(39,7);
 8002de0:	2107      	movs	r1, #7
 8002de2:	2027      	movs	r0, #39	; 0x27
 8002de4:	f7fe fe60 	bl	8001aa8 <gotoxy>
	printf("*");
 8002de8:	202a      	movs	r0, #42	; 0x2a
 8002dea:	f001 fde1 	bl	80049b0 <putchar>
	gotoxy(41,3);
 8002dee:	2103      	movs	r1, #3
 8002df0:	2029      	movs	r0, #41	; 0x29
 8002df2:	f7fe fe59 	bl	8001aa8 <gotoxy>
	printf("*");
 8002df6:	202a      	movs	r0, #42	; 0x2a
 8002df8:	f001 fdda 	bl	80049b0 <putchar>
	gotoxy(75,10);
 8002dfc:	210a      	movs	r1, #10
 8002dfe:	204b      	movs	r0, #75	; 0x4b
 8002e00:	f7fe fe52 	bl	8001aa8 <gotoxy>
	printf("%c",43);
 8002e04:	202b      	movs	r0, #43	; 0x2b
 8002e06:	f001 fdd3 	bl	80049b0 <putchar>

	gotoxy(100,20);
 8002e0a:	2114      	movs	r1, #20
 8002e0c:	2064      	movs	r0, #100	; 0x64
 8002e0e:	f7fe fe4b 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002e12:	20c5      	movs	r0, #197	; 0xc5
 8002e14:	f001 fdcc 	bl	80049b0 <putchar>
	gotoxy(135,12);
 8002e18:	210c      	movs	r1, #12
 8002e1a:	2087      	movs	r0, #135	; 0x87
 8002e1c:	f7fe fe44 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002e20:	20c5      	movs	r0, #197	; 0xc5
 8002e22:	f001 fdc5 	bl	80049b0 <putchar>
	gotoxy(30,5);
 8002e26:	2105      	movs	r1, #5
 8002e28:	201e      	movs	r0, #30
 8002e2a:	f7fe fe3d 	bl	8001aa8 <gotoxy>
	printf("%c",197);
 8002e2e:	20c5      	movs	r0, #197	; 0xc5
 8002e30:	f001 fdbe 	bl	80049b0 <putchar>
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460a      	mov	r2, r1
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	71bb      	strb	r3, [r7, #6]
=======
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 800277e:	2123      	movs	r1, #35	; 0x23
 8002780:	2037      	movs	r0, #55	; 0x37
 8002782:	f7fe fe5b 	bl	800143c <gotoxy>
	printf("*");
 8002786:	202a      	movs	r0, #42	; 0x2a
 8002788:	f002 fef2 	bl	8005570 <putchar>
	gotoxy(63,27);
 800278c:	211b      	movs	r1, #27
 800278e:	203f      	movs	r0, #63	; 0x3f
 8002790:	f7fe fe54 	bl	800143c <gotoxy>
	printf("*");
 8002794:	202a      	movs	r0, #42	; 0x2a
 8002796:	f002 feeb 	bl	8005570 <putchar>
	gotoxy(10,15);
 800279a:	210f      	movs	r1, #15
 800279c:	200a      	movs	r0, #10
 800279e:	f7fe fe4d 	bl	800143c <gotoxy>
	printf("*");
 80027a2:	202a      	movs	r0, #42	; 0x2a
 80027a4:	f002 fee4 	bl	8005570 <putchar>
	gotoxy(20,40);
 80027a8:	2128      	movs	r1, #40	; 0x28
 80027aa:	2014      	movs	r0, #20
 80027ac:	f7fe fe46 	bl	800143c <gotoxy>
	printf("%c",43);
 80027b0:	202b      	movs	r0, #43	; 0x2b
 80027b2:	f002 fedd 	bl	8005570 <putchar>

	gotoxy(155,37);
 80027b6:	2125      	movs	r1, #37	; 0x25
 80027b8:	209b      	movs	r0, #155	; 0x9b
 80027ba:	f7fe fe3f 	bl	800143c <gotoxy>
	printf("*");
 80027be:	202a      	movs	r0, #42	; 0x2a
 80027c0:	f002 fed6 	bl	8005570 <putchar>
	gotoxy(110,28);
 80027c4:	211c      	movs	r1, #28
 80027c6:	206e      	movs	r0, #110	; 0x6e
 80027c8:	f7fe fe38 	bl	800143c <gotoxy>
	printf("*");
 80027cc:	202a      	movs	r0, #42	; 0x2a
 80027ce:	f002 fecf 	bl	8005570 <putchar>
	gotoxy(95,13);
 80027d2:	210d      	movs	r1, #13
 80027d4:	205f      	movs	r0, #95	; 0x5f
 80027d6:	f7fe fe31 	bl	800143c <gotoxy>
	printf("*");
 80027da:	202a      	movs	r0, #42	; 0x2a
 80027dc:	f002 fec8 	bl	8005570 <putchar>
	gotoxy(130,19);
 80027e0:	2113      	movs	r1, #19
 80027e2:	2082      	movs	r0, #130	; 0x82
 80027e4:	f7fe fe2a 	bl	800143c <gotoxy>
	printf("%c",43);
 80027e8:	202b      	movs	r0, #43	; 0x2b
 80027ea:	f002 fec1 	bl	8005570 <putchar>

	gotoxy(5,27);
 80027ee:	211b      	movs	r1, #27
 80027f0:	2005      	movs	r0, #5
 80027f2:	f7fe fe23 	bl	800143c <gotoxy>
	printf("*");
 80027f6:	202a      	movs	r0, #42	; 0x2a
 80027f8:	f002 feba 	bl	8005570 <putchar>
	gotoxy(6,5);
 80027fc:	2105      	movs	r1, #5
 80027fe:	2006      	movs	r0, #6
 8002800:	f7fe fe1c 	bl	800143c <gotoxy>
	printf("*");
 8002804:	202a      	movs	r0, #42	; 0x2a
 8002806:	f002 feb3 	bl	8005570 <putchar>
	gotoxy(13,13);
 800280a:	210d      	movs	r1, #13
 800280c:	200d      	movs	r0, #13
 800280e:	f7fe fe15 	bl	800143c <gotoxy>
	printf("*");
 8002812:	202a      	movs	r0, #42	; 0x2a
 8002814:	f002 feac 	bl	8005570 <putchar>
	gotoxy(60,7);
 8002818:	2107      	movs	r1, #7
 800281a:	203c      	movs	r0, #60	; 0x3c
 800281c:	f7fe fe0e 	bl	800143c <gotoxy>
	printf("%c",43);
 8002820:	202b      	movs	r0, #43	; 0x2b
 8002822:	f002 fea5 	bl	8005570 <putchar>

	gotoxy(140,3);
 8002826:	2103      	movs	r1, #3
 8002828:	208c      	movs	r0, #140	; 0x8c
 800282a:	f7fe fe07 	bl	800143c <gotoxy>
	printf("*");
 800282e:	202a      	movs	r0, #42	; 0x2a
 8002830:	f002 fe9e 	bl	8005570 <putchar>
	gotoxy(120,5);
 8002834:	2105      	movs	r1, #5
 8002836:	2078      	movs	r0, #120	; 0x78
 8002838:	f7fe fe00 	bl	800143c <gotoxy>
	printf("*");
 800283c:	202a      	movs	r0, #42	; 0x2a
 800283e:	f002 fe97 	bl	8005570 <putchar>
	gotoxy(110,7);
 8002842:	2107      	movs	r1, #7
 8002844:	206e      	movs	r0, #110	; 0x6e
 8002846:	f7fe fdf9 	bl	800143c <gotoxy>
	printf("*");
 800284a:	202a      	movs	r0, #42	; 0x2a
 800284c:	f002 fe90 	bl	8005570 <putchar>
	gotoxy(70,30);
 8002850:	211e      	movs	r1, #30
 8002852:	2046      	movs	r0, #70	; 0x46
 8002854:	f7fe fdf2 	bl	800143c <gotoxy>
	printf("%c",43);
 8002858:	202b      	movs	r0, #43	; 0x2b
 800285a:	f002 fe89 	bl	8005570 <putchar>

	gotoxy(135,33);
 800285e:	2121      	movs	r1, #33	; 0x21
 8002860:	2087      	movs	r0, #135	; 0x87
 8002862:	f7fe fdeb 	bl	800143c <gotoxy>
	printf("*");
 8002866:	202a      	movs	r0, #42	; 0x2a
 8002868:	f002 fe82 	bl	8005570 <putchar>
	gotoxy(123,36);
 800286c:	2124      	movs	r1, #36	; 0x24
 800286e:	207b      	movs	r0, #123	; 0x7b
 8002870:	f7fe fde4 	bl	800143c <gotoxy>
	printf("*");
 8002874:	202a      	movs	r0, #42	; 0x2a
 8002876:	f002 fe7b 	bl	8005570 <putchar>
	gotoxy(138,40);
 800287a:	2128      	movs	r1, #40	; 0x28
 800287c:	208a      	movs	r0, #138	; 0x8a
 800287e:	f7fe fddd 	bl	800143c <gotoxy>
	printf("*");
 8002882:	202a      	movs	r0, #42	; 0x2a
 8002884:	f002 fe74 	bl	8005570 <putchar>
	gotoxy(127,25);
 8002888:	2119      	movs	r1, #25
 800288a:	207f      	movs	r0, #127	; 0x7f
 800288c:	f7fe fdd6 	bl	800143c <gotoxy>
	printf("%c",43);
 8002890:	202b      	movs	r0, #43	; 0x2b
 8002892:	f002 fe6d 	bl	8005570 <putchar>

	gotoxy(105,32);
 8002896:	2120      	movs	r1, #32
 8002898:	2069      	movs	r0, #105	; 0x69
 800289a:	f7fe fdcf 	bl	800143c <gotoxy>
	printf("%c",42);
 800289e:	202a      	movs	r0, #42	; 0x2a
 80028a0:	f002 fe66 	bl	8005570 <putchar>
	gotoxy(106,33);
 80028a4:	2121      	movs	r1, #33	; 0x21
 80028a6:	206a      	movs	r0, #106	; 0x6a
 80028a8:	f7fe fdc8 	bl	800143c <gotoxy>
	printf("%c",92);
 80028ac:	205c      	movs	r0, #92	; 0x5c
 80028ae:	f002 fe5f 	bl	8005570 <putchar>
	gotoxy(107,34);
 80028b2:	2122      	movs	r1, #34	; 0x22
 80028b4:	206b      	movs	r0, #107	; 0x6b
 80028b6:	f7fe fdc1 	bl	800143c <gotoxy>
	printf("%c",92);
 80028ba:	205c      	movs	r0, #92	; 0x5c
 80028bc:	f002 fe58 	bl	8005570 <putchar>

	gotoxy(23,15);
 80028c0:	210f      	movs	r1, #15
 80028c2:	2017      	movs	r0, #23
 80028c4:	f7fe fdba 	bl	800143c <gotoxy>
	printf("*");
 80028c8:	202a      	movs	r0, #42	; 0x2a
 80028ca:	f002 fe51 	bl	8005570 <putchar>
	gotoxy(37,21);
 80028ce:	2115      	movs	r1, #21
 80028d0:	2025      	movs	r0, #37	; 0x25
 80028d2:	f7fe fdb3 	bl	800143c <gotoxy>
	printf("*");
 80028d6:	202a      	movs	r0, #42	; 0x2a
 80028d8:	f002 fe4a 	bl	8005570 <putchar>
	gotoxy(26,24);
 80028dc:	2118      	movs	r1, #24
 80028de:	201a      	movs	r0, #26
 80028e0:	f7fe fdac 	bl	800143c <gotoxy>
	printf("*");
 80028e4:	202a      	movs	r0, #42	; 0x2a
 80028e6:	f002 fe43 	bl	8005570 <putchar>
	gotoxy(30,29);
 80028ea:	211d      	movs	r1, #29
 80028ec:	201e      	movs	r0, #30
 80028ee:	f7fe fda5 	bl	800143c <gotoxy>
	printf("%c",43);
 80028f2:	202b      	movs	r0, #43	; 0x2b
 80028f4:	f002 fe3c 	bl	8005570 <putchar>

	gotoxy(25,6);
 80028f8:	2106      	movs	r1, #6
 80028fa:	2019      	movs	r0, #25
 80028fc:	f7fe fd9e 	bl	800143c <gotoxy>
	printf("*");
 8002900:	202a      	movs	r0, #42	; 0x2a
 8002902:	f002 fe35 	bl	8005570 <putchar>
	gotoxy(39,7);
 8002906:	2107      	movs	r1, #7
 8002908:	2027      	movs	r0, #39	; 0x27
 800290a:	f7fe fd97 	bl	800143c <gotoxy>
	printf("*");
 800290e:	202a      	movs	r0, #42	; 0x2a
 8002910:	f002 fe2e 	bl	8005570 <putchar>
	gotoxy(41,3);
 8002914:	2103      	movs	r1, #3
 8002916:	2029      	movs	r0, #41	; 0x29
 8002918:	f7fe fd90 	bl	800143c <gotoxy>
	printf("*");
 800291c:	202a      	movs	r0, #42	; 0x2a
 800291e:	f002 fe27 	bl	8005570 <putchar>
	gotoxy(75,10);
 8002922:	210a      	movs	r1, #10
 8002924:	204b      	movs	r0, #75	; 0x4b
 8002926:	f7fe fd89 	bl	800143c <gotoxy>
	printf("%c",43);
 800292a:	202b      	movs	r0, #43	; 0x2b
 800292c:	f002 fe20 	bl	8005570 <putchar>

	gotoxy(100,20);
 8002930:	2114      	movs	r1, #20
 8002932:	2064      	movs	r0, #100	; 0x64
 8002934:	f7fe fd82 	bl	800143c <gotoxy>
	printf("%c",197);
 8002938:	20c5      	movs	r0, #197	; 0xc5
 800293a:	f002 fe19 	bl	8005570 <putchar>
	gotoxy(135,12);
 800293e:	210c      	movs	r1, #12
 8002940:	2087      	movs	r0, #135	; 0x87
 8002942:	f7fe fd7b 	bl	800143c <gotoxy>
	printf("%c",197);
 8002946:	20c5      	movs	r0, #197	; 0xc5
 8002948:	f002 fe12 	bl	8005570 <putchar>
	gotoxy(30,5);
 800294c:	2105      	movs	r1, #5
 800294e:	201e      	movs	r0, #30
 8002950:	f7fe fd74 	bl	800143c <gotoxy>
	printf("%c",197);
 8002954:	20c5      	movs	r0, #197	; 0xc5
 8002956:	f002 fe0b 	bl	8005570 <putchar>
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	460a      	mov	r2, r1
 8002968:	71fb      	strb	r3, [r7, #7]
 800296a:	4613      	mov	r3, r2
 800296c:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	71bb      	strb	r3, [r7, #6]
>>>>>>> Stashed changes
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
<<<<<<< Updated upstream
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	3303      	adds	r3, #3
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fe fe25 	bl	8001aa8 <gotoxy>
	printf("_");
 8002e5e:	205f      	movs	r0, #95	; 0x5f
 8002e60:	f001 fda6 	bl	80049b0 <putchar>
	gotoxy(X,Y+3);
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	3303      	adds	r3, #3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fe fe1b 	bl	8001aa8 <gotoxy>
	printf("_");
 8002e72:	205f      	movs	r0, #95	; 0x5f
 8002e74:	f001 fd9c 	bl	80049b0 <putchar>
	gotoxy(X+1,Y+3);
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f7fe fe10 	bl	8001aa8 <gotoxy>
	printf("_");
 8002e88:	205f      	movs	r0, #95	; 0x5f
 8002e8a:	f001 fd91 	bl	80049b0 <putchar>
	gotoxy(X-2,Y+3);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	1e9a      	subs	r2, r3, #2
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	3303      	adds	r3, #3
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7fe fe05 	bl	8001aa8 <gotoxy>
	printf("(");
 8002e9e:	2028      	movs	r0, #40	; 0x28
 8002ea0:	f001 fd86 	bl	80049b0 <putchar>
	gotoxy(X+2,Y+3);
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	79bb      	ldrb	r3, [r7, #6]
 8002eaa:	3303      	adds	r3, #3
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f7fe fdfa 	bl	8001aa8 <gotoxy>
	printf(")");
 8002eb4:	2029      	movs	r0, #41	; 0x29
 8002eb6:	f001 fd7b 	bl	80049b0 <putchar>

	gotoxy(X+3,Y+2);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	1cda      	adds	r2, r3, #3
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7fe fdef 	bl	8001aa8 <gotoxy>
	printf("_");
 8002eca:	205f      	movs	r0, #95	; 0x5f
 8002ecc:	f001 fd70 	bl	80049b0 <putchar>
	gotoxy(X-3,Y+2);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	1eda      	subs	r2, r3, #3
 8002ed4:	79bb      	ldrb	r3, [r7, #6]
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe fde4 	bl	8001aa8 <gotoxy>
	printf("_");
 8002ee0:	205f      	movs	r0, #95	; 0x5f
 8002ee2:	f001 fd65 	bl	80049b0 <putchar>
	gotoxy(X+4,Y+2);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	1d1a      	adds	r2, r3, #4
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	3302      	adds	r3, #2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f7fe fdd9 	bl	8001aa8 <gotoxy>
	printf("(");
 8002ef6:	2028      	movs	r0, #40	; 0x28
 8002ef8:	f001 fd5a 	bl	80049b0 <putchar>
	gotoxy(X-4,Y+2);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	1f1a      	subs	r2, r3, #4
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	3302      	adds	r3, #2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fe fdce 	bl	8001aa8 <gotoxy>
	printf(")");
 8002f0c:	2029      	movs	r0, #41	; 0x29
 8002f0e:	f001 fd4f 	bl	80049b0 <putchar>

	gotoxy(X-5,Y+1);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	1f5a      	subs	r2, r3, #5
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f7fe fdc3 	bl	8001aa8 <gotoxy>
	printf("(");
 8002f22:	2028      	movs	r0, #40	; 0x28
 8002f24:	f001 fd44 	bl	80049b0 <putchar>
	gotoxy(X+5,Y+1);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	1d5a      	adds	r2, r3, #5
 8002f2c:	79bb      	ldrb	r3, [r7, #6]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe fdb8 	bl	8001aa8 <gotoxy>
	printf("(");
 8002f38:	2028      	movs	r0, #40	; 0x28
 8002f3a:	f001 fd39 	bl	80049b0 <putchar>
	gotoxy(X-6,Y);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	3b06      	subs	r3, #6
 8002f42:	79ba      	ldrb	r2, [r7, #6]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fdae 	bl	8001aa8 <gotoxy>
	printf("(");
 8002f4c:	2028      	movs	r0, #40	; 0x28
 8002f4e:	f001 fd2f 	bl	80049b0 <putchar>
	gotoxy(X+6,Y);
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	3306      	adds	r3, #6
 8002f56:	79ba      	ldrb	r2, [r7, #6]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fda4 	bl	8001aa8 <gotoxy>
	printf(")");
 8002f60:	2029      	movs	r0, #41	; 0x29
 8002f62:	f001 fd25 	bl	80049b0 <putchar>

	gotoxy(X-5,Y-1);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	1f5a      	subs	r2, r3, #5
 8002f6a:	79bb      	ldrb	r3, [r7, #6]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f7fe fd99 	bl	8001aa8 <gotoxy>
	printf("(");
 8002f76:	2028      	movs	r0, #40	; 0x28
 8002f78:	f001 fd1a 	bl	80049b0 <putchar>
	gotoxy(X+5,Y-1);
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	1d5a      	adds	r2, r3, #5
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7fe fd8e 	bl	8001aa8 <gotoxy>
	printf(")");
 8002f8c:	2029      	movs	r0, #41	; 0x29
 8002f8e:	f001 fd0f 	bl	80049b0 <putchar>
	gotoxy(X-4,Y-2);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	1f1a      	subs	r2, r3, #4
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	3b02      	subs	r3, #2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7fe fd83 	bl	8001aa8 <gotoxy>
	printf("(");
 8002fa2:	2028      	movs	r0, #40	; 0x28
 8002fa4:	f001 fd04 	bl	80049b0 <putchar>
	gotoxy(X+4,Y-2);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	79bb      	ldrb	r3, [r7, #6]
 8002fae:	3b02      	subs	r3, #2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7fe fd78 	bl	8001aa8 <gotoxy>
	printf(")");
 8002fb8:	2029      	movs	r0, #41	; 0x29
 8002fba:	f001 fcf9 	bl	80049b0 <putchar>

	gotoxy(X-3,Y-3);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	1eda      	subs	r2, r3, #3
 8002fc2:	79bb      	ldrb	r3, [r7, #6]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fe fd6d 	bl	8001aa8 <gotoxy>
	printf("_");
 8002fce:	205f      	movs	r0, #95	; 0x5f
 8002fd0:	f001 fcee 	bl	80049b0 <putchar>
	gotoxy(X+3,Y-3);
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	1cda      	adds	r2, r3, #3
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	3b03      	subs	r3, #3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7fe fd62 	bl	8001aa8 <gotoxy>
	printf("_");
 8002fe4:	205f      	movs	r0, #95	; 0x5f
 8002fe6:	f001 fce3 	bl	80049b0 <putchar>
	gotoxy(X-2,Y-3);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	1e9a      	subs	r2, r3, #2
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f7fe fd57 	bl	8001aa8 <gotoxy>
	printf("(");
 8002ffa:	2028      	movs	r0, #40	; 0x28
 8002ffc:	f001 fcd8 	bl	80049b0 <putchar>
	gotoxy(X+2,Y-3);
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	79bb      	ldrb	r3, [r7, #6]
 8003006:	3b03      	subs	r3, #3
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fe fd4c 	bl	8001aa8 <gotoxy>
	printf(")");
 8003010:	2029      	movs	r0, #41	; 0x29
 8003012:	f001 fccd 	bl	80049b0 <putchar>

	gotoxy(X-1,Y-4);
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	3b04      	subs	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7fe fd41 	bl	8001aa8 <gotoxy>
	printf("_");
 8003026:	205f      	movs	r0, #95	; 0x5f
 8003028:	f001 fcc2 	bl	80049b0 <putchar>
	gotoxy(X,Y-4);
 800302c:	79fa      	ldrb	r2, [r7, #7]
 800302e:	79bb      	ldrb	r3, [r7, #6]
 8003030:	3b04      	subs	r3, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7fe fd37 	bl	8001aa8 <gotoxy>
	printf("_");
 800303a:	205f      	movs	r0, #95	; 0x5f
 800303c:	f001 fcb8 	bl	80049b0 <putchar>
	gotoxy(X+1,Y-4);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	3b04      	subs	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7fe fd2c 	bl	8001aa8 <gotoxy>
	printf("_");
 8003050:	205f      	movs	r0, #95	; 0x5f
 8003052:	f001 fcad 	bl	80049b0 <putchar>

	gotoxy(X-2,Y);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	3b02      	subs	r3, #2
 800305a:	79ba      	ldrb	r2, [r7, #6]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fd22 	bl	8001aa8 <gotoxy>
	printf("O");
 8003064:	204f      	movs	r0, #79	; 0x4f
 8003066:	f001 fca3 	bl	80049b0 <putchar>
	gotoxy(X+1,Y+2);
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	3302      	adds	r3, #2
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7fe fd17 	bl	8001aa8 <gotoxy>
	printf("o");
 800307a:	206f      	movs	r0, #111	; 0x6f
 800307c:	f001 fc98 	bl	80049b0 <putchar>
	gotoxy(X+3,Y-1);
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	1cda      	adds	r2, r3, #3
 8003084:	79bb      	ldrb	r3, [r7, #6]
 8003086:	3b01      	subs	r3, #1
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fe fd0c 	bl	8001aa8 <gotoxy>
	printf("O");
 8003090:	204f      	movs	r0, #79	; 0x4f
 8003092:	f001 fc8d 	bl	80049b0 <putchar>
=======
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	3303      	adds	r3, #3
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f7fe fd5c 	bl	800143c <gotoxy>
	printf("_");
 8002984:	205f      	movs	r0, #95	; 0x5f
 8002986:	f002 fdf3 	bl	8005570 <putchar>
	gotoxy(X,Y+3);
 800298a:	79fa      	ldrb	r2, [r7, #7]
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	3303      	adds	r3, #3
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7fe fd52 	bl	800143c <gotoxy>
	printf("_");
 8002998:	205f      	movs	r0, #95	; 0x5f
 800299a:	f002 fde9 	bl	8005570 <putchar>
	gotoxy(X+1,Y+3);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	79bb      	ldrb	r3, [r7, #6]
 80029a4:	3303      	adds	r3, #3
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7fe fd47 	bl	800143c <gotoxy>
	printf("_");
 80029ae:	205f      	movs	r0, #95	; 0x5f
 80029b0:	f002 fdde 	bl	8005570 <putchar>
	gotoxy(X-2,Y+3);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	1e9a      	subs	r2, r3, #2
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	3303      	adds	r3, #3
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f7fe fd3c 	bl	800143c <gotoxy>
	printf("(");
 80029c4:	2028      	movs	r0, #40	; 0x28
 80029c6:	f002 fdd3 	bl	8005570 <putchar>
	gotoxy(X+2,Y+3);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	1c9a      	adds	r2, r3, #2
 80029ce:	79bb      	ldrb	r3, [r7, #6]
 80029d0:	3303      	adds	r3, #3
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7fe fd31 	bl	800143c <gotoxy>
	printf(")");
 80029da:	2029      	movs	r0, #41	; 0x29
 80029dc:	f002 fdc8 	bl	8005570 <putchar>

	gotoxy(X+3,Y+2);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	1cda      	adds	r2, r3, #3
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	3302      	adds	r3, #2
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7fe fd26 	bl	800143c <gotoxy>
	printf("_");
 80029f0:	205f      	movs	r0, #95	; 0x5f
 80029f2:	f002 fdbd 	bl	8005570 <putchar>
	gotoxy(X-3,Y+2);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	1eda      	subs	r2, r3, #3
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	3302      	adds	r3, #2
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7fe fd1b 	bl	800143c <gotoxy>
	printf("_");
 8002a06:	205f      	movs	r0, #95	; 0x5f
 8002a08:	f002 fdb2 	bl	8005570 <putchar>
	gotoxy(X+4,Y+2);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	3302      	adds	r3, #2
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f7fe fd10 	bl	800143c <gotoxy>
	printf("(");
 8002a1c:	2028      	movs	r0, #40	; 0x28
 8002a1e:	f002 fda7 	bl	8005570 <putchar>
	gotoxy(X-4,Y+2);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	1f1a      	subs	r2, r3, #4
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f7fe fd05 	bl	800143c <gotoxy>
	printf(")");
 8002a32:	2029      	movs	r0, #41	; 0x29
 8002a34:	f002 fd9c 	bl	8005570 <putchar>

	gotoxy(X-5,Y+1);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	1f5a      	subs	r2, r3, #5
 8002a3c:	79bb      	ldrb	r3, [r7, #6]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f7fe fcfa 	bl	800143c <gotoxy>
	printf("(");
 8002a48:	2028      	movs	r0, #40	; 0x28
 8002a4a:	f002 fd91 	bl	8005570 <putchar>
	gotoxy(X+5,Y+1);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	1d5a      	adds	r2, r3, #5
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7fe fcef 	bl	800143c <gotoxy>
	printf("(");
 8002a5e:	2028      	movs	r0, #40	; 0x28
 8002a60:	f002 fd86 	bl	8005570 <putchar>
	gotoxy(X-6,Y);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3b06      	subs	r3, #6
 8002a68:	79ba      	ldrb	r2, [r7, #6]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fce5 	bl	800143c <gotoxy>
	printf("(");
 8002a72:	2028      	movs	r0, #40	; 0x28
 8002a74:	f002 fd7c 	bl	8005570 <putchar>
	gotoxy(X+6,Y);
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	3306      	adds	r3, #6
 8002a7c:	79ba      	ldrb	r2, [r7, #6]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fcdb 	bl	800143c <gotoxy>
	printf(")");
 8002a86:	2029      	movs	r0, #41	; 0x29
 8002a88:	f002 fd72 	bl	8005570 <putchar>

	gotoxy(X-5,Y-1);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	1f5a      	subs	r2, r3, #5
 8002a90:	79bb      	ldrb	r3, [r7, #6]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f7fe fcd0 	bl	800143c <gotoxy>
	printf("(");
 8002a9c:	2028      	movs	r0, #40	; 0x28
 8002a9e:	f002 fd67 	bl	8005570 <putchar>
	gotoxy(X+5,Y-1);
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	1d5a      	adds	r2, r3, #5
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7fe fcc5 	bl	800143c <gotoxy>
	printf(")");
 8002ab2:	2029      	movs	r0, #41	; 0x29
 8002ab4:	f002 fd5c 	bl	8005570 <putchar>
	gotoxy(X-4,Y-2);
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	1f1a      	subs	r2, r3, #4
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	3b02      	subs	r3, #2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7fe fcba 	bl	800143c <gotoxy>
	printf("(");
 8002ac8:	2028      	movs	r0, #40	; 0x28
 8002aca:	f002 fd51 	bl	8005570 <putchar>
	gotoxy(X+4,Y-2);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	1d1a      	adds	r2, r3, #4
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	3b02      	subs	r3, #2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f7fe fcaf 	bl	800143c <gotoxy>
	printf(")");
 8002ade:	2029      	movs	r0, #41	; 0x29
 8002ae0:	f002 fd46 	bl	8005570 <putchar>

	gotoxy(X-3,Y-3);
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	1eda      	subs	r2, r3, #3
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	3b03      	subs	r3, #3
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f7fe fca4 	bl	800143c <gotoxy>
	printf("_");
 8002af4:	205f      	movs	r0, #95	; 0x5f
 8002af6:	f002 fd3b 	bl	8005570 <putchar>
	gotoxy(X+3,Y-3);
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	1cda      	adds	r2, r3, #3
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7fe fc99 	bl	800143c <gotoxy>
	printf("_");
 8002b0a:	205f      	movs	r0, #95	; 0x5f
 8002b0c:	f002 fd30 	bl	8005570 <putchar>
	gotoxy(X-2,Y-3);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	1e9a      	subs	r2, r3, #2
 8002b14:	79bb      	ldrb	r3, [r7, #6]
 8002b16:	3b03      	subs	r3, #3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f7fe fc8e 	bl	800143c <gotoxy>
	printf("(");
 8002b20:	2028      	movs	r0, #40	; 0x28
 8002b22:	f002 fd25 	bl	8005570 <putchar>
	gotoxy(X+2,Y-3);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7fe fc83 	bl	800143c <gotoxy>
	printf(")");
 8002b36:	2029      	movs	r0, #41	; 0x29
 8002b38:	f002 fd1a 	bl	8005570 <putchar>

	gotoxy(X-1,Y-4);
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	3b04      	subs	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7fe fc78 	bl	800143c <gotoxy>
	printf("_");
 8002b4c:	205f      	movs	r0, #95	; 0x5f
 8002b4e:	f002 fd0f 	bl	8005570 <putchar>
	gotoxy(X,Y-4);
 8002b52:	79fa      	ldrb	r2, [r7, #7]
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	3b04      	subs	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fe fc6e 	bl	800143c <gotoxy>
	printf("_");
 8002b60:	205f      	movs	r0, #95	; 0x5f
 8002b62:	f002 fd05 	bl	8005570 <putchar>
	gotoxy(X+1,Y-4);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe fc63 	bl	800143c <gotoxy>
	printf("_");
 8002b76:	205f      	movs	r0, #95	; 0x5f
 8002b78:	f002 fcfa 	bl	8005570 <putchar>

	gotoxy(X-2,Y);
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	3b02      	subs	r3, #2
 8002b80:	79ba      	ldrb	r2, [r7, #6]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc59 	bl	800143c <gotoxy>
	printf("O");
 8002b8a:	204f      	movs	r0, #79	; 0x4f
 8002b8c:	f002 fcf0 	bl	8005570 <putchar>
	gotoxy(X+1,Y+2);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	79bb      	ldrb	r3, [r7, #6]
 8002b96:	3302      	adds	r3, #2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f7fe fc4e 	bl	800143c <gotoxy>
	printf("o");
 8002ba0:	206f      	movs	r0, #111	; 0x6f
 8002ba2:	f002 fce5 	bl	8005570 <putchar>
	gotoxy(X+3,Y-1);
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	1cda      	adds	r2, r3, #3
 8002baa:	79bb      	ldrb	r3, [r7, #6]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7fe fc43 	bl	800143c <gotoxy>
	printf("O");
 8002bb6:	204f      	movs	r0, #79	; 0x4f
 8002bb8:	f002 fcda 	bl	8005570 <putchar>
>>>>>>> Stashed changes

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
<<<<<<< Updated upstream
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <drawhearth>:


void drawhearth(gameState_t* gameState){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 80030a8:	2101      	movs	r1, #1
 80030aa:	200f      	movs	r0, #15
 80030ac:	f7fe fcfc 	bl	8001aa8 <gotoxy>
	printf("           ");
 80030b0:	483b      	ldr	r0, [pc, #236]	; (80031a0 <drawhearth+0x100>)
 80030b2:	f001 fc65 	bl	8004980 <iprintf>
	gotoxy(15,2);
 80030b6:	2102      	movs	r1, #2
 80030b8:	200f      	movs	r0, #15
 80030ba:	f7fe fcf5 	bl	8001aa8 <gotoxy>
	printf("           ");
 80030be:	4838      	ldr	r0, [pc, #224]	; (80031a0 <drawhearth+0x100>)
 80030c0:	f001 fc5e 	bl	8004980 <iprintf>
	fgcolor(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fe fcc3 	bl	8001a50 <fgcolor>

	if(gameState->cityLives >= 1){
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <drawhearth+0x6c>
		gotoxy(15,1);
 80030d4:	2101      	movs	r1, #1
 80030d6:	200f      	movs	r0, #15
 80030d8:	f7fe fce6 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 80030dc:	20db      	movs	r0, #219	; 0xdb
 80030de:	f001 fc67 	bl	80049b0 <putchar>
		gotoxy(17,1);
 80030e2:	2101      	movs	r1, #1
 80030e4:	2011      	movs	r0, #17
 80030e6:	f7fe fcdf 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 80030ea:	20db      	movs	r0, #219	; 0xdb
 80030ec:	f001 fc60 	bl	80049b0 <putchar>
		gotoxy(16,2);
 80030f0:	2102      	movs	r1, #2
 80030f2:	2010      	movs	r0, #16
 80030f4:	f7fe fcd8 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 80030f8:	20df      	movs	r0, #223	; 0xdf
 80030fa:	f001 fc59 	bl	80049b0 <putchar>
		gotoxy(16,1);
 80030fe:	2101      	movs	r1, #1
 8003100:	2010      	movs	r0, #16
 8003102:	f7fe fcd1 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 8003106:	20dc      	movs	r0, #220	; 0xdc
 8003108:	f001 fc52 	bl	80049b0 <putchar>
	}
	if(gameState->cityLives >= 2){
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003112:	2b01      	cmp	r3, #1
 8003114:	d91b      	bls.n	800314e <drawhearth+0xae>
		gotoxy(19,1);
 8003116:	2101      	movs	r1, #1
 8003118:	2013      	movs	r0, #19
 800311a:	f7fe fcc5 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 800311e:	20db      	movs	r0, #219	; 0xdb
 8003120:	f001 fc46 	bl	80049b0 <putchar>
		gotoxy(21,1);
 8003124:	2101      	movs	r1, #1
 8003126:	2015      	movs	r0, #21
 8003128:	f7fe fcbe 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 800312c:	20db      	movs	r0, #219	; 0xdb
 800312e:	f001 fc3f 	bl	80049b0 <putchar>
		gotoxy(20,2);
 8003132:	2102      	movs	r1, #2
 8003134:	2014      	movs	r0, #20
 8003136:	f7fe fcb7 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 800313a:	20df      	movs	r0, #223	; 0xdf
 800313c:	f001 fc38 	bl	80049b0 <putchar>
		gotoxy(20,1);
 8003140:	2101      	movs	r1, #1
 8003142:	2014      	movs	r0, #20
 8003144:	f7fe fcb0 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 8003148:	20dc      	movs	r0, #220	; 0xdc
 800314a:	f001 fc31 	bl	80049b0 <putchar>

	}
	if(gameState->cityLives >= 3){
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003154:	2b02      	cmp	r3, #2
 8003156:	d91b      	bls.n	8003190 <drawhearth+0xf0>
		gotoxy(23,1);
 8003158:	2101      	movs	r1, #1
 800315a:	2017      	movs	r0, #23
 800315c:	f7fe fca4 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 8003160:	20db      	movs	r0, #219	; 0xdb
 8003162:	f001 fc25 	bl	80049b0 <putchar>
		gotoxy(25,1);
 8003166:	2101      	movs	r1, #1
 8003168:	2019      	movs	r0, #25
 800316a:	f7fe fc9d 	bl	8001aa8 <gotoxy>
		printf("%c",219);
 800316e:	20db      	movs	r0, #219	; 0xdb
 8003170:	f001 fc1e 	bl	80049b0 <putchar>
		gotoxy(24,2);
 8003174:	2102      	movs	r1, #2
 8003176:	2018      	movs	r0, #24
 8003178:	f7fe fc96 	bl	8001aa8 <gotoxy>
		printf("%c",223);
 800317c:	20df      	movs	r0, #223	; 0xdf
 800317e:	f001 fc17 	bl	80049b0 <putchar>
		gotoxy(24,1);
 8003182:	2101      	movs	r1, #1
 8003184:	2018      	movs	r0, #24
 8003186:	f7fe fc8f 	bl	8001aa8 <gotoxy>
		printf("%c",220);
 800318a:	20dc      	movs	r0, #220	; 0xdc
 800318c:	f001 fc10 	bl	80049b0 <putchar>
	}
	fgcolor(15);
 8003190:	200f      	movs	r0, #15
 8003192:	f7fe fc5d 	bl	8001a50 <fgcolor>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	08005d48 	.word	0x08005d48

080031a4 <drawEnemy>:
=======
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	200f      	movs	r0, #15
 8002bd0:	f7fe fc34 	bl	800143c <gotoxy>
	printf("           ");
 8002bd4:	483b      	ldr	r0, [pc, #236]	; (8002cc4 <drawhearth+0x100>)
 8002bd6:	f002 fcb3 	bl	8005540 <iprintf>
	gotoxy(15,2);
 8002bda:	2102      	movs	r1, #2
 8002bdc:	200f      	movs	r0, #15
 8002bde:	f7fe fc2d 	bl	800143c <gotoxy>
	printf("           ");
 8002be2:	4838      	ldr	r0, [pc, #224]	; (8002cc4 <drawhearth+0x100>)
 8002be4:	f002 fcac 	bl	8005540 <iprintf>
	fgcolor(1);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7fe fbfb 	bl	80013e4 <fgcolor>

	if(gameState->cityLives >= 1){
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01b      	beq.n	8002c30 <drawhearth+0x6c>
		gotoxy(15,1);
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	200f      	movs	r0, #15
 8002bfc:	f7fe fc1e 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c00:	20db      	movs	r0, #219	; 0xdb
 8002c02:	f002 fcb5 	bl	8005570 <putchar>
		gotoxy(17,1);
 8002c06:	2101      	movs	r1, #1
 8002c08:	2011      	movs	r0, #17
 8002c0a:	f7fe fc17 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c0e:	20db      	movs	r0, #219	; 0xdb
 8002c10:	f002 fcae 	bl	8005570 <putchar>
		gotoxy(16,2);
 8002c14:	2102      	movs	r1, #2
 8002c16:	2010      	movs	r0, #16
 8002c18:	f7fe fc10 	bl	800143c <gotoxy>
		printf("%c",223);
 8002c1c:	20df      	movs	r0, #223	; 0xdf
 8002c1e:	f002 fca7 	bl	8005570 <putchar>
		gotoxy(16,1);
 8002c22:	2101      	movs	r1, #1
 8002c24:	2010      	movs	r0, #16
 8002c26:	f7fe fc09 	bl	800143c <gotoxy>
		printf("%c",220);
 8002c2a:	20dc      	movs	r0, #220	; 0xdc
 8002c2c:	f002 fca0 	bl	8005570 <putchar>
	}
	if(gameState->cityLives >= 2){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d91b      	bls.n	8002c72 <drawhearth+0xae>
		gotoxy(19,1);
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2013      	movs	r0, #19
 8002c3e:	f7fe fbfd 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c42:	20db      	movs	r0, #219	; 0xdb
 8002c44:	f002 fc94 	bl	8005570 <putchar>
		gotoxy(21,1);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2015      	movs	r0, #21
 8002c4c:	f7fe fbf6 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c50:	20db      	movs	r0, #219	; 0xdb
 8002c52:	f002 fc8d 	bl	8005570 <putchar>
		gotoxy(20,2);
 8002c56:	2102      	movs	r1, #2
 8002c58:	2014      	movs	r0, #20
 8002c5a:	f7fe fbef 	bl	800143c <gotoxy>
		printf("%c",223);
 8002c5e:	20df      	movs	r0, #223	; 0xdf
 8002c60:	f002 fc86 	bl	8005570 <putchar>
		gotoxy(20,1);
 8002c64:	2101      	movs	r1, #1
 8002c66:	2014      	movs	r0, #20
 8002c68:	f7fe fbe8 	bl	800143c <gotoxy>
		printf("%c",220);
 8002c6c:	20dc      	movs	r0, #220	; 0xdc
 8002c6e:	f002 fc7f 	bl	8005570 <putchar>

	}
	if(gameState->cityLives >= 3){
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d91b      	bls.n	8002cb4 <drawhearth+0xf0>
		gotoxy(23,1);
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	2017      	movs	r0, #23
 8002c80:	f7fe fbdc 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c84:	20db      	movs	r0, #219	; 0xdb
 8002c86:	f002 fc73 	bl	8005570 <putchar>
		gotoxy(25,1);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2019      	movs	r0, #25
 8002c8e:	f7fe fbd5 	bl	800143c <gotoxy>
		printf("%c",219);
 8002c92:	20db      	movs	r0, #219	; 0xdb
 8002c94:	f002 fc6c 	bl	8005570 <putchar>
		gotoxy(24,2);
 8002c98:	2102      	movs	r1, #2
 8002c9a:	2018      	movs	r0, #24
 8002c9c:	f7fe fbce 	bl	800143c <gotoxy>
		printf("%c",223);
 8002ca0:	20df      	movs	r0, #223	; 0xdf
 8002ca2:	f002 fc65 	bl	8005570 <putchar>
		gotoxy(24,1);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2018      	movs	r0, #24
 8002caa:	f7fe fbc7 	bl	800143c <gotoxy>
		printf("%c",220);
 8002cae:	20dc      	movs	r0, #220	; 0xdc
 8002cb0:	f002 fc5e 	bl	8005570 <putchar>
	}
	fgcolor(15);
 8002cb4:	200f      	movs	r0, #15
 8002cb6:	f7fe fb95 	bl	80013e4 <fgcolor>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08006820 	.word	0x08006820

08002cc8 <drawEnemy>:
>>>>>>> Stashed changes
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
<<<<<<< Updated upstream
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 80031b2:	e087      	b.n	80032c4 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fcaa 	bl	8002b16 <fpToInt>
 80031c2:	4604      	mov	r4, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fca2 	bl	8002b16 <fpToInt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0fda      	lsrs	r2, r3, #31
 80031d6:	4413      	add	r3, r2
 80031d8:	105b      	asrs	r3, r3, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	4620      	mov	r0, r4
 80031de:	f7fe fc63 	bl	8001aa8 <gotoxy>
		printf("       ");
 80031e2:	483d      	ldr	r0, [pc, #244]	; (80032d8 <drawEnemy+0x134>)
 80031e4:	f001 fbcc 	bl	8004980 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fc90 	bl	8002b16 <fpToInt>
 80031f6:	4604      	mov	r4, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fc88 	bl	8002b16 <fpToInt>
 8003206:	4603      	mov	r3, r0
 8003208:	3302      	adds	r3, #2
 800320a:	0fda      	lsrs	r2, r3, #31
 800320c:	4413      	add	r3, r2
 800320e:	105b      	asrs	r3, r3, #1
 8003210:	4619      	mov	r1, r3
 8003212:	4620      	mov	r0, r4
 8003214:	f7fe fc48 	bl	8001aa8 <gotoxy>
		printf("       ");
 8003218:	482f      	ldr	r0, [pc, #188]	; (80032d8 <drawEnemy+0x134>)
 800321a:	f001 fbb1 	bl	8004980 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fc75 	bl	8002b16 <fpToInt>
 800322c:	4604      	mov	r4, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fc6d 	bl	8002b16 <fpToInt>
 800323c:	4603      	mov	r3, r0
 800323e:	0fda      	lsrs	r2, r3, #31
 8003240:	4413      	add	r3, r2
 8003242:	105b      	asrs	r3, r3, #1
 8003244:	4619      	mov	r1, r3
 8003246:	4620      	mov	r0, r4
 8003248:	f7fe fc2e 	bl	8001aa8 <gotoxy>
		printf("  o o  ");
 800324c:	4823      	ldr	r0, [pc, #140]	; (80032dc <drawEnemy+0x138>)
 800324e:	f001 fb97 	bl	8004980 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fc5b 	bl	8002b16 <fpToInt>
 8003260:	4604      	mov	r4, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fc53 	bl	8002b16 <fpToInt>
 8003270:	4603      	mov	r3, r0
 8003272:	3302      	adds	r3, #2
 8003274:	0fda      	lsrs	r2, r3, #31
 8003276:	4413      	add	r3, r2
 8003278:	105b      	asrs	r3, r3, #1
 800327a:	4619      	mov	r1, r3
 800327c:	4620      	mov	r0, r4
 800327e:	f7fe fc13 	bl	8001aa8 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8003282:	23bb      	movs	r3, #187	; 0xbb
 8003284:	9303      	str	r3, [sp, #12]
 8003286:	23cd      	movs	r3, #205	; 0xcd
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	23cd      	movs	r3, #205	; 0xcd
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	23cd      	movs	r3, #205	; 0xcd
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	23cd      	movs	r3, #205	; 0xcd
 8003294:	22cd      	movs	r2, #205	; 0xcd
 8003296:	21c9      	movs	r1, #201	; 0xc9
 8003298:	4811      	ldr	r0, [pc, #68]	; (80032e0 <drawEnemy+0x13c>)
 800329a:	f001 fb71 	bl	8004980 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6852      	ldr	r2, [r2, #4]
 80032bc:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f47f af74 	bne.w	80031b4 <drawEnemy+0x10>
	}
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	08005d54 	.word	0x08005d54
 80032dc:	08005d5c 	.word	0x08005d5c
 80032e0:	08005d64 	.word	0x08005d64

080032e4 <drawCity>:
//47 92


=======
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af04      	add	r7, sp, #16
 8002cce:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8002cd6:	e087      	b.n	8002de8 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fcab 	bl	800263c <fpToInt>
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fca3 	bl	800263c <fpToInt>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	0fda      	lsrs	r2, r3, #31
 8002cfa:	4413      	add	r3, r2
 8002cfc:	105b      	asrs	r3, r3, #1
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7fe fb9b 	bl	800143c <gotoxy>
		printf("       ");
 8002d06:	483d      	ldr	r0, [pc, #244]	; (8002dfc <drawEnemy+0x134>)
 8002d08:	f002 fc1a 	bl	8005540 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fc91 	bl	800263c <fpToInt>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fc89 	bl	800263c <fpToInt>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	0fda      	lsrs	r2, r3, #31
 8002d30:	4413      	add	r3, r2
 8002d32:	105b      	asrs	r3, r3, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	4620      	mov	r0, r4
 8002d38:	f7fe fb80 	bl	800143c <gotoxy>
		printf("       ");
 8002d3c:	482f      	ldr	r0, [pc, #188]	; (8002dfc <drawEnemy+0x134>)
 8002d3e:	f002 fbff 	bl	8005540 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fc76 	bl	800263c <fpToInt>
 8002d50:	4604      	mov	r4, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fc6e 	bl	800263c <fpToInt>
 8002d60:	4603      	mov	r3, r0
 8002d62:	0fda      	lsrs	r2, r3, #31
 8002d64:	4413      	add	r3, r2
 8002d66:	105b      	asrs	r3, r3, #1
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7fe fb66 	bl	800143c <gotoxy>
		printf("  o o  ");
 8002d70:	4823      	ldr	r0, [pc, #140]	; (8002e00 <drawEnemy+0x138>)
 8002d72:	f002 fbe5 	bl	8005540 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fc5c 	bl	800263c <fpToInt>
 8002d84:	4604      	mov	r4, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fc54 	bl	800263c <fpToInt>
 8002d94:	4603      	mov	r3, r0
 8002d96:	3302      	adds	r3, #2
 8002d98:	0fda      	lsrs	r2, r3, #31
 8002d9a:	4413      	add	r3, r2
 8002d9c:	105b      	asrs	r3, r3, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7fe fb4b 	bl	800143c <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8002da6:	23bb      	movs	r3, #187	; 0xbb
 8002da8:	9303      	str	r3, [sp, #12]
 8002daa:	23cd      	movs	r3, #205	; 0xcd
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	23cd      	movs	r3, #205	; 0xcd
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	23cd      	movs	r3, #205	; 0xcd
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	23cd      	movs	r3, #205	; 0xcd
 8002db8:	22cd      	movs	r2, #205	; 0xcd
 8002dba:	21c9      	movs	r1, #201	; 0xc9
 8002dbc:	4811      	ldr	r0, [pc, #68]	; (8002e04 <drawEnemy+0x13c>)
 8002dbe:	f002 fbbf 	bl	8005540 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6852      	ldr	r2, [r2, #4]
 8002de0:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f47f af74 	bne.w	8002cd8 <drawEnemy+0x10>
	}
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800682c 	.word	0x0800682c
 8002e00:	08006834 	.word	0x08006834
 8002e04:	0800683c 	.word	0x0800683c

08002e08 <drawCity>:
	printf("%c",127);
>>>>>>> Stashed changes
}

void drawCity(){
<<<<<<< Updated upstream
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	200e      	movs	r0, #14
 80032ec:	f7fe fbdc 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032f0:	20db      	movs	r0, #219	; 0xdb
 80032f2:	f001 fb5d 	bl	80049b0 <putchar>

	gotoxy(16,44);
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	2010      	movs	r0, #16
 80032fa:	f7fe fbd5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80032fe:	20db      	movs	r0, #219	; 0xdb
 8003300:	f001 fb56 	bl	80049b0 <putchar>

	gotoxy(17,44);
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	2011      	movs	r0, #17
 8003308:	f7fe fbce 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800330c:	20db      	movs	r0, #219	; 0xdb
 800330e:	f001 fb4f 	bl	80049b0 <putchar>
	gotoxy(17,43);
 8003312:	212b      	movs	r1, #43	; 0x2b
 8003314:	2011      	movs	r0, #17
 8003316:	f7fe fbc7 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800331a:	20db      	movs	r0, #219	; 0xdb
 800331c:	f001 fb48 	bl	80049b0 <putchar>

	gotoxy(19,44);
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	2013      	movs	r0, #19
 8003324:	f7fe fbc0 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003328:	20dc      	movs	r0, #220	; 0xdc
 800332a:	f001 fb41 	bl	80049b0 <putchar>

	gotoxy(21,44);
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	2015      	movs	r0, #21
 8003332:	f7fe fbb9 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003336:	20db      	movs	r0, #219	; 0xdb
 8003338:	f001 fb3a 	bl	80049b0 <putchar>

	gotoxy(23,44);
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	2017      	movs	r0, #23
 8003340:	f7fe fbb2 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003344:	20db      	movs	r0, #219	; 0xdb
 8003346:	f001 fb33 	bl	80049b0 <putchar>
	gotoxy(23,43);
 800334a:	212b      	movs	r1, #43	; 0x2b
 800334c:	2017      	movs	r0, #23
 800334e:	f7fe fbab 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003352:	20dc      	movs	r0, #220	; 0xdc
 8003354:	f001 fb2c 	bl	80049b0 <putchar>

	gotoxy(25,44);
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	2019      	movs	r0, #25
 800335c:	f7fe fba4 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003360:	20db      	movs	r0, #219	; 0xdb
 8003362:	f001 fb25 	bl	80049b0 <putchar>
	gotoxy(25,43);
 8003366:	212b      	movs	r1, #43	; 0x2b
 8003368:	2019      	movs	r0, #25
 800336a:	f7fe fb9d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800336e:	20db      	movs	r0, #219	; 0xdb
 8003370:	f001 fb1e 	bl	80049b0 <putchar>
	gotoxy(25,42);
 8003374:	212a      	movs	r1, #42	; 0x2a
 8003376:	2019      	movs	r0, #25
 8003378:	f7fe fb96 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800337c:	20db      	movs	r0, #219	; 0xdb
 800337e:	f001 fb17 	bl	80049b0 <putchar>

	gotoxy(27,44);
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	201b      	movs	r0, #27
 8003386:	f7fe fb8f 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800338a:	20db      	movs	r0, #219	; 0xdb
 800338c:	f001 fb10 	bl	80049b0 <putchar>
	gotoxy(27,43);
 8003390:	212b      	movs	r1, #43	; 0x2b
 8003392:	201b      	movs	r0, #27
 8003394:	f7fe fb88 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003398:	20dc      	movs	r0, #220	; 0xdc
 800339a:	f001 fb09 	bl	80049b0 <putchar>

	gotoxy(28,44);
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	201c      	movs	r0, #28
 80033a2:	f7fe fb81 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033a6:	20db      	movs	r0, #219	; 0xdb
 80033a8:	f001 fb02 	bl	80049b0 <putchar>

	gotoxy(36,44);
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	2024      	movs	r0, #36	; 0x24
 80033b0:	f7fe fb7a 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033b4:	20db      	movs	r0, #219	; 0xdb
 80033b6:	f001 fafb 	bl	80049b0 <putchar>
	gotoxy(36,43);
 80033ba:	212b      	movs	r1, #43	; 0x2b
 80033bc:	2024      	movs	r0, #36	; 0x24
 80033be:	f7fe fb73 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033c2:	20db      	movs	r0, #219	; 0xdb
 80033c4:	f001 faf4 	bl	80049b0 <putchar>

	gotoxy(37,44);
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	2025      	movs	r0, #37	; 0x25
 80033cc:	f7fe fb6c 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033d0:	20db      	movs	r0, #219	; 0xdb
 80033d2:	f001 faed 	bl	80049b0 <putchar>

	gotoxy(38,44);
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	2026      	movs	r0, #38	; 0x26
 80033da:	f7fe fb65 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80033de:	20dc      	movs	r0, #220	; 0xdc
 80033e0:	f001 fae6 	bl	80049b0 <putchar>

	gotoxy(40,44);
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	2028      	movs	r0, #40	; 0x28
 80033e8:	f7fe fb5e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033ec:	20db      	movs	r0, #219	; 0xdb
 80033ee:	f001 fadf 	bl	80049b0 <putchar>
	gotoxy(40,43);
 80033f2:	212b      	movs	r1, #43	; 0x2b
 80033f4:	2028      	movs	r0, #40	; 0x28
 80033f6:	f7fe fb57 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80033fa:	20db      	movs	r0, #219	; 0xdb
 80033fc:	f001 fad8 	bl	80049b0 <putchar>

	gotoxy(41,43);
 8003400:	212b      	movs	r1, #43	; 0x2b
 8003402:	2029      	movs	r0, #41	; 0x29
 8003404:	f7fe fb50 	bl	8001aa8 <gotoxy>
	printf("%c",205);
 8003408:	20cd      	movs	r0, #205	; 0xcd
 800340a:	f001 fad1 	bl	80049b0 <putchar>

	gotoxy(42,44);
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	202a      	movs	r0, #42	; 0x2a
 8003412:	f7fe fb49 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003416:	20db      	movs	r0, #219	; 0xdb
 8003418:	f001 faca 	bl	80049b0 <putchar>
	gotoxy(42,43);
 800341c:	212b      	movs	r1, #43	; 0x2b
 800341e:	202a      	movs	r0, #42	; 0x2a
 8003420:	f7fe fb42 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003424:	20db      	movs	r0, #219	; 0xdb
 8003426:	f001 fac3 	bl	80049b0 <putchar>

	gotoxy(45,44);
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	202d      	movs	r0, #45	; 0x2d
 800342e:	f7fe fb3b 	bl	8001aa8 <gotoxy>
	printf("%c",186);
 8003432:	20ba      	movs	r0, #186	; 0xba
 8003434:	f001 fabc 	bl	80049b0 <putchar>

	gotoxy(47,44);
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	202f      	movs	r0, #47	; 0x2f
 800343c:	f7fe fb34 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003440:	20dc      	movs	r0, #220	; 0xdc
 8003442:	f001 fab5 	bl	80049b0 <putchar>

	gotoxy(55,44);
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	2037      	movs	r0, #55	; 0x37
 800344a:	f7fe fb2d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800344e:	20db      	movs	r0, #219	; 0xdb
 8003450:	f001 faae 	bl	80049b0 <putchar>
	gotoxy(55,43);
 8003454:	212b      	movs	r1, #43	; 0x2b
 8003456:	2037      	movs	r0, #55	; 0x37
 8003458:	f7fe fb26 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800345c:	20dc      	movs	r0, #220	; 0xdc
 800345e:	f001 faa7 	bl	80049b0 <putchar>

	gotoxy(58,44);
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	203a      	movs	r0, #58	; 0x3a
 8003466:	f7fe fb1f 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800346a:	20db      	movs	r0, #219	; 0xdb
 800346c:	f001 faa0 	bl	80049b0 <putchar>
	gotoxy(58,43);
 8003470:	212b      	movs	r1, #43	; 0x2b
 8003472:	203a      	movs	r0, #58	; 0x3a
 8003474:	f7fe fb18 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003478:	20db      	movs	r0, #219	; 0xdb
 800347a:	f001 fa99 	bl	80049b0 <putchar>
	gotoxy(58,42);
 800347e:	212a      	movs	r1, #42	; 0x2a
 8003480:	203a      	movs	r0, #58	; 0x3a
 8003482:	f7fe fb11 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003486:	20dc      	movs	r0, #220	; 0xdc
 8003488:	f001 fa92 	bl	80049b0 <putchar>

	gotoxy(59,44);
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	203b      	movs	r0, #59	; 0x3b
 8003490:	f7fe fb0a 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003494:	20db      	movs	r0, #219	; 0xdb
 8003496:	f001 fa8b 	bl	80049b0 <putchar>
	gotoxy(59,43);
 800349a:	212b      	movs	r1, #43	; 0x2b
 800349c:	203b      	movs	r0, #59	; 0x3b
 800349e:	f7fe fb03 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80034a2:	20dc      	movs	r0, #220	; 0xdc
 80034a4:	f001 fa84 	bl	80049b0 <putchar>

	gotoxy(60,44);
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	203c      	movs	r0, #60	; 0x3c
 80034ac:	f7fe fafc 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034b0:	20db      	movs	r0, #219	; 0xdb
 80034b2:	f001 fa7d 	bl	80049b0 <putchar>

	gotoxy(61,44);
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	203d      	movs	r0, #61	; 0x3d
 80034ba:	f7fe faf5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034be:	20db      	movs	r0, #219	; 0xdb
 80034c0:	f001 fa76 	bl	80049b0 <putchar>
	gotoxy(61,43);
 80034c4:	212b      	movs	r1, #43	; 0x2b
 80034c6:	203d      	movs	r0, #61	; 0x3d
 80034c8:	f7fe faee 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034cc:	20db      	movs	r0, #219	; 0xdb
 80034ce:	f001 fa6f 	bl	80049b0 <putchar>

	gotoxy(63,44);
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	203f      	movs	r0, #63	; 0x3f
 80034d6:	f7fe fae7 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034da:	20db      	movs	r0, #219	; 0xdb
 80034dc:	f001 fa68 	bl	80049b0 <putchar>

	gotoxy(64,44);
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	2040      	movs	r0, #64	; 0x40
 80034e4:	f7fe fae0 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80034e8:	20dc      	movs	r0, #220	; 0xdc
 80034ea:	f001 fa61 	bl	80049b0 <putchar>

	gotoxy(65,44);
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	2041      	movs	r0, #65	; 0x41
 80034f2:	f7fe fad9 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80034f6:	20db      	movs	r0, #219	; 0xdb
 80034f8:	f001 fa5a 	bl	80049b0 <putchar>

	gotoxy(67,44);
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	2043      	movs	r0, #67	; 0x43
 8003500:	f7fe fad2 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003504:	20db      	movs	r0, #219	; 0xdb
 8003506:	f001 fa53 	bl	80049b0 <putchar>
	gotoxy(67,43);
 800350a:	212b      	movs	r1, #43	; 0x2b
 800350c:	2043      	movs	r0, #67	; 0x43
 800350e:	f7fe facb 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003512:	20db      	movs	r0, #219	; 0xdb
 8003514:	f001 fa4c 	bl	80049b0 <putchar>
	gotoxy(67,42);
 8003518:	212a      	movs	r1, #42	; 0x2a
 800351a:	2043      	movs	r0, #67	; 0x43
 800351c:	f7fe fac4 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003520:	20db      	movs	r0, #219	; 0xdb
 8003522:	f001 fa45 	bl	80049b0 <putchar>

	gotoxy(69,44);
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	2045      	movs	r0, #69	; 0x45
 800352a:	f7fe fabd 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800352e:	20db      	movs	r0, #219	; 0xdb
 8003530:	f001 fa3e 	bl	80049b0 <putchar>
	gotoxy(69,43);
 8003534:	212b      	movs	r1, #43	; 0x2b
 8003536:	2045      	movs	r0, #69	; 0x45
 8003538:	f7fe fab6 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800353c:	20db      	movs	r0, #219	; 0xdb
 800353e:	f001 fa37 	bl	80049b0 <putchar>
	gotoxy(69,42);
 8003542:	212a      	movs	r1, #42	; 0x2a
 8003544:	2045      	movs	r0, #69	; 0x45
 8003546:	f7fe faaf 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800354a:	20db      	movs	r0, #219	; 0xdb
 800354c:	f001 fa30 	bl	80049b0 <putchar>

	gotoxy(71,44);
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	2047      	movs	r0, #71	; 0x47
 8003554:	f7fe faa8 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003558:	20db      	movs	r0, #219	; 0xdb
 800355a:	f001 fa29 	bl	80049b0 <putchar>
	gotoxy(71,43);
 800355e:	212b      	movs	r1, #43	; 0x2b
 8003560:	2047      	movs	r0, #71	; 0x47
 8003562:	f7fe faa1 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003566:	20db      	movs	r0, #219	; 0xdb
 8003568:	f001 fa22 	bl	80049b0 <putchar>
	gotoxy(71,42);
 800356c:	212a      	movs	r1, #42	; 0x2a
 800356e:	2047      	movs	r0, #71	; 0x47
 8003570:	f7fe fa9a 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003574:	20db      	movs	r0, #219	; 0xdb
 8003576:	f001 fa1b 	bl	80049b0 <putchar>

	gotoxy(73,44);
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	2049      	movs	r0, #73	; 0x49
 800357e:	f7fe fa93 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003582:	20db      	movs	r0, #219	; 0xdb
 8003584:	f001 fa14 	bl	80049b0 <putchar>
	gotoxy(73,43);
 8003588:	212b      	movs	r1, #43	; 0x2b
 800358a:	2049      	movs	r0, #73	; 0x49
 800358c:	f7fe fa8c 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003590:	20db      	movs	r0, #219	; 0xdb
 8003592:	f001 fa0d 	bl	80049b0 <putchar>

	gotoxy(74,44);
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	204a      	movs	r0, #74	; 0x4a
 800359a:	f7fe fa85 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800359e:	20db      	movs	r0, #219	; 0xdb
 80035a0:	f001 fa06 	bl	80049b0 <putchar>

	gotoxy(76,44);
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	204c      	movs	r0, #76	; 0x4c
 80035a8:	f7fe fa7e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035ac:	20db      	movs	r0, #219	; 0xdb
 80035ae:	f001 f9ff 	bl	80049b0 <putchar>

	gotoxy(77,44);
 80035b2:	212c      	movs	r1, #44	; 0x2c
 80035b4:	204d      	movs	r0, #77	; 0x4d
 80035b6:	f7fe fa77 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035ba:	20db      	movs	r0, #219	; 0xdb
 80035bc:	f001 f9f8 	bl	80049b0 <putchar>
	gotoxy(77,43);
 80035c0:	212b      	movs	r1, #43	; 0x2b
 80035c2:	204d      	movs	r0, #77	; 0x4d
 80035c4:	f7fe fa70 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035c8:	20db      	movs	r0, #219	; 0xdb
 80035ca:	f001 f9f1 	bl	80049b0 <putchar>

	gotoxy(79,44);
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	204f      	movs	r0, #79	; 0x4f
 80035d2:	f7fe fa69 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035d6:	20db      	movs	r0, #219	; 0xdb
 80035d8:	f001 f9ea 	bl	80049b0 <putchar>
	gotoxy(79,44);
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	204f      	movs	r0, #79	; 0x4f
 80035e0:	f7fe fa62 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80035e4:	20dc      	movs	r0, #220	; 0xdc
 80035e6:	f001 f9e3 	bl	80049b0 <putchar>

	gotoxy(81,44);
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	2051      	movs	r0, #81	; 0x51
 80035ee:	f7fe fa5b 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80035f2:	20db      	movs	r0, #219	; 0xdb
 80035f4:	f001 f9dc 	bl	80049b0 <putchar>
	gotoxy(81,43);
 80035f8:	212b      	movs	r1, #43	; 0x2b
 80035fa:	2051      	movs	r0, #81	; 0x51
 80035fc:	f7fe fa54 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003600:	20db      	movs	r0, #219	; 0xdb
 8003602:	f001 f9d5 	bl	80049b0 <putchar>

	gotoxy(82,44);
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	2052      	movs	r0, #82	; 0x52
 800360a:	f7fe fa4d 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800360e:	20db      	movs	r0, #219	; 0xdb
 8003610:	f001 f9ce 	bl	80049b0 <putchar>

	gotoxy(85,44);
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	2055      	movs	r0, #85	; 0x55
 8003618:	f7fe fa46 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800361c:	20db      	movs	r0, #219	; 0xdb
 800361e:	f001 f9c7 	bl	80049b0 <putchar>
	gotoxy(85,43);
 8003622:	212b      	movs	r1, #43	; 0x2b
 8003624:	2055      	movs	r0, #85	; 0x55
 8003626:	f7fe fa3f 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800362a:	20db      	movs	r0, #219	; 0xdb
 800362c:	f001 f9c0 	bl	80049b0 <putchar>
	gotoxy(85,42);
 8003630:	212a      	movs	r1, #42	; 0x2a
 8003632:	2055      	movs	r0, #85	; 0x55
 8003634:	f7fe fa38 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003638:	20dc      	movs	r0, #220	; 0xdc
 800363a:	f001 f9b9 	bl	80049b0 <putchar>

	gotoxy(86,44);
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	2056      	movs	r0, #86	; 0x56
 8003642:	f7fe fa31 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003646:	20db      	movs	r0, #219	; 0xdb
 8003648:	f001 f9b2 	bl	80049b0 <putchar>

	gotoxy(87,44);
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	2057      	movs	r0, #87	; 0x57
 8003650:	f7fe fa2a 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003654:	20dc      	movs	r0, #220	; 0xdc
 8003656:	f001 f9ab 	bl	80049b0 <putchar>

	gotoxy(88,44);
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	2058      	movs	r0, #88	; 0x58
 800365e:	f7fe fa23 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003662:	20db      	movs	r0, #219	; 0xdb
 8003664:	f001 f9a4 	bl	80049b0 <putchar>
	gotoxy(88,43);
 8003668:	212b      	movs	r1, #43	; 0x2b
 800366a:	2058      	movs	r0, #88	; 0x58
 800366c:	f7fe fa1c 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003670:	20dc      	movs	r0, #220	; 0xdc
 8003672:	f001 f99d 	bl	80049b0 <putchar>

	gotoxy(93,44);
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	205d      	movs	r0, #93	; 0x5d
 800367a:	f7fe fa15 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800367e:	20db      	movs	r0, #219	; 0xdb
 8003680:	f001 f996 	bl	80049b0 <putchar>

	gotoxy(94,44);
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	205e      	movs	r0, #94	; 0x5e
 8003688:	f7fe fa0e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800368c:	20db      	movs	r0, #219	; 0xdb
 800368e:	f001 f98f 	bl	80049b0 <putchar>
	gotoxy(94,43);
 8003692:	212b      	movs	r1, #43	; 0x2b
 8003694:	205e      	movs	r0, #94	; 0x5e
 8003696:	f7fe fa07 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 800369a:	20dc      	movs	r0, #220	; 0xdc
 800369c:	f001 f988 	bl	80049b0 <putchar>

	gotoxy(95,44);
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	205f      	movs	r0, #95	; 0x5f
 80036a4:	f7fe fa00 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80036a8:	20dc      	movs	r0, #220	; 0xdc
 80036aa:	f001 f981 	bl	80049b0 <putchar>

	gotoxy(96,44);
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	2060      	movs	r0, #96	; 0x60
 80036b2:	f7fe f9f9 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80036b6:	20db      	movs	r0, #219	; 0xdb
 80036b8:	f001 f97a 	bl	80049b0 <putchar>

	gotoxy(98,44);
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	2062      	movs	r0, #98	; 0x62
 80036c0:	f7fe f9f2 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80036c4:	20db      	movs	r0, #219	; 0xdb
 80036c6:	f001 f973 	bl	80049b0 <putchar>
	gotoxy(98,43);
 80036ca:	212b      	movs	r1, #43	; 0x2b
 80036cc:	2062      	movs	r0, #98	; 0x62
 80036ce:	f7fe f9eb 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80036d2:	20dc      	movs	r0, #220	; 0xdc
 80036d4:	f001 f96c 	bl	80049b0 <putchar>

	gotoxy(99,44);
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	2063      	movs	r0, #99	; 0x63
 80036dc:	f7fe f9e4 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80036e0:	20db      	movs	r0, #219	; 0xdb
 80036e2:	f001 f965 	bl	80049b0 <putchar>

	gotoxy(103,44);
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	2067      	movs	r0, #103	; 0x67
 80036ea:	f7fe f9dd 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80036ee:	20db      	movs	r0, #219	; 0xdb
 80036f0:	f001 f95e 	bl	80049b0 <putchar>

	gotoxy(104,44);
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	2068      	movs	r0, #104	; 0x68
 80036f8:	f7fe f9d6 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80036fc:	20dc      	movs	r0, #220	; 0xdc
 80036fe:	f001 f957 	bl	80049b0 <putchar>

	gotoxy(107,44);
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	206b      	movs	r0, #107	; 0x6b
 8003706:	f7fe f9cf 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800370a:	20db      	movs	r0, #219	; 0xdb
 800370c:	f001 f950 	bl	80049b0 <putchar>

	gotoxy(108,44);
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	206c      	movs	r0, #108	; 0x6c
 8003714:	f7fe f9c8 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003718:	20db      	movs	r0, #219	; 0xdb
 800371a:	f001 f949 	bl	80049b0 <putchar>
	gotoxy(108,43);
 800371e:	212b      	movs	r1, #43	; 0x2b
 8003720:	206c      	movs	r0, #108	; 0x6c
 8003722:	f7fe f9c1 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003726:	20db      	movs	r0, #219	; 0xdb
 8003728:	f001 f942 	bl	80049b0 <putchar>

	gotoxy(109,44);
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	206d      	movs	r0, #109	; 0x6d
 8003730:	f7fe f9ba 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003734:	20dc      	movs	r0, #220	; 0xdc
 8003736:	f001 f93b 	bl	80049b0 <putchar>

	gotoxy(112,44);
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	2070      	movs	r0, #112	; 0x70
 800373e:	f7fe f9b3 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003742:	20db      	movs	r0, #219	; 0xdb
 8003744:	f001 f934 	bl	80049b0 <putchar>

	gotoxy(113,44);
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	2071      	movs	r0, #113	; 0x71
 800374c:	f7fe f9ac 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003750:	20dc      	movs	r0, #220	; 0xdc
 8003752:	f001 f92d 	bl	80049b0 <putchar>

	gotoxy(114,44);
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	2072      	movs	r0, #114	; 0x72
 800375a:	f7fe f9a5 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800375e:	20db      	movs	r0, #219	; 0xdb
 8003760:	f001 f926 	bl	80049b0 <putchar>
	gotoxy(114,43);
 8003764:	212b      	movs	r1, #43	; 0x2b
 8003766:	2072      	movs	r0, #114	; 0x72
 8003768:	f7fe f99e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800376c:	20db      	movs	r0, #219	; 0xdb
 800376e:	f001 f91f 	bl	80049b0 <putchar>

	gotoxy(115,44);
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	2073      	movs	r0, #115	; 0x73
 8003776:	f7fe f997 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800377a:	20db      	movs	r0, #219	; 0xdb
 800377c:	f001 f918 	bl	80049b0 <putchar>

	gotoxy(120,44);
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	2078      	movs	r0, #120	; 0x78
 8003784:	f7fe f990 	bl	8001aa8 <gotoxy>
	printf("%c",47);
 8003788:	202f      	movs	r0, #47	; 0x2f
 800378a:	f001 f911 	bl	80049b0 <putchar>
	gotoxy(121,43);
 800378e:	212b      	movs	r1, #43	; 0x2b
 8003790:	2079      	movs	r0, #121	; 0x79
 8003792:	f7fe f989 	bl	8001aa8 <gotoxy>
	printf("%c",47);
 8003796:	202f      	movs	r0, #47	; 0x2f
 8003798:	f001 f90a 	bl	80049b0 <putchar>
	gotoxy(122,43);
 800379c:	212b      	movs	r1, #43	; 0x2b
 800379e:	207a      	movs	r0, #122	; 0x7a
 80037a0:	f7fe f982 	bl	8001aa8 <gotoxy>
	printf("%c",223);
 80037a4:	20df      	movs	r0, #223	; 0xdf
 80037a6:	f001 f903 	bl	80049b0 <putchar>
	gotoxy(122,42);
 80037aa:	212a      	movs	r1, #42	; 0x2a
 80037ac:	207a      	movs	r0, #122	; 0x7a
 80037ae:	f7fe f97b 	bl	8001aa8 <gotoxy>
	printf("%c",168);
 80037b2:	20a8      	movs	r0, #168	; 0xa8
 80037b4:	f001 f8fc 	bl	80049b0 <putchar>
	gotoxy(123,43);
 80037b8:	212b      	movs	r1, #43	; 0x2b
 80037ba:	207b      	movs	r0, #123	; 0x7b
 80037bc:	f7fe f974 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 80037c0:	205c      	movs	r0, #92	; 0x5c
 80037c2:	f001 f8f5 	bl	80049b0 <putchar>
	gotoxy(124,44);
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	207c      	movs	r0, #124	; 0x7c
 80037ca:	f7fe f96d 	bl	8001aa8 <gotoxy>
	printf("%c",92);
 80037ce:	205c      	movs	r0, #92	; 0x5c
 80037d0:	f001 f8ee 	bl	80049b0 <putchar>

	gotoxy(127,44);
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	207f      	movs	r0, #127	; 0x7f
 80037d8:	f7fe f966 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80037dc:	20db      	movs	r0, #219	; 0xdb
 80037de:	f001 f8e7 	bl	80049b0 <putchar>
	gotoxy(127,43);
 80037e2:	212b      	movs	r1, #43	; 0x2b
 80037e4:	207f      	movs	r0, #127	; 0x7f
 80037e6:	f7fe f95f 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80037ea:	20db      	movs	r0, #219	; 0xdb
 80037ec:	f001 f8e0 	bl	80049b0 <putchar>
	gotoxy(127,42);
 80037f0:	212a      	movs	r1, #42	; 0x2a
 80037f2:	207f      	movs	r0, #127	; 0x7f
 80037f4:	f7fe f958 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80037f8:	20db      	movs	r0, #219	; 0xdb
 80037fa:	f001 f8d9 	bl	80049b0 <putchar>

	gotoxy(129,44);
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	2081      	movs	r0, #129	; 0x81
 8003802:	f7fe f951 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003806:	20db      	movs	r0, #219	; 0xdb
 8003808:	f001 f8d2 	bl	80049b0 <putchar>
	gotoxy(129,43);
 800380c:	212b      	movs	r1, #43	; 0x2b
 800380e:	2081      	movs	r0, #129	; 0x81
 8003810:	f7fe f94a 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003814:	20dc      	movs	r0, #220	; 0xdc
 8003816:	f001 f8cb 	bl	80049b0 <putchar>

	gotoxy(130,44);
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	2082      	movs	r0, #130	; 0x82
 800381e:	f7fe f943 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003822:	20db      	movs	r0, #219	; 0xdb
 8003824:	f001 f8c4 	bl	80049b0 <putchar>

	gotoxy(131,44);
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	2083      	movs	r0, #131	; 0x83
 800382c:	f7fe f93c 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003830:	20dc      	movs	r0, #220	; 0xdc
 8003832:	f001 f8bd 	bl	80049b0 <putchar>

	gotoxy(132,44);
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	2084      	movs	r0, #132	; 0x84
 800383a:	f7fe f935 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800383e:	20db      	movs	r0, #219	; 0xdb
 8003840:	f001 f8b6 	bl	80049b0 <putchar>

	gotoxy(133,44);
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	2085      	movs	r0, #133	; 0x85
 8003848:	f7fe f92e 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800384c:	20db      	movs	r0, #219	; 0xdb
 800384e:	f001 f8af 	bl	80049b0 <putchar>
	gotoxy(133,43);
 8003852:	212b      	movs	r1, #43	; 0x2b
 8003854:	2085      	movs	r0, #133	; 0x85
 8003856:	f7fe f927 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 800385a:	20db      	movs	r0, #219	; 0xdb
 800385c:	f001 f8a8 	bl	80049b0 <putchar>

	gotoxy(134,44);
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	2086      	movs	r0, #134	; 0x86
 8003864:	f7fe f920 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 8003868:	20db      	movs	r0, #219	; 0xdb
 800386a:	f001 f8a1 	bl	80049b0 <putchar>

	gotoxy(135,44);
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	2087      	movs	r0, #135	; 0x87
 8003872:	f7fe f919 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003876:	20dc      	movs	r0, #220	; 0xdc
 8003878:	f001 f89a 	bl	80049b0 <putchar>

	gotoxy(137,44);
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	2089      	movs	r0, #137	; 0x89
 8003880:	f7fe f912 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003884:	20dc      	movs	r0, #220	; 0xdc
 8003886:	f001 f893 	bl	80049b0 <putchar>

	gotoxy(139,44);
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	208b      	movs	r0, #139	; 0x8b
 800388e:	f7fe f90b 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 8003892:	20dc      	movs	r0, #220	; 0xdc
 8003894:	f001 f88c 	bl	80049b0 <putchar>

	gotoxy(141,44);
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	208d      	movs	r0, #141	; 0x8d
 800389c:	f7fe f904 	bl	8001aa8 <gotoxy>
	printf("%c",219);
 80038a0:	20db      	movs	r0, #219	; 0xdb
 80038a2:	f001 f885 	bl	80049b0 <putchar>

	gotoxy(142,44);
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	208e      	movs	r0, #142	; 0x8e
 80038aa:	f7fe f8fd 	bl	8001aa8 <gotoxy>
	printf("%c",220);
 80038ae:	20dc      	movs	r0, #220	; 0xdc
 80038b0:	f001 f87e 	bl	80049b0 <putchar>
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <drawScore>:

void drawScore(gameState_t* gameState){
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 80038c0:	2100      	movs	r1, #0
 80038c2:	208c      	movs	r0, #140	; 0x8c
 80038c4:	f7fe f8f0 	bl	8001aa8 <gotoxy>
	printf("Your score is: %d", gameState->score);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	4619      	mov	r1, r3
 80038ce:	4803      	ldr	r0, [pc, #12]	; (80038dc <drawScore+0x24>)
 80038d0:	f001 f856 	bl	8004980 <iprintf>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08005d74 	.word	0x08005d74

080038e0 <createBulletNode>:
=======
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	200e      	movs	r0, #14
 8002e10:	f7fe fb14 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e14:	20db      	movs	r0, #219	; 0xdb
 8002e16:	f002 fbab 	bl	8005570 <putchar>

	gotoxy(16,44);
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	2010      	movs	r0, #16
 8002e1e:	f7fe fb0d 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e22:	20db      	movs	r0, #219	; 0xdb
 8002e24:	f002 fba4 	bl	8005570 <putchar>

	gotoxy(17,44);
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	2011      	movs	r0, #17
 8002e2c:	f7fe fb06 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e30:	20db      	movs	r0, #219	; 0xdb
 8002e32:	f002 fb9d 	bl	8005570 <putchar>
	gotoxy(17,43);
 8002e36:	212b      	movs	r1, #43	; 0x2b
 8002e38:	2011      	movs	r0, #17
 8002e3a:	f7fe faff 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e3e:	20db      	movs	r0, #219	; 0xdb
 8002e40:	f002 fb96 	bl	8005570 <putchar>

	gotoxy(19,44);
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	2013      	movs	r0, #19
 8002e48:	f7fe faf8 	bl	800143c <gotoxy>
	printf("%c",220);
 8002e4c:	20dc      	movs	r0, #220	; 0xdc
 8002e4e:	f002 fb8f 	bl	8005570 <putchar>

	gotoxy(21,44);
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	2015      	movs	r0, #21
 8002e56:	f7fe faf1 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e5a:	20db      	movs	r0, #219	; 0xdb
 8002e5c:	f002 fb88 	bl	8005570 <putchar>

	gotoxy(23,44);
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	2017      	movs	r0, #23
 8002e64:	f7fe faea 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e68:	20db      	movs	r0, #219	; 0xdb
 8002e6a:	f002 fb81 	bl	8005570 <putchar>
	gotoxy(23,43);
 8002e6e:	212b      	movs	r1, #43	; 0x2b
 8002e70:	2017      	movs	r0, #23
 8002e72:	f7fe fae3 	bl	800143c <gotoxy>
	printf("%c",220);
 8002e76:	20dc      	movs	r0, #220	; 0xdc
 8002e78:	f002 fb7a 	bl	8005570 <putchar>

	gotoxy(25,44);
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	2019      	movs	r0, #25
 8002e80:	f7fe fadc 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e84:	20db      	movs	r0, #219	; 0xdb
 8002e86:	f002 fb73 	bl	8005570 <putchar>
	gotoxy(25,43);
 8002e8a:	212b      	movs	r1, #43	; 0x2b
 8002e8c:	2019      	movs	r0, #25
 8002e8e:	f7fe fad5 	bl	800143c <gotoxy>
	printf("%c",219);
 8002e92:	20db      	movs	r0, #219	; 0xdb
 8002e94:	f002 fb6c 	bl	8005570 <putchar>
	gotoxy(25,42);
 8002e98:	212a      	movs	r1, #42	; 0x2a
 8002e9a:	2019      	movs	r0, #25
 8002e9c:	f7fe face 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ea0:	20db      	movs	r0, #219	; 0xdb
 8002ea2:	f002 fb65 	bl	8005570 <putchar>

	gotoxy(27,44);
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	201b      	movs	r0, #27
 8002eaa:	f7fe fac7 	bl	800143c <gotoxy>
	printf("%c",219);
 8002eae:	20db      	movs	r0, #219	; 0xdb
 8002eb0:	f002 fb5e 	bl	8005570 <putchar>
	gotoxy(27,43);
 8002eb4:	212b      	movs	r1, #43	; 0x2b
 8002eb6:	201b      	movs	r0, #27
 8002eb8:	f7fe fac0 	bl	800143c <gotoxy>
	printf("%c",220);
 8002ebc:	20dc      	movs	r0, #220	; 0xdc
 8002ebe:	f002 fb57 	bl	8005570 <putchar>

	gotoxy(28,44);
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	201c      	movs	r0, #28
 8002ec6:	f7fe fab9 	bl	800143c <gotoxy>
	printf("%c",219);
 8002eca:	20db      	movs	r0, #219	; 0xdb
 8002ecc:	f002 fb50 	bl	8005570 <putchar>

	gotoxy(36,44);
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	2024      	movs	r0, #36	; 0x24
 8002ed4:	f7fe fab2 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ed8:	20db      	movs	r0, #219	; 0xdb
 8002eda:	f002 fb49 	bl	8005570 <putchar>
	gotoxy(36,43);
 8002ede:	212b      	movs	r1, #43	; 0x2b
 8002ee0:	2024      	movs	r0, #36	; 0x24
 8002ee2:	f7fe faab 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ee6:	20db      	movs	r0, #219	; 0xdb
 8002ee8:	f002 fb42 	bl	8005570 <putchar>

	gotoxy(37,44);
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	2025      	movs	r0, #37	; 0x25
 8002ef0:	f7fe faa4 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ef4:	20db      	movs	r0, #219	; 0xdb
 8002ef6:	f002 fb3b 	bl	8005570 <putchar>

	gotoxy(38,44);
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	2026      	movs	r0, #38	; 0x26
 8002efe:	f7fe fa9d 	bl	800143c <gotoxy>
	printf("%c",220);
 8002f02:	20dc      	movs	r0, #220	; 0xdc
 8002f04:	f002 fb34 	bl	8005570 <putchar>

	gotoxy(40,44);
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	2028      	movs	r0, #40	; 0x28
 8002f0c:	f7fe fa96 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f10:	20db      	movs	r0, #219	; 0xdb
 8002f12:	f002 fb2d 	bl	8005570 <putchar>
	gotoxy(40,43);
 8002f16:	212b      	movs	r1, #43	; 0x2b
 8002f18:	2028      	movs	r0, #40	; 0x28
 8002f1a:	f7fe fa8f 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f1e:	20db      	movs	r0, #219	; 0xdb
 8002f20:	f002 fb26 	bl	8005570 <putchar>

	gotoxy(41,43);
 8002f24:	212b      	movs	r1, #43	; 0x2b
 8002f26:	2029      	movs	r0, #41	; 0x29
 8002f28:	f7fe fa88 	bl	800143c <gotoxy>
	printf("%c",205);
 8002f2c:	20cd      	movs	r0, #205	; 0xcd
 8002f2e:	f002 fb1f 	bl	8005570 <putchar>

	gotoxy(42,44);
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	202a      	movs	r0, #42	; 0x2a
 8002f36:	f7fe fa81 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f3a:	20db      	movs	r0, #219	; 0xdb
 8002f3c:	f002 fb18 	bl	8005570 <putchar>
	gotoxy(42,43);
 8002f40:	212b      	movs	r1, #43	; 0x2b
 8002f42:	202a      	movs	r0, #42	; 0x2a
 8002f44:	f7fe fa7a 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f48:	20db      	movs	r0, #219	; 0xdb
 8002f4a:	f002 fb11 	bl	8005570 <putchar>

	gotoxy(45,44);
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	202d      	movs	r0, #45	; 0x2d
 8002f52:	f7fe fa73 	bl	800143c <gotoxy>
	printf("%c",186);
 8002f56:	20ba      	movs	r0, #186	; 0xba
 8002f58:	f002 fb0a 	bl	8005570 <putchar>

	gotoxy(47,44);
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	202f      	movs	r0, #47	; 0x2f
 8002f60:	f7fe fa6c 	bl	800143c <gotoxy>
	printf("%c",220);
 8002f64:	20dc      	movs	r0, #220	; 0xdc
 8002f66:	f002 fb03 	bl	8005570 <putchar>

	gotoxy(55,44);
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	2037      	movs	r0, #55	; 0x37
 8002f6e:	f7fe fa65 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f72:	20db      	movs	r0, #219	; 0xdb
 8002f74:	f002 fafc 	bl	8005570 <putchar>
	gotoxy(55,43);
 8002f78:	212b      	movs	r1, #43	; 0x2b
 8002f7a:	2037      	movs	r0, #55	; 0x37
 8002f7c:	f7fe fa5e 	bl	800143c <gotoxy>
	printf("%c",220);
 8002f80:	20dc      	movs	r0, #220	; 0xdc
 8002f82:	f002 faf5 	bl	8005570 <putchar>

	gotoxy(58,44);
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	203a      	movs	r0, #58	; 0x3a
 8002f8a:	f7fe fa57 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f8e:	20db      	movs	r0, #219	; 0xdb
 8002f90:	f002 faee 	bl	8005570 <putchar>
	gotoxy(58,43);
 8002f94:	212b      	movs	r1, #43	; 0x2b
 8002f96:	203a      	movs	r0, #58	; 0x3a
 8002f98:	f7fe fa50 	bl	800143c <gotoxy>
	printf("%c",219);
 8002f9c:	20db      	movs	r0, #219	; 0xdb
 8002f9e:	f002 fae7 	bl	8005570 <putchar>
	gotoxy(58,42);
 8002fa2:	212a      	movs	r1, #42	; 0x2a
 8002fa4:	203a      	movs	r0, #58	; 0x3a
 8002fa6:	f7fe fa49 	bl	800143c <gotoxy>
	printf("%c",220);
 8002faa:	20dc      	movs	r0, #220	; 0xdc
 8002fac:	f002 fae0 	bl	8005570 <putchar>

	gotoxy(59,44);
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	203b      	movs	r0, #59	; 0x3b
 8002fb4:	f7fe fa42 	bl	800143c <gotoxy>
	printf("%c",219);
 8002fb8:	20db      	movs	r0, #219	; 0xdb
 8002fba:	f002 fad9 	bl	8005570 <putchar>
	gotoxy(59,43);
 8002fbe:	212b      	movs	r1, #43	; 0x2b
 8002fc0:	203b      	movs	r0, #59	; 0x3b
 8002fc2:	f7fe fa3b 	bl	800143c <gotoxy>
	printf("%c",220);
 8002fc6:	20dc      	movs	r0, #220	; 0xdc
 8002fc8:	f002 fad2 	bl	8005570 <putchar>

	gotoxy(60,44);
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	203c      	movs	r0, #60	; 0x3c
 8002fd0:	f7fe fa34 	bl	800143c <gotoxy>
	printf("%c",219);
 8002fd4:	20db      	movs	r0, #219	; 0xdb
 8002fd6:	f002 facb 	bl	8005570 <putchar>

	gotoxy(61,44);
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	203d      	movs	r0, #61	; 0x3d
 8002fde:	f7fe fa2d 	bl	800143c <gotoxy>
	printf("%c",219);
 8002fe2:	20db      	movs	r0, #219	; 0xdb
 8002fe4:	f002 fac4 	bl	8005570 <putchar>
	gotoxy(61,43);
 8002fe8:	212b      	movs	r1, #43	; 0x2b
 8002fea:	203d      	movs	r0, #61	; 0x3d
 8002fec:	f7fe fa26 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ff0:	20db      	movs	r0, #219	; 0xdb
 8002ff2:	f002 fabd 	bl	8005570 <putchar>

	gotoxy(63,44);
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	203f      	movs	r0, #63	; 0x3f
 8002ffa:	f7fe fa1f 	bl	800143c <gotoxy>
	printf("%c",219);
 8002ffe:	20db      	movs	r0, #219	; 0xdb
 8003000:	f002 fab6 	bl	8005570 <putchar>

	gotoxy(64,44);
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	2040      	movs	r0, #64	; 0x40
 8003008:	f7fe fa18 	bl	800143c <gotoxy>
	printf("%c",220);
 800300c:	20dc      	movs	r0, #220	; 0xdc
 800300e:	f002 faaf 	bl	8005570 <putchar>

	gotoxy(65,44);
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	2041      	movs	r0, #65	; 0x41
 8003016:	f7fe fa11 	bl	800143c <gotoxy>
	printf("%c",219);
 800301a:	20db      	movs	r0, #219	; 0xdb
 800301c:	f002 faa8 	bl	8005570 <putchar>

	gotoxy(67,44);
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	2043      	movs	r0, #67	; 0x43
 8003024:	f7fe fa0a 	bl	800143c <gotoxy>
	printf("%c",219);
 8003028:	20db      	movs	r0, #219	; 0xdb
 800302a:	f002 faa1 	bl	8005570 <putchar>
	gotoxy(67,43);
 800302e:	212b      	movs	r1, #43	; 0x2b
 8003030:	2043      	movs	r0, #67	; 0x43
 8003032:	f7fe fa03 	bl	800143c <gotoxy>
	printf("%c",219);
 8003036:	20db      	movs	r0, #219	; 0xdb
 8003038:	f002 fa9a 	bl	8005570 <putchar>
	gotoxy(67,42);
 800303c:	212a      	movs	r1, #42	; 0x2a
 800303e:	2043      	movs	r0, #67	; 0x43
 8003040:	f7fe f9fc 	bl	800143c <gotoxy>
	printf("%c",219);
 8003044:	20db      	movs	r0, #219	; 0xdb
 8003046:	f002 fa93 	bl	8005570 <putchar>

	gotoxy(69,44);
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	2045      	movs	r0, #69	; 0x45
 800304e:	f7fe f9f5 	bl	800143c <gotoxy>
	printf("%c",219);
 8003052:	20db      	movs	r0, #219	; 0xdb
 8003054:	f002 fa8c 	bl	8005570 <putchar>
	gotoxy(69,43);
 8003058:	212b      	movs	r1, #43	; 0x2b
 800305a:	2045      	movs	r0, #69	; 0x45
 800305c:	f7fe f9ee 	bl	800143c <gotoxy>
	printf("%c",219);
 8003060:	20db      	movs	r0, #219	; 0xdb
 8003062:	f002 fa85 	bl	8005570 <putchar>
	gotoxy(69,42);
 8003066:	212a      	movs	r1, #42	; 0x2a
 8003068:	2045      	movs	r0, #69	; 0x45
 800306a:	f7fe f9e7 	bl	800143c <gotoxy>
	printf("%c",219);
 800306e:	20db      	movs	r0, #219	; 0xdb
 8003070:	f002 fa7e 	bl	8005570 <putchar>

	gotoxy(71,44);
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	2047      	movs	r0, #71	; 0x47
 8003078:	f7fe f9e0 	bl	800143c <gotoxy>
	printf("%c",219);
 800307c:	20db      	movs	r0, #219	; 0xdb
 800307e:	f002 fa77 	bl	8005570 <putchar>
	gotoxy(71,43);
 8003082:	212b      	movs	r1, #43	; 0x2b
 8003084:	2047      	movs	r0, #71	; 0x47
 8003086:	f7fe f9d9 	bl	800143c <gotoxy>
	printf("%c",219);
 800308a:	20db      	movs	r0, #219	; 0xdb
 800308c:	f002 fa70 	bl	8005570 <putchar>
	gotoxy(71,42);
 8003090:	212a      	movs	r1, #42	; 0x2a
 8003092:	2047      	movs	r0, #71	; 0x47
 8003094:	f7fe f9d2 	bl	800143c <gotoxy>
	printf("%c",219);
 8003098:	20db      	movs	r0, #219	; 0xdb
 800309a:	f002 fa69 	bl	8005570 <putchar>

	gotoxy(73,44);
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	2049      	movs	r0, #73	; 0x49
 80030a2:	f7fe f9cb 	bl	800143c <gotoxy>
	printf("%c",219);
 80030a6:	20db      	movs	r0, #219	; 0xdb
 80030a8:	f002 fa62 	bl	8005570 <putchar>
	gotoxy(73,43);
 80030ac:	212b      	movs	r1, #43	; 0x2b
 80030ae:	2049      	movs	r0, #73	; 0x49
 80030b0:	f7fe f9c4 	bl	800143c <gotoxy>
	printf("%c",219);
 80030b4:	20db      	movs	r0, #219	; 0xdb
 80030b6:	f002 fa5b 	bl	8005570 <putchar>

	gotoxy(74,44);
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	204a      	movs	r0, #74	; 0x4a
 80030be:	f7fe f9bd 	bl	800143c <gotoxy>
	printf("%c",219);
 80030c2:	20db      	movs	r0, #219	; 0xdb
 80030c4:	f002 fa54 	bl	8005570 <putchar>

	gotoxy(76,44);
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	204c      	movs	r0, #76	; 0x4c
 80030cc:	f7fe f9b6 	bl	800143c <gotoxy>
	printf("%c",219);
 80030d0:	20db      	movs	r0, #219	; 0xdb
 80030d2:	f002 fa4d 	bl	8005570 <putchar>

	gotoxy(77,44);
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	204d      	movs	r0, #77	; 0x4d
 80030da:	f7fe f9af 	bl	800143c <gotoxy>
	printf("%c",219);
 80030de:	20db      	movs	r0, #219	; 0xdb
 80030e0:	f002 fa46 	bl	8005570 <putchar>
	gotoxy(77,43);
 80030e4:	212b      	movs	r1, #43	; 0x2b
 80030e6:	204d      	movs	r0, #77	; 0x4d
 80030e8:	f7fe f9a8 	bl	800143c <gotoxy>
	printf("%c",219);
 80030ec:	20db      	movs	r0, #219	; 0xdb
 80030ee:	f002 fa3f 	bl	8005570 <putchar>

	gotoxy(79,44);
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	204f      	movs	r0, #79	; 0x4f
 80030f6:	f7fe f9a1 	bl	800143c <gotoxy>
	printf("%c",219);
 80030fa:	20db      	movs	r0, #219	; 0xdb
 80030fc:	f002 fa38 	bl	8005570 <putchar>
	gotoxy(79,44);
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	204f      	movs	r0, #79	; 0x4f
 8003104:	f7fe f99a 	bl	800143c <gotoxy>
	printf("%c",220);
 8003108:	20dc      	movs	r0, #220	; 0xdc
 800310a:	f002 fa31 	bl	8005570 <putchar>

	gotoxy(81,44);
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	2051      	movs	r0, #81	; 0x51
 8003112:	f7fe f993 	bl	800143c <gotoxy>
	printf("%c",219);
 8003116:	20db      	movs	r0, #219	; 0xdb
 8003118:	f002 fa2a 	bl	8005570 <putchar>
	gotoxy(81,43);
 800311c:	212b      	movs	r1, #43	; 0x2b
 800311e:	2051      	movs	r0, #81	; 0x51
 8003120:	f7fe f98c 	bl	800143c <gotoxy>
	printf("%c",219);
 8003124:	20db      	movs	r0, #219	; 0xdb
 8003126:	f002 fa23 	bl	8005570 <putchar>

	gotoxy(82,44);
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	2052      	movs	r0, #82	; 0x52
 800312e:	f7fe f985 	bl	800143c <gotoxy>
	printf("%c",219);
 8003132:	20db      	movs	r0, #219	; 0xdb
 8003134:	f002 fa1c 	bl	8005570 <putchar>

	gotoxy(85,44);
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	2055      	movs	r0, #85	; 0x55
 800313c:	f7fe f97e 	bl	800143c <gotoxy>
	printf("%c",219);
 8003140:	20db      	movs	r0, #219	; 0xdb
 8003142:	f002 fa15 	bl	8005570 <putchar>
	gotoxy(85,43);
 8003146:	212b      	movs	r1, #43	; 0x2b
 8003148:	2055      	movs	r0, #85	; 0x55
 800314a:	f7fe f977 	bl	800143c <gotoxy>
	printf("%c",219);
 800314e:	20db      	movs	r0, #219	; 0xdb
 8003150:	f002 fa0e 	bl	8005570 <putchar>
	gotoxy(85,42);
 8003154:	212a      	movs	r1, #42	; 0x2a
 8003156:	2055      	movs	r0, #85	; 0x55
 8003158:	f7fe f970 	bl	800143c <gotoxy>
	printf("%c",220);
 800315c:	20dc      	movs	r0, #220	; 0xdc
 800315e:	f002 fa07 	bl	8005570 <putchar>

	gotoxy(86,44);
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	2056      	movs	r0, #86	; 0x56
 8003166:	f7fe f969 	bl	800143c <gotoxy>
	printf("%c",219);
 800316a:	20db      	movs	r0, #219	; 0xdb
 800316c:	f002 fa00 	bl	8005570 <putchar>

	gotoxy(87,44);
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	2057      	movs	r0, #87	; 0x57
 8003174:	f7fe f962 	bl	800143c <gotoxy>
	printf("%c",220);
 8003178:	20dc      	movs	r0, #220	; 0xdc
 800317a:	f002 f9f9 	bl	8005570 <putchar>

	gotoxy(88,44);
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	2058      	movs	r0, #88	; 0x58
 8003182:	f7fe f95b 	bl	800143c <gotoxy>
	printf("%c",219);
 8003186:	20db      	movs	r0, #219	; 0xdb
 8003188:	f002 f9f2 	bl	8005570 <putchar>
	gotoxy(88,43);
 800318c:	212b      	movs	r1, #43	; 0x2b
 800318e:	2058      	movs	r0, #88	; 0x58
 8003190:	f7fe f954 	bl	800143c <gotoxy>
	printf("%c",220);
 8003194:	20dc      	movs	r0, #220	; 0xdc
 8003196:	f002 f9eb 	bl	8005570 <putchar>

	gotoxy(93,44);
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	205d      	movs	r0, #93	; 0x5d
 800319e:	f7fe f94d 	bl	800143c <gotoxy>
	printf("%c",219);
 80031a2:	20db      	movs	r0, #219	; 0xdb
 80031a4:	f002 f9e4 	bl	8005570 <putchar>

	gotoxy(94,44);
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	205e      	movs	r0, #94	; 0x5e
 80031ac:	f7fe f946 	bl	800143c <gotoxy>
	printf("%c",219);
 80031b0:	20db      	movs	r0, #219	; 0xdb
 80031b2:	f002 f9dd 	bl	8005570 <putchar>
	gotoxy(94,43);
 80031b6:	212b      	movs	r1, #43	; 0x2b
 80031b8:	205e      	movs	r0, #94	; 0x5e
 80031ba:	f7fe f93f 	bl	800143c <gotoxy>
	printf("%c",220);
 80031be:	20dc      	movs	r0, #220	; 0xdc
 80031c0:	f002 f9d6 	bl	8005570 <putchar>

	gotoxy(95,44);
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	205f      	movs	r0, #95	; 0x5f
 80031c8:	f7fe f938 	bl	800143c <gotoxy>
	printf("%c",220);
 80031cc:	20dc      	movs	r0, #220	; 0xdc
 80031ce:	f002 f9cf 	bl	8005570 <putchar>

	gotoxy(96,44);
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	2060      	movs	r0, #96	; 0x60
 80031d6:	f7fe f931 	bl	800143c <gotoxy>
	printf("%c",219);
 80031da:	20db      	movs	r0, #219	; 0xdb
 80031dc:	f002 f9c8 	bl	8005570 <putchar>

	gotoxy(98,44);
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	2062      	movs	r0, #98	; 0x62
 80031e4:	f7fe f92a 	bl	800143c <gotoxy>
	printf("%c",219);
 80031e8:	20db      	movs	r0, #219	; 0xdb
 80031ea:	f002 f9c1 	bl	8005570 <putchar>
	gotoxy(98,43);
 80031ee:	212b      	movs	r1, #43	; 0x2b
 80031f0:	2062      	movs	r0, #98	; 0x62
 80031f2:	f7fe f923 	bl	800143c <gotoxy>
	printf("%c",220);
 80031f6:	20dc      	movs	r0, #220	; 0xdc
 80031f8:	f002 f9ba 	bl	8005570 <putchar>

	gotoxy(99,44);
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	2063      	movs	r0, #99	; 0x63
 8003200:	f7fe f91c 	bl	800143c <gotoxy>
	printf("%c",219);
 8003204:	20db      	movs	r0, #219	; 0xdb
 8003206:	f002 f9b3 	bl	8005570 <putchar>

	gotoxy(103,44);
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	2067      	movs	r0, #103	; 0x67
 800320e:	f7fe f915 	bl	800143c <gotoxy>
	printf("%c",219);
 8003212:	20db      	movs	r0, #219	; 0xdb
 8003214:	f002 f9ac 	bl	8005570 <putchar>

	gotoxy(104,44);
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	2068      	movs	r0, #104	; 0x68
 800321c:	f7fe f90e 	bl	800143c <gotoxy>
	printf("%c",220);
 8003220:	20dc      	movs	r0, #220	; 0xdc
 8003222:	f002 f9a5 	bl	8005570 <putchar>

	gotoxy(107,44);
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	206b      	movs	r0, #107	; 0x6b
 800322a:	f7fe f907 	bl	800143c <gotoxy>
	printf("%c",219);
 800322e:	20db      	movs	r0, #219	; 0xdb
 8003230:	f002 f99e 	bl	8005570 <putchar>

	gotoxy(108,44);
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	206c      	movs	r0, #108	; 0x6c
 8003238:	f7fe f900 	bl	800143c <gotoxy>
	printf("%c",219);
 800323c:	20db      	movs	r0, #219	; 0xdb
 800323e:	f002 f997 	bl	8005570 <putchar>
	gotoxy(108,43);
 8003242:	212b      	movs	r1, #43	; 0x2b
 8003244:	206c      	movs	r0, #108	; 0x6c
 8003246:	f7fe f8f9 	bl	800143c <gotoxy>
	printf("%c",219);
 800324a:	20db      	movs	r0, #219	; 0xdb
 800324c:	f002 f990 	bl	8005570 <putchar>

	gotoxy(109,44);
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	206d      	movs	r0, #109	; 0x6d
 8003254:	f7fe f8f2 	bl	800143c <gotoxy>
	printf("%c",220);
 8003258:	20dc      	movs	r0, #220	; 0xdc
 800325a:	f002 f989 	bl	8005570 <putchar>

	gotoxy(112,44);
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	2070      	movs	r0, #112	; 0x70
 8003262:	f7fe f8eb 	bl	800143c <gotoxy>
	printf("%c",219);
 8003266:	20db      	movs	r0, #219	; 0xdb
 8003268:	f002 f982 	bl	8005570 <putchar>

	gotoxy(113,44);
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	2071      	movs	r0, #113	; 0x71
 8003270:	f7fe f8e4 	bl	800143c <gotoxy>
	printf("%c",220);
 8003274:	20dc      	movs	r0, #220	; 0xdc
 8003276:	f002 f97b 	bl	8005570 <putchar>

	gotoxy(114,44);
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	2072      	movs	r0, #114	; 0x72
 800327e:	f7fe f8dd 	bl	800143c <gotoxy>
	printf("%c",219);
 8003282:	20db      	movs	r0, #219	; 0xdb
 8003284:	f002 f974 	bl	8005570 <putchar>
	gotoxy(114,43);
 8003288:	212b      	movs	r1, #43	; 0x2b
 800328a:	2072      	movs	r0, #114	; 0x72
 800328c:	f7fe f8d6 	bl	800143c <gotoxy>
	printf("%c",219);
 8003290:	20db      	movs	r0, #219	; 0xdb
 8003292:	f002 f96d 	bl	8005570 <putchar>

	gotoxy(115,44);
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	2073      	movs	r0, #115	; 0x73
 800329a:	f7fe f8cf 	bl	800143c <gotoxy>
	printf("%c",219);
 800329e:	20db      	movs	r0, #219	; 0xdb
 80032a0:	f002 f966 	bl	8005570 <putchar>

	gotoxy(120,44);
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	2078      	movs	r0, #120	; 0x78
 80032a8:	f7fe f8c8 	bl	800143c <gotoxy>
	printf("%c",47);
 80032ac:	202f      	movs	r0, #47	; 0x2f
 80032ae:	f002 f95f 	bl	8005570 <putchar>
	gotoxy(121,43);
 80032b2:	212b      	movs	r1, #43	; 0x2b
 80032b4:	2079      	movs	r0, #121	; 0x79
 80032b6:	f7fe f8c1 	bl	800143c <gotoxy>
	printf("%c",47);
 80032ba:	202f      	movs	r0, #47	; 0x2f
 80032bc:	f002 f958 	bl	8005570 <putchar>
	gotoxy(122,43);
 80032c0:	212b      	movs	r1, #43	; 0x2b
 80032c2:	207a      	movs	r0, #122	; 0x7a
 80032c4:	f7fe f8ba 	bl	800143c <gotoxy>
	printf("%c",223);
 80032c8:	20df      	movs	r0, #223	; 0xdf
 80032ca:	f002 f951 	bl	8005570 <putchar>
	gotoxy(122,42);
 80032ce:	212a      	movs	r1, #42	; 0x2a
 80032d0:	207a      	movs	r0, #122	; 0x7a
 80032d2:	f7fe f8b3 	bl	800143c <gotoxy>
	printf("%c",168);
 80032d6:	20a8      	movs	r0, #168	; 0xa8
 80032d8:	f002 f94a 	bl	8005570 <putchar>
	gotoxy(123,43);
 80032dc:	212b      	movs	r1, #43	; 0x2b
 80032de:	207b      	movs	r0, #123	; 0x7b
 80032e0:	f7fe f8ac 	bl	800143c <gotoxy>
	printf("%c",92);
 80032e4:	205c      	movs	r0, #92	; 0x5c
 80032e6:	f002 f943 	bl	8005570 <putchar>
	gotoxy(124,44);
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	207c      	movs	r0, #124	; 0x7c
 80032ee:	f7fe f8a5 	bl	800143c <gotoxy>
	printf("%c",92);
 80032f2:	205c      	movs	r0, #92	; 0x5c
 80032f4:	f002 f93c 	bl	8005570 <putchar>

	gotoxy(127,44);
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	207f      	movs	r0, #127	; 0x7f
 80032fc:	f7fe f89e 	bl	800143c <gotoxy>
	printf("%c",219);
 8003300:	20db      	movs	r0, #219	; 0xdb
 8003302:	f002 f935 	bl	8005570 <putchar>
	gotoxy(127,43);
 8003306:	212b      	movs	r1, #43	; 0x2b
 8003308:	207f      	movs	r0, #127	; 0x7f
 800330a:	f7fe f897 	bl	800143c <gotoxy>
	printf("%c",219);
 800330e:	20db      	movs	r0, #219	; 0xdb
 8003310:	f002 f92e 	bl	8005570 <putchar>
	gotoxy(127,42);
 8003314:	212a      	movs	r1, #42	; 0x2a
 8003316:	207f      	movs	r0, #127	; 0x7f
 8003318:	f7fe f890 	bl	800143c <gotoxy>
	printf("%c",219);
 800331c:	20db      	movs	r0, #219	; 0xdb
 800331e:	f002 f927 	bl	8005570 <putchar>

	gotoxy(129,44);
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	2081      	movs	r0, #129	; 0x81
 8003326:	f7fe f889 	bl	800143c <gotoxy>
	printf("%c",219);
 800332a:	20db      	movs	r0, #219	; 0xdb
 800332c:	f002 f920 	bl	8005570 <putchar>
	gotoxy(129,43);
 8003330:	212b      	movs	r1, #43	; 0x2b
 8003332:	2081      	movs	r0, #129	; 0x81
 8003334:	f7fe f882 	bl	800143c <gotoxy>
	printf("%c",220);
 8003338:	20dc      	movs	r0, #220	; 0xdc
 800333a:	f002 f919 	bl	8005570 <putchar>

	gotoxy(130,44);
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	2082      	movs	r0, #130	; 0x82
 8003342:	f7fe f87b 	bl	800143c <gotoxy>
	printf("%c",219);
 8003346:	20db      	movs	r0, #219	; 0xdb
 8003348:	f002 f912 	bl	8005570 <putchar>

	gotoxy(131,44);
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	2083      	movs	r0, #131	; 0x83
 8003350:	f7fe f874 	bl	800143c <gotoxy>
	printf("%c",220);
 8003354:	20dc      	movs	r0, #220	; 0xdc
 8003356:	f002 f90b 	bl	8005570 <putchar>

	gotoxy(132,44);
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	2084      	movs	r0, #132	; 0x84
 800335e:	f7fe f86d 	bl	800143c <gotoxy>
	printf("%c",219);
 8003362:	20db      	movs	r0, #219	; 0xdb
 8003364:	f002 f904 	bl	8005570 <putchar>

	gotoxy(133,44);
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	2085      	movs	r0, #133	; 0x85
 800336c:	f7fe f866 	bl	800143c <gotoxy>
	printf("%c",219);
 8003370:	20db      	movs	r0, #219	; 0xdb
 8003372:	f002 f8fd 	bl	8005570 <putchar>
	gotoxy(133,43);
 8003376:	212b      	movs	r1, #43	; 0x2b
 8003378:	2085      	movs	r0, #133	; 0x85
 800337a:	f7fe f85f 	bl	800143c <gotoxy>
	printf("%c",219);
 800337e:	20db      	movs	r0, #219	; 0xdb
 8003380:	f002 f8f6 	bl	8005570 <putchar>

	gotoxy(134,44);
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	2086      	movs	r0, #134	; 0x86
 8003388:	f7fe f858 	bl	800143c <gotoxy>
	printf("%c",219);
 800338c:	20db      	movs	r0, #219	; 0xdb
 800338e:	f002 f8ef 	bl	8005570 <putchar>

	gotoxy(135,44);
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	2087      	movs	r0, #135	; 0x87
 8003396:	f7fe f851 	bl	800143c <gotoxy>
	printf("%c",220);
 800339a:	20dc      	movs	r0, #220	; 0xdc
 800339c:	f002 f8e8 	bl	8005570 <putchar>

	gotoxy(137,44);
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	2089      	movs	r0, #137	; 0x89
 80033a4:	f7fe f84a 	bl	800143c <gotoxy>
	printf("%c",220);
 80033a8:	20dc      	movs	r0, #220	; 0xdc
 80033aa:	f002 f8e1 	bl	8005570 <putchar>

	gotoxy(139,44);
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	208b      	movs	r0, #139	; 0x8b
 80033b2:	f7fe f843 	bl	800143c <gotoxy>
	printf("%c",220);
 80033b6:	20dc      	movs	r0, #220	; 0xdc
 80033b8:	f002 f8da 	bl	8005570 <putchar>

	gotoxy(141,44);
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	208d      	movs	r0, #141	; 0x8d
 80033c0:	f7fe f83c 	bl	800143c <gotoxy>
	printf("%c",219);
 80033c4:	20db      	movs	r0, #219	; 0xdb
 80033c6:	f002 f8d3 	bl	8005570 <putchar>

	gotoxy(142,44);
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	208e      	movs	r0, #142	; 0x8e
 80033ce:	f7fe f835 	bl	800143c <gotoxy>
	printf("%c",220);
 80033d2:	20dc      	movs	r0, #220	; 0xdc
 80033d4:	f002 f8cc 	bl	8005570 <putchar>
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <drawScore>:

void drawScore(gameState_t* gameState){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 80033e4:	2100      	movs	r1, #0
 80033e6:	208c      	movs	r0, #140	; 0x8c
 80033e8:	f7fe f828 	bl	800143c <gotoxy>
	printf("Your score is: %d", gameState->score);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	4619      	mov	r1, r3
 80033f2:	4803      	ldr	r0, [pc, #12]	; (8003400 <drawScore+0x24>)
 80033f4:	f002 f8a4 	bl	8005540 <iprintf>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	0800684c 	.word	0x0800684c

08003404 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	460a      	mov	r2, r1
 800340e:	71fb      	strb	r3, [r7, #7]
 8003410:	4613      	mov	r3, r2
 8003412:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	79ba      	ldrb	r2, [r7, #6]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe f80e 	bl	800143c <gotoxy>
	printf("%c",219);
 8003420:	20db      	movs	r0, #219	; 0xdb
 8003422:	f002 f8a5 	bl	8005570 <putchar>
	gotoxy(X-1,Y);
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	3b01      	subs	r3, #1
 800342a:	79ba      	ldrb	r2, [r7, #6]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe f804 	bl	800143c <gotoxy>
	printf("%c",220);
 8003434:	20dc      	movs	r0, #220	; 0xdc
 8003436:	f002 f89b 	bl	8005570 <putchar>
	gotoxy(X+1,Y);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	3301      	adds	r3, #1
 800343e:	79ba      	ldrb	r2, [r7, #6]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fffa 	bl	800143c <gotoxy>
	printf("%c",220);
 8003448:	20dc      	movs	r0, #220	; 0xdc
 800344a:	f002 f891 	bl	8005570 <putchar>
	gotoxy(X-1,Y+1);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	3301      	adds	r3, #1
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fd ffef 	bl	800143c <gotoxy>
	printf("%c",223);
 800345e:	20df      	movs	r0, #223	; 0xdf
 8003460:	f002 f886 	bl	8005570 <putchar>
	gotoxy(X+1,Y+1);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	3301      	adds	r3, #1
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7fd ffe4 	bl	800143c <gotoxy>
	printf("%c",223);
 8003474:	20df      	movs	r0, #223	; 0xdf
 8003476:	f002 f87b 	bl	8005570 <putchar>

	gotoxy(X,Y-1);
 800347a:	79fa      	ldrb	r2, [r7, #7]
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	3b01      	subs	r3, #1
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7fd ffda 	bl	800143c <gotoxy>
	printf("%c",179);
 8003488:	20b3      	movs	r0, #179	; 0xb3
 800348a:	f002 f871 	bl	8005570 <putchar>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	460a      	mov	r2, r1
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	79ba      	ldrb	r2, [r7, #6]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd ffc5 	bl	800143c <gotoxy>
	printf(" ");
 80034b2:	2020      	movs	r0, #32
 80034b4:	f002 f85c 	bl	8005570 <putchar>
	gotoxy(X-1,Y);
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	79ba      	ldrb	r2, [r7, #6]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd ffbb 	bl	800143c <gotoxy>
	printf(" ");
 80034c6:	2020      	movs	r0, #32
 80034c8:	f002 f852 	bl	8005570 <putchar>
	gotoxy(X+1,Y);
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	3301      	adds	r3, #1
 80034d0:	79ba      	ldrb	r2, [r7, #6]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd ffb1 	bl	800143c <gotoxy>
	printf(" ");
 80034da:	2020      	movs	r0, #32
 80034dc:	f002 f848 	bl	8005570 <putchar>
	gotoxy(X-1,Y+1);
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	79bb      	ldrb	r3, [r7, #6]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7fd ffa6 	bl	800143c <gotoxy>
	printf(" ");
 80034f0:	2020      	movs	r0, #32
 80034f2:	f002 f83d 	bl	8005570 <putchar>
	gotoxy(X+1,Y+1);
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	79bb      	ldrb	r3, [r7, #6]
 80034fc:	3301      	adds	r3, #1
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f7fd ff9b 	bl	800143c <gotoxy>
	printf(" ");
 8003506:	2020      	movs	r0, #32
 8003508:	f002 f832 	bl	8005570 <putchar>

	gotoxy(X,Y-1);
 800350c:	79fa      	ldrb	r2, [r7, #7]
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	3b01      	subs	r3, #1
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f7fd ff91 	bl	800143c <gotoxy>
	printf(" ");
 800351a:	2020      	movs	r0, #32
 800351c:	f002 f828 	bl	8005570 <putchar>
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	460a      	mov	r2, r1
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	4613      	mov	r3, r2
 8003536:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	3302      	adds	r3, #2
 800353c:	79ba      	ldrb	r2, [r7, #6]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd ff7b 	bl	800143c <gotoxy>
	printf("____");
 8003546:	4808      	ldr	r0, [pc, #32]	; (8003568 <drawAttachmentRods+0x40>)
 8003548:	f001 fffa 	bl	8005540 <iprintf>
	gotoxy(x-5, y);
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	3b05      	subs	r3, #5
 8003550:	79ba      	ldrb	r2, [r7, #6]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd ff71 	bl	800143c <gotoxy>
	printf("____");
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <drawAttachmentRods+0x40>)
 800355c:	f001 fff0 	bl	8005540 <iprintf>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08006860 	.word	0x08006860

0800356c <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	460a      	mov	r2, r1
 8003576:	71fb      	strb	r3, [r7, #7]
 8003578:	4613      	mov	r3, r2
 800357a:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	3302      	adds	r3, #2
 8003580:	79ba      	ldrb	r2, [r7, #6]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd ff59 	bl	800143c <gotoxy>
	printf("    ");
 800358a:	4808      	ldr	r0, [pc, #32]	; (80035ac <deleteAttachmentRods+0x40>)
 800358c:	f001 ffd8 	bl	8005540 <iprintf>
	gotoxy(x-5, y);
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	3b05      	subs	r3, #5
 8003594:	79ba      	ldrb	r2, [r7, #6]
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd ff4f 	bl	800143c <gotoxy>
	printf("    ");
 800359e:	4803      	ldr	r0, [pc, #12]	; (80035ac <deleteAttachmentRods+0x40>)
 80035a0:	f001 ffce 	bl	8005540 <iprintf>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	08006868 	.word	0x08006868

080035b0 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	460a      	mov	r2, r1
 80035ba:	71fb      	strb	r3, [r7, #7]
 80035bc:	4613      	mov	r3, r2
 80035be:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	79ba      	ldrb	r2, [r7, #6]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd ff38 	bl	800143c <gotoxy>
	printf("     ");
 80035cc:	480d      	ldr	r0, [pc, #52]	; (8003604 <deletePowerupGraphics+0x54>)
 80035ce:	f001 ffb7 	bl	8005540 <iprintf>
	gotoxy(x, y+1);
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	79bb      	ldrb	r3, [r7, #6]
 80035d6:	3301      	adds	r3, #1
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fd ff2e 	bl	800143c <gotoxy>
	printf("     ");
 80035e0:	4808      	ldr	r0, [pc, #32]	; (8003604 <deletePowerupGraphics+0x54>)
 80035e2:	f001 ffad 	bl	8005540 <iprintf>
	gotoxy(x, y+2);
 80035e6:	79fa      	ldrb	r2, [r7, #7]
 80035e8:	79bb      	ldrb	r3, [r7, #6]
 80035ea:	3302      	adds	r3, #2
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fd ff24 	bl	800143c <gotoxy>
	printf("     ");
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <deletePowerupGraphics+0x54>)
 80035f6:	f001 ffa3 	bl	8005540 <iprintf>

}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	08006870 	.word	0x08006870

08003608 <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af02      	add	r7, sp, #8
 800360e:	4603      	mov	r3, r0
 8003610:	460a      	mov	r2, r1
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 8003618:	79f8      	ldrb	r0, [r7, #7]
 800361a:	79b9      	ldrb	r1, [r7, #6]
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	79bb      	ldrb	r3, [r7, #6]
 8003622:	3302      	adds	r3, #2
 8003624:	2401      	movs	r4, #1
 8003626:	9400      	str	r4, [sp, #0]
 8003628:	f7fd ff1a 	bl	8001460 <drawBox>
 gotoxy(x+2, y+1);
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	1c9a      	adds	r2, r3, #2
 8003630:	79bb      	ldrb	r3, [r7, #6]
 8003632:	3301      	adds	r3, #1
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f7fd ff00 	bl	800143c <gotoxy>
 printf("$");
 800363c:	2024      	movs	r0, #36	; 0x24
 800363e:	f001 ff97 	bl	8005570 <putchar>
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}
	...

0800364c <drawNuke>:

void drawNuke(gameState_t* gameState){
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	7e1b      	ldrb	r3, [r3, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 809e 	bne.w	800379c <drawNuke+0x150>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe ffe8 	bl	800263c <fpToInt>
 800366c:	4604      	mov	r4, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe ffe1 	bl	800263c <fpToInt>
 800367a:	4603      	mov	r3, r0
 800367c:	0fda      	lsrs	r2, r3, #31
 800367e:	4413      	add	r3, r2
 8003680:	105b      	asrs	r3, r3, #1
 8003682:	4619      	mov	r1, r3
 8003684:	4620      	mov	r0, r4
 8003686:	f7fd fed9 	bl	800143c <gotoxy>
		printf("     ");
 800368a:	4846      	ldr	r0, [pc, #280]	; (80037a4 <drawNuke+0x158>)
 800368c:	f001 ff58 	bl	8005540 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe ffd0 	bl	800263c <fpToInt>
 800369c:	4604      	mov	r4, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe ffc9 	bl	800263c <fpToInt>
 80036aa:	4603      	mov	r3, r0
 80036ac:	3302      	adds	r3, #2
 80036ae:	0fda      	lsrs	r2, r3, #31
 80036b0:	4413      	add	r3, r2
 80036b2:	105b      	asrs	r3, r3, #1
 80036b4:	4619      	mov	r1, r3
 80036b6:	4620      	mov	r0, r4
 80036b8:	f7fd fec0 	bl	800143c <gotoxy>
		printf("     ");
 80036bc:	4839      	ldr	r0, [pc, #228]	; (80037a4 <drawNuke+0x158>)
 80036be:	f001 ff3f 	bl	8005540 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe ffb7 	bl	800263c <fpToInt>
 80036ce:	4604      	mov	r4, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe ffb0 	bl	800263c <fpToInt>
 80036dc:	4603      	mov	r3, r0
 80036de:	3304      	adds	r3, #4
 80036e0:	0fda      	lsrs	r2, r3, #31
 80036e2:	4413      	add	r3, r2
 80036e4:	105b      	asrs	r3, r3, #1
 80036e6:	4619      	mov	r1, r3
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7fd fea7 	bl	800143c <gotoxy>
		printf("     ");
 80036ee:	482d      	ldr	r0, [pc, #180]	; (80037a4 <drawNuke+0x158>)
 80036f0:	f001 ff26 	bl	8005540 <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe ff9e 	bl	800263c <fpToInt>
 8003700:	4604      	mov	r4, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe ff97 	bl	800263c <fpToInt>
 800370e:	4603      	mov	r3, r0
 8003710:	0fda      	lsrs	r2, r3, #31
 8003712:	4413      	add	r3, r2
 8003714:	105b      	asrs	r3, r3, #1
 8003716:	4619      	mov	r1, r3
 8003718:	4620      	mov	r0, r4
 800371a:	f7fd fe8f 	bl	800143c <gotoxy>
		printf("  |  ");
 800371e:	4822      	ldr	r0, [pc, #136]	; (80037a8 <drawNuke+0x15c>)
 8003720:	f001 ff0e 	bl	8005540 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe ff86 	bl	800263c <fpToInt>
 8003730:	4604      	mov	r4, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe ff7f 	bl	800263c <fpToInt>
 800373e:	4603      	mov	r3, r0
 8003740:	3302      	adds	r3, #2
 8003742:	0fda      	lsrs	r2, r3, #31
 8003744:	4413      	add	r3, r2
 8003746:	105b      	asrs	r3, r3, #1
 8003748:	4619      	mov	r1, r3
 800374a:	4620      	mov	r0, r4
 800374c:	f7fd fe76 	bl	800143c <gotoxy>
		printf("- o -");
 8003750:	4816      	ldr	r0, [pc, #88]	; (80037ac <drawNuke+0x160>)
 8003752:	f001 fef5 	bl	8005540 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ff6d 	bl	800263c <fpToInt>
 8003762:	4604      	mov	r4, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe ff66 	bl	800263c <fpToInt>
 8003770:	4603      	mov	r3, r0
 8003772:	3304      	adds	r3, #4
 8003774:	0fda      	lsrs	r2, r3, #31
 8003776:	4413      	add	r3, r2
 8003778:	105b      	asrs	r3, r3, #1
 800377a:	4619      	mov	r1, r3
 800377c:	4620      	mov	r0, r4
 800377e:	f7fd fe5d 	bl	800143c <gotoxy>
		printf(" / %c ", 92);
 8003782:	215c      	movs	r1, #92	; 0x5c
 8003784:	480a      	ldr	r0, [pc, #40]	; (80037b0 <drawNuke+0x164>)
 8003786:	f001 fedb 	bl	8005540 <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003792:	3308      	adds	r3, #8
 8003794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003798:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	08006870 	.word	0x08006870
 80037a8:	08006878 	.word	0x08006878
 80037ac:	08006880 	.word	0x08006880
 80037b0:	08006888 	.word	0x08006888

080037b4 <drawNukeCircle>:

void drawNukeCircle(gameState_t* gameState){
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff3a 	bl	800263c <fpToInt>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe ff32 	bl	800263c <fpToInt>
 80037d8:	4603      	mov	r3, r0
 80037da:	0fda      	lsrs	r2, r3, #31
 80037dc:	4413      	add	r3, r2
 80037de:	105b      	asrs	r3, r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b0f      	subs	r3, #15
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3b07      	subs	r3, #7
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f7fd fe24 	bl	800143c <gotoxy>
	printf("              ___-------___               \n");
 80037f4:	4874      	ldr	r0, [pc, #464]	; (80039c8 <drawNukeCircle+0x214>)
 80037f6:	f001 ff3f 	bl	8005678 <puts>
	gotoxy(x-15, y-6);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b0f      	subs	r3, #15
 80037fe:	461a      	mov	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3b06      	subs	r3, #6
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f7fd fe18 	bl	800143c <gotoxy>
	printf("           __-             -__            \n");
 800380c:	486f      	ldr	r0, [pc, #444]	; (80039cc <drawNukeCircle+0x218>)
 800380e:	f001 ff33 	bl	8005678 <puts>
	gotoxy(x-15, y-5);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3b0f      	subs	r3, #15
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3b05      	subs	r3, #5
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7fd fe0c 	bl	800143c <gotoxy>
	printf("         _-                   -_          \n");
 8003824:	486a      	ldr	r0, [pc, #424]	; (80039d0 <drawNukeCircle+0x21c>)
 8003826:	f001 ff27 	bl	8005678 <puts>
	gotoxy(x-15, y-4);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b0f      	subs	r3, #15
 800382e:	461a      	mov	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3b04      	subs	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7fd fe00 	bl	800143c <gotoxy>
	printf("       _-                       -_        \n");
 800383c:	4865      	ldr	r0, [pc, #404]	; (80039d4 <drawNukeCircle+0x220>)
 800383e:	f001 ff1b 	bl	8005678 <puts>
	gotoxy(x-15, y-3);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3b0f      	subs	r3, #15
 8003846:	461a      	mov	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3b03      	subs	r3, #3
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7fd fdf4 	bl	800143c <gotoxy>
	printf("     _-                            -_     \n");
 8003854:	4860      	ldr	r0, [pc, #384]	; (80039d8 <drawNukeCircle+0x224>)
 8003856:	f001 ff0f 	bl	8005678 <puts>
	gotoxy(x-15, y-2);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b0f      	subs	r3, #15
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3b02      	subs	r3, #2
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7fd fde8 	bl	800143c <gotoxy>
	printf("   _-                                -_   \n");
 800386c:	485b      	ldr	r0, [pc, #364]	; (80039dc <drawNukeCircle+0x228>)
 800386e:	f001 ff03 	bl	8005678 <puts>
	gotoxy(x-15, y-1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b0f      	subs	r3, #15
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3b01      	subs	r3, #1
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fd fddc 	bl	800143c <gotoxy>
	printf("  =                                    =  \n");
 8003884:	4856      	ldr	r0, [pc, #344]	; (80039e0 <drawNukeCircle+0x22c>)
 8003886:	f001 fef7 	bl	8005678 <puts>
	gotoxy(x-15, y);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b0f      	subs	r3, #15
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fd fdd1 	bl	800143c <gotoxy>
	printf("_-                                      -_\n");
 800389a:	4852      	ldr	r0, [pc, #328]	; (80039e4 <drawNukeCircle+0x230>)
 800389c:	f001 feec 	bl	8005678 <puts>
	gotoxy(x-15, y+1);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b0f      	subs	r3, #15
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7fd fdc5 	bl	800143c <gotoxy>
	printf("=                                        =\n");
 80038b2:	484d      	ldr	r0, [pc, #308]	; (80039e8 <drawNukeCircle+0x234>)
 80038b4:	f001 fee0 	bl	8005678 <puts>
	gotoxy(x-15, y+2);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b0f      	subs	r3, #15
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3302      	adds	r3, #2
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7fd fdb9 	bl	800143c <gotoxy>
	printf("=                                        =\n");
 80038ca:	4847      	ldr	r0, [pc, #284]	; (80039e8 <drawNukeCircle+0x234>)
 80038cc:	f001 fed4 	bl	8005678 <puts>
	gotoxy(x-15, y+3);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3b0f      	subs	r3, #15
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3303      	adds	r3, #3
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7fd fdad 	bl	800143c <gotoxy>
	printf("=                                        =\n");
 80038e2:	4841      	ldr	r0, [pc, #260]	; (80039e8 <drawNukeCircle+0x234>)
 80038e4:	f001 fec8 	bl	8005678 <puts>
	gotoxy(x-15, y+4);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3b0f      	subs	r3, #15
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fd fda1 	bl	800143c <gotoxy>
	printf("=                                        =\n");
 80038fa:	483b      	ldr	r0, [pc, #236]	; (80039e8 <drawNukeCircle+0x234>)
 80038fc:	f001 febc 	bl	8005678 <puts>
	gotoxy(x-15, y+5);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3b0f      	subs	r3, #15
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3305      	adds	r3, #5
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fd fd95 	bl	800143c <gotoxy>
	printf("-_                                      _-\n");
 8003912:	4836      	ldr	r0, [pc, #216]	; (80039ec <drawNukeCircle+0x238>)
 8003914:	f001 feb0 	bl	8005678 <puts>
	gotoxy(x-15, y+6);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b0f      	subs	r3, #15
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3306      	adds	r3, #6
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fd fd89 	bl	800143c <gotoxy>
	printf("  =                                    =  \n");
 800392a:	482d      	ldr	r0, [pc, #180]	; (80039e0 <drawNukeCircle+0x22c>)
 800392c:	f001 fea4 	bl	8005678 <puts>
	gotoxy(x-15, y+7);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b0f      	subs	r3, #15
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3307      	adds	r3, #7
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fd fd7d 	bl	800143c <gotoxy>
	printf("   -_                                _-   \n");
 8003942:	482b      	ldr	r0, [pc, #172]	; (80039f0 <drawNukeCircle+0x23c>)
 8003944:	f001 fe98 	bl	8005678 <puts>
	gotoxy(x-15, y+8);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3b0f      	subs	r3, #15
 800394c:	461a      	mov	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3308      	adds	r3, #8
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7fd fd71 	bl	800143c <gotoxy>
	printf("     -_                            _-     \n");
 800395a:	4826      	ldr	r0, [pc, #152]	; (80039f4 <drawNukeCircle+0x240>)
 800395c:	f001 fe8c 	bl	8005678 <puts>
	gotoxy(x-15, y+9);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b0f      	subs	r3, #15
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3309      	adds	r3, #9
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7fd fd65 	bl	800143c <gotoxy>
	printf("       -_                       _-        \n");
 8003972:	4821      	ldr	r0, [pc, #132]	; (80039f8 <drawNukeCircle+0x244>)
 8003974:	f001 fe80 	bl	8005678 <puts>
	gotoxy(x-15, y+10);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b0f      	subs	r3, #15
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	330a      	adds	r3, #10
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f7fd fd59 	bl	800143c <gotoxy>
	printf("         -_                   _-          \n");
 800398a:	481c      	ldr	r0, [pc, #112]	; (80039fc <drawNukeCircle+0x248>)
 800398c:	f001 fe74 	bl	8005678 <puts>
	gotoxy(x-15, y+11);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b0f      	subs	r3, #15
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	330b      	adds	r3, #11
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fd fd4d 	bl	800143c <gotoxy>
	printf("           -__             _--            \n");
 80039a2:	4817      	ldr	r0, [pc, #92]	; (8003a00 <drawNukeCircle+0x24c>)
 80039a4:	f001 fe68 	bl	8005678 <puts>
	gotoxy(x-15, y+12);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3b0f      	subs	r3, #15
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	330c      	adds	r3, #12
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fd fd41 	bl	800143c <gotoxy>
	printf("              ---_______---               \n");
 80039ba:	4812      	ldr	r0, [pc, #72]	; (8003a04 <drawNukeCircle+0x250>)
 80039bc:	f001 fe5c 	bl	8005678 <puts>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08006890 	.word	0x08006890
 80039cc:	080068bc 	.word	0x080068bc
 80039d0:	080068e8 	.word	0x080068e8
 80039d4:	08006914 	.word	0x08006914
 80039d8:	08006940 	.word	0x08006940
 80039dc:	0800696c 	.word	0x0800696c
 80039e0:	08006998 	.word	0x08006998
 80039e4:	080069c4 	.word	0x080069c4
 80039e8:	080069f0 	.word	0x080069f0
 80039ec:	08006a1c 	.word	0x08006a1c
 80039f0:	08006a48 	.word	0x08006a48
 80039f4:	08006a74 	.word	0x08006a74
 80039f8:	08006aa0 	.word	0x08006aa0
 80039fc:	08006acc 	.word	0x08006acc
 8003a00:	08006af8 	.word	0x08006af8
 8003a04:	08006b24 	.word	0x08006b24

08003a08 <clearNukeCircle>:

void clearNukeCircle(gameState_t* gameState){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fe10 	bl	800263c <fpToInt>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fe08 	bl	800263c <fpToInt>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	0fda      	lsrs	r2, r3, #31
 8003a30:	4413      	add	r3, r2
 8003a32:	105b      	asrs	r3, r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b0f      	subs	r3, #15
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3b07      	subs	r3, #7
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fd fcfa 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003a48:	4874      	ldr	r0, [pc, #464]	; (8003c1c <clearNukeCircle+0x214>)
 8003a4a:	f001 fe15 	bl	8005678 <puts>
	gotoxy(x-15, y-6);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b0f      	subs	r3, #15
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3b06      	subs	r3, #6
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fd fcee 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003a60:	486e      	ldr	r0, [pc, #440]	; (8003c1c <clearNukeCircle+0x214>)
 8003a62:	f001 fe09 	bl	8005678 <puts>
	gotoxy(x-15, y-5);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b0f      	subs	r3, #15
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3b05      	subs	r3, #5
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fd fce2 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003a78:	4868      	ldr	r0, [pc, #416]	; (8003c1c <clearNukeCircle+0x214>)
 8003a7a:	f001 fdfd 	bl	8005678 <puts>
	gotoxy(x-15, y-4);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b0f      	subs	r3, #15
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fd fcd6 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003a90:	4862      	ldr	r0, [pc, #392]	; (8003c1c <clearNukeCircle+0x214>)
 8003a92:	f001 fdf1 	bl	8005678 <puts>
	gotoxy(x-15, y-3);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3b0f      	subs	r3, #15
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3b03      	subs	r3, #3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fd fcca 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003aa8:	485c      	ldr	r0, [pc, #368]	; (8003c1c <clearNukeCircle+0x214>)
 8003aaa:	f001 fde5 	bl	8005678 <puts>
	gotoxy(x-15, y-2);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b0f      	subs	r3, #15
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3b02      	subs	r3, #2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f7fd fcbe 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003ac0:	4856      	ldr	r0, [pc, #344]	; (8003c1c <clearNukeCircle+0x214>)
 8003ac2:	f001 fdd9 	bl	8005678 <puts>
	gotoxy(x-15, y-1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3b0f      	subs	r3, #15
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fd fcb2 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003ad8:	4850      	ldr	r0, [pc, #320]	; (8003c1c <clearNukeCircle+0x214>)
 8003ada:	f001 fdcd 	bl	8005678 <puts>
	gotoxy(x-15, y);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3b0f      	subs	r3, #15
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fd fca7 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003aee:	484b      	ldr	r0, [pc, #300]	; (8003c1c <clearNukeCircle+0x214>)
 8003af0:	f001 fdc2 	bl	8005678 <puts>
	gotoxy(x-15, y+1);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b0f      	subs	r3, #15
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fd fc9b 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b06:	4845      	ldr	r0, [pc, #276]	; (8003c1c <clearNukeCircle+0x214>)
 8003b08:	f001 fdb6 	bl	8005678 <puts>
	gotoxy(x-15, y+2);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b0f      	subs	r3, #15
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3302      	adds	r3, #2
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fd fc8f 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b1e:	483f      	ldr	r0, [pc, #252]	; (8003c1c <clearNukeCircle+0x214>)
 8003b20:	f001 fdaa 	bl	8005678 <puts>
	gotoxy(x-15, y+3);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b0f      	subs	r3, #15
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3303      	adds	r3, #3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fd fc83 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b36:	4839      	ldr	r0, [pc, #228]	; (8003c1c <clearNukeCircle+0x214>)
 8003b38:	f001 fd9e 	bl	8005678 <puts>
	gotoxy(x-15, y+4);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3b0f      	subs	r3, #15
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fd fc77 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b4e:	4833      	ldr	r0, [pc, #204]	; (8003c1c <clearNukeCircle+0x214>)
 8003b50:	f001 fd92 	bl	8005678 <puts>
	gotoxy(x-15, y+5);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b0f      	subs	r3, #15
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3305      	adds	r3, #5
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fd fc6b 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b66:	482d      	ldr	r0, [pc, #180]	; (8003c1c <clearNukeCircle+0x214>)
 8003b68:	f001 fd86 	bl	8005678 <puts>
	gotoxy(x-15, y+6);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3b0f      	subs	r3, #15
 8003b70:	461a      	mov	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3306      	adds	r3, #6
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fd fc5f 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b7e:	4827      	ldr	r0, [pc, #156]	; (8003c1c <clearNukeCircle+0x214>)
 8003b80:	f001 fd7a 	bl	8005678 <puts>
	gotoxy(x-15, y+7);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3b0f      	subs	r3, #15
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3307      	adds	r3, #7
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f7fd fc53 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003b96:	4821      	ldr	r0, [pc, #132]	; (8003c1c <clearNukeCircle+0x214>)
 8003b98:	f001 fd6e 	bl	8005678 <puts>
	gotoxy(x-15, y+8);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b0f      	subs	r3, #15
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f7fd fc47 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003bae:	481b      	ldr	r0, [pc, #108]	; (8003c1c <clearNukeCircle+0x214>)
 8003bb0:	f001 fd62 	bl	8005678 <puts>
	gotoxy(x-15, y+9);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b0f      	subs	r3, #15
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3309      	adds	r3, #9
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7fd fc3b 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003bc6:	4815      	ldr	r0, [pc, #84]	; (8003c1c <clearNukeCircle+0x214>)
 8003bc8:	f001 fd56 	bl	8005678 <puts>
	gotoxy(x-15, y+10);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b0f      	subs	r3, #15
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	330a      	adds	r3, #10
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7fd fc2f 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003bde:	480f      	ldr	r0, [pc, #60]	; (8003c1c <clearNukeCircle+0x214>)
 8003be0:	f001 fd4a 	bl	8005678 <puts>
	gotoxy(x-15, y+11);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b0f      	subs	r3, #15
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	330b      	adds	r3, #11
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fd fc23 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003bf6:	4809      	ldr	r0, [pc, #36]	; (8003c1c <clearNukeCircle+0x214>)
 8003bf8:	f001 fd3e 	bl	8005678 <puts>
	gotoxy(x-15, y+12);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b0f      	subs	r3, #15
 8003c00:	461a      	mov	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	330c      	adds	r3, #12
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fd fc17 	bl	800143c <gotoxy>
	printf("                                          \n");
 8003c0e:	4803      	ldr	r0, [pc, #12]	; (8003c1c <clearNukeCircle+0x214>)
 8003c10:	f001 fd32 	bl	8005678 <puts>
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	08006b50 	.word	0x08006b50

08003c20 <drawBossKey>:

void drawBossKey(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 8003c24:	481e      	ldr	r0, [pc, #120]	; (8003ca0 <drawBossKey+0x80>)
 8003c26:	f001 fd27 	bl	8005678 <puts>
	printf("	char c = uart_get_char();\n");
 8003c2a:	481e      	ldr	r0, [pc, #120]	; (8003ca4 <drawBossKey+0x84>)
 8003c2c:	f001 fd24 	bl	8005678 <puts>
	printf("	if(c == 'f'){\n");
 8003c30:	481d      	ldr	r0, [pc, #116]	; (8003ca8 <drawBossKey+0x88>)
 8003c32:	f001 fd21 	bl	8005678 <puts>
	printf("		if(gameState->bossMode == 0){\n");
 8003c36:	481d      	ldr	r0, [pc, #116]	; (8003cac <drawBossKey+0x8c>)
 8003c38:	f001 fd1e 	bl	8005678 <puts>
	printf("			clrscr();\n");
 8003c3c:	481c      	ldr	r0, [pc, #112]	; (8003cb0 <drawBossKey+0x90>)
 8003c3e:	f001 fd1b 	bl	8005678 <puts>
	printf("			gameState->bossMode = 1;\n");
 8003c42:	481c      	ldr	r0, [pc, #112]	; (8003cb4 <drawBossKey+0x94>)
 8003c44:	f001 fd18 	bl	8005678 <puts>
	printf("		}else{\n");
 8003c48:	481b      	ldr	r0, [pc, #108]	; (8003cb8 <drawBossKey+0x98>)
 8003c4a:	f001 fd15 	bl	8005678 <puts>
	printf("			gameState->bossMode = 0;\n");
 8003c4e:	481b      	ldr	r0, [pc, #108]	; (8003cbc <drawBossKey+0x9c>)
 8003c50:	f001 fd12 	bl	8005678 <puts>
	printf("			return 2;\n");
 8003c54:	481a      	ldr	r0, [pc, #104]	; (8003cc0 <drawBossKey+0xa0>)
 8003c56:	f001 fd0f 	bl	8005678 <puts>
	printf("	f	}\n");
 8003c5a:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <drawBossKey+0xa4>)
 8003c5c:	f001 fd0c 	bl	8005678 <puts>
	printf("	}\n");
 8003c60:	4819      	ldr	r0, [pc, #100]	; (8003cc8 <drawBossKey+0xa8>)
 8003c62:	f001 fd09 	bl	8005678 <puts>
	printf("\n");
 8003c66:	200a      	movs	r0, #10
 8003c68:	f001 fc82 	bl	8005570 <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 8003c6c:	4817      	ldr	r0, [pc, #92]	; (8003ccc <drawBossKey+0xac>)
 8003c6e:	f001 fd03 	bl	8005678 <puts>
	printf("		gotoxy(0,0);\n");
 8003c72:	4817      	ldr	r0, [pc, #92]	; (8003cd0 <drawBossKey+0xb0>)
 8003c74:	f001 fd00 	bl	8005678 <puts>
	printf("		drawBossKey();\n");
 8003c78:	4816      	ldr	r0, [pc, #88]	; (8003cd4 <drawBossKey+0xb4>)
 8003c7a:	f001 fcfd 	bl	8005678 <puts>
	printf("		return 1;\n");
 8003c7e:	4816      	ldr	r0, [pc, #88]	; (8003cd8 <drawBossKey+0xb8>)
 8003c80:	f001 fcfa 	bl	8005678 <puts>
	printf("	}\n");
 8003c84:	4810      	ldr	r0, [pc, #64]	; (8003cc8 <drawBossKey+0xa8>)
 8003c86:	f001 fcf7 	bl	8005678 <puts>
	printf("	return 0;\n");
 8003c8a:	4814      	ldr	r0, [pc, #80]	; (8003cdc <drawBossKey+0xbc>)
 8003c8c:	f001 fcf4 	bl	8005678 <puts>
	printf("	uart_clear();\n");
 8003c90:	4813      	ldr	r0, [pc, #76]	; (8003ce0 <drawBossKey+0xc0>)
 8003c92:	f001 fcf1 	bl	8005678 <puts>
	printf("}\n");
 8003c96:	4813      	ldr	r0, [pc, #76]	; (8003ce4 <drawBossKey+0xc4>)
 8003c98:	f001 fcee 	bl	8005678 <puts>
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08006b7c 	.word	0x08006b7c
 8003ca4:	08006ba4 	.word	0x08006ba4
 8003ca8:	08006bc0 	.word	0x08006bc0
 8003cac:	08006bd0 	.word	0x08006bd0
 8003cb0:	08006bf0 	.word	0x08006bf0
 8003cb4:	08006c00 	.word	0x08006c00
 8003cb8:	08006c1c 	.word	0x08006c1c
 8003cbc:	08006c28 	.word	0x08006c28
 8003cc0:	08006c44 	.word	0x08006c44
 8003cc4:	08006c54 	.word	0x08006c54
 8003cc8:	08006c5c 	.word	0x08006c5c
 8003ccc:	08006c60 	.word	0x08006c60
 8003cd0:	08006c80 	.word	0x08006c80
 8003cd4:	08006c90 	.word	0x08006c90
 8003cd8:	08006ca4 	.word	0x08006ca4
 8003cdc:	08006cb0 	.word	0x08006cb0
 8003ce0:	08006cbc 	.word	0x08006cbc
 8003ce4:	08006ccc 	.word	0x08006ccc

08003ce8 <createBulletNode>:
>>>>>>> Stashed changes

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
<<<<<<< Updated upstream
 80038e0:	b084      	sub	sp, #16
 80038e2:	b5b0      	push	{r4, r5, r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	f107 0418 	add.w	r4, r7, #24
 80038ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 80038f0:	201c      	movs	r0, #28
 80038f2:	f000 ff83 	bl	80047fc <malloc>
 80038f6:	4603      	mov	r3, r0
 80038f8:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	461d      	mov	r5, r3
 80038fe:	f107 0418 	add.w	r4, r7, #24
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800390a:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
    return newNode;
 8003914:	687b      	ldr	r3, [r7, #4]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003920:	b004      	add	sp, #16
 8003922:	4770      	bx	lr

08003924 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8003924:	b084      	sub	sp, #16
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af02      	add	r7, sp, #8
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	f107 001c 	add.w	r0, r7, #28
 8003932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8003936:	466a      	mov	r2, sp
 8003938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003940:	e882 0003 	stmia.w	r2, {r0, r1}
 8003944:	f107 031c 	add.w	r3, r7, #28
 8003948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800394a:	f7ff ffc9 	bl	80038e0 <createBulletNode>
 800394e:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <appendBullet+0x3c>
        *head = newNode;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	601a      	str	r2, [r3, #0]
=======
 8003ce8:	b084      	sub	sp, #16
 8003cea:	b5b0      	push	{r4, r5, r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f107 0418 	add.w	r4, r7, #24
 8003cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8003cf8:	2020      	movs	r0, #32
 8003cfa:	f001 fb5f 	bl	80053bc <malloc>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	461d      	mov	r5, r3
 8003d06:	f107 0418 	add.w	r4, r7, #24
 8003d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003d12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
    return newNode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr

08003d2c <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	b590      	push	{r4, r7, lr}
 8003d30:	b089      	sub	sp, #36	; 0x24
 8003d32:	af04      	add	r7, sp, #16
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8003d3e:	466c      	mov	r4, sp
 8003d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d52:	f7ff ffc9 	bl	8003ce8 <createBulletNode>
 8003d56:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <appendBullet+0x3c>
        *head = newNode;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
<<<<<<< Updated upstream
 800395e:	e00d      	b.n	800397c <appendBullet+0x58>
        bulletNode_t* current = *head;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8003966:	e002      	b.n	800396e <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f8      	bne.n	8003968 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	619a      	str	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003986:	b004      	add	sp, #16
 8003988:	4770      	bx	lr

0800398a <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8003994:	2008      	movs	r0, #8
 8003996:	f000 ff31 	bl	80047fc <malloc>
 800399a:	4603      	mov	r3, r0
 800399c:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10e      	bne.n	80039d6 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 80039be:	e00a      	b.n	80039d6 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	605a      	str	r2, [r3, #4]
			break;
 80039ce:	e006      	b.n	80039de <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f1      	bne.n	80039c0 <appendEnemy+0x36>
	}
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f040 809b 	bne.w	8003b3e <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f880 	bl	8002b16 <fpToInt>
 8003a16:	4604      	mov	r4, r0
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f878 	bl	8002b16 <fpToInt>
 8003a26:	4603      	mov	r3, r0
 8003a28:	0fda      	lsrs	r2, r3, #31
 8003a2a:	4413      	add	r3, r2
 8003a2c:	105b      	asrs	r3, r3, #1
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7fe f839 	bl	8001aa8 <gotoxy>
		printf("       ");
 8003a36:	4845      	ldr	r0, [pc, #276]	; (8003b4c <deleteEnemyNode+0x164>)
 8003a38:	f000 ffa2 	bl	8004980 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f866 	bl	8002b16 <fpToInt>
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f85e 	bl	8002b16 <fpToInt>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	0fda      	lsrs	r2, r3, #31
 8003a60:	4413      	add	r3, r2
 8003a62:	105b      	asrs	r3, r3, #1
 8003a64:	4619      	mov	r1, r3
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7fe f81e 	bl	8001aa8 <gotoxy>
		printf("       ");
 8003a6c:	4837      	ldr	r0, [pc, #220]	; (8003b4c <deleteEnemyNode+0x164>)
 8003a6e:	f000 ff87 	bl	8004980 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]
		free(enemy);
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f000 fec5 	bl	800480c <free>
		return;
 8003a82:	e05f      	b.n	8003b44 <deleteEnemyNode+0x15c>
=======
 8003d66:	e00d      	b.n	8003d84 <appendBullet+0x58>
        bulletNode_t* current = *head;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8003d6e:	e002      	b.n	8003d76 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f8      	bne.n	8003d70 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	61da      	str	r2, [r3, #28]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003d8e:	b004      	add	sp, #16
 8003d90:	4770      	bx	lr

08003d92 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8003d9c:	2008      	movs	r0, #8
 8003d9e:	f001 fb0d 	bl	80053bc <malloc>
 8003da2:	4603      	mov	r3, r0
 8003da4:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10e      	bne.n	8003dde <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 8003dc6:	e00a      	b.n	8003dde <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	605a      	str	r2, [r3, #4]
			break;
 8003dd6:	e006      	b.n	8003de6 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f1      	bne.n	8003dc8 <appendEnemy+0x36>
	}
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f040 809b 	bne.w	8003f46 <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fc0f 	bl	800263c <fpToInt>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fc07 	bl	800263c <fpToInt>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	0fda      	lsrs	r2, r3, #31
 8003e32:	4413      	add	r3, r2
 8003e34:	105b      	asrs	r3, r3, #1
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7fd faff 	bl	800143c <gotoxy>
		printf("       ");
 8003e3e:	4845      	ldr	r0, [pc, #276]	; (8003f54 <deleteEnemyNode+0x164>)
 8003e40:	f001 fb7e 	bl	8005540 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fbf5 	bl	800263c <fpToInt>
 8003e52:	4604      	mov	r4, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fbed 	bl	800263c <fpToInt>
 8003e62:	4603      	mov	r3, r0
 8003e64:	3302      	adds	r3, #2
 8003e66:	0fda      	lsrs	r2, r3, #31
 8003e68:	4413      	add	r3, r2
 8003e6a:	105b      	asrs	r3, r3, #1
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fd fae4 	bl	800143c <gotoxy>
		printf("       ");
 8003e74:	4837      	ldr	r0, [pc, #220]	; (8003f54 <deleteEnemyNode+0x164>)
 8003e76:	f001 fb63 	bl	8005540 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
		free(enemy);
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f001 faa1 	bl	80053cc <free>
		return;
 8003e8a:	e05f      	b.n	8003f4c <deleteEnemyNode+0x15c>
>>>>>>> Stashed changes
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
<<<<<<< Updated upstream
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d153      	bne.n	8003b34 <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f83e 	bl	8002b16 <fpToInt>
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f836 	bl	8002b16 <fpToInt>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	0fda      	lsrs	r2, r3, #31
 8003aae:	4413      	add	r3, r2
 8003ab0:	105b      	asrs	r3, r3, #1
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fd fff7 	bl	8001aa8 <gotoxy>
			printf("       ");
 8003aba:	4824      	ldr	r0, [pc, #144]	; (8003b4c <deleteEnemyNode+0x164>)
 8003abc:	f000 ff60 	bl	8004980 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f824 	bl	8002b16 <fpToInt>
 8003ace:	4604      	mov	r4, r0
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff f81c 	bl	8002b16 <fpToInt>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	0fda      	lsrs	r2, r3, #31
 8003ae4:	4413      	add	r3, r2
 8003ae6:	105b      	asrs	r3, r3, #1
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fd ffdc 	bl	8001aa8 <gotoxy>
			printf("       ");
 8003af0:	4816      	ldr	r0, [pc, #88]	; (8003b4c <deleteEnemyNode+0x164>)
 8003af2:	f000 ff45 	bl	8004980 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fe81 	bl	800480c <free>
			free(thisNode->enemy->position);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fe7b 	bl	800480c <free>
			free(thisNode->enemy->velocity);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fe75 	bl	800480c <free>
			free(thisNode->enemy);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fe70 	bl	800480c <free>
			free(thisNode);
 8003b2c:	68b8      	ldr	r0, [r7, #8]
 8003b2e:	f000 fe6d 	bl	800480c <free>
			return;
 8003b32:	e007      	b.n	8003b44 <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d19f      	bne.n	8003a84 <deleteEnemyNode+0x9c>
	}
}
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08005d88 	.word	0x08005d88

08003b50 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d03c      	beq.n	8003bdc <deleteBulletNode+0x8c>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d039      	beq.n	8003bdc <deleteBulletNode+0x8c>
=======
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d153      	bne.n	8003f3c <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fbcd 	bl	800263c <fpToInt>
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fbc5 	bl	800263c <fpToInt>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	0fda      	lsrs	r2, r3, #31
 8003eb6:	4413      	add	r3, r2
 8003eb8:	105b      	asrs	r3, r3, #1
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7fd fabd 	bl	800143c <gotoxy>
			printf("       ");
 8003ec2:	4824      	ldr	r0, [pc, #144]	; (8003f54 <deleteEnemyNode+0x164>)
 8003ec4:	f001 fb3c 	bl	8005540 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fbb3 	bl	800263c <fpToInt>
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fbab 	bl	800263c <fpToInt>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	3302      	adds	r3, #2
 8003eea:	0fda      	lsrs	r2, r3, #31
 8003eec:	4413      	add	r3, r2
 8003eee:	105b      	asrs	r3, r3, #1
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7fd faa2 	bl	800143c <gotoxy>
			printf("       ");
 8003ef8:	4816      	ldr	r0, [pc, #88]	; (8003f54 <deleteEnemyNode+0x164>)
 8003efa:	f001 fb21 	bl	8005540 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fa5d 	bl	80053cc <free>
			free(thisNode->enemy->position);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fa57 	bl	80053cc <free>
			free(thisNode->enemy->velocity);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fa51 	bl	80053cc <free>
			free(thisNode->enemy);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fa4c 	bl	80053cc <free>
			free(thisNode);
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f001 fa49 	bl	80053cc <free>
			return;
 8003f3a:	e007      	b.n	8003f4c <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d19f      	bne.n	8003e8c <deleteEnemyNode+0x9c>
	}
}
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd90      	pop	{r4, r7, pc}
 8003f52:	bf00      	nop
 8003f54:	08006cd0 	.word	0x08006cd0

08003f58 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d03c      	beq.n	8003fe4 <deleteBulletNode+0x8c>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d039      	beq.n	8003fe4 <deleteBulletNode+0x8c>
>>>>>>> Stashed changes
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
<<<<<<< Updated upstream
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe ffd2 	bl	8002b16 <fpToInt>
 8003b72:	4604      	mov	r4, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe ffcc 	bl	8002b16 <fpToInt>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	0fda      	lsrs	r2, r3, #31
 8003b82:	4413      	add	r3, r2
 8003b84:	105b      	asrs	r3, r3, #1
 8003b86:	4619      	mov	r1, r3
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7fd ff8d 	bl	8001aa8 <gotoxy>
    printf(" ");
 8003b8e:	2020      	movs	r0, #32
 8003b90:	f000 ff0e 	bl	80049b0 <putchar>

    if (*head == nodeToDelete) {
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d107      	bne.n	8003bae <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f000 fe30 	bl	800480c <free>
        return;
 8003bac:	e017      	b.n	8003bde <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003bb4:	e002      	b.n	8003bbc <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <deleteBulletNode+0x7c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1f4      	bne.n	8003bb6 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f000 fe19 	bl	800480c <free>
 8003bda:	e000      	b.n	8003bde <deleteBulletNode+0x8e>
        return;
 8003bdc:	bf00      	nop
}
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
=======
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fb61 	bl	800263c <fpToInt>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fb5b 	bl	800263c <fpToInt>
 8003f86:	4603      	mov	r3, r0
 8003f88:	0fda      	lsrs	r2, r3, #31
 8003f8a:	4413      	add	r3, r2
 8003f8c:	105b      	asrs	r3, r3, #1
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7fd fa53 	bl	800143c <gotoxy>
    printf(" ");
 8003f96:	2020      	movs	r0, #32
 8003f98:	f001 faea 	bl	8005570 <putchar>

    if (*head == nodeToDelete) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d107      	bne.n	8003fb6 <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8003fae:	6838      	ldr	r0, [r7, #0]
 8003fb0:	f001 fa0c 	bl	80053cc <free>
        return;
 8003fb4:	e017      	b.n	8003fe6 <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003fbc:	e002      	b.n	8003fc4 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <deleteBulletNode+0x7c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1f4      	bne.n	8003fbe <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8003fdc:	6838      	ldr	r0, [r7, #0]
 8003fde:	f001 f9f5 	bl	80053cc <free>
 8003fe2:	e000      	b.n	8003fe6 <deleteBulletNode+0x8e>
        return;
 8003fe4:	bf00      	nop
}
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}

08003fec <initVariables>:
#include "powerup.h"
>>>>>>> Stashed changes

08003be4 <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
<<<<<<< Updated upstream
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42*yScale)}, {intToFp(2), intToFp(42*yScale)}, 1, 20, 0};
 8003bec:	f107 0320 	add.w	r3, r7, #32
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
 8003bfc:	615a      	str	r2, [r3, #20]
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f7fe ff74 	bl	8002aec <intToFp>
 8003c04:	4603      	mov	r3, r0
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	2054      	movs	r0, #84	; 0x54
 8003c0a:	f7fe ff6f 	bl	8002aec <intToFp>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7fe ff6a 	bl	8002aec <intToFp>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1c:	2054      	movs	r0, #84	; 0x54
 8003c1e:	f7fe ff65 	bl	8002aec <intToFp>
 8003c22:	4603      	mov	r3, r0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003c2c:	2314      	movs	r3, #20
 8003c2e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <initVariables+0xec>)
 8003c34:	f107 031c 	add.w	r3, r7, #28
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	8019      	strh	r1, [r3, #0]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	0c12      	lsrs	r2, r2, #16
 8003c42:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

	nuke_t nuke = {NULL, NULL, 0, 0, 0};
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
	gameState->nuke = &nuke;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f107 0208 	add.w	r2, r7, #8
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

	gameState->activeScreen=0; //menu screen
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2203      	movs	r2, #3
 8003c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f103 040c 	add.w	r4, r3, #12
 8003c9c:	f107 0520 	add.w	r5, r7, #32
 8003ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ca8:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	f107 021c 	add.w	r2, r7, #28
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	8019      	strh	r1, [r3, #0]
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	0c12      	lsrs	r2, r2, #16
 8003cc6:	701a      	strb	r2, [r3, #0]
	//TODO: continue to initialize everything
}
 8003cc8:	bf00      	nop
 8003cca:	3738      	adds	r7, #56	; 0x38
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd0:	08005d90 	.word	0x08005d90

08003cd4 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y)/yScale); //TODO
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe ff18 	bl	8002b16 <fpToInt>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe ff12 	bl	8002b16 <fpToInt>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	0fda      	lsrs	r2, r3, #31
 8003cf6:	4413      	add	r3, r2
 8003cf8:	105b      	asrs	r3, r3, #1
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fd fed3 	bl	8001aa8 <gotoxy>
	printf(" ");
 8003d02:	2020      	movs	r0, #32
 8003d04:	f000 fe54 	bl	80049b0 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y)/yScale); //TODO
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe ff02 	bl	8002b16 <fpToInt>
 8003d12:	4604      	mov	r4, r0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fefc 	bl	8002b16 <fpToInt>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	0fda      	lsrs	r2, r3, #31
 8003d22:	4413      	add	r3, r2
 8003d24:	105b      	asrs	r3, r3, #1
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7fd febd 	bl	8001aa8 <gotoxy>
	printf("A");
 8003d2e:	2041      	movs	r0, #65	; 0x41
 8003d30:	f000 fe3e 	bl	80049b0 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	3214      	adds	r2, #20
 8003d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d40:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fa2d 	bl	80031a4 <drawEnemy>
	drawBullets(gameState);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f8fe 	bl	8001f4c <drawBullets>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7a1a      	ldrb	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7a5b      	ldrb	r3, [r3, #9]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7ff f86c 	bl	8002e38 <drawMoon>
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <readInput>:
=======
 8003fec:	b5b0      	push	{r4, r5, r7, lr}
 8003fee:	b08c      	sub	sp, #48	; 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(42*yScale)}, {intToFp(3), intToFp(42*yScale)}, 1, 20, 0};
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	615a      	str	r2, [r3, #20]
 8004006:	2003      	movs	r0, #3
 8004008:	f7fe fb03 	bl	8002612 <intToFp>
 800400c:	4603      	mov	r3, r0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	2054      	movs	r0, #84	; 0x54
 8004012:	f7fe fafe 	bl	8002612 <intToFp>
 8004016:	4603      	mov	r3, r0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	2003      	movs	r0, #3
 800401c:	f7fe faf9 	bl	8002612 <intToFp>
 8004020:	4603      	mov	r3, r0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	2054      	movs	r0, #84	; 0x54
 8004026:	f7fe faf4 	bl	8002612 <intToFp>
 800402a:	4603      	mov	r3, r0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004034:	2314      	movs	r3, #20
 8004036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 800403a:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <initVariables+0x13c>)
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4611      	mov	r1, r2
 8004044:	8019      	strh	r1, [r3, #0]
 8004046:	3302      	adds	r3, #2
 8004048:	0c12      	lsrs	r2, r2, #16
 800404a:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 8004058:	2028      	movs	r0, #40	; 0x28
 800405a:	f001 f9af 	bl	80053bc <malloc>
 800405e:	4603      	mov	r3, r0
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
	position_t pos = {0,0};
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
	nuke->position = pos;
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	461a      	mov	r2, r3
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004076:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	3308      	adds	r3, #8
 800407e:	f107 0208 	add.w	r2, r7, #8
 8004082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004086:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2200      	movs	r2, #0
 800408e:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	2200      	movs	r2, #0
 8004094:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a4:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f103 040c 	add.w	r4, r3, #12
 80040e4:	f107 0514 	add.w	r5, r7, #20
 80040e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80040f0:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3308      	adds	r3, #8
 8004100:	f107 0210 	add.w	r2, r7, #16
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4611      	mov	r1, r2
 8004108:	8019      	strh	r1, [r3, #0]
 800410a:	3302      	adds	r3, #2
 800410c:	0c12      	lsrs	r2, r2, #16
 800410e:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	659a      	str	r2, [r3, #88]	; 0x58
	gameState->powerup.isVisible=0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//TODO: continue to initialize everything
}
 800411e:	bf00      	nop
 8004120:	3730      	adds	r7, #48	; 0x30
 8004122:	46bd      	mov	sp, r7
 8004124:	bdb0      	pop	{r4, r5, r7, pc}
 8004126:	bf00      	nop
 8004128:	08006cd8 	.word	0x08006cd8

0800412c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 ff07 	bl	8004f48 <drawSpaceship>
	drawEnemy(gameState);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe fdc4 	bl	8002cc8 <drawEnemy>
	drawBullets(gameState);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd fb90 	bl	8001866 <drawBullets>
	drawPowerup(gameState);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fdd1 	bl	8004cee <drawPowerup>
	drawhearth(gameState);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fe fd39 	bl	8002bc4 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7a1a      	ldrb	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7a5b      	ldrb	r3, [r3, #9]
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe fbfe 	bl	800295e <drawMoon>
	drawNuke(gameState);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fa72 	bl	800364c <drawNuke>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d113      	bne.n	80041aa <checkIfDead+0x3a>
>>>>>>> Stashed changes
		gameState->activeScreen = 3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2203      	movs	r2, #3
 8004186:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		uint16_t oldScore = readFromFlash(0x0800F800);
 800418a:	480a      	ldr	r0, [pc, #40]	; (80041b4 <checkIfDead+0x44>)
 800418c:	f7fe f8f5 	bl	800237a <readFromFlash>
 8004190:	4603      	mov	r3, r0
 8004192:	81fb      	strh	r3, [r7, #14]
		if(gameState->score > oldScore){
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	89fa      	ldrh	r2, [r7, #14]
 800419a:	429a      	cmp	r2, r3
 800419c:	d205      	bcs.n	80041aa <checkIfDead+0x3a>
			writeToFlash(gameState->score, 0x0800F800);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <checkIfDead+0x44>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f8cf 	bl	8002348 <writeToFlash>
		}
	}
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	0800f800 	.word	0x0800f800

080041b8 <readInput>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
<<<<<<< Updated upstream
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8003d70:	f7fd fcb0 	bl	80016d4 <uart_get_char>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d107      	bne.n	8003d8e <readInput+0x26>
		gameState->direction = 1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <readInput+0x90>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b61      	cmp	r3, #97	; 0x61
 8003d92:	d107      	bne.n	8003da4 <readInput+0x3c>
		gameState->direction = -1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	22ff      	movs	r2, #255	; 0xff
 8003d98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <readInput+0x90>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b66      	cmp	r3, #102	; 0x66
 8003da8:	d117      	bne.n	8003dda <readInput+0x72>
		if(gameState->activeScreen != 4){
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00c      	beq.n	8003dce <readInput+0x66>
			clrscr();
 8003db4:	f7fd fe68 	bl	8001a88 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003dcc:	e005      	b.n	8003dda <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <readInput+0x90>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d903      	bls.n	8003df0 <readInput+0x88>
		gameState->direction = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200001cc 	.word	0x200001cc

08003dfc <main>:

int main(void) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b098      	sub	sp, #96	; 0x60
 8003e00:	af00      	add	r7, sp, #0
=======
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 80041c0:	f7fc ff52 	bl	8001068 <uart_get_char>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d107      	bne.n	80041de <readInput+0x26>
		gameState->direction = 1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <readInput+0x90>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b61      	cmp	r3, #97	; 0x61
 80041e2:	d107      	bne.n	80041f4 <readInput+0x3c>
		gameState->direction = -1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	22ff      	movs	r2, #255	; 0xff
 80041e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 80041ec:	4b16      	ldr	r3, [pc, #88]	; (8004248 <readInput+0x90>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b66      	cmp	r3, #102	; 0x66
 80041f8:	d117      	bne.n	800422a <readInput+0x72>
		if(gameState->activeScreen != 4){
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004200:	2b04      	cmp	r3, #4
 8004202:	d00c      	beq.n	800421e <readInput+0x66>
			clrscr();
 8004204:	f7fd f90a 	bl	800141c <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2204      	movs	r2, #4
 8004218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800421c:	e005      	b.n	800422a <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <readInput+0x90>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b05      	cmp	r3, #5
 8004236:	d903      	bls.n	8004240 <readInput+0x88>
		gameState->direction = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200001c8 	.word	0x200001c8

0800424c <main>:

int main(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b0a0      	sub	sp, #128	; 0x80
 8004250:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
<<<<<<< Updated upstream
 8003e02:	4ada      	ldr	r2, [pc, #872]	; (800416c <main+0x370>)
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e10:	4ad7      	ldr	r2, [pc, #860]	; (8004170 <main+0x374>)
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e1e:	4ad5      	ldr	r2, [pc, #852]	; (8004174 <main+0x378>)
 8003e20:	f107 0318 	add.w	r3, r7, #24
 8003e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e28:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8003e2c:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8003e30:	f7fd fcf4 	bl	800181c <uart_init>
	initVariables(&gameState);
 8003e34:	f107 0320 	add.w	r3, r7, #32
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fed3 	bl	8003be4 <initVariables>
	initTimer();
 8003e3e:	f7fe fa31 	bl	80022a4 <initTimer>
	initJoystick();
 8003e42:	f7fe f90f 	bl	8002064 <initJoystick>
	initRGB();
 8003e46:	f7fe fbe9 	bl	800261c <initRGB>
	I2C_init();
 8003e4a:	f7fe fa75 	bl	8002338 <I2C_init>
	analogConfigPorts();
 8003e4e:	f7fe fb1f 	bl	8002490 <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 8003e52:	4ac9      	ldr	r2, [pc, #804]	; (8004178 <main+0x37c>)
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	8019      	strh	r1, [r3, #0]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	0c12      	lsrs	r2, r2, #16
 8003e60:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fcc1 	bl	80027ec <RGBColor>
	srand(readPotentiometer());   //RNG
 8003e6a:	f7fe fbb5 	bl	80025d8 <readPotentiometer>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fdb3 	bl	80049dc <srand>

	while(1){
		switch(gameState.activeScreen){
 8003e76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d8fb      	bhi.n	8003e76 <main+0x7a>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <main+0x88>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e99 	.word	0x08003e99
 8003e88:	08004017 	.word	0x08004017
 8003e8c:	080040f7 	.word	0x080040f7
 8003e90:	0800412d 	.word	0x0800412d
 8003e94:	08004199 	.word	0x08004199
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8003e98:	f7fd fdf6 	bl	8001a88 <clrscr>
			drawWindow();
 8003e9c:	f000 fa32 	bl	8004304 <drawWindow>
			drawbackground(); // stars in background
 8003ea0:	f7fe fed8 	bl	8002c54 <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8003ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ea8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe ffc2 	bl	8002e38 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8003eb4:	f107 0220 	add.w	r2, r7, #32
 8003eb8:	f107 0308 	add.w	r3, r7, #8
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f9e6 	bl	8004290 <drawMenuScreen>


			while(gameState.activeScreen==0){
 8003ec4:	e0a1      	b.n	800400a <main+0x20e>
				readInput(&gameState);
 8003ec6:	f107 0320 	add.w	r3, r7, #32
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff4c 	bl	8003d68 <readInput>
				if(downIsPressed()){
 8003ed0:	f7fe f9ba 	bl	8002248 <downIsPressed>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d025      	beq.n	8003f26 <main+0x12a>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3b58      	subs	r3, #88	; 0x58
 8003ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003eec:	f000 f9b0 	bl	8004250 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8003ef0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	4ba1      	ldr	r3, [pc, #644]	; (800417c <main+0x380>)
 8003ef8:	fb83 3102 	smull	r3, r1, r3, r2
 8003efc:	17d3      	asrs	r3, r2, #31
 8003efe:	1ac9      	subs	r1, r1, r3
 8003f00:	460b      	mov	r3, r1
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	440b      	add	r3, r1
 8003f06:	1ad1      	subs	r1, r2, r3
 8003f08:	b2cb      	uxtb	r3, r1
 8003f0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003f0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b58      	subs	r3, #88	; 0x58
 8003f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f20:	f000 f976 	bl	8004210 <drawBtnAsSelected>
 8003f24:	e028      	b.n	8003f78 <main+0x17c>
				}
				else if(upIsPressed()){
 8003f26:	f7fe f961 	bl	80021ec <upIsPressed>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <main+0x17c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003f30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b58      	subs	r3, #88	; 0x58
 8003f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f42:	f000 f985 	bl	8004250 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8003f46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <main+0x15a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f54:	e005      	b.n	8003f62 <main+0x166>
					else gameState.btnSelected=gameState.btnSelected-1;
 8003f56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003f62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3b58      	subs	r3, #88	; 0x58
 8003f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f74:	f000 f94c 	bl	8004210 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8003f78:	f7fe f90a 	bl	8002190 <centerIsPressed>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d043      	beq.n	800400a <main+0x20e>
					if(gameState.btnSelected==0){ //START BUTTON
 8003f82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <main+0x196>
						gameState.activeScreen=1; //Game screen
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003f90:	e03b      	b.n	800400a <main+0x20e>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8003f92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d130      	bne.n	8003ffc <main+0x200>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8003f9a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	4b76      	ldr	r3, [pc, #472]	; (800417c <main+0x380>)
 8003fa2:	fb83 3102 	smull	r3, r1, r3, r2
 8003fa6:	17d3      	asrs	r3, r2, #31
 8003fa8:	1ac9      	subs	r1, r1, r3
 8003faa:	460b      	mov	r3, r1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	440b      	add	r3, r1
 8003fb0:	1ad1      	subs	r1, r2, r3
 8003fb2:	b2cb      	uxtb	r3, r1
 8003fb4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8003fb8:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <main+0x374>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	330f      	adds	r3, #15
 8003fbe:	4a6c      	ldr	r2, [pc, #432]	; (8004170 <main+0x374>)
 8003fc0:	7852      	ldrb	r2, [r2, #1]
 8003fc2:	3201      	adds	r2, #1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd fd6e 	bl	8001aa8 <gotoxy>
						if(gameState.difficulty==0){
 8003fcc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <main+0x1e0>
							printf("EASY  ");
 8003fd4:	486a      	ldr	r0, [pc, #424]	; (8004180 <main+0x384>)
 8003fd6:	f000 fcd3 	bl	8004980 <iprintf>
 8003fda:	e016      	b.n	800400a <main+0x20e>
						} else if(gameState.difficulty==1){
 8003fdc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d103      	bne.n	8003fec <main+0x1f0>
							printf("MEDIUM");
 8003fe4:	4867      	ldr	r0, [pc, #412]	; (8004184 <main+0x388>)
 8003fe6:	f000 fccb 	bl	8004980 <iprintf>
 8003fea:	e00e      	b.n	800400a <main+0x20e>
						} else if(gameState.difficulty==2){
 8003fec:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d10a      	bne.n	800400a <main+0x20e>
							printf("HARD  ");
 8003ff4:	4864      	ldr	r0, [pc, #400]	; (8004188 <main+0x38c>)
 8003ff6:	f000 fcc3 	bl	8004980 <iprintf>
 8003ffa:	e006      	b.n	800400a <main+0x20e>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8003ffc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004000:	2b02      	cmp	r3, #2
 8004002:	d102      	bne.n	800400a <main+0x20e>
						gameState.activeScreen=2;// help screen
 8004004:	2302      	movs	r3, #2
 8004006:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 800400a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800400e:	2b00      	cmp	r3, #0
 8004010:	f43f af59 	beq.w	8003ec6 <main+0xca>
=======
 8004252:	4ad4      	ldr	r2, [pc, #848]	; (80045a4 <main+0x358>)
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800425c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004260:	4ad1      	ldr	r2, [pc, #836]	; (80045a8 <main+0x35c>)
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800426a:	e883 0003 	stmia.w	r3, {r0, r1}
 800426e:	4acf      	ldr	r2, [pc, #828]	; (80045ac <main+0x360>)
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004278:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 800427c:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8004280:	f7fc ff96 	bl	80011b0 <uart_init>
	initVariables(&gameState);
 8004284:	f107 0320 	add.w	r3, r7, #32
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff feaf 	bl	8003fec <initVariables>
	initTimer();
 800428e:	f7fd fc95 	bl	8001bbc <initTimer>
	initJoystick();
 8004292:	f7fd fb73 	bl	800197c <initJoystick>
	initRGB();
 8004296:	f7fd ff27 	bl	80020e8 <initRGB>
	I2C_init();
 800429a:	f7fd fda7 	bl	8001dec <I2C_init>
	analogConfigPorts();
 800429e:	f7fd fe5d 	bl	8001f5c <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 80042a2:	4ac3      	ldr	r2, [pc, #780]	; (80045b0 <main+0x364>)
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4611      	mov	r1, r2
 80042aa:	8019      	strh	r1, [r3, #0]
 80042ac:	3302      	adds	r3, #2
 80042ae:	0c12      	lsrs	r2, r2, #16
 80042b0:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd ffff 	bl	80022b8 <RGBColor>
	srand(readPotentiometer());   //RNG
 80042ba:	f7fd fef3 	bl	80020a4 <readPotentiometer>
 80042be:	4603      	mov	r3, r0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f9e1 	bl	8005688 <srand>

	while(1){
		switch(gameState.activeScreen){
 80042c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d8fb      	bhi.n	80042c6 <main+0x7a>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <main+0x88>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042e9 	.word	0x080042e9
 80042d8:	08004467 	.word	0x08004467
 80042dc:	0800454b 	.word	0x0800454b
 80042e0:	08004581 	.word	0x08004581
 80042e4:	08004607 	.word	0x08004607
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 80042e8:	f7fd f898 	bl	800141c <clrscr>
			drawWindow();
 80042ec:	f000 fa40 	bl	8004770 <drawWindow>
			drawbackground(); // stars in background
 80042f0:	f7fe fa43 	bl	800277a <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80042f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042f8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fb2d 	bl	800295e <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8004304:	f107 0220 	add.w	r2, r7, #32
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f9f4 	bl	80046fc <drawMenuScreen>

			while(gameState.activeScreen==0){
 8004314:	e0a1      	b.n	800445a <main+0x20e>
				readInput(&gameState);
 8004316:	f107 0320 	add.w	r3, r7, #32
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ff4c 	bl	80041b8 <readInput>
				if(downIsPressed()){
 8004320:	f7fd fc1e 	bl	8001b60 <downIsPressed>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d025      	beq.n	8004376 <main+0x12a>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 800432a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004334:	4413      	add	r3, r2
 8004336:	3b78      	subs	r3, #120	; 0x78
 8004338:	e893 0003 	ldmia.w	r3, {r0, r1}
 800433c:	f000 f9be 	bl	80046bc <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8004340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	4b9b      	ldr	r3, [pc, #620]	; (80045b4 <main+0x368>)
 8004348:	fb83 3102 	smull	r3, r1, r3, r2
 800434c:	17d3      	asrs	r3, r2, #31
 800434e:	1ac9      	subs	r1, r1, r3
 8004350:	460b      	mov	r3, r1
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	440b      	add	r3, r1
 8004356:	1ad1      	subs	r1, r2, r3
 8004358:	b2cb      	uxtb	r3, r1
 800435a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 800435e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004368:	4413      	add	r3, r2
 800436a:	3b78      	subs	r3, #120	; 0x78
 800436c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004370:	f000 f984 	bl	800467c <drawBtnAsSelected>
 8004374:	e028      	b.n	80043c8 <main+0x17c>
				}
				else if(upIsPressed()){
 8004376:	f7fd fbc5 	bl	8001b04 <upIsPressed>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d023      	beq.n	80043c8 <main+0x17c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8004380:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800438a:	4413      	add	r3, r2
 800438c:	3b78      	subs	r3, #120	; 0x78
 800438e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004392:	f000 f993 	bl	80046bc <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8004396:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <main+0x15a>
 800439e:	2302      	movs	r3, #2
 80043a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80043a4:	e005      	b.n	80043b2 <main+0x166>
					else gameState.btnSelected=gameState.btnSelected-1;
 80043a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80043b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80043bc:	4413      	add	r3, r2
 80043be:	3b78      	subs	r3, #120	; 0x78
 80043c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043c4:	f000 f95a 	bl	800467c <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 80043c8:	f7fd fb6e 	bl	8001aa8 <centerIsPressed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d043      	beq.n	800445a <main+0x20e>
					if(gameState.btnSelected==0){ //START BUTTON
 80043d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <main+0x196>
						gameState.activeScreen=1; //Game screen
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80043e0:	e03b      	b.n	800445a <main+0x20e>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 80043e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d130      	bne.n	800444c <main+0x200>
						gameState.difficulty=(gameState.difficulty+1)%3;
 80043ea:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	4b70      	ldr	r3, [pc, #448]	; (80045b4 <main+0x368>)
 80043f2:	fb83 3102 	smull	r3, r1, r3, r2
 80043f6:	17d3      	asrs	r3, r2, #31
 80043f8:	1ac9      	subs	r1, r1, r3
 80043fa:	460b      	mov	r3, r1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	440b      	add	r3, r1
 8004400:	1ad1      	subs	r1, r2, r3
 8004402:	b2cb      	uxtb	r3, r1
 8004404:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8004408:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <main+0x35c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	330f      	adds	r3, #15
 800440e:	4a66      	ldr	r2, [pc, #408]	; (80045a8 <main+0x35c>)
 8004410:	7852      	ldrb	r2, [r2, #1]
 8004412:	3201      	adds	r2, #1
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd f810 	bl	800143c <gotoxy>
						if(gameState.difficulty==0){
 800441c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <main+0x1e0>
							printf("EASY  ");
 8004424:	4864      	ldr	r0, [pc, #400]	; (80045b8 <main+0x36c>)
 8004426:	f001 f88b 	bl	8005540 <iprintf>
 800442a:	e016      	b.n	800445a <main+0x20e>
						} else if(gameState.difficulty==1){
 800442c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004430:	2b01      	cmp	r3, #1
 8004432:	d103      	bne.n	800443c <main+0x1f0>
							printf("MEDIUM");
 8004434:	4861      	ldr	r0, [pc, #388]	; (80045bc <main+0x370>)
 8004436:	f001 f883 	bl	8005540 <iprintf>
 800443a:	e00e      	b.n	800445a <main+0x20e>
						} else if(gameState.difficulty==2){
 800443c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004440:	2b02      	cmp	r3, #2
 8004442:	d10a      	bne.n	800445a <main+0x20e>
							printf("HARD  ");
 8004444:	485e      	ldr	r0, [pc, #376]	; (80045c0 <main+0x374>)
 8004446:	f001 f87b 	bl	8005540 <iprintf>
 800444a:	e006      	b.n	800445a <main+0x20e>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 800444c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004450:	2b02      	cmp	r3, #2
 8004452:	d102      	bne.n	800445a <main+0x20e>
						gameState.activeScreen=2;// help screen
 8004454:	2302      	movs	r3, #2
 8004456:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 800445a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800445e:	2b00      	cmp	r3, #0
 8004460:	f43f af59 	beq.w	8004316 <main+0xca>
>>>>>>> Stashed changes
					}
				}
			}
			break;
<<<<<<< Updated upstream
 8004014:	e0cd      	b.n	80041b2 <main+0x3b6>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8004016:	f7fd fd37 	bl	8001a88 <clrscr>
			printf("GAME SCREEN");
 800401a:	485c      	ldr	r0, [pc, #368]	; (800418c <main+0x390>)
 800401c:	f000 fcb0 	bl	8004980 <iprintf>
			uint32_t frameLastUpdated=0;
 8004020:	2300      	movs	r3, #0
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
			gameState.spaceship.lastShotTime=runtime;
 8004024:	4b5a      	ldr	r3, [pc, #360]	; (8004190 <main+0x394>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	643b      	str	r3, [r7, #64]	; 0x40
			drawWindow();
 800402a:	f000 f96b 	bl	8004304 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800402e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004032:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fefd 	bl	8002e38 <drawMoon>
			drawhearth(&gameState);
 800403e:	f107 0320 	add.w	r3, r7, #32
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f82c 	bl	80030a0 <drawhearth>
			//drawWindow();
			drawCity();
 8004048:	f7ff f94c 	bl	80032e4 <drawCity>
			drawScore(&gameState);
 800404c:	f107 0320 	add.w	r3, r7, #32
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fc31 	bl	80038b8 <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 8004056:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <main+0x394>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	749a      	strb	r2, [r3, #18]
			while(gameState.activeScreen==1){
 8004060:	e044      	b.n	80040ec <main+0x2f0>
				readInput(&gameState);
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fe7e 	bl	8003d68 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 800406c:	4b48      	ldr	r3, [pc, #288]	; (8004190 <main+0x394>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b03      	cmp	r3, #3
 8004076:	d939      	bls.n	80040ec <main+0x2f0>
					readInput(&gameState);
 8004078:	f107 0320 	add.w	r3, r7, #32
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fe73 	bl	8003d68 <readInput>
					updateSpaceship(&gameState);
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f9b1 	bl	80043ee <updateSpaceship>
					spawnEnemy(&gameState);
 800408c:	f107 0320 	add.w	r3, r7, #32
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fbf3 	bl	800287c <spawnEnemy>
					updateEnemy(&gameState);
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fc66 	bl	800296c <updateEnemy>
					shootSpaceship(&gameState);
 80040a0:	f107 0320 	add.w	r3, r7, #32
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f9d3 	bl	8004450 <shootSpaceship>
					shootEnemy(&gameState);
 80040aa:	f107 0320 	add.w	r3, r7, #32
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fc8c 	bl	80029cc <shootEnemy>
					updateBullets(&gameState);
 80040b4:	f107 0320 	add.w	r3, r7, #32
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fdd2 	bl	8001c62 <updateBullets>
					detectBulletHit(&gameState);
 80040be:	f107 0320 	add.w	r3, r7, #32
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd fe49 	bl	8001d5a <detectBulletHit>
					detectCityHit(&gameState);
 80040c8:	f107 0320 	add.w	r3, r7, #32
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fce1 	bl	8002a94 <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 80040d2:	f107 0320 	add.w	r3, r7, #32
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f97e 	bl	80043d8 <updateNuke>
					//checkIfDead(&gameState);
					drawScreen(&gameState);
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fdf7 	bl	8003cd4 <drawScreen>
					frameLastUpdated=runtime;
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <main+0x394>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==1){
 80040ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d0b6      	beq.n	8004062 <main+0x266>
				}
		}
			break;
 80040f4:	e05d      	b.n	80041b2 <main+0x3b6>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80040f6:	f7fd fcc7 	bl	8001a88 <clrscr>
			drawWindow();
 80040fa:	f000 f903 	bl	8004304 <drawWindow>
			drawbackground(); // stars in background
 80040fe:	f7fe fda9 	bl	8002c54 <drawbackground>
			drawHelpScreen();
 8004102:	f000 f8e9 	bl	80042d8 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8004106:	e00c      	b.n	8004122 <main+0x326>
				readInput(&gameState);
 8004108:	f107 0320 	add.w	r3, r7, #32
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fe2b 	bl	8003d68 <readInput>
				if(centerIsPressed()){
 8004112:	f7fe f83d 	bl	8002190 <centerIsPressed>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <main+0x326>
					gameState.activeScreen=0;//MENU SCREEN
 800411c:	2300      	movs	r3, #0
 800411e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 8004122:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004126:	2b02      	cmp	r3, #2
 8004128:	d0ee      	beq.n	8004108 <main+0x30c>
				}
			}
			break;
 800412a:	e042      	b.n	80041b2 <main+0x3b6>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 800412c:	f7fd fcac 	bl	8001a88 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8004130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004134:	4619      	mov	r1, r3
 8004136:	4817      	ldr	r0, [pc, #92]	; (8004194 <main+0x398>)
 8004138:	f000 fc22 	bl	8004980 <iprintf>
			while(gameState.activeScreen==3){
 800413c:	e011      	b.n	8004162 <main+0x366>
				readInput(&gameState);
 800413e:	f107 0320 	add.w	r3, r7, #32
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fe10 	bl	8003d68 <readInput>
				if(centerIsPressed()){
 8004148:	f7fe f822 	bl	8002190 <centerIsPressed>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <main+0x366>
					initVariables(&gameState);
 8004152:	f107 0320 	add.w	r3, r7, #32
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fd44 	bl	8003be4 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 800415c:	2300      	movs	r3, #0
 800415e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8004162:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004166:	2b03      	cmp	r3, #3
 8004168:	d0e9      	beq.n	800413e <main+0x342>
				}
			}
			break;
 800416a:	e022      	b.n	80041b2 <main+0x3b6>
 800416c:	08005e50 	.word	0x08005e50
 8004170:	08005e58 	.word	0x08005e58
 8004174:	08005e60 	.word	0x08005e60
 8004178:	08005dfc 	.word	0x08005dfc
 800417c:	55555556 	.word	0x55555556
 8004180:	08005d94 	.word	0x08005d94
 8004184:	08005d9c 	.word	0x08005d9c
 8004188:	08005da4 	.word	0x08005da4
 800418c:	08005dac 	.word	0x08005dac
 8004190:	200001cc 	.word	0x200001cc
 8004194:	08005db8 	.word	0x08005db8
		case 4:
			readInput(&gameState);
 8004198:	f107 0320 	add.w	r3, r7, #32
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fde3 	bl	8003d68 <readInput>
			gotoxy(0,0);
 80041a2:	2100      	movs	r1, #0
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fd fc7f 	bl	8001aa8 <gotoxy>
			printf("Noget meget vigtigt!");
 80041aa:	4802      	ldr	r0, [pc, #8]	; (80041b4 <main+0x3b8>)
 80041ac:	f000 fbe8 	bl	8004980 <iprintf>
			break;
 80041b0:	bf00      	nop
		switch(gameState.activeScreen){
 80041b2:	e660      	b.n	8003e76 <main+0x7a>
 80041b4:	08005de4 	.word	0x08005de4

080041b8 <drawButton>:
=======
 8004464:	e0dd      	b.n	8004622 <main+0x3d6>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8004466:	f7fc ffd9 	bl	800141c <clrscr>
			printf("GAME SCREEN");
 800446a:	4856      	ldr	r0, [pc, #344]	; (80045c4 <main+0x378>)
 800446c:	f001 f868 	bl	8005540 <iprintf>
			uint32_t frameLastUpdated=0;
 8004470:	2300      	movs	r3, #0
 8004472:	67fb      	str	r3, [r7, #124]	; 0x7c
			gameState.spaceship.lastShotTime=runtime;
 8004474:	4b54      	ldr	r3, [pc, #336]	; (80045c8 <main+0x37c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
			gameState.powerup.lastUseTime = runtime;
 800447a:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <main+0x37c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	67bb      	str	r3, [r7, #120]	; 0x78
			drawCity();
 8004480:	f7fe fcc2 	bl	8002e08 <drawCity>
			drawScore(&gameState);
 8004484:	f107 0320 	add.w	r3, r7, #32
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe ffa7 	bl	80033dc <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 800448e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004490:	4a4d      	ldr	r2, [pc, #308]	; (80045c8 <main+0x37c>)
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
			while(gameState.activeScreen==1){
 8004496:	e053      	b.n	8004540 <main+0x2f4>
				readInput(&gameState);
 8004498:	f107 0320 	add.w	r3, r7, #32
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fe8b 	bl	80041b8 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 80044a2:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <main+0x37c>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d948      	bls.n	8004540 <main+0x2f4>
					readInput(&gameState);
 80044ae:	f107 0320 	add.w	r3, r7, #32
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fe80 	bl	80041b8 <readInput>
					
					spawnEnemy(&gameState);
 80044b8:	f107 0320 	add.w	r3, r7, #32
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd ff69 	bl	8002394 <spawnEnemy>
					spawnPowerup(&gameState);
 80044c2:	f107 0320 	add.w	r3, r7, #32
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fb0c 	bl	8004ae4 <spawnPowerup>

					updateSpaceship(&gameState);
 80044cc:	f107 0320 	add.w	r3, r7, #32
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fc4b 	bl	8004d6c <updateSpaceship>
					updateEnemy(&gameState);
 80044d6:	f107 0320 	add.w	r3, r7, #32
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd ffd2 	bl	8002484 <updateEnemy>
					updatePowerup(&gameState);
 80044e0:	f107 0320 	add.w	r3, r7, #32
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb43 	bl	8004b70 <updatePowerup>
					shootSpaceship(&gameState);
 80044ea:	f107 0320 	add.w	r3, r7, #32
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fc6e 	bl	8004dd0 <shootSpaceship>
					updateBullets(&gameState);
 80044f4:	f107 0320 	add.w	r3, r7, #32
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd f87c 	bl	80015f6 <updateBullets>

					shootEnemy(&gameState);
 80044fe:	f107 0320 	add.w	r3, r7, #32
 8004502:	4618      	mov	r0, r3
 8004504:	f7fd ffee 	bl	80024e4 <shootEnemy>

					detectBulletHit(&gameState);
 8004508:	f107 0320 	add.w	r3, r7, #32
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd f8f6 	bl	80016fe <detectBulletHit>
					detectCityHit(&gameState);
 8004512:	f107 0320 	add.w	r3, r7, #32
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe f852 	bl	80025c0 <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 800451c:	f107 0320 	add.w	r3, r7, #32
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fa9b 	bl	8004a5c <updateNuke>
					checkIfDead(&gameState);
 8004526:	f107 0320 	add.w	r3, r7, #32
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe20 	bl	8004170 <checkIfDead>
					drawScreen(&gameState);
 8004530:	f107 0320 	add.w	r3, r7, #32
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fdf9 	bl	800412c <drawScreen>
					frameLastUpdated=runtime;
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <main+0x37c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(gameState.activeScreen==1){
 8004540:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004544:	2b01      	cmp	r3, #1
 8004546:	d0a7      	beq.n	8004498 <main+0x24c>
				}
		}
			break;
 8004548:	e06b      	b.n	8004622 <main+0x3d6>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 800454a:	f7fc ff67 	bl	800141c <clrscr>
			drawWindow();
 800454e:	f000 f90f 	bl	8004770 <drawWindow>
			drawbackground(); // stars in background
 8004552:	f7fe f912 	bl	800277a <drawbackground>
			drawHelpScreen();
 8004556:	f000 f8f5 	bl	8004744 <drawHelpScreen>
			while(gameState.activeScreen==2){
 800455a:	e00c      	b.n	8004576 <main+0x32a>
				readInput(&gameState);
 800455c:	f107 0320 	add.w	r3, r7, #32
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fe29 	bl	80041b8 <readInput>
				if(centerIsPressed()){
 8004566:	f7fd fa9f 	bl	8001aa8 <centerIsPressed>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <main+0x32a>
					gameState.activeScreen=0;//MENU SCREEN
 8004570:	2300      	movs	r3, #0
 8004572:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 8004576:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800457a:	2b02      	cmp	r3, #2
 800457c:	d0ee      	beq.n	800455c <main+0x310>
				}
			}
			break;
 800457e:	e050      	b.n	8004622 <main+0x3d6>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8004580:	f7fc ff4c 	bl	800141c <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d\n", gameState.score);
 8004584:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004588:	4619      	mov	r1, r3
 800458a:	4810      	ldr	r0, [pc, #64]	; (80045cc <main+0x380>)
 800458c:	f000 ffd8 	bl	8005540 <iprintf>
			printf("Your highscore is %d", readFromFlash(0x0800F800));
 8004590:	480f      	ldr	r0, [pc, #60]	; (80045d0 <main+0x384>)
 8004592:	f7fd fef2 	bl	800237a <readFromFlash>
 8004596:	4603      	mov	r3, r0
 8004598:	4619      	mov	r1, r3
 800459a:	480e      	ldr	r0, [pc, #56]	; (80045d4 <main+0x388>)
 800459c:	f000 ffd0 	bl	8005540 <iprintf>
			while(gameState.activeScreen==3){
 80045a0:	e02c      	b.n	80045fc <main+0x3b0>
 80045a2:	bf00      	nop
 80045a4:	08006da0 	.word	0x08006da0
 80045a8:	08006da8 	.word	0x08006da8
 80045ac:	08006db0 	.word	0x08006db0
 80045b0:	08006d44 	.word	0x08006d44
 80045b4:	55555556 	.word	0x55555556
 80045b8:	08006cdc 	.word	0x08006cdc
 80045bc:	08006ce4 	.word	0x08006ce4
 80045c0:	08006cec 	.word	0x08006cec
 80045c4:	08006cf4 	.word	0x08006cf4
 80045c8:	200001c8 	.word	0x200001c8
 80045cc:	08006d00 	.word	0x08006d00
 80045d0:	0800f800 	.word	0x0800f800
 80045d4:	08006d2c 	.word	0x08006d2c
				readInput(&gameState);
 80045d8:	f107 0320 	add.w	r3, r7, #32
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fdeb 	bl	80041b8 <readInput>
				if(centerIsPressed()){
 80045e2:	f7fd fa61 	bl	8001aa8 <centerIsPressed>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <main+0x3b0>
					initVariables(&gameState);
 80045ec:	f107 0320 	add.w	r3, r7, #32
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fcfb 	bl	8003fec <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 80045fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004600:	2b03      	cmp	r3, #3
 8004602:	d0e9      	beq.n	80045d8 <main+0x38c>
				}
			}
			break;
 8004604:	e00d      	b.n	8004622 <main+0x3d6>
		case 4:
			drawBossKey();
 8004606:	f7ff fb0b 	bl	8003c20 <drawBossKey>
			while(1){
				readInput(&gameState);
 800460a:	f107 0320 	add.w	r3, r7, #32
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fdd2 	bl	80041b8 <readInput>
				if(gameState.activeScreen !=4){
 8004614:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004618:	2b04      	cmp	r3, #4
 800461a:	d100      	bne.n	800461e <main+0x3d2>
				readInput(&gameState);
 800461c:	e7f5      	b.n	800460a <main+0x3be>
					break;
 800461e:	bf00      	nop
				}
			}
			break;
 8004620:	bf00      	nop
		switch(gameState.activeScreen){
 8004622:	e650      	b.n	80042c6 <main+0x7a>

08004624 <drawButton>:
>>>>>>> Stashed changes
#include "menu.h"




void drawButton(button_t btn){
<<<<<<< Updated upstream
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	463b      	mov	r3, r7
 80041c0:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f802 	bl	80001d0 <strlen>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80041d0:	783b      	ldrb	r3, [r7, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	787b      	ldrb	r3, [r7, #1]
 80041d6:	461c      	mov	r4, r3
 80041d8:	783b      	ldrb	r3, [r7, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	1d5a      	adds	r2, r3, #5
 80041e2:	787b      	ldrb	r3, [r7, #1]
 80041e4:	3302      	adds	r3, #2
 80041e6:	2100      	movs	r1, #0
 80041e8:	9100      	str	r1, [sp, #0]
 80041ea:	4621      	mov	r1, r4
 80041ec:	f7fd fc6e 	bl	8001acc <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80041f0:	783b      	ldrb	r3, [r7, #0]
 80041f2:	3303      	adds	r3, #3
 80041f4:	787a      	ldrb	r2, [r7, #1]
 80041f6:	3201      	adds	r2, #1
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd fc54 	bl	8001aa8 <gotoxy>
	printf(btn.text);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fbbc 	bl	8004980 <iprintf>
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bd90      	pop	{r4, r7, pc}

08004210 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b087      	sub	sp, #28
 8004214:	af02      	add	r7, sp, #8
 8004216:	463b      	mov	r3, r7
 8004218:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fb ffd6 	bl	80001d0 <strlen>
 8004224:	4603      	mov	r3, r0
 8004226:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8004228:	783b      	ldrb	r3, [r7, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	787b      	ldrb	r3, [r7, #1]
 800422e:	461c      	mov	r4, r3
 8004230:	783b      	ldrb	r3, [r7, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	1d5a      	adds	r2, r3, #5
 800423a:	787b      	ldrb	r3, [r7, #1]
 800423c:	3302      	adds	r3, #2
 800423e:	2101      	movs	r1, #1
 8004240:	9100      	str	r1, [sp, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	f7fd fc42 	bl	8001acc <drawBox>
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bd90      	pop	{r4, r7, pc}

08004250 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	af02      	add	r7, sp, #8
 8004256:	463b      	mov	r3, r7
 8004258:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fb ffb6 	bl	80001d0 <strlen>
 8004264:	4603      	mov	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8004268:	783b      	ldrb	r3, [r7, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	787b      	ldrb	r3, [r7, #1]
 800426e:	461c      	mov	r4, r3
 8004270:	783b      	ldrb	r3, [r7, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	1d5a      	adds	r2, r3, #5
 800427a:	787b      	ldrb	r3, [r7, #1]
 800427c:	3302      	adds	r3, #2
 800427e:	2100      	movs	r1, #0
 8004280:	9100      	str	r1, [sp, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	f7fd fc22 	bl	8001acc <drawBox>
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bd90      	pop	{r4, r7, pc}

08004290 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042a0:	f7ff ff8a 	bl	80041b8 <drawButton>
	drawButton(btnList[1]);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3308      	adds	r3, #8
 80042a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042ac:	f7ff ff84 	bl	80041b8 <drawButton>
	drawButton(btnList[2]);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3310      	adds	r3, #16
 80042b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042b8:	f7ff ff7e 	bl	80041b8 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042cc:	f7ff ffa0 	bl	8004210 <drawBtnAsSelected>
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <drawHelpScreen>:


void drawHelpScreen(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 80042dc:	2105      	movs	r1, #5
 80042de:	2046      	movs	r0, #70	; 0x46
 80042e0:	f7fd fbe2 	bl	8001aa8 <gotoxy>
	printf("HELP SCREEN");
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <drawHelpScreen+0x24>)
 80042e6:	f000 fb4b 	bl	8004980 <iprintf>
	gotoxy(60,7);
 80042ea:	2107      	movs	r1, #7
 80042ec:	203c      	movs	r0, #60	; 0x3c
 80042ee:	f7fd fbdb 	bl	8001aa8 <gotoxy>
	printf("Tag dig dog sammen mand!");
 80042f2:	4803      	ldr	r0, [pc, #12]	; (8004300 <drawHelpScreen+0x28>)
 80042f4:	f000 fb44 	bl	8004980 <iprintf>

}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08005e24 	.word	0x08005e24
 8004300:	08005e30 	.word	0x08005e30

08004304 <drawWindow>:

void drawWindow(){
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	232b      	movs	r3, #43	; 0x2b
 8004310:	229c      	movs	r2, #156	; 0x9c
 8004312:	2101      	movs	r1, #1
 8004314:	2001      	movs	r0, #1
 8004316:	f7fd fbd9 	bl	8001acc <drawBox>
}
 800431a:	bf00      	nop
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <chargeNuke>:
=======
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b087      	sub	sp, #28
 8004628:	af02      	add	r7, sp, #8
 800462a:	463b      	mov	r3, r7
 800462c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fb fdcc 	bl	80001d0 <strlen>
 8004638:	4603      	mov	r3, r0
 800463a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 800463c:	783b      	ldrb	r3, [r7, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	461c      	mov	r4, r3
 8004644:	783b      	ldrb	r3, [r7, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	1d5a      	adds	r2, r3, #5
 800464e:	787b      	ldrb	r3, [r7, #1]
 8004650:	3302      	adds	r3, #2
 8004652:	2100      	movs	r1, #0
 8004654:	9100      	str	r1, [sp, #0]
 8004656:	4621      	mov	r1, r4
 8004658:	f7fc ff02 	bl	8001460 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 800465c:	783b      	ldrb	r3, [r7, #0]
 800465e:	3303      	adds	r3, #3
 8004660:	787a      	ldrb	r2, [r7, #1]
 8004662:	3201      	adds	r2, #1
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fee8 	bl	800143c <gotoxy>
	printf(btn.text);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 ff66 	bl	8005540 <iprintf>
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b087      	sub	sp, #28
 8004680:	af02      	add	r7, sp, #8
 8004682:	463b      	mov	r3, r7
 8004684:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fda0 	bl	80001d0 <strlen>
 8004690:	4603      	mov	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8004694:	783b      	ldrb	r3, [r7, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	461c      	mov	r4, r3
 800469c:	783b      	ldrb	r3, [r7, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	1d5a      	adds	r2, r3, #5
 80046a6:	787b      	ldrb	r3, [r7, #1]
 80046a8:	3302      	adds	r3, #2
 80046aa:	2101      	movs	r1, #1
 80046ac:	9100      	str	r1, [sp, #0]
 80046ae:	4621      	mov	r1, r4
 80046b0:	f7fc fed6 	bl	8001460 <drawBox>
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd90      	pop	{r4, r7, pc}

080046bc <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b087      	sub	sp, #28
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	463b      	mov	r3, r7
 80046c4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fb fd80 	bl	80001d0 <strlen>
 80046d0:	4603      	mov	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80046d4:	783b      	ldrb	r3, [r7, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	787b      	ldrb	r3, [r7, #1]
 80046da:	461c      	mov	r4, r3
 80046dc:	783b      	ldrb	r3, [r7, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	1d5a      	adds	r2, r3, #5
 80046e6:	787b      	ldrb	r3, [r7, #1]
 80046e8:	3302      	adds	r3, #2
 80046ea:	2100      	movs	r1, #0
 80046ec:	9100      	str	r1, [sp, #0]
 80046ee:	4621      	mov	r1, r4
 80046f0:	f7fc feb6 	bl	8001460 <drawBox>
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}

080046fc <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	e893 0003 	ldmia.w	r3, {r0, r1}
 800470c:	f7ff ff8a 	bl	8004624 <drawButton>
	drawButton(btnList[1]);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3308      	adds	r3, #8
 8004714:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004718:	f7ff ff84 	bl	8004624 <drawButton>
	drawButton(btnList[2]);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3310      	adds	r3, #16
 8004720:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004724:	f7ff ff7e 	bl	8004624 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004738:	f7ff ffa0 	bl	800467c <drawBtnAsSelected>
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <drawHelpScreen>:


void drawHelpScreen(){
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8004748:	2105      	movs	r1, #5
 800474a:	2046      	movs	r0, #70	; 0x46
 800474c:	f7fc fe76 	bl	800143c <gotoxy>
	printf("HELP SCREEN");
 8004750:	4805      	ldr	r0, [pc, #20]	; (8004768 <drawHelpScreen+0x24>)
 8004752:	f000 fef5 	bl	8005540 <iprintf>
	gotoxy(60,7);
 8004756:	2107      	movs	r1, #7
 8004758:	203c      	movs	r0, #60	; 0x3c
 800475a:	f7fc fe6f 	bl	800143c <gotoxy>
	printf("Tag dig dog sammen mand!");
 800475e:	4803      	ldr	r0, [pc, #12]	; (800476c <drawHelpScreen+0x28>)
 8004760:	f000 feee 	bl	8005540 <iprintf>

}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}
 8004768:	08006d6c 	.word	0x08006d6c
 800476c:	08006d78 	.word	0x08006d78

08004770 <drawWindow>:

void drawWindow(){
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	232b      	movs	r3, #43	; 0x2b
 800477c:	229c      	movs	r2, #156	; 0x9c
 800477e:	2101      	movs	r1, #1
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc fe6d 	bl	8001460 <drawBox>
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <chargeNuke>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"nuke.h"

void chargeNuke(gameState_t* gameState){
<<<<<<< Updated upstream
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->readyState == 1){
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	7c5b      	ldrb	r3, [r3, #17]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d04a      	beq.n	80043c8 <chargeNuke+0xa8>
		return;
	}
	uint8_t color[] = {1,0,0};
 8004332:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <chargeNuke+0xb0>)
 8004334:	f107 030c 	add.w	r3, r7, #12
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4611      	mov	r1, r2
 800433c:	8019      	strh	r1, [r3, #0]
 800433e:	3302      	adds	r3, #2
 8004340:	0c12      	lsrs	r2, r2, #16
 8004342:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <chargeNuke+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434c:	7c92      	ldrb	r2, [r2, #18]
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004354:	d90a      	bls.n	800436c <chargeNuke+0x4c>
		color[0] = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fa40 	bl	80027ec <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <chargeNuke+0xb4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004374:	7c92      	ldrb	r2, [r2, #18]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800437c:	d90a      	bls.n	8004394 <chargeNuke+0x74>
		color[0] = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fa2c 	bl	80027ec <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <chargeNuke+0xb4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800439c:	7c92      	ldrb	r2, [r2, #18]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d910      	bls.n	80043ca <chargeNuke+0xaa>
		color[0] = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fa17 	bl	80027ec <RGBColor>
		gameState->nuke->readyState = 1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2201      	movs	r2, #1
 80043c4:	745a      	strb	r2, [r3, #17]
 80043c6:	e000      	b.n	80043ca <chargeNuke+0xaa>
		return;
 80043c8:	bf00      	nop
	}
}
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	08005e4c 	.word	0x08005e4c
 80043d4:	200001cc 	.word	0x200001cc

080043d8 <updateNuke>:
=======
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 8004794:	4a30      	ldr	r2, [pc, #192]	; (8004858 <chargeNuke+0xcc>)
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	4611      	mov	r1, r2
 800479e:	8019      	strh	r1, [r3, #0]
 80047a0:	3302      	adds	r3, #2
 80047a2:	0c12      	lsrs	r2, r2, #16
 80047a4:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime < 500){
 80047a6:	4b2d      	ldr	r3, [pc, #180]	; (800485c <chargeNuke+0xd0>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047b6:	d205      	bcs.n	80047c4 <chargeNuke+0x38>
		color[0] = 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <chargeNuke+0xd0>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047d4:	d905      	bls.n	80047e2 <chargeNuke+0x56>
		color[0] = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <chargeNuke+0xd0>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f2:	d905      	bls.n	8004800 <chargeNuke+0x74>
		color[0] = 1;
 80047f4:	2301      	movs	r3, #1
 80047f6:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <chargeNuke+0xd0>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004810:	4293      	cmp	r3, r2
 8004812:	d909      	bls.n	8004828 <chargeNuke+0x9c>
		color[0] = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004818:	2301      	movs	r3, #1
 800481a:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	73bb      	strb	r3, [r7, #14]
		gameState->nuke->readyState = 1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2201      	movs	r2, #1
 8004826:	765a      	strb	r2, [r3, #25]
	}
	int8_t nullColor[] = {0,0,0};
 8004828:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <chargeNuke+0xcc>)
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4611      	mov	r1, r2
 8004832:	8019      	strh	r1, [r3, #0]
 8004834:	3302      	adds	r3, #2
 8004836:	0c12      	lsrs	r2, r2, #16
 8004838:	701a      	strb	r2, [r3, #0]
	RGBColor(nullColor);
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fd3a 	bl	80022b8 <RGBColor>
	RGBColor(color);
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd fd35 	bl	80022b8 <RGBColor>
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	08006d94 	.word	0x08006d94
 800485c:	200001c8 	.word	0x200001c8

08004860 <detonateNuke>:

void detonateNuke(gameState_t* gameState){
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	gameState->nuke->isDeployed = 0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2200      	movs	r2, #0
 800486e:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2200      	movs	r2, #0
 8004876:	765a      	strb	r2, [r3, #25]

	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fedc 	bl	800263c <fpToInt>
 8004884:	4604      	mov	r4, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd fed5 	bl	800263c <fpToInt>
 8004892:	4603      	mov	r3, r0
 8004894:	0fda      	lsrs	r2, r3, #31
 8004896:	4413      	add	r3, r2
 8004898:	105b      	asrs	r3, r3, #1
 800489a:	4619      	mov	r1, r3
 800489c:	4620      	mov	r0, r4
 800489e:	f7fc fdcd 	bl	800143c <gotoxy>
	printf("     ");
 80048a2:	483d      	ldr	r0, [pc, #244]	; (8004998 <detonateNuke+0x138>)
 80048a4:	f000 fe4c 	bl	8005540 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fec4 	bl	800263c <fpToInt>
 80048b4:	4604      	mov	r4, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd febd 	bl	800263c <fpToInt>
 80048c2:	4603      	mov	r3, r0
 80048c4:	3302      	adds	r3, #2
 80048c6:	0fda      	lsrs	r2, r3, #31
 80048c8:	4413      	add	r3, r2
 80048ca:	105b      	asrs	r3, r3, #1
 80048cc:	4619      	mov	r1, r3
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fc fdb4 	bl	800143c <gotoxy>
	printf("     ");
 80048d4:	4830      	ldr	r0, [pc, #192]	; (8004998 <detonateNuke+0x138>)
 80048d6:	f000 fe33 	bl	8005540 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fd feab 	bl	800263c <fpToInt>
 80048e6:	4604      	mov	r4, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fea4 	bl	800263c <fpToInt>
 80048f4:	4603      	mov	r3, r0
 80048f6:	3304      	adds	r3, #4
 80048f8:	0fda      	lsrs	r2, r3, #31
 80048fa:	4413      	add	r3, r2
 80048fc:	105b      	asrs	r3, r3, #1
 80048fe:	4619      	mov	r1, r3
 8004900:	4620      	mov	r0, r4
 8004902:	f7fc fd9b 	bl	800143c <gotoxy>
	printf("     ");
 8004906:	4824      	ldr	r0, [pc, #144]	; (8004998 <detonateNuke+0x138>)
 8004908:	f000 fe1a 	bl	8005540 <iprintf>
	enemyNode_t* current = gameState->enemyLL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	60fb      	str	r3, [r7, #12]
	drawNukeCircle(gameState);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fe ff4e 	bl	80037b4 <drawNukeCircle>
	gameState->nuke->lastDetonationTime = runtime;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <detonateNuke+0x13c>)
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2020 	strb.w	r2, [r3, #32]
	while(current != NULL){
 800492c:	e02c      	b.n	8004988 <detonateNuke+0x128>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd ff00 	bl	8002754 <fpAbs>
 8004954:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 8004956:	4423      	add	r3, r4
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fefb 	bl	8002754 <fpAbs>
 800495e:	4603      	mov	r3, r0
 8004960:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd fe8a 	bl	800267e <fpMultiply>
 800496a:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 800496c:	2023      	movs	r0, #35	; 0x23
 800496e:	f7fd fe50 	bl	8002612 <intToFp>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4293      	cmp	r3, r2
 8004978:	d203      	bcs.n	8004982 <detonateNuke+0x122>
			deleteEnemyNode(gameState, current);
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fa37 	bl	8003df0 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1cf      	bne.n	800492e <detonateNuke+0xce>
	}
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}
 8004998:	08006d98 	.word	0x08006d98
 800499c:	200001c8 	.word	0x200001c8

080049a0 <shootNuke>:
>>>>>>> Stashed changes

void shootNuke(gameState_t* gameState){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register
 80049a8:	2301      	movs	r3, #1
 80049aa:	2200      	movs	r2, #0
 80049ac:	2103      	movs	r1, #3
 80049ae:	2098      	movs	r0, #152	; 0x98
 80049b0:	f7fd f9a8 	bl	8001d04 <I2C_Read>
 80049b4:	4603      	mov	r3, r0
 80049b6:	77fb      	strb	r3, [r7, #31]
	if(x > 128 && gameState->nuke->readyState){
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d947      	bls.n	8004a4e <shootNuke+0xae>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	7e5b      	ldrb	r3, [r3, #25]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d042      	beq.n	8004a4e <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d132      	bne.n	8004a38 <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80049e6:	f7fd fe14 	bl	8002612 <intToFp>
 80049ea:	4603      	mov	r3, r0
 80049ec:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	461a      	mov	r2, r3
 80049f4:	f107 0314 	add.w	r3, r7, #20
 80049f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049fc:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	3308      	adds	r3, #8
 8004a06:	f107 0214 	add.w	r2, r7, #20
 8004a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a0e:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	3310      	adds	r3, #16
 8004a18:	f107 020c 	add.w	r2, r7, #12
 8004a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a20:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2201      	movs	r2, #1
 8004a2a:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <shootNuke+0xb8>)
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
		}else{
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
		}
	}
}
 8004a36:	e00a      	b.n	8004a4e <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <shootNuke+0xb8>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d902      	bls.n	8004a4e <shootNuke+0xae>
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff09 	bl	8004860 <detonateNuke>
}
 8004a4e:	bf00      	nop
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200001c8 	.word	0x200001c8

08004a5c <updateNuke>:

void updateNuke(gameState_t* gameState){
<<<<<<< Updated upstream
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff9d 	bl	8004320 <chargeNuke>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <updateSpaceship>:
=======
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe91 	bl	800478c <chargeNuke>
	shootNuke(gameState);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff ff98 	bl	80049a0 <shootNuke>
	if(gameState->nuke->isDeployed == 1){
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	7e1b      	ldrb	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d113      	bne.n	8004aa2 <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	440a      	add	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	440a      	add	r2, r1
 8004aa0:	60da      	str	r2, [r3, #12]
	}
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <updateNuke+0x84>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d912      	bls.n	8004ad8 <updateNuke+0x7c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10c      	bne.n	8004ad8 <updateNuke+0x7c>
		clearNukeCircle(gameState);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fe ffa2 	bl	8003a08 <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004acc:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	200001c8 	.word	0x200001c8

08004ae4 <spawnPowerup>:
 *      Author: david
 */
#include "powerup.h"
#define spawnPeriod 600

void spawnPowerup(gameState_t* gameState){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8004aec:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <spawnPowerup+0x88>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004afa:	d332      	bcc.n	8004b62 <spawnPowerup+0x7e>



		gameState->powerup.lastUseTime=runtime;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <spawnPowerup+0x88>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58
		gameState->powerup.isVisible=1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		position_t spawnPos = {intToFp(100), intToFp(2)*yScale};
 8004b0c:	2064      	movs	r0, #100	; 0x64
 8004b0e:	f7fd fd80 	bl	8002612 <intToFp>
 8004b12:	4603      	mov	r3, r0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	2002      	movs	r0, #2
 8004b18:	f7fd fd7b 	bl	8002612 <intToFp>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7fd fd75 	bl	8002612 <intToFp>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b30:	60fb      	str	r3, [r7, #12]
		gameState->powerup.position=spawnPos;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3340      	adds	r3, #64	; 0x40
 8004b36:	f107 0210 	add.w	r2, r7, #16
 8004b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b3e:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3348      	adds	r3, #72	; 0x48
 8004b46:	f107 0210 	add.w	r2, r7, #16
 8004b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b4e:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3350      	adds	r3, #80	; 0x50
 8004b56:	f107 0208 	add.w	r2, r7, #8
 8004b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b5e:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200001c8 	.word	0x200001c8

08004b70 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80b1 	beq.w	8004ce6 <updatePowerup+0x176>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	441a      	add	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	649a      	str	r2, [r3, #72]	; 0x48
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	441a      	add	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	64da      	str	r2, [r3, #76]	; 0x4c


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=39){
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fd49 	bl	800263c <fpToInt>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b4d      	cmp	r3, #77	; 0x4d
 8004bae:	dd79      	ble.n	8004ca4 <updatePowerup+0x134>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7f1b      	ldrb	r3, [r3, #28]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d125      	bne.n	8004c04 <updatePowerup+0x94>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fd fd3d 	bl	800263c <fpToInt>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f103 0408 	add.w	r4, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd fd35 	bl	800263c <fpToInt>
 8004bd2:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	db12      	blt.n	8004bfe <updatePowerup+0x8e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fd2d 	bl	800263c <fpToInt>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f1a3 0408 	sub.w	r4, r3, #8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fd25 	bl	800263c <fpToInt>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	dc01      	bgt.n	8004bfe <updatePowerup+0x8e>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <updatePowerup+0x90>
 8004bfe:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e029      	b.n	8004c58 <updatePowerup+0xe8>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fd fd17 	bl	800263c <fpToInt>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	1c59      	adds	r1, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7f1b      	ldrb	r3, [r3, #28]
 8004c16:	1e5a      	subs	r2, r3, #1
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	18cc      	adds	r4, r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fd09 	bl	800263c <fpToInt>
 8004c2a:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	db11      	blt.n	8004c54 <updatePowerup+0xe4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd fd01 	bl	800263c <fpToInt>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	1e5c      	subs	r4, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd fcfa 	bl	800263c <fpToInt>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	429c      	cmp	r4, r3
 8004c4e:	dc01      	bgt.n	8004c54 <updatePowerup+0xe4>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <updatePowerup+0xe6>
 8004c54:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8004c56:	73fb      	strb	r3, [r7, #15]

			}


			if(powerupIsTaken){
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d022      	beq.n	8004ca4 <updatePowerup+0x134>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd fcea 	bl	800263c <fpToInt>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2dc      	uxtb	r4, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fce3 	bl	800263c <fpToInt>
 8004c76:	4603      	mov	r3, r0
 8004c78:	0fda      	lsrs	r2, r3, #31
 8004c7a:	4413      	add	r3, r2
 8004c7c:	105b      	asrs	r3, r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fe fc94 	bl	80035b0 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7f1b      	ldrb	r3, [r3, #28]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d805      	bhi.n	8004ca4 <updatePowerup+0x134>
					gameState->spaceship.numberOfParts++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	7f1b      	ldrb	r3, [r3, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	771a      	strb	r2, [r3, #28]
					//TODO: tilføj point??
				}

			}
		}
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=42){
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd fcc7 	bl	800263c <fpToInt>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b53      	cmp	r3, #83	; 0x53
 8004cb2:	dd18      	ble.n	8004ce6 <updatePowerup+0x176>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fcbf 	bl	800263c <fpToInt>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b2dc      	uxtb	r4, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd fcb8 	bl	800263c <fpToInt>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	0fda      	lsrs	r2, r3, #31
 8004cd0:	4413      	add	r3, r2
 8004cd2:	105b      	asrs	r3, r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7fe fc69 	bl	80035b0 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c


	}


}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}

08004cee <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 8004cee:	b590      	push	{r4, r7, lr}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d031      	beq.n	8004d64 <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fc99 	bl	800263c <fpToInt>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	b2dc      	uxtb	r4, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fc92 	bl	800263c <fpToInt>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	0fda      	lsrs	r2, r3, #31
 8004d1c:	4413      	add	r3, r2
 8004d1e:	105b      	asrs	r3, r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7fe fc43 	bl	80035b0 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fc84 	bl	800263c <fpToInt>
 8004d34:	4603      	mov	r3, r0
 8004d36:	b2dc      	uxtb	r4, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fd fc7d 	bl	800263c <fpToInt>
 8004d42:	4603      	mov	r3, r0
 8004d44:	0fda      	lsrs	r2, r3, #31
 8004d46:	4413      	add	r3, r2
 8004d48:	105b      	asrs	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7fe fc5a 	bl	8003608 <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	3340      	adds	r3, #64	; 0x40
 8004d5a:	3248      	adds	r2, #72	; 0x48
 8004d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d60:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}

08004d6c <updateSpaceship>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
<<<<<<< Updated upstream
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 80043f6:	f7fe f8ef 	bl	80025d8 <readPotentiometer>
 80043fa:	4603      	mov	r3, r0
 80043fc:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fb73 	bl	8002aec <intToFp>
 8004406:	4604      	mov	r4, r0
 8004408:	200d      	movs	r0, #13
 800440a:	f7fe fb6f 	bl	8002aec <intToFp>
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	4620      	mov	r0, r4
 8004414:	f7fe fbc1 	bl	8002b9a <fpDivide>
 8004418:	60f8      	str	r0, [r7, #12]
	if(fpToInt(x) <= 1){
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7fe fb7b 	bl	8002b16 <fpToInt>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	dc03      	bgt.n	800442e <updateSpaceship+0x40>
		x = intToFp(2);
 8004426:	2002      	movs	r0, #2
 8004428:	f7fe fb60 	bl	8002aec <intToFp>
 800442c:	60f8      	str	r0, [r7, #12]
	}
	if(fpToInt(x) >= 156){
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7fe fb71 	bl	8002b16 <fpToInt>
 8004434:	4603      	mov	r3, r0
 8004436:	2b9b      	cmp	r3, #155	; 0x9b
 8004438:	dd03      	ble.n	8004442 <updateSpaceship+0x54>
		x = intToFp(155);
 800443a:	209b      	movs	r0, #155	; 0x9b
 800443c:	f7fe fb56 	bl	8002aec <intToFp>
 8004440:	60f8      	str	r0, [r7, #12]
	}
	gameState->spaceship.nextPosition.x = x;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	615a      	str	r2, [r3, #20]

}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}

08004450 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b090      	sub	sp, #64	; 0x40
 8004454:	af04      	add	r7, sp, #16
 8004456:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8004458:	f7fd fe9a 	bl	8002190 <centerIsPressed>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d03b      	beq.n	80044da <shootSpaceship+0x8a>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <shootSpaceship+0x94>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]
=======
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 8004d74:	f7fd f996 	bl	80020a4 <readPotentiometer>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 8004d7c:	897b      	ldrh	r3, [r7, #10]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fc47 	bl	8002612 <intToFp>
 8004d84:	4604      	mov	r4, r0
 8004d86:	200d      	movs	r0, #13
 8004d88:	f7fd fc43 	bl	8002612 <intToFp>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7fd fc95 	bl	80026c0 <fpDivide>
 8004d96:	60f8      	str	r0, [r7, #12]
	if(fpToInt(x) <= 1){
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7fd fc4f 	bl	800263c <fpToInt>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	dc03      	bgt.n	8004dac <updateSpaceship+0x40>
		x = intToFp(2);
 8004da4:	2002      	movs	r0, #2
 8004da6:	f7fd fc34 	bl	8002612 <intToFp>
 8004daa:	60f8      	str	r0, [r7, #12]
	}
	if(fpToInt(x) >= 156){
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7fd fc45 	bl	800263c <fpToInt>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b9b      	cmp	r3, #155	; 0x9b
 8004db6:	dd03      	ble.n	8004dc0 <updateSpaceship+0x54>
		x = intToFp(155);
 8004db8:	209b      	movs	r0, #155	; 0x9b
 8004dba:	f7fd fc2a 	bl	8002612 <intToFp>
 8004dbe:	60f8      	str	r0, [r7, #12]
	}
	gameState->spaceship.nextPosition.x = x;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	615a      	str	r2, [r3, #20]

}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd90      	pop	{r4, r7, pc}
	...

08004dd0 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b09e      	sub	sp, #120	; 0x78
 8004dd4:	af04      	add	r7, sp, #16
 8004dd6:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8004dd8:	f7fc fe66 	bl	8001aa8 <centerIsPressed>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80a9 	beq.w	8004f36 <shootSpaceship+0x166>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 8004de4:	4b56      	ldr	r3, [pc, #344]	; (8004f40 <shootSpaceship+0x170>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]

		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004dec:	2300      	movs	r3, #0
 8004dee:	667b      	str	r3, [r7, #100]	; 0x64
 8004df0:	e09a      	b.n	8004f28 <shootSpaceship+0x158>
			if(i ==2){
 8004df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d147      	bne.n	8004e88 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f7fd fc0a 	bl	8002612 <intToFp>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e02:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <shootSpaceship+0x174>)
 8004e04:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68dc      	ldr	r4, [r3, #12]
 8004e0a:	2007      	movs	r0, #7
 8004e0c:	f7fd fc01 	bl	8002612 <intToFp>
 8004e10:	4603      	mov	r3, r0
 8004e12:	1ae3      	subs	r3, r4, r3
 8004e14:	657b      	str	r3, [r7, #84]	; 0x54
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691c      	ldr	r4, [r3, #16]
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7fd fbf9 	bl	8002612 <intToFp>
 8004e20:	4603      	mov	r3, r0
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	1ae3      	subs	r3, r4, r3
 8004e26:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8004e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	611a      	str	r2, [r3, #16]
 8004e38:	615a      	str	r2, [r3, #20]
 8004e3a:	619a      	str	r2, [r3, #24]
 8004e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e48:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e60:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e68:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8004e6c:	687d      	ldr	r5, [r7, #4]
 8004e6e:	466c      	mov	r4, sp
 8004e70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e80:	4628      	mov	r0, r5
 8004e82:	f7fe ff53 	bl	8003d2c <appendBullet>
 8004e86:	e04c      	b.n	8004f22 <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7fd fbc2 	bl	8002612 <intToFp>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <shootSpaceship+0x174>)
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68dc      	ldr	r4, [r3, #12]
 8004e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	00d2      	lsls	r2, r2, #3
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd fbb3 	bl	8002612 <intToFp>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4423      	add	r3, r4
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691c      	ldr	r4, [r3, #16]
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7fd fbab 	bl	8002612 <intToFp>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	1ae3      	subs	r3, r4, r3
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
 8004ed4:	615a      	str	r2, [r3, #20]
 8004ed6:	619a      	str	r2, [r3, #24]
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ef4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ef8:	f107 031c 	add.w	r3, r7, #28
 8004efc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f04:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8004f08:	687d      	ldr	r5, [r7, #4]
 8004f0a:	466c      	mov	r4, sp
 8004f0c:	f107 0318 	add.w	r3, r7, #24
 8004f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004f16:	f107 030c 	add.w	r3, r7, #12
 8004f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f7fe ff05 	bl	8003d2c <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f24:	3301      	adds	r3, #1
 8004f26:	667b      	str	r3, [r7, #100]	; 0x64
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	7f1b      	ldrb	r3, [r3, #28]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f30:	4293      	cmp	r3, r2
 8004f32:	f6ff af5e 	blt.w	8004df2 <shootSpaceship+0x22>
		}
>>>>>>> Stashed changes


		vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 800446a:	2000      	movs	r0, #0
 800446c:	f7fe fb3e 	bl	8002aec <intToFp>
 8004470:	4603      	mov	r3, r0
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
 8004474:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <shootSpaceship+0x98>)
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691c      	ldr	r4, [r3, #16]
 8004482:	2001      	movs	r0, #1
 8004484:	f7fe fb32 	bl	8002aec <intToFp>
 8004488:	4603      	mov	r3, r0
 800448a:	1ae3      	subs	r3, r4, r3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	f107 0220 	add.w	r2, r7, #32
 8004496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800449a:	e883 0003 	stmia.w	r3, {r0, r1}
 800449e:	f107 0310 	add.w	r3, r7, #16
 80044a2:	f107 0220 	add.w	r2, r7, #32
 80044a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80044ae:	f107 0318 	add.w	r3, r7, #24
 80044b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ba:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 80044be:	687d      	ldr	r5, [r7, #4]
 80044c0:	466c      	mov	r4, sp
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044d4:	4628      	mov	r0, r5
 80044d6:	f7ff fa25 	bl	8003924 <appendBullet>
	}
}
<<<<<<< Updated upstream
 80044da:	bf00      	nop
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bdb0      	pop	{r4, r5, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200001cc 	.word	0x200001cc
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <_getpid>:
=======
 8004f36:	bf00      	nop
 8004f38:	3768      	adds	r7, #104	; 0x68
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200001c8 	.word	0x200001c8
 8004f44:	ffff0000 	.word	0xffff0000

08004f48 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fd fb71 	bl	800263c <fpToInt>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b2dc      	uxtb	r4, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd fb6a 	bl	800263c <fpToInt>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	0fda      	lsrs	r2, r3, #31
 8004f6c:	4413      	add	r3, r2
 8004f6e:	105b      	asrs	r3, r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	4619      	mov	r1, r3
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7fe faf9 	bl	800356c <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fb5c 	bl	800263c <fpToInt>
 8004f84:	4603      	mov	r3, r0
 8004f86:	b2dc      	uxtb	r4, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fb55 	bl	800263c <fpToInt>
 8004f92:	4603      	mov	r3, r0
 8004f94:	0fda      	lsrs	r2, r3, #31
 8004f96:	4413      	add	r3, r2
 8004f98:	105b      	asrs	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7fe fac2 	bl	8003528 <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e06e      	b.n	8005088 <drawSpaceship+0x140>

		if(i == 2){
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d12e      	bne.n	800500e <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fd fb41 	bl	800263c <fpToInt>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	3b07      	subs	r3, #7
 8004fc0:	b2dc      	uxtb	r4, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fd fb38 	bl	800263c <fpToInt>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	0fda      	lsrs	r2, r3, #31
 8004fd0:	4413      	add	r3, r2
 8004fd2:	105b      	asrs	r3, r3, #1
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7fe fa5c 	bl	8003496 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd fb2a 	bl	800263c <fpToInt>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3b07      	subs	r3, #7
 8004fee:	b2dc      	uxtb	r4, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd fb21 	bl	800263c <fpToInt>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	0fda      	lsrs	r2, r3, #31
 8004ffe:	4413      	add	r3, r2
 8005000:	105b      	asrs	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4619      	mov	r1, r3
 8005006:	4620      	mov	r0, r4
 8005008:	f7fe f9fc 	bl	8003404 <drawMe>
 800500c:	e039      	b.n	8005082 <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fd fb12 	bl	800263c <fpToInt>
 8005018:	4603      	mov	r3, r0
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	4619      	mov	r1, r3
 8005022:	00c9      	lsls	r1, r1, #3
 8005024:	1acb      	subs	r3, r1, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4413      	add	r3, r2
 800502a:	b2dc      	uxtb	r4, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fd fb03 	bl	800263c <fpToInt>
 8005036:	4603      	mov	r3, r0
 8005038:	0fda      	lsrs	r2, r3, #31
 800503a:	4413      	add	r3, r2
 800503c:	105b      	asrs	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	4619      	mov	r1, r3
 8005042:	4620      	mov	r0, r4
 8005044:	f7fe fa27 	bl	8003496 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd faf5 	bl	800263c <fpToInt>
 8005052:	4603      	mov	r3, r0
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	00c9      	lsls	r1, r1, #3
 800505e:	1acb      	subs	r3, r1, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4413      	add	r3, r2
 8005064:	b2dc      	uxtb	r4, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fae6 	bl	800263c <fpToInt>
 8005070:	4603      	mov	r3, r0
 8005072:	0fda      	lsrs	r2, r3, #31
 8005074:	4413      	add	r3, r2
 8005076:	105b      	asrs	r3, r3, #1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	4619      	mov	r1, r3
 800507c:	4620      	mov	r0, r4
 800507e:	f7fe f9c1 	bl	8003404 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	7f1b      	ldrb	r3, [r3, #28]
 800508c:	461a      	mov	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4293      	cmp	r3, r2
 8005092:	db8a      	blt.n	8004faa <drawSpaceship+0x62>

	}



	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	330c      	adds	r3, #12
 800509a:	3214      	adds	r2, #20
 800509c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd90      	pop	{r4, r7, pc}

080050ac <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
	return 1;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_kill>:

int _kill(int pid, int sig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004506:	f000 f94f 	bl	80047a8 <__errno>
 800450a:	4603      	mov	r3, r0
 800450c:	2216      	movs	r2, #22
 800450e:	601a      	str	r2, [r3, #0]
	return -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_exit>:

void _exit (int status)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffe7 	bl	80044fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800452e:	e7fe      	b.n	800452e <_exit+0x12>

08004530 <_read>:
=======
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	return 1;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <_kill>:

int _kill(int pid, int sig)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050c6:	f000 f94f 	bl	8005368 <__errno>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2216      	movs	r2, #22
 80050ce:	601a      	str	r2, [r3, #0]
	return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_exit>:

void _exit (int status)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80050ee:	e7fe      	b.n	80050ee <_exit+0x12>

080050f0 <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e00a      	b.n	8004558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004542:	f3af 8000 	nop.w
 8004546:	4601      	mov	r1, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	60ba      	str	r2, [r7, #8]
 800454e:	b2ca      	uxtb	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3301      	adds	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	dbf0      	blt.n	8004542 <_read+0x12>
	}

return len;
 8004560:	687b      	ldr	r3, [r7, #4]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <_close>:
=======
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e00a      	b.n	8005118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005102:	f3af 8000 	nop.w
 8005106:	4601      	mov	r1, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	60ba      	str	r2, [r7, #8]
 800510e:	b2ca      	uxtb	r2, r1
 8005110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	3301      	adds	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	dbf0      	blt.n	8005102 <_read+0x12>
	}

return len;
 8005120:	687b      	ldr	r3, [r7, #4]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_close>:
>>>>>>> Stashed changes
	}
	return len;
}

int _close(int file)
{
<<<<<<< Updated upstream
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
	return -1;
 8004572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <_fstat>:
=======
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	return -1;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004592:	605a      	str	r2, [r3, #4]
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <_isatty>:

int _isatty(int file)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	return 1;
 80045aa:	2301      	movs	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <_sbrk>:
=======
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005152:	605a      	str	r2, [r3, #4]
	return 0;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <_isatty>:

int _isatty(int file)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	return 1;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
	return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <_sbrk>:
>>>>>>> Stashed changes
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< Updated upstream
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
=======
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< Updated upstream
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <_sbrk+0x50>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <_sbrk+0x16>
		heap_end = &end;
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <_sbrk+0x50>)
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <_sbrk+0x54>)
 80045e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <_sbrk+0x50>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <_sbrk+0x50>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	466a      	mov	r2, sp
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d907      	bls.n	800460e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80045fe:	f000 f8d3 	bl	80047a8 <__errno>
 8004602:	4603      	mov	r3, r0
 8004604:	220c      	movs	r2, #12
 8004606:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800460c:	e006      	b.n	800461c <_sbrk+0x48>
	}

	heap_end += incr;
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <_sbrk+0x50>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	4a03      	ldr	r2, [pc, #12]	; (8004624 <_sbrk+0x50>)
 8004618:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200001c0 	.word	0x200001c0
 8004628:	200001e0 	.word	0x200001e0

0800462c <SystemInit>:
=======
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <_sbrk+0x50>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <_sbrk+0x16>
		heap_end = &end;
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <_sbrk+0x50>)
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <_sbrk+0x54>)
 80051a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051aa:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <_sbrk+0x50>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <_sbrk+0x50>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	466a      	mov	r2, sp
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d907      	bls.n	80051ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80051be:	f000 f8d3 	bl	8005368 <__errno>
 80051c2:	4603      	mov	r3, r0
 80051c4:	220c      	movs	r2, #12
 80051c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051cc:	e006      	b.n	80051dc <_sbrk+0x48>
	}

	heap_end += incr;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <_sbrk+0x50>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <_sbrk+0x50>)
 80051d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200001bc 	.word	0x200001bc
 80051e8:	200001e0 	.word	0x200001e0

080051ec <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <SystemInit+0x84>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <SystemInit+0x84>)
 8004638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800463c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051f0:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <SystemInit+0x84>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <SystemInit+0x84>)
 80051f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
<<<<<<< Updated upstream
 8004640:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <SystemInit+0x88>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <SystemInit+0x88>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <SystemInit+0x88>)
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4918      	ldr	r1, [pc, #96]	; (80046b4 <SystemInit+0x88>)
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <SystemInit+0x8c>)
 8004654:	4013      	ands	r3, r2
 8004656:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <SystemInit+0x88>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <SystemInit+0x88>)
 800465e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <SystemInit+0x88>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <SystemInit+0x88>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <SystemInit+0x88>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <SystemInit+0x88>)
 800467a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800467e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <SystemInit+0x88>)
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <SystemInit+0x88>)
 8004686:	f023 030f 	bic.w	r3, r3, #15
 800468a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <SystemInit+0x88>)
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	4908      	ldr	r1, [pc, #32]	; (80046b4 <SystemInit+0x88>)
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <SystemInit+0x90>)
 8004694:	4013      	ands	r3, r2
 8004696:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <SystemInit+0x88>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
=======
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <SystemInit+0x88>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <SystemInit+0x88>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <SystemInit+0x88>)
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4918      	ldr	r1, [pc, #96]	; (8005274 <SystemInit+0x88>)
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <SystemInit+0x8c>)
 8005214:	4013      	ands	r3, r2
 8005216:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <SystemInit+0x88>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a15      	ldr	r2, [pc, #84]	; (8005274 <SystemInit+0x88>)
 800521e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005226:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <SystemInit+0x88>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <SystemInit+0x88>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005232:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005234:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <SystemInit+0x88>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <SystemInit+0x88>)
 800523a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800523e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <SystemInit+0x88>)
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <SystemInit+0x88>)
 8005246:	f023 030f 	bic.w	r3, r3, #15
 800524a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <SystemInit+0x88>)
 800524e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005250:	4908      	ldr	r1, [pc, #32]	; (8005274 <SystemInit+0x88>)
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <SystemInit+0x90>)
 8005254:	4013      	ands	r3, r2
 8005256:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <SystemInit+0x88>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
<<<<<<< Updated upstream
 800469e:	f000 f80f 	bl	80046c0 <SetSysClock>
=======
 800525e:	f000 f80f 	bl	8005280 <SetSysClock>
>>>>>>> Stashed changes
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
<<<<<<< Updated upstream
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <SystemInit+0x84>)
 80046a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a8:	609a      	str	r2, [r3, #8]
#endif  
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00
 80046b4:	40021000 	.word	0x40021000
 80046b8:	f87fc00c 	.word	0xf87fc00c
 80046bc:	ff00fccc 	.word	0xff00fccc

080046c0 <SetSysClock>:
=======
 8005262:	4b03      	ldr	r3, [pc, #12]	; (8005270 <SystemInit+0x84>)
 8005264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005268:	609a      	str	r2, [r3, #8]
#endif  
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00
 8005274:	40021000 	.word	0x40021000
 8005278:	f87fc00c 	.word	0xf87fc00c
 800527c:	ff00fccc 	.word	0xff00fccc

08005280 <SetSysClock>:
>>>>>>> Stashed changes
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
<<<<<<< Updated upstream
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
=======
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
<<<<<<< Updated upstream
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <SetSysClock+0x8c>)
 80046c6:	2212      	movs	r2, #18
 80046c8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80046ca:	4b21      	ldr	r3, [pc, #132]	; (8004750 <SetSysClock+0x90>)
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <SetSysClock+0x90>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80046d2:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <SetSysClock+0x90>)
 80046d4:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <SetSysClock+0x90>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <SetSysClock+0x90>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <SetSysClock+0x90>)
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <SetSysClock+0x90>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <SetSysClock+0x90>)
 80046ec:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80046f0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <SetSysClock+0x90>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <SetSysClock+0x90>)
 80046f8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80046fc:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <SetSysClock+0x90>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <SetSysClock+0x90>)
 8004704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004708:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800470a:	bf00      	nop
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <SetSysClock+0x90>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f9      	beq.n	800470c <SetSysClock+0x4c>
=======
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <SetSysClock+0x8c>)
 8005286:	2212      	movs	r2, #18
 8005288:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <SetSysClock+0x90>)
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <SetSysClock+0x90>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005292:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <SetSysClock+0x90>)
 8005294:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <SetSysClock+0x90>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <SetSysClock+0x90>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <SetSysClock+0x90>)
 80052a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <SetSysClock+0x90>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <SetSysClock+0x90>)
 80052ac:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80052b0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <SetSysClock+0x90>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <SetSysClock+0x90>)
 80052b8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80052bc:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <SetSysClock+0x90>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <SetSysClock+0x90>)
 80052c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80052ca:	bf00      	nop
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <SetSysClock+0x90>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f9      	beq.n	80052cc <SetSysClock+0x4c>
>>>>>>> Stashed changes
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
<<<<<<< Updated upstream
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <SetSysClock+0x90>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <SetSysClock+0x90>)
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <SetSysClock+0x90>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <SetSysClock+0x90>)
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8004730:	bf00      	nop
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <SetSysClock+0x90>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d1f9      	bne.n	8004732 <SetSysClock+0x72>
  {
  }
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40022000 	.word	0x40022000
 8004750:	40021000 	.word	0x40021000

08004754 <Reset_Handler>:
=======
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <SetSysClock+0x90>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a0c      	ldr	r2, [pc, #48]	; (8005310 <SetSysClock+0x90>)
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <SetSysClock+0x90>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <SetSysClock+0x90>)
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80052f0:	bf00      	nop
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <SetSysClock+0x90>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d1f9      	bne.n	80052f2 <SetSysClock+0x72>
  {
  }
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40022000 	.word	0x40022000
 8005310:	40021000 	.word	0x40021000

08005314 <Reset_Handler>:
>>>>>>> Stashed changes

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8004754:	480d      	ldr	r0, [pc, #52]	; (800478c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <LoopForever+0x6>)
  ldr r1, =_edata
 800475a:	490e      	ldr	r1, [pc, #56]	; (8004794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800475c:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <LoopForever+0xe>)
  movs r3, #0
 800475e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004760:	e002      	b.n	8004768 <LoopCopyDataInit>

08004762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004766:	3304      	adds	r3, #4

08004768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800476a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800476c:	d3f9      	bcc.n	8004762 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004770:	4c0b      	ldr	r4, [pc, #44]	; (80047a0 <LoopForever+0x16>)
  movs r3, #0
 8004772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004774:	e001      	b.n	800477a <LoopFillZerobss>

08004776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004778:	3204      	adds	r2, #4

0800477a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800477a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800477c:	d3fb      	bcc.n	8004776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800477e:	f7ff ff55 	bl	800462c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004782:	f000 f817 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004786:	f7ff fb39 	bl	8003dfc <main>

0800478a <LoopForever>:

LoopForever:
    b LoopForever
 800478a:	e7fe      	b.n	800478a <LoopForever>
  ldr   r0, =_estack
 800478c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004794:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004798:	08005fc4 	.word	0x08005fc4
  ldr r2, =_sbss
 800479c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80047a0:	200001e0 	.word	0x200001e0

080047a4 <ADC1_2_IRQHandler>:
=======
 8005314:	480d      	ldr	r0, [pc, #52]	; (800534c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005316:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <LoopForever+0x6>)
  ldr r1, =_edata
 800531a:	490e      	ldr	r1, [pc, #56]	; (8005354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800531c:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <LoopForever+0xe>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005320:	e002      	b.n	8005328 <LoopCopyDataInit>

08005322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005326:	3304      	adds	r3, #4

08005328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800532a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800532c:	d3f9      	bcc.n	8005322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800532e:	4a0b      	ldr	r2, [pc, #44]	; (800535c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005330:	4c0b      	ldr	r4, [pc, #44]	; (8005360 <LoopForever+0x16>)
  movs r3, #0
 8005332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005334:	e001      	b.n	800533a <LoopFillZerobss>

08005336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005338:	3204      	adds	r2, #4

0800533a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800533a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800533c:	d3fb      	bcc.n	8005336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800533e:	f7ff ff55 	bl	80051ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005342:	f000 f817 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005346:	f7fe ff81 	bl	800424c <main>

0800534a <LoopForever>:

LoopForever:
    b LoopForever
 800534a:	e7fe      	b.n	800534a <LoopForever>
  ldr   r0, =_estack
 800534c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005354:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8005358:	08006f14 	.word	0x08006f14
  ldr r2, =_sbss
 800535c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005360:	200001dc 	.word	0x200001dc

08005364 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< Updated upstream
 80047a4:	e7fe      	b.n	80047a4 <ADC1_2_IRQHandler>
	...

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000002c 	.word	0x2000002c

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f001 fa72 	bl	8005cb0 <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08005fbc 	.word	0x08005fbc
 80047f0:	08005fbc 	.word	0x08005fbc
 80047f4:	08005fbc 	.word	0x08005fbc
 80047f8:	08005fc0 	.word	0x08005fc0

080047fc <malloc>:
 80047fc:	4b02      	ldr	r3, [pc, #8]	; (8004808 <malloc+0xc>)
 80047fe:	4601      	mov	r1, r0
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f000 b863 	b.w	80048cc <_malloc_r>
 8004806:	bf00      	nop
 8004808:	2000002c 	.word	0x2000002c

0800480c <free>:
 800480c:	4b02      	ldr	r3, [pc, #8]	; (8004818 <free+0xc>)
 800480e:	4601      	mov	r1, r0
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f000 b80b 	b.w	800482c <_free_r>
 8004816:	bf00      	nop
 8004818:	2000002c 	.word	0x2000002c

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <_free_r>:
 800482c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800482e:	2900      	cmp	r1, #0
 8004830:	d048      	beq.n	80048c4 <_free_r+0x98>
 8004832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004836:	9001      	str	r0, [sp, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f1a1 0404 	sub.w	r4, r1, #4
 800483e:	bfb8      	it	lt
 8004840:	18e4      	addlt	r4, r4, r3
 8004842:	f000 fc65 	bl	8005110 <__malloc_lock>
 8004846:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <_free_r+0x9c>)
 8004848:	9801      	ldr	r0, [sp, #4]
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	4615      	mov	r5, r2
 800484e:	b933      	cbnz	r3, 800485e <_free_r+0x32>
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	6014      	str	r4, [r2, #0]
 8004854:	b003      	add	sp, #12
 8004856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800485a:	f000 bc5f 	b.w	800511c <__malloc_unlock>
 800485e:	42a3      	cmp	r3, r4
 8004860:	d90b      	bls.n	800487a <_free_r+0x4e>
 8004862:	6821      	ldr	r1, [r4, #0]
 8004864:	1862      	adds	r2, r4, r1
 8004866:	4293      	cmp	r3, r2
 8004868:	bf04      	itt	eq
 800486a:	681a      	ldreq	r2, [r3, #0]
 800486c:	685b      	ldreq	r3, [r3, #4]
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	bf04      	itt	eq
 8004872:	1852      	addeq	r2, r2, r1
 8004874:	6022      	streq	r2, [r4, #0]
 8004876:	602c      	str	r4, [r5, #0]
 8004878:	e7ec      	b.n	8004854 <_free_r+0x28>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x58>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x4e>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1855      	adds	r5, r2, r1
 8004888:	42a5      	cmp	r5, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x78>
 800488c:	6824      	ldr	r4, [r4, #0]
 800488e:	4421      	add	r1, r4
 8004890:	1854      	adds	r4, r2, r1
 8004892:	42a3      	cmp	r3, r4
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1dd      	bne.n	8004854 <_free_r+0x28>
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	4421      	add	r1, r4
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	e7d7      	b.n	8004854 <_free_r+0x28>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x80>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6003      	str	r3, [r0, #0]
 80048aa:	e7d3      	b.n	8004854 <_free_r+0x28>
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1961      	adds	r1, r4, r5
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1949      	addeq	r1, r1, r5
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	6054      	str	r4, [r2, #4]
 80048c2:	e7c7      	b.n	8004854 <_free_r+0x28>
 80048c4:	b003      	add	sp, #12
 80048c6:	bd30      	pop	{r4, r5, pc}
 80048c8:	200001c4 	.word	0x200001c4

080048cc <_malloc_r>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	1ccd      	adds	r5, r1, #3
 80048d0:	f025 0503 	bic.w	r5, r5, #3
 80048d4:	3508      	adds	r5, #8
 80048d6:	2d0c      	cmp	r5, #12
 80048d8:	bf38      	it	cc
 80048da:	250c      	movcc	r5, #12
 80048dc:	2d00      	cmp	r5, #0
 80048de:	4606      	mov	r6, r0
 80048e0:	db01      	blt.n	80048e6 <_malloc_r+0x1a>
 80048e2:	42a9      	cmp	r1, r5
 80048e4:	d903      	bls.n	80048ee <_malloc_r+0x22>
 80048e6:	230c      	movs	r3, #12
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	2000      	movs	r0, #0
 80048ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ee:	f000 fc0f 	bl	8005110 <__malloc_lock>
 80048f2:	4921      	ldr	r1, [pc, #132]	; (8004978 <_malloc_r+0xac>)
 80048f4:	680a      	ldr	r2, [r1, #0]
 80048f6:	4614      	mov	r4, r2
 80048f8:	b99c      	cbnz	r4, 8004922 <_malloc_r+0x56>
 80048fa:	4f20      	ldr	r7, [pc, #128]	; (800497c <_malloc_r+0xb0>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b923      	cbnz	r3, 800490a <_malloc_r+0x3e>
 8004900:	4621      	mov	r1, r4
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f8d8 	bl	8004ab8 <_sbrk_r>
 8004908:	6038      	str	r0, [r7, #0]
 800490a:	4629      	mov	r1, r5
 800490c:	4630      	mov	r0, r6
 800490e:	f000 f8d3 	bl	8004ab8 <_sbrk_r>
 8004912:	1c43      	adds	r3, r0, #1
 8004914:	d123      	bne.n	800495e <_malloc_r+0x92>
 8004916:	230c      	movs	r3, #12
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	4630      	mov	r0, r6
 800491c:	f000 fbfe 	bl	800511c <__malloc_unlock>
 8004920:	e7e3      	b.n	80048ea <_malloc_r+0x1e>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	1b5b      	subs	r3, r3, r5
 8004926:	d417      	bmi.n	8004958 <_malloc_r+0x8c>
 8004928:	2b0b      	cmp	r3, #11
 800492a:	d903      	bls.n	8004934 <_malloc_r+0x68>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	441c      	add	r4, r3
 8004930:	6025      	str	r5, [r4, #0]
 8004932:	e004      	b.n	800493e <_malloc_r+0x72>
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	42a2      	cmp	r2, r4
 8004938:	bf0c      	ite	eq
 800493a:	600b      	streq	r3, [r1, #0]
 800493c:	6053      	strne	r3, [r2, #4]
 800493e:	4630      	mov	r0, r6
 8004940:	f000 fbec 	bl	800511c <__malloc_unlock>
 8004944:	f104 000b 	add.w	r0, r4, #11
 8004948:	1d23      	adds	r3, r4, #4
 800494a:	f020 0007 	bic.w	r0, r0, #7
 800494e:	1ac2      	subs	r2, r0, r3
 8004950:	d0cc      	beq.n	80048ec <_malloc_r+0x20>
 8004952:	1a1b      	subs	r3, r3, r0
 8004954:	50a3      	str	r3, [r4, r2]
 8004956:	e7c9      	b.n	80048ec <_malloc_r+0x20>
 8004958:	4622      	mov	r2, r4
 800495a:	6864      	ldr	r4, [r4, #4]
 800495c:	e7cc      	b.n	80048f8 <_malloc_r+0x2c>
 800495e:	1cc4      	adds	r4, r0, #3
 8004960:	f024 0403 	bic.w	r4, r4, #3
 8004964:	42a0      	cmp	r0, r4
 8004966:	d0e3      	beq.n	8004930 <_malloc_r+0x64>
 8004968:	1a21      	subs	r1, r4, r0
 800496a:	4630      	mov	r0, r6
 800496c:	f000 f8a4 	bl	8004ab8 <_sbrk_r>
 8004970:	3001      	adds	r0, #1
 8004972:	d1dd      	bne.n	8004930 <_malloc_r+0x64>
 8004974:	e7cf      	b.n	8004916 <_malloc_r+0x4a>
 8004976:	bf00      	nop
 8004978:	200001c4 	.word	0x200001c4
 800497c:	200001c8 	.word	0x200001c8

08004980 <iprintf>:
 8004980:	b40f      	push	{r0, r1, r2, r3}
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <iprintf+0x2c>)
 8004984:	b513      	push	{r0, r1, r4, lr}
 8004986:	681c      	ldr	r4, [r3, #0]
 8004988:	b124      	cbz	r4, 8004994 <iprintf+0x14>
 800498a:	69a3      	ldr	r3, [r4, #24]
 800498c:	b913      	cbnz	r3, 8004994 <iprintf+0x14>
 800498e:	4620      	mov	r0, r4
 8004990:	f000 faa8 	bl	8004ee4 <__sinit>
 8004994:	ab05      	add	r3, sp, #20
 8004996:	9a04      	ldr	r2, [sp, #16]
 8004998:	68a1      	ldr	r1, [r4, #8]
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	4620      	mov	r0, r4
 800499e:	f000 fbed 	bl	800517c <_vfiprintf_r>
 80049a2:	b002      	add	sp, #8
 80049a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a8:	b004      	add	sp, #16
 80049aa:	4770      	bx	lr
 80049ac:	2000002c 	.word	0x2000002c

080049b0 <putchar>:
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <putchar+0x28>)
 80049b2:	b513      	push	{r0, r1, r4, lr}
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	4601      	mov	r1, r0
 80049b8:	b134      	cbz	r4, 80049c8 <putchar+0x18>
 80049ba:	69a3      	ldr	r3, [r4, #24]
 80049bc:	b923      	cbnz	r3, 80049c8 <putchar+0x18>
 80049be:	9001      	str	r0, [sp, #4]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fa8f 	bl	8004ee4 <__sinit>
 80049c6:	9901      	ldr	r1, [sp, #4]
 80049c8:	68a2      	ldr	r2, [r4, #8]
 80049ca:	4620      	mov	r0, r4
 80049cc:	b002      	add	sp, #8
 80049ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d2:	f000 be97 	b.w	8005704 <_putc_r>
 80049d6:	bf00      	nop
 80049d8:	2000002c 	.word	0x2000002c

080049dc <srand>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <srand+0x44>)
 80049e0:	681d      	ldr	r5, [r3, #0]
 80049e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80049e4:	4604      	mov	r4, r0
 80049e6:	b9b3      	cbnz	r3, 8004a16 <srand+0x3a>
 80049e8:	2018      	movs	r0, #24
 80049ea:	f7ff ff07 	bl	80047fc <malloc>
 80049ee:	4602      	mov	r2, r0
 80049f0:	63a8      	str	r0, [r5, #56]	; 0x38
 80049f2:	b920      	cbnz	r0, 80049fe <srand+0x22>
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <srand+0x48>)
 80049f6:	480c      	ldr	r0, [pc, #48]	; (8004a28 <srand+0x4c>)
 80049f8:	2142      	movs	r1, #66	; 0x42
 80049fa:	f000 f93b 	bl	8004c74 <__assert_func>
 80049fe:	490b      	ldr	r1, [pc, #44]	; (8004a2c <srand+0x50>)
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <srand+0x54>)
 8004a02:	e9c0 1300 	strd	r1, r3, [r0]
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <srand+0x58>)
 8004a08:	6083      	str	r3, [r0, #8]
 8004a0a:	230b      	movs	r3, #11
 8004a0c:	8183      	strh	r3, [r0, #12]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2001      	movs	r0, #1
 8004a12:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a16:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a18:	2200      	movs	r2, #0
 8004a1a:	611c      	str	r4, [r3, #16]
 8004a1c:	615a      	str	r2, [r3, #20]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	2000002c 	.word	0x2000002c
 8004a24:	08005e6c 	.word	0x08005e6c
 8004a28:	08005e83 	.word	0x08005e83
 8004a2c:	abcd330e 	.word	0xabcd330e
 8004a30:	e66d1234 	.word	0xe66d1234
 8004a34:	0005deec 	.word	0x0005deec

08004a38 <rand>:
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <rand+0x60>)
 8004a3a:	b510      	push	{r4, lr}
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a40:	b9b3      	cbnz	r3, 8004a70 <rand+0x38>
 8004a42:	2018      	movs	r0, #24
 8004a44:	f7ff feda 	bl	80047fc <malloc>
 8004a48:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a4a:	b928      	cbnz	r0, 8004a58 <rand+0x20>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <rand+0x64>)
 8004a50:	4813      	ldr	r0, [pc, #76]	; (8004aa0 <rand+0x68>)
 8004a52:	214e      	movs	r1, #78	; 0x4e
 8004a54:	f000 f90e 	bl	8004c74 <__assert_func>
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <rand+0x6c>)
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <rand+0x70>)
 8004a5c:	e9c0 2300 	strd	r2, r3, [r0]
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <rand+0x74>)
 8004a62:	6083      	str	r3, [r0, #8]
 8004a64:	230b      	movs	r3, #11
 8004a66:	8183      	strh	r3, [r0, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004a70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a72:	480f      	ldr	r0, [pc, #60]	; (8004ab0 <rand+0x78>)
 8004a74:	690a      	ldr	r2, [r1, #16]
 8004a76:	694b      	ldr	r3, [r1, #20]
 8004a78:	4c0e      	ldr	r4, [pc, #56]	; (8004ab4 <rand+0x7c>)
 8004a7a:	4350      	muls	r0, r2
 8004a7c:	fb04 0003 	mla	r0, r4, r3, r0
 8004a80:	fba2 3404 	umull	r3, r4, r2, r4
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	4404      	add	r4, r0
 8004a88:	f144 0000 	adc.w	r0, r4, #0
 8004a8c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004a90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	2000002c 	.word	0x2000002c
 8004a9c:	08005e6c 	.word	0x08005e6c
 8004aa0:	08005e83 	.word	0x08005e83
 8004aa4:	abcd330e 	.word	0xabcd330e
 8004aa8:	e66d1234 	.word	0xe66d1234
 8004aac:	0005deec 	.word	0x0005deec
 8004ab0:	5851f42d 	.word	0x5851f42d
 8004ab4:	4c957f2d 	.word	0x4c957f2d

08004ab8 <_sbrk_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	; (8004ad4 <_sbrk_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7ff fd86 	bl	80045d4 <_sbrk>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_sbrk_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_sbrk_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	200001dc 	.word	0x200001dc

08004ad8 <setbuf>:
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ade:	bf0c      	ite	eq
 8004ae0:	2202      	moveq	r2, #2
 8004ae2:	2200      	movne	r2, #0
 8004ae4:	f000 b800 	b.w	8004ae8 <setvbuf>

08004ae8 <setvbuf>:
 8004ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	461d      	mov	r5, r3
 8004aee:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <setvbuf+0x17c>)
 8004af0:	681f      	ldr	r7, [r3, #0]
 8004af2:	4604      	mov	r4, r0
 8004af4:	460e      	mov	r6, r1
 8004af6:	4690      	mov	r8, r2
 8004af8:	b127      	cbz	r7, 8004b04 <setvbuf+0x1c>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	b913      	cbnz	r3, 8004b04 <setvbuf+0x1c>
 8004afe:	4638      	mov	r0, r7
 8004b00:	f000 f9f0 	bl	8004ee4 <__sinit>
 8004b04:	4b58      	ldr	r3, [pc, #352]	; (8004c68 <setvbuf+0x180>)
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d167      	bne.n	8004bda <setvbuf+0xf2>
 8004b0a:	687c      	ldr	r4, [r7, #4]
 8004b0c:	f1b8 0f02 	cmp.w	r8, #2
 8004b10:	d006      	beq.n	8004b20 <setvbuf+0x38>
 8004b12:	f1b8 0f01 	cmp.w	r8, #1
 8004b16:	f200 809f 	bhi.w	8004c58 <setvbuf+0x170>
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	f2c0 809c 	blt.w	8004c58 <setvbuf+0x170>
 8004b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d405      	bmi.n	8004b32 <setvbuf+0x4a>
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	0598      	lsls	r0, r3, #22
 8004b2a:	d402      	bmi.n	8004b32 <setvbuf+0x4a>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f000 fa89 	bl	8005044 <__retarget_lock_acquire_recursive>
 8004b32:	4621      	mov	r1, r4
 8004b34:	4638      	mov	r0, r7
 8004b36:	f000 f941 	bl	8004dbc <_fflush_r>
 8004b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b3c:	b141      	cbz	r1, 8004b50 <setvbuf+0x68>
 8004b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d002      	beq.n	8004b4c <setvbuf+0x64>
 8004b46:	4638      	mov	r0, r7
 8004b48:	f7ff fe70 	bl	800482c <_free_r>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004b50:	2300      	movs	r3, #0
 8004b52:	61a3      	str	r3, [r4, #24]
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	0619      	lsls	r1, r3, #24
 8004b5a:	d503      	bpl.n	8004b64 <setvbuf+0x7c>
 8004b5c:	6921      	ldr	r1, [r4, #16]
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff fe64 	bl	800482c <_free_r>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	f1b8 0f02 	cmp.w	r8, #2
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	d06c      	beq.n	8004c50 <setvbuf+0x168>
 8004b76:	ab01      	add	r3, sp, #4
 8004b78:	466a      	mov	r2, sp
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f000 fa63 	bl	8005048 <__swhatbuf_r>
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	4318      	orrs	r0, r3
 8004b86:	81a0      	strh	r0, [r4, #12]
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	d130      	bne.n	8004bee <setvbuf+0x106>
 8004b8c:	9d00      	ldr	r5, [sp, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7ff fe34 	bl	80047fc <malloc>
 8004b94:	4606      	mov	r6, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d155      	bne.n	8004c46 <setvbuf+0x15e>
 8004b9a:	f8dd 9000 	ldr.w	r9, [sp]
 8004b9e:	45a9      	cmp	r9, r5
 8004ba0:	d14a      	bne.n	8004c38 <setvbuf+0x150>
 8004ba2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60a2      	str	r2, [r4, #8]
 8004baa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004bae:	6022      	str	r2, [r4, #0]
 8004bb0:	6122      	str	r2, [r4, #16]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb8:	6162      	str	r2, [r4, #20]
 8004bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	07d2      	lsls	r2, r2, #31
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	d405      	bmi.n	8004bd2 <setvbuf+0xea>
 8004bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004bca:	d102      	bne.n	8004bd2 <setvbuf+0xea>
 8004bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bce:	f000 fa3a 	bl	8005046 <__retarget_lock_release_recursive>
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <setvbuf+0x184>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d101      	bne.n	8004be4 <setvbuf+0xfc>
 8004be0:	68bc      	ldr	r4, [r7, #8]
 8004be2:	e793      	b.n	8004b0c <setvbuf+0x24>
 8004be4:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <setvbuf+0x188>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	bf08      	it	eq
 8004bea:	68fc      	ldreq	r4, [r7, #12]
 8004bec:	e78e      	b.n	8004b0c <setvbuf+0x24>
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d0cd      	beq.n	8004b8e <setvbuf+0xa6>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	b913      	cbnz	r3, 8004bfc <setvbuf+0x114>
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f000 f974 	bl	8004ee4 <__sinit>
 8004bfc:	f1b8 0f01 	cmp.w	r8, #1
 8004c00:	bf08      	it	eq
 8004c02:	89a3      	ldrheq	r3, [r4, #12]
 8004c04:	6026      	str	r6, [r4, #0]
 8004c06:	bf04      	itt	eq
 8004c08:	f043 0301 	orreq.w	r3, r3, #1
 8004c0c:	81a3      	strheq	r3, [r4, #12]
 8004c0e:	89a2      	ldrh	r2, [r4, #12]
 8004c10:	f012 0308 	ands.w	r3, r2, #8
 8004c14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004c18:	d01c      	beq.n	8004c54 <setvbuf+0x16c>
 8004c1a:	07d3      	lsls	r3, r2, #31
 8004c1c:	bf41      	itttt	mi
 8004c1e:	2300      	movmi	r3, #0
 8004c20:	426d      	negmi	r5, r5
 8004c22:	60a3      	strmi	r3, [r4, #8]
 8004c24:	61a5      	strmi	r5, [r4, #24]
 8004c26:	bf58      	it	pl
 8004c28:	60a5      	strpl	r5, [r4, #8]
 8004c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004c2c:	f015 0501 	ands.w	r5, r5, #1
 8004c30:	d115      	bne.n	8004c5e <setvbuf+0x176>
 8004c32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004c36:	e7c8      	b.n	8004bca <setvbuf+0xe2>
 8004c38:	4648      	mov	r0, r9
 8004c3a:	f7ff fddf 	bl	80047fc <malloc>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d0ae      	beq.n	8004ba2 <setvbuf+0xba>
 8004c44:	464d      	mov	r5, r9
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	e7d0      	b.n	8004bf2 <setvbuf+0x10a>
 8004c50:	2500      	movs	r5, #0
 8004c52:	e7a8      	b.n	8004ba6 <setvbuf+0xbe>
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	e7e8      	b.n	8004c2a <setvbuf+0x142>
 8004c58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c5c:	e7b9      	b.n	8004bd2 <setvbuf+0xea>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	e7b7      	b.n	8004bd2 <setvbuf+0xea>
 8004c62:	bf00      	nop
 8004c64:	2000002c 	.word	0x2000002c
 8004c68:	08005f40 	.word	0x08005f40
 8004c6c:	08005f60 	.word	0x08005f60
 8004c70:	08005f20 	.word	0x08005f20

08004c74 <__assert_func>:
 8004c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c76:	4614      	mov	r4, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <__assert_func+0x2c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	68d8      	ldr	r0, [r3, #12]
 8004c82:	b14c      	cbz	r4, 8004c98 <__assert_func+0x24>
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <__assert_func+0x30>)
 8004c86:	9100      	str	r1, [sp, #0]
 8004c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c8c:	4906      	ldr	r1, [pc, #24]	; (8004ca8 <__assert_func+0x34>)
 8004c8e:	462b      	mov	r3, r5
 8004c90:	f000 f9a6 	bl	8004fe0 <fiprintf>
 8004c94:	f000 fe82 	bl	800599c <abort>
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <__assert_func+0x38>)
 8004c9a:	461c      	mov	r4, r3
 8004c9c:	e7f3      	b.n	8004c86 <__assert_func+0x12>
 8004c9e:	bf00      	nop
 8004ca0:	2000002c 	.word	0x2000002c
 8004ca4:	08005ee2 	.word	0x08005ee2
 8004ca8:	08005eef 	.word	0x08005eef
 8004cac:	08005f1d 	.word	0x08005f1d

08004cb0 <__sflush_r>:
 8004cb0:	898a      	ldrh	r2, [r1, #12]
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	0710      	lsls	r0, r2, #28
 8004cba:	460c      	mov	r4, r1
 8004cbc:	d458      	bmi.n	8004d70 <__sflush_r+0xc0>
 8004cbe:	684b      	ldr	r3, [r1, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dc05      	bgt.n	8004cd0 <__sflush_r+0x20>
 8004cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dc02      	bgt.n	8004cd0 <__sflush_r+0x20>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	d0f9      	beq.n	8004cca <__sflush_r+0x1a>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cdc:	682f      	ldr	r7, [r5, #0]
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	d032      	beq.n	8004d48 <__sflush_r+0x98>
 8004ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	075a      	lsls	r2, r3, #29
 8004ce8:	d505      	bpl.n	8004cf6 <__sflush_r+0x46>
 8004cea:	6863      	ldr	r3, [r4, #4]
 8004cec:	1ac0      	subs	r0, r0, r3
 8004cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf0:	b10b      	cbz	r3, 8004cf6 <__sflush_r+0x46>
 8004cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf4:	1ac0      	subs	r0, r0, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cfc:	6a21      	ldr	r1, [r4, #32]
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b0      	blx	r6
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	d106      	bne.n	8004d16 <__sflush_r+0x66>
 8004d08:	6829      	ldr	r1, [r5, #0]
 8004d0a:	291d      	cmp	r1, #29
 8004d0c:	d82c      	bhi.n	8004d68 <__sflush_r+0xb8>
 8004d0e:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <__sflush_r+0x108>)
 8004d10:	40ca      	lsrs	r2, r1
 8004d12:	07d6      	lsls	r6, r2, #31
 8004d14:	d528      	bpl.n	8004d68 <__sflush_r+0xb8>
 8004d16:	2200      	movs	r2, #0
 8004d18:	6062      	str	r2, [r4, #4]
 8004d1a:	04d9      	lsls	r1, r3, #19
 8004d1c:	6922      	ldr	r2, [r4, #16]
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	d504      	bpl.n	8004d2c <__sflush_r+0x7c>
 8004d22:	1c42      	adds	r2, r0, #1
 8004d24:	d101      	bne.n	8004d2a <__sflush_r+0x7a>
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	b903      	cbnz	r3, 8004d2c <__sflush_r+0x7c>
 8004d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d2e:	602f      	str	r7, [r5, #0]
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d0ca      	beq.n	8004cca <__sflush_r+0x1a>
 8004d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	d002      	beq.n	8004d42 <__sflush_r+0x92>
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f7ff fd75 	bl	800482c <_free_r>
 8004d42:	2000      	movs	r0, #0
 8004d44:	6360      	str	r0, [r4, #52]	; 0x34
 8004d46:	e7c1      	b.n	8004ccc <__sflush_r+0x1c>
 8004d48:	6a21      	ldr	r1, [r4, #32]
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b0      	blx	r6
 8004d50:	1c41      	adds	r1, r0, #1
 8004d52:	d1c7      	bne.n	8004ce4 <__sflush_r+0x34>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0c4      	beq.n	8004ce4 <__sflush_r+0x34>
 8004d5a:	2b1d      	cmp	r3, #29
 8004d5c:	d001      	beq.n	8004d62 <__sflush_r+0xb2>
 8004d5e:	2b16      	cmp	r3, #22
 8004d60:	d101      	bne.n	8004d66 <__sflush_r+0xb6>
 8004d62:	602f      	str	r7, [r5, #0]
 8004d64:	e7b1      	b.n	8004cca <__sflush_r+0x1a>
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	e7ad      	b.n	8004ccc <__sflush_r+0x1c>
 8004d70:	690f      	ldr	r7, [r1, #16]
 8004d72:	2f00      	cmp	r7, #0
 8004d74:	d0a9      	beq.n	8004cca <__sflush_r+0x1a>
 8004d76:	0793      	lsls	r3, r2, #30
 8004d78:	680e      	ldr	r6, [r1, #0]
 8004d7a:	bf08      	it	eq
 8004d7c:	694b      	ldreq	r3, [r1, #20]
 8004d7e:	600f      	str	r7, [r1, #0]
 8004d80:	bf18      	it	ne
 8004d82:	2300      	movne	r3, #0
 8004d84:	eba6 0807 	sub.w	r8, r6, r7
 8004d88:	608b      	str	r3, [r1, #8]
 8004d8a:	f1b8 0f00 	cmp.w	r8, #0
 8004d8e:	dd9c      	ble.n	8004cca <__sflush_r+0x1a>
 8004d90:	6a21      	ldr	r1, [r4, #32]
 8004d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d94:	4643      	mov	r3, r8
 8004d96:	463a      	mov	r2, r7
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b0      	blx	r6
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	dc06      	bgt.n	8004dae <__sflush_r+0xfe>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dac:	e78e      	b.n	8004ccc <__sflush_r+0x1c>
 8004dae:	4407      	add	r7, r0
 8004db0:	eba8 0800 	sub.w	r8, r8, r0
 8004db4:	e7e9      	b.n	8004d8a <__sflush_r+0xda>
 8004db6:	bf00      	nop
 8004db8:	20400001 	.word	0x20400001

08004dbc <_fflush_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	b913      	cbnz	r3, 8004dcc <_fflush_r+0x10>
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	4628      	mov	r0, r5
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	b118      	cbz	r0, 8004dd6 <_fflush_r+0x1a>
 8004dce:	6983      	ldr	r3, [r0, #24]
 8004dd0:	b90b      	cbnz	r3, 8004dd6 <_fflush_r+0x1a>
 8004dd2:	f000 f887 	bl	8004ee4 <__sinit>
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <_fflush_r+0x6c>)
 8004dd8:	429c      	cmp	r4, r3
 8004dda:	d11b      	bne.n	8004e14 <_fflush_r+0x58>
 8004ddc:	686c      	ldr	r4, [r5, #4]
 8004dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ef      	beq.n	8004dc6 <_fflush_r+0xa>
 8004de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004de8:	07d0      	lsls	r0, r2, #31
 8004dea:	d404      	bmi.n	8004df6 <_fflush_r+0x3a>
 8004dec:	0599      	lsls	r1, r3, #22
 8004dee:	d402      	bmi.n	8004df6 <_fflush_r+0x3a>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f000 f927 	bl	8005044 <__retarget_lock_acquire_recursive>
 8004df6:	4628      	mov	r0, r5
 8004df8:	4621      	mov	r1, r4
 8004dfa:	f7ff ff59 	bl	8004cb0 <__sflush_r>
 8004dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e00:	07da      	lsls	r2, r3, #31
 8004e02:	4605      	mov	r5, r0
 8004e04:	d4e0      	bmi.n	8004dc8 <_fflush_r+0xc>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	d4dd      	bmi.n	8004dc8 <_fflush_r+0xc>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0e:	f000 f91a 	bl	8005046 <__retarget_lock_release_recursive>
 8004e12:	e7d9      	b.n	8004dc8 <_fflush_r+0xc>
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <_fflush_r+0x70>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d101      	bne.n	8004e1e <_fflush_r+0x62>
 8004e1a:	68ac      	ldr	r4, [r5, #8]
 8004e1c:	e7df      	b.n	8004dde <_fflush_r+0x22>
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <_fflush_r+0x74>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	bf08      	it	eq
 8004e24:	68ec      	ldreq	r4, [r5, #12]
 8004e26:	e7da      	b.n	8004dde <_fflush_r+0x22>
 8004e28:	08005f40 	.word	0x08005f40
 8004e2c:	08005f60 	.word	0x08005f60
 8004e30:	08005f20 	.word	0x08005f20

08004e34 <std>:
 8004e34:	2300      	movs	r3, #0
 8004e36:	b510      	push	{r4, lr}
 8004e38:	4604      	mov	r4, r0
 8004e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e42:	6083      	str	r3, [r0, #8]
 8004e44:	8181      	strh	r1, [r0, #12]
 8004e46:	6643      	str	r3, [r0, #100]	; 0x64
 8004e48:	81c2      	strh	r2, [r0, #14]
 8004e4a:	6183      	str	r3, [r0, #24]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	2208      	movs	r2, #8
 8004e50:	305c      	adds	r0, #92	; 0x5c
 8004e52:	f7ff fce3 	bl	800481c <memset>
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <std+0x38>)
 8004e58:	6263      	str	r3, [r4, #36]	; 0x24
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x3c>)
 8004e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x40>)
 8004e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x44>)
 8004e64:	6224      	str	r4, [r4, #32]
 8004e66:	6323      	str	r3, [r4, #48]	; 0x30
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08005795 	.word	0x08005795
 8004e70:	080057b7 	.word	0x080057b7
 8004e74:	080057ef 	.word	0x080057ef
 8004e78:	08005813 	.word	0x08005813

08004e7c <_cleanup_r>:
 8004e7c:	4901      	ldr	r1, [pc, #4]	; (8004e84 <_cleanup_r+0x8>)
 8004e7e:	f000 b8c1 	b.w	8005004 <_fwalk_reent>
 8004e82:	bf00      	nop
 8004e84:	08004dbd 	.word	0x08004dbd

08004e88 <__sfmoreglue>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	1e4a      	subs	r2, r1, #1
 8004e8c:	2568      	movs	r5, #104	; 0x68
 8004e8e:	4355      	muls	r5, r2
 8004e90:	460e      	mov	r6, r1
 8004e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e96:	f7ff fd19 	bl	80048cc <_malloc_r>
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	b140      	cbz	r0, 8004eb0 <__sfmoreglue+0x28>
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ea4:	300c      	adds	r0, #12
 8004ea6:	60a0      	str	r0, [r4, #8]
 8004ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eac:	f7ff fcb6 	bl	800481c <memset>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}

08004eb4 <__sfp_lock_acquire>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__sfp_lock_acquire+0x8>)
 8004eb6:	f000 b8c5 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8004eba:	bf00      	nop
 8004ebc:	200001d8 	.word	0x200001d8

08004ec0 <__sfp_lock_release>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__sfp_lock_release+0x8>)
 8004ec2:	f000 b8c0 	b.w	8005046 <__retarget_lock_release_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	200001d8 	.word	0x200001d8

08004ecc <__sinit_lock_acquire>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sinit_lock_acquire+0x8>)
 8004ece:	f000 b8b9 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	200001d3 	.word	0x200001d3

08004ed8 <__sinit_lock_release>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__sinit_lock_release+0x8>)
 8004eda:	f000 b8b4 	b.w	8005046 <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	200001d3 	.word	0x200001d3

08004ee4 <__sinit>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	f7ff fff0 	bl	8004ecc <__sinit_lock_acquire>
 8004eec:	69a3      	ldr	r3, [r4, #24]
 8004eee:	b11b      	cbz	r3, 8004ef8 <__sinit+0x14>
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	f7ff bff0 	b.w	8004ed8 <__sinit_lock_release>
 8004ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004efc:	6523      	str	r3, [r4, #80]	; 0x50
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <__sinit+0x68>)
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <__sinit+0x6c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f06:	42a3      	cmp	r3, r4
 8004f08:	bf04      	itt	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	61a3      	streq	r3, [r4, #24]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 f820 	bl	8004f54 <__sfp>
 8004f14:	6060      	str	r0, [r4, #4]
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 f81c 	bl	8004f54 <__sfp>
 8004f1c:	60a0      	str	r0, [r4, #8]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 f818 	bl	8004f54 <__sfp>
 8004f24:	2200      	movs	r2, #0
 8004f26:	60e0      	str	r0, [r4, #12]
 8004f28:	2104      	movs	r1, #4
 8004f2a:	6860      	ldr	r0, [r4, #4]
 8004f2c:	f7ff ff82 	bl	8004e34 <std>
 8004f30:	68a0      	ldr	r0, [r4, #8]
 8004f32:	2201      	movs	r2, #1
 8004f34:	2109      	movs	r1, #9
 8004f36:	f7ff ff7d 	bl	8004e34 <std>
 8004f3a:	68e0      	ldr	r0, [r4, #12]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2112      	movs	r1, #18
 8004f40:	f7ff ff78 	bl	8004e34 <std>
 8004f44:	2301      	movs	r3, #1
 8004f46:	61a3      	str	r3, [r4, #24]
 8004f48:	e7d2      	b.n	8004ef0 <__sinit+0xc>
 8004f4a:	bf00      	nop
 8004f4c:	08005e68 	.word	0x08005e68
 8004f50:	08004e7d 	.word	0x08004e7d

08004f54 <__sfp>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	4607      	mov	r7, r0
 8004f58:	f7ff ffac 	bl	8004eb4 <__sfp_lock_acquire>
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <__sfp+0x84>)
 8004f5e:	681e      	ldr	r6, [r3, #0]
 8004f60:	69b3      	ldr	r3, [r6, #24]
 8004f62:	b913      	cbnz	r3, 8004f6a <__sfp+0x16>
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7ff ffbd 	bl	8004ee4 <__sinit>
 8004f6a:	3648      	adds	r6, #72	; 0x48
 8004f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	d503      	bpl.n	8004f7c <__sfp+0x28>
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	b30b      	cbz	r3, 8004fbc <__sfp+0x68>
 8004f78:	6836      	ldr	r6, [r6, #0]
 8004f7a:	e7f7      	b.n	8004f6c <__sfp+0x18>
 8004f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f80:	b9d5      	cbnz	r5, 8004fb8 <__sfp+0x64>
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <__sfp+0x88>)
 8004f84:	60e3      	str	r3, [r4, #12]
 8004f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f8c:	f000 f859 	bl	8005042 <__retarget_lock_init_recursive>
 8004f90:	f7ff ff96 	bl	8004ec0 <__sfp_lock_release>
 8004f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	61a5      	str	r5, [r4, #24]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fa8:	f7ff fc38 	bl	800481c <memset>
 8004fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb8:	3468      	adds	r4, #104	; 0x68
 8004fba:	e7d9      	b.n	8004f70 <__sfp+0x1c>
 8004fbc:	2104      	movs	r1, #4
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f7ff ff62 	bl	8004e88 <__sfmoreglue>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	6030      	str	r0, [r6, #0]
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d1d5      	bne.n	8004f78 <__sfp+0x24>
 8004fcc:	f7ff ff78 	bl	8004ec0 <__sfp_lock_release>
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	e7ee      	b.n	8004fb4 <__sfp+0x60>
 8004fd6:	bf00      	nop
 8004fd8:	08005e68 	.word	0x08005e68
 8004fdc:	ffff0001 	.word	0xffff0001

08004fe0 <fiprintf>:
 8004fe0:	b40e      	push	{r1, r2, r3}
 8004fe2:	b503      	push	{r0, r1, lr}
 8004fe4:	4601      	mov	r1, r0
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	4805      	ldr	r0, [pc, #20]	; (8005000 <fiprintf+0x20>)
 8004fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fee:	6800      	ldr	r0, [r0, #0]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	f000 f8c3 	bl	800517c <_vfiprintf_r>
 8004ff6:	b002      	add	sp, #8
 8004ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ffc:	b003      	add	sp, #12
 8004ffe:	4770      	bx	lr
 8005000:	2000002c 	.word	0x2000002c

08005004 <_fwalk_reent>:
 8005004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005008:	4606      	mov	r6, r0
 800500a:	4688      	mov	r8, r1
 800500c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005010:	2700      	movs	r7, #0
 8005012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005016:	f1b9 0901 	subs.w	r9, r9, #1
 800501a:	d505      	bpl.n	8005028 <_fwalk_reent+0x24>
 800501c:	6824      	ldr	r4, [r4, #0]
 800501e:	2c00      	cmp	r4, #0
 8005020:	d1f7      	bne.n	8005012 <_fwalk_reent+0xe>
 8005022:	4638      	mov	r0, r7
 8005024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005028:	89ab      	ldrh	r3, [r5, #12]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d907      	bls.n	800503e <_fwalk_reent+0x3a>
 800502e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005032:	3301      	adds	r3, #1
 8005034:	d003      	beq.n	800503e <_fwalk_reent+0x3a>
 8005036:	4629      	mov	r1, r5
 8005038:	4630      	mov	r0, r6
 800503a:	47c0      	blx	r8
 800503c:	4307      	orrs	r7, r0
 800503e:	3568      	adds	r5, #104	; 0x68
 8005040:	e7e9      	b.n	8005016 <_fwalk_reent+0x12>

08005042 <__retarget_lock_init_recursive>:
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_acquire_recursive>:
 8005044:	4770      	bx	lr

08005046 <__retarget_lock_release_recursive>:
 8005046:	4770      	bx	lr

08005048 <__swhatbuf_r>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	460e      	mov	r6, r1
 800504c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005050:	2900      	cmp	r1, #0
 8005052:	b096      	sub	sp, #88	; 0x58
 8005054:	4614      	mov	r4, r2
 8005056:	461d      	mov	r5, r3
 8005058:	da07      	bge.n	800506a <__swhatbuf_r+0x22>
 800505a:	2300      	movs	r3, #0
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	89b3      	ldrh	r3, [r6, #12]
 8005060:	061a      	lsls	r2, r3, #24
 8005062:	d410      	bmi.n	8005086 <__swhatbuf_r+0x3e>
 8005064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005068:	e00e      	b.n	8005088 <__swhatbuf_r+0x40>
 800506a:	466a      	mov	r2, sp
 800506c:	f000 fcae 	bl	80059cc <_fstat_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	dbf2      	blt.n	800505a <__swhatbuf_r+0x12>
 8005074:	9a01      	ldr	r2, [sp, #4]
 8005076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800507a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800507e:	425a      	negs	r2, r3
 8005080:	415a      	adcs	r2, r3
 8005082:	602a      	str	r2, [r5, #0]
 8005084:	e7ee      	b.n	8005064 <__swhatbuf_r+0x1c>
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	2000      	movs	r0, #0
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	b016      	add	sp, #88	; 0x58
 800508e:	bd70      	pop	{r4, r5, r6, pc}

08005090 <__smakebuf_r>:
 8005090:	898b      	ldrh	r3, [r1, #12]
 8005092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005094:	079d      	lsls	r5, r3, #30
 8005096:	4606      	mov	r6, r0
 8005098:	460c      	mov	r4, r1
 800509a:	d507      	bpl.n	80050ac <__smakebuf_r+0x1c>
 800509c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	2301      	movs	r3, #1
 80050a6:	6163      	str	r3, [r4, #20]
 80050a8:	b002      	add	sp, #8
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	ab01      	add	r3, sp, #4
 80050ae:	466a      	mov	r2, sp
 80050b0:	f7ff ffca 	bl	8005048 <__swhatbuf_r>
 80050b4:	9900      	ldr	r1, [sp, #0]
 80050b6:	4605      	mov	r5, r0
 80050b8:	4630      	mov	r0, r6
 80050ba:	f7ff fc07 	bl	80048cc <_malloc_r>
 80050be:	b948      	cbnz	r0, 80050d4 <__smakebuf_r+0x44>
 80050c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c4:	059a      	lsls	r2, r3, #22
 80050c6:	d4ef      	bmi.n	80050a8 <__smakebuf_r+0x18>
 80050c8:	f023 0303 	bic.w	r3, r3, #3
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	e7e3      	b.n	800509c <__smakebuf_r+0xc>
 80050d4:	4b0d      	ldr	r3, [pc, #52]	; (800510c <__smakebuf_r+0x7c>)
 80050d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	6020      	str	r0, [r4, #0]
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	9b00      	ldr	r3, [sp, #0]
 80050e4:	6163      	str	r3, [r4, #20]
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	6120      	str	r0, [r4, #16]
 80050ea:	b15b      	cbz	r3, 8005104 <__smakebuf_r+0x74>
 80050ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f0:	4630      	mov	r0, r6
 80050f2:	f000 fc7d 	bl	80059f0 <_isatty_r>
 80050f6:	b128      	cbz	r0, 8005104 <__smakebuf_r+0x74>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	81a3      	strh	r3, [r4, #12]
 8005104:	89a0      	ldrh	r0, [r4, #12]
 8005106:	4305      	orrs	r5, r0
 8005108:	81a5      	strh	r5, [r4, #12]
 800510a:	e7cd      	b.n	80050a8 <__smakebuf_r+0x18>
 800510c:	08004e7d 	.word	0x08004e7d

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_lock+0x8>)
 8005112:	f7ff bf97 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	200001d4 	.word	0x200001d4

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_unlock+0x8>)
 800511e:	f7ff bf92 	b.w	8005046 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	200001d4 	.word	0x200001d4

08005128 <__sfputc_r>:
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	3b01      	subs	r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	b410      	push	{r4}
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	da08      	bge.n	8005146 <__sfputc_r+0x1e>
 8005134:	6994      	ldr	r4, [r2, #24]
 8005136:	42a3      	cmp	r3, r4
 8005138:	db01      	blt.n	800513e <__sfputc_r+0x16>
 800513a:	290a      	cmp	r1, #10
 800513c:	d103      	bne.n	8005146 <__sfputc_r+0x1e>
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	f000 bb6b 	b.w	800581c <__swbuf_r>
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	1c58      	adds	r0, r3, #1
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	7019      	strb	r1, [r3, #0]
 800514e:	4608      	mov	r0, r1
 8005150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005154:	4770      	bx	lr

08005156 <__sfputs_r>:
 8005156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	4614      	mov	r4, r2
 800515e:	18d5      	adds	r5, r2, r3
 8005160:	42ac      	cmp	r4, r5
 8005162:	d101      	bne.n	8005168 <__sfputs_r+0x12>
 8005164:	2000      	movs	r0, #0
 8005166:	e007      	b.n	8005178 <__sfputs_r+0x22>
 8005168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516c:	463a      	mov	r2, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffda 	bl	8005128 <__sfputc_r>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d1f3      	bne.n	8005160 <__sfputs_r+0xa>
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800517c <_vfiprintf_r>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	460d      	mov	r5, r1
 8005182:	b09d      	sub	sp, #116	; 0x74
 8005184:	4614      	mov	r4, r2
 8005186:	4698      	mov	r8, r3
 8005188:	4606      	mov	r6, r0
 800518a:	b118      	cbz	r0, 8005194 <_vfiprintf_r+0x18>
 800518c:	6983      	ldr	r3, [r0, #24]
 800518e:	b90b      	cbnz	r3, 8005194 <_vfiprintf_r+0x18>
 8005190:	f7ff fea8 	bl	8004ee4 <__sinit>
 8005194:	4b89      	ldr	r3, [pc, #548]	; (80053bc <_vfiprintf_r+0x240>)
 8005196:	429d      	cmp	r5, r3
 8005198:	d11b      	bne.n	80051d2 <_vfiprintf_r+0x56>
 800519a:	6875      	ldr	r5, [r6, #4]
 800519c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800519e:	07d9      	lsls	r1, r3, #31
 80051a0:	d405      	bmi.n	80051ae <_vfiprintf_r+0x32>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	059a      	lsls	r2, r3, #22
 80051a6:	d402      	bmi.n	80051ae <_vfiprintf_r+0x32>
 80051a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051aa:	f7ff ff4b 	bl	8005044 <__retarget_lock_acquire_recursive>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	d501      	bpl.n	80051b8 <_vfiprintf_r+0x3c>
 80051b4:	692b      	ldr	r3, [r5, #16]
 80051b6:	b9eb      	cbnz	r3, 80051f4 <_vfiprintf_r+0x78>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 fb80 	bl	80058c0 <__swsetup_r>
 80051c0:	b1c0      	cbz	r0, 80051f4 <_vfiprintf_r+0x78>
 80051c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c4:	07dc      	lsls	r4, r3, #31
 80051c6:	d50e      	bpl.n	80051e6 <_vfiprintf_r+0x6a>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051cc:	b01d      	add	sp, #116	; 0x74
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	4b7b      	ldr	r3, [pc, #492]	; (80053c0 <_vfiprintf_r+0x244>)
 80051d4:	429d      	cmp	r5, r3
 80051d6:	d101      	bne.n	80051dc <_vfiprintf_r+0x60>
 80051d8:	68b5      	ldr	r5, [r6, #8]
 80051da:	e7df      	b.n	800519c <_vfiprintf_r+0x20>
 80051dc:	4b79      	ldr	r3, [pc, #484]	; (80053c4 <_vfiprintf_r+0x248>)
 80051de:	429d      	cmp	r5, r3
 80051e0:	bf08      	it	eq
 80051e2:	68f5      	ldreq	r5, [r6, #12]
 80051e4:	e7da      	b.n	800519c <_vfiprintf_r+0x20>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	0598      	lsls	r0, r3, #22
 80051ea:	d4ed      	bmi.n	80051c8 <_vfiprintf_r+0x4c>
 80051ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ee:	f7ff ff2a 	bl	8005046 <__retarget_lock_release_recursive>
 80051f2:	e7e9      	b.n	80051c8 <_vfiprintf_r+0x4c>
 80051f4:	2300      	movs	r3, #0
 80051f6:	9309      	str	r3, [sp, #36]	; 0x24
 80051f8:	2320      	movs	r3, #32
 80051fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005202:	2330      	movs	r3, #48	; 0x30
 8005204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053c8 <_vfiprintf_r+0x24c>
 8005208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800520c:	f04f 0901 	mov.w	r9, #1
 8005210:	4623      	mov	r3, r4
 8005212:	469a      	mov	sl, r3
 8005214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005218:	b10a      	cbz	r2, 800521e <_vfiprintf_r+0xa2>
 800521a:	2a25      	cmp	r2, #37	; 0x25
 800521c:	d1f9      	bne.n	8005212 <_vfiprintf_r+0x96>
 800521e:	ebba 0b04 	subs.w	fp, sl, r4
 8005222:	d00b      	beq.n	800523c <_vfiprintf_r+0xc0>
 8005224:	465b      	mov	r3, fp
 8005226:	4622      	mov	r2, r4
 8005228:	4629      	mov	r1, r5
 800522a:	4630      	mov	r0, r6
 800522c:	f7ff ff93 	bl	8005156 <__sfputs_r>
 8005230:	3001      	adds	r0, #1
 8005232:	f000 80aa 	beq.w	800538a <_vfiprintf_r+0x20e>
 8005236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005238:	445a      	add	r2, fp
 800523a:	9209      	str	r2, [sp, #36]	; 0x24
 800523c:	f89a 3000 	ldrb.w	r3, [sl]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a2 	beq.w	800538a <_vfiprintf_r+0x20e>
 8005246:	2300      	movs	r3, #0
 8005248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800524c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005250:	f10a 0a01 	add.w	sl, sl, #1
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	9307      	str	r3, [sp, #28]
 8005258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800525c:	931a      	str	r3, [sp, #104]	; 0x68
 800525e:	4654      	mov	r4, sl
 8005260:	2205      	movs	r2, #5
 8005262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005266:	4858      	ldr	r0, [pc, #352]	; (80053c8 <_vfiprintf_r+0x24c>)
 8005268:	f7fa ffba 	bl	80001e0 <memchr>
 800526c:	9a04      	ldr	r2, [sp, #16]
 800526e:	b9d8      	cbnz	r0, 80052a8 <_vfiprintf_r+0x12c>
 8005270:	06d1      	lsls	r1, r2, #27
 8005272:	bf44      	itt	mi
 8005274:	2320      	movmi	r3, #32
 8005276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800527a:	0713      	lsls	r3, r2, #28
 800527c:	bf44      	itt	mi
 800527e:	232b      	movmi	r3, #43	; 0x2b
 8005280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005284:	f89a 3000 	ldrb.w	r3, [sl]
 8005288:	2b2a      	cmp	r3, #42	; 0x2a
 800528a:	d015      	beq.n	80052b8 <_vfiprintf_r+0x13c>
 800528c:	9a07      	ldr	r2, [sp, #28]
 800528e:	4654      	mov	r4, sl
 8005290:	2000      	movs	r0, #0
 8005292:	f04f 0c0a 	mov.w	ip, #10
 8005296:	4621      	mov	r1, r4
 8005298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800529c:	3b30      	subs	r3, #48	; 0x30
 800529e:	2b09      	cmp	r3, #9
 80052a0:	d94e      	bls.n	8005340 <_vfiprintf_r+0x1c4>
 80052a2:	b1b0      	cbz	r0, 80052d2 <_vfiprintf_r+0x156>
 80052a4:	9207      	str	r2, [sp, #28]
 80052a6:	e014      	b.n	80052d2 <_vfiprintf_r+0x156>
 80052a8:	eba0 0308 	sub.w	r3, r0, r8
 80052ac:	fa09 f303 	lsl.w	r3, r9, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	46a2      	mov	sl, r4
 80052b6:	e7d2      	b.n	800525e <_vfiprintf_r+0xe2>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	1d19      	adds	r1, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9103      	str	r1, [sp, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfbb      	ittet	lt
 80052c4:	425b      	neglt	r3, r3
 80052c6:	f042 0202 	orrlt.w	r2, r2, #2
 80052ca:	9307      	strge	r3, [sp, #28]
 80052cc:	9307      	strlt	r3, [sp, #28]
 80052ce:	bfb8      	it	lt
 80052d0:	9204      	strlt	r2, [sp, #16]
 80052d2:	7823      	ldrb	r3, [r4, #0]
 80052d4:	2b2e      	cmp	r3, #46	; 0x2e
 80052d6:	d10c      	bne.n	80052f2 <_vfiprintf_r+0x176>
 80052d8:	7863      	ldrb	r3, [r4, #1]
 80052da:	2b2a      	cmp	r3, #42	; 0x2a
 80052dc:	d135      	bne.n	800534a <_vfiprintf_r+0x1ce>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	1d1a      	adds	r2, r3, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	9203      	str	r2, [sp, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfb8      	it	lt
 80052ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052ee:	3402      	adds	r4, #2
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053d8 <_vfiprintf_r+0x25c>
 80052f6:	7821      	ldrb	r1, [r4, #0]
 80052f8:	2203      	movs	r2, #3
 80052fa:	4650      	mov	r0, sl
 80052fc:	f7fa ff70 	bl	80001e0 <memchr>
 8005300:	b140      	cbz	r0, 8005314 <_vfiprintf_r+0x198>
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	eba0 000a 	sub.w	r0, r0, sl
 8005308:	fa03 f000 	lsl.w	r0, r3, r0
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	4303      	orrs	r3, r0
 8005310:	3401      	adds	r4, #1
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005318:	482c      	ldr	r0, [pc, #176]	; (80053cc <_vfiprintf_r+0x250>)
 800531a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800531e:	2206      	movs	r2, #6
 8005320:	f7fa ff5e 	bl	80001e0 <memchr>
 8005324:	2800      	cmp	r0, #0
 8005326:	d03f      	beq.n	80053a8 <_vfiprintf_r+0x22c>
 8005328:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <_vfiprintf_r+0x254>)
 800532a:	bb1b      	cbnz	r3, 8005374 <_vfiprintf_r+0x1f8>
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	3307      	adds	r3, #7
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	3308      	adds	r3, #8
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	443b      	add	r3, r7
 800533c:	9309      	str	r3, [sp, #36]	; 0x24
 800533e:	e767      	b.n	8005210 <_vfiprintf_r+0x94>
 8005340:	fb0c 3202 	mla	r2, ip, r2, r3
 8005344:	460c      	mov	r4, r1
 8005346:	2001      	movs	r0, #1
 8005348:	e7a5      	b.n	8005296 <_vfiprintf_r+0x11a>
 800534a:	2300      	movs	r3, #0
 800534c:	3401      	adds	r4, #1
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	4619      	mov	r1, r3
 8005352:	f04f 0c0a 	mov.w	ip, #10
 8005356:	4620      	mov	r0, r4
 8005358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800535c:	3a30      	subs	r2, #48	; 0x30
 800535e:	2a09      	cmp	r2, #9
 8005360:	d903      	bls.n	800536a <_vfiprintf_r+0x1ee>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0c5      	beq.n	80052f2 <_vfiprintf_r+0x176>
 8005366:	9105      	str	r1, [sp, #20]
 8005368:	e7c3      	b.n	80052f2 <_vfiprintf_r+0x176>
 800536a:	fb0c 2101 	mla	r1, ip, r1, r2
 800536e:	4604      	mov	r4, r0
 8005370:	2301      	movs	r3, #1
 8005372:	e7f0      	b.n	8005356 <_vfiprintf_r+0x1da>
 8005374:	ab03      	add	r3, sp, #12
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	462a      	mov	r2, r5
 800537a:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <_vfiprintf_r+0x258>)
 800537c:	a904      	add	r1, sp, #16
 800537e:	4630      	mov	r0, r6
 8005380:	f3af 8000 	nop.w
 8005384:	4607      	mov	r7, r0
 8005386:	1c78      	adds	r0, r7, #1
 8005388:	d1d6      	bne.n	8005338 <_vfiprintf_r+0x1bc>
 800538a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800538c:	07d9      	lsls	r1, r3, #31
 800538e:	d405      	bmi.n	800539c <_vfiprintf_r+0x220>
 8005390:	89ab      	ldrh	r3, [r5, #12]
 8005392:	059a      	lsls	r2, r3, #22
 8005394:	d402      	bmi.n	800539c <_vfiprintf_r+0x220>
 8005396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005398:	f7ff fe55 	bl	8005046 <__retarget_lock_release_recursive>
 800539c:	89ab      	ldrh	r3, [r5, #12]
 800539e:	065b      	lsls	r3, r3, #25
 80053a0:	f53f af12 	bmi.w	80051c8 <_vfiprintf_r+0x4c>
 80053a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053a6:	e711      	b.n	80051cc <_vfiprintf_r+0x50>
 80053a8:	ab03      	add	r3, sp, #12
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	462a      	mov	r2, r5
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <_vfiprintf_r+0x258>)
 80053b0:	a904      	add	r1, sp, #16
 80053b2:	4630      	mov	r0, r6
 80053b4:	f000 f880 	bl	80054b8 <_printf_i>
 80053b8:	e7e4      	b.n	8005384 <_vfiprintf_r+0x208>
 80053ba:	bf00      	nop
 80053bc:	08005f40 	.word	0x08005f40
 80053c0:	08005f60 	.word	0x08005f60
 80053c4:	08005f20 	.word	0x08005f20
 80053c8:	08005f80 	.word	0x08005f80
 80053cc:	08005f8a 	.word	0x08005f8a
 80053d0:	00000000 	.word	0x00000000
 80053d4:	08005157 	.word	0x08005157
 80053d8:	08005f86 	.word	0x08005f86

080053dc <_printf_common>:
 80053dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	4616      	mov	r6, r2
 80053e2:	4699      	mov	r9, r3
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	690b      	ldr	r3, [r1, #16]
 80053e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bfb8      	it	lt
 80053f0:	4613      	movlt	r3, r2
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053f8:	4607      	mov	r7, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	b10a      	cbz	r2, 8005402 <_printf_common+0x26>
 80053fe:	3301      	adds	r3, #1
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	0699      	lsls	r1, r3, #26
 8005406:	bf42      	ittt	mi
 8005408:	6833      	ldrmi	r3, [r6, #0]
 800540a:	3302      	addmi	r3, #2
 800540c:	6033      	strmi	r3, [r6, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	f015 0506 	ands.w	r5, r5, #6
 8005414:	d106      	bne.n	8005424 <_printf_common+0x48>
 8005416:	f104 0a19 	add.w	sl, r4, #25
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	6832      	ldr	r2, [r6, #0]
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	42ab      	cmp	r3, r5
 8005422:	dc26      	bgt.n	8005472 <_printf_common+0x96>
 8005424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005428:	1e13      	subs	r3, r2, #0
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	bf18      	it	ne
 800542e:	2301      	movne	r3, #1
 8005430:	0692      	lsls	r2, r2, #26
 8005432:	d42b      	bmi.n	800548c <_printf_common+0xb0>
 8005434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d01e      	beq.n	8005480 <_printf_common+0xa4>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	68e5      	ldr	r5, [r4, #12]
 8005446:	6832      	ldr	r2, [r6, #0]
 8005448:	f003 0306 	and.w	r3, r3, #6
 800544c:	2b04      	cmp	r3, #4
 800544e:	bf08      	it	eq
 8005450:	1aad      	subeq	r5, r5, r2
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	bf0c      	ite	eq
 8005458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800545c:	2500      	movne	r5, #0
 800545e:	4293      	cmp	r3, r2
 8005460:	bfc4      	itt	gt
 8005462:	1a9b      	subgt	r3, r3, r2
 8005464:	18ed      	addgt	r5, r5, r3
 8005466:	2600      	movs	r6, #0
 8005468:	341a      	adds	r4, #26
 800546a:	42b5      	cmp	r5, r6
 800546c:	d11a      	bne.n	80054a4 <_printf_common+0xc8>
 800546e:	2000      	movs	r0, #0
 8005470:	e008      	b.n	8005484 <_printf_common+0xa8>
 8005472:	2301      	movs	r3, #1
 8005474:	4652      	mov	r2, sl
 8005476:	4649      	mov	r1, r9
 8005478:	4638      	mov	r0, r7
 800547a:	47c0      	blx	r8
 800547c:	3001      	adds	r0, #1
 800547e:	d103      	bne.n	8005488 <_printf_common+0xac>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	3501      	adds	r5, #1
 800548a:	e7c6      	b.n	800541a <_printf_common+0x3e>
 800548c:	18e1      	adds	r1, r4, r3
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	2030      	movs	r0, #48	; 0x30
 8005492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005496:	4422      	add	r2, r4
 8005498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800549c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054a0:	3302      	adds	r3, #2
 80054a2:	e7c7      	b.n	8005434 <_printf_common+0x58>
 80054a4:	2301      	movs	r3, #1
 80054a6:	4622      	mov	r2, r4
 80054a8:	4649      	mov	r1, r9
 80054aa:	4638      	mov	r0, r7
 80054ac:	47c0      	blx	r8
 80054ae:	3001      	adds	r0, #1
 80054b0:	d0e6      	beq.n	8005480 <_printf_common+0xa4>
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7d9      	b.n	800546a <_printf_common+0x8e>
	...

080054b8 <_printf_i>:
 80054b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	460c      	mov	r4, r1
 80054be:	4691      	mov	r9, r2
 80054c0:	7e27      	ldrb	r7, [r4, #24]
 80054c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054c4:	2f78      	cmp	r7, #120	; 0x78
 80054c6:	4680      	mov	r8, r0
 80054c8:	469a      	mov	sl, r3
 80054ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ce:	d807      	bhi.n	80054e0 <_printf_i+0x28>
 80054d0:	2f62      	cmp	r7, #98	; 0x62
 80054d2:	d80a      	bhi.n	80054ea <_printf_i+0x32>
 80054d4:	2f00      	cmp	r7, #0
 80054d6:	f000 80d8 	beq.w	800568a <_printf_i+0x1d2>
 80054da:	2f58      	cmp	r7, #88	; 0x58
 80054dc:	f000 80a3 	beq.w	8005626 <_printf_i+0x16e>
 80054e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054e8:	e03a      	b.n	8005560 <_printf_i+0xa8>
 80054ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ee:	2b15      	cmp	r3, #21
 80054f0:	d8f6      	bhi.n	80054e0 <_printf_i+0x28>
 80054f2:	a001      	add	r0, pc, #4	; (adr r0, 80054f8 <_printf_i+0x40>)
 80054f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005565 	.word	0x08005565
 8005500:	080054e1 	.word	0x080054e1
 8005504:	080054e1 	.word	0x080054e1
 8005508:	080054e1 	.word	0x080054e1
 800550c:	080054e1 	.word	0x080054e1
 8005510:	08005565 	.word	0x08005565
 8005514:	080054e1 	.word	0x080054e1
 8005518:	080054e1 	.word	0x080054e1
 800551c:	080054e1 	.word	0x080054e1
 8005520:	080054e1 	.word	0x080054e1
 8005524:	08005671 	.word	0x08005671
 8005528:	08005595 	.word	0x08005595
 800552c:	08005653 	.word	0x08005653
 8005530:	080054e1 	.word	0x080054e1
 8005534:	080054e1 	.word	0x080054e1
 8005538:	08005693 	.word	0x08005693
 800553c:	080054e1 	.word	0x080054e1
 8005540:	08005595 	.word	0x08005595
 8005544:	080054e1 	.word	0x080054e1
 8005548:	080054e1 	.word	0x080054e1
 800554c:	0800565b 	.word	0x0800565b
 8005550:	680b      	ldr	r3, [r1, #0]
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	600a      	str	r2, [r1, #0]
 8005558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800555c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005560:	2301      	movs	r3, #1
 8005562:	e0a3      	b.n	80056ac <_printf_i+0x1f4>
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	6808      	ldr	r0, [r1, #0]
 8005568:	062e      	lsls	r6, r5, #24
 800556a:	f100 0304 	add.w	r3, r0, #4
 800556e:	d50a      	bpl.n	8005586 <_printf_i+0xce>
 8005570:	6805      	ldr	r5, [r0, #0]
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	2d00      	cmp	r5, #0
 8005576:	da03      	bge.n	8005580 <_printf_i+0xc8>
 8005578:	232d      	movs	r3, #45	; 0x2d
 800557a:	426d      	negs	r5, r5
 800557c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005580:	485e      	ldr	r0, [pc, #376]	; (80056fc <_printf_i+0x244>)
 8005582:	230a      	movs	r3, #10
 8005584:	e019      	b.n	80055ba <_printf_i+0x102>
 8005586:	f015 0f40 	tst.w	r5, #64	; 0x40
 800558a:	6805      	ldr	r5, [r0, #0]
 800558c:	600b      	str	r3, [r1, #0]
 800558e:	bf18      	it	ne
 8005590:	b22d      	sxthne	r5, r5
 8005592:	e7ef      	b.n	8005574 <_printf_i+0xbc>
 8005594:	680b      	ldr	r3, [r1, #0]
 8005596:	6825      	ldr	r5, [r4, #0]
 8005598:	1d18      	adds	r0, r3, #4
 800559a:	6008      	str	r0, [r1, #0]
 800559c:	0628      	lsls	r0, r5, #24
 800559e:	d501      	bpl.n	80055a4 <_printf_i+0xec>
 80055a0:	681d      	ldr	r5, [r3, #0]
 80055a2:	e002      	b.n	80055aa <_printf_i+0xf2>
 80055a4:	0669      	lsls	r1, r5, #25
 80055a6:	d5fb      	bpl.n	80055a0 <_printf_i+0xe8>
 80055a8:	881d      	ldrh	r5, [r3, #0]
 80055aa:	4854      	ldr	r0, [pc, #336]	; (80056fc <_printf_i+0x244>)
 80055ac:	2f6f      	cmp	r7, #111	; 0x6f
 80055ae:	bf0c      	ite	eq
 80055b0:	2308      	moveq	r3, #8
 80055b2:	230a      	movne	r3, #10
 80055b4:	2100      	movs	r1, #0
 80055b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ba:	6866      	ldr	r6, [r4, #4]
 80055bc:	60a6      	str	r6, [r4, #8]
 80055be:	2e00      	cmp	r6, #0
 80055c0:	bfa2      	ittt	ge
 80055c2:	6821      	ldrge	r1, [r4, #0]
 80055c4:	f021 0104 	bicge.w	r1, r1, #4
 80055c8:	6021      	strge	r1, [r4, #0]
 80055ca:	b90d      	cbnz	r5, 80055d0 <_printf_i+0x118>
 80055cc:	2e00      	cmp	r6, #0
 80055ce:	d04d      	beq.n	800566c <_printf_i+0x1b4>
 80055d0:	4616      	mov	r6, r2
 80055d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d6:	fb03 5711 	mls	r7, r3, r1, r5
 80055da:	5dc7      	ldrb	r7, [r0, r7]
 80055dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055e0:	462f      	mov	r7, r5
 80055e2:	42bb      	cmp	r3, r7
 80055e4:	460d      	mov	r5, r1
 80055e6:	d9f4      	bls.n	80055d2 <_printf_i+0x11a>
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d10b      	bne.n	8005604 <_printf_i+0x14c>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	07df      	lsls	r7, r3, #31
 80055f0:	d508      	bpl.n	8005604 <_printf_i+0x14c>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	6861      	ldr	r1, [r4, #4]
 80055f6:	4299      	cmp	r1, r3
 80055f8:	bfde      	ittt	le
 80055fa:	2330      	movle	r3, #48	; 0x30
 80055fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005600:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005604:	1b92      	subs	r2, r2, r6
 8005606:	6122      	str	r2, [r4, #16]
 8005608:	f8cd a000 	str.w	sl, [sp]
 800560c:	464b      	mov	r3, r9
 800560e:	aa03      	add	r2, sp, #12
 8005610:	4621      	mov	r1, r4
 8005612:	4640      	mov	r0, r8
 8005614:	f7ff fee2 	bl	80053dc <_printf_common>
 8005618:	3001      	adds	r0, #1
 800561a:	d14c      	bne.n	80056b6 <_printf_i+0x1fe>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005620:	b004      	add	sp, #16
 8005622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005626:	4835      	ldr	r0, [pc, #212]	; (80056fc <_printf_i+0x244>)
 8005628:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	680e      	ldr	r6, [r1, #0]
 8005630:	061f      	lsls	r7, r3, #24
 8005632:	f856 5b04 	ldr.w	r5, [r6], #4
 8005636:	600e      	str	r6, [r1, #0]
 8005638:	d514      	bpl.n	8005664 <_printf_i+0x1ac>
 800563a:	07d9      	lsls	r1, r3, #31
 800563c:	bf44      	itt	mi
 800563e:	f043 0320 	orrmi.w	r3, r3, #32
 8005642:	6023      	strmi	r3, [r4, #0]
 8005644:	b91d      	cbnz	r5, 800564e <_printf_i+0x196>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f023 0320 	bic.w	r3, r3, #32
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	2310      	movs	r3, #16
 8005650:	e7b0      	b.n	80055b4 <_printf_i+0xfc>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f043 0320 	orr.w	r3, r3, #32
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	2378      	movs	r3, #120	; 0x78
 800565c:	4828      	ldr	r0, [pc, #160]	; (8005700 <_printf_i+0x248>)
 800565e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005662:	e7e3      	b.n	800562c <_printf_i+0x174>
 8005664:	065e      	lsls	r6, r3, #25
 8005666:	bf48      	it	mi
 8005668:	b2ad      	uxthmi	r5, r5
 800566a:	e7e6      	b.n	800563a <_printf_i+0x182>
 800566c:	4616      	mov	r6, r2
 800566e:	e7bb      	b.n	80055e8 <_printf_i+0x130>
 8005670:	680b      	ldr	r3, [r1, #0]
 8005672:	6826      	ldr	r6, [r4, #0]
 8005674:	6960      	ldr	r0, [r4, #20]
 8005676:	1d1d      	adds	r5, r3, #4
 8005678:	600d      	str	r5, [r1, #0]
 800567a:	0635      	lsls	r5, r6, #24
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	d501      	bpl.n	8005684 <_printf_i+0x1cc>
 8005680:	6018      	str	r0, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0x1d2>
 8005684:	0671      	lsls	r1, r6, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0x1c8>
 8005688:	8018      	strh	r0, [r3, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	4616      	mov	r6, r2
 8005690:	e7ba      	b.n	8005608 <_printf_i+0x150>
 8005692:	680b      	ldr	r3, [r1, #0]
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	600a      	str	r2, [r1, #0]
 8005698:	681e      	ldr	r6, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	2100      	movs	r1, #0
 800569e:	4630      	mov	r0, r6
 80056a0:	f7fa fd9e 	bl	80001e0 <memchr>
 80056a4:	b108      	cbz	r0, 80056aa <_printf_i+0x1f2>
 80056a6:	1b80      	subs	r0, r0, r6
 80056a8:	6060      	str	r0, [r4, #4]
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	2300      	movs	r3, #0
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	e7a8      	b.n	8005608 <_printf_i+0x150>
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	4632      	mov	r2, r6
 80056ba:	4649      	mov	r1, r9
 80056bc:	4640      	mov	r0, r8
 80056be:	47d0      	blx	sl
 80056c0:	3001      	adds	r0, #1
 80056c2:	d0ab      	beq.n	800561c <_printf_i+0x164>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	079b      	lsls	r3, r3, #30
 80056c8:	d413      	bmi.n	80056f2 <_printf_i+0x23a>
 80056ca:	68e0      	ldr	r0, [r4, #12]
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	4298      	cmp	r0, r3
 80056d0:	bfb8      	it	lt
 80056d2:	4618      	movlt	r0, r3
 80056d4:	e7a4      	b.n	8005620 <_printf_i+0x168>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4632      	mov	r2, r6
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d09b      	beq.n	800561c <_printf_i+0x164>
 80056e4:	3501      	adds	r5, #1
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	9903      	ldr	r1, [sp, #12]
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dcf2      	bgt.n	80056d6 <_printf_i+0x21e>
 80056f0:	e7eb      	b.n	80056ca <_printf_i+0x212>
 80056f2:	2500      	movs	r5, #0
 80056f4:	f104 0619 	add.w	r6, r4, #25
 80056f8:	e7f5      	b.n	80056e6 <_printf_i+0x22e>
 80056fa:	bf00      	nop
 80056fc:	08005f91 	.word	0x08005f91
 8005700:	08005fa2 	.word	0x08005fa2

08005704 <_putc_r>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	460d      	mov	r5, r1
 8005708:	4614      	mov	r4, r2
 800570a:	4606      	mov	r6, r0
 800570c:	b118      	cbz	r0, 8005716 <_putc_r+0x12>
 800570e:	6983      	ldr	r3, [r0, #24]
 8005710:	b90b      	cbnz	r3, 8005716 <_putc_r+0x12>
 8005712:	f7ff fbe7 	bl	8004ee4 <__sinit>
 8005716:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <_putc_r+0x84>)
 8005718:	429c      	cmp	r4, r3
 800571a:	d124      	bne.n	8005766 <_putc_r+0x62>
 800571c:	6874      	ldr	r4, [r6, #4]
 800571e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005720:	07d8      	lsls	r0, r3, #31
 8005722:	d405      	bmi.n	8005730 <_putc_r+0x2c>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	0599      	lsls	r1, r3, #22
 8005728:	d402      	bmi.n	8005730 <_putc_r+0x2c>
 800572a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572c:	f7ff fc8a 	bl	8005044 <__retarget_lock_acquire_recursive>
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	3b01      	subs	r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	da05      	bge.n	8005746 <_putc_r+0x42>
 800573a:	69a2      	ldr	r2, [r4, #24]
 800573c:	4293      	cmp	r3, r2
 800573e:	db1c      	blt.n	800577a <_putc_r+0x76>
 8005740:	b2eb      	uxtb	r3, r5
 8005742:	2b0a      	cmp	r3, #10
 8005744:	d019      	beq.n	800577a <_putc_r+0x76>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	701d      	strb	r5, [r3, #0]
 800574e:	b2ed      	uxtb	r5, r5
 8005750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005752:	07da      	lsls	r2, r3, #31
 8005754:	d405      	bmi.n	8005762 <_putc_r+0x5e>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	059b      	lsls	r3, r3, #22
 800575a:	d402      	bmi.n	8005762 <_putc_r+0x5e>
 800575c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575e:	f7ff fc72 	bl	8005046 <__retarget_lock_release_recursive>
 8005762:	4628      	mov	r0, r5
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <_putc_r+0x88>)
 8005768:	429c      	cmp	r4, r3
 800576a:	d101      	bne.n	8005770 <_putc_r+0x6c>
 800576c:	68b4      	ldr	r4, [r6, #8]
 800576e:	e7d6      	b.n	800571e <_putc_r+0x1a>
 8005770:	4b07      	ldr	r3, [pc, #28]	; (8005790 <_putc_r+0x8c>)
 8005772:	429c      	cmp	r4, r3
 8005774:	bf08      	it	eq
 8005776:	68f4      	ldreq	r4, [r6, #12]
 8005778:	e7d1      	b.n	800571e <_putc_r+0x1a>
 800577a:	4629      	mov	r1, r5
 800577c:	4622      	mov	r2, r4
 800577e:	4630      	mov	r0, r6
 8005780:	f000 f84c 	bl	800581c <__swbuf_r>
 8005784:	4605      	mov	r5, r0
 8005786:	e7e3      	b.n	8005750 <_putc_r+0x4c>
 8005788:	08005f40 	.word	0x08005f40
 800578c:	08005f60 	.word	0x08005f60
 8005790:	08005f20 	.word	0x08005f20

08005794 <__sread>:
 8005794:	b510      	push	{r4, lr}
 8005796:	460c      	mov	r4, r1
 8005798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579c:	f000 f94a 	bl	8005a34 <_read_r>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	bfab      	itete	ge
 80057a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057a6:	89a3      	ldrhlt	r3, [r4, #12]
 80057a8:	181b      	addge	r3, r3, r0
 80057aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ae:	bfac      	ite	ge
 80057b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057b2:	81a3      	strhlt	r3, [r4, #12]
 80057b4:	bd10      	pop	{r4, pc}

080057b6 <__swrite>:
 80057b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ba:	461f      	mov	r7, r3
 80057bc:	898b      	ldrh	r3, [r1, #12]
 80057be:	05db      	lsls	r3, r3, #23
 80057c0:	4605      	mov	r5, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	4616      	mov	r6, r2
 80057c6:	d505      	bpl.n	80057d4 <__swrite+0x1e>
 80057c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057cc:	2302      	movs	r3, #2
 80057ce:	2200      	movs	r2, #0
 80057d0:	f000 f91e 	bl	8005a10 <_lseek_r>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	4632      	mov	r2, r6
 80057e2:	463b      	mov	r3, r7
 80057e4:	4628      	mov	r0, r5
 80057e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ea:	f7fb bfb7 	b.w	800175c <_write_r>

080057ee <__sseek>:
 80057ee:	b510      	push	{r4, lr}
 80057f0:	460c      	mov	r4, r1
 80057f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f6:	f000 f90b 	bl	8005a10 <_lseek_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	bf15      	itete	ne
 8005800:	6560      	strne	r0, [r4, #84]	; 0x54
 8005802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800580a:	81a3      	strheq	r3, [r4, #12]
 800580c:	bf18      	it	ne
 800580e:	81a3      	strhne	r3, [r4, #12]
 8005810:	bd10      	pop	{r4, pc}

08005812 <__sclose>:
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	f000 b8c9 	b.w	80059ac <_close_r>
	...

0800581c <__swbuf_r>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	460e      	mov	r6, r1
 8005820:	4614      	mov	r4, r2
 8005822:	4605      	mov	r5, r0
 8005824:	b118      	cbz	r0, 800582e <__swbuf_r+0x12>
 8005826:	6983      	ldr	r3, [r0, #24]
 8005828:	b90b      	cbnz	r3, 800582e <__swbuf_r+0x12>
 800582a:	f7ff fb5b 	bl	8004ee4 <__sinit>
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <__swbuf_r+0x98>)
 8005830:	429c      	cmp	r4, r3
 8005832:	d12b      	bne.n	800588c <__swbuf_r+0x70>
 8005834:	686c      	ldr	r4, [r5, #4]
 8005836:	69a3      	ldr	r3, [r4, #24]
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	071a      	lsls	r2, r3, #28
 800583e:	d52f      	bpl.n	80058a0 <__swbuf_r+0x84>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	b36b      	cbz	r3, 80058a0 <__swbuf_r+0x84>
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	1ac0      	subs	r0, r0, r3
 800584a:	6963      	ldr	r3, [r4, #20]
 800584c:	b2f6      	uxtb	r6, r6
 800584e:	4283      	cmp	r3, r0
 8005850:	4637      	mov	r7, r6
 8005852:	dc04      	bgt.n	800585e <__swbuf_r+0x42>
 8005854:	4621      	mov	r1, r4
 8005856:	4628      	mov	r0, r5
 8005858:	f7ff fab0 	bl	8004dbc <_fflush_r>
 800585c:	bb30      	cbnz	r0, 80058ac <__swbuf_r+0x90>
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	3b01      	subs	r3, #1
 8005862:	60a3      	str	r3, [r4, #8]
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	6022      	str	r2, [r4, #0]
 800586a:	701e      	strb	r6, [r3, #0]
 800586c:	6963      	ldr	r3, [r4, #20]
 800586e:	3001      	adds	r0, #1
 8005870:	4283      	cmp	r3, r0
 8005872:	d004      	beq.n	800587e <__swbuf_r+0x62>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	07db      	lsls	r3, r3, #31
 8005878:	d506      	bpl.n	8005888 <__swbuf_r+0x6c>
 800587a:	2e0a      	cmp	r6, #10
 800587c:	d104      	bne.n	8005888 <__swbuf_r+0x6c>
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f7ff fa9b 	bl	8004dbc <_fflush_r>
 8005886:	b988      	cbnz	r0, 80058ac <__swbuf_r+0x90>
 8005888:	4638      	mov	r0, r7
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <__swbuf_r+0x9c>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d101      	bne.n	8005896 <__swbuf_r+0x7a>
 8005892:	68ac      	ldr	r4, [r5, #8]
 8005894:	e7cf      	b.n	8005836 <__swbuf_r+0x1a>
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <__swbuf_r+0xa0>)
 8005898:	429c      	cmp	r4, r3
 800589a:	bf08      	it	eq
 800589c:	68ec      	ldreq	r4, [r5, #12]
 800589e:	e7ca      	b.n	8005836 <__swbuf_r+0x1a>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f80c 	bl	80058c0 <__swsetup_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0cb      	beq.n	8005844 <__swbuf_r+0x28>
 80058ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058b0:	e7ea      	b.n	8005888 <__swbuf_r+0x6c>
 80058b2:	bf00      	nop
 80058b4:	08005f40 	.word	0x08005f40
 80058b8:	08005f60 	.word	0x08005f60
 80058bc:	08005f20 	.word	0x08005f20

080058c0 <__swsetup_r>:
 80058c0:	4b32      	ldr	r3, [pc, #200]	; (800598c <__swsetup_r+0xcc>)
 80058c2:	b570      	push	{r4, r5, r6, lr}
 80058c4:	681d      	ldr	r5, [r3, #0]
 80058c6:	4606      	mov	r6, r0
 80058c8:	460c      	mov	r4, r1
 80058ca:	b125      	cbz	r5, 80058d6 <__swsetup_r+0x16>
 80058cc:	69ab      	ldr	r3, [r5, #24]
 80058ce:	b913      	cbnz	r3, 80058d6 <__swsetup_r+0x16>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7ff fb07 	bl	8004ee4 <__sinit>
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <__swsetup_r+0xd0>)
 80058d8:	429c      	cmp	r4, r3
 80058da:	d10f      	bne.n	80058fc <__swsetup_r+0x3c>
 80058dc:	686c      	ldr	r4, [r5, #4]
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058e4:	0719      	lsls	r1, r3, #28
 80058e6:	d42c      	bmi.n	8005942 <__swsetup_r+0x82>
 80058e8:	06dd      	lsls	r5, r3, #27
 80058ea:	d411      	bmi.n	8005910 <__swsetup_r+0x50>
 80058ec:	2309      	movs	r3, #9
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fa:	e03e      	b.n	800597a <__swsetup_r+0xba>
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <__swsetup_r+0xd4>)
 80058fe:	429c      	cmp	r4, r3
 8005900:	d101      	bne.n	8005906 <__swsetup_r+0x46>
 8005902:	68ac      	ldr	r4, [r5, #8]
 8005904:	e7eb      	b.n	80058de <__swsetup_r+0x1e>
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <__swsetup_r+0xd8>)
 8005908:	429c      	cmp	r4, r3
 800590a:	bf08      	it	eq
 800590c:	68ec      	ldreq	r4, [r5, #12]
 800590e:	e7e6      	b.n	80058de <__swsetup_r+0x1e>
 8005910:	0758      	lsls	r0, r3, #29
 8005912:	d512      	bpl.n	800593a <__swsetup_r+0x7a>
 8005914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005916:	b141      	cbz	r1, 800592a <__swsetup_r+0x6a>
 8005918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800591c:	4299      	cmp	r1, r3
 800591e:	d002      	beq.n	8005926 <__swsetup_r+0x66>
 8005920:	4630      	mov	r0, r6
 8005922:	f7fe ff83 	bl	800482c <_free_r>
 8005926:	2300      	movs	r3, #0
 8005928:	6363      	str	r3, [r4, #52]	; 0x34
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	2300      	movs	r3, #0
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f043 0308 	orr.w	r3, r3, #8
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	b94b      	cbnz	r3, 800595a <__swsetup_r+0x9a>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800594c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005950:	d003      	beq.n	800595a <__swsetup_r+0x9a>
 8005952:	4621      	mov	r1, r4
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff fb9b 	bl	8005090 <__smakebuf_r>
 800595a:	89a0      	ldrh	r0, [r4, #12]
 800595c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005960:	f010 0301 	ands.w	r3, r0, #1
 8005964:	d00a      	beq.n	800597c <__swsetup_r+0xbc>
 8005966:	2300      	movs	r3, #0
 8005968:	60a3      	str	r3, [r4, #8]
 800596a:	6963      	ldr	r3, [r4, #20]
 800596c:	425b      	negs	r3, r3
 800596e:	61a3      	str	r3, [r4, #24]
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	b943      	cbnz	r3, 8005986 <__swsetup_r+0xc6>
 8005974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005978:	d1ba      	bne.n	80058f0 <__swsetup_r+0x30>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	0781      	lsls	r1, r0, #30
 800597e:	bf58      	it	pl
 8005980:	6963      	ldrpl	r3, [r4, #20]
 8005982:	60a3      	str	r3, [r4, #8]
 8005984:	e7f4      	b.n	8005970 <__swsetup_r+0xb0>
 8005986:	2000      	movs	r0, #0
 8005988:	e7f7      	b.n	800597a <__swsetup_r+0xba>
 800598a:	bf00      	nop
 800598c:	2000002c 	.word	0x2000002c
 8005990:	08005f40 	.word	0x08005f40
 8005994:	08005f60 	.word	0x08005f60
 8005998:	08005f20 	.word	0x08005f20

0800599c <abort>:
 800599c:	b508      	push	{r3, lr}
 800599e:	2006      	movs	r0, #6
 80059a0:	f000 f882 	bl	8005aa8 <raise>
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fe fdb9 	bl	800451c <_exit>
	...

080059ac <_close_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d06      	ldr	r5, [pc, #24]	; (80059c8 <_close_r+0x1c>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	f7fe fdd7 	bl	800456a <_close>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_close_r+0x1a>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_close_r+0x1a>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	200001dc 	.word	0x200001dc

080059cc <_fstat_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	; (80059ec <_fstat_r+0x20>)
 80059d0:	2300      	movs	r3, #0
 80059d2:	4604      	mov	r4, r0
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	f7fe fdd2 	bl	8004582 <_fstat>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d102      	bne.n	80059e8 <_fstat_r+0x1c>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	b103      	cbz	r3, 80059e8 <_fstat_r+0x1c>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	bd38      	pop	{r3, r4, r5, pc}
 80059ea:	bf00      	nop
 80059ec:	200001dc 	.word	0x200001dc

080059f0 <_isatty_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	; (8005a0c <_isatty_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fe fdd1 	bl	80045a2 <_isatty>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_isatty_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_isatty_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	200001dc 	.word	0x200001dc

08005a10 <_lseek_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d07      	ldr	r5, [pc, #28]	; (8005a30 <_lseek_r+0x20>)
 8005a14:	4604      	mov	r4, r0
 8005a16:	4608      	mov	r0, r1
 8005a18:	4611      	mov	r1, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fe fdca 	bl	80045b8 <_lseek>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_lseek_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_lseek_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200001dc 	.word	0x200001dc

08005a34 <_read_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4d07      	ldr	r5, [pc, #28]	; (8005a54 <_read_r+0x20>)
 8005a38:	4604      	mov	r4, r0
 8005a3a:	4608      	mov	r0, r1
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	602a      	str	r2, [r5, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f7fe fd74 	bl	8004530 <_read>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_read_r+0x1e>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_read_r+0x1e>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200001dc 	.word	0x200001dc

08005a58 <_raise_r>:
 8005a58:	291f      	cmp	r1, #31
 8005a5a:	b538      	push	{r3, r4, r5, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	d904      	bls.n	8005a6c <_raise_r+0x14>
 8005a62:	2316      	movs	r3, #22
 8005a64:	6003      	str	r3, [r0, #0]
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a6e:	b112      	cbz	r2, 8005a76 <_raise_r+0x1e>
 8005a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a74:	b94b      	cbnz	r3, 8005a8a <_raise_r+0x32>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f830 	bl	8005adc <_getpid_r>
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4601      	mov	r1, r0
 8005a80:	4620      	mov	r0, r4
 8005a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a86:	f000 b817 	b.w	8005ab8 <_kill_r>
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d00a      	beq.n	8005aa4 <_raise_r+0x4c>
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	d103      	bne.n	8005a9a <_raise_r+0x42>
 8005a92:	2316      	movs	r3, #22
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7e7      	b.n	8005a6a <_raise_r+0x12>
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	4798      	blx	r3
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e7e0      	b.n	8005a6a <_raise_r+0x12>

08005aa8 <raise>:
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <raise+0xc>)
 8005aaa:	4601      	mov	r1, r0
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f7ff bfd3 	b.w	8005a58 <_raise_r>
 8005ab2:	bf00      	nop
 8005ab4:	2000002c 	.word	0x2000002c

08005ab8 <_kill_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_kill_r+0x20>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f7fe fd19 	bl	80044fc <_kill>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d102      	bne.n	8005ad4 <_kill_r+0x1c>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	b103      	cbz	r3, 8005ad4 <_kill_r+0x1c>
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200001dc 	.word	0x200001dc

08005adc <_getpid_r>:
 8005adc:	f7fe bd06 	b.w	80044ec <_getpid>

08005ae0 <sqrt>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	ed2d 8b02 	vpush	{d8}
 8005ae6:	ec55 4b10 	vmov	r4, r5, d0
 8005aea:	f000 f82d 	bl	8005b48 <__ieee754_sqrt>
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <sqrt+0x64>)
 8005af0:	eeb0 8a40 	vmov.f32	s16, s0
 8005af4:	eef0 8a60 	vmov.f32	s17, s1
 8005af8:	f993 3000 	ldrsb.w	r3, [r3]
 8005afc:	3301      	adds	r3, #1
 8005afe:	d019      	beq.n	8005b34 <sqrt+0x54>
 8005b00:	4622      	mov	r2, r4
 8005b02:	462b      	mov	r3, r5
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fb f810 	bl	8000b2c <__aeabi_dcmpun>
 8005b0c:	b990      	cbnz	r0, 8005b34 <sqrt+0x54>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2300      	movs	r3, #0
 8005b12:	4620      	mov	r0, r4
 8005b14:	4629      	mov	r1, r5
 8005b16:	f7fa ffe1 	bl	8000adc <__aeabi_dcmplt>
 8005b1a:	b158      	cbz	r0, 8005b34 <sqrt+0x54>
 8005b1c:	f7fe fe44 	bl	80047a8 <__errno>
 8005b20:	2321      	movs	r3, #33	; 0x21
 8005b22:	6003      	str	r3, [r0, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f7fa fe8e 	bl	800084c <__aeabi_ddiv>
 8005b30:	ec41 0b18 	vmov	d8, r0, r1
 8005b34:	eeb0 0a48 	vmov.f32	s0, s16
 8005b38:	eef0 0a68 	vmov.f32	s1, s17
 8005b3c:	ecbd 8b02 	vpop	{d8}
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	20000090 	.word	0x20000090

08005b48 <__ieee754_sqrt>:
 8005b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4c:	ec55 4b10 	vmov	r4, r5, d0
 8005b50:	4e56      	ldr	r6, [pc, #344]	; (8005cac <__ieee754_sqrt+0x164>)
 8005b52:	43ae      	bics	r6, r5
 8005b54:	ee10 0a10 	vmov	r0, s0
 8005b58:	ee10 3a10 	vmov	r3, s0
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	462a      	mov	r2, r5
 8005b60:	d110      	bne.n	8005b84 <__ieee754_sqrt+0x3c>
 8005b62:	ee10 2a10 	vmov	r2, s0
 8005b66:	462b      	mov	r3, r5
 8005b68:	f7fa fd46 	bl	80005f8 <__aeabi_dmul>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4620      	mov	r0, r4
 8005b72:	4629      	mov	r1, r5
 8005b74:	f7fa fb8a 	bl	800028c <__adddf3>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	460d      	mov	r5, r1
 8005b7c:	ec45 4b10 	vmov	d0, r4, r5
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	dc10      	bgt.n	8005baa <__ieee754_sqrt+0x62>
 8005b88:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b8c:	4330      	orrs	r0, r6
 8005b8e:	d0f5      	beq.n	8005b7c <__ieee754_sqrt+0x34>
 8005b90:	b15d      	cbz	r5, 8005baa <__ieee754_sqrt+0x62>
 8005b92:	ee10 2a10 	vmov	r2, s0
 8005b96:	462b      	mov	r3, r5
 8005b98:	ee10 0a10 	vmov	r0, s0
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	f7fa fe52 	bl	800084c <__aeabi_ddiv>
 8005ba8:	e7e6      	b.n	8005b78 <__ieee754_sqrt+0x30>
 8005baa:	1509      	asrs	r1, r1, #20
 8005bac:	d076      	beq.n	8005c9c <__ieee754_sqrt+0x154>
 8005bae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005bb2:	07ce      	lsls	r6, r1, #31
 8005bb4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005bb8:	bf5e      	ittt	pl
 8005bba:	0fda      	lsrpl	r2, r3, #31
 8005bbc:	005b      	lslpl	r3, r3, #1
 8005bbe:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005bc2:	0fda      	lsrs	r2, r3, #31
 8005bc4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005bc8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005bcc:	2000      	movs	r0, #0
 8005bce:	106d      	asrs	r5, r5, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	f04f 0e16 	mov.w	lr, #22
 8005bd6:	4684      	mov	ip, r0
 8005bd8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bdc:	eb0c 0401 	add.w	r4, ip, r1
 8005be0:	4294      	cmp	r4, r2
 8005be2:	bfde      	ittt	le
 8005be4:	1b12      	suble	r2, r2, r4
 8005be6:	eb04 0c01 	addle.w	ip, r4, r1
 8005bea:	1840      	addle	r0, r0, r1
 8005bec:	0052      	lsls	r2, r2, #1
 8005bee:	f1be 0e01 	subs.w	lr, lr, #1
 8005bf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005bf6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005bfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bfe:	d1ed      	bne.n	8005bdc <__ieee754_sqrt+0x94>
 8005c00:	4671      	mov	r1, lr
 8005c02:	2720      	movs	r7, #32
 8005c04:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005c08:	4562      	cmp	r2, ip
 8005c0a:	eb04 060e 	add.w	r6, r4, lr
 8005c0e:	dc02      	bgt.n	8005c16 <__ieee754_sqrt+0xce>
 8005c10:	d113      	bne.n	8005c3a <__ieee754_sqrt+0xf2>
 8005c12:	429e      	cmp	r6, r3
 8005c14:	d811      	bhi.n	8005c3a <__ieee754_sqrt+0xf2>
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	eb06 0e04 	add.w	lr, r6, r4
 8005c1c:	da43      	bge.n	8005ca6 <__ieee754_sqrt+0x15e>
 8005c1e:	f1be 0f00 	cmp.w	lr, #0
 8005c22:	db40      	blt.n	8005ca6 <__ieee754_sqrt+0x15e>
 8005c24:	f10c 0801 	add.w	r8, ip, #1
 8005c28:	eba2 020c 	sub.w	r2, r2, ip
 8005c2c:	429e      	cmp	r6, r3
 8005c2e:	bf88      	it	hi
 8005c30:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005c34:	1b9b      	subs	r3, r3, r6
 8005c36:	4421      	add	r1, r4
 8005c38:	46c4      	mov	ip, r8
 8005c3a:	0052      	lsls	r2, r2, #1
 8005c3c:	3f01      	subs	r7, #1
 8005c3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005c42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005c46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c4a:	d1dd      	bne.n	8005c08 <__ieee754_sqrt+0xc0>
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d006      	beq.n	8005c5e <__ieee754_sqrt+0x116>
 8005c50:	1c4c      	adds	r4, r1, #1
 8005c52:	bf13      	iteet	ne
 8005c54:	3101      	addne	r1, #1
 8005c56:	3001      	addeq	r0, #1
 8005c58:	4639      	moveq	r1, r7
 8005c5a:	f021 0101 	bicne.w	r1, r1, #1
 8005c5e:	1043      	asrs	r3, r0, #1
 8005c60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005c64:	0849      	lsrs	r1, r1, #1
 8005c66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005c6a:	07c2      	lsls	r2, r0, #31
 8005c6c:	bf48      	it	mi
 8005c6e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005c72:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005c76:	460c      	mov	r4, r1
 8005c78:	463d      	mov	r5, r7
 8005c7a:	e77f      	b.n	8005b7c <__ieee754_sqrt+0x34>
 8005c7c:	0ada      	lsrs	r2, r3, #11
 8005c7e:	3815      	subs	r0, #21
 8005c80:	055b      	lsls	r3, r3, #21
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d0fa      	beq.n	8005c7c <__ieee754_sqrt+0x134>
 8005c86:	02d7      	lsls	r7, r2, #11
 8005c88:	d50a      	bpl.n	8005ca0 <__ieee754_sqrt+0x158>
 8005c8a:	f1c1 0420 	rsb	r4, r1, #32
 8005c8e:	fa23 f404 	lsr.w	r4, r3, r4
 8005c92:	1e4d      	subs	r5, r1, #1
 8005c94:	408b      	lsls	r3, r1
 8005c96:	4322      	orrs	r2, r4
 8005c98:	1b41      	subs	r1, r0, r5
 8005c9a:	e788      	b.n	8005bae <__ieee754_sqrt+0x66>
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	e7f0      	b.n	8005c82 <__ieee754_sqrt+0x13a>
 8005ca0:	0052      	lsls	r2, r2, #1
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	e7ef      	b.n	8005c86 <__ieee754_sqrt+0x13e>
 8005ca6:	46e0      	mov	r8, ip
 8005ca8:	e7be      	b.n	8005c28 <__ieee754_sqrt+0xe0>
 8005caa:	bf00      	nop
 8005cac:	7ff00000 	.word	0x7ff00000

08005cb0 <_init>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr

08005cbc <_fini>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr
=======
 8005364:	e7fe      	b.n	8005364 <ADC1_2_IRQHandler>
	...

08005368 <__errno>:
 8005368:	4b01      	ldr	r3, [pc, #4]	; (8005370 <__errno+0x8>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	2000002c 	.word	0x2000002c

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	; (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	; (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <__libc_init_array+0x44>)
 8005388:	f001 f9fe 	bl	8006788 <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	08006f0c 	.word	0x08006f0c
 80053b0:	08006f0c 	.word	0x08006f0c
 80053b4:	08006f0c 	.word	0x08006f0c
 80053b8:	08006f10 	.word	0x08006f10

080053bc <malloc>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <malloc+0xc>)
 80053be:	4601      	mov	r1, r0
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	f000 b863 	b.w	800548c <_malloc_r>
 80053c6:	bf00      	nop
 80053c8:	2000002c 	.word	0x2000002c

080053cc <free>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <free+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f000 b80b 	b.w	80053ec <_free_r>
 80053d6:	bf00      	nop
 80053d8:	2000002c 	.word	0x2000002c

080053dc <memset>:
 80053dc:	4402      	add	r2, r0
 80053de:	4603      	mov	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <_free_r>:
 80053ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d048      	beq.n	8005484 <_free_r+0x98>
 80053f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f6:	9001      	str	r0, [sp, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f1a1 0404 	sub.w	r4, r1, #4
 80053fe:	bfb8      	it	lt
 8005400:	18e4      	addlt	r4, r4, r3
 8005402:	f000 fd9b 	bl	8005f3c <__malloc_lock>
 8005406:	4a20      	ldr	r2, [pc, #128]	; (8005488 <_free_r+0x9c>)
 8005408:	9801      	ldr	r0, [sp, #4]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	4615      	mov	r5, r2
 800540e:	b933      	cbnz	r3, 800541e <_free_r+0x32>
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	6014      	str	r4, [r2, #0]
 8005414:	b003      	add	sp, #12
 8005416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800541a:	f000 bd95 	b.w	8005f48 <__malloc_unlock>
 800541e:	42a3      	cmp	r3, r4
 8005420:	d90b      	bls.n	800543a <_free_r+0x4e>
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	1862      	adds	r2, r4, r1
 8005426:	4293      	cmp	r3, r2
 8005428:	bf04      	itt	eq
 800542a:	681a      	ldreq	r2, [r3, #0]
 800542c:	685b      	ldreq	r3, [r3, #4]
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	bf04      	itt	eq
 8005432:	1852      	addeq	r2, r2, r1
 8005434:	6022      	streq	r2, [r4, #0]
 8005436:	602c      	str	r4, [r5, #0]
 8005438:	e7ec      	b.n	8005414 <_free_r+0x28>
 800543a:	461a      	mov	r2, r3
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b10b      	cbz	r3, 8005444 <_free_r+0x58>
 8005440:	42a3      	cmp	r3, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x4e>
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	1855      	adds	r5, r2, r1
 8005448:	42a5      	cmp	r5, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x78>
 800544c:	6824      	ldr	r4, [r4, #0]
 800544e:	4421      	add	r1, r4
 8005450:	1854      	adds	r4, r2, r1
 8005452:	42a3      	cmp	r3, r4
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	d1dd      	bne.n	8005414 <_free_r+0x28>
 8005458:	681c      	ldr	r4, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	6053      	str	r3, [r2, #4]
 800545e:	4421      	add	r1, r4
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	e7d7      	b.n	8005414 <_free_r+0x28>
 8005464:	d902      	bls.n	800546c <_free_r+0x80>
 8005466:	230c      	movs	r3, #12
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	e7d3      	b.n	8005414 <_free_r+0x28>
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	1961      	adds	r1, r4, r5
 8005470:	428b      	cmp	r3, r1
 8005472:	bf04      	itt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	bf04      	itt	eq
 800547c:	1949      	addeq	r1, r1, r5
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	6054      	str	r4, [r2, #4]
 8005482:	e7c7      	b.n	8005414 <_free_r+0x28>
 8005484:	b003      	add	sp, #12
 8005486:	bd30      	pop	{r4, r5, pc}
 8005488:	200001c0 	.word	0x200001c0

0800548c <_malloc_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	1ccd      	adds	r5, r1, #3
 8005490:	f025 0503 	bic.w	r5, r5, #3
 8005494:	3508      	adds	r5, #8
 8005496:	2d0c      	cmp	r5, #12
 8005498:	bf38      	it	cc
 800549a:	250c      	movcc	r5, #12
 800549c:	2d00      	cmp	r5, #0
 800549e:	4606      	mov	r6, r0
 80054a0:	db01      	blt.n	80054a6 <_malloc_r+0x1a>
 80054a2:	42a9      	cmp	r1, r5
 80054a4:	d903      	bls.n	80054ae <_malloc_r+0x22>
 80054a6:	230c      	movs	r3, #12
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	2000      	movs	r0, #0
 80054ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ae:	f000 fd45 	bl	8005f3c <__malloc_lock>
 80054b2:	4921      	ldr	r1, [pc, #132]	; (8005538 <_malloc_r+0xac>)
 80054b4:	680a      	ldr	r2, [r1, #0]
 80054b6:	4614      	mov	r4, r2
 80054b8:	b99c      	cbnz	r4, 80054e2 <_malloc_r+0x56>
 80054ba:	4f20      	ldr	r7, [pc, #128]	; (800553c <_malloc_r+0xb0>)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	b923      	cbnz	r3, 80054ca <_malloc_r+0x3e>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f94e 	bl	8005764 <_sbrk_r>
 80054c8:	6038      	str	r0, [r7, #0]
 80054ca:	4629      	mov	r1, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	f000 f949 	bl	8005764 <_sbrk_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d123      	bne.n	800551e <_malloc_r+0x92>
 80054d6:	230c      	movs	r3, #12
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 fd34 	bl	8005f48 <__malloc_unlock>
 80054e0:	e7e3      	b.n	80054aa <_malloc_r+0x1e>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	1b5b      	subs	r3, r3, r5
 80054e6:	d417      	bmi.n	8005518 <_malloc_r+0x8c>
 80054e8:	2b0b      	cmp	r3, #11
 80054ea:	d903      	bls.n	80054f4 <_malloc_r+0x68>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	441c      	add	r4, r3
 80054f0:	6025      	str	r5, [r4, #0]
 80054f2:	e004      	b.n	80054fe <_malloc_r+0x72>
 80054f4:	6863      	ldr	r3, [r4, #4]
 80054f6:	42a2      	cmp	r2, r4
 80054f8:	bf0c      	ite	eq
 80054fa:	600b      	streq	r3, [r1, #0]
 80054fc:	6053      	strne	r3, [r2, #4]
 80054fe:	4630      	mov	r0, r6
 8005500:	f000 fd22 	bl	8005f48 <__malloc_unlock>
 8005504:	f104 000b 	add.w	r0, r4, #11
 8005508:	1d23      	adds	r3, r4, #4
 800550a:	f020 0007 	bic.w	r0, r0, #7
 800550e:	1ac2      	subs	r2, r0, r3
 8005510:	d0cc      	beq.n	80054ac <_malloc_r+0x20>
 8005512:	1a1b      	subs	r3, r3, r0
 8005514:	50a3      	str	r3, [r4, r2]
 8005516:	e7c9      	b.n	80054ac <_malloc_r+0x20>
 8005518:	4622      	mov	r2, r4
 800551a:	6864      	ldr	r4, [r4, #4]
 800551c:	e7cc      	b.n	80054b8 <_malloc_r+0x2c>
 800551e:	1cc4      	adds	r4, r0, #3
 8005520:	f024 0403 	bic.w	r4, r4, #3
 8005524:	42a0      	cmp	r0, r4
 8005526:	d0e3      	beq.n	80054f0 <_malloc_r+0x64>
 8005528:	1a21      	subs	r1, r4, r0
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f91a 	bl	8005764 <_sbrk_r>
 8005530:	3001      	adds	r0, #1
 8005532:	d1dd      	bne.n	80054f0 <_malloc_r+0x64>
 8005534:	e7cf      	b.n	80054d6 <_malloc_r+0x4a>
 8005536:	bf00      	nop
 8005538:	200001c0 	.word	0x200001c0
 800553c:	200001c4 	.word	0x200001c4

08005540 <iprintf>:
 8005540:	b40f      	push	{r0, r1, r2, r3}
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <iprintf+0x2c>)
 8005544:	b513      	push	{r0, r1, r4, lr}
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	b124      	cbz	r4, 8005554 <iprintf+0x14>
 800554a:	69a3      	ldr	r3, [r4, #24]
 800554c:	b913      	cbnz	r3, 8005554 <iprintf+0x14>
 800554e:	4620      	mov	r0, r4
 8005550:	f000 fbde 	bl	8005d10 <__sinit>
 8005554:	ab05      	add	r3, sp, #20
 8005556:	9a04      	ldr	r2, [sp, #16]
 8005558:	68a1      	ldr	r1, [r4, #8]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fd23 	bl	8005fa8 <_vfiprintf_r>
 8005562:	b002      	add	sp, #8
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	b004      	add	sp, #16
 800556a:	4770      	bx	lr
 800556c:	2000002c 	.word	0x2000002c

08005570 <putchar>:
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <putchar+0x28>)
 8005572:	b513      	push	{r0, r1, r4, lr}
 8005574:	681c      	ldr	r4, [r3, #0]
 8005576:	4601      	mov	r1, r0
 8005578:	b134      	cbz	r4, 8005588 <putchar+0x18>
 800557a:	69a3      	ldr	r3, [r4, #24]
 800557c:	b923      	cbnz	r3, 8005588 <putchar+0x18>
 800557e:	9001      	str	r0, [sp, #4]
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fbc5 	bl	8005d10 <__sinit>
 8005586:	9901      	ldr	r1, [sp, #4]
 8005588:	68a2      	ldr	r2, [r4, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	b002      	add	sp, #8
 800558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005592:	f000 bfcd 	b.w	8006530 <_putc_r>
 8005596:	bf00      	nop
 8005598:	2000002c 	.word	0x2000002c

0800559c <_puts_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	460e      	mov	r6, r1
 80055a0:	4605      	mov	r5, r0
 80055a2:	b118      	cbz	r0, 80055ac <_puts_r+0x10>
 80055a4:	6983      	ldr	r3, [r0, #24]
 80055a6:	b90b      	cbnz	r3, 80055ac <_puts_r+0x10>
 80055a8:	f000 fbb2 	bl	8005d10 <__sinit>
 80055ac:	69ab      	ldr	r3, [r5, #24]
 80055ae:	68ac      	ldr	r4, [r5, #8]
 80055b0:	b913      	cbnz	r3, 80055b8 <_puts_r+0x1c>
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 fbac 	bl	8005d10 <__sinit>
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <_puts_r+0xd0>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d120      	bne.n	8005600 <_puts_r+0x64>
 80055be:	686c      	ldr	r4, [r5, #4]
 80055c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c2:	07db      	lsls	r3, r3, #31
 80055c4:	d405      	bmi.n	80055d2 <_puts_r+0x36>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	0598      	lsls	r0, r3, #22
 80055ca:	d402      	bmi.n	80055d2 <_puts_r+0x36>
 80055cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ce:	f000 fc4f 	bl	8005e70 <__retarget_lock_acquire_recursive>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	0719      	lsls	r1, r3, #28
 80055d6:	d51d      	bpl.n	8005614 <_puts_r+0x78>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	b1db      	cbz	r3, 8005614 <_puts_r+0x78>
 80055dc:	3e01      	subs	r6, #1
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055e4:	3b01      	subs	r3, #1
 80055e6:	60a3      	str	r3, [r4, #8]
 80055e8:	bb39      	cbnz	r1, 800563a <_puts_r+0x9e>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da38      	bge.n	8005660 <_puts_r+0xc4>
 80055ee:	4622      	mov	r2, r4
 80055f0:	210a      	movs	r1, #10
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f994 	bl	8005920 <__swbuf_r>
 80055f8:	3001      	adds	r0, #1
 80055fa:	d011      	beq.n	8005620 <_puts_r+0x84>
 80055fc:	250a      	movs	r5, #10
 80055fe:	e011      	b.n	8005624 <_puts_r+0x88>
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <_puts_r+0xd4>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d101      	bne.n	800560a <_puts_r+0x6e>
 8005606:	68ac      	ldr	r4, [r5, #8]
 8005608:	e7da      	b.n	80055c0 <_puts_r+0x24>
 800560a:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <_puts_r+0xd8>)
 800560c:	429c      	cmp	r4, r3
 800560e:	bf08      	it	eq
 8005610:	68ec      	ldreq	r4, [r5, #12]
 8005612:	e7d5      	b.n	80055c0 <_puts_r+0x24>
 8005614:	4621      	mov	r1, r4
 8005616:	4628      	mov	r0, r5
 8005618:	f000 f9d4 	bl	80059c4 <__swsetup_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	d0dd      	beq.n	80055dc <_puts_r+0x40>
 8005620:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005626:	07da      	lsls	r2, r3, #31
 8005628:	d405      	bmi.n	8005636 <_puts_r+0x9a>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	059b      	lsls	r3, r3, #22
 800562e:	d402      	bmi.n	8005636 <_puts_r+0x9a>
 8005630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005632:	f000 fc1e 	bl	8005e72 <__retarget_lock_release_recursive>
 8005636:	4628      	mov	r0, r5
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	2b00      	cmp	r3, #0
 800563c:	da04      	bge.n	8005648 <_puts_r+0xac>
 800563e:	69a2      	ldr	r2, [r4, #24]
 8005640:	429a      	cmp	r2, r3
 8005642:	dc06      	bgt.n	8005652 <_puts_r+0xb6>
 8005644:	290a      	cmp	r1, #10
 8005646:	d004      	beq.n	8005652 <_puts_r+0xb6>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	6022      	str	r2, [r4, #0]
 800564e:	7019      	strb	r1, [r3, #0]
 8005650:	e7c5      	b.n	80055de <_puts_r+0x42>
 8005652:	4622      	mov	r2, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f963 	bl	8005920 <__swbuf_r>
 800565a:	3001      	adds	r0, #1
 800565c:	d1bf      	bne.n	80055de <_puts_r+0x42>
 800565e:	e7df      	b.n	8005620 <_puts_r+0x84>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	250a      	movs	r5, #10
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	6022      	str	r2, [r4, #0]
 8005668:	701d      	strb	r5, [r3, #0]
 800566a:	e7db      	b.n	8005624 <_puts_r+0x88>
 800566c:	08006e90 	.word	0x08006e90
 8005670:	08006eb0 	.word	0x08006eb0
 8005674:	08006e70 	.word	0x08006e70

08005678 <puts>:
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <puts+0xc>)
 800567a:	4601      	mov	r1, r0
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	f7ff bf8d 	b.w	800559c <_puts_r>
 8005682:	bf00      	nop
 8005684:	2000002c 	.word	0x2000002c

08005688 <srand>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <srand+0x44>)
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005690:	4604      	mov	r4, r0
 8005692:	b9b3      	cbnz	r3, 80056c2 <srand+0x3a>
 8005694:	2018      	movs	r0, #24
 8005696:	f7ff fe91 	bl	80053bc <malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	63a8      	str	r0, [r5, #56]	; 0x38
 800569e:	b920      	cbnz	r0, 80056aa <srand+0x22>
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <srand+0x48>)
 80056a2:	480c      	ldr	r0, [pc, #48]	; (80056d4 <srand+0x4c>)
 80056a4:	2142      	movs	r1, #66	; 0x42
 80056a6:	f000 f9fb 	bl	8005aa0 <__assert_func>
 80056aa:	490b      	ldr	r1, [pc, #44]	; (80056d8 <srand+0x50>)
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <srand+0x54>)
 80056ae:	e9c0 1300 	strd	r1, r3, [r0]
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <srand+0x58>)
 80056b4:	6083      	str	r3, [r0, #8]
 80056b6:	230b      	movs	r3, #11
 80056b8:	8183      	strh	r3, [r0, #12]
 80056ba:	2100      	movs	r1, #0
 80056bc:	2001      	movs	r0, #1
 80056be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80056c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80056c4:	2200      	movs	r2, #0
 80056c6:	611c      	str	r4, [r3, #16]
 80056c8:	615a      	str	r2, [r3, #20]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	2000002c 	.word	0x2000002c
 80056d0:	08006dbc 	.word	0x08006dbc
 80056d4:	08006dd3 	.word	0x08006dd3
 80056d8:	abcd330e 	.word	0xabcd330e
 80056dc:	e66d1234 	.word	0xe66d1234
 80056e0:	0005deec 	.word	0x0005deec

080056e4 <rand>:
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <rand+0x60>)
 80056e6:	b510      	push	{r4, lr}
 80056e8:	681c      	ldr	r4, [r3, #0]
 80056ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056ec:	b9b3      	cbnz	r3, 800571c <rand+0x38>
 80056ee:	2018      	movs	r0, #24
 80056f0:	f7ff fe64 	bl	80053bc <malloc>
 80056f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80056f6:	b928      	cbnz	r0, 8005704 <rand+0x20>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <rand+0x64>)
 80056fc:	4813      	ldr	r0, [pc, #76]	; (800574c <rand+0x68>)
 80056fe:	214e      	movs	r1, #78	; 0x4e
 8005700:	f000 f9ce 	bl	8005aa0 <__assert_func>
 8005704:	4a12      	ldr	r2, [pc, #72]	; (8005750 <rand+0x6c>)
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <rand+0x70>)
 8005708:	e9c0 2300 	strd	r2, r3, [r0]
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <rand+0x74>)
 800570e:	6083      	str	r3, [r0, #8]
 8005710:	230b      	movs	r3, #11
 8005712:	8183      	strh	r3, [r0, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	2300      	movs	r3, #0
 8005718:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800571c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800571e:	480f      	ldr	r0, [pc, #60]	; (800575c <rand+0x78>)
 8005720:	690a      	ldr	r2, [r1, #16]
 8005722:	694b      	ldr	r3, [r1, #20]
 8005724:	4c0e      	ldr	r4, [pc, #56]	; (8005760 <rand+0x7c>)
 8005726:	4350      	muls	r0, r2
 8005728:	fb04 0003 	mla	r0, r4, r3, r0
 800572c:	fba2 3404 	umull	r3, r4, r2, r4
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	4404      	add	r4, r0
 8005734:	f144 0000 	adc.w	r0, r4, #0
 8005738:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800573c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	2000002c 	.word	0x2000002c
 8005748:	08006dbc 	.word	0x08006dbc
 800574c:	08006dd3 	.word	0x08006dd3
 8005750:	abcd330e 	.word	0xabcd330e
 8005754:	e66d1234 	.word	0xe66d1234
 8005758:	0005deec 	.word	0x0005deec
 800575c:	5851f42d 	.word	0x5851f42d
 8005760:	4c957f2d 	.word	0x4c957f2d

08005764 <_sbrk_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d06      	ldr	r5, [pc, #24]	; (8005780 <_sbrk_r+0x1c>)
 8005768:	2300      	movs	r3, #0
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f7ff fd10 	bl	8005194 <_sbrk>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_sbrk_r+0x1a>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_sbrk_r+0x1a>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200001d8 	.word	0x200001d8

08005784 <setbuf>:
 8005784:	2900      	cmp	r1, #0
 8005786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578a:	bf0c      	ite	eq
 800578c:	2202      	moveq	r2, #2
 800578e:	2200      	movne	r2, #0
 8005790:	f000 b800 	b.w	8005794 <setvbuf>

08005794 <setvbuf>:
 8005794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005798:	461d      	mov	r5, r3
 800579a:	4b5d      	ldr	r3, [pc, #372]	; (8005910 <setvbuf+0x17c>)
 800579c:	681f      	ldr	r7, [r3, #0]
 800579e:	4604      	mov	r4, r0
 80057a0:	460e      	mov	r6, r1
 80057a2:	4690      	mov	r8, r2
 80057a4:	b127      	cbz	r7, 80057b0 <setvbuf+0x1c>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b913      	cbnz	r3, 80057b0 <setvbuf+0x1c>
 80057aa:	4638      	mov	r0, r7
 80057ac:	f000 fab0 	bl	8005d10 <__sinit>
 80057b0:	4b58      	ldr	r3, [pc, #352]	; (8005914 <setvbuf+0x180>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d167      	bne.n	8005886 <setvbuf+0xf2>
 80057b6:	687c      	ldr	r4, [r7, #4]
 80057b8:	f1b8 0f02 	cmp.w	r8, #2
 80057bc:	d006      	beq.n	80057cc <setvbuf+0x38>
 80057be:	f1b8 0f01 	cmp.w	r8, #1
 80057c2:	f200 809f 	bhi.w	8005904 <setvbuf+0x170>
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	f2c0 809c 	blt.w	8005904 <setvbuf+0x170>
 80057cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d405      	bmi.n	80057de <setvbuf+0x4a>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	0598      	lsls	r0, r3, #22
 80057d6:	d402      	bmi.n	80057de <setvbuf+0x4a>
 80057d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057da:	f000 fb49 	bl	8005e70 <__retarget_lock_acquire_recursive>
 80057de:	4621      	mov	r1, r4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f000 fa01 	bl	8005be8 <_fflush_r>
 80057e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057e8:	b141      	cbz	r1, 80057fc <setvbuf+0x68>
 80057ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057ee:	4299      	cmp	r1, r3
 80057f0:	d002      	beq.n	80057f8 <setvbuf+0x64>
 80057f2:	4638      	mov	r0, r7
 80057f4:	f7ff fdfa 	bl	80053ec <_free_r>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6363      	str	r3, [r4, #52]	; 0x34
 80057fc:	2300      	movs	r3, #0
 80057fe:	61a3      	str	r3, [r4, #24]
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	0619      	lsls	r1, r3, #24
 8005806:	d503      	bpl.n	8005810 <setvbuf+0x7c>
 8005808:	6921      	ldr	r1, [r4, #16]
 800580a:	4638      	mov	r0, r7
 800580c:	f7ff fdee 	bl	80053ec <_free_r>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	f1b8 0f02 	cmp.w	r8, #2
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	d06c      	beq.n	80058fc <setvbuf+0x168>
 8005822:	ab01      	add	r3, sp, #4
 8005824:	466a      	mov	r2, sp
 8005826:	4621      	mov	r1, r4
 8005828:	4638      	mov	r0, r7
 800582a:	f000 fb23 	bl	8005e74 <__swhatbuf_r>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	4318      	orrs	r0, r3
 8005832:	81a0      	strh	r0, [r4, #12]
 8005834:	2d00      	cmp	r5, #0
 8005836:	d130      	bne.n	800589a <setvbuf+0x106>
 8005838:	9d00      	ldr	r5, [sp, #0]
 800583a:	4628      	mov	r0, r5
 800583c:	f7ff fdbe 	bl	80053bc <malloc>
 8005840:	4606      	mov	r6, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d155      	bne.n	80058f2 <setvbuf+0x15e>
 8005846:	f8dd 9000 	ldr.w	r9, [sp]
 800584a:	45a9      	cmp	r9, r5
 800584c:	d14a      	bne.n	80058e4 <setvbuf+0x150>
 800584e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005852:	2200      	movs	r2, #0
 8005854:	60a2      	str	r2, [r4, #8]
 8005856:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	6122      	str	r2, [r4, #16]
 800585e:	2201      	movs	r2, #1
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	6162      	str	r2, [r4, #20]
 8005866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	07d2      	lsls	r2, r2, #31
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	d405      	bmi.n	800587e <setvbuf+0xea>
 8005872:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005876:	d102      	bne.n	800587e <setvbuf+0xea>
 8005878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800587a:	f000 fafa 	bl	8005e72 <__retarget_lock_release_recursive>
 800587e:	4628      	mov	r0, r5
 8005880:	b003      	add	sp, #12
 8005882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <setvbuf+0x184>)
 8005888:	429c      	cmp	r4, r3
 800588a:	d101      	bne.n	8005890 <setvbuf+0xfc>
 800588c:	68bc      	ldr	r4, [r7, #8]
 800588e:	e793      	b.n	80057b8 <setvbuf+0x24>
 8005890:	4b22      	ldr	r3, [pc, #136]	; (800591c <setvbuf+0x188>)
 8005892:	429c      	cmp	r4, r3
 8005894:	bf08      	it	eq
 8005896:	68fc      	ldreq	r4, [r7, #12]
 8005898:	e78e      	b.n	80057b8 <setvbuf+0x24>
 800589a:	2e00      	cmp	r6, #0
 800589c:	d0cd      	beq.n	800583a <setvbuf+0xa6>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	b913      	cbnz	r3, 80058a8 <setvbuf+0x114>
 80058a2:	4638      	mov	r0, r7
 80058a4:	f000 fa34 	bl	8005d10 <__sinit>
 80058a8:	f1b8 0f01 	cmp.w	r8, #1
 80058ac:	bf08      	it	eq
 80058ae:	89a3      	ldrheq	r3, [r4, #12]
 80058b0:	6026      	str	r6, [r4, #0]
 80058b2:	bf04      	itt	eq
 80058b4:	f043 0301 	orreq.w	r3, r3, #1
 80058b8:	81a3      	strheq	r3, [r4, #12]
 80058ba:	89a2      	ldrh	r2, [r4, #12]
 80058bc:	f012 0308 	ands.w	r3, r2, #8
 80058c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80058c4:	d01c      	beq.n	8005900 <setvbuf+0x16c>
 80058c6:	07d3      	lsls	r3, r2, #31
 80058c8:	bf41      	itttt	mi
 80058ca:	2300      	movmi	r3, #0
 80058cc:	426d      	negmi	r5, r5
 80058ce:	60a3      	strmi	r3, [r4, #8]
 80058d0:	61a5      	strmi	r5, [r4, #24]
 80058d2:	bf58      	it	pl
 80058d4:	60a5      	strpl	r5, [r4, #8]
 80058d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80058d8:	f015 0501 	ands.w	r5, r5, #1
 80058dc:	d115      	bne.n	800590a <setvbuf+0x176>
 80058de:	f412 7f00 	tst.w	r2, #512	; 0x200
 80058e2:	e7c8      	b.n	8005876 <setvbuf+0xe2>
 80058e4:	4648      	mov	r0, r9
 80058e6:	f7ff fd69 	bl	80053bc <malloc>
 80058ea:	4606      	mov	r6, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d0ae      	beq.n	800584e <setvbuf+0xba>
 80058f0:	464d      	mov	r5, r9
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	e7d0      	b.n	800589e <setvbuf+0x10a>
 80058fc:	2500      	movs	r5, #0
 80058fe:	e7a8      	b.n	8005852 <setvbuf+0xbe>
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	e7e8      	b.n	80058d6 <setvbuf+0x142>
 8005904:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005908:	e7b9      	b.n	800587e <setvbuf+0xea>
 800590a:	2500      	movs	r5, #0
 800590c:	e7b7      	b.n	800587e <setvbuf+0xea>
 800590e:	bf00      	nop
 8005910:	2000002c 	.word	0x2000002c
 8005914:	08006e90 	.word	0x08006e90
 8005918:	08006eb0 	.word	0x08006eb0
 800591c:	08006e70 	.word	0x08006e70

08005920 <__swbuf_r>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	460e      	mov	r6, r1
 8005924:	4614      	mov	r4, r2
 8005926:	4605      	mov	r5, r0
 8005928:	b118      	cbz	r0, 8005932 <__swbuf_r+0x12>
 800592a:	6983      	ldr	r3, [r0, #24]
 800592c:	b90b      	cbnz	r3, 8005932 <__swbuf_r+0x12>
 800592e:	f000 f9ef 	bl	8005d10 <__sinit>
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <__swbuf_r+0x98>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d12b      	bne.n	8005990 <__swbuf_r+0x70>
 8005938:	686c      	ldr	r4, [r5, #4]
 800593a:	69a3      	ldr	r3, [r4, #24]
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	071a      	lsls	r2, r3, #28
 8005942:	d52f      	bpl.n	80059a4 <__swbuf_r+0x84>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	b36b      	cbz	r3, 80059a4 <__swbuf_r+0x84>
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	6820      	ldr	r0, [r4, #0]
 800594c:	1ac0      	subs	r0, r0, r3
 800594e:	6963      	ldr	r3, [r4, #20]
 8005950:	b2f6      	uxtb	r6, r6
 8005952:	4283      	cmp	r3, r0
 8005954:	4637      	mov	r7, r6
 8005956:	dc04      	bgt.n	8005962 <__swbuf_r+0x42>
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	f000 f944 	bl	8005be8 <_fflush_r>
 8005960:	bb30      	cbnz	r0, 80059b0 <__swbuf_r+0x90>
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	3b01      	subs	r3, #1
 8005966:	60a3      	str	r3, [r4, #8]
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	701e      	strb	r6, [r3, #0]
 8005970:	6963      	ldr	r3, [r4, #20]
 8005972:	3001      	adds	r0, #1
 8005974:	4283      	cmp	r3, r0
 8005976:	d004      	beq.n	8005982 <__swbuf_r+0x62>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d506      	bpl.n	800598c <__swbuf_r+0x6c>
 800597e:	2e0a      	cmp	r6, #10
 8005980:	d104      	bne.n	800598c <__swbuf_r+0x6c>
 8005982:	4621      	mov	r1, r4
 8005984:	4628      	mov	r0, r5
 8005986:	f000 f92f 	bl	8005be8 <_fflush_r>
 800598a:	b988      	cbnz	r0, 80059b0 <__swbuf_r+0x90>
 800598c:	4638      	mov	r0, r7
 800598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <__swbuf_r+0x9c>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d101      	bne.n	800599a <__swbuf_r+0x7a>
 8005996:	68ac      	ldr	r4, [r5, #8]
 8005998:	e7cf      	b.n	800593a <__swbuf_r+0x1a>
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <__swbuf_r+0xa0>)
 800599c:	429c      	cmp	r4, r3
 800599e:	bf08      	it	eq
 80059a0:	68ec      	ldreq	r4, [r5, #12]
 80059a2:	e7ca      	b.n	800593a <__swbuf_r+0x1a>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f80c 	bl	80059c4 <__swsetup_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d0cb      	beq.n	8005948 <__swbuf_r+0x28>
 80059b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059b4:	e7ea      	b.n	800598c <__swbuf_r+0x6c>
 80059b6:	bf00      	nop
 80059b8:	08006e90 	.word	0x08006e90
 80059bc:	08006eb0 	.word	0x08006eb0
 80059c0:	08006e70 	.word	0x08006e70

080059c4 <__swsetup_r>:
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <__swsetup_r+0xcc>)
 80059c6:	b570      	push	{r4, r5, r6, lr}
 80059c8:	681d      	ldr	r5, [r3, #0]
 80059ca:	4606      	mov	r6, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	b125      	cbz	r5, 80059da <__swsetup_r+0x16>
 80059d0:	69ab      	ldr	r3, [r5, #24]
 80059d2:	b913      	cbnz	r3, 80059da <__swsetup_r+0x16>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f99b 	bl	8005d10 <__sinit>
 80059da:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <__swsetup_r+0xd0>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	d10f      	bne.n	8005a00 <__swsetup_r+0x3c>
 80059e0:	686c      	ldr	r4, [r5, #4]
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e8:	0719      	lsls	r1, r3, #28
 80059ea:	d42c      	bmi.n	8005a46 <__swsetup_r+0x82>
 80059ec:	06dd      	lsls	r5, r3, #27
 80059ee:	d411      	bmi.n	8005a14 <__swsetup_r+0x50>
 80059f0:	2309      	movs	r3, #9
 80059f2:	6033      	str	r3, [r6, #0]
 80059f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059fe:	e03e      	b.n	8005a7e <__swsetup_r+0xba>
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <__swsetup_r+0xd4>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	d101      	bne.n	8005a0a <__swsetup_r+0x46>
 8005a06:	68ac      	ldr	r4, [r5, #8]
 8005a08:	e7eb      	b.n	80059e2 <__swsetup_r+0x1e>
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <__swsetup_r+0xd8>)
 8005a0c:	429c      	cmp	r4, r3
 8005a0e:	bf08      	it	eq
 8005a10:	68ec      	ldreq	r4, [r5, #12]
 8005a12:	e7e6      	b.n	80059e2 <__swsetup_r+0x1e>
 8005a14:	0758      	lsls	r0, r3, #29
 8005a16:	d512      	bpl.n	8005a3e <__swsetup_r+0x7a>
 8005a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a1a:	b141      	cbz	r1, 8005a2e <__swsetup_r+0x6a>
 8005a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a20:	4299      	cmp	r1, r3
 8005a22:	d002      	beq.n	8005a2a <__swsetup_r+0x66>
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7ff fce1 	bl	80053ec <_free_r>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	2300      	movs	r3, #0
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	b94b      	cbnz	r3, 8005a5e <__swsetup_r+0x9a>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a54:	d003      	beq.n	8005a5e <__swsetup_r+0x9a>
 8005a56:	4621      	mov	r1, r4
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fa2f 	bl	8005ebc <__smakebuf_r>
 8005a5e:	89a0      	ldrh	r0, [r4, #12]
 8005a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a64:	f010 0301 	ands.w	r3, r0, #1
 8005a68:	d00a      	beq.n	8005a80 <__swsetup_r+0xbc>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60a3      	str	r3, [r4, #8]
 8005a6e:	6963      	ldr	r3, [r4, #20]
 8005a70:	425b      	negs	r3, r3
 8005a72:	61a3      	str	r3, [r4, #24]
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	b943      	cbnz	r3, 8005a8a <__swsetup_r+0xc6>
 8005a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a7c:	d1ba      	bne.n	80059f4 <__swsetup_r+0x30>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	0781      	lsls	r1, r0, #30
 8005a82:	bf58      	it	pl
 8005a84:	6963      	ldrpl	r3, [r4, #20]
 8005a86:	60a3      	str	r3, [r4, #8]
 8005a88:	e7f4      	b.n	8005a74 <__swsetup_r+0xb0>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e7f7      	b.n	8005a7e <__swsetup_r+0xba>
 8005a8e:	bf00      	nop
 8005a90:	2000002c 	.word	0x2000002c
 8005a94:	08006e90 	.word	0x08006e90
 8005a98:	08006eb0 	.word	0x08006eb0
 8005a9c:	08006e70 	.word	0x08006e70

08005aa0 <__assert_func>:
 8005aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aa2:	4614      	mov	r4, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <__assert_func+0x2c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4605      	mov	r5, r0
 8005aac:	68d8      	ldr	r0, [r3, #12]
 8005aae:	b14c      	cbz	r4, 8005ac4 <__assert_func+0x24>
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <__assert_func+0x30>)
 8005ab2:	9100      	str	r1, [sp, #0]
 8005ab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ab8:	4906      	ldr	r1, [pc, #24]	; (8005ad4 <__assert_func+0x34>)
 8005aba:	462b      	mov	r3, r5
 8005abc:	f000 f9a6 	bl	8005e0c <fiprintf>
 8005ac0:	f000 fdc1 	bl	8006646 <abort>
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <__assert_func+0x38>)
 8005ac6:	461c      	mov	r4, r3
 8005ac8:	e7f3      	b.n	8005ab2 <__assert_func+0x12>
 8005aca:	bf00      	nop
 8005acc:	2000002c 	.word	0x2000002c
 8005ad0:	08006e32 	.word	0x08006e32
 8005ad4:	08006e3f 	.word	0x08006e3f
 8005ad8:	08006e6d 	.word	0x08006e6d

08005adc <__sflush_r>:
 8005adc:	898a      	ldrh	r2, [r1, #12]
 8005ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	0710      	lsls	r0, r2, #28
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	d458      	bmi.n	8005b9c <__sflush_r+0xc0>
 8005aea:	684b      	ldr	r3, [r1, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc05      	bgt.n	8005afc <__sflush_r+0x20>
 8005af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dc02      	bgt.n	8005afc <__sflush_r+0x20>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	d0f9      	beq.n	8005af6 <__sflush_r+0x1a>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b08:	682f      	ldr	r7, [r5, #0]
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	d032      	beq.n	8005b74 <__sflush_r+0x98>
 8005b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	075a      	lsls	r2, r3, #29
 8005b14:	d505      	bpl.n	8005b22 <__sflush_r+0x46>
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	1ac0      	subs	r0, r0, r3
 8005b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b1c:	b10b      	cbz	r3, 8005b22 <__sflush_r+0x46>
 8005b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	2300      	movs	r3, #0
 8005b24:	4602      	mov	r2, r0
 8005b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b28:	6a21      	ldr	r1, [r4, #32]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b0      	blx	r6
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	d106      	bne.n	8005b42 <__sflush_r+0x66>
 8005b34:	6829      	ldr	r1, [r5, #0]
 8005b36:	291d      	cmp	r1, #29
 8005b38:	d82c      	bhi.n	8005b94 <__sflush_r+0xb8>
 8005b3a:	4a2a      	ldr	r2, [pc, #168]	; (8005be4 <__sflush_r+0x108>)
 8005b3c:	40ca      	lsrs	r2, r1
 8005b3e:	07d6      	lsls	r6, r2, #31
 8005b40:	d528      	bpl.n	8005b94 <__sflush_r+0xb8>
 8005b42:	2200      	movs	r2, #0
 8005b44:	6062      	str	r2, [r4, #4]
 8005b46:	04d9      	lsls	r1, r3, #19
 8005b48:	6922      	ldr	r2, [r4, #16]
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	d504      	bpl.n	8005b58 <__sflush_r+0x7c>
 8005b4e:	1c42      	adds	r2, r0, #1
 8005b50:	d101      	bne.n	8005b56 <__sflush_r+0x7a>
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	b903      	cbnz	r3, 8005b58 <__sflush_r+0x7c>
 8005b56:	6560      	str	r0, [r4, #84]	; 0x54
 8005b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5a:	602f      	str	r7, [r5, #0]
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d0ca      	beq.n	8005af6 <__sflush_r+0x1a>
 8005b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b64:	4299      	cmp	r1, r3
 8005b66:	d002      	beq.n	8005b6e <__sflush_r+0x92>
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff fc3f 	bl	80053ec <_free_r>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	6360      	str	r0, [r4, #52]	; 0x34
 8005b72:	e7c1      	b.n	8005af8 <__sflush_r+0x1c>
 8005b74:	6a21      	ldr	r1, [r4, #32]
 8005b76:	2301      	movs	r3, #1
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b0      	blx	r6
 8005b7c:	1c41      	adds	r1, r0, #1
 8005b7e:	d1c7      	bne.n	8005b10 <__sflush_r+0x34>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c4      	beq.n	8005b10 <__sflush_r+0x34>
 8005b86:	2b1d      	cmp	r3, #29
 8005b88:	d001      	beq.n	8005b8e <__sflush_r+0xb2>
 8005b8a:	2b16      	cmp	r3, #22
 8005b8c:	d101      	bne.n	8005b92 <__sflush_r+0xb6>
 8005b8e:	602f      	str	r7, [r5, #0]
 8005b90:	e7b1      	b.n	8005af6 <__sflush_r+0x1a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	e7ad      	b.n	8005af8 <__sflush_r+0x1c>
 8005b9c:	690f      	ldr	r7, [r1, #16]
 8005b9e:	2f00      	cmp	r7, #0
 8005ba0:	d0a9      	beq.n	8005af6 <__sflush_r+0x1a>
 8005ba2:	0793      	lsls	r3, r2, #30
 8005ba4:	680e      	ldr	r6, [r1, #0]
 8005ba6:	bf08      	it	eq
 8005ba8:	694b      	ldreq	r3, [r1, #20]
 8005baa:	600f      	str	r7, [r1, #0]
 8005bac:	bf18      	it	ne
 8005bae:	2300      	movne	r3, #0
 8005bb0:	eba6 0807 	sub.w	r8, r6, r7
 8005bb4:	608b      	str	r3, [r1, #8]
 8005bb6:	f1b8 0f00 	cmp.w	r8, #0
 8005bba:	dd9c      	ble.n	8005af6 <__sflush_r+0x1a>
 8005bbc:	6a21      	ldr	r1, [r4, #32]
 8005bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dc06      	bgt.n	8005bda <__sflush_r+0xfe>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd8:	e78e      	b.n	8005af8 <__sflush_r+0x1c>
 8005bda:	4407      	add	r7, r0
 8005bdc:	eba8 0800 	sub.w	r8, r8, r0
 8005be0:	e7e9      	b.n	8005bb6 <__sflush_r+0xda>
 8005be2:	bf00      	nop
 8005be4:	20400001 	.word	0x20400001

08005be8 <_fflush_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	4605      	mov	r5, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	b913      	cbnz	r3, 8005bf8 <_fflush_r+0x10>
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	b118      	cbz	r0, 8005c02 <_fflush_r+0x1a>
 8005bfa:	6983      	ldr	r3, [r0, #24]
 8005bfc:	b90b      	cbnz	r3, 8005c02 <_fflush_r+0x1a>
 8005bfe:	f000 f887 	bl	8005d10 <__sinit>
 8005c02:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <_fflush_r+0x6c>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	d11b      	bne.n	8005c40 <_fflush_r+0x58>
 8005c08:	686c      	ldr	r4, [r5, #4]
 8005c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ef      	beq.n	8005bf2 <_fflush_r+0xa>
 8005c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c14:	07d0      	lsls	r0, r2, #31
 8005c16:	d404      	bmi.n	8005c22 <_fflush_r+0x3a>
 8005c18:	0599      	lsls	r1, r3, #22
 8005c1a:	d402      	bmi.n	8005c22 <_fflush_r+0x3a>
 8005c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c1e:	f000 f927 	bl	8005e70 <__retarget_lock_acquire_recursive>
 8005c22:	4628      	mov	r0, r5
 8005c24:	4621      	mov	r1, r4
 8005c26:	f7ff ff59 	bl	8005adc <__sflush_r>
 8005c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c2c:	07da      	lsls	r2, r3, #31
 8005c2e:	4605      	mov	r5, r0
 8005c30:	d4e0      	bmi.n	8005bf4 <_fflush_r+0xc>
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	d4dd      	bmi.n	8005bf4 <_fflush_r+0xc>
 8005c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3a:	f000 f91a 	bl	8005e72 <__retarget_lock_release_recursive>
 8005c3e:	e7d9      	b.n	8005bf4 <_fflush_r+0xc>
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <_fflush_r+0x70>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d101      	bne.n	8005c4a <_fflush_r+0x62>
 8005c46:	68ac      	ldr	r4, [r5, #8]
 8005c48:	e7df      	b.n	8005c0a <_fflush_r+0x22>
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <_fflush_r+0x74>)
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	bf08      	it	eq
 8005c50:	68ec      	ldreq	r4, [r5, #12]
 8005c52:	e7da      	b.n	8005c0a <_fflush_r+0x22>
 8005c54:	08006e90 	.word	0x08006e90
 8005c58:	08006eb0 	.word	0x08006eb0
 8005c5c:	08006e70 	.word	0x08006e70

08005c60 <std>:
 8005c60:	2300      	movs	r3, #0
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	e9c0 3300 	strd	r3, r3, [r0]
 8005c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c6e:	6083      	str	r3, [r0, #8]
 8005c70:	8181      	strh	r1, [r0, #12]
 8005c72:	6643      	str	r3, [r0, #100]	; 0x64
 8005c74:	81c2      	strh	r2, [r0, #14]
 8005c76:	6183      	str	r3, [r0, #24]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	305c      	adds	r0, #92	; 0x5c
 8005c7e:	f7ff fbad 	bl	80053dc <memset>
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <std+0x38>)
 8005c84:	6263      	str	r3, [r4, #36]	; 0x24
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <std+0x3c>)
 8005c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <std+0x40>)
 8005c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <std+0x44>)
 8005c90:	6224      	str	r4, [r4, #32]
 8005c92:	6323      	str	r3, [r4, #48]	; 0x30
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	080065c1 	.word	0x080065c1
 8005c9c:	080065e3 	.word	0x080065e3
 8005ca0:	0800661b 	.word	0x0800661b
 8005ca4:	0800663f 	.word	0x0800663f

08005ca8 <_cleanup_r>:
 8005ca8:	4901      	ldr	r1, [pc, #4]	; (8005cb0 <_cleanup_r+0x8>)
 8005caa:	f000 b8c1 	b.w	8005e30 <_fwalk_reent>
 8005cae:	bf00      	nop
 8005cb0:	08005be9 	.word	0x08005be9

08005cb4 <__sfmoreglue>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	1e4a      	subs	r2, r1, #1
 8005cb8:	2568      	movs	r5, #104	; 0x68
 8005cba:	4355      	muls	r5, r2
 8005cbc:	460e      	mov	r6, r1
 8005cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cc2:	f7ff fbe3 	bl	800548c <_malloc_r>
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	b140      	cbz	r0, 8005cdc <__sfmoreglue+0x28>
 8005cca:	2100      	movs	r1, #0
 8005ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8005cd0:	300c      	adds	r0, #12
 8005cd2:	60a0      	str	r0, [r4, #8]
 8005cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cd8:	f7ff fb80 	bl	80053dc <memset>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	bd70      	pop	{r4, r5, r6, pc}

08005ce0 <__sfp_lock_acquire>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sfp_lock_acquire+0x8>)
 8005ce2:	f000 b8c5 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	200001d4 	.word	0x200001d4

08005cec <__sfp_lock_release>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__sfp_lock_release+0x8>)
 8005cee:	f000 b8c0 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	200001d4 	.word	0x200001d4

08005cf8 <__sinit_lock_acquire>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__sinit_lock_acquire+0x8>)
 8005cfa:	f000 b8b9 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200001cf 	.word	0x200001cf

08005d04 <__sinit_lock_release>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__sinit_lock_release+0x8>)
 8005d06:	f000 b8b4 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	200001cf 	.word	0x200001cf

08005d10 <__sinit>:
 8005d10:	b510      	push	{r4, lr}
 8005d12:	4604      	mov	r4, r0
 8005d14:	f7ff fff0 	bl	8005cf8 <__sinit_lock_acquire>
 8005d18:	69a3      	ldr	r3, [r4, #24]
 8005d1a:	b11b      	cbz	r3, 8005d24 <__sinit+0x14>
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f7ff bff0 	b.w	8005d04 <__sinit_lock_release>
 8005d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d28:	6523      	str	r3, [r4, #80]	; 0x50
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <__sinit+0x68>)
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <__sinit+0x6c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	bf04      	itt	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	61a3      	streq	r3, [r4, #24]
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f820 	bl	8005d80 <__sfp>
 8005d40:	6060      	str	r0, [r4, #4]
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f81c 	bl	8005d80 <__sfp>
 8005d48:	60a0      	str	r0, [r4, #8]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 f818 	bl	8005d80 <__sfp>
 8005d50:	2200      	movs	r2, #0
 8005d52:	60e0      	str	r0, [r4, #12]
 8005d54:	2104      	movs	r1, #4
 8005d56:	6860      	ldr	r0, [r4, #4]
 8005d58:	f7ff ff82 	bl	8005c60 <std>
 8005d5c:	68a0      	ldr	r0, [r4, #8]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2109      	movs	r1, #9
 8005d62:	f7ff ff7d 	bl	8005c60 <std>
 8005d66:	68e0      	ldr	r0, [r4, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	f7ff ff78 	bl	8005c60 <std>
 8005d70:	2301      	movs	r3, #1
 8005d72:	61a3      	str	r3, [r4, #24]
 8005d74:	e7d2      	b.n	8005d1c <__sinit+0xc>
 8005d76:	bf00      	nop
 8005d78:	08006db8 	.word	0x08006db8
 8005d7c:	08005ca9 	.word	0x08005ca9

08005d80 <__sfp>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	4607      	mov	r7, r0
 8005d84:	f7ff ffac 	bl	8005ce0 <__sfp_lock_acquire>
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <__sfp+0x84>)
 8005d8a:	681e      	ldr	r6, [r3, #0]
 8005d8c:	69b3      	ldr	r3, [r6, #24]
 8005d8e:	b913      	cbnz	r3, 8005d96 <__sfp+0x16>
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ffbd 	bl	8005d10 <__sinit>
 8005d96:	3648      	adds	r6, #72	; 0x48
 8005d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	d503      	bpl.n	8005da8 <__sfp+0x28>
 8005da0:	6833      	ldr	r3, [r6, #0]
 8005da2:	b30b      	cbz	r3, 8005de8 <__sfp+0x68>
 8005da4:	6836      	ldr	r6, [r6, #0]
 8005da6:	e7f7      	b.n	8005d98 <__sfp+0x18>
 8005da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dac:	b9d5      	cbnz	r5, 8005de4 <__sfp+0x64>
 8005dae:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <__sfp+0x88>)
 8005db0:	60e3      	str	r3, [r4, #12]
 8005db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005db6:	6665      	str	r5, [r4, #100]	; 0x64
 8005db8:	f000 f859 	bl	8005e6e <__retarget_lock_init_recursive>
 8005dbc:	f7ff ff96 	bl	8005cec <__sfp_lock_release>
 8005dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dc8:	6025      	str	r5, [r4, #0]
 8005dca:	61a5      	str	r5, [r4, #24]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dd4:	f7ff fb02 	bl	80053dc <memset>
 8005dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005de0:	4620      	mov	r0, r4
 8005de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de4:	3468      	adds	r4, #104	; 0x68
 8005de6:	e7d9      	b.n	8005d9c <__sfp+0x1c>
 8005de8:	2104      	movs	r1, #4
 8005dea:	4638      	mov	r0, r7
 8005dec:	f7ff ff62 	bl	8005cb4 <__sfmoreglue>
 8005df0:	4604      	mov	r4, r0
 8005df2:	6030      	str	r0, [r6, #0]
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d1d5      	bne.n	8005da4 <__sfp+0x24>
 8005df8:	f7ff ff78 	bl	8005cec <__sfp_lock_release>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	e7ee      	b.n	8005de0 <__sfp+0x60>
 8005e02:	bf00      	nop
 8005e04:	08006db8 	.word	0x08006db8
 8005e08:	ffff0001 	.word	0xffff0001

08005e0c <fiprintf>:
 8005e0c:	b40e      	push	{r1, r2, r3}
 8005e0e:	b503      	push	{r0, r1, lr}
 8005e10:	4601      	mov	r1, r0
 8005e12:	ab03      	add	r3, sp, #12
 8005e14:	4805      	ldr	r0, [pc, #20]	; (8005e2c <fiprintf+0x20>)
 8005e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	f000 f8c3 	bl	8005fa8 <_vfiprintf_r>
 8005e22:	b002      	add	sp, #8
 8005e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e28:	b003      	add	sp, #12
 8005e2a:	4770      	bx	lr
 8005e2c:	2000002c 	.word	0x2000002c

08005e30 <_fwalk_reent>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e42:	f1b9 0901 	subs.w	r9, r9, #1
 8005e46:	d505      	bpl.n	8005e54 <_fwalk_reent+0x24>
 8005e48:	6824      	ldr	r4, [r4, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f7      	bne.n	8005e3e <_fwalk_reent+0xe>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d907      	bls.n	8005e6a <_fwalk_reent+0x3a>
 8005e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d003      	beq.n	8005e6a <_fwalk_reent+0x3a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	4307      	orrs	r7, r0
 8005e6a:	3568      	adds	r5, #104	; 0x68
 8005e6c:	e7e9      	b.n	8005e42 <_fwalk_reent+0x12>

08005e6e <__retarget_lock_init_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__retarget_lock_acquire_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_release_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__swhatbuf_r>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	460e      	mov	r6, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	b096      	sub	sp, #88	; 0x58
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	da07      	bge.n	8005e96 <__swhatbuf_r+0x22>
 8005e86:	2300      	movs	r3, #0
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	89b3      	ldrh	r3, [r6, #12]
 8005e8c:	061a      	lsls	r2, r3, #24
 8005e8e:	d410      	bmi.n	8005eb2 <__swhatbuf_r+0x3e>
 8005e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e94:	e00e      	b.n	8005eb4 <__swhatbuf_r+0x40>
 8005e96:	466a      	mov	r2, sp
 8005e98:	f000 fbec 	bl	8006674 <_fstat_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dbf2      	blt.n	8005e86 <__swhatbuf_r+0x12>
 8005ea0:	9a01      	ldr	r2, [sp, #4]
 8005ea2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eaa:	425a      	negs	r2, r3
 8005eac:	415a      	adcs	r2, r3
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	e7ee      	b.n	8005e90 <__swhatbuf_r+0x1c>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	b016      	add	sp, #88	; 0x58
 8005eba:	bd70      	pop	{r4, r5, r6, pc}

08005ebc <__smakebuf_r>:
 8005ebc:	898b      	ldrh	r3, [r1, #12]
 8005ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec0:	079d      	lsls	r5, r3, #30
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	d507      	bpl.n	8005ed8 <__smakebuf_r+0x1c>
 8005ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6163      	str	r3, [r4, #20]
 8005ed4:	b002      	add	sp, #8
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	ab01      	add	r3, sp, #4
 8005eda:	466a      	mov	r2, sp
 8005edc:	f7ff ffca 	bl	8005e74 <__swhatbuf_r>
 8005ee0:	9900      	ldr	r1, [sp, #0]
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff fad1 	bl	800548c <_malloc_r>
 8005eea:	b948      	cbnz	r0, 8005f00 <__smakebuf_r+0x44>
 8005eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef0:	059a      	lsls	r2, r3, #22
 8005ef2:	d4ef      	bmi.n	8005ed4 <__smakebuf_r+0x18>
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	e7e3      	b.n	8005ec8 <__smakebuf_r+0xc>
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <__smakebuf_r+0x7c>)
 8005f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	6163      	str	r3, [r4, #20]
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	6120      	str	r0, [r4, #16]
 8005f16:	b15b      	cbz	r3, 8005f30 <__smakebuf_r+0x74>
 8005f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 fbbb 	bl	8006698 <_isatty_r>
 8005f22:	b128      	cbz	r0, 8005f30 <__smakebuf_r+0x74>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	89a0      	ldrh	r0, [r4, #12]
 8005f32:	4305      	orrs	r5, r0
 8005f34:	81a5      	strh	r5, [r4, #12]
 8005f36:	e7cd      	b.n	8005ed4 <__smakebuf_r+0x18>
 8005f38:	08005ca9 	.word	0x08005ca9

08005f3c <__malloc_lock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_lock+0x8>)
 8005f3e:	f7ff bf97 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005f42:	bf00      	nop
 8005f44:	200001d0 	.word	0x200001d0

08005f48 <__malloc_unlock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_unlock+0x8>)
 8005f4a:	f7ff bf92 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005f4e:	bf00      	nop
 8005f50:	200001d0 	.word	0x200001d0

08005f54 <__sfputc_r>:
 8005f54:	6893      	ldr	r3, [r2, #8]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	b410      	push	{r4}
 8005f5c:	6093      	str	r3, [r2, #8]
 8005f5e:	da08      	bge.n	8005f72 <__sfputc_r+0x1e>
 8005f60:	6994      	ldr	r4, [r2, #24]
 8005f62:	42a3      	cmp	r3, r4
 8005f64:	db01      	blt.n	8005f6a <__sfputc_r+0x16>
 8005f66:	290a      	cmp	r1, #10
 8005f68:	d103      	bne.n	8005f72 <__sfputc_r+0x1e>
 8005f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6e:	f7ff bcd7 	b.w	8005920 <__swbuf_r>
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	1c58      	adds	r0, r3, #1
 8005f76:	6010      	str	r0, [r2, #0]
 8005f78:	7019      	strb	r1, [r3, #0]
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <__sfputs_r>:
 8005f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	18d5      	adds	r5, r2, r3
 8005f8c:	42ac      	cmp	r4, r5
 8005f8e:	d101      	bne.n	8005f94 <__sfputs_r+0x12>
 8005f90:	2000      	movs	r0, #0
 8005f92:	e007      	b.n	8005fa4 <__sfputs_r+0x22>
 8005f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff ffda 	bl	8005f54 <__sfputc_r>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d1f3      	bne.n	8005f8c <__sfputs_r+0xa>
 8005fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fa8 <_vfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	460d      	mov	r5, r1
 8005fae:	b09d      	sub	sp, #116	; 0x74
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	b118      	cbz	r0, 8005fc0 <_vfiprintf_r+0x18>
 8005fb8:	6983      	ldr	r3, [r0, #24]
 8005fba:	b90b      	cbnz	r3, 8005fc0 <_vfiprintf_r+0x18>
 8005fbc:	f7ff fea8 	bl	8005d10 <__sinit>
 8005fc0:	4b89      	ldr	r3, [pc, #548]	; (80061e8 <_vfiprintf_r+0x240>)
 8005fc2:	429d      	cmp	r5, r3
 8005fc4:	d11b      	bne.n	8005ffe <_vfiprintf_r+0x56>
 8005fc6:	6875      	ldr	r5, [r6, #4]
 8005fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fca:	07d9      	lsls	r1, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_vfiprintf_r+0x32>
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	059a      	lsls	r2, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_vfiprintf_r+0x32>
 8005fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fd6:	f7ff ff4b 	bl	8005e70 <__retarget_lock_acquire_recursive>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	071b      	lsls	r3, r3, #28
 8005fde:	d501      	bpl.n	8005fe4 <_vfiprintf_r+0x3c>
 8005fe0:	692b      	ldr	r3, [r5, #16]
 8005fe2:	b9eb      	cbnz	r3, 8006020 <_vfiprintf_r+0x78>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff fcec 	bl	80059c4 <__swsetup_r>
 8005fec:	b1c0      	cbz	r0, 8006020 <_vfiprintf_r+0x78>
 8005fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ff0:	07dc      	lsls	r4, r3, #31
 8005ff2:	d50e      	bpl.n	8006012 <_vfiprintf_r+0x6a>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ff8:	b01d      	add	sp, #116	; 0x74
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	4b7b      	ldr	r3, [pc, #492]	; (80061ec <_vfiprintf_r+0x244>)
 8006000:	429d      	cmp	r5, r3
 8006002:	d101      	bne.n	8006008 <_vfiprintf_r+0x60>
 8006004:	68b5      	ldr	r5, [r6, #8]
 8006006:	e7df      	b.n	8005fc8 <_vfiprintf_r+0x20>
 8006008:	4b79      	ldr	r3, [pc, #484]	; (80061f0 <_vfiprintf_r+0x248>)
 800600a:	429d      	cmp	r5, r3
 800600c:	bf08      	it	eq
 800600e:	68f5      	ldreq	r5, [r6, #12]
 8006010:	e7da      	b.n	8005fc8 <_vfiprintf_r+0x20>
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	0598      	lsls	r0, r3, #22
 8006016:	d4ed      	bmi.n	8005ff4 <_vfiprintf_r+0x4c>
 8006018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800601a:	f7ff ff2a 	bl	8005e72 <__retarget_lock_release_recursive>
 800601e:	e7e9      	b.n	8005ff4 <_vfiprintf_r+0x4c>
 8006020:	2300      	movs	r3, #0
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	2320      	movs	r3, #32
 8006026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800602a:	f8cd 800c 	str.w	r8, [sp, #12]
 800602e:	2330      	movs	r3, #48	; 0x30
 8006030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80061f4 <_vfiprintf_r+0x24c>
 8006034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006038:	f04f 0901 	mov.w	r9, #1
 800603c:	4623      	mov	r3, r4
 800603e:	469a      	mov	sl, r3
 8006040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006044:	b10a      	cbz	r2, 800604a <_vfiprintf_r+0xa2>
 8006046:	2a25      	cmp	r2, #37	; 0x25
 8006048:	d1f9      	bne.n	800603e <_vfiprintf_r+0x96>
 800604a:	ebba 0b04 	subs.w	fp, sl, r4
 800604e:	d00b      	beq.n	8006068 <_vfiprintf_r+0xc0>
 8006050:	465b      	mov	r3, fp
 8006052:	4622      	mov	r2, r4
 8006054:	4629      	mov	r1, r5
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff ff93 	bl	8005f82 <__sfputs_r>
 800605c:	3001      	adds	r0, #1
 800605e:	f000 80aa 	beq.w	80061b6 <_vfiprintf_r+0x20e>
 8006062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006064:	445a      	add	r2, fp
 8006066:	9209      	str	r2, [sp, #36]	; 0x24
 8006068:	f89a 3000 	ldrb.w	r3, [sl]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a2 	beq.w	80061b6 <_vfiprintf_r+0x20e>
 8006072:	2300      	movs	r3, #0
 8006074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800607c:	f10a 0a01 	add.w	sl, sl, #1
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006088:	931a      	str	r3, [sp, #104]	; 0x68
 800608a:	4654      	mov	r4, sl
 800608c:	2205      	movs	r2, #5
 800608e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006092:	4858      	ldr	r0, [pc, #352]	; (80061f4 <_vfiprintf_r+0x24c>)
 8006094:	f7fa f8a4 	bl	80001e0 <memchr>
 8006098:	9a04      	ldr	r2, [sp, #16]
 800609a:	b9d8      	cbnz	r0, 80060d4 <_vfiprintf_r+0x12c>
 800609c:	06d1      	lsls	r1, r2, #27
 800609e:	bf44      	itt	mi
 80060a0:	2320      	movmi	r3, #32
 80060a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a6:	0713      	lsls	r3, r2, #28
 80060a8:	bf44      	itt	mi
 80060aa:	232b      	movmi	r3, #43	; 0x2b
 80060ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b0:	f89a 3000 	ldrb.w	r3, [sl]
 80060b4:	2b2a      	cmp	r3, #42	; 0x2a
 80060b6:	d015      	beq.n	80060e4 <_vfiprintf_r+0x13c>
 80060b8:	9a07      	ldr	r2, [sp, #28]
 80060ba:	4654      	mov	r4, sl
 80060bc:	2000      	movs	r0, #0
 80060be:	f04f 0c0a 	mov.w	ip, #10
 80060c2:	4621      	mov	r1, r4
 80060c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c8:	3b30      	subs	r3, #48	; 0x30
 80060ca:	2b09      	cmp	r3, #9
 80060cc:	d94e      	bls.n	800616c <_vfiprintf_r+0x1c4>
 80060ce:	b1b0      	cbz	r0, 80060fe <_vfiprintf_r+0x156>
 80060d0:	9207      	str	r2, [sp, #28]
 80060d2:	e014      	b.n	80060fe <_vfiprintf_r+0x156>
 80060d4:	eba0 0308 	sub.w	r3, r0, r8
 80060d8:	fa09 f303 	lsl.w	r3, r9, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	46a2      	mov	sl, r4
 80060e2:	e7d2      	b.n	800608a <_vfiprintf_r+0xe2>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1d19      	adds	r1, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	9103      	str	r1, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfbb      	ittet	lt
 80060f0:	425b      	neglt	r3, r3
 80060f2:	f042 0202 	orrlt.w	r2, r2, #2
 80060f6:	9307      	strge	r3, [sp, #28]
 80060f8:	9307      	strlt	r3, [sp, #28]
 80060fa:	bfb8      	it	lt
 80060fc:	9204      	strlt	r2, [sp, #16]
 80060fe:	7823      	ldrb	r3, [r4, #0]
 8006100:	2b2e      	cmp	r3, #46	; 0x2e
 8006102:	d10c      	bne.n	800611e <_vfiprintf_r+0x176>
 8006104:	7863      	ldrb	r3, [r4, #1]
 8006106:	2b2a      	cmp	r3, #42	; 0x2a
 8006108:	d135      	bne.n	8006176 <_vfiprintf_r+0x1ce>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9203      	str	r2, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfb8      	it	lt
 8006116:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800611a:	3402      	adds	r4, #2
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006204 <_vfiprintf_r+0x25c>
 8006122:	7821      	ldrb	r1, [r4, #0]
 8006124:	2203      	movs	r2, #3
 8006126:	4650      	mov	r0, sl
 8006128:	f7fa f85a 	bl	80001e0 <memchr>
 800612c:	b140      	cbz	r0, 8006140 <_vfiprintf_r+0x198>
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	eba0 000a 	sub.w	r0, r0, sl
 8006134:	fa03 f000 	lsl.w	r0, r3, r0
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	4303      	orrs	r3, r0
 800613c:	3401      	adds	r4, #1
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006144:	482c      	ldr	r0, [pc, #176]	; (80061f8 <_vfiprintf_r+0x250>)
 8006146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800614a:	2206      	movs	r2, #6
 800614c:	f7fa f848 	bl	80001e0 <memchr>
 8006150:	2800      	cmp	r0, #0
 8006152:	d03f      	beq.n	80061d4 <_vfiprintf_r+0x22c>
 8006154:	4b29      	ldr	r3, [pc, #164]	; (80061fc <_vfiprintf_r+0x254>)
 8006156:	bb1b      	cbnz	r3, 80061a0 <_vfiprintf_r+0x1f8>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	3307      	adds	r3, #7
 800615c:	f023 0307 	bic.w	r3, r3, #7
 8006160:	3308      	adds	r3, #8
 8006162:	9303      	str	r3, [sp, #12]
 8006164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006166:	443b      	add	r3, r7
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	e767      	b.n	800603c <_vfiprintf_r+0x94>
 800616c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006170:	460c      	mov	r4, r1
 8006172:	2001      	movs	r0, #1
 8006174:	e7a5      	b.n	80060c2 <_vfiprintf_r+0x11a>
 8006176:	2300      	movs	r3, #0
 8006178:	3401      	adds	r4, #1
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	4619      	mov	r1, r3
 800617e:	f04f 0c0a 	mov.w	ip, #10
 8006182:	4620      	mov	r0, r4
 8006184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006188:	3a30      	subs	r2, #48	; 0x30
 800618a:	2a09      	cmp	r2, #9
 800618c:	d903      	bls.n	8006196 <_vfiprintf_r+0x1ee>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0c5      	beq.n	800611e <_vfiprintf_r+0x176>
 8006192:	9105      	str	r1, [sp, #20]
 8006194:	e7c3      	b.n	800611e <_vfiprintf_r+0x176>
 8006196:	fb0c 2101 	mla	r1, ip, r1, r2
 800619a:	4604      	mov	r4, r0
 800619c:	2301      	movs	r3, #1
 800619e:	e7f0      	b.n	8006182 <_vfiprintf_r+0x1da>
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	462a      	mov	r2, r5
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <_vfiprintf_r+0x258>)
 80061a8:	a904      	add	r1, sp, #16
 80061aa:	4630      	mov	r0, r6
 80061ac:	f3af 8000 	nop.w
 80061b0:	4607      	mov	r7, r0
 80061b2:	1c78      	adds	r0, r7, #1
 80061b4:	d1d6      	bne.n	8006164 <_vfiprintf_r+0x1bc>
 80061b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b8:	07d9      	lsls	r1, r3, #31
 80061ba:	d405      	bmi.n	80061c8 <_vfiprintf_r+0x220>
 80061bc:	89ab      	ldrh	r3, [r5, #12]
 80061be:	059a      	lsls	r2, r3, #22
 80061c0:	d402      	bmi.n	80061c8 <_vfiprintf_r+0x220>
 80061c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061c4:	f7ff fe55 	bl	8005e72 <__retarget_lock_release_recursive>
 80061c8:	89ab      	ldrh	r3, [r5, #12]
 80061ca:	065b      	lsls	r3, r3, #25
 80061cc:	f53f af12 	bmi.w	8005ff4 <_vfiprintf_r+0x4c>
 80061d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061d2:	e711      	b.n	8005ff8 <_vfiprintf_r+0x50>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <_vfiprintf_r+0x258>)
 80061dc:	a904      	add	r1, sp, #16
 80061de:	4630      	mov	r0, r6
 80061e0:	f000 f880 	bl	80062e4 <_printf_i>
 80061e4:	e7e4      	b.n	80061b0 <_vfiprintf_r+0x208>
 80061e6:	bf00      	nop
 80061e8:	08006e90 	.word	0x08006e90
 80061ec:	08006eb0 	.word	0x08006eb0
 80061f0:	08006e70 	.word	0x08006e70
 80061f4:	08006ed0 	.word	0x08006ed0
 80061f8:	08006eda 	.word	0x08006eda
 80061fc:	00000000 	.word	0x00000000
 8006200:	08005f83 	.word	0x08005f83
 8006204:	08006ed6 	.word	0x08006ed6

08006208 <_printf_common>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	4616      	mov	r6, r2
 800620e:	4699      	mov	r9, r3
 8006210:	688a      	ldr	r2, [r1, #8]
 8006212:	690b      	ldr	r3, [r1, #16]
 8006214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006218:	4293      	cmp	r3, r2
 800621a:	bfb8      	it	lt
 800621c:	4613      	movlt	r3, r2
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006224:	4607      	mov	r7, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b10a      	cbz	r2, 800622e <_printf_common+0x26>
 800622a:	3301      	adds	r3, #1
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	0699      	lsls	r1, r3, #26
 8006232:	bf42      	ittt	mi
 8006234:	6833      	ldrmi	r3, [r6, #0]
 8006236:	3302      	addmi	r3, #2
 8006238:	6033      	strmi	r3, [r6, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	f015 0506 	ands.w	r5, r5, #6
 8006240:	d106      	bne.n	8006250 <_printf_common+0x48>
 8006242:	f104 0a19 	add.w	sl, r4, #25
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	42ab      	cmp	r3, r5
 800624e:	dc26      	bgt.n	800629e <_printf_common+0x96>
 8006250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006254:	1e13      	subs	r3, r2, #0
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	bf18      	it	ne
 800625a:	2301      	movne	r3, #1
 800625c:	0692      	lsls	r2, r2, #26
 800625e:	d42b      	bmi.n	80062b8 <_printf_common+0xb0>
 8006260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006264:	4649      	mov	r1, r9
 8006266:	4638      	mov	r0, r7
 8006268:	47c0      	blx	r8
 800626a:	3001      	adds	r0, #1
 800626c:	d01e      	beq.n	80062ac <_printf_common+0xa4>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	68e5      	ldr	r5, [r4, #12]
 8006272:	6832      	ldr	r2, [r6, #0]
 8006274:	f003 0306 	and.w	r3, r3, #6
 8006278:	2b04      	cmp	r3, #4
 800627a:	bf08      	it	eq
 800627c:	1aad      	subeq	r5, r5, r2
 800627e:	68a3      	ldr	r3, [r4, #8]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	bf0c      	ite	eq
 8006284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006288:	2500      	movne	r5, #0
 800628a:	4293      	cmp	r3, r2
 800628c:	bfc4      	itt	gt
 800628e:	1a9b      	subgt	r3, r3, r2
 8006290:	18ed      	addgt	r5, r5, r3
 8006292:	2600      	movs	r6, #0
 8006294:	341a      	adds	r4, #26
 8006296:	42b5      	cmp	r5, r6
 8006298:	d11a      	bne.n	80062d0 <_printf_common+0xc8>
 800629a:	2000      	movs	r0, #0
 800629c:	e008      	b.n	80062b0 <_printf_common+0xa8>
 800629e:	2301      	movs	r3, #1
 80062a0:	4652      	mov	r2, sl
 80062a2:	4649      	mov	r1, r9
 80062a4:	4638      	mov	r0, r7
 80062a6:	47c0      	blx	r8
 80062a8:	3001      	adds	r0, #1
 80062aa:	d103      	bne.n	80062b4 <_printf_common+0xac>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	3501      	adds	r5, #1
 80062b6:	e7c6      	b.n	8006246 <_printf_common+0x3e>
 80062b8:	18e1      	adds	r1, r4, r3
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	2030      	movs	r0, #48	; 0x30
 80062be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062c2:	4422      	add	r2, r4
 80062c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062cc:	3302      	adds	r3, #2
 80062ce:	e7c7      	b.n	8006260 <_printf_common+0x58>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4622      	mov	r2, r4
 80062d4:	4649      	mov	r1, r9
 80062d6:	4638      	mov	r0, r7
 80062d8:	47c0      	blx	r8
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa4>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d9      	b.n	8006296 <_printf_common+0x8e>
	...

080062e4 <_printf_i>:
 80062e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	460c      	mov	r4, r1
 80062ea:	4691      	mov	r9, r2
 80062ec:	7e27      	ldrb	r7, [r4, #24]
 80062ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062f0:	2f78      	cmp	r7, #120	; 0x78
 80062f2:	4680      	mov	r8, r0
 80062f4:	469a      	mov	sl, r3
 80062f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062fa:	d807      	bhi.n	800630c <_printf_i+0x28>
 80062fc:	2f62      	cmp	r7, #98	; 0x62
 80062fe:	d80a      	bhi.n	8006316 <_printf_i+0x32>
 8006300:	2f00      	cmp	r7, #0
 8006302:	f000 80d8 	beq.w	80064b6 <_printf_i+0x1d2>
 8006306:	2f58      	cmp	r7, #88	; 0x58
 8006308:	f000 80a3 	beq.w	8006452 <_printf_i+0x16e>
 800630c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006314:	e03a      	b.n	800638c <_printf_i+0xa8>
 8006316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800631a:	2b15      	cmp	r3, #21
 800631c:	d8f6      	bhi.n	800630c <_printf_i+0x28>
 800631e:	a001      	add	r0, pc, #4	; (adr r0, 8006324 <_printf_i+0x40>)
 8006320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006391 	.word	0x08006391
 800632c:	0800630d 	.word	0x0800630d
 8006330:	0800630d 	.word	0x0800630d
 8006334:	0800630d 	.word	0x0800630d
 8006338:	0800630d 	.word	0x0800630d
 800633c:	08006391 	.word	0x08006391
 8006340:	0800630d 	.word	0x0800630d
 8006344:	0800630d 	.word	0x0800630d
 8006348:	0800630d 	.word	0x0800630d
 800634c:	0800630d 	.word	0x0800630d
 8006350:	0800649d 	.word	0x0800649d
 8006354:	080063c1 	.word	0x080063c1
 8006358:	0800647f 	.word	0x0800647f
 800635c:	0800630d 	.word	0x0800630d
 8006360:	0800630d 	.word	0x0800630d
 8006364:	080064bf 	.word	0x080064bf
 8006368:	0800630d 	.word	0x0800630d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800630d 	.word	0x0800630d
 8006374:	0800630d 	.word	0x0800630d
 8006378:	08006487 	.word	0x08006487
 800637c:	680b      	ldr	r3, [r1, #0]
 800637e:	1d1a      	adds	r2, r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	600a      	str	r2, [r1, #0]
 8006384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800638c:	2301      	movs	r3, #1
 800638e:	e0a3      	b.n	80064d8 <_printf_i+0x1f4>
 8006390:	6825      	ldr	r5, [r4, #0]
 8006392:	6808      	ldr	r0, [r1, #0]
 8006394:	062e      	lsls	r6, r5, #24
 8006396:	f100 0304 	add.w	r3, r0, #4
 800639a:	d50a      	bpl.n	80063b2 <_printf_i+0xce>
 800639c:	6805      	ldr	r5, [r0, #0]
 800639e:	600b      	str	r3, [r1, #0]
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	da03      	bge.n	80063ac <_printf_i+0xc8>
 80063a4:	232d      	movs	r3, #45	; 0x2d
 80063a6:	426d      	negs	r5, r5
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ac:	485e      	ldr	r0, [pc, #376]	; (8006528 <_printf_i+0x244>)
 80063ae:	230a      	movs	r3, #10
 80063b0:	e019      	b.n	80063e6 <_printf_i+0x102>
 80063b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063b6:	6805      	ldr	r5, [r0, #0]
 80063b8:	600b      	str	r3, [r1, #0]
 80063ba:	bf18      	it	ne
 80063bc:	b22d      	sxthne	r5, r5
 80063be:	e7ef      	b.n	80063a0 <_printf_i+0xbc>
 80063c0:	680b      	ldr	r3, [r1, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	1d18      	adds	r0, r3, #4
 80063c6:	6008      	str	r0, [r1, #0]
 80063c8:	0628      	lsls	r0, r5, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xec>
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	e002      	b.n	80063d6 <_printf_i+0xf2>
 80063d0:	0669      	lsls	r1, r5, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xe8>
 80063d4:	881d      	ldrh	r5, [r3, #0]
 80063d6:	4854      	ldr	r0, [pc, #336]	; (8006528 <_printf_i+0x244>)
 80063d8:	2f6f      	cmp	r7, #111	; 0x6f
 80063da:	bf0c      	ite	eq
 80063dc:	2308      	moveq	r3, #8
 80063de:	230a      	movne	r3, #10
 80063e0:	2100      	movs	r1, #0
 80063e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e6:	6866      	ldr	r6, [r4, #4]
 80063e8:	60a6      	str	r6, [r4, #8]
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	bfa2      	ittt	ge
 80063ee:	6821      	ldrge	r1, [r4, #0]
 80063f0:	f021 0104 	bicge.w	r1, r1, #4
 80063f4:	6021      	strge	r1, [r4, #0]
 80063f6:	b90d      	cbnz	r5, 80063fc <_printf_i+0x118>
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	d04d      	beq.n	8006498 <_printf_i+0x1b4>
 80063fc:	4616      	mov	r6, r2
 80063fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006402:	fb03 5711 	mls	r7, r3, r1, r5
 8006406:	5dc7      	ldrb	r7, [r0, r7]
 8006408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800640c:	462f      	mov	r7, r5
 800640e:	42bb      	cmp	r3, r7
 8006410:	460d      	mov	r5, r1
 8006412:	d9f4      	bls.n	80063fe <_printf_i+0x11a>
 8006414:	2b08      	cmp	r3, #8
 8006416:	d10b      	bne.n	8006430 <_printf_i+0x14c>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07df      	lsls	r7, r3, #31
 800641c:	d508      	bpl.n	8006430 <_printf_i+0x14c>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6861      	ldr	r1, [r4, #4]
 8006422:	4299      	cmp	r1, r3
 8006424:	bfde      	ittt	le
 8006426:	2330      	movle	r3, #48	; 0x30
 8006428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800642c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006430:	1b92      	subs	r2, r2, r6
 8006432:	6122      	str	r2, [r4, #16]
 8006434:	f8cd a000 	str.w	sl, [sp]
 8006438:	464b      	mov	r3, r9
 800643a:	aa03      	add	r2, sp, #12
 800643c:	4621      	mov	r1, r4
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff fee2 	bl	8006208 <_printf_common>
 8006444:	3001      	adds	r0, #1
 8006446:	d14c      	bne.n	80064e2 <_printf_i+0x1fe>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644c:	b004      	add	sp, #16
 800644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006452:	4835      	ldr	r0, [pc, #212]	; (8006528 <_printf_i+0x244>)
 8006454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	680e      	ldr	r6, [r1, #0]
 800645c:	061f      	lsls	r7, r3, #24
 800645e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006462:	600e      	str	r6, [r1, #0]
 8006464:	d514      	bpl.n	8006490 <_printf_i+0x1ac>
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	bf44      	itt	mi
 800646a:	f043 0320 	orrmi.w	r3, r3, #32
 800646e:	6023      	strmi	r3, [r4, #0]
 8006470:	b91d      	cbnz	r5, 800647a <_printf_i+0x196>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f023 0320 	bic.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	2310      	movs	r3, #16
 800647c:	e7b0      	b.n	80063e0 <_printf_i+0xfc>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f043 0320 	orr.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2378      	movs	r3, #120	; 0x78
 8006488:	4828      	ldr	r0, [pc, #160]	; (800652c <_printf_i+0x248>)
 800648a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800648e:	e7e3      	b.n	8006458 <_printf_i+0x174>
 8006490:	065e      	lsls	r6, r3, #25
 8006492:	bf48      	it	mi
 8006494:	b2ad      	uxthmi	r5, r5
 8006496:	e7e6      	b.n	8006466 <_printf_i+0x182>
 8006498:	4616      	mov	r6, r2
 800649a:	e7bb      	b.n	8006414 <_printf_i+0x130>
 800649c:	680b      	ldr	r3, [r1, #0]
 800649e:	6826      	ldr	r6, [r4, #0]
 80064a0:	6960      	ldr	r0, [r4, #20]
 80064a2:	1d1d      	adds	r5, r3, #4
 80064a4:	600d      	str	r5, [r1, #0]
 80064a6:	0635      	lsls	r5, r6, #24
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	d501      	bpl.n	80064b0 <_printf_i+0x1cc>
 80064ac:	6018      	str	r0, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <_printf_i+0x1d2>
 80064b0:	0671      	lsls	r1, r6, #25
 80064b2:	d5fb      	bpl.n	80064ac <_printf_i+0x1c8>
 80064b4:	8018      	strh	r0, [r3, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	4616      	mov	r6, r2
 80064bc:	e7ba      	b.n	8006434 <_printf_i+0x150>
 80064be:	680b      	ldr	r3, [r1, #0]
 80064c0:	1d1a      	adds	r2, r3, #4
 80064c2:	600a      	str	r2, [r1, #0]
 80064c4:	681e      	ldr	r6, [r3, #0]
 80064c6:	6862      	ldr	r2, [r4, #4]
 80064c8:	2100      	movs	r1, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7f9 fe88 	bl	80001e0 <memchr>
 80064d0:	b108      	cbz	r0, 80064d6 <_printf_i+0x1f2>
 80064d2:	1b80      	subs	r0, r0, r6
 80064d4:	6060      	str	r0, [r4, #4]
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	2300      	movs	r3, #0
 80064dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e0:	e7a8      	b.n	8006434 <_printf_i+0x150>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	4632      	mov	r2, r6
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	47d0      	blx	sl
 80064ec:	3001      	adds	r0, #1
 80064ee:	d0ab      	beq.n	8006448 <_printf_i+0x164>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	079b      	lsls	r3, r3, #30
 80064f4:	d413      	bmi.n	800651e <_printf_i+0x23a>
 80064f6:	68e0      	ldr	r0, [r4, #12]
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	4298      	cmp	r0, r3
 80064fc:	bfb8      	it	lt
 80064fe:	4618      	movlt	r0, r3
 8006500:	e7a4      	b.n	800644c <_printf_i+0x168>
 8006502:	2301      	movs	r3, #1
 8006504:	4632      	mov	r2, r6
 8006506:	4649      	mov	r1, r9
 8006508:	4640      	mov	r0, r8
 800650a:	47d0      	blx	sl
 800650c:	3001      	adds	r0, #1
 800650e:	d09b      	beq.n	8006448 <_printf_i+0x164>
 8006510:	3501      	adds	r5, #1
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	9903      	ldr	r1, [sp, #12]
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	42ab      	cmp	r3, r5
 800651a:	dcf2      	bgt.n	8006502 <_printf_i+0x21e>
 800651c:	e7eb      	b.n	80064f6 <_printf_i+0x212>
 800651e:	2500      	movs	r5, #0
 8006520:	f104 0619 	add.w	r6, r4, #25
 8006524:	e7f5      	b.n	8006512 <_printf_i+0x22e>
 8006526:	bf00      	nop
 8006528:	08006ee1 	.word	0x08006ee1
 800652c:	08006ef2 	.word	0x08006ef2

08006530 <_putc_r>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	460d      	mov	r5, r1
 8006534:	4614      	mov	r4, r2
 8006536:	4606      	mov	r6, r0
 8006538:	b118      	cbz	r0, 8006542 <_putc_r+0x12>
 800653a:	6983      	ldr	r3, [r0, #24]
 800653c:	b90b      	cbnz	r3, 8006542 <_putc_r+0x12>
 800653e:	f7ff fbe7 	bl	8005d10 <__sinit>
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <_putc_r+0x84>)
 8006544:	429c      	cmp	r4, r3
 8006546:	d124      	bne.n	8006592 <_putc_r+0x62>
 8006548:	6874      	ldr	r4, [r6, #4]
 800654a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800654c:	07d8      	lsls	r0, r3, #31
 800654e:	d405      	bmi.n	800655c <_putc_r+0x2c>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	0599      	lsls	r1, r3, #22
 8006554:	d402      	bmi.n	800655c <_putc_r+0x2c>
 8006556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006558:	f7ff fc8a 	bl	8005e70 <__retarget_lock_acquire_recursive>
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	3b01      	subs	r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	da05      	bge.n	8006572 <_putc_r+0x42>
 8006566:	69a2      	ldr	r2, [r4, #24]
 8006568:	4293      	cmp	r3, r2
 800656a:	db1c      	blt.n	80065a6 <_putc_r+0x76>
 800656c:	b2eb      	uxtb	r3, r5
 800656e:	2b0a      	cmp	r3, #10
 8006570:	d019      	beq.n	80065a6 <_putc_r+0x76>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	6022      	str	r2, [r4, #0]
 8006578:	701d      	strb	r5, [r3, #0]
 800657a:	b2ed      	uxtb	r5, r5
 800657c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d405      	bmi.n	800658e <_putc_r+0x5e>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	059b      	lsls	r3, r3, #22
 8006586:	d402      	bmi.n	800658e <_putc_r+0x5e>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f7ff fc72 	bl	8005e72 <__retarget_lock_release_recursive>
 800658e:	4628      	mov	r0, r5
 8006590:	bd70      	pop	{r4, r5, r6, pc}
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <_putc_r+0x88>)
 8006594:	429c      	cmp	r4, r3
 8006596:	d101      	bne.n	800659c <_putc_r+0x6c>
 8006598:	68b4      	ldr	r4, [r6, #8]
 800659a:	e7d6      	b.n	800654a <_putc_r+0x1a>
 800659c:	4b07      	ldr	r3, [pc, #28]	; (80065bc <_putc_r+0x8c>)
 800659e:	429c      	cmp	r4, r3
 80065a0:	bf08      	it	eq
 80065a2:	68f4      	ldreq	r4, [r6, #12]
 80065a4:	e7d1      	b.n	800654a <_putc_r+0x1a>
 80065a6:	4629      	mov	r1, r5
 80065a8:	4622      	mov	r2, r4
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff f9b8 	bl	8005920 <__swbuf_r>
 80065b0:	4605      	mov	r5, r0
 80065b2:	e7e3      	b.n	800657c <_putc_r+0x4c>
 80065b4:	08006e90 	.word	0x08006e90
 80065b8:	08006eb0 	.word	0x08006eb0
 80065bc:	08006e70 	.word	0x08006e70

080065c0 <__sread>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	f000 f888 	bl	80066dc <_read_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	bfab      	itete	ge
 80065d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065d2:	89a3      	ldrhlt	r3, [r4, #12]
 80065d4:	181b      	addge	r3, r3, r0
 80065d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065da:	bfac      	ite	ge
 80065dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80065de:	81a3      	strhlt	r3, [r4, #12]
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <__swrite>:
 80065e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e6:	461f      	mov	r7, r3
 80065e8:	898b      	ldrh	r3, [r1, #12]
 80065ea:	05db      	lsls	r3, r3, #23
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4616      	mov	r6, r2
 80065f2:	d505      	bpl.n	8006600 <__swrite+0x1e>
 80065f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f8:	2302      	movs	r3, #2
 80065fa:	2200      	movs	r2, #0
 80065fc:	f000 f85c 	bl	80066b8 <_lseek_r>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	4632      	mov	r2, r6
 800660e:	463b      	mov	r3, r7
 8006610:	4628      	mov	r0, r5
 8006612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	f7fa bd6b 	b.w	80010f0 <_write_r>

0800661a <__sseek>:
 800661a:	b510      	push	{r4, lr}
 800661c:	460c      	mov	r4, r1
 800661e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006622:	f000 f849 	bl	80066b8 <_lseek_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	bf15      	itete	ne
 800662c:	6560      	strne	r0, [r4, #84]	; 0x54
 800662e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strheq	r3, [r4, #12]
 8006638:	bf18      	it	ne
 800663a:	81a3      	strhne	r3, [r4, #12]
 800663c:	bd10      	pop	{r4, pc}

0800663e <__sclose>:
 800663e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006642:	f000 b807 	b.w	8006654 <_close_r>

08006646 <abort>:
 8006646:	b508      	push	{r3, lr}
 8006648:	2006      	movs	r0, #6
 800664a:	f000 f881 	bl	8006750 <raise>
 800664e:	2001      	movs	r0, #1
 8006650:	f7fe fd44 	bl	80050dc <_exit>

08006654 <_close_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d06      	ldr	r5, [pc, #24]	; (8006670 <_close_r+0x1c>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	f7fe fd63 	bl	800512a <_close>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_close_r+0x1a>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_close_r+0x1a>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	200001d8 	.word	0x200001d8

08006674 <_fstat_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_fstat_r+0x20>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	f7fe fd5e 	bl	8005142 <_fstat>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d102      	bne.n	8006690 <_fstat_r+0x1c>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	b103      	cbz	r3, 8006690 <_fstat_r+0x1c>
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	200001d8 	.word	0x200001d8

08006698 <_isatty_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	; (80066b4 <_isatty_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fe fd5d 	bl	8005162 <_isatty>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_isatty_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_isatty_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200001d8 	.word	0x200001d8

080066b8 <_lseek_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	; (80066d8 <_lseek_r+0x20>)
 80066bc:	4604      	mov	r4, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fe fd56 	bl	8005178 <_lseek>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_lseek_r+0x1e>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_lseek_r+0x1e>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200001d8 	.word	0x200001d8

080066dc <_read_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	; (80066fc <_read_r+0x20>)
 80066e0:	4604      	mov	r4, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	602a      	str	r2, [r5, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fe fd00 	bl	80050f0 <_read>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_read_r+0x1e>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_read_r+0x1e>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200001d8 	.word	0x200001d8

08006700 <_raise_r>:
 8006700:	291f      	cmp	r1, #31
 8006702:	b538      	push	{r3, r4, r5, lr}
 8006704:	4604      	mov	r4, r0
 8006706:	460d      	mov	r5, r1
 8006708:	d904      	bls.n	8006714 <_raise_r+0x14>
 800670a:	2316      	movs	r3, #22
 800670c:	6003      	str	r3, [r0, #0]
 800670e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006716:	b112      	cbz	r2, 800671e <_raise_r+0x1e>
 8006718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800671c:	b94b      	cbnz	r3, 8006732 <_raise_r+0x32>
 800671e:	4620      	mov	r0, r4
 8006720:	f000 f830 	bl	8006784 <_getpid_r>
 8006724:	462a      	mov	r2, r5
 8006726:	4601      	mov	r1, r0
 8006728:	4620      	mov	r0, r4
 800672a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800672e:	f000 b817 	b.w	8006760 <_kill_r>
 8006732:	2b01      	cmp	r3, #1
 8006734:	d00a      	beq.n	800674c <_raise_r+0x4c>
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	d103      	bne.n	8006742 <_raise_r+0x42>
 800673a:	2316      	movs	r3, #22
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	2001      	movs	r0, #1
 8006740:	e7e7      	b.n	8006712 <_raise_r+0x12>
 8006742:	2400      	movs	r4, #0
 8006744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006748:	4628      	mov	r0, r5
 800674a:	4798      	blx	r3
 800674c:	2000      	movs	r0, #0
 800674e:	e7e0      	b.n	8006712 <_raise_r+0x12>

08006750 <raise>:
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <raise+0xc>)
 8006752:	4601      	mov	r1, r0
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f7ff bfd3 	b.w	8006700 <_raise_r>
 800675a:	bf00      	nop
 800675c:	2000002c 	.word	0x2000002c

08006760 <_kill_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	; (8006780 <_kill_r+0x20>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	f7fe fca5 	bl	80050bc <_kill>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d102      	bne.n	800677c <_kill_r+0x1c>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	b103      	cbz	r3, 800677c <_kill_r+0x1c>
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	200001d8 	.word	0x200001d8

08006784 <_getpid_r>:
 8006784:	f7fe bc92 	b.w	80050ac <_getpid>

08006788 <_init>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr

08006794 <_fini>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr
>>>>>>> Stashed changes
