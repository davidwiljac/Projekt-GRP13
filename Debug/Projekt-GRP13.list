
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b54  08005b54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08005bec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08005bec  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001165f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002970  00000000  00000000  0003171f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00034090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  00034ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011da1  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d250  00000000  00000000  00047169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bbc4  00000000  00000000  000543b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aff7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  000affd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005830 	.word	0x08005830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005830 	.word	0x08005830

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	4608      	mov	r0, r1
 8000582:	4611      	mov	r1, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4603      	mov	r3, r0
 8000588:	70fb      	strb	r3, [r7, #3]
 800058a:	460b      	mov	r3, r1
 800058c:	70bb      	strb	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 800059a:	78bb      	ldrb	r3, [r7, #2]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d821      	bhi.n	80005e4 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80005a6:	78ba      	ldrb	r2, [r7, #2]
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	461a      	mov	r2, r3
 80005b2:	231f      	movs	r3, #31
 80005b4:	4093      	lsls	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	43db      	mvns	r3, r3
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80005c2:	78f9      	ldrb	r1, [r7, #3]
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	e074      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d823      	bhi.n	8000632 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80005f0:	78bb      	ldrb	r3, [r7, #2]
 80005f2:	1f5a      	subs	r2, r3, #5
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	461a      	mov	r2, r3
 80005fe:	231f      	movs	r3, #31
 8000600:	4093      	lsls	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1f5a      	subs	r2, r3, #5
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	e04d      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000632:	78bb      	ldrb	r3, [r7, #2]
 8000634:	2b0e      	cmp	r3, #14
 8000636:	d825      	bhi.n	8000684 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 800063e:	78bb      	ldrb	r3, [r7, #2]
 8000640:	f1a3 020a 	sub.w	r2, r3, #10
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	461a      	mov	r2, r3
 800064e:	231f      	movs	r3, #31
 8000650:	4093      	lsls	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	43db      	mvns	r3, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 800065e:	78f9      	ldrb	r1, [r7, #3]
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	f1a3 020a 	sub.w	r2, r3, #10
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4313      	orrs	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
 8000682:	e024      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000688:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	f1a3 020f 	sub.w	r2, r3, #15
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	461a      	mov	r2, r3
 800069a:	231f      	movs	r3, #31
 800069c:	4093      	lsls	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	43db      	mvns	r3, r3
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80006aa:	78f9      	ldrb	r1, [r7, #3]
 80006ac:	78bb      	ldrb	r3, [r7, #2]
 80006ae:	f1a3 020f 	sub.w	r2, r3, #15
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d923      	bls.n	800071c <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f1a3 020a 	sub.w	r2, r3, #10
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	401a      	ands	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6999      	ldr	r1, [r3, #24]
 8000700:	7878      	ldrb	r0, [r7, #1]
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	f1a3 020a 	sub.w	r2, r3, #10
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	fa00 f303 	lsl.w	r3, r0, r3
 8000712:	ea41 0203 	orr.w	r2, r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 800071a:	e01f      	b.n	800075c <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	43db      	mvns	r3, r3
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6959      	ldr	r1, [r3, #20]
 8000746:	7878      	ldrb	r0, [r7, #1]
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	fa00 f303 	lsl.w	r3, r0, r3
 8000754:	ea41 0203 	orr.w	r2, r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f043 0204 	orr.w	r2, r3, #4
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	609a      	str	r2, [r3, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	b29b      	uxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e001      	b.n	80007c6 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007fc:	4b91      	ldr	r3, [pc, #580]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 030c 	and.w	r3, r3, #12
 8000804:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d011      	beq.n	8000830 <RCC_GetClocksFreq+0x5c>
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	2b08      	cmp	r3, #8
 8000810:	d837      	bhi.n	8000882 <RCC_GetClocksFreq+0xae>
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <RCC_GetClocksFreq+0x4c>
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d004      	beq.n	8000828 <RCC_GetClocksFreq+0x54>
 800081e:	e030      	b.n	8000882 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a89      	ldr	r2, [pc, #548]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 8000824:	601a      	str	r2, [r3, #0]
      break;
 8000826:	e030      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a87      	ldr	r2, [pc, #540]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800082c:	601a      	str	r2, [r3, #0]
      break;
 800082e:	e02c      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000830:	4b84      	ldr	r3, [pc, #528]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000838:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800083a:	4b82      	ldr	r3, [pc, #520]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000842:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3302      	adds	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	4a7d      	ldr	r2, [pc, #500]	; (8000a4c <RCC_GetClocksFreq+0x278>)
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
 800085c:	e00d      	b.n	800087a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800085e:	4b79      	ldr	r3, [pc, #484]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3301      	adds	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800086a:	4a77      	ldr	r2, [pc, #476]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087e:	601a      	str	r2, [r3, #0]
      break;
 8000880:	e003      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a70      	ldr	r2, [pc, #448]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 8000886:	601a      	str	r2, [r3, #0]
      break;
 8000888:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800088a:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000892:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800089a:	4a6d      	ldr	r2, [pc, #436]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	40da      	lsrs	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008ba:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80008c2:	4a63      	ldr	r2, [pc, #396]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	40da      	lsrs	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80008e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	0adb      	lsrs	r3, r3, #11
 80008e8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80008ea:	4a59      	ldr	r2, [pc, #356]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	40da      	lsrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800090a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000912:	4a50      	ldr	r2, [pc, #320]	; (8000a54 <RCC_GetClocksFreq+0x280>)
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	b29b      	uxth	r3, r3
 800091c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	e003      	b.n	800093e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000946:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800094e:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <RCC_GetClocksFreq+0x280>)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000956:	b29b      	uxth	r3, r3
 8000958:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	fbb2 f2f3 	udiv	r2, r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	e003      	b.n	800097a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	2b10      	cmp	r3, #16
 8000984:	d003      	beq.n	800098e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800098a:	619a      	str	r2, [r3, #24]
 800098c:	e003      	b.n	8000996 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b20      	cmp	r3, #32
 80009a0:	d003      	beq.n	80009aa <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 80009a6:	61da      	str	r2, [r3, #28]
 80009a8:	e003      	b.n	80009b2 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009be:	d10d      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d108      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d104      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	005a      	lsls	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	621a      	str	r2, [r3, #32]
 80009da:	e003      	b.n	80009e4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009f0:	d10d      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d108      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d104      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	005a      	lsls	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a0c:	e003      	b.n	8000a16 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d104      	bne.n	8000a2c <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
 8000a2a:	e029      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10f      	bne.n	8000a58 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a40:	e01e      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	003d0900 	.word	0x003d0900
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a58:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d104      	bne.n	8000a6e <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8000a6c:	e008      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a6e:	4b61      	ldr	r3, [pc, #388]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d102      	bne.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a5e      	ldr	r2, [pc, #376]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d104      	bne.n	8000a96 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a94:	e021      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a96:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa2:	d104      	bne.n	8000aae <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aac:	e015      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000aae:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000aba:	d104      	bne.n	8000ac6 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac4:	e009      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000ad2:	d102      	bne.n	8000ada <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000ada:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
 8000aee:	e021      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000afc:	d104      	bne.n	8000b08 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
 8000b06:	e015      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000b10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b14:	d104      	bne.n	8000b20 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1e:	e009      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000b28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b2c:	d102      	bne.n	8000b34 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
 8000b48:	e021      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b56:	d104      	bne.n	8000b62 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b60:	e015      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b6e:	d104      	bne.n	8000b7a <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
 8000b78:	e009      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000b86:	d102      	bne.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d104      	bne.n	8000ba4 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ba2:	e021      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bb0:	d104      	bne.n	8000bbc <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bba:	e015      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000bc8:	d104      	bne.n	8000bd4 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bd2:	e009      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000be0:	d102      	bne.n	8000be8 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000be8:	bf00      	nop
 8000bea:	372c      	adds	r7, #44	; 0x2c
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	007a1200 	.word	0x007a1200

08000bfc <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d103      	bne.n	8000c6a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e005      	b.n	8000c76 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d102      	bne.n	8000c76 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3308      	adds	r3, #8
 8000c74:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c88:	e006      	b.n	8000c98 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43da      	mvns	r2, r3
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3724      	adds	r7, #36	; 0x24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69da      	ldr	r2, [r3, #28]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e001      	b.n	8000cc8 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000d00:	2201      	movs	r2, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4013      	ands	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e00d      	b.n	8000d38 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d105      	bne.n	8000d2e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e004      	b.n	8000d38 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <USART_GetITStatus+0x8e>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	74fb      	strb	r3, [r7, #19]
 8000d62:	e001      	b.n	8000d68 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000d68:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f103 	lsl.w	r1, r2, r3
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <NVIC_EnableIRQ+0x30>)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <uart_get_char+0x48>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d011      	beq.n	8000de4 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <uart_get_char+0x4c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	b2d1      	uxtb	r1, r2
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <uart_get_char+0x4c>)
 8000dcc:	7011      	strb	r1, [r2, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <uart_get_char+0x50>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <uart_get_char+0x48>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <uart_get_char+0x48>)
 8000de2:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001ae 	.word	0x200001ae
 8000df8:	200001ad 	.word	0x200001ad
 8000dfc:	200000ac 	.word	0x200000ac

08000e00 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <uart_put_char+0x30>)
 8000e12:	f7ff fef3 	bl	8000bfc <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000e16:	bf00      	nop
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <uart_put_char+0x30>)
 8000e1c:	f7ff ff42 	bl	8000ca4 <USART_GetFlagStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f8      	beq.n	8000e18 <uart_put_char+0x18>
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004400 	.word	0x40004400

08000e34 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e012      	b.n	8000e6e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	d102      	bne.n	8000e5a <_write_r+0x26>
            uart_put_char('\r');
 8000e54:	200d      	movs	r0, #13
 8000e56:	f7ff ffd3 	bl	8000e00 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffcc 	bl	8000e00 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbe8      	blt.n	8000e48 <_write_r+0x14>
    }

    return len;
 8000e76:	683b      	ldr	r3, [r7, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <USART2_IRQHandler+0x5c>)
 8000e86:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <USART2_IRQHandler+0x60>)
 8000e88:	f7ff ff25 	bl	8000cd6 <USART_GetITStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d021      	beq.n	8000ed6 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <USART2_IRQHandler+0x60>)
 8000e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e96:	b299      	uxth	r1, r3
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <USART2_IRQHandler+0x64>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	b2d0      	uxtb	r0, r2
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <USART2_IRQHandler+0x64>)
 8000ea4:	7010      	strb	r0, [r2, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	b2c9      	uxtb	r1, r1
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <USART2_IRQHandler+0x68>)
 8000eac:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2bff      	cmp	r3, #255	; 0xff
 8000eb6:	d107      	bne.n	8000ec8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <USART2_IRQHandler+0x70>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <USART2_IRQHandler+0x70>)
 8000ec4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000ec6:	e006      	b.n	8000ed6 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	00050105 	.word	0x00050105
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	200001ac 	.word	0x200001ac
 8000ee8:	200000ac 	.word	0x200000ac
 8000eec:	200001ae 	.word	0x200001ae
 8000ef0:	200001ad 	.word	0x200001ad

08000ef4 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000efc:	4b86      	ldr	r3, [pc, #536]	; (8001118 <uart_init+0x224>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fc8f 	bl	8004828 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000f0a:	4b83      	ldr	r3, [pc, #524]	; (8001118 <uart_init+0x224>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fc88 	bl	8004828 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000f18:	4b80      	ldr	r3, [pc, #512]	; (800111c <uart_init+0x228>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a7f      	ldr	r2, [pc, #508]	; (800111c <uart_init+0x228>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000f24:	4b7d      	ldr	r3, [pc, #500]	; (800111c <uart_init+0x228>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4a7c      	ldr	r2, [pc, #496]	; (800111c <uart_init+0x228>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f3e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f4e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000f5e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f6a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000f6e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f7e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f8a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f8e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f9c:	f023 030c 	bic.w	r3, r3, #12
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fac:	8892      	ldrh	r2, [r2, #4]
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fc0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000fc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fcc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000fd0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fec:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ff0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <uart_init+0x22c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	; (8001120 <uart_init+0x22c>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <uart_init+0x22c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a47      	ldr	r2, [pc, #284]	; (8001120 <uart_init+0x22c>)
 8001004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001008:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <uart_init+0x22c>)
 800100c:	4a44      	ldr	r2, [pc, #272]	; (8001120 <uart_init+0x22c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <uart_init+0x22c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <uart_init+0x22c>)
 8001018:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800101c:	f023 030c 	bic.w	r3, r3, #12
 8001020:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <uart_init+0x22c>)
 8001024:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <uart_init+0x22c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <uart_init+0x22c>)
 800102c:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <uart_init+0x22c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <uart_init+0x22c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <uart_init+0x22c>)
 8001038:	f043 030c 	orr.w	r3, r3, #12
 800103c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <uart_init+0x22c>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <uart_init+0x22c>)
 8001044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001048:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <uart_init+0x22c>)
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <uart_init+0x22c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
 800105a:	2300      	movs	r3, #0
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fbb6 	bl	80007d4 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <uart_init+0x22c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d010      	beq.n	800109a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107a:	005a      	lsls	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	fbb3 f2f2 	udiv	r2, r3, r2
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	fb01 f202 	mul.w	r2, r1, r2
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
 8001098:	e00d      	b.n	80010b6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800109a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80010a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	fb01 f202 	mul.w	r2, r1, r2
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010bc:	429a      	cmp	r2, r3
 80010be:	d302      	bcc.n	80010c6 <uart_init+0x1d2>
        divider++;
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c2:	3301      	adds	r3, #1
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <uart_init+0x22c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80010d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80010dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010de:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80010e2:	4013      	ands	r3, r2
 80010e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010e6:	4313      	orrs	r3, r2
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <uart_init+0x22c>)
 80010ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010ee:	b292      	uxth	r2, r2
 80010f0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <uart_init+0x22c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <uart_init+0x22c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80010fe:	2201      	movs	r2, #1
 8001100:	4908      	ldr	r1, [pc, #32]	; (8001124 <uart_init+0x230>)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <uart_init+0x22c>)
 8001104:	f7ff fd8c 	bl	8000c20 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001108:	2026      	movs	r0, #38	; 0x26
 800110a:	f7ff fe35 	bl	8000d78 <NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000002c 	.word	0x2000002c
 800111c:	40021000 	.word	0x40021000
 8001120:	40004400 	.word	0x40004400
 8001124:	00050105 	.word	0x00050105

08001128 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8001132:	2316      	movs	r3, #22
 8001134:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d904      	bls.n	8001146 <fgcolor+0x1e>
	  type = 1;                // bold text
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b08      	subs	r3, #8
 8001144:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	331e      	adds	r3, #30
 800114c:	211b      	movs	r1, #27
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <fgcolor+0x34>)
 8001150:	f003 fabe 	bl	80046d0 <iprintf>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08005848 	.word	0x08005848

08001160 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001164:	211b      	movs	r1, #27
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <clrscr+0x18>)
 8001168:	f003 fab2 	bl	80046d0 <iprintf>
    printf("%c[J", ESC);
 800116c:	211b      	movs	r1, #27
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <clrscr+0x1c>)
 8001170:	f003 faae 	bl	80046d0 <iprintf>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08005874 	.word	0x08005874
 800117c:	0800587c 	.word	0x0800587c

08001180 <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	211b      	movs	r1, #27
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <gotoxy+0x20>)
 8001192:	f003 fa9d 	bl	80046d0 <iprintf>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800588c 	.word	0x0800588c

080011a4 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d15e      	bne.n	8001276 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
 80011bc:	e019      	b.n	80011f2 <drawBox+0x4e>
			 gotoxy(x1,y);
 80011be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ffdd 	bl	8001180 <gotoxy>
			 if (y==y1){
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d103      	bne.n	80011d6 <drawBox+0x32>
				printf("%c", 201);
 80011ce:	20c9      	movs	r0, #201	; 0xc9
 80011d0:	f003 fa96 	bl	8004700 <putchar>
 80011d4:	e00a      	b.n	80011ec <drawBox+0x48>
			 }
			 else if(y==y2){
 80011d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d103      	bne.n	80011e6 <drawBox+0x42>
				printf("%c", 200);
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f003 fa8e 	bl	8004700 <putchar>
 80011e4:	e002      	b.n	80011ec <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 80011e6:	20ba      	movs	r0, #186	; 0xba
 80011e8:	f003 fa8a 	bl	8004700 <putchar>
		 for(int y = y1; y <= y2; y++){
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	3301      	adds	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dde1      	ble.n	80011be <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	e014      	b.n	800122a <drawBox+0x86>
   			 if(x!=x1){
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d00d      	beq.n	8001224 <drawBox+0x80>
				 gotoxy(x,y1);
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6a38      	ldr	r0, [r7, #32]
 800120c:	f7ff ffb8 	bl	8001180 <gotoxy>
				 printf("%c", 205);
 8001210:	20cd      	movs	r0, #205	; 0xcd
 8001212:	f003 fa75 	bl	8004700 <putchar>
				 gotoxy(x,y2);
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f7ff ffb1 	bl	8001180 <gotoxy>
				 printf("%c", 205);
 800121e:	20cd      	movs	r0, #205	; 0xcd
 8001220:	f003 fa6e 	bl	8004700 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3a      	ldr	r2, [r7, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	dde6      	ble.n	8001200 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e019      	b.n	800126c <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001238:	69f9      	ldr	r1, [r7, #28]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa0 	bl	8001180 <gotoxy>
   			 if (y==y1){
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	429a      	cmp	r2, r3
 8001246:	d103      	bne.n	8001250 <drawBox+0xac>
				printf("%c", 187);
 8001248:	20bb      	movs	r0, #187	; 0xbb
 800124a:	f003 fa59 	bl	8004700 <putchar>
 800124e:	e00a      	b.n	8001266 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d103      	bne.n	8001260 <drawBox+0xbc>
				printf("%c", 188);
 8001258:	20bc      	movs	r0, #188	; 0xbc
 800125a:	f003 fa51 	bl	8004700 <putchar>
 800125e:	e002      	b.n	8001266 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001260:	20ba      	movs	r0, #186	; 0xba
 8001262:	f003 fa4d 	bl	8004700 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dde1      	ble.n	8001238 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001274:	e05d      	b.n	8001332 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e019      	b.n	80012b0 <drawBox+0x10c>
			 gotoxy(x1,y);
 800127c:	69b9      	ldr	r1, [r7, #24]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff ff7e 	bl	8001180 <gotoxy>
			 if (y==y1){
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	429a      	cmp	r2, r3
 800128a:	d103      	bne.n	8001294 <drawBox+0xf0>
				printf("%c", 218);
 800128c:	20da      	movs	r0, #218	; 0xda
 800128e:	f003 fa37 	bl	8004700 <putchar>
 8001292:	e00a      	b.n	80012aa <drawBox+0x106>
			 else if(y==y2){
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d103      	bne.n	80012a4 <drawBox+0x100>
				printf("%c", 192);
 800129c:	20c0      	movs	r0, #192	; 0xc0
 800129e:	f003 fa2f 	bl	8004700 <putchar>
 80012a2:	e002      	b.n	80012aa <drawBox+0x106>
				printf("%c", 179);
 80012a4:	20b3      	movs	r0, #179	; 0xb3
 80012a6:	f003 fa2b 	bl	8004700 <putchar>
		for(int y = y1; y <= y2; y++){
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dde1      	ble.n	800127c <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e014      	b.n	80012e8 <drawBox+0x144>
			if(x!=x1){
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d00d      	beq.n	80012e2 <drawBox+0x13e>
				 gotoxy(x,y1);
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f7ff ff59 	bl	8001180 <gotoxy>
				 printf("%c", 196);
 80012ce:	20c4      	movs	r0, #196	; 0xc4
 80012d0:	f003 fa16 	bl	8004700 <putchar>
				 gotoxy(x,y2);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff52 	bl	8001180 <gotoxy>
				 printf("%c", 196);
 80012dc:	20c4      	movs	r0, #196	; 0xc4
 80012de:	f003 fa0f 	bl	8004700 <putchar>
		for(int x = x1; x <= x2; x++){
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dde6      	ble.n	80012be <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e019      	b.n	800132a <drawBox+0x186>
			 gotoxy(x2,y);
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff41 	bl	8001180 <gotoxy>
			if (y==y1){
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <drawBox+0x16a>
				printf("%c", 191);
 8001306:	20bf      	movs	r0, #191	; 0xbf
 8001308:	f003 f9fa 	bl	8004700 <putchar>
 800130c:	e00a      	b.n	8001324 <drawBox+0x180>
			 else if(y==y2){
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d103      	bne.n	800131e <drawBox+0x17a>
				printf("%c", 217);
 8001316:	20d9      	movs	r0, #217	; 0xd9
 8001318:	f003 f9f2 	bl	8004700 <putchar>
 800131c:	e002      	b.n	8001324 <drawBox+0x180>
				printf("%c", 179);
 800131e:	20b3      	movs	r0, #179	; 0xb3
 8001320:	f003 f9ee 	bl	8004700 <putchar>
		for(int y = y1; y <= y2; y++){
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	dde1      	ble.n	80012f6 <drawBox+0x152>
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 800133a:	b590      	push	{r4, r7, lr}
 800133c:	b089      	sub	sp, #36	; 0x24
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001348:	e073      	b.n	8001432 <updateBullets+0xf8>

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7a1b      	ldrb	r3, [r3, #8]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f000 ff00 	bl	8002156 <intToFp>
 8001356:	4602      	mov	r2, r0
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fef5 	bl	8002156 <intToFp>
 800136c:	4602      	mov	r2, r0
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ff8d 	bl	8002298 <fpAbs>
 800137e:	4604      	mov	r4, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 ff88 	bl	8002298 <fpAbs>
 8001388:	4603      	mov	r3, r0
 800138a:	4423      	add	r3, r4
 800138c:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001390:	4618      	mov	r0, r3
 8001392:	f000 ff16 	bl	80021c2 <fpMultiply>
 8001396:	4602      	mov	r2, r0
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 800139c:	2001      	movs	r0, #1
 800139e:	f000 feda 	bl	8002156 <intToFp>
 80013a2:	4602      	mov	r2, r0
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f000 ff2a 	bl	8002204 <fpDivide>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f107 0014 	add.w	r0, r7, #20
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	ca06      	ldmia	r2, {r1, r2}
 80013bc:	f000 ff4a 	bl	8002254 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7a9b      	ldrb	r3, [r3, #10]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fec5 	bl	8002156 <intToFp>
 80013cc:	4604      	mov	r4, r0
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f000 fef2 	bl	80021c2 <fpMultiply>
 80013de:	4603      	mov	r3, r0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 ff0e 	bl	8002204 <fpDivide>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f107 000c 	add.w	r0, r7, #12
 80013ee:	f107 0214 	add.w	r2, r7, #20
 80013f2:	ca06      	ldmia	r2, {r1, r2}
 80013f4:	f000 ff2e 	bl	8002254 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	441a      	add	r2, r3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	441a      	add	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	441a      	add	r2, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	441a      	add	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d188      	bne.n	800134a <updateBullets+0x10>
	}

}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}

08001442 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001450:	e0a2      	b.n	8001598 <detectBulletHit+0x156>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fe92 	bl	8002180 <fpToInt>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]

		int8_t hitInertObject = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	73bb      	strb	r3, [r7, #14]
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fe89 	bl	8002180 <fpToInt>
 800146e:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001470:	2b04      	cmp	r3, #4
 8001472:	dd1a      	ble.n	80014aa <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fe81 	bl	8002180 <fpToInt>
 800147e:	4603      	mov	r3, r0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001480:	2b55      	cmp	r3, #85	; 0x55
 8001482:	dc12      	bgt.n	80014aa <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fe79 	bl	8002180 <fpToInt>
 800148e:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001490:	2b01      	cmp	r3, #1
 8001492:	dd0a      	ble.n	80014aa <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fe71 	bl	8002180 <fpToInt>
 800149e:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 80014a0:	2b9b      	cmp	r3, #155	; 0x9b
 80014a2:	dc02      	bgt.n	80014aa <detectBulletHit+0x68>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d801      	bhi.n	80014ae <detectBulletHit+0x6c>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <detectBulletHit+0x6e>
 80014ae:	2300      	movs	r3, #0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80014b0:	73bb      	strb	r3, [r7, #14]
				distToMoon<=6;

		if(hitInertObject){ //TODO: add other boundaries
 80014b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <detectBulletHit+0x82>
			deleteBulletNode(&(gameState->bulletLL), current);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 ff9c 	bl	80033fc <deleteBulletNode>
		}

		//Check if the bullet hit an enemy
		enemyNode_t* currentEnemy = gameState->enemyLL;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
		while(currentEnemy != NULL){
 80014ca:	e05f      	b.n	800158c <detectBulletHit+0x14a>
			uint8_t hitEnemy = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	737b      	strb	r3, [r7, #13]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fe53 	bl	8002180 <fpToInt>
 80014da:	4604      	mov	r4, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe4b 	bl	8002180 <fpToInt>
 80014ea:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80014ec:	429c      	cmp	r4, r3
 80014ee:	db33      	blt.n	8001558 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fe43 	bl	8002180 <fpToInt>
 80014fa:	4604      	mov	r4, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fe3b 	bl	8002180 <fpToInt>
 800150a:	4603      	mov	r3, r0
 800150c:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800150e:	429c      	cmp	r4, r3
 8001510:	dc22      	bgt.n	8001558 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fe32 	bl	8002180 <fpToInt>
 800151c:	4604      	mov	r4, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fe2a 	bl	8002180 <fpToInt>
 800152c:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 800152e:	429c      	cmp	r4, r3
 8001530:	db12      	blt.n	8001558 <detectBulletHit+0x116>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe22 	bl	8002180 <fpToInt>
 800153c:	4604      	mov	r4, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fe1a 	bl	8002180 <fpToInt>
 800154c:	4603      	mov	r3, r0
 800154e:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001550:	429c      	cmp	r4, r3
 8001552:	dc01      	bgt.n	8001558 <detectBulletHit+0x116>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <detectBulletHit+0x118>
 8001558:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800155a:	737b      	strb	r3, [r7, #13]
			if(hitEnemy == 1){
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d111      	bne.n	8001586 <detectBulletHit+0x144>
				gameState->score += 10;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001566:	330a      	adds	r3, #10
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 fcd6 	bl	8002f20 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	4618      	mov	r0, r3
 800157a:	f001 ff3f 	bl	80033fc <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fe87 	bl	8003294 <deleteEnemyNode>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	613b      	str	r3, [r7, #16]
		while(currentEnemy != NULL){
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d19c      	bne.n	80014cc <detectBulletHit+0x8a>
		}
		current = current->nextBulletAddress;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f af59 	bne.w	8001452 <detectBulletHit+0x10>
	}
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}

080015aa <drawBullets>:

void drawBullets(gameState_t* gameState){
 80015aa:	b590      	push	{r4, r7, lr}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 80015b8:	e036      	b.n	8001628 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fdde 	bl	8002180 <fpToInt>
 80015c4:	4604      	mov	r4, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fdd8 	bl	8002180 <fpToInt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	0fda      	lsrs	r2, r3, #31
 80015d4:	4413      	add	r3, r2
 80015d6:	105b      	asrs	r3, r3, #1
 80015d8:	4619      	mov	r1, r3
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fdd0 	bl	8001180 <gotoxy>
		printf(" ");
 80015e0:	2020      	movs	r0, #32
 80015e2:	f003 f88d 	bl	8004700 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fdc8 	bl	8002180 <fpToInt>
 80015f0:	4604      	mov	r4, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fdc2 	bl	8002180 <fpToInt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	0fda      	lsrs	r2, r3, #31
 8001600:	4413      	add	r3, r2
 8001602:	105b      	asrs	r3, r3, #1
 8001604:	4619      	mov	r1, r3
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fdba 	bl	8001180 <gotoxy>
		printf("O");
 800160c:	204f      	movs	r0, #79	; 0x4f
 800160e:	f003 f877 	bl	8004700 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1c5      	bne.n	80015ba <drawBullets+0x10>
	}
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}

08001638 <NVIC_EnableIRQ>:
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2201      	movs	r2, #1
 800164a:	fa02 f103 	lsl.w	r1, r2, r3
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <NVIC_EnableIRQ+0x30>)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0b      	bge.n	8001698 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <NVIC_SetPriority+0x4c>)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	3b04      	subs	r3, #4
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001696:	e009      	b.n	80016ac <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <NVIC_SetPriority+0x50>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <initJoystick+0x120>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <initJoystick+0x120>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ce:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <initJoystick+0x120>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <initJoystick+0x120>)
 80016d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016da:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <initJoystick+0x120>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <initJoystick+0x120>)
 80016e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016e6:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <initJoystick+0x124>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <initJoystick+0x124>)
 80016ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016f2:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <initJoystick+0x124>)
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <initJoystick+0x124>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <initJoystick+0x124>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <initJoystick+0x124>)
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <initJoystick+0x124>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <initJoystick+0x124>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800171e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001722:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001728:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <initJoystick+0x124>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <initJoystick+0x124>)
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <initJoystick+0x124>)
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <initJoystick+0x124>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <initJoystick+0x124>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <initJoystick+0x124>)
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <initJoystick+0x124>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <initJoystick+0x124>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <initJoystick+0x128>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <initJoystick+0x128>)
 8001782:	f023 030c 	bic.w	r3, r3, #12
 8001786:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <initJoystick+0x128>)
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <initJoystick+0x128>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <initJoystick+0x128>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <initJoystick+0x128>)
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <initJoystick+0x128>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <initJoystick+0x128>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <initJoystick+0x128>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <initJoystick+0x128>)
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <initJoystick+0x128>)
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <initJoystick+0x128>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <initJoystick+0x128>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <initJoystick+0x128>)
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <initJoystick+0x128>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <initJoystick+0x128>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	60d3      	str	r3, [r2, #12]

}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800

080017ec <centerIsPressed>:

uint8_t centerIsPressed(){
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <centerIsPressed+0x50>)
 80017f2:	8a1b      	ldrh	r3, [r3, #16]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00c      	beq.n	8001818 <centerIsPressed+0x2c>
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <centerIsPressed+0x54>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <centerIsPressed+0x58>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b1e      	cmp	r3, #30
 800180a:	d905      	bls.n	8001818 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <centerIsPressed+0x54>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <centerIsPressed+0x58>)
 8001812:	6013      	str	r3, [r2, #0]
		 return 1;
 8001814:	2301      	movs	r3, #1
 8001816:	e00c      	b.n	8001832 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <centerIsPressed+0x50>)
 800181a:	8a1b      	ldrh	r3, [r3, #16]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <centerIsPressed+0x54>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3b1e      	subs	r3, #30
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <centerIsPressed+0x58>)
 800182e:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001830:	2300      	movs	r3, #0
	 }
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	48000400 	.word	0x48000400
 8001840:	200001c8 	.word	0x200001c8
 8001844:	200001b0 	.word	0x200001b0

08001848 <upIsPressed>:

uint8_t upIsPressed(){
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 800184c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001850:	8a1b      	ldrh	r3, [r3, #16]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00c      	beq.n	8001876 <upIsPressed+0x2e>
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <upIsPressed+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <upIsPressed+0x58>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b1e      	cmp	r3, #30
 8001868:	d905      	bls.n	8001876 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <upIsPressed+0x54>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <upIsPressed+0x58>)
 8001870:	6013      	str	r3, [r2, #0]
			 return 1;
 8001872:	2301      	movs	r3, #1
 8001874:	e00d      	b.n	8001892 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800187a:	8a1b      	ldrh	r3, [r3, #16]
 800187c:	b29b      	uxth	r3, r3
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	d104      	bne.n	8001890 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <upIsPressed+0x54>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3b1e      	subs	r3, #30
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <upIsPressed+0x58>)
 800188e:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001890:	2300      	movs	r3, #0
		 }
	 }
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200001c8 	.word	0x200001c8
 80018a0:	200001b4 	.word	0x200001b4

080018a4 <downIsPressed>:

uint8_t downIsPressed(){
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <downIsPressed+0x50>)
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <downIsPressed+0x2c>
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <downIsPressed+0x54>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <downIsPressed+0x58>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b1e      	cmp	r3, #30
 80018c2:	d905      	bls.n	80018d0 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <downIsPressed+0x54>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <downIsPressed+0x58>)
 80018ca:	6013      	str	r3, [r2, #0]
			 return 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e00c      	b.n	80018ea <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <downIsPressed+0x50>)
 80018d2:	8a1b      	ldrh	r3, [r3, #16]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d104      	bne.n	80018e8 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <downIsPressed+0x54>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <downIsPressed+0x58>)
 80018e6:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80018e8:	2300      	movs	r3, #0
		 }
	 }
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	48000400 	.word	0x48000400
 80018f8:	200001c8 	.word	0x200001c8
 80018fc:	200001b8 	.word	0x200001b8

08001900 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <initTimer+0x60>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <initTimer+0x60>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <initTimer+0x64>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4a13      	ldr	r2, [pc, #76]	; (8001964 <initTimer+0x64>)
 8001918:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 800191c:	f023 030f 	bic.w	r3, r3, #15
 8001920:	b29b      	uxth	r3, r3
 8001922:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <initTimer+0x64>)
 8001926:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <initTimer+0x64>)
 800192e:	2209      	movs	r2, #9
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <initTimer+0x64>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <initTimer+0x64>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <initTimer+0x64>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <initTimer+0x64>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800194e:	2100      	movs	r1, #0
 8001950:	2018      	movs	r0, #24
 8001952:	f7ff fe8b 	bl	800166c <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001956:	2018      	movs	r0, #24
 8001958:	f7ff fe6e 	bl	8001638 <NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	40014000 	.word	0x40014000

08001968 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	runtime++;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001974:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6113      	str	r3, [r2, #16]
 }
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	200001c8 	.word	0x200001c8
 8001990:	40014000 	.word	0x40014000

08001994 <I2C_init>:

    return val;
}

void I2C_init()
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001998:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <I2C_init+0x144>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <I2C_init+0x144>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a2:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 80019a4:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <I2C_init+0x148>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <I2C_init+0x148>)
 80019aa:	f023 030f 	bic.w	r3, r3, #15
 80019ae:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <I2C_init+0x148>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	4a49      	ldr	r2, [pc, #292]	; (8001adc <I2C_init+0x148>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 80019bc:	4b47      	ldr	r3, [pc, #284]	; (8001adc <I2C_init+0x148>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <I2C_init+0x148>)
 80019c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80019c8:	4b44      	ldr	r3, [pc, #272]	; (8001adc <I2C_init+0x148>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	4a43      	ldr	r2, [pc, #268]	; (8001adc <I2C_init+0x148>)
 80019ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80019d4:	4b41      	ldr	r3, [pc, #260]	; (8001adc <I2C_init+0x148>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <I2C_init+0x148>)
 80019da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80019de:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <I2C_init+0x148>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <I2C_init+0x148>)
 80019e6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80019ea:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80019ec:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <I2C_init+0x148>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4a3a      	ldr	r2, [pc, #232]	; (8001adc <I2C_init+0x148>)
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <I2C_init+0x148>)
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <I2C_init+0x148>)
 8001a04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <I2C_init+0x148>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a32      	ldr	r2, [pc, #200]	; (8001adc <I2C_init+0x148>)
 8001a12:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a16:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <I2C_init+0x148>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <I2C_init+0x148>)
 8001a1e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8001a22:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <I2C_init+0x148>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <I2C_init+0x148>)
 8001a2a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a2e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <I2C_init+0x148>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a29      	ldr	r2, [pc, #164]	; (8001adc <I2C_init+0x148>)
 8001a36:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001a3a:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <I2C_init+0x144>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <I2C_init+0x144>)
 8001a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a46:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <I2C_init+0x14c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <I2C_init+0x14c>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <I2C_init+0x14c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <I2C_init+0x14c>)
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <I2C_init+0x150>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <I2C_init+0x14c>)
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <I2C_init+0x14c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <I2C_init+0x14c>)
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <I2C_init+0x14c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <I2C_init+0x14c>)
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <I2C_init+0x154>)
 8001a74:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <I2C_init+0x14c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <I2C_init+0x14c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <I2C_init+0x14c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <I2C_init+0x14c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <I2C_init+0x14c>)
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <I2C_init+0x14c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <I2C_init+0x14c>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <I2C_init+0x14c>)
 8001a9c:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001aa0:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <I2C_init+0x14c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <I2C_init+0x14c>)
 8001aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aac:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <I2C_init+0x14c>)
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <I2C_init+0x14c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <I2C_init+0x14c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <I2C_init+0x14c>)
 8001abc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ac4:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <I2C_init+0x14c>)
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <I2C_init+0x14c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6053      	str	r3, [r2, #4]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	00cfe0ff 	.word	0x00cfe0ff
 8001ae8:	10805e89 	.word	0x10805e89

08001aec <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <analogConfigPorts+0x140>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <analogConfigPorts+0x140>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8001b02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	43d2      	mvns	r2, r2
 8001b14:	4611      	mov	r1, r2
 8001b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8001b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8001b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	43d2      	mvns	r2, r2
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b42:	400b      	ands	r3, r1
 8001b44:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8001b46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	0052      	lsls	r2, r2, #1
 8001b50:	2103      	movs	r1, #3
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	4611      	mov	r1, r2
 8001b58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <analogConfigPorts+0x140>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <analogConfigPorts+0x140>)
 8001b66:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <analogConfigPorts+0x140>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <analogConfigPorts+0x140>)
 8001b72:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8001b76:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <analogConfigPorts+0x140>)
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <analogConfigPorts+0x140>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8001b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8001b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <analogConfigPorts+0x144>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8001b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ba6:	f023 030f 	bic.w	r3, r3, #15
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8001bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e002      	b.n	8001bc8 <analogConfigPorts+0xdc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	dbf8      	blt.n	8001bc2 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8001bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bde:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8001be0:	bf00      	nop
 8001be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dafa      	bge.n	8001be2 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	e002      	b.n	8001bf8 <analogConfigPorts+0x10c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b63      	cmp	r3, #99	; 0x63
 8001bfc:	ddf9      	ble.n	8001bf2 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8001bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8001c0e:	bf00      	nop
 8001c10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f8      	beq.n	8001c10 <analogConfigPorts+0x124>
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	fdffc007 	.word	0xfdffc007

08001c34 <readPotentiometer>:

uint16_t readPotentiometer(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2101      	movs	r1, #1
 8001c40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c44:	f7fe fc98 	bl	8000578 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8001c48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c4c:	f7fe fd8c 	bl	8000768 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001c50:	bf00      	nop
 8001c52:	2104      	movs	r1, #4
 8001c54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c58:	f7fe fda3 	bl	80007a2 <ADC_GetFlagStatus>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f7      	beq.n	8001c52 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8001c62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c66:	f7fe fd8f 	bl	8000788 <ADC_GetConversionValue>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8001c7e:	2309      	movs	r3, #9
 8001c80:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	79fa      	ldrb	r2, [r7, #7]
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	43d2      	mvns	r2, r2
 8001c94:	4611      	mov	r1, r2
 8001c96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8001c9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	0052      	lsls	r2, r2, #1
 8001ca8:	2102      	movs	r1, #2
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 8001cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 8001cdc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ce4:	8892      	ldrh	r2, [r2, #4]
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8001cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	43d2      	mvns	r2, r2
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d02:	400b      	ands	r3, r1
 8001d04:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 8001d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4611      	mov	r1, r2
 8001d18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8001d20:	2307      	movs	r3, #7
 8001d22:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <initRGB+0x1c8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	79fa      	ldrb	r2, [r7, #7]
 8001d2a:	0052      	lsls	r2, r2, #1
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	43d2      	mvns	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <initRGB+0x1c8>)
 8001d38:	400b      	ands	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <initRGB+0x1c8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	0052      	lsls	r2, r2, #1
 8001d44:	2102      	movs	r1, #2
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <initRGB+0x1c8>)
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <initRGB+0x1c8>)
 8001d54:	889b      	ldrh	r3, [r3, #4]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <initRGB+0x1c8>)
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 8001d72:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <initRGB+0x1c8>)
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <initRGB+0x1c8>)
 8001d76:	8892      	ldrh	r2, [r2, #4]
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <initRGB+0x1c8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	79fa      	ldrb	r2, [r7, #7]
 8001d82:	0052      	lsls	r2, r2, #1
 8001d84:	2103      	movs	r1, #3
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	43d2      	mvns	r2, r2
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <initRGB+0x1c8>)
 8001d90:	400b      	ands	r3, r1
 8001d92:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <initRGB+0x1c8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	79fa      	ldrb	r2, [r7, #7]
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4611      	mov	r1, r2
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <initRGB+0x1c8>)
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 8001daa:	2304      	movs	r3, #4
 8001dac:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <initRGB+0x1cc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	0052      	lsls	r2, r2, #1
 8001db6:	2103      	movs	r1, #3
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	43d2      	mvns	r2, r2
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <initRGB+0x1cc>)
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <initRGB+0x1cc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	0052      	lsls	r2, r2, #1
 8001dce:	2102      	movs	r1, #2
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <initRGB+0x1cc>)
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <initRGB+0x1cc>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4013      	ands	r3, r2
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <initRGB+0x1cc>)
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 8001dfc:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <initRGB+0x1cc>)
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <initRGB+0x1cc>)
 8001e00:	8892      	ldrh	r2, [r2, #4]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <initRGB+0x1cc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	0052      	lsls	r2, r2, #1
 8001e0e:	2103      	movs	r1, #3
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	43d2      	mvns	r2, r2
 8001e16:	4611      	mov	r1, r2
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <initRGB+0x1cc>)
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <initRGB+0x1cc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	0052      	lsls	r2, r2, #1
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <initRGB+0x1cc>)
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	48000800 	.word	0x48000800
 8001e44:	48000400 	.word	0x48000400

08001e48 <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <RGBColor+0x88>)
 8001e52:	8a9b      	ldrh	r3, [r3, #20]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <RGBColor+0x88>)
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <RGBColor+0x8c>)
 8001e62:	8a9b      	ldrh	r3, [r3, #20]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <RGBColor+0x8c>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8001e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e74:	8a9b      	ldrh	r3, [r3, #20]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <RGBColor+0x88>)
 8001e8e:	8a9b      	ldrh	r3, [r3, #20]
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <RGBColor+0x88>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d104      	bne.n	8001eaa <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <RGBColor+0x8c>)
 8001ea2:	8a9b      	ldrh	r3, [r3, #20]
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <RGBColor+0x8c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3302      	adds	r3, #2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8001eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001eb8:	8a9b      	ldrh	r3, [r3, #20]
 8001eba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	829a      	strh	r2, [r3, #20]
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800

08001ed8 <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 8001ee0:	f002 fc52 	bl	8004788 <rand>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a35      	ldr	r2, [pc, #212]	; (8001fbc <spawnEnemy+0xe4>)
 8001ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eec:	1151      	asrs	r1, r2, #5
 8001eee:	17da      	asrs	r2, r3, #31
 8001ef0:	1a8a      	subs	r2, r1, r2
 8001ef2:	2164      	movs	r1, #100	; 0x64
 8001ef4:	fb01 f202 	mul.w	r2, r1, r2
 8001ef8:	1a9a      	subs	r2, r3, r2
 8001efa:	4613      	mov	r3, r2
 8001efc:	77fb      	strb	r3, [r7, #31]
	if(shouldGenEnemy == 0){
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d156      	bne.n	8001fb2 <spawnEnemy+0xda>
		//TODO: Fix tilfældighedsgenerator
		uint16_t enemyPos = (rand() % 149) + 1;
 8001f04:	f002 fc40 	bl	8004788 <rand>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <spawnEnemy+0xe8>)
 8001f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f10:	10d1      	asrs	r1, r2, #3
 8001f12:	17da      	asrs	r2, r3, #31
 8001f14:	1a8a      	subs	r2, r1, r2
 8001f16:	2195      	movs	r1, #149	; 0x95
 8001f18:	fb01 f202 	mul.w	r2, r1, r2
 8001f1c:	1a9a      	subs	r2, r3, r2
 8001f1e:	b293      	uxth	r3, r2
 8001f20:	3301      	adds	r3, #1
 8001f22:	83bb      	strh	r3, [r7, #28]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 8001f24:	2014      	movs	r0, #20
 8001f26:	f002 fb11 	bl	800454c <malloc>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 8001f2e:	2008      	movs	r0, #8
 8001f30:	f002 fb0c 	bl	800454c <malloc>
 8001f34:	4603      	mov	r3, r0
 8001f36:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 8001f38:	8bbb      	ldrh	r3, [r7, #28]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f90b 	bl	8002156 <intToFp>
 8001f40:	4602      	mov	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 8001f46:	2006      	movs	r0, #6
 8001f48:	f000 f905 	bl	8002156 <intToFp>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8001f58:	2008      	movs	r0, #8
 8001f5a:	f002 faf7 	bl	800454c <malloc>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f8f7 	bl	8002156 <intToFp>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f74:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8001f7c:	2008      	movs	r0, #8
 8001f7e:	f002 fae5 	bl	800454c <malloc>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <spawnEnemy+0xec>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2264      	movs	r2, #100	; 0x64
 8001fa8:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 f943 	bl	8003238 <appendEnemy>
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	51eb851f 	.word	0x51eb851f
 8001fc0:	0dbeb61f 	.word	0x0dbeb61f
 8001fc4:	200001c8 	.word	0x200001c8

08001fc8 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8001fd6:	e01c      	b.n	8002012 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	440a      	add	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	440a      	add	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1df      	bne.n	8001fd8 <updateEnemy+0x10>
	}
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b092      	sub	sp, #72	; 0x48
 800202c:	af04      	add	r7, sp, #16
 800202e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002036:	e05a      	b.n	80020ee <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	7b12      	ldrb	r2, [r2, #12]
 8002044:	441a      	add	r2, r3
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <shootEnemy+0xd8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d24c      	bcs.n	80020e8 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f881 	bl	8002156 <intToFp>
 8002054:	4603      	mov	r3, r0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002058:	2002      	movs	r0, #2
 800205a:	f000 f87c 	bl	8002156 <intToFp>
 800205e:	4603      	mov	r3, r0
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685c      	ldr	r4, [r3, #4]
 8002074:	2004      	movs	r0, #4
 8002076:	f000 f86e 	bl	8002156 <intToFp>
 800207a:	4603      	mov	r3, r0
 800207c:	4423      	add	r3, r4
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800209c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80020bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020c0:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 80020c4:	687d      	ldr	r5, [r7, #4]
 80020c6:	466c      	mov	r4, sp
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d8:	4628      	mov	r0, r5
 80020da:	f001 f87a 	bl	80031d2 <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <shootEnemy+0xd8>)
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1a1      	bne.n	8002038 <shootEnemy+0x10>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3738      	adds	r7, #56	; 0x38
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	bf00      	nop
 8002100:	200001c8 	.word	0x200001c8

08002104 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002112:	e018      	b.n	8002146 <detectCityHit+0x42>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f82f 	bl	8002180 <fpToInt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b4f      	cmp	r3, #79	; 0x4f
 8002126:	dd0b      	ble.n	8002140 <detectCityHit+0x3c>
			gameState->cityLives--;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			deleteEnemyNode(gameState, thisNode);
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f001 f8aa 	bl	8003294 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e3      	bne.n	8002114 <detectCityHit+0x10>
	}
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
	output<<=16;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	60fb      	str	r3, [r7, #12]
	return output;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60bb      	str	r3, [r7, #8]
	int output=0;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002196:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	607b      	str	r3, [r7, #4]
	output+=fp;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da03      	bge.n	80021b4 <fpToInt+0x34>
		output-=65536;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80021b2:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80021b4:	68fb      	ldr	r3, [r7, #12]

}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
	n>>=8;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	607b      	str	r3, [r7, #4]
	m>>=8;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	60fb      	str	r3, [r7, #12]

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4608      	mov	r0, r1
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	0c03      	lsrs	r3, r0, #16
 8002218:	0402      	lsls	r2, r0, #16
 800221a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800222c:	1884      	adds	r4, r0, r2
 800222e:	eb41 0503 	adc.w	r5, r1, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f7fe f81f 	bl	8000280 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4613      	mov	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

    return result;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}

08002254 <scaleVector>:


vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	1d38      	adds	r0, r7, #4
 800225e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002262:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ffaa 	bl	80021c2 <fpMultiply>
 800226e:	4603      	mov	r3, r0
 8002270:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ffa3 	bl	80021c2 <fpMultiply>
 800227c:	4603      	mov	r3, r0
 800227e:	617b      	str	r3, [r7, #20]
	return vectorOut;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	e893 0003 	ldmia.w	r3, {r0, r1}
 800228c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da02      	bge.n	80022b0 <fpAbs+0x18>
			output=(~output)+1;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	425b      	negs	r3, r3
 80022ae:	60fb      	str	r3, [r7, #12]
		}
	return output;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <drawbackground>:
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 80022c2:	2123      	movs	r1, #35	; 0x23
 80022c4:	2037      	movs	r0, #55	; 0x37
 80022c6:	f7fe ff5b 	bl	8001180 <gotoxy>
	printf("*");
 80022ca:	202a      	movs	r0, #42	; 0x2a
 80022cc:	f002 fa18 	bl	8004700 <putchar>
	gotoxy(63,27);
 80022d0:	211b      	movs	r1, #27
 80022d2:	203f      	movs	r0, #63	; 0x3f
 80022d4:	f7fe ff54 	bl	8001180 <gotoxy>
	printf("*");
 80022d8:	202a      	movs	r0, #42	; 0x2a
 80022da:	f002 fa11 	bl	8004700 <putchar>
	gotoxy(10,15);
 80022de:	210f      	movs	r1, #15
 80022e0:	200a      	movs	r0, #10
 80022e2:	f7fe ff4d 	bl	8001180 <gotoxy>
	printf("*");
 80022e6:	202a      	movs	r0, #42	; 0x2a
 80022e8:	f002 fa0a 	bl	8004700 <putchar>
	gotoxy(20,40);
 80022ec:	2128      	movs	r1, #40	; 0x28
 80022ee:	2014      	movs	r0, #20
 80022f0:	f7fe ff46 	bl	8001180 <gotoxy>
	printf("%c",43);
 80022f4:	202b      	movs	r0, #43	; 0x2b
 80022f6:	f002 fa03 	bl	8004700 <putchar>

	gotoxy(155,37);
 80022fa:	2125      	movs	r1, #37	; 0x25
 80022fc:	209b      	movs	r0, #155	; 0x9b
 80022fe:	f7fe ff3f 	bl	8001180 <gotoxy>
	printf("*");
 8002302:	202a      	movs	r0, #42	; 0x2a
 8002304:	f002 f9fc 	bl	8004700 <putchar>
	gotoxy(110,28);
 8002308:	211c      	movs	r1, #28
 800230a:	206e      	movs	r0, #110	; 0x6e
 800230c:	f7fe ff38 	bl	8001180 <gotoxy>
	printf("*");
 8002310:	202a      	movs	r0, #42	; 0x2a
 8002312:	f002 f9f5 	bl	8004700 <putchar>
	gotoxy(95,13);
 8002316:	210d      	movs	r1, #13
 8002318:	205f      	movs	r0, #95	; 0x5f
 800231a:	f7fe ff31 	bl	8001180 <gotoxy>
	printf("*");
 800231e:	202a      	movs	r0, #42	; 0x2a
 8002320:	f002 f9ee 	bl	8004700 <putchar>
	gotoxy(130,19);
 8002324:	2113      	movs	r1, #19
 8002326:	2082      	movs	r0, #130	; 0x82
 8002328:	f7fe ff2a 	bl	8001180 <gotoxy>
	printf("%c",43);
 800232c:	202b      	movs	r0, #43	; 0x2b
 800232e:	f002 f9e7 	bl	8004700 <putchar>

	gotoxy(5,27);
 8002332:	211b      	movs	r1, #27
 8002334:	2005      	movs	r0, #5
 8002336:	f7fe ff23 	bl	8001180 <gotoxy>
	printf("*");
 800233a:	202a      	movs	r0, #42	; 0x2a
 800233c:	f002 f9e0 	bl	8004700 <putchar>
	gotoxy(6,5);
 8002340:	2105      	movs	r1, #5
 8002342:	2006      	movs	r0, #6
 8002344:	f7fe ff1c 	bl	8001180 <gotoxy>
	printf("*");
 8002348:	202a      	movs	r0, #42	; 0x2a
 800234a:	f002 f9d9 	bl	8004700 <putchar>
	gotoxy(13,13);
 800234e:	210d      	movs	r1, #13
 8002350:	200d      	movs	r0, #13
 8002352:	f7fe ff15 	bl	8001180 <gotoxy>
	printf("*");
 8002356:	202a      	movs	r0, #42	; 0x2a
 8002358:	f002 f9d2 	bl	8004700 <putchar>
	gotoxy(60,7);
 800235c:	2107      	movs	r1, #7
 800235e:	203c      	movs	r0, #60	; 0x3c
 8002360:	f7fe ff0e 	bl	8001180 <gotoxy>
	printf("%c",43);
 8002364:	202b      	movs	r0, #43	; 0x2b
 8002366:	f002 f9cb 	bl	8004700 <putchar>

	gotoxy(140,3);
 800236a:	2103      	movs	r1, #3
 800236c:	208c      	movs	r0, #140	; 0x8c
 800236e:	f7fe ff07 	bl	8001180 <gotoxy>
	printf("*");
 8002372:	202a      	movs	r0, #42	; 0x2a
 8002374:	f002 f9c4 	bl	8004700 <putchar>
	gotoxy(120,5);
 8002378:	2105      	movs	r1, #5
 800237a:	2078      	movs	r0, #120	; 0x78
 800237c:	f7fe ff00 	bl	8001180 <gotoxy>
	printf("*");
 8002380:	202a      	movs	r0, #42	; 0x2a
 8002382:	f002 f9bd 	bl	8004700 <putchar>
	gotoxy(110,7);
 8002386:	2107      	movs	r1, #7
 8002388:	206e      	movs	r0, #110	; 0x6e
 800238a:	f7fe fef9 	bl	8001180 <gotoxy>
	printf("*");
 800238e:	202a      	movs	r0, #42	; 0x2a
 8002390:	f002 f9b6 	bl	8004700 <putchar>
	gotoxy(70,30);
 8002394:	211e      	movs	r1, #30
 8002396:	2046      	movs	r0, #70	; 0x46
 8002398:	f7fe fef2 	bl	8001180 <gotoxy>
	printf("%c",43);
 800239c:	202b      	movs	r0, #43	; 0x2b
 800239e:	f002 f9af 	bl	8004700 <putchar>

	gotoxy(135,33);
 80023a2:	2121      	movs	r1, #33	; 0x21
 80023a4:	2087      	movs	r0, #135	; 0x87
 80023a6:	f7fe feeb 	bl	8001180 <gotoxy>
	printf("*");
 80023aa:	202a      	movs	r0, #42	; 0x2a
 80023ac:	f002 f9a8 	bl	8004700 <putchar>
	gotoxy(123,36);
 80023b0:	2124      	movs	r1, #36	; 0x24
 80023b2:	207b      	movs	r0, #123	; 0x7b
 80023b4:	f7fe fee4 	bl	8001180 <gotoxy>
	printf("*");
 80023b8:	202a      	movs	r0, #42	; 0x2a
 80023ba:	f002 f9a1 	bl	8004700 <putchar>
	gotoxy(138,40);
 80023be:	2128      	movs	r1, #40	; 0x28
 80023c0:	208a      	movs	r0, #138	; 0x8a
 80023c2:	f7fe fedd 	bl	8001180 <gotoxy>
	printf("*");
 80023c6:	202a      	movs	r0, #42	; 0x2a
 80023c8:	f002 f99a 	bl	8004700 <putchar>
	gotoxy(127,25);
 80023cc:	2119      	movs	r1, #25
 80023ce:	207f      	movs	r0, #127	; 0x7f
 80023d0:	f7fe fed6 	bl	8001180 <gotoxy>
	printf("%c",43);
 80023d4:	202b      	movs	r0, #43	; 0x2b
 80023d6:	f002 f993 	bl	8004700 <putchar>

	gotoxy(105,32);
 80023da:	2120      	movs	r1, #32
 80023dc:	2069      	movs	r0, #105	; 0x69
 80023de:	f7fe fecf 	bl	8001180 <gotoxy>
	printf("%c",42);
 80023e2:	202a      	movs	r0, #42	; 0x2a
 80023e4:	f002 f98c 	bl	8004700 <putchar>
	gotoxy(106,33);
 80023e8:	2121      	movs	r1, #33	; 0x21
 80023ea:	206a      	movs	r0, #106	; 0x6a
 80023ec:	f7fe fec8 	bl	8001180 <gotoxy>
	printf("%c",92);
 80023f0:	205c      	movs	r0, #92	; 0x5c
 80023f2:	f002 f985 	bl	8004700 <putchar>
	gotoxy(107,34);
 80023f6:	2122      	movs	r1, #34	; 0x22
 80023f8:	206b      	movs	r0, #107	; 0x6b
 80023fa:	f7fe fec1 	bl	8001180 <gotoxy>
	printf("%c",92);
 80023fe:	205c      	movs	r0, #92	; 0x5c
 8002400:	f002 f97e 	bl	8004700 <putchar>

	gotoxy(23,15);
 8002404:	210f      	movs	r1, #15
 8002406:	2017      	movs	r0, #23
 8002408:	f7fe feba 	bl	8001180 <gotoxy>
	printf("*");
 800240c:	202a      	movs	r0, #42	; 0x2a
 800240e:	f002 f977 	bl	8004700 <putchar>
	gotoxy(37,21);
 8002412:	2115      	movs	r1, #21
 8002414:	2025      	movs	r0, #37	; 0x25
 8002416:	f7fe feb3 	bl	8001180 <gotoxy>
	printf("*");
 800241a:	202a      	movs	r0, #42	; 0x2a
 800241c:	f002 f970 	bl	8004700 <putchar>
	gotoxy(26,24);
 8002420:	2118      	movs	r1, #24
 8002422:	201a      	movs	r0, #26
 8002424:	f7fe feac 	bl	8001180 <gotoxy>
	printf("*");
 8002428:	202a      	movs	r0, #42	; 0x2a
 800242a:	f002 f969 	bl	8004700 <putchar>
	gotoxy(30,29);
 800242e:	211d      	movs	r1, #29
 8002430:	201e      	movs	r0, #30
 8002432:	f7fe fea5 	bl	8001180 <gotoxy>
	printf("%c",43);
 8002436:	202b      	movs	r0, #43	; 0x2b
 8002438:	f002 f962 	bl	8004700 <putchar>

	gotoxy(25,6);
 800243c:	2106      	movs	r1, #6
 800243e:	2019      	movs	r0, #25
 8002440:	f7fe fe9e 	bl	8001180 <gotoxy>
	printf("*");
 8002444:	202a      	movs	r0, #42	; 0x2a
 8002446:	f002 f95b 	bl	8004700 <putchar>
	gotoxy(39,7);
 800244a:	2107      	movs	r1, #7
 800244c:	2027      	movs	r0, #39	; 0x27
 800244e:	f7fe fe97 	bl	8001180 <gotoxy>
	printf("*");
 8002452:	202a      	movs	r0, #42	; 0x2a
 8002454:	f002 f954 	bl	8004700 <putchar>
	gotoxy(41,3);
 8002458:	2103      	movs	r1, #3
 800245a:	2029      	movs	r0, #41	; 0x29
 800245c:	f7fe fe90 	bl	8001180 <gotoxy>
	printf("*");
 8002460:	202a      	movs	r0, #42	; 0x2a
 8002462:	f002 f94d 	bl	8004700 <putchar>
	gotoxy(75,10);
 8002466:	210a      	movs	r1, #10
 8002468:	204b      	movs	r0, #75	; 0x4b
 800246a:	f7fe fe89 	bl	8001180 <gotoxy>
	printf("%c",43);
 800246e:	202b      	movs	r0, #43	; 0x2b
 8002470:	f002 f946 	bl	8004700 <putchar>

	gotoxy(100,20);
 8002474:	2114      	movs	r1, #20
 8002476:	2064      	movs	r0, #100	; 0x64
 8002478:	f7fe fe82 	bl	8001180 <gotoxy>
	printf("%c",197);
 800247c:	20c5      	movs	r0, #197	; 0xc5
 800247e:	f002 f93f 	bl	8004700 <putchar>
	gotoxy(135,12);
 8002482:	210c      	movs	r1, #12
 8002484:	2087      	movs	r0, #135	; 0x87
 8002486:	f7fe fe7b 	bl	8001180 <gotoxy>
	printf("%c",197);
 800248a:	20c5      	movs	r0, #197	; 0xc5
 800248c:	f002 f938 	bl	8004700 <putchar>
	gotoxy(30,5);
 8002490:	2105      	movs	r1, #5
 8002492:	201e      	movs	r0, #30
 8002494:	f7fe fe74 	bl	8001180 <gotoxy>
	printf("%c",197);
 8002498:	20c5      	movs	r0, #197	; 0xc5
 800249a:	f002 f931 	bl	8004700 <putchar>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	460a      	mov	r2, r1
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	4613      	mov	r3, r2
 80024b0:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 80024b2:	79bb      	ldrb	r3, [r7, #6]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	71bb      	strb	r3, [r7, #6]
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	3303      	adds	r3, #3
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7fe fe5c 	bl	8001180 <gotoxy>
	printf("_");
 80024c8:	205f      	movs	r0, #95	; 0x5f
 80024ca:	f002 f919 	bl	8004700 <putchar>
	gotoxy(X,Y+3);
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	3303      	adds	r3, #3
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7fe fe52 	bl	8001180 <gotoxy>
	printf("_");
 80024dc:	205f      	movs	r0, #95	; 0x5f
 80024de:	f002 f90f 	bl	8004700 <putchar>
	gotoxy(X+1,Y+3);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	3303      	adds	r3, #3
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7fe fe47 	bl	8001180 <gotoxy>
	printf("_");
 80024f2:	205f      	movs	r0, #95	; 0x5f
 80024f4:	f002 f904 	bl	8004700 <putchar>
	gotoxy(X-2,Y+3);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	1e9a      	subs	r2, r3, #2
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	3303      	adds	r3, #3
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f7fe fe3c 	bl	8001180 <gotoxy>
	printf("(");
 8002508:	2028      	movs	r0, #40	; 0x28
 800250a:	f002 f8f9 	bl	8004700 <putchar>
	gotoxy(X+2,Y+3);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	3303      	adds	r3, #3
 8002516:	4619      	mov	r1, r3
 8002518:	4610      	mov	r0, r2
 800251a:	f7fe fe31 	bl	8001180 <gotoxy>
	printf(")");
 800251e:	2029      	movs	r0, #41	; 0x29
 8002520:	f002 f8ee 	bl	8004700 <putchar>

	gotoxy(X+3,Y+2);
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	1cda      	adds	r2, r3, #3
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	3302      	adds	r3, #2
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f7fe fe26 	bl	8001180 <gotoxy>
	printf("_");
 8002534:	205f      	movs	r0, #95	; 0x5f
 8002536:	f002 f8e3 	bl	8004700 <putchar>
	gotoxy(X-3,Y+2);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	1eda      	subs	r2, r3, #3
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	3302      	adds	r3, #2
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f7fe fe1b 	bl	8001180 <gotoxy>
	printf("_");
 800254a:	205f      	movs	r0, #95	; 0x5f
 800254c:	f002 f8d8 	bl	8004700 <putchar>
	gotoxy(X+4,Y+2);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	3302      	adds	r3, #2
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7fe fe10 	bl	8001180 <gotoxy>
	printf("(");
 8002560:	2028      	movs	r0, #40	; 0x28
 8002562:	f002 f8cd 	bl	8004700 <putchar>
	gotoxy(X-4,Y+2);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	1f1a      	subs	r2, r3, #4
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	3302      	adds	r3, #2
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f7fe fe05 	bl	8001180 <gotoxy>
	printf(")");
 8002576:	2029      	movs	r0, #41	; 0x29
 8002578:	f002 f8c2 	bl	8004700 <putchar>

	gotoxy(X-5,Y+1);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	1f5a      	subs	r2, r3, #5
 8002580:	79bb      	ldrb	r3, [r7, #6]
 8002582:	3301      	adds	r3, #1
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7fe fdfa 	bl	8001180 <gotoxy>
	printf("(");
 800258c:	2028      	movs	r0, #40	; 0x28
 800258e:	f002 f8b7 	bl	8004700 <putchar>
	gotoxy(X+5,Y+1);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	1d5a      	adds	r2, r3, #5
 8002596:	79bb      	ldrb	r3, [r7, #6]
 8002598:	3301      	adds	r3, #1
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7fe fdef 	bl	8001180 <gotoxy>
	printf("(");
 80025a2:	2028      	movs	r0, #40	; 0x28
 80025a4:	f002 f8ac 	bl	8004700 <putchar>
	gotoxy(X-6,Y);
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	3b06      	subs	r3, #6
 80025ac:	79ba      	ldrb	r2, [r7, #6]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fde5 	bl	8001180 <gotoxy>
	printf("(");
 80025b6:	2028      	movs	r0, #40	; 0x28
 80025b8:	f002 f8a2 	bl	8004700 <putchar>
	gotoxy(X+6,Y);
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	3306      	adds	r3, #6
 80025c0:	79ba      	ldrb	r2, [r7, #6]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fddb 	bl	8001180 <gotoxy>
	printf(")");
 80025ca:	2029      	movs	r0, #41	; 0x29
 80025cc:	f002 f898 	bl	8004700 <putchar>

	gotoxy(X-5,Y-1);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	1f5a      	subs	r2, r3, #5
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f7fe fdd0 	bl	8001180 <gotoxy>
	printf("(");
 80025e0:	2028      	movs	r0, #40	; 0x28
 80025e2:	f002 f88d 	bl	8004700 <putchar>
	gotoxy(X+5,Y-1);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	1d5a      	adds	r2, r3, #5
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7fe fdc5 	bl	8001180 <gotoxy>
	printf(")");
 80025f6:	2029      	movs	r0, #41	; 0x29
 80025f8:	f002 f882 	bl	8004700 <putchar>
	gotoxy(X-4,Y-2);
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	1f1a      	subs	r2, r3, #4
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	3b02      	subs	r3, #2
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7fe fdba 	bl	8001180 <gotoxy>
	printf("(");
 800260c:	2028      	movs	r0, #40	; 0x28
 800260e:	f002 f877 	bl	8004700 <putchar>
	gotoxy(X+4,Y-2);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	3b02      	subs	r3, #2
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f7fe fdaf 	bl	8001180 <gotoxy>
	printf(")");
 8002622:	2029      	movs	r0, #41	; 0x29
 8002624:	f002 f86c 	bl	8004700 <putchar>

	gotoxy(X-3,Y-3);
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	1eda      	subs	r2, r3, #3
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	3b03      	subs	r3, #3
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7fe fda4 	bl	8001180 <gotoxy>
	printf("_");
 8002638:	205f      	movs	r0, #95	; 0x5f
 800263a:	f002 f861 	bl	8004700 <putchar>
	gotoxy(X+3,Y-3);
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	1cda      	adds	r2, r3, #3
 8002642:	79bb      	ldrb	r3, [r7, #6]
 8002644:	3b03      	subs	r3, #3
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f7fe fd99 	bl	8001180 <gotoxy>
	printf("_");
 800264e:	205f      	movs	r0, #95	; 0x5f
 8002650:	f002 f856 	bl	8004700 <putchar>
	gotoxy(X-2,Y-3);
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	1e9a      	subs	r2, r3, #2
 8002658:	79bb      	ldrb	r3, [r7, #6]
 800265a:	3b03      	subs	r3, #3
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7fe fd8e 	bl	8001180 <gotoxy>
	printf("(");
 8002664:	2028      	movs	r0, #40	; 0x28
 8002666:	f002 f84b 	bl	8004700 <putchar>
	gotoxy(X+2,Y-3);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	3b03      	subs	r3, #3
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7fe fd83 	bl	8001180 <gotoxy>
	printf(")");
 800267a:	2029      	movs	r0, #41	; 0x29
 800267c:	f002 f840 	bl	8004700 <putchar>

	gotoxy(X-1,Y-4);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	3b04      	subs	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f7fe fd78 	bl	8001180 <gotoxy>
	printf("_");
 8002690:	205f      	movs	r0, #95	; 0x5f
 8002692:	f002 f835 	bl	8004700 <putchar>
	gotoxy(X,Y-4);
 8002696:	79fa      	ldrb	r2, [r7, #7]
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	3b04      	subs	r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fd6e 	bl	8001180 <gotoxy>
	printf("_");
 80026a4:	205f      	movs	r0, #95	; 0x5f
 80026a6:	f002 f82b 	bl	8004700 <putchar>
	gotoxy(X+1,Y-4);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	3b04      	subs	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7fe fd63 	bl	8001180 <gotoxy>
	printf("_");
 80026ba:	205f      	movs	r0, #95	; 0x5f
 80026bc:	f002 f820 	bl	8004700 <putchar>

	gotoxy(X-2,Y);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	3b02      	subs	r3, #2
 80026c4:	79ba      	ldrb	r2, [r7, #6]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fd59 	bl	8001180 <gotoxy>
	printf("O");
 80026ce:	204f      	movs	r0, #79	; 0x4f
 80026d0:	f002 f816 	bl	8004700 <putchar>
	gotoxy(X+1,Y+2);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	3302      	adds	r3, #2
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f7fe fd4e 	bl	8001180 <gotoxy>
	printf("o");
 80026e4:	206f      	movs	r0, #111	; 0x6f
 80026e6:	f002 f80b 	bl	8004700 <putchar>
	gotoxy(X+3,Y-1);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	1cda      	adds	r2, r3, #3
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f7fe fd43 	bl	8001180 <gotoxy>
	printf("O");
 80026fa:	204f      	movs	r0, #79	; 0x4f
 80026fc:	f002 f800 	bl	8004700 <putchar>

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8002710:	2101      	movs	r1, #1
 8002712:	200f      	movs	r0, #15
 8002714:	f7fe fd34 	bl	8001180 <gotoxy>
	printf("           ");
 8002718:	483b      	ldr	r0, [pc, #236]	; (8002808 <drawhearth+0x100>)
 800271a:	f001 ffd9 	bl	80046d0 <iprintf>
	gotoxy(15,2);
 800271e:	2102      	movs	r1, #2
 8002720:	200f      	movs	r0, #15
 8002722:	f7fe fd2d 	bl	8001180 <gotoxy>
	printf("           ");
 8002726:	4838      	ldr	r0, [pc, #224]	; (8002808 <drawhearth+0x100>)
 8002728:	f001 ffd2 	bl	80046d0 <iprintf>
	fgcolor(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f7fe fcfb 	bl	8001128 <fgcolor>

	if(gameState->cityLives >= 1){
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <drawhearth+0x6c>
		gotoxy(15,1);
 800273c:	2101      	movs	r1, #1
 800273e:	200f      	movs	r0, #15
 8002740:	f7fe fd1e 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002744:	20db      	movs	r0, #219	; 0xdb
 8002746:	f001 ffdb 	bl	8004700 <putchar>
		gotoxy(17,1);
 800274a:	2101      	movs	r1, #1
 800274c:	2011      	movs	r0, #17
 800274e:	f7fe fd17 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002752:	20db      	movs	r0, #219	; 0xdb
 8002754:	f001 ffd4 	bl	8004700 <putchar>
		gotoxy(16,2);
 8002758:	2102      	movs	r1, #2
 800275a:	2010      	movs	r0, #16
 800275c:	f7fe fd10 	bl	8001180 <gotoxy>
		printf("%c",223);
 8002760:	20df      	movs	r0, #223	; 0xdf
 8002762:	f001 ffcd 	bl	8004700 <putchar>
		gotoxy(16,1);
 8002766:	2101      	movs	r1, #1
 8002768:	2010      	movs	r0, #16
 800276a:	f7fe fd09 	bl	8001180 <gotoxy>
		printf("%c",220);
 800276e:	20dc      	movs	r0, #220	; 0xdc
 8002770:	f001 ffc6 	bl	8004700 <putchar>
	}
	if(gameState->cityLives >= 2){
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800277a:	2b01      	cmp	r3, #1
 800277c:	d91b      	bls.n	80027b6 <drawhearth+0xae>
		gotoxy(19,1);
 800277e:	2101      	movs	r1, #1
 8002780:	2013      	movs	r0, #19
 8002782:	f7fe fcfd 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002786:	20db      	movs	r0, #219	; 0xdb
 8002788:	f001 ffba 	bl	8004700 <putchar>
		gotoxy(21,1);
 800278c:	2101      	movs	r1, #1
 800278e:	2015      	movs	r0, #21
 8002790:	f7fe fcf6 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002794:	20db      	movs	r0, #219	; 0xdb
 8002796:	f001 ffb3 	bl	8004700 <putchar>
		gotoxy(20,2);
 800279a:	2102      	movs	r1, #2
 800279c:	2014      	movs	r0, #20
 800279e:	f7fe fcef 	bl	8001180 <gotoxy>
		printf("%c",223);
 80027a2:	20df      	movs	r0, #223	; 0xdf
 80027a4:	f001 ffac 	bl	8004700 <putchar>
		gotoxy(20,1);
 80027a8:	2101      	movs	r1, #1
 80027aa:	2014      	movs	r0, #20
 80027ac:	f7fe fce8 	bl	8001180 <gotoxy>
		printf("%c",220);
 80027b0:	20dc      	movs	r0, #220	; 0xdc
 80027b2:	f001 ffa5 	bl	8004700 <putchar>

	}
	if(gameState->cityLives >= 3){
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d91b      	bls.n	80027f8 <drawhearth+0xf0>
		gotoxy(23,1);
 80027c0:	2101      	movs	r1, #1
 80027c2:	2017      	movs	r0, #23
 80027c4:	f7fe fcdc 	bl	8001180 <gotoxy>
		printf("%c",219);
 80027c8:	20db      	movs	r0, #219	; 0xdb
 80027ca:	f001 ff99 	bl	8004700 <putchar>
		gotoxy(25,1);
 80027ce:	2101      	movs	r1, #1
 80027d0:	2019      	movs	r0, #25
 80027d2:	f7fe fcd5 	bl	8001180 <gotoxy>
		printf("%c",219);
 80027d6:	20db      	movs	r0, #219	; 0xdb
 80027d8:	f001 ff92 	bl	8004700 <putchar>
		gotoxy(24,2);
 80027dc:	2102      	movs	r1, #2
 80027de:	2018      	movs	r0, #24
 80027e0:	f7fe fcce 	bl	8001180 <gotoxy>
		printf("%c",223);
 80027e4:	20df      	movs	r0, #223	; 0xdf
 80027e6:	f001 ff8b 	bl	8004700 <putchar>
		gotoxy(24,1);
 80027ea:	2101      	movs	r1, #1
 80027ec:	2018      	movs	r0, #24
 80027ee:	f7fe fcc7 	bl	8001180 <gotoxy>
		printf("%c",220);
 80027f2:	20dc      	movs	r0, #220	; 0xdc
 80027f4:	f001 ff84 	bl	8004700 <putchar>
	}
	fgcolor(15);
 80027f8:	200f      	movs	r0, #15
 80027fa:	f7fe fc95 	bl	8001128 <fgcolor>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	080058c8 	.word	0x080058c8

0800280c <drawEnemy>:
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af04      	add	r7, sp, #16
 8002812:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 800281a:	e087      	b.n	800292c <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fcab 	bl	8002180 <fpToInt>
 800282a:	4604      	mov	r4, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fca3 	bl	8002180 <fpToInt>
 800283a:	4603      	mov	r3, r0
 800283c:	0fda      	lsrs	r2, r3, #31
 800283e:	4413      	add	r3, r2
 8002840:	105b      	asrs	r3, r3, #1
 8002842:	4619      	mov	r1, r3
 8002844:	4620      	mov	r0, r4
 8002846:	f7fe fc9b 	bl	8001180 <gotoxy>
		printf("       ");
 800284a:	483d      	ldr	r0, [pc, #244]	; (8002940 <drawEnemy+0x134>)
 800284c:	f001 ff40 	bl	80046d0 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fc91 	bl	8002180 <fpToInt>
 800285e:	4604      	mov	r4, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fc89 	bl	8002180 <fpToInt>
 800286e:	4603      	mov	r3, r0
 8002870:	3302      	adds	r3, #2
 8002872:	0fda      	lsrs	r2, r3, #31
 8002874:	4413      	add	r3, r2
 8002876:	105b      	asrs	r3, r3, #1
 8002878:	4619      	mov	r1, r3
 800287a:	4620      	mov	r0, r4
 800287c:	f7fe fc80 	bl	8001180 <gotoxy>
		printf("       ");
 8002880:	482f      	ldr	r0, [pc, #188]	; (8002940 <drawEnemy+0x134>)
 8002882:	f001 ff25 	bl	80046d0 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc76 	bl	8002180 <fpToInt>
 8002894:	4604      	mov	r4, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fc6e 	bl	8002180 <fpToInt>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0fda      	lsrs	r2, r3, #31
 80028a8:	4413      	add	r3, r2
 80028aa:	105b      	asrs	r3, r3, #1
 80028ac:	4619      	mov	r1, r3
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7fe fc66 	bl	8001180 <gotoxy>
		printf("  o o  ");
 80028b4:	4823      	ldr	r0, [pc, #140]	; (8002944 <drawEnemy+0x138>)
 80028b6:	f001 ff0b 	bl	80046d0 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fc5c 	bl	8002180 <fpToInt>
 80028c8:	4604      	mov	r4, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fc54 	bl	8002180 <fpToInt>
 80028d8:	4603      	mov	r3, r0
 80028da:	3302      	adds	r3, #2
 80028dc:	0fda      	lsrs	r2, r3, #31
 80028de:	4413      	add	r3, r2
 80028e0:	105b      	asrs	r3, r3, #1
 80028e2:	4619      	mov	r1, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7fe fc4b 	bl	8001180 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 80028ea:	23bb      	movs	r3, #187	; 0xbb
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	23cd      	movs	r3, #205	; 0xcd
 80028f0:	9302      	str	r3, [sp, #8]
 80028f2:	23cd      	movs	r3, #205	; 0xcd
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	23cd      	movs	r3, #205	; 0xcd
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	23cd      	movs	r3, #205	; 0xcd
 80028fc:	22cd      	movs	r2, #205	; 0xcd
 80028fe:	21c9      	movs	r1, #201	; 0xc9
 8002900:	4811      	ldr	r0, [pc, #68]	; (8002948 <drawEnemy+0x13c>)
 8002902:	f001 fee5 	bl	80046d0 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6852      	ldr	r2, [r2, #4]
 8002924:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f47f af74 	bne.w	800281c <drawEnemy+0x10>
	}
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	080058d4 	.word	0x080058d4
 8002944:	080058dc 	.word	0x080058dc
 8002948:	080058e4 	.word	0x080058e4

0800294c <drawCity>:
	printf("%c",127);
}



void drawCity(){
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	200e      	movs	r0, #14
 8002954:	f7fe fc14 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002958:	20db      	movs	r0, #219	; 0xdb
 800295a:	f001 fed1 	bl	8004700 <putchar>

	gotoxy(16,44);
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	2010      	movs	r0, #16
 8002962:	f7fe fc0d 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002966:	20db      	movs	r0, #219	; 0xdb
 8002968:	f001 feca 	bl	8004700 <putchar>

	gotoxy(17,44);
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	2011      	movs	r0, #17
 8002970:	f7fe fc06 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002974:	20db      	movs	r0, #219	; 0xdb
 8002976:	f001 fec3 	bl	8004700 <putchar>
	gotoxy(17,43);
 800297a:	212b      	movs	r1, #43	; 0x2b
 800297c:	2011      	movs	r0, #17
 800297e:	f7fe fbff 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002982:	20db      	movs	r0, #219	; 0xdb
 8002984:	f001 febc 	bl	8004700 <putchar>

	gotoxy(19,44);
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	2013      	movs	r0, #19
 800298c:	f7fe fbf8 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002990:	20dc      	movs	r0, #220	; 0xdc
 8002992:	f001 feb5 	bl	8004700 <putchar>

	gotoxy(21,44);
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	2015      	movs	r0, #21
 800299a:	f7fe fbf1 	bl	8001180 <gotoxy>
	printf("%c",219);
 800299e:	20db      	movs	r0, #219	; 0xdb
 80029a0:	f001 feae 	bl	8004700 <putchar>

	gotoxy(23,44);
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	2017      	movs	r0, #23
 80029a8:	f7fe fbea 	bl	8001180 <gotoxy>
	printf("%c",219);
 80029ac:	20db      	movs	r0, #219	; 0xdb
 80029ae:	f001 fea7 	bl	8004700 <putchar>
	gotoxy(23,43);
 80029b2:	212b      	movs	r1, #43	; 0x2b
 80029b4:	2017      	movs	r0, #23
 80029b6:	f7fe fbe3 	bl	8001180 <gotoxy>
	printf("%c",220);
 80029ba:	20dc      	movs	r0, #220	; 0xdc
 80029bc:	f001 fea0 	bl	8004700 <putchar>

	gotoxy(25,44);
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	2019      	movs	r0, #25
 80029c4:	f7fe fbdc 	bl	8001180 <gotoxy>
	printf("%c",219);
 80029c8:	20db      	movs	r0, #219	; 0xdb
 80029ca:	f001 fe99 	bl	8004700 <putchar>
	gotoxy(25,43);
 80029ce:	212b      	movs	r1, #43	; 0x2b
 80029d0:	2019      	movs	r0, #25
 80029d2:	f7fe fbd5 	bl	8001180 <gotoxy>
	printf("%c",219);
 80029d6:	20db      	movs	r0, #219	; 0xdb
 80029d8:	f001 fe92 	bl	8004700 <putchar>
	gotoxy(25,42);
 80029dc:	212a      	movs	r1, #42	; 0x2a
 80029de:	2019      	movs	r0, #25
 80029e0:	f7fe fbce 	bl	8001180 <gotoxy>
	printf("%c",219);
 80029e4:	20db      	movs	r0, #219	; 0xdb
 80029e6:	f001 fe8b 	bl	8004700 <putchar>

	gotoxy(27,44);
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	201b      	movs	r0, #27
 80029ee:	f7fe fbc7 	bl	8001180 <gotoxy>
	printf("%c",219);
 80029f2:	20db      	movs	r0, #219	; 0xdb
 80029f4:	f001 fe84 	bl	8004700 <putchar>
	gotoxy(27,43);
 80029f8:	212b      	movs	r1, #43	; 0x2b
 80029fa:	201b      	movs	r0, #27
 80029fc:	f7fe fbc0 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002a00:	20dc      	movs	r0, #220	; 0xdc
 8002a02:	f001 fe7d 	bl	8004700 <putchar>

	gotoxy(28,44);
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	201c      	movs	r0, #28
 8002a0a:	f7fe fbb9 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a0e:	20db      	movs	r0, #219	; 0xdb
 8002a10:	f001 fe76 	bl	8004700 <putchar>

	gotoxy(36,44);
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	2024      	movs	r0, #36	; 0x24
 8002a18:	f7fe fbb2 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a1c:	20db      	movs	r0, #219	; 0xdb
 8002a1e:	f001 fe6f 	bl	8004700 <putchar>
	gotoxy(36,43);
 8002a22:	212b      	movs	r1, #43	; 0x2b
 8002a24:	2024      	movs	r0, #36	; 0x24
 8002a26:	f7fe fbab 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a2a:	20db      	movs	r0, #219	; 0xdb
 8002a2c:	f001 fe68 	bl	8004700 <putchar>

	gotoxy(37,44);
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	2025      	movs	r0, #37	; 0x25
 8002a34:	f7fe fba4 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a38:	20db      	movs	r0, #219	; 0xdb
 8002a3a:	f001 fe61 	bl	8004700 <putchar>

	gotoxy(38,44);
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	2026      	movs	r0, #38	; 0x26
 8002a42:	f7fe fb9d 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002a46:	20dc      	movs	r0, #220	; 0xdc
 8002a48:	f001 fe5a 	bl	8004700 <putchar>

	gotoxy(40,44);
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	2028      	movs	r0, #40	; 0x28
 8002a50:	f7fe fb96 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a54:	20db      	movs	r0, #219	; 0xdb
 8002a56:	f001 fe53 	bl	8004700 <putchar>
	gotoxy(40,43);
 8002a5a:	212b      	movs	r1, #43	; 0x2b
 8002a5c:	2028      	movs	r0, #40	; 0x28
 8002a5e:	f7fe fb8f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a62:	20db      	movs	r0, #219	; 0xdb
 8002a64:	f001 fe4c 	bl	8004700 <putchar>

	gotoxy(41,43);
 8002a68:	212b      	movs	r1, #43	; 0x2b
 8002a6a:	2029      	movs	r0, #41	; 0x29
 8002a6c:	f7fe fb88 	bl	8001180 <gotoxy>
	printf("%c",205);
 8002a70:	20cd      	movs	r0, #205	; 0xcd
 8002a72:	f001 fe45 	bl	8004700 <putchar>

	gotoxy(42,44);
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	202a      	movs	r0, #42	; 0x2a
 8002a7a:	f7fe fb81 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a7e:	20db      	movs	r0, #219	; 0xdb
 8002a80:	f001 fe3e 	bl	8004700 <putchar>
	gotoxy(42,43);
 8002a84:	212b      	movs	r1, #43	; 0x2b
 8002a86:	202a      	movs	r0, #42	; 0x2a
 8002a88:	f7fe fb7a 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002a8c:	20db      	movs	r0, #219	; 0xdb
 8002a8e:	f001 fe37 	bl	8004700 <putchar>

	gotoxy(45,44);
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	202d      	movs	r0, #45	; 0x2d
 8002a96:	f7fe fb73 	bl	8001180 <gotoxy>
	printf("%c",186);
 8002a9a:	20ba      	movs	r0, #186	; 0xba
 8002a9c:	f001 fe30 	bl	8004700 <putchar>

	gotoxy(47,44);
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	202f      	movs	r0, #47	; 0x2f
 8002aa4:	f7fe fb6c 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002aa8:	20dc      	movs	r0, #220	; 0xdc
 8002aaa:	f001 fe29 	bl	8004700 <putchar>

	gotoxy(55,44);
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	2037      	movs	r0, #55	; 0x37
 8002ab2:	f7fe fb65 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ab6:	20db      	movs	r0, #219	; 0xdb
 8002ab8:	f001 fe22 	bl	8004700 <putchar>
	gotoxy(55,43);
 8002abc:	212b      	movs	r1, #43	; 0x2b
 8002abe:	2037      	movs	r0, #55	; 0x37
 8002ac0:	f7fe fb5e 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ac4:	20dc      	movs	r0, #220	; 0xdc
 8002ac6:	f001 fe1b 	bl	8004700 <putchar>

	gotoxy(58,44);
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	203a      	movs	r0, #58	; 0x3a
 8002ace:	f7fe fb57 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ad2:	20db      	movs	r0, #219	; 0xdb
 8002ad4:	f001 fe14 	bl	8004700 <putchar>
	gotoxy(58,43);
 8002ad8:	212b      	movs	r1, #43	; 0x2b
 8002ada:	203a      	movs	r0, #58	; 0x3a
 8002adc:	f7fe fb50 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ae0:	20db      	movs	r0, #219	; 0xdb
 8002ae2:	f001 fe0d 	bl	8004700 <putchar>
	gotoxy(58,42);
 8002ae6:	212a      	movs	r1, #42	; 0x2a
 8002ae8:	203a      	movs	r0, #58	; 0x3a
 8002aea:	f7fe fb49 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002aee:	20dc      	movs	r0, #220	; 0xdc
 8002af0:	f001 fe06 	bl	8004700 <putchar>

	gotoxy(59,44);
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	203b      	movs	r0, #59	; 0x3b
 8002af8:	f7fe fb42 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002afc:	20db      	movs	r0, #219	; 0xdb
 8002afe:	f001 fdff 	bl	8004700 <putchar>
	gotoxy(59,43);
 8002b02:	212b      	movs	r1, #43	; 0x2b
 8002b04:	203b      	movs	r0, #59	; 0x3b
 8002b06:	f7fe fb3b 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002b0a:	20dc      	movs	r0, #220	; 0xdc
 8002b0c:	f001 fdf8 	bl	8004700 <putchar>

	gotoxy(60,44);
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	203c      	movs	r0, #60	; 0x3c
 8002b14:	f7fe fb34 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b18:	20db      	movs	r0, #219	; 0xdb
 8002b1a:	f001 fdf1 	bl	8004700 <putchar>

	gotoxy(61,44);
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	203d      	movs	r0, #61	; 0x3d
 8002b22:	f7fe fb2d 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b26:	20db      	movs	r0, #219	; 0xdb
 8002b28:	f001 fdea 	bl	8004700 <putchar>
	gotoxy(61,43);
 8002b2c:	212b      	movs	r1, #43	; 0x2b
 8002b2e:	203d      	movs	r0, #61	; 0x3d
 8002b30:	f7fe fb26 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b34:	20db      	movs	r0, #219	; 0xdb
 8002b36:	f001 fde3 	bl	8004700 <putchar>

	gotoxy(63,44);
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	203f      	movs	r0, #63	; 0x3f
 8002b3e:	f7fe fb1f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b42:	20db      	movs	r0, #219	; 0xdb
 8002b44:	f001 fddc 	bl	8004700 <putchar>

	gotoxy(64,44);
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	2040      	movs	r0, #64	; 0x40
 8002b4c:	f7fe fb18 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002b50:	20dc      	movs	r0, #220	; 0xdc
 8002b52:	f001 fdd5 	bl	8004700 <putchar>

	gotoxy(65,44);
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	2041      	movs	r0, #65	; 0x41
 8002b5a:	f7fe fb11 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b5e:	20db      	movs	r0, #219	; 0xdb
 8002b60:	f001 fdce 	bl	8004700 <putchar>

	gotoxy(67,44);
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	2043      	movs	r0, #67	; 0x43
 8002b68:	f7fe fb0a 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b6c:	20db      	movs	r0, #219	; 0xdb
 8002b6e:	f001 fdc7 	bl	8004700 <putchar>
	gotoxy(67,43);
 8002b72:	212b      	movs	r1, #43	; 0x2b
 8002b74:	2043      	movs	r0, #67	; 0x43
 8002b76:	f7fe fb03 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b7a:	20db      	movs	r0, #219	; 0xdb
 8002b7c:	f001 fdc0 	bl	8004700 <putchar>
	gotoxy(67,42);
 8002b80:	212a      	movs	r1, #42	; 0x2a
 8002b82:	2043      	movs	r0, #67	; 0x43
 8002b84:	f7fe fafc 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b88:	20db      	movs	r0, #219	; 0xdb
 8002b8a:	f001 fdb9 	bl	8004700 <putchar>

	gotoxy(69,44);
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	2045      	movs	r0, #69	; 0x45
 8002b92:	f7fe faf5 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002b96:	20db      	movs	r0, #219	; 0xdb
 8002b98:	f001 fdb2 	bl	8004700 <putchar>
	gotoxy(69,43);
 8002b9c:	212b      	movs	r1, #43	; 0x2b
 8002b9e:	2045      	movs	r0, #69	; 0x45
 8002ba0:	f7fe faee 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ba4:	20db      	movs	r0, #219	; 0xdb
 8002ba6:	f001 fdab 	bl	8004700 <putchar>
	gotoxy(69,42);
 8002baa:	212a      	movs	r1, #42	; 0x2a
 8002bac:	2045      	movs	r0, #69	; 0x45
 8002bae:	f7fe fae7 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bb2:	20db      	movs	r0, #219	; 0xdb
 8002bb4:	f001 fda4 	bl	8004700 <putchar>

	gotoxy(71,44);
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	2047      	movs	r0, #71	; 0x47
 8002bbc:	f7fe fae0 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bc0:	20db      	movs	r0, #219	; 0xdb
 8002bc2:	f001 fd9d 	bl	8004700 <putchar>
	gotoxy(71,43);
 8002bc6:	212b      	movs	r1, #43	; 0x2b
 8002bc8:	2047      	movs	r0, #71	; 0x47
 8002bca:	f7fe fad9 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bce:	20db      	movs	r0, #219	; 0xdb
 8002bd0:	f001 fd96 	bl	8004700 <putchar>
	gotoxy(71,42);
 8002bd4:	212a      	movs	r1, #42	; 0x2a
 8002bd6:	2047      	movs	r0, #71	; 0x47
 8002bd8:	f7fe fad2 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bdc:	20db      	movs	r0, #219	; 0xdb
 8002bde:	f001 fd8f 	bl	8004700 <putchar>

	gotoxy(73,44);
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	2049      	movs	r0, #73	; 0x49
 8002be6:	f7fe facb 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bea:	20db      	movs	r0, #219	; 0xdb
 8002bec:	f001 fd88 	bl	8004700 <putchar>
	gotoxy(73,43);
 8002bf0:	212b      	movs	r1, #43	; 0x2b
 8002bf2:	2049      	movs	r0, #73	; 0x49
 8002bf4:	f7fe fac4 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bf8:	20db      	movs	r0, #219	; 0xdb
 8002bfa:	f001 fd81 	bl	8004700 <putchar>

	gotoxy(74,44);
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	204a      	movs	r0, #74	; 0x4a
 8002c02:	f7fe fabd 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c06:	20db      	movs	r0, #219	; 0xdb
 8002c08:	f001 fd7a 	bl	8004700 <putchar>

	gotoxy(76,44);
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	204c      	movs	r0, #76	; 0x4c
 8002c10:	f7fe fab6 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c14:	20db      	movs	r0, #219	; 0xdb
 8002c16:	f001 fd73 	bl	8004700 <putchar>

	gotoxy(77,44);
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	204d      	movs	r0, #77	; 0x4d
 8002c1e:	f7fe faaf 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c22:	20db      	movs	r0, #219	; 0xdb
 8002c24:	f001 fd6c 	bl	8004700 <putchar>
	gotoxy(77,43);
 8002c28:	212b      	movs	r1, #43	; 0x2b
 8002c2a:	204d      	movs	r0, #77	; 0x4d
 8002c2c:	f7fe faa8 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c30:	20db      	movs	r0, #219	; 0xdb
 8002c32:	f001 fd65 	bl	8004700 <putchar>

	gotoxy(79,44);
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	204f      	movs	r0, #79	; 0x4f
 8002c3a:	f7fe faa1 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c3e:	20db      	movs	r0, #219	; 0xdb
 8002c40:	f001 fd5e 	bl	8004700 <putchar>
	gotoxy(79,44);
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	204f      	movs	r0, #79	; 0x4f
 8002c48:	f7fe fa9a 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002c4c:	20dc      	movs	r0, #220	; 0xdc
 8002c4e:	f001 fd57 	bl	8004700 <putchar>

	gotoxy(81,44);
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	2051      	movs	r0, #81	; 0x51
 8002c56:	f7fe fa93 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c5a:	20db      	movs	r0, #219	; 0xdb
 8002c5c:	f001 fd50 	bl	8004700 <putchar>
	gotoxy(81,43);
 8002c60:	212b      	movs	r1, #43	; 0x2b
 8002c62:	2051      	movs	r0, #81	; 0x51
 8002c64:	f7fe fa8c 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c68:	20db      	movs	r0, #219	; 0xdb
 8002c6a:	f001 fd49 	bl	8004700 <putchar>

	gotoxy(82,44);
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	2052      	movs	r0, #82	; 0x52
 8002c72:	f7fe fa85 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c76:	20db      	movs	r0, #219	; 0xdb
 8002c78:	f001 fd42 	bl	8004700 <putchar>

	gotoxy(85,44);
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	2055      	movs	r0, #85	; 0x55
 8002c80:	f7fe fa7e 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c84:	20db      	movs	r0, #219	; 0xdb
 8002c86:	f001 fd3b 	bl	8004700 <putchar>
	gotoxy(85,43);
 8002c8a:	212b      	movs	r1, #43	; 0x2b
 8002c8c:	2055      	movs	r0, #85	; 0x55
 8002c8e:	f7fe fa77 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c92:	20db      	movs	r0, #219	; 0xdb
 8002c94:	f001 fd34 	bl	8004700 <putchar>
	gotoxy(85,42);
 8002c98:	212a      	movs	r1, #42	; 0x2a
 8002c9a:	2055      	movs	r0, #85	; 0x55
 8002c9c:	f7fe fa70 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ca0:	20dc      	movs	r0, #220	; 0xdc
 8002ca2:	f001 fd2d 	bl	8004700 <putchar>

	gotoxy(86,44);
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	2056      	movs	r0, #86	; 0x56
 8002caa:	f7fe fa69 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cae:	20db      	movs	r0, #219	; 0xdb
 8002cb0:	f001 fd26 	bl	8004700 <putchar>

	gotoxy(87,44);
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	2057      	movs	r0, #87	; 0x57
 8002cb8:	f7fe fa62 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002cbc:	20dc      	movs	r0, #220	; 0xdc
 8002cbe:	f001 fd1f 	bl	8004700 <putchar>

	gotoxy(88,44);
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	2058      	movs	r0, #88	; 0x58
 8002cc6:	f7fe fa5b 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cca:	20db      	movs	r0, #219	; 0xdb
 8002ccc:	f001 fd18 	bl	8004700 <putchar>
	gotoxy(88,43);
 8002cd0:	212b      	movs	r1, #43	; 0x2b
 8002cd2:	2058      	movs	r0, #88	; 0x58
 8002cd4:	f7fe fa54 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002cd8:	20dc      	movs	r0, #220	; 0xdc
 8002cda:	f001 fd11 	bl	8004700 <putchar>

	gotoxy(93,44);
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	205d      	movs	r0, #93	; 0x5d
 8002ce2:	f7fe fa4d 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ce6:	20db      	movs	r0, #219	; 0xdb
 8002ce8:	f001 fd0a 	bl	8004700 <putchar>

	gotoxy(94,44);
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	205e      	movs	r0, #94	; 0x5e
 8002cf0:	f7fe fa46 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cf4:	20db      	movs	r0, #219	; 0xdb
 8002cf6:	f001 fd03 	bl	8004700 <putchar>
	gotoxy(94,43);
 8002cfa:	212b      	movs	r1, #43	; 0x2b
 8002cfc:	205e      	movs	r0, #94	; 0x5e
 8002cfe:	f7fe fa3f 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d02:	20dc      	movs	r0, #220	; 0xdc
 8002d04:	f001 fcfc 	bl	8004700 <putchar>

	gotoxy(95,44);
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	205f      	movs	r0, #95	; 0x5f
 8002d0c:	f7fe fa38 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d10:	20dc      	movs	r0, #220	; 0xdc
 8002d12:	f001 fcf5 	bl	8004700 <putchar>

	gotoxy(96,44);
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	2060      	movs	r0, #96	; 0x60
 8002d1a:	f7fe fa31 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d1e:	20db      	movs	r0, #219	; 0xdb
 8002d20:	f001 fcee 	bl	8004700 <putchar>

	gotoxy(98,44);
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	2062      	movs	r0, #98	; 0x62
 8002d28:	f7fe fa2a 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d2c:	20db      	movs	r0, #219	; 0xdb
 8002d2e:	f001 fce7 	bl	8004700 <putchar>
	gotoxy(98,43);
 8002d32:	212b      	movs	r1, #43	; 0x2b
 8002d34:	2062      	movs	r0, #98	; 0x62
 8002d36:	f7fe fa23 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d3a:	20dc      	movs	r0, #220	; 0xdc
 8002d3c:	f001 fce0 	bl	8004700 <putchar>

	gotoxy(99,44);
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	2063      	movs	r0, #99	; 0x63
 8002d44:	f7fe fa1c 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d48:	20db      	movs	r0, #219	; 0xdb
 8002d4a:	f001 fcd9 	bl	8004700 <putchar>

	gotoxy(103,44);
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	2067      	movs	r0, #103	; 0x67
 8002d52:	f7fe fa15 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d56:	20db      	movs	r0, #219	; 0xdb
 8002d58:	f001 fcd2 	bl	8004700 <putchar>

	gotoxy(104,44);
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	2068      	movs	r0, #104	; 0x68
 8002d60:	f7fe fa0e 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d64:	20dc      	movs	r0, #220	; 0xdc
 8002d66:	f001 fccb 	bl	8004700 <putchar>

	gotoxy(107,44);
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	206b      	movs	r0, #107	; 0x6b
 8002d6e:	f7fe fa07 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d72:	20db      	movs	r0, #219	; 0xdb
 8002d74:	f001 fcc4 	bl	8004700 <putchar>

	gotoxy(108,44);
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	206c      	movs	r0, #108	; 0x6c
 8002d7c:	f7fe fa00 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d80:	20db      	movs	r0, #219	; 0xdb
 8002d82:	f001 fcbd 	bl	8004700 <putchar>
	gotoxy(108,43);
 8002d86:	212b      	movs	r1, #43	; 0x2b
 8002d88:	206c      	movs	r0, #108	; 0x6c
 8002d8a:	f7fe f9f9 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d8e:	20db      	movs	r0, #219	; 0xdb
 8002d90:	f001 fcb6 	bl	8004700 <putchar>

	gotoxy(109,44);
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	206d      	movs	r0, #109	; 0x6d
 8002d98:	f7fe f9f2 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d9c:	20dc      	movs	r0, #220	; 0xdc
 8002d9e:	f001 fcaf 	bl	8004700 <putchar>

	gotoxy(112,44);
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	2070      	movs	r0, #112	; 0x70
 8002da6:	f7fe f9eb 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002daa:	20db      	movs	r0, #219	; 0xdb
 8002dac:	f001 fca8 	bl	8004700 <putchar>

	gotoxy(113,44);
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	2071      	movs	r0, #113	; 0x71
 8002db4:	f7fe f9e4 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002db8:	20dc      	movs	r0, #220	; 0xdc
 8002dba:	f001 fca1 	bl	8004700 <putchar>

	gotoxy(114,44);
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	2072      	movs	r0, #114	; 0x72
 8002dc2:	f7fe f9dd 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002dc6:	20db      	movs	r0, #219	; 0xdb
 8002dc8:	f001 fc9a 	bl	8004700 <putchar>
	gotoxy(114,43);
 8002dcc:	212b      	movs	r1, #43	; 0x2b
 8002dce:	2072      	movs	r0, #114	; 0x72
 8002dd0:	f7fe f9d6 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002dd4:	20db      	movs	r0, #219	; 0xdb
 8002dd6:	f001 fc93 	bl	8004700 <putchar>

	gotoxy(115,44);
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	2073      	movs	r0, #115	; 0x73
 8002dde:	f7fe f9cf 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002de2:	20db      	movs	r0, #219	; 0xdb
 8002de4:	f001 fc8c 	bl	8004700 <putchar>

	gotoxy(120,44);
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	2078      	movs	r0, #120	; 0x78
 8002dec:	f7fe f9c8 	bl	8001180 <gotoxy>
	printf("%c",47);
 8002df0:	202f      	movs	r0, #47	; 0x2f
 8002df2:	f001 fc85 	bl	8004700 <putchar>
	gotoxy(121,43);
 8002df6:	212b      	movs	r1, #43	; 0x2b
 8002df8:	2079      	movs	r0, #121	; 0x79
 8002dfa:	f7fe f9c1 	bl	8001180 <gotoxy>
	printf("%c",47);
 8002dfe:	202f      	movs	r0, #47	; 0x2f
 8002e00:	f001 fc7e 	bl	8004700 <putchar>
	gotoxy(122,43);
 8002e04:	212b      	movs	r1, #43	; 0x2b
 8002e06:	207a      	movs	r0, #122	; 0x7a
 8002e08:	f7fe f9ba 	bl	8001180 <gotoxy>
	printf("%c",223);
 8002e0c:	20df      	movs	r0, #223	; 0xdf
 8002e0e:	f001 fc77 	bl	8004700 <putchar>
	gotoxy(122,42);
 8002e12:	212a      	movs	r1, #42	; 0x2a
 8002e14:	207a      	movs	r0, #122	; 0x7a
 8002e16:	f7fe f9b3 	bl	8001180 <gotoxy>
	printf("%c",168);
 8002e1a:	20a8      	movs	r0, #168	; 0xa8
 8002e1c:	f001 fc70 	bl	8004700 <putchar>
	gotoxy(123,43);
 8002e20:	212b      	movs	r1, #43	; 0x2b
 8002e22:	207b      	movs	r0, #123	; 0x7b
 8002e24:	f7fe f9ac 	bl	8001180 <gotoxy>
	printf("%c",92);
 8002e28:	205c      	movs	r0, #92	; 0x5c
 8002e2a:	f001 fc69 	bl	8004700 <putchar>
	gotoxy(124,44);
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	207c      	movs	r0, #124	; 0x7c
 8002e32:	f7fe f9a5 	bl	8001180 <gotoxy>
	printf("%c",92);
 8002e36:	205c      	movs	r0, #92	; 0x5c
 8002e38:	f001 fc62 	bl	8004700 <putchar>

	gotoxy(127,44);
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	207f      	movs	r0, #127	; 0x7f
 8002e40:	f7fe f99e 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e44:	20db      	movs	r0, #219	; 0xdb
 8002e46:	f001 fc5b 	bl	8004700 <putchar>
	gotoxy(127,43);
 8002e4a:	212b      	movs	r1, #43	; 0x2b
 8002e4c:	207f      	movs	r0, #127	; 0x7f
 8002e4e:	f7fe f997 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e52:	20db      	movs	r0, #219	; 0xdb
 8002e54:	f001 fc54 	bl	8004700 <putchar>
	gotoxy(127,42);
 8002e58:	212a      	movs	r1, #42	; 0x2a
 8002e5a:	207f      	movs	r0, #127	; 0x7f
 8002e5c:	f7fe f990 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e60:	20db      	movs	r0, #219	; 0xdb
 8002e62:	f001 fc4d 	bl	8004700 <putchar>

	gotoxy(129,44);
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	2081      	movs	r0, #129	; 0x81
 8002e6a:	f7fe f989 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e6e:	20db      	movs	r0, #219	; 0xdb
 8002e70:	f001 fc46 	bl	8004700 <putchar>
	gotoxy(129,43);
 8002e74:	212b      	movs	r1, #43	; 0x2b
 8002e76:	2081      	movs	r0, #129	; 0x81
 8002e78:	f7fe f982 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002e7c:	20dc      	movs	r0, #220	; 0xdc
 8002e7e:	f001 fc3f 	bl	8004700 <putchar>

	gotoxy(130,44);
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	2082      	movs	r0, #130	; 0x82
 8002e86:	f7fe f97b 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e8a:	20db      	movs	r0, #219	; 0xdb
 8002e8c:	f001 fc38 	bl	8004700 <putchar>

	gotoxy(131,44);
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	2083      	movs	r0, #131	; 0x83
 8002e94:	f7fe f974 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002e98:	20dc      	movs	r0, #220	; 0xdc
 8002e9a:	f001 fc31 	bl	8004700 <putchar>

	gotoxy(132,44);
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	2084      	movs	r0, #132	; 0x84
 8002ea2:	f7fe f96d 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ea6:	20db      	movs	r0, #219	; 0xdb
 8002ea8:	f001 fc2a 	bl	8004700 <putchar>

	gotoxy(133,44);
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	2085      	movs	r0, #133	; 0x85
 8002eb0:	f7fe f966 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002eb4:	20db      	movs	r0, #219	; 0xdb
 8002eb6:	f001 fc23 	bl	8004700 <putchar>
	gotoxy(133,43);
 8002eba:	212b      	movs	r1, #43	; 0x2b
 8002ebc:	2085      	movs	r0, #133	; 0x85
 8002ebe:	f7fe f95f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ec2:	20db      	movs	r0, #219	; 0xdb
 8002ec4:	f001 fc1c 	bl	8004700 <putchar>

	gotoxy(134,44);
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	2086      	movs	r0, #134	; 0x86
 8002ecc:	f7fe f958 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ed0:	20db      	movs	r0, #219	; 0xdb
 8002ed2:	f001 fc15 	bl	8004700 <putchar>

	gotoxy(135,44);
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	2087      	movs	r0, #135	; 0x87
 8002eda:	f7fe f951 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ede:	20dc      	movs	r0, #220	; 0xdc
 8002ee0:	f001 fc0e 	bl	8004700 <putchar>

	gotoxy(137,44);
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	2089      	movs	r0, #137	; 0x89
 8002ee8:	f7fe f94a 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002eec:	20dc      	movs	r0, #220	; 0xdc
 8002eee:	f001 fc07 	bl	8004700 <putchar>

	gotoxy(139,44);
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	208b      	movs	r0, #139	; 0x8b
 8002ef6:	f7fe f943 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002efa:	20dc      	movs	r0, #220	; 0xdc
 8002efc:	f001 fc00 	bl	8004700 <putchar>

	gotoxy(141,44);
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	208d      	movs	r0, #141	; 0x8d
 8002f04:	f7fe f93c 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f08:	20db      	movs	r0, #219	; 0xdb
 8002f0a:	f001 fbf9 	bl	8004700 <putchar>

	gotoxy(142,44);
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	208e      	movs	r0, #142	; 0x8e
 8002f12:	f7fe f935 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f16:	20dc      	movs	r0, #220	; 0xdc
 8002f18:	f001 fbf2 	bl	8004700 <putchar>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <drawScore>:

void drawScore(gameState_t* gameState){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	208c      	movs	r0, #140	; 0x8c
 8002f2c:	f7fe f928 	bl	8001180 <gotoxy>
	printf("Your score is: %d", gameState->score);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	4619      	mov	r1, r3
 8002f36:	4803      	ldr	r0, [pc, #12]	; (8002f44 <drawScore+0x24>)
 8002f38:	f001 fbca 	bl	80046d0 <iprintf>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	080058f4 	.word	0x080058f4

08002f48 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460a      	mov	r2, r1
 8002f52:	71fb      	strb	r3, [r7, #7]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	79ba      	ldrb	r2, [r7, #6]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f90e 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f64:	20db      	movs	r0, #219	; 0xdb
 8002f66:	f001 fbcb 	bl	8004700 <putchar>
	gotoxy(X-1,Y);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	79ba      	ldrb	r2, [r7, #6]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f904 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f78:	20dc      	movs	r0, #220	; 0xdc
 8002f7a:	f001 fbc1 	bl	8004700 <putchar>
	gotoxy(X+1,Y);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	3301      	adds	r3, #1
 8002f82:	79ba      	ldrb	r2, [r7, #6]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f8fa 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f8c:	20dc      	movs	r0, #220	; 0xdc
 8002f8e:	f001 fbb7 	bl	8004700 <putchar>
	gotoxy(X-1,Y+1);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7fe f8ef 	bl	8001180 <gotoxy>
	printf("%c",223);
 8002fa2:	20df      	movs	r0, #223	; 0xdf
 8002fa4:	f001 fbac 	bl	8004700 <putchar>
	gotoxy(X+1,Y+1);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	79bb      	ldrb	r3, [r7, #6]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7fe f8e4 	bl	8001180 <gotoxy>
	printf("%c",223);
 8002fb8:	20df      	movs	r0, #223	; 0xdf
 8002fba:	f001 fba1 	bl	8004700 <putchar>

	gotoxy(X,Y-1);
 8002fbe:	79fa      	ldrb	r2, [r7, #7]
 8002fc0:	79bb      	ldrb	r3, [r7, #6]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7fe f8da 	bl	8001180 <gotoxy>
	printf("%c",179);
 8002fcc:	20b3      	movs	r0, #179	; 0xb3
 8002fce:	f001 fb97 	bl	8004700 <putchar>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	79ba      	ldrb	r2, [r7, #6]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe f8c5 	bl	8001180 <gotoxy>
	printf(" ");
 8002ff6:	2020      	movs	r0, #32
 8002ff8:	f001 fb82 	bl	8004700 <putchar>
	gotoxy(X-1,Y);
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	79ba      	ldrb	r2, [r7, #6]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe f8bb 	bl	8001180 <gotoxy>
	printf(" ");
 800300a:	2020      	movs	r0, #32
 800300c:	f001 fb78 	bl	8004700 <putchar>
	gotoxy(X+1,Y);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	3301      	adds	r3, #1
 8003014:	79ba      	ldrb	r2, [r7, #6]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe f8b1 	bl	8001180 <gotoxy>
	printf(" ");
 800301e:	2020      	movs	r0, #32
 8003020:	f001 fb6e 	bl	8004700 <putchar>
	gotoxy(X-1,Y+1);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	79bb      	ldrb	r3, [r7, #6]
 800302a:	3301      	adds	r3, #1
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fe f8a6 	bl	8001180 <gotoxy>
	printf(" ");
 8003034:	2020      	movs	r0, #32
 8003036:	f001 fb63 	bl	8004700 <putchar>
	gotoxy(X+1,Y+1);
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	3301      	adds	r3, #1
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7fe f89b 	bl	8001180 <gotoxy>
	printf(" ");
 800304a:	2020      	movs	r0, #32
 800304c:	f001 fb58 	bl	8004700 <putchar>

	gotoxy(X,Y-1);
 8003050:	79fa      	ldrb	r2, [r7, #7]
 8003052:	79bb      	ldrb	r3, [r7, #6]
 8003054:	3b01      	subs	r3, #1
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7fe f891 	bl	8001180 <gotoxy>
	printf(" ");
 800305e:	2020      	movs	r0, #32
 8003060:	f001 fb4e 	bl	8004700 <putchar>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	460a      	mov	r2, r1
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	4613      	mov	r3, r2
 800307a:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	3302      	adds	r3, #2
 8003080:	79ba      	ldrb	r2, [r7, #6]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe f87b 	bl	8001180 <gotoxy>
	printf("____");
 800308a:	4808      	ldr	r0, [pc, #32]	; (80030ac <drawAttachmentRods+0x40>)
 800308c:	f001 fb20 	bl	80046d0 <iprintf>
	gotoxy(x-5, y);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	3b05      	subs	r3, #5
 8003094:	79ba      	ldrb	r2, [r7, #6]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe f871 	bl	8001180 <gotoxy>
	printf("____");
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <drawAttachmentRods+0x40>)
 80030a0:	f001 fb16 	bl	80046d0 <iprintf>
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	08005908 	.word	0x08005908

080030b0 <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	3302      	adds	r3, #2
 80030c4:	79ba      	ldrb	r2, [r7, #6]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe f859 	bl	8001180 <gotoxy>
	printf("    ");
 80030ce:	4808      	ldr	r0, [pc, #32]	; (80030f0 <deleteAttachmentRods+0x40>)
 80030d0:	f001 fafe 	bl	80046d0 <iprintf>
	gotoxy(x-5, y);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	3b05      	subs	r3, #5
 80030d8:	79ba      	ldrb	r2, [r7, #6]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe f84f 	bl	8001180 <gotoxy>
	printf("    ");
 80030e2:	4803      	ldr	r0, [pc, #12]	; (80030f0 <deleteAttachmentRods+0x40>)
 80030e4:	f001 faf4 	bl	80046d0 <iprintf>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	08005910 	.word	0x08005910

080030f4 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	460a      	mov	r2, r1
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	4613      	mov	r3, r2
 8003102:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	79ba      	ldrb	r2, [r7, #6]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f838 	bl	8001180 <gotoxy>
	printf("     ");
 8003110:	480d      	ldr	r0, [pc, #52]	; (8003148 <deletePowerupGraphics+0x54>)
 8003112:	f001 fadd 	bl	80046d0 <iprintf>
	gotoxy(x, y+1);
 8003116:	79fa      	ldrb	r2, [r7, #7]
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	3301      	adds	r3, #1
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7fe f82e 	bl	8001180 <gotoxy>
	printf("     ");
 8003124:	4808      	ldr	r0, [pc, #32]	; (8003148 <deletePowerupGraphics+0x54>)
 8003126:	f001 fad3 	bl	80046d0 <iprintf>
	gotoxy(x, y+2);
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	79bb      	ldrb	r3, [r7, #6]
 800312e:	3302      	adds	r3, #2
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7fe f824 	bl	8001180 <gotoxy>
	printf("     ");
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <deletePowerupGraphics+0x54>)
 800313a:	f001 fac9 	bl	80046d0 <iprintf>

}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08005918 	.word	0x08005918

0800314c <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b085      	sub	sp, #20
 8003150:	af02      	add	r7, sp, #8
 8003152:	4603      	mov	r3, r0
 8003154:	460a      	mov	r2, r1
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	4613      	mov	r3, r2
 800315a:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 800315c:	79f8      	ldrb	r0, [r7, #7]
 800315e:	79b9      	ldrb	r1, [r7, #6]
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	79bb      	ldrb	r3, [r7, #6]
 8003166:	3302      	adds	r3, #2
 8003168:	2401      	movs	r4, #1
 800316a:	9400      	str	r4, [sp, #0]
 800316c:	f7fe f81a 	bl	80011a4 <drawBox>
 gotoxy(x+2, y+1);
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	1c9a      	adds	r2, r3, #2
 8003174:	79bb      	ldrb	r3, [r7, #6]
 8003176:	3301      	adds	r3, #1
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fe f800 	bl	8001180 <gotoxy>
 printf("$");
 8003180:	2024      	movs	r0, #36	; 0x24
 8003182:	f001 fabd 	bl	8004700 <putchar>
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}

0800318e <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 800318e:	b084      	sub	sp, #16
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	f107 0418 	add.w	r4, r7, #24
 800319a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 800319e:	2020      	movs	r0, #32
 80031a0:	f001 f9d4 	bl	800454c <malloc>
 80031a4:	4603      	mov	r3, r0
 80031a6:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	461d      	mov	r5, r3
 80031ac:	f107 0418 	add.w	r4, r7, #24
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
    return newNode;
 80031c2:	687b      	ldr	r3, [r7, #4]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80031ce:	b004      	add	sp, #16
 80031d0:	4770      	bx	lr

080031d2 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 80031d2:	b084      	sub	sp, #16
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af04      	add	r7, sp, #16
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 80031e4:	466c      	mov	r4, sp
 80031e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f8:	f7ff ffc9 	bl	800318e <createBulletNode>
 80031fc:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <appendBullet+0x3c>
        *head = newNode;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 800320c:	e00d      	b.n	800322a <appendBullet+0x58>
        bulletNode_t* current = *head;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8003214:	e002      	b.n	800321c <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f8      	bne.n	8003216 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	61da      	str	r2, [r3, #28]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003234:	b004      	add	sp, #16
 8003236:	4770      	bx	lr

08003238 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8003242:	2008      	movs	r0, #8
 8003244:	f001 f982 	bl	800454c <malloc>
 8003248:	4603      	mov	r3, r0
 800324a:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10e      	bne.n	8003284 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 800326c:	e00a      	b.n	8003284 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	605a      	str	r2, [r3, #4]
			break;
 800327c:	e006      	b.n	800328c <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f1      	bne.n	800326e <appendEnemy+0x36>
	}
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f040 809b 	bne.w	80033ea <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ff5f 	bl	8002180 <fpToInt>
 80032c2:	4604      	mov	r4, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe ff57 	bl	8002180 <fpToInt>
 80032d2:	4603      	mov	r3, r0
 80032d4:	0fda      	lsrs	r2, r3, #31
 80032d6:	4413      	add	r3, r2
 80032d8:	105b      	asrs	r3, r3, #1
 80032da:	4619      	mov	r1, r3
 80032dc:	4620      	mov	r0, r4
 80032de:	f7fd ff4f 	bl	8001180 <gotoxy>
		printf("       ");
 80032e2:	4845      	ldr	r0, [pc, #276]	; (80033f8 <deleteEnemyNode+0x164>)
 80032e4:	f001 f9f4 	bl	80046d0 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ff45 	bl	8002180 <fpToInt>
 80032f6:	4604      	mov	r4, r0
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe ff3d 	bl	8002180 <fpToInt>
 8003306:	4603      	mov	r3, r0
 8003308:	3302      	adds	r3, #2
 800330a:	0fda      	lsrs	r2, r3, #31
 800330c:	4413      	add	r3, r2
 800330e:	105b      	asrs	r3, r3, #1
 8003310:	4619      	mov	r1, r3
 8003312:	4620      	mov	r0, r4
 8003314:	f7fd ff34 	bl	8001180 <gotoxy>
		printf("       ");
 8003318:	4837      	ldr	r0, [pc, #220]	; (80033f8 <deleteEnemyNode+0x164>)
 800331a:	f001 f9d9 	bl	80046d0 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	605a      	str	r2, [r3, #4]
		free(enemy);
 8003328:	6838      	ldr	r0, [r7, #0]
 800332a:	f001 f917 	bl	800455c <free>
		return;
 800332e:	e05f      	b.n	80033f0 <deleteEnemyNode+0x15c>
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d153      	bne.n	80033e0 <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ff1d 	bl	8002180 <fpToInt>
 8003346:	4604      	mov	r4, r0
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe ff15 	bl	8002180 <fpToInt>
 8003356:	4603      	mov	r3, r0
 8003358:	0fda      	lsrs	r2, r3, #31
 800335a:	4413      	add	r3, r2
 800335c:	105b      	asrs	r3, r3, #1
 800335e:	4619      	mov	r1, r3
 8003360:	4620      	mov	r0, r4
 8003362:	f7fd ff0d 	bl	8001180 <gotoxy>
			printf("       ");
 8003366:	4824      	ldr	r0, [pc, #144]	; (80033f8 <deleteEnemyNode+0x164>)
 8003368:	f001 f9b2 	bl	80046d0 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe ff03 	bl	8002180 <fpToInt>
 800337a:	4604      	mov	r4, r0
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fefb 	bl	8002180 <fpToInt>
 800338a:	4603      	mov	r3, r0
 800338c:	3302      	adds	r3, #2
 800338e:	0fda      	lsrs	r2, r3, #31
 8003390:	4413      	add	r3, r2
 8003392:	105b      	asrs	r3, r3, #1
 8003394:	4619      	mov	r1, r3
 8003396:	4620      	mov	r0, r4
 8003398:	f7fd fef2 	bl	8001180 <gotoxy>
			printf("       ");
 800339c:	4816      	ldr	r0, [pc, #88]	; (80033f8 <deleteEnemyNode+0x164>)
 800339e:	f001 f997 	bl	80046d0 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 f8d3 	bl	800455c <free>
			free(thisNode->enemy->position);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 f8cd 	bl	800455c <free>
			free(thisNode->enemy->velocity);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 f8c7 	bl	800455c <free>
			free(thisNode->enemy);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 f8c2 	bl	800455c <free>
			free(thisNode);
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f001 f8bf 	bl	800455c <free>
			return;
 80033de:	e007      	b.n	80033f0 <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d19f      	bne.n	8003330 <deleteEnemyNode+0x9c>
	}
}
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	08005920 	.word	0x08005920

080033fc <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d03c      	beq.n	8003488 <deleteBulletNode+0x8c>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d039      	beq.n	8003488 <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe feb1 	bl	8002180 <fpToInt>
 800341e:	4604      	mov	r4, r0
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe feab 	bl	8002180 <fpToInt>
 800342a:	4603      	mov	r3, r0
 800342c:	0fda      	lsrs	r2, r3, #31
 800342e:	4413      	add	r3, r2
 8003430:	105b      	asrs	r3, r3, #1
 8003432:	4619      	mov	r1, r3
 8003434:	4620      	mov	r0, r4
 8003436:	f7fd fea3 	bl	8001180 <gotoxy>
    printf(" ");
 800343a:	2020      	movs	r0, #32
 800343c:	f001 f960 	bl	8004700 <putchar>

    if (*head == nodeToDelete) {
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d107      	bne.n	800345a <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8003452:	6838      	ldr	r0, [r7, #0]
 8003454:	f001 f882 	bl	800455c <free>
        return;
 8003458:	e017      	b.n	800348a <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003460:	e002      	b.n	8003468 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <deleteBulletNode+0x7c>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d1f4      	bne.n	8003462 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	f001 f86b 	bl	800455c <free>
 8003486:	e000      	b.n	800348a <deleteBulletNode+0x8e>
        return;
 8003488:	bf00      	nop
}
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}

08003490 <initVariables>:
#include "powerup.h"


#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b08e      	sub	sp, #56	; 0x38
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(42*yScale)}, {intToFp(3), intToFp(42*yScale)}, 1, 20, 0};
 8003498:	f107 0320 	add.w	r3, r7, #32
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
 80034a8:	615a      	str	r2, [r3, #20]
 80034aa:	2003      	movs	r0, #3
 80034ac:	f7fe fe53 	bl	8002156 <intToFp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	2054      	movs	r0, #84	; 0x54
 80034b6:	f7fe fe4e 	bl	8002156 <intToFp>
 80034ba:	4603      	mov	r3, r0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	2003      	movs	r0, #3
 80034c0:	f7fe fe49 	bl	8002156 <intToFp>
 80034c4:	4603      	mov	r3, r0
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c8:	2054      	movs	r0, #84	; 0x54
 80034ca:	f7fe fe44 	bl	8002156 <intToFp>
 80034ce:	4603      	mov	r3, r0
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80034d8:	2314      	movs	r3, #20
 80034da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <initVariables+0xfc>)
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4611      	mov	r1, r2
 80034e8:	8019      	strh	r1, [r3, #0]
 80034ea:	3302      	adds	r3, #2
 80034ec:	0c12      	lsrs	r2, r2, #16
 80034ee:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

	nuke_t nuke = {NULL, NULL, 0, 0, 0};
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
	gameState->nuke = &nuke;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f107 0208 	add.w	r2, r7, #8
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

	gameState->activeScreen=0; //menu screen
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f103 040c 	add.w	r4, r3, #12
 8003548:	f107 0520 	add.w	r5, r7, #32
 800354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003550:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003554:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3308      	adds	r3, #8
 8003564:	f107 021c 	add.w	r2, r7, #28
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	4611      	mov	r1, r2
 800356c:	8019      	strh	r1, [r3, #0]
 800356e:	3302      	adds	r3, #2
 8003570:	0c12      	lsrs	r2, r2, #16
 8003572:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	659a      	str	r2, [r3, #88]	; 0x58
	gameState->powerup.isVisible=0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//TODO: continue to initialize everything
}
 8003582:	bf00      	nop
 8003584:	3738      	adds	r7, #56	; 0x38
 8003586:	46bd      	mov	sp, r7
 8003588:	bdb0      	pop	{r4, r5, r7, pc}
 800358a:	bf00      	nop
 800358c:	08005928 	.word	0x08005928

08003590 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fd9d 	bl	80040d8 <drawSpaceship>
	drawEnemy(gameState);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff f934 	bl	800280c <drawEnemy>
	drawBullets(gameState);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fe f800 	bl	80015aa <drawBullets>
	drawPowerup(gameState);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fc67 	bl	8003e7e <drawPowerup>
	drawhearth(gameState);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff f8a9 	bl	8002708 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7a1a      	ldrb	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7a5b      	ldrb	r3, [r3, #9]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe ff6e 	bl	80024a2 <drawMoon>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <readInput>:
		gameState->activeScreen = 3;
	}
}

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 80035d8:	f7fd fbe8 	bl	8000dac <uart_get_char>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d107      	bne.n	80035f6 <readInput+0x26>
		gameState->direction = 1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <readInput+0x90>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b61      	cmp	r3, #97	; 0x61
 80035fa:	d107      	bne.n	800360c <readInput+0x3c>
		gameState->direction = -1;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <readInput+0x90>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b66      	cmp	r3, #102	; 0x66
 8003610:	d117      	bne.n	8003642 <readInput+0x72>
		if(gameState->activeScreen != 4){
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003618:	2b04      	cmp	r3, #4
 800361a:	d00c      	beq.n	8003636 <readInput+0x66>
			clrscr();
 800361c:	f7fd fda0 	bl	8001160 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2204      	movs	r2, #4
 8003630:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003634:	e005      	b.n	8003642 <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <readInput+0x90>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b05      	cmp	r3, #5
 800364e:	d903      	bls.n	8003658 <readInput+0x88>
		gameState->direction = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200001c8 	.word	0x200001c8

08003664 <main>:

int main(void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b0a0      	sub	sp, #128	; 0x80
 8003668:	af00      	add	r7, sp, #0
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 800366a:	4ad5      	ldr	r2, [pc, #852]	; (80039c0 <main+0x35c>)
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003674:	e883 0003 	stmia.w	r3, {r0, r1}
 8003678:	4ad2      	ldr	r2, [pc, #840]	; (80039c4 <main+0x360>)
 800367a:	f107 0310 	add.w	r3, r7, #16
 800367e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003682:	e883 0003 	stmia.w	r3, {r0, r1}
 8003686:	4ad0      	ldr	r2, [pc, #832]	; (80039c8 <main+0x364>)
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003690:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8003694:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8003698:	f7fd fc2c 	bl	8000ef4 <uart_init>
	initVariables(&gameState);
 800369c:	f107 0320 	add.w	r3, r7, #32
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fef5 	bl	8003490 <initVariables>
	initTimer();
 80036a6:	f7fe f92b 	bl	8001900 <initTimer>
	initJoystick();
 80036aa:	f7fe f809 	bl	80016c0 <initJoystick>
	initRGB();
 80036ae:	f7fe fae3 	bl	8001c78 <initRGB>
	I2C_init();
 80036b2:	f7fe f96f 	bl	8001994 <I2C_init>
	analogConfigPorts();
 80036b6:	f7fe fa19 	bl	8001aec <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 80036ba:	4ac4      	ldr	r2, [pc, #784]	; (80039cc <main+0x368>)
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4611      	mov	r1, r2
 80036c2:	8019      	strh	r1, [r3, #0]
 80036c4:	3302      	adds	r3, #2
 80036c6:	0c12      	lsrs	r2, r2, #16
 80036c8:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fbbb 	bl	8001e48 <RGBColor>
	srand(readPotentiometer());   //RNG
 80036d2:	f7fe faaf 	bl	8001c34 <readPotentiometer>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f827 	bl	800472c <srand>

	while(1){
		switch(gameState.activeScreen){
 80036de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d8fb      	bhi.n	80036de <main+0x7a>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <main+0x88>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003701 	.word	0x08003701
 80036f0:	0800387f 	.word	0x0800387f
 80036f4:	08003979 	.word	0x08003979
 80036f8:	080039af 	.word	0x080039af
 80036fc:	08003a1b 	.word	0x08003a1b
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8003700:	f7fd fd2e 	bl	8001160 <clrscr>
			drawWindow();
 8003704:	f000 fa40 	bl	8003b88 <drawWindow>
			drawbackground(); // stars in background
 8003708:	f7fe fdd9 	bl	80022be <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800370c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003710:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fec3 	bl	80024a2 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 800371c:	f107 0220 	add.w	r2, r7, #32
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f9f4 	bl	8003b14 <drawMenuScreen>


			while(gameState.activeScreen==0){
 800372c:	e0a1      	b.n	8003872 <main+0x20e>
				readInput(&gameState);
 800372e:	f107 0320 	add.w	r3, r7, #32
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff4c 	bl	80035d0 <readInput>
				if(downIsPressed()){
 8003738:	f7fe f8b4 	bl	80018a4 <downIsPressed>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d025      	beq.n	800378e <main+0x12a>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003742:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800374c:	4413      	add	r3, r2
 800374e:	3b78      	subs	r3, #120	; 0x78
 8003750:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003754:	f000 f9be 	bl	8003ad4 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8003758:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	4b9c      	ldr	r3, [pc, #624]	; (80039d0 <main+0x36c>)
 8003760:	fb83 3102 	smull	r3, r1, r3, r2
 8003764:	17d3      	asrs	r3, r2, #31
 8003766:	1ac9      	subs	r1, r1, r3
 8003768:	460b      	mov	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	1ad1      	subs	r1, r2, r3
 8003770:	b2cb      	uxtb	r3, r1
 8003772:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003776:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003780:	4413      	add	r3, r2
 8003782:	3b78      	subs	r3, #120	; 0x78
 8003784:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003788:	f000 f984 	bl	8003a94 <drawBtnAsSelected>
 800378c:	e028      	b.n	80037e0 <main+0x17c>
				}
				else if(upIsPressed()){
 800378e:	f7fe f85b 	bl	8001848 <upIsPressed>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d023      	beq.n	80037e0 <main+0x17c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003798:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80037a2:	4413      	add	r3, r2
 80037a4:	3b78      	subs	r3, #120	; 0x78
 80037a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037aa:	f000 f993 	bl	8003ad4 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80037ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <main+0x15a>
 80037b6:	2302      	movs	r3, #2
 80037b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80037bc:	e005      	b.n	80037ca <main+0x166>
					else gameState.btnSelected=gameState.btnSelected-1;
 80037be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80037ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80037d4:	4413      	add	r3, r2
 80037d6:	3b78      	subs	r3, #120	; 0x78
 80037d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037dc:	f000 f95a 	bl	8003a94 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 80037e0:	f7fe f804 	bl	80017ec <centerIsPressed>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d043      	beq.n	8003872 <main+0x20e>
					if(gameState.btnSelected==0){ //START BUTTON
 80037ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <main+0x196>
						gameState.activeScreen=1; //Game screen
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80037f8:	e03b      	b.n	8003872 <main+0x20e>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 80037fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d130      	bne.n	8003864 <main+0x200>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8003802:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	4b71      	ldr	r3, [pc, #452]	; (80039d0 <main+0x36c>)
 800380a:	fb83 3102 	smull	r3, r1, r3, r2
 800380e:	17d3      	asrs	r3, r2, #31
 8003810:	1ac9      	subs	r1, r1, r3
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	1ad1      	subs	r1, r2, r3
 800381a:	b2cb      	uxtb	r3, r1
 800381c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <main+0x360>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	330f      	adds	r3, #15
 8003826:	4a67      	ldr	r2, [pc, #412]	; (80039c4 <main+0x360>)
 8003828:	7852      	ldrb	r2, [r2, #1]
 800382a:	3201      	adds	r2, #1
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fca6 	bl	8001180 <gotoxy>
						if(gameState.difficulty==0){
 8003834:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <main+0x1e0>
							printf("EASY  ");
 800383c:	4865      	ldr	r0, [pc, #404]	; (80039d4 <main+0x370>)
 800383e:	f000 ff47 	bl	80046d0 <iprintf>
 8003842:	e016      	b.n	8003872 <main+0x20e>
						} else if(gameState.difficulty==1){
 8003844:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003848:	2b01      	cmp	r3, #1
 800384a:	d103      	bne.n	8003854 <main+0x1f0>
							printf("MEDIUM");
 800384c:	4862      	ldr	r0, [pc, #392]	; (80039d8 <main+0x374>)
 800384e:	f000 ff3f 	bl	80046d0 <iprintf>
 8003852:	e00e      	b.n	8003872 <main+0x20e>
						} else if(gameState.difficulty==2){
 8003854:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003858:	2b02      	cmp	r3, #2
 800385a:	d10a      	bne.n	8003872 <main+0x20e>
							printf("HARD  ");
 800385c:	485f      	ldr	r0, [pc, #380]	; (80039dc <main+0x378>)
 800385e:	f000 ff37 	bl	80046d0 <iprintf>
 8003862:	e006      	b.n	8003872 <main+0x20e>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8003864:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003868:	2b02      	cmp	r3, #2
 800386a:	d102      	bne.n	8003872 <main+0x20e>
						gameState.activeScreen=2;// help screen
 800386c:	2302      	movs	r3, #2
 800386e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 8003872:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003876:	2b00      	cmp	r3, #0
 8003878:	f43f af59 	beq.w	800372e <main+0xca>
					}
				}
			}
			break;
 800387c:	e0da      	b.n	8003a34 <main+0x3d0>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 800387e:	f7fd fc6f 	bl	8001160 <clrscr>
			printf("GAME SCREEN");
 8003882:	4857      	ldr	r0, [pc, #348]	; (80039e0 <main+0x37c>)
 8003884:	f000 ff24 	bl	80046d0 <iprintf>
			uint32_t frameLastUpdated=0;
 8003888:	2300      	movs	r3, #0
 800388a:	67fb      	str	r3, [r7, #124]	; 0x7c
			gameState.spaceship.lastShotTime=runtime;
 800388c:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <main+0x380>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	643b      	str	r3, [r7, #64]	; 0x40
			gameState.powerup.lastUseTime = runtime;
 8003892:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <main+0x380>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	67bb      	str	r3, [r7, #120]	; 0x78
			drawWindow();
 8003898:	f000 f976 	bl	8003b88 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800389c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038a0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fdfb 	bl	80024a2 <drawMoon>
			drawhearth(&gameState);
 80038ac:	f107 0320 	add.w	r3, r7, #32
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe ff29 	bl	8002708 <drawhearth>
			//drawWindow();
			drawCity();
 80038b6:	f7ff f849 	bl	800294c <drawCity>
			drawScore(&gameState);
 80038ba:	f107 0320 	add.w	r3, r7, #32
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fb2e 	bl	8002f20 <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 80038c4:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <main+0x380>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	749a      	strb	r2, [r3, #18]
			while(gameState.activeScreen==1){
 80038ce:	e04e      	b.n	800396e <main+0x30a>
				readInput(&gameState);
 80038d0:	f107 0320 	add.w	r3, r7, #32
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fe7b 	bl	80035d0 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <main+0x380>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d943      	bls.n	800396e <main+0x30a>
					readInput(&gameState);
 80038e6:	f107 0320 	add.w	r3, r7, #32
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fe70 	bl	80035d0 <readInput>
					
					spawnEnemy(&gameState);
 80038f0:	f107 0320 	add.w	r3, r7, #32
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe faef 	bl	8001ed8 <spawnEnemy>
					spawnPowerup(&gameState);
 80038fa:	f107 0320 	add.w	r3, r7, #32
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f9b8 	bl	8003c74 <spawnPowerup>

					updateSpaceship(&gameState);
 8003904:	f107 0320 	add.w	r3, r7, #32
 8003908:	4618      	mov	r0, r3
 800390a:	f000 faf7 	bl	8003efc <updateSpaceship>
					updateEnemy(&gameState);
 800390e:	f107 0320 	add.w	r3, r7, #32
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb58 	bl	8001fc8 <updateEnemy>
					updatePowerup(&gameState);
 8003918:	f107 0320 	add.w	r3, r7, #32
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f9ef 	bl	8003d00 <updatePowerup>
					shootSpaceship(&gameState);
 8003922:	f107 0320 	add.w	r3, r7, #32
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb1a 	bl	8003f60 <shootSpaceship>
					updateBullets(&gameState);
 800392c:	f107 0320 	add.w	r3, r7, #32
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fd02 	bl	800133a <updateBullets>

					shootEnemy(&gameState);
 8003936:	f107 0320 	add.w	r3, r7, #32
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fb74 	bl	8002028 <shootEnemy>

					detectBulletHit(&gameState);
 8003940:	f107 0320 	add.w	r3, r7, #32
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fd7c 	bl	8001442 <detectBulletHit>
					detectCityHit(&gameState);
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fbd8 	bl	8002104 <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 8003954:	f107 0320 	add.w	r3, r7, #32
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f97f 	bl	8003c5c <updateNuke>
					//checkIfDead(&gameState);
					drawScreen(&gameState);
 800395e:	f107 0320 	add.w	r3, r7, #32
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fe14 	bl	8003590 <drawScreen>
					frameLastUpdated=runtime;
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <main+0x380>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(gameState.activeScreen==1){
 800396e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003972:	2b01      	cmp	r3, #1
 8003974:	d0ac      	beq.n	80038d0 <main+0x26c>
				}
		}
			break;
 8003976:	e05d      	b.n	8003a34 <main+0x3d0>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8003978:	f7fd fbf2 	bl	8001160 <clrscr>
			drawWindow();
 800397c:	f000 f904 	bl	8003b88 <drawWindow>
			drawbackground(); // stars in background
 8003980:	f7fe fc9d 	bl	80022be <drawbackground>
			drawHelpScreen();
 8003984:	f000 f8ea 	bl	8003b5c <drawHelpScreen>
			while(gameState.activeScreen==2){
 8003988:	e00c      	b.n	80039a4 <main+0x340>
				readInput(&gameState);
 800398a:	f107 0320 	add.w	r3, r7, #32
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fe1e 	bl	80035d0 <readInput>
				if(centerIsPressed()){
 8003994:	f7fd ff2a 	bl	80017ec <centerIsPressed>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <main+0x340>
					gameState.activeScreen=0;//MENU SCREEN
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 80039a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d0ee      	beq.n	800398a <main+0x326>
				}
			}
			break;
 80039ac:	e042      	b.n	8003a34 <main+0x3d0>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 80039ae:	f7fd fbd7 	bl	8001160 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 80039b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039b6:	4619      	mov	r1, r3
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <main+0x384>)
 80039ba:	f000 fe89 	bl	80046d0 <iprintf>
			while(gameState.activeScreen==3){
 80039be:	e027      	b.n	8003a10 <main+0x3ac>
 80039c0:	080059e8 	.word	0x080059e8
 80039c4:	080059f0 	.word	0x080059f0
 80039c8:	080059f8 	.word	0x080059f8
 80039cc:	08005994 	.word	0x08005994
 80039d0:	55555556 	.word	0x55555556
 80039d4:	08005944 	.word	0x08005944
 80039d8:	0800594c 	.word	0x0800594c
 80039dc:	08005954 	.word	0x08005954
 80039e0:	0800595c 	.word	0x0800595c
 80039e4:	200001c8 	.word	0x200001c8
 80039e8:	08005968 	.word	0x08005968
				readInput(&gameState);
 80039ec:	f107 0320 	add.w	r3, r7, #32
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fded 	bl	80035d0 <readInput>
				if(centerIsPressed()){
 80039f6:	f7fd fef9 	bl	80017ec <centerIsPressed>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <main+0x3ac>
					initVariables(&gameState);
 8003a00:	f107 0320 	add.w	r3, r7, #32
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fd43 	bl	8003490 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8003a10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d0e9      	beq.n	80039ec <main+0x388>
				}
			}
			break;
 8003a18:	e00c      	b.n	8003a34 <main+0x3d0>
		case 4:
			readInput(&gameState);
 8003a1a:	f107 0320 	add.w	r3, r7, #32
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fdd6 	bl	80035d0 <readInput>
			gotoxy(0,0);
 8003a24:	2100      	movs	r1, #0
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7fd fbaa 	bl	8001180 <gotoxy>
			printf("Noget meget vigtigt!");
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <main+0x3d4>)
 8003a2e:	f000 fe4f 	bl	80046d0 <iprintf>
			break;
 8003a32:	bf00      	nop
		switch(gameState.activeScreen){
 8003a34:	e653      	b.n	80036de <main+0x7a>
 8003a36:	bf00      	nop
 8003a38:	0800592c 	.word	0x0800592c

08003a3c <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	463b      	mov	r3, r7
 8003a44:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fbc0 	bl	80001d0 <strlen>
 8003a50:	4603      	mov	r3, r0
 8003a52:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003a54:	783b      	ldrb	r3, [r7, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	783b      	ldrb	r3, [r7, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	1d5a      	adds	r2, r3, #5
 8003a66:	787b      	ldrb	r3, [r7, #1]
 8003a68:	3302      	adds	r3, #2
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	9100      	str	r1, [sp, #0]
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f7fd fb98 	bl	80011a4 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8003a74:	783b      	ldrb	r3, [r7, #0]
 8003a76:	3303      	adds	r3, #3
 8003a78:	787a      	ldrb	r2, [r7, #1]
 8003a7a:	3201      	adds	r2, #1
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fb7e 	bl	8001180 <gotoxy>
	printf(btn.text);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fe22 	bl	80046d0 <iprintf>
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fb94 	bl	80001d0 <strlen>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8003aac:	783b      	ldrb	r3, [r7, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	783b      	ldrb	r3, [r7, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	1d5a      	adds	r2, r3, #5
 8003abe:	787b      	ldrb	r3, [r7, #1]
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	9100      	str	r1, [sp, #0]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	f7fd fb6c 	bl	80011a4 <drawBox>
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd90      	pop	{r4, r7, pc}

08003ad4 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	463b      	mov	r3, r7
 8003adc:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fb74 	bl	80001d0 <strlen>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003aec:	783b      	ldrb	r3, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	787b      	ldrb	r3, [r7, #1]
 8003af2:	461c      	mov	r4, r3
 8003af4:	783b      	ldrb	r3, [r7, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	1d5a      	adds	r2, r3, #5
 8003afe:	787b      	ldrb	r3, [r7, #1]
 8003b00:	3302      	adds	r3, #2
 8003b02:	2100      	movs	r1, #0
 8003b04:	9100      	str	r1, [sp, #0]
 8003b06:	4621      	mov	r1, r4
 8003b08:	f7fd fb4c 	bl	80011a4 <drawBox>
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd90      	pop	{r4, r7, pc}

08003b14 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b24:	f7ff ff8a 	bl	8003a3c <drawButton>
	drawButton(btnList[1]);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b30:	f7ff ff84 	bl	8003a3c <drawButton>
	drawButton(btnList[2]);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b3c:	f7ff ff7e 	bl	8003a3c <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b50:	f7ff ffa0 	bl	8003a94 <drawBtnAsSelected>
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <drawHelpScreen>:


void drawHelpScreen(){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8003b60:	2105      	movs	r1, #5
 8003b62:	2046      	movs	r0, #70	; 0x46
 8003b64:	f7fd fb0c 	bl	8001180 <gotoxy>
	printf("HELP SCREEN");
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <drawHelpScreen+0x24>)
 8003b6a:	f000 fdb1 	bl	80046d0 <iprintf>
	gotoxy(60,7);
 8003b6e:	2107      	movs	r1, #7
 8003b70:	203c      	movs	r0, #60	; 0x3c
 8003b72:	f7fd fb05 	bl	8001180 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8003b76:	4803      	ldr	r0, [pc, #12]	; (8003b84 <drawHelpScreen+0x28>)
 8003b78:	f000 fdaa 	bl	80046d0 <iprintf>

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	080059bc 	.word	0x080059bc
 8003b84:	080059c8 	.word	0x080059c8

08003b88 <drawWindow>:

void drawWindow(){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	232b      	movs	r3, #43	; 0x2b
 8003b94:	229c      	movs	r2, #156	; 0x9c
 8003b96:	2101      	movs	r1, #1
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fd fb03 	bl	80011a4 <drawBox>
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <chargeNuke>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"nuke.h"

void chargeNuke(gameState_t* gameState){
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->readyState == 1){
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	7c5b      	ldrb	r3, [r3, #17]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d04a      	beq.n	8003c4c <chargeNuke+0xa8>
		return;
	}
	uint8_t color[] = {1,0,0};
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <chargeNuke+0xb0>)
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	8019      	strh	r1, [r3, #0]
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	0c12      	lsrs	r2, r2, #16
 8003bc6:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <chargeNuke+0xb4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd0:	7c92      	ldrb	r2, [r2, #18]
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bd8:	d90a      	bls.n	8003bf0 <chargeNuke+0x4c>
		color[0] = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe f92c 	bl	8001e48 <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <chargeNuke+0xb4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf8:	7c92      	ldrb	r2, [r2, #18]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c00:	d90a      	bls.n	8003c18 <chargeNuke+0x74>
		color[0] = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f918 	bl	8001e48 <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <chargeNuke+0xb4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c20:	7c92      	ldrb	r2, [r2, #18]
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d910      	bls.n	8003c4e <chargeNuke+0xaa>
		color[0] = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003c38:	f107 030c 	add.w	r3, r7, #12
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe f903 	bl	8001e48 <RGBColor>
		gameState->nuke->readyState = 1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2201      	movs	r2, #1
 8003c48:	745a      	strb	r2, [r3, #17]
 8003c4a:	e000      	b.n	8003c4e <chargeNuke+0xaa>
		return;
 8003c4c:	bf00      	nop
	}
}
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	080059e4 	.word	0x080059e4
 8003c58:	200001c8 	.word	0x200001c8

08003c5c <updateNuke>:

void shootNuke(gameState_t* gameState){

}

void updateNuke(gameState_t* gameState){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff9d 	bl	8003ba4 <chargeNuke>

}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <spawnPowerup>:
 *      Author: david
 */
#include "powerup.h"
#define spawnPeriod 600

void spawnPowerup(gameState_t* gameState){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <spawnPowerup+0x88>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003c8a:	d332      	bcc.n	8003cf2 <spawnPowerup+0x7e>



		gameState->powerup.lastUseTime=runtime;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <spawnPowerup+0x88>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	659a      	str	r2, [r3, #88]	; 0x58
		gameState->powerup.isVisible=1;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		position_t spawnPos = {intToFp(100), intToFp(2)*yScale};
 8003c9c:	2064      	movs	r0, #100	; 0x64
 8003c9e:	f7fe fa5a 	bl	8002156 <intToFp>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f7fe fa55 	bl	8002156 <intToFp>
 8003cac:	4603      	mov	r3, r0
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fa4f 	bl	8002156 <intToFp>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc0:	60fb      	str	r3, [r7, #12]
		gameState->powerup.position=spawnPos;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3340      	adds	r3, #64	; 0x40
 8003cc6:	f107 0210 	add.w	r2, r7, #16
 8003cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cce:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3348      	adds	r3, #72	; 0x48
 8003cd6:	f107 0210 	add.w	r2, r7, #16
 8003cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cde:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3350      	adds	r3, #80	; 0x50
 8003ce6:	f107 0208 	add.w	r2, r7, #8
 8003cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cee:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200001c8 	.word	0x200001c8

08003d00 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80b1 	beq.w	8003e76 <updatePowerup+0x176>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	649a      	str	r2, [r3, #72]	; 0x48
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	64da      	str	r2, [r3, #76]	; 0x4c


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=39){
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fa23 	bl	8002180 <fpToInt>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b4d      	cmp	r3, #77	; 0x4d
 8003d3e:	dd79      	ble.n	8003e34 <updatePowerup+0x134>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7f1b      	ldrb	r3, [r3, #28]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d125      	bne.n	8003d94 <updatePowerup+0x94>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fa17 	bl	8002180 <fpToInt>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f103 0408 	add.w	r4, r3, #8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fa0f 	bl	8002180 <fpToInt>
 8003d62:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8003d64:	429c      	cmp	r4, r3
 8003d66:	db12      	blt.n	8003d8e <updatePowerup+0x8e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fa07 	bl	8002180 <fpToInt>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f1a3 0408 	sub.w	r4, r3, #8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe f9ff 	bl	8002180 <fpToInt>
 8003d82:	4603      	mov	r3, r0
 8003d84:	3304      	adds	r3, #4
 8003d86:	429c      	cmp	r4, r3
 8003d88:	dc01      	bgt.n	8003d8e <updatePowerup+0x8e>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <updatePowerup+0x90>
 8003d8e:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	e029      	b.n	8003de8 <updatePowerup+0xe8>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe f9f1 	bl	8002180 <fpToInt>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7f1b      	ldrb	r3, [r3, #28]
 8003da6:	1e5a      	subs	r2, r3, #1
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	18cc      	adds	r4, r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe f9e3 	bl	8002180 <fpToInt>
 8003dba:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	db11      	blt.n	8003de4 <updatePowerup+0xe4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe f9db 	bl	8002180 <fpToInt>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	1e5c      	subs	r4, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe f9d4 	bl	8002180 <fpToInt>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	3304      	adds	r3, #4
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	dc01      	bgt.n	8003de4 <updatePowerup+0xe4>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <updatePowerup+0xe6>
 8003de4:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8003de6:	73fb      	strb	r3, [r7, #15]

			}


			if(powerupIsTaken){
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d022      	beq.n	8003e34 <updatePowerup+0x134>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe f9c4 	bl	8002180 <fpToInt>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	b2dc      	uxtb	r4, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe f9bd 	bl	8002180 <fpToInt>
 8003e06:	4603      	mov	r3, r0
 8003e08:	0fda      	lsrs	r2, r3, #31
 8003e0a:	4413      	add	r3, r2
 8003e0c:	105b      	asrs	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff f96e 	bl	80030f4 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7f1b      	ldrb	r3, [r3, #28]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d805      	bhi.n	8003e34 <updatePowerup+0x134>
					gameState->spaceship.numberOfParts++;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7f1b      	ldrb	r3, [r3, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	771a      	strb	r2, [r3, #28]
					//TODO: tilføj point??
				}

			}
		}
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=42){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f9a1 	bl	8002180 <fpToInt>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b53      	cmp	r3, #83	; 0x53
 8003e42:	dd18      	ble.n	8003e76 <updatePowerup+0x176>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe f999 	bl	8002180 <fpToInt>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b2dc      	uxtb	r4, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f992 	bl	8002180 <fpToInt>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	0fda      	lsrs	r2, r3, #31
 8003e60:	4413      	add	r3, r2
 8003e62:	105b      	asrs	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7ff f943 	bl	80030f4 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c


	}


}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}

08003e7e <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 8003e7e:	b590      	push	{r4, r7, lr}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d031      	beq.n	8003ef4 <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe f973 	bl	8002180 <fpToInt>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	b2dc      	uxtb	r4, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f96c 	bl	8002180 <fpToInt>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	0fda      	lsrs	r2, r3, #31
 8003eac:	4413      	add	r3, r2
 8003eae:	105b      	asrs	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff f91d 	bl	80030f4 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe f95e 	bl	8002180 <fpToInt>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b2dc      	uxtb	r4, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe f957 	bl	8002180 <fpToInt>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	0fda      	lsrs	r2, r3, #31
 8003ed6:	4413      	add	r3, r2
 8003ed8:	105b      	asrs	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	4619      	mov	r1, r3
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff f934 	bl	800314c <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	3340      	adds	r3, #64	; 0x40
 8003eea:	3248      	adds	r2, #72	; 0x48
 8003eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ef0:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd90      	pop	{r4, r7, pc}

08003efc <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 8003f04:	f7fd fe96 	bl	8001c34 <readPotentiometer>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe f921 	bl	8002156 <intToFp>
 8003f14:	4604      	mov	r4, r0
 8003f16:	200d      	movs	r0, #13
 8003f18:	f7fe f91d 	bl	8002156 <intToFp>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7fe f96f 	bl	8002204 <fpDivide>
 8003f26:	60f8      	str	r0, [r7, #12]
	if(fpToInt(x) <= 1){
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7fe f929 	bl	8002180 <fpToInt>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	dc03      	bgt.n	8003f3c <updateSpaceship+0x40>
		x = intToFp(2);
 8003f34:	2002      	movs	r0, #2
 8003f36:	f7fe f90e 	bl	8002156 <intToFp>
 8003f3a:	60f8      	str	r0, [r7, #12]
	}
	if(fpToInt(x) >= 156){
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fe f91f 	bl	8002180 <fpToInt>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b9b      	cmp	r3, #155	; 0x9b
 8003f46:	dd03      	ble.n	8003f50 <updateSpaceship+0x54>
		x = intToFp(155);
 8003f48:	209b      	movs	r0, #155	; 0x9b
 8003f4a:	f7fe f904 	bl	8002156 <intToFp>
 8003f4e:	60f8      	str	r0, [r7, #12]
	}
	gameState->spaceship.nextPosition.x = x;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	615a      	str	r2, [r3, #20]

}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}
	...

08003f60 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b09e      	sub	sp, #120	; 0x78
 8003f64:	af04      	add	r7, sp, #16
 8003f66:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8003f68:	f7fd fc40 	bl	80017ec <centerIsPressed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80a9 	beq.w	80040c6 <shootSpaceship+0x166>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 8003f74:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <shootSpaceship+0x170>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	621a      	str	r2, [r3, #32]

		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f80:	e09a      	b.n	80040b8 <shootSpaceship+0x158>
			if(i ==2){
 8003f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d147      	bne.n	8004018 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7fe f8e4 	bl	8002156 <intToFp>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f92:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <shootSpaceship+0x174>)
 8003f94:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68dc      	ldr	r4, [r3, #12]
 8003f9a:	2007      	movs	r0, #7
 8003f9c:	f7fe f8db 	bl	8002156 <intToFp>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	1ae3      	subs	r3, r4, r3
 8003fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691c      	ldr	r4, [r3, #16]
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7fe f8d3 	bl	8002156 <intToFp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	1ae3      	subs	r3, r4, r3
 8003fb6:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8003fb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
 8003fc8:	615a      	str	r2, [r3, #20]
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fd0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8003fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fe0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fe8:	e883 0003 	stmia.w	r3, {r0, r1}
 8003fec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ff0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff8:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8003ffc:	687d      	ldr	r5, [r7, #4]
 8003ffe:	466c      	mov	r4, sp
 8004000:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800400a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800400e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004010:	4628      	mov	r0, r5
 8004012:	f7ff f8de 	bl	80031d2 <appendBullet>
 8004016:	e04c      	b.n	80040b2 <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8004018:	2000      	movs	r0, #0
 800401a:	f7fe f89c 	bl	8002156 <intToFp>
 800401e:	4603      	mov	r3, r0
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <shootSpaceship+0x174>)
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68dc      	ldr	r4, [r3, #12]
 800402a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	00d2      	lsls	r2, r2, #3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	b29b      	uxth	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe f88d 	bl	8002156 <intToFp>
 800403c:	4603      	mov	r3, r0
 800403e:	4423      	add	r3, r4
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691c      	ldr	r4, [r3, #16]
 8004046:	2001      	movs	r0, #1
 8004048:	f7fe f885 	bl	8002156 <intToFp>
 800404c:	4603      	mov	r3, r0
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	1ae3      	subs	r3, r4, r3
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	615a      	str	r2, [r3, #20]
 8004066:	619a      	str	r2, [r3, #24]
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004074:	e883 0003 	stmia.w	r3, {r0, r1}
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004084:	e883 0003 	stmia.w	r3, {r0, r1}
 8004088:	f107 031c 	add.w	r3, r7, #28
 800408c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004094:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8004098:	687d      	ldr	r5, [r7, #4]
 800409a:	466c      	mov	r4, sp
 800409c:	f107 0318 	add.w	r3, r7, #24
 80040a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ac:	4628      	mov	r0, r5
 80040ae:	f7ff f890 	bl	80031d2 <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80040b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b4:	3301      	adds	r3, #1
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7f1b      	ldrb	r3, [r3, #28]
 80040bc:	461a      	mov	r2, r3
 80040be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c0:	4293      	cmp	r3, r2
 80040c2:	f6ff af5e 	blt.w	8003f82 <shootSpaceship+0x22>
		}


	}

}
 80040c6:	bf00      	nop
 80040c8:	3768      	adds	r7, #104	; 0x68
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200001c8 	.word	0x200001c8
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe f84b 	bl	8002180 <fpToInt>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b2dc      	uxtb	r4, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe f844 	bl	8002180 <fpToInt>
 80040f8:	4603      	mov	r3, r0
 80040fa:	0fda      	lsrs	r2, r3, #31
 80040fc:	4413      	add	r3, r2
 80040fe:	105b      	asrs	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4619      	mov	r1, r3
 8004104:	4620      	mov	r0, r4
 8004106:	f7fe ffd3 	bl	80030b0 <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe f836 	bl	8002180 <fpToInt>
 8004114:	4603      	mov	r3, r0
 8004116:	b2dc      	uxtb	r4, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe f82f 	bl	8002180 <fpToInt>
 8004122:	4603      	mov	r3, r0
 8004124:	0fda      	lsrs	r2, r3, #31
 8004126:	4413      	add	r3, r2
 8004128:	105b      	asrs	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	4620      	mov	r0, r4
 8004130:	f7fe ff9c 	bl	800306c <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e06e      	b.n	8004218 <drawSpaceship+0x140>

		if(i == 2){
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d12e      	bne.n	800419e <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f81b 	bl	8002180 <fpToInt>
 800414a:	4603      	mov	r3, r0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	3b07      	subs	r3, #7
 8004150:	b2dc      	uxtb	r4, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f812 	bl	8002180 <fpToInt>
 800415c:	4603      	mov	r3, r0
 800415e:	0fda      	lsrs	r2, r3, #31
 8004160:	4413      	add	r3, r2
 8004162:	105b      	asrs	r3, r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4619      	mov	r1, r3
 8004168:	4620      	mov	r0, r4
 800416a:	f7fe ff36 	bl	8002fda <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe f804 	bl	8002180 <fpToInt>
 8004178:	4603      	mov	r3, r0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3b07      	subs	r3, #7
 800417e:	b2dc      	uxtb	r4, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd fffb 	bl	8002180 <fpToInt>
 800418a:	4603      	mov	r3, r0
 800418c:	0fda      	lsrs	r2, r3, #31
 800418e:	4413      	add	r3, r2
 8004190:	105b      	asrs	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	4620      	mov	r0, r4
 8004198:	f7fe fed6 	bl	8002f48 <drawMe>
 800419c:	e039      	b.n	8004212 <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd ffec 	bl	8002180 <fpToInt>
 80041a8:	4603      	mov	r3, r0
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	00c9      	lsls	r1, r1, #3
 80041b4:	1acb      	subs	r3, r1, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	b2dc      	uxtb	r4, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd ffdd 	bl	8002180 <fpToInt>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0fda      	lsrs	r2, r3, #31
 80041ca:	4413      	add	r3, r2
 80041cc:	105b      	asrs	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7fe ff01 	bl	8002fda <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd ffcf 	bl	8002180 <fpToInt>
 80041e2:	4603      	mov	r3, r0
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	00c9      	lsls	r1, r1, #3
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	b2dc      	uxtb	r4, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd ffc0 	bl	8002180 <fpToInt>
 8004200:	4603      	mov	r3, r0
 8004202:	0fda      	lsrs	r2, r3, #31
 8004204:	4413      	add	r3, r2
 8004206:	105b      	asrs	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	4620      	mov	r0, r4
 800420e:	f7fe fe9b 	bl	8002f48 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	7f1b      	ldrb	r3, [r3, #28]
 800421c:	461a      	mov	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4293      	cmp	r3, r2
 8004222:	db8a      	blt.n	800413a <drawSpaceship+0x62>

	}



	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	330c      	adds	r3, #12
 800422a:	3214      	adds	r2, #20
 800422c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004230:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	return 1;
 8004240:	2301      	movs	r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_kill>:

int _kill(int pid, int sig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004256:	f000 f94f 	bl	80044f8 <__errno>
 800425a:	4603      	mov	r3, r0
 800425c:	2216      	movs	r2, #22
 800425e:	601a      	str	r2, [r3, #0]
	return -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_exit>:

void _exit (int status)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ffe7 	bl	800424c <_kill>
	while (1) {}		/* Make sure we hang here */
 800427e:	e7fe      	b.n	800427e <_exit+0x12>

08004280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e00a      	b.n	80042a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004292:	f3af 8000 	nop.w
 8004296:	4601      	mov	r1, r0
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	60ba      	str	r2, [r7, #8]
 800429e:	b2ca      	uxtb	r2, r1
 80042a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	dbf0      	blt.n	8004292 <_read+0x12>
	}

return len;
 80042b0:	687b      	ldr	r3, [r7, #4]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	return -1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042e2:	605a      	str	r2, [r3, #4]
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_isatty>:

int _isatty(int file)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
	return 1;
 80042fa:	2301      	movs	r3, #1
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <_sbrk+0x50>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <_sbrk+0x16>
		heap_end = &end;
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <_sbrk+0x50>)
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <_sbrk+0x54>)
 8004338:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <_sbrk+0x50>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <_sbrk+0x50>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	466a      	mov	r2, sp
 800434a:	4293      	cmp	r3, r2
 800434c:	d907      	bls.n	800435e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800434e:	f000 f8d3 	bl	80044f8 <__errno>
 8004352:	4603      	mov	r3, r0
 8004354:	220c      	movs	r2, #12
 8004356:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800435c:	e006      	b.n	800436c <_sbrk+0x48>
	}

	heap_end += incr;
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <_sbrk+0x50>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	4a03      	ldr	r2, [pc, #12]	; (8004374 <_sbrk+0x50>)
 8004368:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200001bc 	.word	0x200001bc
 8004378:	200001e0 	.word	0x200001e0

0800437c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004380:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <SystemInit+0x84>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <SystemInit+0x84>)
 8004388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800438c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <SystemInit+0x88>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <SystemInit+0x88>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <SystemInit+0x88>)
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4918      	ldr	r1, [pc, #96]	; (8004404 <SystemInit+0x88>)
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <SystemInit+0x8c>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <SystemInit+0x88>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <SystemInit+0x88>)
 80043ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <SystemInit+0x88>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a11      	ldr	r2, [pc, #68]	; (8004404 <SystemInit+0x88>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <SystemInit+0x88>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <SystemInit+0x88>)
 80043ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80043ce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <SystemInit+0x88>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a0b      	ldr	r2, [pc, #44]	; (8004404 <SystemInit+0x88>)
 80043d6:	f023 030f 	bic.w	r3, r3, #15
 80043da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <SystemInit+0x88>)
 80043de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e0:	4908      	ldr	r1, [pc, #32]	; (8004404 <SystemInit+0x88>)
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <SystemInit+0x90>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <SystemInit+0x88>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80043ee:	f000 f80f 	bl	8004410 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80043f2:	4b03      	ldr	r3, [pc, #12]	; (8004400 <SystemInit+0x84>)
 80043f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043f8:	609a      	str	r2, [r3, #8]
#endif  
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000ed00 	.word	0xe000ed00
 8004404:	40021000 	.word	0x40021000
 8004408:	f87fc00c 	.word	0xf87fc00c
 800440c:	ff00fccc 	.word	0xff00fccc

08004410 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <SetSysClock+0x8c>)
 8004416:	2212      	movs	r2, #18
 8004418:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <SetSysClock+0x90>)
 800441c:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <SetSysClock+0x90>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <SetSysClock+0x90>)
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <SetSysClock+0x90>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <SetSysClock+0x90>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <SetSysClock+0x90>)
 8004430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004434:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <SetSysClock+0x90>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <SetSysClock+0x90>)
 800443c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004440:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <SetSysClock+0x90>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <SetSysClock+0x90>)
 8004448:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800444c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <SetSysClock+0x90>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <SetSysClock+0x90>)
 8004454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004458:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800445a:	bf00      	nop
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <SetSysClock+0x90>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f9      	beq.n	800445c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <SetSysClock+0x90>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <SetSysClock+0x90>)
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <SetSysClock+0x90>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <SetSysClock+0x90>)
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8004480:	bf00      	nop
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <SetSysClock+0x90>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b08      	cmp	r3, #8
 800448c:	d1f9      	bne.n	8004482 <SetSysClock+0x72>
  {
  }
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000

080044a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044aa:	490e      	ldr	r1, [pc, #56]	; (80044e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044ac:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <LoopForever+0xe>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b0:	e002      	b.n	80044b8 <LoopCopyDataInit>

080044b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b6:	3304      	adds	r3, #4

080044b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044bc:	d3f9      	bcc.n	80044b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044be:	4a0b      	ldr	r2, [pc, #44]	; (80044ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c0:	4c0b      	ldr	r4, [pc, #44]	; (80044f0 <LoopForever+0x16>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c4:	e001      	b.n	80044ca <LoopFillZerobss>

080044c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c8:	3204      	adds	r2, #4

080044ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044cc:	d3fb      	bcc.n	80044c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044ce:	f7ff ff55 	bl	800437c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80044d2:	f000 f817 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044d6:	f7ff f8c5 	bl	8003664 <main>

080044da <LoopForever>:

LoopForever:
    b LoopForever
 80044da:	e7fe      	b.n	80044da <LoopForever>
  ldr   r0, =_estack
 80044dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80044e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80044e8:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 80044ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80044f0:	200001dc 	.word	0x200001dc

080044f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044f4:	e7fe      	b.n	80044f4 <ADC1_2_IRQHandler>
	...

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	2000002c 	.word	0x2000002c

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f001 f98a 	bl	8005830 <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	08005b54 	.word	0x08005b54
 8004540:	08005b54 	.word	0x08005b54
 8004544:	08005b54 	.word	0x08005b54
 8004548:	08005b58 	.word	0x08005b58

0800454c <malloc>:
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <malloc+0xc>)
 800454e:	4601      	mov	r1, r0
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f000 b863 	b.w	800461c <_malloc_r>
 8004556:	bf00      	nop
 8004558:	2000002c 	.word	0x2000002c

0800455c <free>:
 800455c:	4b02      	ldr	r3, [pc, #8]	; (8004568 <free+0xc>)
 800455e:	4601      	mov	r1, r0
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f000 b80b 	b.w	800457c <_free_r>
 8004566:	bf00      	nop
 8004568:	2000002c 	.word	0x2000002c

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <_free_r>:
 800457c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800457e:	2900      	cmp	r1, #0
 8004580:	d048      	beq.n	8004614 <_free_r+0x98>
 8004582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004586:	9001      	str	r0, [sp, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f1a1 0404 	sub.w	r4, r1, #4
 800458e:	bfb8      	it	lt
 8004590:	18e4      	addlt	r4, r4, r3
 8004592:	f000 fc65 	bl	8004e60 <__malloc_lock>
 8004596:	4a20      	ldr	r2, [pc, #128]	; (8004618 <_free_r+0x9c>)
 8004598:	9801      	ldr	r0, [sp, #4]
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	4615      	mov	r5, r2
 800459e:	b933      	cbnz	r3, 80045ae <_free_r+0x32>
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	6014      	str	r4, [r2, #0]
 80045a4:	b003      	add	sp, #12
 80045a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045aa:	f000 bc5f 	b.w	8004e6c <__malloc_unlock>
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d90b      	bls.n	80045ca <_free_r+0x4e>
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	1862      	adds	r2, r4, r1
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bf04      	itt	eq
 80045ba:	681a      	ldreq	r2, [r3, #0]
 80045bc:	685b      	ldreq	r3, [r3, #4]
 80045be:	6063      	str	r3, [r4, #4]
 80045c0:	bf04      	itt	eq
 80045c2:	1852      	addeq	r2, r2, r1
 80045c4:	6022      	streq	r2, [r4, #0]
 80045c6:	602c      	str	r4, [r5, #0]
 80045c8:	e7ec      	b.n	80045a4 <_free_r+0x28>
 80045ca:	461a      	mov	r2, r3
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	b10b      	cbz	r3, 80045d4 <_free_r+0x58>
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	d9fa      	bls.n	80045ca <_free_r+0x4e>
 80045d4:	6811      	ldr	r1, [r2, #0]
 80045d6:	1855      	adds	r5, r2, r1
 80045d8:	42a5      	cmp	r5, r4
 80045da:	d10b      	bne.n	80045f4 <_free_r+0x78>
 80045dc:	6824      	ldr	r4, [r4, #0]
 80045de:	4421      	add	r1, r4
 80045e0:	1854      	adds	r4, r2, r1
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	d1dd      	bne.n	80045a4 <_free_r+0x28>
 80045e8:	681c      	ldr	r4, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	6053      	str	r3, [r2, #4]
 80045ee:	4421      	add	r1, r4
 80045f0:	6011      	str	r1, [r2, #0]
 80045f2:	e7d7      	b.n	80045a4 <_free_r+0x28>
 80045f4:	d902      	bls.n	80045fc <_free_r+0x80>
 80045f6:	230c      	movs	r3, #12
 80045f8:	6003      	str	r3, [r0, #0]
 80045fa:	e7d3      	b.n	80045a4 <_free_r+0x28>
 80045fc:	6825      	ldr	r5, [r4, #0]
 80045fe:	1961      	adds	r1, r4, r5
 8004600:	428b      	cmp	r3, r1
 8004602:	bf04      	itt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	6063      	str	r3, [r4, #4]
 800460a:	bf04      	itt	eq
 800460c:	1949      	addeq	r1, r1, r5
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	6054      	str	r4, [r2, #4]
 8004612:	e7c7      	b.n	80045a4 <_free_r+0x28>
 8004614:	b003      	add	sp, #12
 8004616:	bd30      	pop	{r4, r5, pc}
 8004618:	200001c0 	.word	0x200001c0

0800461c <_malloc_r>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	1ccd      	adds	r5, r1, #3
 8004620:	f025 0503 	bic.w	r5, r5, #3
 8004624:	3508      	adds	r5, #8
 8004626:	2d0c      	cmp	r5, #12
 8004628:	bf38      	it	cc
 800462a:	250c      	movcc	r5, #12
 800462c:	2d00      	cmp	r5, #0
 800462e:	4606      	mov	r6, r0
 8004630:	db01      	blt.n	8004636 <_malloc_r+0x1a>
 8004632:	42a9      	cmp	r1, r5
 8004634:	d903      	bls.n	800463e <_malloc_r+0x22>
 8004636:	230c      	movs	r3, #12
 8004638:	6033      	str	r3, [r6, #0]
 800463a:	2000      	movs	r0, #0
 800463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463e:	f000 fc0f 	bl	8004e60 <__malloc_lock>
 8004642:	4921      	ldr	r1, [pc, #132]	; (80046c8 <_malloc_r+0xac>)
 8004644:	680a      	ldr	r2, [r1, #0]
 8004646:	4614      	mov	r4, r2
 8004648:	b99c      	cbnz	r4, 8004672 <_malloc_r+0x56>
 800464a:	4f20      	ldr	r7, [pc, #128]	; (80046cc <_malloc_r+0xb0>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b923      	cbnz	r3, 800465a <_malloc_r+0x3e>
 8004650:	4621      	mov	r1, r4
 8004652:	4630      	mov	r0, r6
 8004654:	f000 f8d8 	bl	8004808 <_sbrk_r>
 8004658:	6038      	str	r0, [r7, #0]
 800465a:	4629      	mov	r1, r5
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f8d3 	bl	8004808 <_sbrk_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	d123      	bne.n	80046ae <_malloc_r+0x92>
 8004666:	230c      	movs	r3, #12
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	4630      	mov	r0, r6
 800466c:	f000 fbfe 	bl	8004e6c <__malloc_unlock>
 8004670:	e7e3      	b.n	800463a <_malloc_r+0x1e>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	1b5b      	subs	r3, r3, r5
 8004676:	d417      	bmi.n	80046a8 <_malloc_r+0x8c>
 8004678:	2b0b      	cmp	r3, #11
 800467a:	d903      	bls.n	8004684 <_malloc_r+0x68>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	441c      	add	r4, r3
 8004680:	6025      	str	r5, [r4, #0]
 8004682:	e004      	b.n	800468e <_malloc_r+0x72>
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	42a2      	cmp	r2, r4
 8004688:	bf0c      	ite	eq
 800468a:	600b      	streq	r3, [r1, #0]
 800468c:	6053      	strne	r3, [r2, #4]
 800468e:	4630      	mov	r0, r6
 8004690:	f000 fbec 	bl	8004e6c <__malloc_unlock>
 8004694:	f104 000b 	add.w	r0, r4, #11
 8004698:	1d23      	adds	r3, r4, #4
 800469a:	f020 0007 	bic.w	r0, r0, #7
 800469e:	1ac2      	subs	r2, r0, r3
 80046a0:	d0cc      	beq.n	800463c <_malloc_r+0x20>
 80046a2:	1a1b      	subs	r3, r3, r0
 80046a4:	50a3      	str	r3, [r4, r2]
 80046a6:	e7c9      	b.n	800463c <_malloc_r+0x20>
 80046a8:	4622      	mov	r2, r4
 80046aa:	6864      	ldr	r4, [r4, #4]
 80046ac:	e7cc      	b.n	8004648 <_malloc_r+0x2c>
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d0e3      	beq.n	8004680 <_malloc_r+0x64>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 f8a4 	bl	8004808 <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1dd      	bne.n	8004680 <_malloc_r+0x64>
 80046c4:	e7cf      	b.n	8004666 <_malloc_r+0x4a>
 80046c6:	bf00      	nop
 80046c8:	200001c0 	.word	0x200001c0
 80046cc:	200001c4 	.word	0x200001c4

080046d0 <iprintf>:
 80046d0:	b40f      	push	{r0, r1, r2, r3}
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <iprintf+0x2c>)
 80046d4:	b513      	push	{r0, r1, r4, lr}
 80046d6:	681c      	ldr	r4, [r3, #0]
 80046d8:	b124      	cbz	r4, 80046e4 <iprintf+0x14>
 80046da:	69a3      	ldr	r3, [r4, #24]
 80046dc:	b913      	cbnz	r3, 80046e4 <iprintf+0x14>
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 faa8 	bl	8004c34 <__sinit>
 80046e4:	ab05      	add	r3, sp, #20
 80046e6:	9a04      	ldr	r2, [sp, #16]
 80046e8:	68a1      	ldr	r1, [r4, #8]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 fbed 	bl	8004ecc <_vfiprintf_r>
 80046f2:	b002      	add	sp, #8
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	b004      	add	sp, #16
 80046fa:	4770      	bx	lr
 80046fc:	2000002c 	.word	0x2000002c

08004700 <putchar>:
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <putchar+0x28>)
 8004702:	b513      	push	{r0, r1, r4, lr}
 8004704:	681c      	ldr	r4, [r3, #0]
 8004706:	4601      	mov	r1, r0
 8004708:	b134      	cbz	r4, 8004718 <putchar+0x18>
 800470a:	69a3      	ldr	r3, [r4, #24]
 800470c:	b923      	cbnz	r3, 8004718 <putchar+0x18>
 800470e:	9001      	str	r0, [sp, #4]
 8004710:	4620      	mov	r0, r4
 8004712:	f000 fa8f 	bl	8004c34 <__sinit>
 8004716:	9901      	ldr	r1, [sp, #4]
 8004718:	68a2      	ldr	r2, [r4, #8]
 800471a:	4620      	mov	r0, r4
 800471c:	b002      	add	sp, #8
 800471e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004722:	f000 be97 	b.w	8005454 <_putc_r>
 8004726:	bf00      	nop
 8004728:	2000002c 	.word	0x2000002c

0800472c <srand>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <srand+0x44>)
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004734:	4604      	mov	r4, r0
 8004736:	b9b3      	cbnz	r3, 8004766 <srand+0x3a>
 8004738:	2018      	movs	r0, #24
 800473a:	f7ff ff07 	bl	800454c <malloc>
 800473e:	4602      	mov	r2, r0
 8004740:	63a8      	str	r0, [r5, #56]	; 0x38
 8004742:	b920      	cbnz	r0, 800474e <srand+0x22>
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <srand+0x48>)
 8004746:	480c      	ldr	r0, [pc, #48]	; (8004778 <srand+0x4c>)
 8004748:	2142      	movs	r1, #66	; 0x42
 800474a:	f000 f93b 	bl	80049c4 <__assert_func>
 800474e:	490b      	ldr	r1, [pc, #44]	; (800477c <srand+0x50>)
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <srand+0x54>)
 8004752:	e9c0 1300 	strd	r1, r3, [r0]
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <srand+0x58>)
 8004758:	6083      	str	r3, [r0, #8]
 800475a:	230b      	movs	r3, #11
 800475c:	8183      	strh	r3, [r0, #12]
 800475e:	2100      	movs	r1, #0
 8004760:	2001      	movs	r0, #1
 8004762:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004766:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	611c      	str	r4, [r3, #16]
 800476c:	615a      	str	r2, [r3, #20]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	2000002c 	.word	0x2000002c
 8004774:	08005a04 	.word	0x08005a04
 8004778:	08005a1b 	.word	0x08005a1b
 800477c:	abcd330e 	.word	0xabcd330e
 8004780:	e66d1234 	.word	0xe66d1234
 8004784:	0005deec 	.word	0x0005deec

08004788 <rand>:
 8004788:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <rand+0x60>)
 800478a:	b510      	push	{r4, lr}
 800478c:	681c      	ldr	r4, [r3, #0]
 800478e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004790:	b9b3      	cbnz	r3, 80047c0 <rand+0x38>
 8004792:	2018      	movs	r0, #24
 8004794:	f7ff feda 	bl	800454c <malloc>
 8004798:	63a0      	str	r0, [r4, #56]	; 0x38
 800479a:	b928      	cbnz	r0, 80047a8 <rand+0x20>
 800479c:	4602      	mov	r2, r0
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <rand+0x64>)
 80047a0:	4813      	ldr	r0, [pc, #76]	; (80047f0 <rand+0x68>)
 80047a2:	214e      	movs	r1, #78	; 0x4e
 80047a4:	f000 f90e 	bl	80049c4 <__assert_func>
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <rand+0x6c>)
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <rand+0x70>)
 80047ac:	e9c0 2300 	strd	r2, r3, [r0]
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <rand+0x74>)
 80047b2:	6083      	str	r3, [r0, #8]
 80047b4:	230b      	movs	r3, #11
 80047b6:	8183      	strh	r3, [r0, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	2300      	movs	r3, #0
 80047bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80047c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047c2:	480f      	ldr	r0, [pc, #60]	; (8004800 <rand+0x78>)
 80047c4:	690a      	ldr	r2, [r1, #16]
 80047c6:	694b      	ldr	r3, [r1, #20]
 80047c8:	4c0e      	ldr	r4, [pc, #56]	; (8004804 <rand+0x7c>)
 80047ca:	4350      	muls	r0, r2
 80047cc:	fb04 0003 	mla	r0, r4, r3, r0
 80047d0:	fba2 3404 	umull	r3, r4, r2, r4
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	4404      	add	r4, r0
 80047d8:	f144 0000 	adc.w	r0, r4, #0
 80047dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80047e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	2000002c 	.word	0x2000002c
 80047ec:	08005a04 	.word	0x08005a04
 80047f0:	08005a1b 	.word	0x08005a1b
 80047f4:	abcd330e 	.word	0xabcd330e
 80047f8:	e66d1234 	.word	0xe66d1234
 80047fc:	0005deec 	.word	0x0005deec
 8004800:	5851f42d 	.word	0x5851f42d
 8004804:	4c957f2d 	.word	0x4c957f2d

08004808 <_sbrk_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d06      	ldr	r5, [pc, #24]	; (8004824 <_sbrk_r+0x1c>)
 800480c:	2300      	movs	r3, #0
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7ff fd86 	bl	8004324 <_sbrk>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_sbrk_r+0x1a>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_sbrk_r+0x1a>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	200001d8 	.word	0x200001d8

08004828 <setbuf>:
 8004828:	2900      	cmp	r1, #0
 800482a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482e:	bf0c      	ite	eq
 8004830:	2202      	moveq	r2, #2
 8004832:	2200      	movne	r2, #0
 8004834:	f000 b800 	b.w	8004838 <setvbuf>

08004838 <setvbuf>:
 8004838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800483c:	461d      	mov	r5, r3
 800483e:	4b5d      	ldr	r3, [pc, #372]	; (80049b4 <setvbuf+0x17c>)
 8004840:	681f      	ldr	r7, [r3, #0]
 8004842:	4604      	mov	r4, r0
 8004844:	460e      	mov	r6, r1
 8004846:	4690      	mov	r8, r2
 8004848:	b127      	cbz	r7, 8004854 <setvbuf+0x1c>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	b913      	cbnz	r3, 8004854 <setvbuf+0x1c>
 800484e:	4638      	mov	r0, r7
 8004850:	f000 f9f0 	bl	8004c34 <__sinit>
 8004854:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <setvbuf+0x180>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d167      	bne.n	800492a <setvbuf+0xf2>
 800485a:	687c      	ldr	r4, [r7, #4]
 800485c:	f1b8 0f02 	cmp.w	r8, #2
 8004860:	d006      	beq.n	8004870 <setvbuf+0x38>
 8004862:	f1b8 0f01 	cmp.w	r8, #1
 8004866:	f200 809f 	bhi.w	80049a8 <setvbuf+0x170>
 800486a:	2d00      	cmp	r5, #0
 800486c:	f2c0 809c 	blt.w	80049a8 <setvbuf+0x170>
 8004870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d405      	bmi.n	8004882 <setvbuf+0x4a>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	0598      	lsls	r0, r3, #22
 800487a:	d402      	bmi.n	8004882 <setvbuf+0x4a>
 800487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800487e:	f000 fa89 	bl	8004d94 <__retarget_lock_acquire_recursive>
 8004882:	4621      	mov	r1, r4
 8004884:	4638      	mov	r0, r7
 8004886:	f000 f941 	bl	8004b0c <_fflush_r>
 800488a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800488c:	b141      	cbz	r1, 80048a0 <setvbuf+0x68>
 800488e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004892:	4299      	cmp	r1, r3
 8004894:	d002      	beq.n	800489c <setvbuf+0x64>
 8004896:	4638      	mov	r0, r7
 8004898:	f7ff fe70 	bl	800457c <_free_r>
 800489c:	2300      	movs	r3, #0
 800489e:	6363      	str	r3, [r4, #52]	; 0x34
 80048a0:	2300      	movs	r3, #0
 80048a2:	61a3      	str	r3, [r4, #24]
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	0619      	lsls	r1, r3, #24
 80048aa:	d503      	bpl.n	80048b4 <setvbuf+0x7c>
 80048ac:	6921      	ldr	r1, [r4, #16]
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7ff fe64 	bl	800457c <_free_r>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f1b8 0f02 	cmp.w	r8, #2
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	d06c      	beq.n	80049a0 <setvbuf+0x168>
 80048c6:	ab01      	add	r3, sp, #4
 80048c8:	466a      	mov	r2, sp
 80048ca:	4621      	mov	r1, r4
 80048cc:	4638      	mov	r0, r7
 80048ce:	f000 fa63 	bl	8004d98 <__swhatbuf_r>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	4318      	orrs	r0, r3
 80048d6:	81a0      	strh	r0, [r4, #12]
 80048d8:	2d00      	cmp	r5, #0
 80048da:	d130      	bne.n	800493e <setvbuf+0x106>
 80048dc:	9d00      	ldr	r5, [sp, #0]
 80048de:	4628      	mov	r0, r5
 80048e0:	f7ff fe34 	bl	800454c <malloc>
 80048e4:	4606      	mov	r6, r0
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d155      	bne.n	8004996 <setvbuf+0x15e>
 80048ea:	f8dd 9000 	ldr.w	r9, [sp]
 80048ee:	45a9      	cmp	r9, r5
 80048f0:	d14a      	bne.n	8004988 <setvbuf+0x150>
 80048f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048f6:	2200      	movs	r2, #0
 80048f8:	60a2      	str	r2, [r4, #8]
 80048fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	6122      	str	r2, [r4, #16]
 8004902:	2201      	movs	r2, #1
 8004904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004908:	6162      	str	r2, [r4, #20]
 800490a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	07d2      	lsls	r2, r2, #31
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	d405      	bmi.n	8004922 <setvbuf+0xea>
 8004916:	f413 7f00 	tst.w	r3, #512	; 0x200
 800491a:	d102      	bne.n	8004922 <setvbuf+0xea>
 800491c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800491e:	f000 fa3a 	bl	8004d96 <__retarget_lock_release_recursive>
 8004922:	4628      	mov	r0, r5
 8004924:	b003      	add	sp, #12
 8004926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <setvbuf+0x184>)
 800492c:	429c      	cmp	r4, r3
 800492e:	d101      	bne.n	8004934 <setvbuf+0xfc>
 8004930:	68bc      	ldr	r4, [r7, #8]
 8004932:	e793      	b.n	800485c <setvbuf+0x24>
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <setvbuf+0x188>)
 8004936:	429c      	cmp	r4, r3
 8004938:	bf08      	it	eq
 800493a:	68fc      	ldreq	r4, [r7, #12]
 800493c:	e78e      	b.n	800485c <setvbuf+0x24>
 800493e:	2e00      	cmp	r6, #0
 8004940:	d0cd      	beq.n	80048de <setvbuf+0xa6>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	b913      	cbnz	r3, 800494c <setvbuf+0x114>
 8004946:	4638      	mov	r0, r7
 8004948:	f000 f974 	bl	8004c34 <__sinit>
 800494c:	f1b8 0f01 	cmp.w	r8, #1
 8004950:	bf08      	it	eq
 8004952:	89a3      	ldrheq	r3, [r4, #12]
 8004954:	6026      	str	r6, [r4, #0]
 8004956:	bf04      	itt	eq
 8004958:	f043 0301 	orreq.w	r3, r3, #1
 800495c:	81a3      	strheq	r3, [r4, #12]
 800495e:	89a2      	ldrh	r2, [r4, #12]
 8004960:	f012 0308 	ands.w	r3, r2, #8
 8004964:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004968:	d01c      	beq.n	80049a4 <setvbuf+0x16c>
 800496a:	07d3      	lsls	r3, r2, #31
 800496c:	bf41      	itttt	mi
 800496e:	2300      	movmi	r3, #0
 8004970:	426d      	negmi	r5, r5
 8004972:	60a3      	strmi	r3, [r4, #8]
 8004974:	61a5      	strmi	r5, [r4, #24]
 8004976:	bf58      	it	pl
 8004978:	60a5      	strpl	r5, [r4, #8]
 800497a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800497c:	f015 0501 	ands.w	r5, r5, #1
 8004980:	d115      	bne.n	80049ae <setvbuf+0x176>
 8004982:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004986:	e7c8      	b.n	800491a <setvbuf+0xe2>
 8004988:	4648      	mov	r0, r9
 800498a:	f7ff fddf 	bl	800454c <malloc>
 800498e:	4606      	mov	r6, r0
 8004990:	2800      	cmp	r0, #0
 8004992:	d0ae      	beq.n	80048f2 <setvbuf+0xba>
 8004994:	464d      	mov	r5, r9
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	e7d0      	b.n	8004942 <setvbuf+0x10a>
 80049a0:	2500      	movs	r5, #0
 80049a2:	e7a8      	b.n	80048f6 <setvbuf+0xbe>
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	e7e8      	b.n	800497a <setvbuf+0x142>
 80049a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049ac:	e7b9      	b.n	8004922 <setvbuf+0xea>
 80049ae:	2500      	movs	r5, #0
 80049b0:	e7b7      	b.n	8004922 <setvbuf+0xea>
 80049b2:	bf00      	nop
 80049b4:	2000002c 	.word	0x2000002c
 80049b8:	08005ad8 	.word	0x08005ad8
 80049bc:	08005af8 	.word	0x08005af8
 80049c0:	08005ab8 	.word	0x08005ab8

080049c4 <__assert_func>:
 80049c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049c6:	4614      	mov	r4, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <__assert_func+0x2c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4605      	mov	r5, r0
 80049d0:	68d8      	ldr	r0, [r3, #12]
 80049d2:	b14c      	cbz	r4, 80049e8 <__assert_func+0x24>
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <__assert_func+0x30>)
 80049d6:	9100      	str	r1, [sp, #0]
 80049d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049dc:	4906      	ldr	r1, [pc, #24]	; (80049f8 <__assert_func+0x34>)
 80049de:	462b      	mov	r3, r5
 80049e0:	f000 f9a6 	bl	8004d30 <fiprintf>
 80049e4:	f000 fe82 	bl	80056ec <abort>
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__assert_func+0x38>)
 80049ea:	461c      	mov	r4, r3
 80049ec:	e7f3      	b.n	80049d6 <__assert_func+0x12>
 80049ee:	bf00      	nop
 80049f0:	2000002c 	.word	0x2000002c
 80049f4:	08005a7a 	.word	0x08005a7a
 80049f8:	08005a87 	.word	0x08005a87
 80049fc:	08005ab5 	.word	0x08005ab5

08004a00 <__sflush_r>:
 8004a00:	898a      	ldrh	r2, [r1, #12]
 8004a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a06:	4605      	mov	r5, r0
 8004a08:	0710      	lsls	r0, r2, #28
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	d458      	bmi.n	8004ac0 <__sflush_r+0xc0>
 8004a0e:	684b      	ldr	r3, [r1, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dc05      	bgt.n	8004a20 <__sflush_r+0x20>
 8004a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dc02      	bgt.n	8004a20 <__sflush_r+0x20>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	d0f9      	beq.n	8004a1a <__sflush_r+0x1a>
 8004a26:	2300      	movs	r3, #0
 8004a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a2c:	682f      	ldr	r7, [r5, #0]
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	d032      	beq.n	8004a98 <__sflush_r+0x98>
 8004a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	075a      	lsls	r2, r3, #29
 8004a38:	d505      	bpl.n	8004a46 <__sflush_r+0x46>
 8004a3a:	6863      	ldr	r3, [r4, #4]
 8004a3c:	1ac0      	subs	r0, r0, r3
 8004a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a40:	b10b      	cbz	r3, 8004a46 <__sflush_r+0x46>
 8004a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a44:	1ac0      	subs	r0, r0, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a4c:	6a21      	ldr	r1, [r4, #32]
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b0      	blx	r6
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	d106      	bne.n	8004a66 <__sflush_r+0x66>
 8004a58:	6829      	ldr	r1, [r5, #0]
 8004a5a:	291d      	cmp	r1, #29
 8004a5c:	d82c      	bhi.n	8004ab8 <__sflush_r+0xb8>
 8004a5e:	4a2a      	ldr	r2, [pc, #168]	; (8004b08 <__sflush_r+0x108>)
 8004a60:	40ca      	lsrs	r2, r1
 8004a62:	07d6      	lsls	r6, r2, #31
 8004a64:	d528      	bpl.n	8004ab8 <__sflush_r+0xb8>
 8004a66:	2200      	movs	r2, #0
 8004a68:	6062      	str	r2, [r4, #4]
 8004a6a:	04d9      	lsls	r1, r3, #19
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	d504      	bpl.n	8004a7c <__sflush_r+0x7c>
 8004a72:	1c42      	adds	r2, r0, #1
 8004a74:	d101      	bne.n	8004a7a <__sflush_r+0x7a>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	b903      	cbnz	r3, 8004a7c <__sflush_r+0x7c>
 8004a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a7e:	602f      	str	r7, [r5, #0]
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d0ca      	beq.n	8004a1a <__sflush_r+0x1a>
 8004a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	d002      	beq.n	8004a92 <__sflush_r+0x92>
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f7ff fd75 	bl	800457c <_free_r>
 8004a92:	2000      	movs	r0, #0
 8004a94:	6360      	str	r0, [r4, #52]	; 0x34
 8004a96:	e7c1      	b.n	8004a1c <__sflush_r+0x1c>
 8004a98:	6a21      	ldr	r1, [r4, #32]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b0      	blx	r6
 8004aa0:	1c41      	adds	r1, r0, #1
 8004aa2:	d1c7      	bne.n	8004a34 <__sflush_r+0x34>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c4      	beq.n	8004a34 <__sflush_r+0x34>
 8004aaa:	2b1d      	cmp	r3, #29
 8004aac:	d001      	beq.n	8004ab2 <__sflush_r+0xb2>
 8004aae:	2b16      	cmp	r3, #22
 8004ab0:	d101      	bne.n	8004ab6 <__sflush_r+0xb6>
 8004ab2:	602f      	str	r7, [r5, #0]
 8004ab4:	e7b1      	b.n	8004a1a <__sflush_r+0x1a>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	e7ad      	b.n	8004a1c <__sflush_r+0x1c>
 8004ac0:	690f      	ldr	r7, [r1, #16]
 8004ac2:	2f00      	cmp	r7, #0
 8004ac4:	d0a9      	beq.n	8004a1a <__sflush_r+0x1a>
 8004ac6:	0793      	lsls	r3, r2, #30
 8004ac8:	680e      	ldr	r6, [r1, #0]
 8004aca:	bf08      	it	eq
 8004acc:	694b      	ldreq	r3, [r1, #20]
 8004ace:	600f      	str	r7, [r1, #0]
 8004ad0:	bf18      	it	ne
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	eba6 0807 	sub.w	r8, r6, r7
 8004ad8:	608b      	str	r3, [r1, #8]
 8004ada:	f1b8 0f00 	cmp.w	r8, #0
 8004ade:	dd9c      	ble.n	8004a1a <__sflush_r+0x1a>
 8004ae0:	6a21      	ldr	r1, [r4, #32]
 8004ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	463a      	mov	r2, r7
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b0      	blx	r6
 8004aec:	2800      	cmp	r0, #0
 8004aee:	dc06      	bgt.n	8004afe <__sflush_r+0xfe>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	e78e      	b.n	8004a1c <__sflush_r+0x1c>
 8004afe:	4407      	add	r7, r0
 8004b00:	eba8 0800 	sub.w	r8, r8, r0
 8004b04:	e7e9      	b.n	8004ada <__sflush_r+0xda>
 8004b06:	bf00      	nop
 8004b08:	20400001 	.word	0x20400001

08004b0c <_fflush_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	4605      	mov	r5, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	b913      	cbnz	r3, 8004b1c <_fflush_r+0x10>
 8004b16:	2500      	movs	r5, #0
 8004b18:	4628      	mov	r0, r5
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	b118      	cbz	r0, 8004b26 <_fflush_r+0x1a>
 8004b1e:	6983      	ldr	r3, [r0, #24]
 8004b20:	b90b      	cbnz	r3, 8004b26 <_fflush_r+0x1a>
 8004b22:	f000 f887 	bl	8004c34 <__sinit>
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <_fflush_r+0x6c>)
 8004b28:	429c      	cmp	r4, r3
 8004b2a:	d11b      	bne.n	8004b64 <_fflush_r+0x58>
 8004b2c:	686c      	ldr	r4, [r5, #4]
 8004b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ef      	beq.n	8004b16 <_fflush_r+0xa>
 8004b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b38:	07d0      	lsls	r0, r2, #31
 8004b3a:	d404      	bmi.n	8004b46 <_fflush_r+0x3a>
 8004b3c:	0599      	lsls	r1, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_fflush_r+0x3a>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f000 f927 	bl	8004d94 <__retarget_lock_acquire_recursive>
 8004b46:	4628      	mov	r0, r5
 8004b48:	4621      	mov	r1, r4
 8004b4a:	f7ff ff59 	bl	8004a00 <__sflush_r>
 8004b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b50:	07da      	lsls	r2, r3, #31
 8004b52:	4605      	mov	r5, r0
 8004b54:	d4e0      	bmi.n	8004b18 <_fflush_r+0xc>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	059b      	lsls	r3, r3, #22
 8004b5a:	d4dd      	bmi.n	8004b18 <_fflush_r+0xc>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5e:	f000 f91a 	bl	8004d96 <__retarget_lock_release_recursive>
 8004b62:	e7d9      	b.n	8004b18 <_fflush_r+0xc>
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <_fflush_r+0x70>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d101      	bne.n	8004b6e <_fflush_r+0x62>
 8004b6a:	68ac      	ldr	r4, [r5, #8]
 8004b6c:	e7df      	b.n	8004b2e <_fflush_r+0x22>
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <_fflush_r+0x74>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	bf08      	it	eq
 8004b74:	68ec      	ldreq	r4, [r5, #12]
 8004b76:	e7da      	b.n	8004b2e <_fflush_r+0x22>
 8004b78:	08005ad8 	.word	0x08005ad8
 8004b7c:	08005af8 	.word	0x08005af8
 8004b80:	08005ab8 	.word	0x08005ab8

08004b84 <std>:
 8004b84:	2300      	movs	r3, #0
 8004b86:	b510      	push	{r4, lr}
 8004b88:	4604      	mov	r4, r0
 8004b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b92:	6083      	str	r3, [r0, #8]
 8004b94:	8181      	strh	r1, [r0, #12]
 8004b96:	6643      	str	r3, [r0, #100]	; 0x64
 8004b98:	81c2      	strh	r2, [r0, #14]
 8004b9a:	6183      	str	r3, [r0, #24]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	305c      	adds	r0, #92	; 0x5c
 8004ba2:	f7ff fce3 	bl	800456c <memset>
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <std+0x38>)
 8004ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <std+0x3c>)
 8004bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <std+0x40>)
 8004bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std+0x44>)
 8004bb4:	6224      	str	r4, [r4, #32]
 8004bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	bf00      	nop
 8004bbc:	080054e5 	.word	0x080054e5
 8004bc0:	08005507 	.word	0x08005507
 8004bc4:	0800553f 	.word	0x0800553f
 8004bc8:	08005563 	.word	0x08005563

08004bcc <_cleanup_r>:
 8004bcc:	4901      	ldr	r1, [pc, #4]	; (8004bd4 <_cleanup_r+0x8>)
 8004bce:	f000 b8c1 	b.w	8004d54 <_fwalk_reent>
 8004bd2:	bf00      	nop
 8004bd4:	08004b0d 	.word	0x08004b0d

08004bd8 <__sfmoreglue>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	1e4a      	subs	r2, r1, #1
 8004bdc:	2568      	movs	r5, #104	; 0x68
 8004bde:	4355      	muls	r5, r2
 8004be0:	460e      	mov	r6, r1
 8004be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004be6:	f7ff fd19 	bl	800461c <_malloc_r>
 8004bea:	4604      	mov	r4, r0
 8004bec:	b140      	cbz	r0, 8004c00 <__sfmoreglue+0x28>
 8004bee:	2100      	movs	r1, #0
 8004bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8004bf4:	300c      	adds	r0, #12
 8004bf6:	60a0      	str	r0, [r4, #8]
 8004bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bfc:	f7ff fcb6 	bl	800456c <memset>
 8004c00:	4620      	mov	r0, r4
 8004c02:	bd70      	pop	{r4, r5, r6, pc}

08004c04 <__sfp_lock_acquire>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__sfp_lock_acquire+0x8>)
 8004c06:	f000 b8c5 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	200001d4 	.word	0x200001d4

08004c10 <__sfp_lock_release>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__sfp_lock_release+0x8>)
 8004c12:	f000 b8c0 	b.w	8004d96 <__retarget_lock_release_recursive>
 8004c16:	bf00      	nop
 8004c18:	200001d4 	.word	0x200001d4

08004c1c <__sinit_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sinit_lock_acquire+0x8>)
 8004c1e:	f000 b8b9 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	200001cf 	.word	0x200001cf

08004c28 <__sinit_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sinit_lock_release+0x8>)
 8004c2a:	f000 b8b4 	b.w	8004d96 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200001cf 	.word	0x200001cf

08004c34 <__sinit>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	f7ff fff0 	bl	8004c1c <__sinit_lock_acquire>
 8004c3c:	69a3      	ldr	r3, [r4, #24]
 8004c3e:	b11b      	cbz	r3, 8004c48 <__sinit+0x14>
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f7ff bff0 	b.w	8004c28 <__sinit_lock_release>
 8004c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <__sinit+0x68>)
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <__sinit+0x6c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	bf04      	itt	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	61a3      	streq	r3, [r4, #24]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 f820 	bl	8004ca4 <__sfp>
 8004c64:	6060      	str	r0, [r4, #4]
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f81c 	bl	8004ca4 <__sfp>
 8004c6c:	60a0      	str	r0, [r4, #8]
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f818 	bl	8004ca4 <__sfp>
 8004c74:	2200      	movs	r2, #0
 8004c76:	60e0      	str	r0, [r4, #12]
 8004c78:	2104      	movs	r1, #4
 8004c7a:	6860      	ldr	r0, [r4, #4]
 8004c7c:	f7ff ff82 	bl	8004b84 <std>
 8004c80:	68a0      	ldr	r0, [r4, #8]
 8004c82:	2201      	movs	r2, #1
 8004c84:	2109      	movs	r1, #9
 8004c86:	f7ff ff7d 	bl	8004b84 <std>
 8004c8a:	68e0      	ldr	r0, [r4, #12]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	2112      	movs	r1, #18
 8004c90:	f7ff ff78 	bl	8004b84 <std>
 8004c94:	2301      	movs	r3, #1
 8004c96:	61a3      	str	r3, [r4, #24]
 8004c98:	e7d2      	b.n	8004c40 <__sinit+0xc>
 8004c9a:	bf00      	nop
 8004c9c:	08005a00 	.word	0x08005a00
 8004ca0:	08004bcd 	.word	0x08004bcd

08004ca4 <__sfp>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	f7ff ffac 	bl	8004c04 <__sfp_lock_acquire>
 8004cac:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <__sfp+0x84>)
 8004cae:	681e      	ldr	r6, [r3, #0]
 8004cb0:	69b3      	ldr	r3, [r6, #24]
 8004cb2:	b913      	cbnz	r3, 8004cba <__sfp+0x16>
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7ff ffbd 	bl	8004c34 <__sinit>
 8004cba:	3648      	adds	r6, #72	; 0x48
 8004cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	d503      	bpl.n	8004ccc <__sfp+0x28>
 8004cc4:	6833      	ldr	r3, [r6, #0]
 8004cc6:	b30b      	cbz	r3, 8004d0c <__sfp+0x68>
 8004cc8:	6836      	ldr	r6, [r6, #0]
 8004cca:	e7f7      	b.n	8004cbc <__sfp+0x18>
 8004ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cd0:	b9d5      	cbnz	r5, 8004d08 <__sfp+0x64>
 8004cd2:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <__sfp+0x88>)
 8004cd4:	60e3      	str	r3, [r4, #12]
 8004cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cda:	6665      	str	r5, [r4, #100]	; 0x64
 8004cdc:	f000 f859 	bl	8004d92 <__retarget_lock_init_recursive>
 8004ce0:	f7ff ff96 	bl	8004c10 <__sfp_lock_release>
 8004ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cec:	6025      	str	r5, [r4, #0]
 8004cee:	61a5      	str	r5, [r4, #24]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cf8:	f7ff fc38 	bl	800456c <memset>
 8004cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d04:	4620      	mov	r0, r4
 8004d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d08:	3468      	adds	r4, #104	; 0x68
 8004d0a:	e7d9      	b.n	8004cc0 <__sfp+0x1c>
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f7ff ff62 	bl	8004bd8 <__sfmoreglue>
 8004d14:	4604      	mov	r4, r0
 8004d16:	6030      	str	r0, [r6, #0]
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d1d5      	bne.n	8004cc8 <__sfp+0x24>
 8004d1c:	f7ff ff78 	bl	8004c10 <__sfp_lock_release>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	e7ee      	b.n	8004d04 <__sfp+0x60>
 8004d26:	bf00      	nop
 8004d28:	08005a00 	.word	0x08005a00
 8004d2c:	ffff0001 	.word	0xffff0001

08004d30 <fiprintf>:
 8004d30:	b40e      	push	{r1, r2, r3}
 8004d32:	b503      	push	{r0, r1, lr}
 8004d34:	4601      	mov	r1, r0
 8004d36:	ab03      	add	r3, sp, #12
 8004d38:	4805      	ldr	r0, [pc, #20]	; (8004d50 <fiprintf+0x20>)
 8004d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3e:	6800      	ldr	r0, [r0, #0]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	f000 f8c3 	bl	8004ecc <_vfiprintf_r>
 8004d46:	b002      	add	sp, #8
 8004d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d4c:	b003      	add	sp, #12
 8004d4e:	4770      	bx	lr
 8004d50:	2000002c 	.word	0x2000002c

08004d54 <_fwalk_reent>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	4606      	mov	r6, r0
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d60:	2700      	movs	r7, #0
 8004d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d66:	f1b9 0901 	subs.w	r9, r9, #1
 8004d6a:	d505      	bpl.n	8004d78 <_fwalk_reent+0x24>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	2c00      	cmp	r4, #0
 8004d70:	d1f7      	bne.n	8004d62 <_fwalk_reent+0xe>
 8004d72:	4638      	mov	r0, r7
 8004d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d78:	89ab      	ldrh	r3, [r5, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d907      	bls.n	8004d8e <_fwalk_reent+0x3a>
 8004d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d82:	3301      	adds	r3, #1
 8004d84:	d003      	beq.n	8004d8e <_fwalk_reent+0x3a>
 8004d86:	4629      	mov	r1, r5
 8004d88:	4630      	mov	r0, r6
 8004d8a:	47c0      	blx	r8
 8004d8c:	4307      	orrs	r7, r0
 8004d8e:	3568      	adds	r5, #104	; 0x68
 8004d90:	e7e9      	b.n	8004d66 <_fwalk_reent+0x12>

08004d92 <__retarget_lock_init_recursive>:
 8004d92:	4770      	bx	lr

08004d94 <__retarget_lock_acquire_recursive>:
 8004d94:	4770      	bx	lr

08004d96 <__retarget_lock_release_recursive>:
 8004d96:	4770      	bx	lr

08004d98 <__swhatbuf_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	b096      	sub	sp, #88	; 0x58
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	da07      	bge.n	8004dba <__swhatbuf_r+0x22>
 8004daa:	2300      	movs	r3, #0
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	89b3      	ldrh	r3, [r6, #12]
 8004db0:	061a      	lsls	r2, r3, #24
 8004db2:	d410      	bmi.n	8004dd6 <__swhatbuf_r+0x3e>
 8004db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db8:	e00e      	b.n	8004dd8 <__swhatbuf_r+0x40>
 8004dba:	466a      	mov	r2, sp
 8004dbc:	f000 fcae 	bl	800571c <_fstat_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	dbf2      	blt.n	8004daa <__swhatbuf_r+0x12>
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dce:	425a      	negs	r2, r3
 8004dd0:	415a      	adcs	r2, r3
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	e7ee      	b.n	8004db4 <__swhatbuf_r+0x1c>
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	2000      	movs	r0, #0
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	b016      	add	sp, #88	; 0x58
 8004dde:	bd70      	pop	{r4, r5, r6, pc}

08004de0 <__smakebuf_r>:
 8004de0:	898b      	ldrh	r3, [r1, #12]
 8004de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de4:	079d      	lsls	r5, r3, #30
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	d507      	bpl.n	8004dfc <__smakebuf_r+0x1c>
 8004dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	2301      	movs	r3, #1
 8004df6:	6163      	str	r3, [r4, #20]
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	ab01      	add	r3, sp, #4
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f7ff ffca 	bl	8004d98 <__swhatbuf_r>
 8004e04:	9900      	ldr	r1, [sp, #0]
 8004e06:	4605      	mov	r5, r0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff fc07 	bl	800461c <_malloc_r>
 8004e0e:	b948      	cbnz	r0, 8004e24 <__smakebuf_r+0x44>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	059a      	lsls	r2, r3, #22
 8004e16:	d4ef      	bmi.n	8004df8 <__smakebuf_r+0x18>
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7e3      	b.n	8004dec <__smakebuf_r+0xc>
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <__smakebuf_r+0x7c>)
 8004e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	6020      	str	r0, [r4, #0]
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	9b00      	ldr	r3, [sp, #0]
 8004e34:	6163      	str	r3, [r4, #20]
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	6120      	str	r0, [r4, #16]
 8004e3a:	b15b      	cbz	r3, 8004e54 <__smakebuf_r+0x74>
 8004e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 fc7d 	bl	8005740 <_isatty_r>
 8004e46:	b128      	cbz	r0, 8004e54 <__smakebuf_r+0x74>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	89a0      	ldrh	r0, [r4, #12]
 8004e56:	4305      	orrs	r5, r0
 8004e58:	81a5      	strh	r5, [r4, #12]
 8004e5a:	e7cd      	b.n	8004df8 <__smakebuf_r+0x18>
 8004e5c:	08004bcd 	.word	0x08004bcd

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f7ff bf97 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	200001d0 	.word	0x200001d0

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f7ff bf92 	b.w	8004d96 <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	200001d0 	.word	0x200001d0

08004e78 <__sfputc_r>:
 8004e78:	6893      	ldr	r3, [r2, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	b410      	push	{r4}
 8004e80:	6093      	str	r3, [r2, #8]
 8004e82:	da08      	bge.n	8004e96 <__sfputc_r+0x1e>
 8004e84:	6994      	ldr	r4, [r2, #24]
 8004e86:	42a3      	cmp	r3, r4
 8004e88:	db01      	blt.n	8004e8e <__sfputc_r+0x16>
 8004e8a:	290a      	cmp	r1, #10
 8004e8c:	d103      	bne.n	8004e96 <__sfputc_r+0x1e>
 8004e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e92:	f000 bb6b 	b.w	800556c <__swbuf_r>
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	1c58      	adds	r0, r3, #1
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	7019      	strb	r1, [r3, #0]
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <__sfputs_r>:
 8004ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	18d5      	adds	r5, r2, r3
 8004eb0:	42ac      	cmp	r4, r5
 8004eb2:	d101      	bne.n	8004eb8 <__sfputs_r+0x12>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e007      	b.n	8004ec8 <__sfputs_r+0x22>
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff ffda 	bl	8004e78 <__sfputc_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d1f3      	bne.n	8004eb0 <__sfputs_r+0xa>
 8004ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ecc <_vfiprintf_r>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	b09d      	sub	sp, #116	; 0x74
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	4698      	mov	r8, r3
 8004ed8:	4606      	mov	r6, r0
 8004eda:	b118      	cbz	r0, 8004ee4 <_vfiprintf_r+0x18>
 8004edc:	6983      	ldr	r3, [r0, #24]
 8004ede:	b90b      	cbnz	r3, 8004ee4 <_vfiprintf_r+0x18>
 8004ee0:	f7ff fea8 	bl	8004c34 <__sinit>
 8004ee4:	4b89      	ldr	r3, [pc, #548]	; (800510c <_vfiprintf_r+0x240>)
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	d11b      	bne.n	8004f22 <_vfiprintf_r+0x56>
 8004eea:	6875      	ldr	r5, [r6, #4]
 8004eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eee:	07d9      	lsls	r1, r3, #31
 8004ef0:	d405      	bmi.n	8004efe <_vfiprintf_r+0x32>
 8004ef2:	89ab      	ldrh	r3, [r5, #12]
 8004ef4:	059a      	lsls	r2, r3, #22
 8004ef6:	d402      	bmi.n	8004efe <_vfiprintf_r+0x32>
 8004ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004efa:	f7ff ff4b 	bl	8004d94 <__retarget_lock_acquire_recursive>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	d501      	bpl.n	8004f08 <_vfiprintf_r+0x3c>
 8004f04:	692b      	ldr	r3, [r5, #16]
 8004f06:	b9eb      	cbnz	r3, 8004f44 <_vfiprintf_r+0x78>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 fb80 	bl	8005610 <__swsetup_r>
 8004f10:	b1c0      	cbz	r0, 8004f44 <_vfiprintf_r+0x78>
 8004f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f14:	07dc      	lsls	r4, r3, #31
 8004f16:	d50e      	bpl.n	8004f36 <_vfiprintf_r+0x6a>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f1c:	b01d      	add	sp, #116	; 0x74
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <_vfiprintf_r+0x244>)
 8004f24:	429d      	cmp	r5, r3
 8004f26:	d101      	bne.n	8004f2c <_vfiprintf_r+0x60>
 8004f28:	68b5      	ldr	r5, [r6, #8]
 8004f2a:	e7df      	b.n	8004eec <_vfiprintf_r+0x20>
 8004f2c:	4b79      	ldr	r3, [pc, #484]	; (8005114 <_vfiprintf_r+0x248>)
 8004f2e:	429d      	cmp	r5, r3
 8004f30:	bf08      	it	eq
 8004f32:	68f5      	ldreq	r5, [r6, #12]
 8004f34:	e7da      	b.n	8004eec <_vfiprintf_r+0x20>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	0598      	lsls	r0, r3, #22
 8004f3a:	d4ed      	bmi.n	8004f18 <_vfiprintf_r+0x4c>
 8004f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3e:	f7ff ff2a 	bl	8004d96 <__retarget_lock_release_recursive>
 8004f42:	e7e9      	b.n	8004f18 <_vfiprintf_r+0x4c>
 8004f44:	2300      	movs	r3, #0
 8004f46:	9309      	str	r3, [sp, #36]	; 0x24
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f52:	2330      	movs	r3, #48	; 0x30
 8004f54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005118 <_vfiprintf_r+0x24c>
 8004f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f5c:	f04f 0901 	mov.w	r9, #1
 8004f60:	4623      	mov	r3, r4
 8004f62:	469a      	mov	sl, r3
 8004f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f68:	b10a      	cbz	r2, 8004f6e <_vfiprintf_r+0xa2>
 8004f6a:	2a25      	cmp	r2, #37	; 0x25
 8004f6c:	d1f9      	bne.n	8004f62 <_vfiprintf_r+0x96>
 8004f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f72:	d00b      	beq.n	8004f8c <_vfiprintf_r+0xc0>
 8004f74:	465b      	mov	r3, fp
 8004f76:	4622      	mov	r2, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff ff93 	bl	8004ea6 <__sfputs_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	f000 80aa 	beq.w	80050da <_vfiprintf_r+0x20e>
 8004f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f88:	445a      	add	r2, fp
 8004f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a2 	beq.w	80050da <_vfiprintf_r+0x20e>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa0:	f10a 0a01 	add.w	sl, sl, #1
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fac:	931a      	str	r3, [sp, #104]	; 0x68
 8004fae:	4654      	mov	r4, sl
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb6:	4858      	ldr	r0, [pc, #352]	; (8005118 <_vfiprintf_r+0x24c>)
 8004fb8:	f7fb f912 	bl	80001e0 <memchr>
 8004fbc:	9a04      	ldr	r2, [sp, #16]
 8004fbe:	b9d8      	cbnz	r0, 8004ff8 <_vfiprintf_r+0x12c>
 8004fc0:	06d1      	lsls	r1, r2, #27
 8004fc2:	bf44      	itt	mi
 8004fc4:	2320      	movmi	r3, #32
 8004fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fca:	0713      	lsls	r3, r2, #28
 8004fcc:	bf44      	itt	mi
 8004fce:	232b      	movmi	r3, #43	; 0x2b
 8004fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fda:	d015      	beq.n	8005008 <_vfiprintf_r+0x13c>
 8004fdc:	9a07      	ldr	r2, [sp, #28]
 8004fde:	4654      	mov	r4, sl
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f04f 0c0a 	mov.w	ip, #10
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fec:	3b30      	subs	r3, #48	; 0x30
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	d94e      	bls.n	8005090 <_vfiprintf_r+0x1c4>
 8004ff2:	b1b0      	cbz	r0, 8005022 <_vfiprintf_r+0x156>
 8004ff4:	9207      	str	r2, [sp, #28]
 8004ff6:	e014      	b.n	8005022 <_vfiprintf_r+0x156>
 8004ff8:	eba0 0308 	sub.w	r3, r0, r8
 8004ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	9304      	str	r3, [sp, #16]
 8005004:	46a2      	mov	sl, r4
 8005006:	e7d2      	b.n	8004fae <_vfiprintf_r+0xe2>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	1d19      	adds	r1, r3, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	9103      	str	r1, [sp, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfbb      	ittet	lt
 8005014:	425b      	neglt	r3, r3
 8005016:	f042 0202 	orrlt.w	r2, r2, #2
 800501a:	9307      	strge	r3, [sp, #28]
 800501c:	9307      	strlt	r3, [sp, #28]
 800501e:	bfb8      	it	lt
 8005020:	9204      	strlt	r2, [sp, #16]
 8005022:	7823      	ldrb	r3, [r4, #0]
 8005024:	2b2e      	cmp	r3, #46	; 0x2e
 8005026:	d10c      	bne.n	8005042 <_vfiprintf_r+0x176>
 8005028:	7863      	ldrb	r3, [r4, #1]
 800502a:	2b2a      	cmp	r3, #42	; 0x2a
 800502c:	d135      	bne.n	800509a <_vfiprintf_r+0x1ce>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	9203      	str	r2, [sp, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800503e:	3402      	adds	r4, #2
 8005040:	9305      	str	r3, [sp, #20]
 8005042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005128 <_vfiprintf_r+0x25c>
 8005046:	7821      	ldrb	r1, [r4, #0]
 8005048:	2203      	movs	r2, #3
 800504a:	4650      	mov	r0, sl
 800504c:	f7fb f8c8 	bl	80001e0 <memchr>
 8005050:	b140      	cbz	r0, 8005064 <_vfiprintf_r+0x198>
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	eba0 000a 	sub.w	r0, r0, sl
 8005058:	fa03 f000 	lsl.w	r0, r3, r0
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	4303      	orrs	r3, r0
 8005060:	3401      	adds	r4, #1
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005068:	482c      	ldr	r0, [pc, #176]	; (800511c <_vfiprintf_r+0x250>)
 800506a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800506e:	2206      	movs	r2, #6
 8005070:	f7fb f8b6 	bl	80001e0 <memchr>
 8005074:	2800      	cmp	r0, #0
 8005076:	d03f      	beq.n	80050f8 <_vfiprintf_r+0x22c>
 8005078:	4b29      	ldr	r3, [pc, #164]	; (8005120 <_vfiprintf_r+0x254>)
 800507a:	bb1b      	cbnz	r3, 80050c4 <_vfiprintf_r+0x1f8>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	3307      	adds	r3, #7
 8005080:	f023 0307 	bic.w	r3, r3, #7
 8005084:	3308      	adds	r3, #8
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	443b      	add	r3, r7
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	e767      	b.n	8004f60 <_vfiprintf_r+0x94>
 8005090:	fb0c 3202 	mla	r2, ip, r2, r3
 8005094:	460c      	mov	r4, r1
 8005096:	2001      	movs	r0, #1
 8005098:	e7a5      	b.n	8004fe6 <_vfiprintf_r+0x11a>
 800509a:	2300      	movs	r3, #0
 800509c:	3401      	adds	r4, #1
 800509e:	9305      	str	r3, [sp, #20]
 80050a0:	4619      	mov	r1, r3
 80050a2:	f04f 0c0a 	mov.w	ip, #10
 80050a6:	4620      	mov	r0, r4
 80050a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ac:	3a30      	subs	r2, #48	; 0x30
 80050ae:	2a09      	cmp	r2, #9
 80050b0:	d903      	bls.n	80050ba <_vfiprintf_r+0x1ee>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0c5      	beq.n	8005042 <_vfiprintf_r+0x176>
 80050b6:	9105      	str	r1, [sp, #20]
 80050b8:	e7c3      	b.n	8005042 <_vfiprintf_r+0x176>
 80050ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80050be:	4604      	mov	r4, r0
 80050c0:	2301      	movs	r3, #1
 80050c2:	e7f0      	b.n	80050a6 <_vfiprintf_r+0x1da>
 80050c4:	ab03      	add	r3, sp, #12
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4b16      	ldr	r3, [pc, #88]	; (8005124 <_vfiprintf_r+0x258>)
 80050cc:	a904      	add	r1, sp, #16
 80050ce:	4630      	mov	r0, r6
 80050d0:	f3af 8000 	nop.w
 80050d4:	4607      	mov	r7, r0
 80050d6:	1c78      	adds	r0, r7, #1
 80050d8:	d1d6      	bne.n	8005088 <_vfiprintf_r+0x1bc>
 80050da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050dc:	07d9      	lsls	r1, r3, #31
 80050de:	d405      	bmi.n	80050ec <_vfiprintf_r+0x220>
 80050e0:	89ab      	ldrh	r3, [r5, #12]
 80050e2:	059a      	lsls	r2, r3, #22
 80050e4:	d402      	bmi.n	80050ec <_vfiprintf_r+0x220>
 80050e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e8:	f7ff fe55 	bl	8004d96 <__retarget_lock_release_recursive>
 80050ec:	89ab      	ldrh	r3, [r5, #12]
 80050ee:	065b      	lsls	r3, r3, #25
 80050f0:	f53f af12 	bmi.w	8004f18 <_vfiprintf_r+0x4c>
 80050f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f6:	e711      	b.n	8004f1c <_vfiprintf_r+0x50>
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	462a      	mov	r2, r5
 80050fe:	4b09      	ldr	r3, [pc, #36]	; (8005124 <_vfiprintf_r+0x258>)
 8005100:	a904      	add	r1, sp, #16
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f880 	bl	8005208 <_printf_i>
 8005108:	e7e4      	b.n	80050d4 <_vfiprintf_r+0x208>
 800510a:	bf00      	nop
 800510c:	08005ad8 	.word	0x08005ad8
 8005110:	08005af8 	.word	0x08005af8
 8005114:	08005ab8 	.word	0x08005ab8
 8005118:	08005b18 	.word	0x08005b18
 800511c:	08005b22 	.word	0x08005b22
 8005120:	00000000 	.word	0x00000000
 8005124:	08004ea7 	.word	0x08004ea7
 8005128:	08005b1e 	.word	0x08005b1e

0800512c <_printf_common>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	4616      	mov	r6, r2
 8005132:	4699      	mov	r9, r3
 8005134:	688a      	ldr	r2, [r1, #8]
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800513c:	4293      	cmp	r3, r2
 800513e:	bfb8      	it	lt
 8005140:	4613      	movlt	r3, r2
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005148:	4607      	mov	r7, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b10a      	cbz	r2, 8005152 <_printf_common+0x26>
 800514e:	3301      	adds	r3, #1
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0699      	lsls	r1, r3, #26
 8005156:	bf42      	ittt	mi
 8005158:	6833      	ldrmi	r3, [r6, #0]
 800515a:	3302      	addmi	r3, #2
 800515c:	6033      	strmi	r3, [r6, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d106      	bne.n	8005174 <_printf_common+0x48>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	6832      	ldr	r2, [r6, #0]
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	42ab      	cmp	r3, r5
 8005172:	dc26      	bgt.n	80051c2 <_printf_common+0x96>
 8005174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005178:	1e13      	subs	r3, r2, #0
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	bf18      	it	ne
 800517e:	2301      	movne	r3, #1
 8005180:	0692      	lsls	r2, r2, #26
 8005182:	d42b      	bmi.n	80051dc <_printf_common+0xb0>
 8005184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d01e      	beq.n	80051d0 <_printf_common+0xa4>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	68e5      	ldr	r5, [r4, #12]
 8005196:	6832      	ldr	r2, [r6, #0]
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b04      	cmp	r3, #4
 800519e:	bf08      	it	eq
 80051a0:	1aad      	subeq	r5, r5, r2
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	2600      	movs	r6, #0
 80051b8:	341a      	adds	r4, #26
 80051ba:	42b5      	cmp	r5, r6
 80051bc:	d11a      	bne.n	80051f4 <_printf_common+0xc8>
 80051be:	2000      	movs	r0, #0
 80051c0:	e008      	b.n	80051d4 <_printf_common+0xa8>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4649      	mov	r1, r9
 80051c8:	4638      	mov	r0, r7
 80051ca:	47c0      	blx	r8
 80051cc:	3001      	adds	r0, #1
 80051ce:	d103      	bne.n	80051d8 <_printf_common+0xac>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	3501      	adds	r5, #1
 80051da:	e7c6      	b.n	800516a <_printf_common+0x3e>
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	2030      	movs	r0, #48	; 0x30
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e6:	4422      	add	r2, r4
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f0:	3302      	adds	r3, #2
 80051f2:	e7c7      	b.n	8005184 <_printf_common+0x58>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4622      	mov	r2, r4
 80051f8:	4649      	mov	r1, r9
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d0e6      	beq.n	80051d0 <_printf_common+0xa4>
 8005202:	3601      	adds	r6, #1
 8005204:	e7d9      	b.n	80051ba <_printf_common+0x8e>
	...

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	460c      	mov	r4, r1
 800520e:	4691      	mov	r9, r2
 8005210:	7e27      	ldrb	r7, [r4, #24]
 8005212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005214:	2f78      	cmp	r7, #120	; 0x78
 8005216:	4680      	mov	r8, r0
 8005218:	469a      	mov	sl, r3
 800521a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	; 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d8 	beq.w	80053da <_printf_i+0x1d2>
 800522a:	2f58      	cmp	r7, #88	; 0x58
 800522c:	f000 80a3 	beq.w	8005376 <_printf_i+0x16e>
 8005230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a001      	add	r0, pc, #4	; (adr r0, 8005248 <_printf_i+0x40>)
 8005244:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053c1 	.word	0x080053c1
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080053a3 	.word	0x080053a3
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053e3 	.word	0x080053e3
 800528c:	08005231 	.word	0x08005231
 8005290:	080052e5 	.word	0x080052e5
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	080053ab 	.word	0x080053ab
 80052a0:	680b      	ldr	r3, [r1, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	600a      	str	r2, [r1, #0]
 80052a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a3      	b.n	80053fc <_printf_i+0x1f4>
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	6808      	ldr	r0, [r1, #0]
 80052b8:	062e      	lsls	r6, r5, #24
 80052ba:	f100 0304 	add.w	r3, r0, #4
 80052be:	d50a      	bpl.n	80052d6 <_printf_i+0xce>
 80052c0:	6805      	ldr	r5, [r0, #0]
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xc8>
 80052c8:	232d      	movs	r3, #45	; 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	485e      	ldr	r0, [pc, #376]	; (800544c <_printf_i+0x244>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e019      	b.n	800530a <_printf_i+0x102>
 80052d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052da:	6805      	ldr	r5, [r0, #0]
 80052dc:	600b      	str	r3, [r1, #0]
 80052de:	bf18      	it	ne
 80052e0:	b22d      	sxthne	r5, r5
 80052e2:	e7ef      	b.n	80052c4 <_printf_i+0xbc>
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	6825      	ldr	r5, [r4, #0]
 80052e8:	1d18      	adds	r0, r3, #4
 80052ea:	6008      	str	r0, [r1, #0]
 80052ec:	0628      	lsls	r0, r5, #24
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0xec>
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0xf2>
 80052f4:	0669      	lsls	r1, r5, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0xe8>
 80052f8:	881d      	ldrh	r5, [r3, #0]
 80052fa:	4854      	ldr	r0, [pc, #336]	; (800544c <_printf_i+0x244>)
 80052fc:	2f6f      	cmp	r7, #111	; 0x6f
 80052fe:	bf0c      	ite	eq
 8005300:	2308      	moveq	r3, #8
 8005302:	230a      	movne	r3, #10
 8005304:	2100      	movs	r1, #0
 8005306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800530a:	6866      	ldr	r6, [r4, #4]
 800530c:	60a6      	str	r6, [r4, #8]
 800530e:	2e00      	cmp	r6, #0
 8005310:	bfa2      	ittt	ge
 8005312:	6821      	ldrge	r1, [r4, #0]
 8005314:	f021 0104 	bicge.w	r1, r1, #4
 8005318:	6021      	strge	r1, [r4, #0]
 800531a:	b90d      	cbnz	r5, 8005320 <_printf_i+0x118>
 800531c:	2e00      	cmp	r6, #0
 800531e:	d04d      	beq.n	80053bc <_printf_i+0x1b4>
 8005320:	4616      	mov	r6, r2
 8005322:	fbb5 f1f3 	udiv	r1, r5, r3
 8005326:	fb03 5711 	mls	r7, r3, r1, r5
 800532a:	5dc7      	ldrb	r7, [r0, r7]
 800532c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005330:	462f      	mov	r7, r5
 8005332:	42bb      	cmp	r3, r7
 8005334:	460d      	mov	r5, r1
 8005336:	d9f4      	bls.n	8005322 <_printf_i+0x11a>
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10b      	bne.n	8005354 <_printf_i+0x14c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07df      	lsls	r7, r3, #31
 8005340:	d508      	bpl.n	8005354 <_printf_i+0x14c>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	4299      	cmp	r1, r3
 8005348:	bfde      	ittt	le
 800534a:	2330      	movle	r3, #48	; 0x30
 800534c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005350:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005354:	1b92      	subs	r2, r2, r6
 8005356:	6122      	str	r2, [r4, #16]
 8005358:	f8cd a000 	str.w	sl, [sp]
 800535c:	464b      	mov	r3, r9
 800535e:	aa03      	add	r2, sp, #12
 8005360:	4621      	mov	r1, r4
 8005362:	4640      	mov	r0, r8
 8005364:	f7ff fee2 	bl	800512c <_printf_common>
 8005368:	3001      	adds	r0, #1
 800536a:	d14c      	bne.n	8005406 <_printf_i+0x1fe>
 800536c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005370:	b004      	add	sp, #16
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	4835      	ldr	r0, [pc, #212]	; (800544c <_printf_i+0x244>)
 8005378:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	680e      	ldr	r6, [r1, #0]
 8005380:	061f      	lsls	r7, r3, #24
 8005382:	f856 5b04 	ldr.w	r5, [r6], #4
 8005386:	600e      	str	r6, [r1, #0]
 8005388:	d514      	bpl.n	80053b4 <_printf_i+0x1ac>
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b91d      	cbnz	r5, 800539e <_printf_i+0x196>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f023 0320 	bic.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	2310      	movs	r3, #16
 80053a0:	e7b0      	b.n	8005304 <_printf_i+0xfc>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f043 0320 	orr.w	r3, r3, #32
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2378      	movs	r3, #120	; 0x78
 80053ac:	4828      	ldr	r0, [pc, #160]	; (8005450 <_printf_i+0x248>)
 80053ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b2:	e7e3      	b.n	800537c <_printf_i+0x174>
 80053b4:	065e      	lsls	r6, r3, #25
 80053b6:	bf48      	it	mi
 80053b8:	b2ad      	uxthmi	r5, r5
 80053ba:	e7e6      	b.n	800538a <_printf_i+0x182>
 80053bc:	4616      	mov	r6, r2
 80053be:	e7bb      	b.n	8005338 <_printf_i+0x130>
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	6826      	ldr	r6, [r4, #0]
 80053c4:	6960      	ldr	r0, [r4, #20]
 80053c6:	1d1d      	adds	r5, r3, #4
 80053c8:	600d      	str	r5, [r1, #0]
 80053ca:	0635      	lsls	r5, r6, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0x1cc>
 80053d0:	6018      	str	r0, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0x1d2>
 80053d4:	0671      	lsls	r1, r6, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0x1c8>
 80053d8:	8018      	strh	r0, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	4616      	mov	r6, r2
 80053e0:	e7ba      	b.n	8005358 <_printf_i+0x150>
 80053e2:	680b      	ldr	r3, [r1, #0]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	600a      	str	r2, [r1, #0]
 80053e8:	681e      	ldr	r6, [r3, #0]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7fa fef6 	bl	80001e0 <memchr>
 80053f4:	b108      	cbz	r0, 80053fa <_printf_i+0x1f2>
 80053f6:	1b80      	subs	r0, r0, r6
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	e7a8      	b.n	8005358 <_printf_i+0x150>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d0ab      	beq.n	800536c <_printf_i+0x164>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	d413      	bmi.n	8005442 <_printf_i+0x23a>
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	4298      	cmp	r0, r3
 8005420:	bfb8      	it	lt
 8005422:	4618      	movlt	r0, r3
 8005424:	e7a4      	b.n	8005370 <_printf_i+0x168>
 8005426:	2301      	movs	r3, #1
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d09b      	beq.n	800536c <_printf_i+0x164>
 8005434:	3501      	adds	r5, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1a5b      	subs	r3, r3, r1
 800543c:	42ab      	cmp	r3, r5
 800543e:	dcf2      	bgt.n	8005426 <_printf_i+0x21e>
 8005440:	e7eb      	b.n	800541a <_printf_i+0x212>
 8005442:	2500      	movs	r5, #0
 8005444:	f104 0619 	add.w	r6, r4, #25
 8005448:	e7f5      	b.n	8005436 <_printf_i+0x22e>
 800544a:	bf00      	nop
 800544c:	08005b29 	.word	0x08005b29
 8005450:	08005b3a 	.word	0x08005b3a

08005454 <_putc_r>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	460d      	mov	r5, r1
 8005458:	4614      	mov	r4, r2
 800545a:	4606      	mov	r6, r0
 800545c:	b118      	cbz	r0, 8005466 <_putc_r+0x12>
 800545e:	6983      	ldr	r3, [r0, #24]
 8005460:	b90b      	cbnz	r3, 8005466 <_putc_r+0x12>
 8005462:	f7ff fbe7 	bl	8004c34 <__sinit>
 8005466:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <_putc_r+0x84>)
 8005468:	429c      	cmp	r4, r3
 800546a:	d124      	bne.n	80054b6 <_putc_r+0x62>
 800546c:	6874      	ldr	r4, [r6, #4]
 800546e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005470:	07d8      	lsls	r0, r3, #31
 8005472:	d405      	bmi.n	8005480 <_putc_r+0x2c>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	0599      	lsls	r1, r3, #22
 8005478:	d402      	bmi.n	8005480 <_putc_r+0x2c>
 800547a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547c:	f7ff fc8a 	bl	8004d94 <__retarget_lock_acquire_recursive>
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	3b01      	subs	r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	da05      	bge.n	8005496 <_putc_r+0x42>
 800548a:	69a2      	ldr	r2, [r4, #24]
 800548c:	4293      	cmp	r3, r2
 800548e:	db1c      	blt.n	80054ca <_putc_r+0x76>
 8005490:	b2eb      	uxtb	r3, r5
 8005492:	2b0a      	cmp	r3, #10
 8005494:	d019      	beq.n	80054ca <_putc_r+0x76>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	6022      	str	r2, [r4, #0]
 800549c:	701d      	strb	r5, [r3, #0]
 800549e:	b2ed      	uxtb	r5, r5
 80054a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a2:	07da      	lsls	r2, r3, #31
 80054a4:	d405      	bmi.n	80054b2 <_putc_r+0x5e>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	059b      	lsls	r3, r3, #22
 80054aa:	d402      	bmi.n	80054b2 <_putc_r+0x5e>
 80054ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ae:	f7ff fc72 	bl	8004d96 <__retarget_lock_release_recursive>
 80054b2:	4628      	mov	r0, r5
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	4b09      	ldr	r3, [pc, #36]	; (80054dc <_putc_r+0x88>)
 80054b8:	429c      	cmp	r4, r3
 80054ba:	d101      	bne.n	80054c0 <_putc_r+0x6c>
 80054bc:	68b4      	ldr	r4, [r6, #8]
 80054be:	e7d6      	b.n	800546e <_putc_r+0x1a>
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <_putc_r+0x8c>)
 80054c2:	429c      	cmp	r4, r3
 80054c4:	bf08      	it	eq
 80054c6:	68f4      	ldreq	r4, [r6, #12]
 80054c8:	e7d1      	b.n	800546e <_putc_r+0x1a>
 80054ca:	4629      	mov	r1, r5
 80054cc:	4622      	mov	r2, r4
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f84c 	bl	800556c <__swbuf_r>
 80054d4:	4605      	mov	r5, r0
 80054d6:	e7e3      	b.n	80054a0 <_putc_r+0x4c>
 80054d8:	08005ad8 	.word	0x08005ad8
 80054dc:	08005af8 	.word	0x08005af8
 80054e0:	08005ab8 	.word	0x08005ab8

080054e4 <__sread>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	f000 f94a 	bl	8005784 <_read_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	bfab      	itete	ge
 80054f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054f6:	89a3      	ldrhlt	r3, [r4, #12]
 80054f8:	181b      	addge	r3, r3, r0
 80054fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054fe:	bfac      	ite	ge
 8005500:	6563      	strge	r3, [r4, #84]	; 0x54
 8005502:	81a3      	strhlt	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__swrite>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	461f      	mov	r7, r3
 800550c:	898b      	ldrh	r3, [r1, #12]
 800550e:	05db      	lsls	r3, r3, #23
 8005510:	4605      	mov	r5, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4616      	mov	r6, r2
 8005516:	d505      	bpl.n	8005524 <__swrite+0x1e>
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	2302      	movs	r3, #2
 800551e:	2200      	movs	r2, #0
 8005520:	f000 f91e 	bl	8005760 <_lseek_r>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	4632      	mov	r2, r6
 8005532:	463b      	mov	r3, r7
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	f7fb bc7b 	b.w	8000e34 <_write_r>

0800553e <__sseek>:
 800553e:	b510      	push	{r4, lr}
 8005540:	460c      	mov	r4, r1
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 f90b 	bl	8005760 <_lseek_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	bf15      	itete	ne
 8005550:	6560      	strne	r0, [r4, #84]	; 0x54
 8005552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strheq	r3, [r4, #12]
 800555c:	bf18      	it	ne
 800555e:	81a3      	strhne	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__sclose>:
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 b8c9 	b.w	80056fc <_close_r>
	...

0800556c <__swbuf_r>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	460e      	mov	r6, r1
 8005570:	4614      	mov	r4, r2
 8005572:	4605      	mov	r5, r0
 8005574:	b118      	cbz	r0, 800557e <__swbuf_r+0x12>
 8005576:	6983      	ldr	r3, [r0, #24]
 8005578:	b90b      	cbnz	r3, 800557e <__swbuf_r+0x12>
 800557a:	f7ff fb5b 	bl	8004c34 <__sinit>
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <__swbuf_r+0x98>)
 8005580:	429c      	cmp	r4, r3
 8005582:	d12b      	bne.n	80055dc <__swbuf_r+0x70>
 8005584:	686c      	ldr	r4, [r5, #4]
 8005586:	69a3      	ldr	r3, [r4, #24]
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	071a      	lsls	r2, r3, #28
 800558e:	d52f      	bpl.n	80055f0 <__swbuf_r+0x84>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	b36b      	cbz	r3, 80055f0 <__swbuf_r+0x84>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1ac0      	subs	r0, r0, r3
 800559a:	6963      	ldr	r3, [r4, #20]
 800559c:	b2f6      	uxtb	r6, r6
 800559e:	4283      	cmp	r3, r0
 80055a0:	4637      	mov	r7, r6
 80055a2:	dc04      	bgt.n	80055ae <__swbuf_r+0x42>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff fab0 	bl	8004b0c <_fflush_r>
 80055ac:	bb30      	cbnz	r0, 80055fc <__swbuf_r+0x90>
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	60a3      	str	r3, [r4, #8]
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	701e      	strb	r6, [r3, #0]
 80055bc:	6963      	ldr	r3, [r4, #20]
 80055be:	3001      	adds	r0, #1
 80055c0:	4283      	cmp	r3, r0
 80055c2:	d004      	beq.n	80055ce <__swbuf_r+0x62>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	07db      	lsls	r3, r3, #31
 80055c8:	d506      	bpl.n	80055d8 <__swbuf_r+0x6c>
 80055ca:	2e0a      	cmp	r6, #10
 80055cc:	d104      	bne.n	80055d8 <__swbuf_r+0x6c>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	f7ff fa9b 	bl	8004b0c <_fflush_r>
 80055d6:	b988      	cbnz	r0, 80055fc <__swbuf_r+0x90>
 80055d8:	4638      	mov	r0, r7
 80055da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <__swbuf_r+0x9c>)
 80055de:	429c      	cmp	r4, r3
 80055e0:	d101      	bne.n	80055e6 <__swbuf_r+0x7a>
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	e7cf      	b.n	8005586 <__swbuf_r+0x1a>
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <__swbuf_r+0xa0>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	bf08      	it	eq
 80055ec:	68ec      	ldreq	r4, [r5, #12]
 80055ee:	e7ca      	b.n	8005586 <__swbuf_r+0x1a>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f80c 	bl	8005610 <__swsetup_r>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d0cb      	beq.n	8005594 <__swbuf_r+0x28>
 80055fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005600:	e7ea      	b.n	80055d8 <__swbuf_r+0x6c>
 8005602:	bf00      	nop
 8005604:	08005ad8 	.word	0x08005ad8
 8005608:	08005af8 	.word	0x08005af8
 800560c:	08005ab8 	.word	0x08005ab8

08005610 <__swsetup_r>:
 8005610:	4b32      	ldr	r3, [pc, #200]	; (80056dc <__swsetup_r+0xcc>)
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	681d      	ldr	r5, [r3, #0]
 8005616:	4606      	mov	r6, r0
 8005618:	460c      	mov	r4, r1
 800561a:	b125      	cbz	r5, 8005626 <__swsetup_r+0x16>
 800561c:	69ab      	ldr	r3, [r5, #24]
 800561e:	b913      	cbnz	r3, 8005626 <__swsetup_r+0x16>
 8005620:	4628      	mov	r0, r5
 8005622:	f7ff fb07 	bl	8004c34 <__sinit>
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <__swsetup_r+0xd0>)
 8005628:	429c      	cmp	r4, r3
 800562a:	d10f      	bne.n	800564c <__swsetup_r+0x3c>
 800562c:	686c      	ldr	r4, [r5, #4]
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005634:	0719      	lsls	r1, r3, #28
 8005636:	d42c      	bmi.n	8005692 <__swsetup_r+0x82>
 8005638:	06dd      	lsls	r5, r3, #27
 800563a:	d411      	bmi.n	8005660 <__swsetup_r+0x50>
 800563c:	2309      	movs	r3, #9
 800563e:	6033      	str	r3, [r6, #0]
 8005640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800564a:	e03e      	b.n	80056ca <__swsetup_r+0xba>
 800564c:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <__swsetup_r+0xd4>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d101      	bne.n	8005656 <__swsetup_r+0x46>
 8005652:	68ac      	ldr	r4, [r5, #8]
 8005654:	e7eb      	b.n	800562e <__swsetup_r+0x1e>
 8005656:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <__swsetup_r+0xd8>)
 8005658:	429c      	cmp	r4, r3
 800565a:	bf08      	it	eq
 800565c:	68ec      	ldreq	r4, [r5, #12]
 800565e:	e7e6      	b.n	800562e <__swsetup_r+0x1e>
 8005660:	0758      	lsls	r0, r3, #29
 8005662:	d512      	bpl.n	800568a <__swsetup_r+0x7a>
 8005664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005666:	b141      	cbz	r1, 800567a <__swsetup_r+0x6a>
 8005668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800566c:	4299      	cmp	r1, r3
 800566e:	d002      	beq.n	8005676 <__swsetup_r+0x66>
 8005670:	4630      	mov	r0, r6
 8005672:	f7fe ff83 	bl	800457c <_free_r>
 8005676:	2300      	movs	r3, #0
 8005678:	6363      	str	r3, [r4, #52]	; 0x34
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	2300      	movs	r3, #0
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f043 0308 	orr.w	r3, r3, #8
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	b94b      	cbnz	r3, 80056aa <__swsetup_r+0x9a>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800569c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a0:	d003      	beq.n	80056aa <__swsetup_r+0x9a>
 80056a2:	4621      	mov	r1, r4
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff fb9b 	bl	8004de0 <__smakebuf_r>
 80056aa:	89a0      	ldrh	r0, [r4, #12]
 80056ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056b0:	f010 0301 	ands.w	r3, r0, #1
 80056b4:	d00a      	beq.n	80056cc <__swsetup_r+0xbc>
 80056b6:	2300      	movs	r3, #0
 80056b8:	60a3      	str	r3, [r4, #8]
 80056ba:	6963      	ldr	r3, [r4, #20]
 80056bc:	425b      	negs	r3, r3
 80056be:	61a3      	str	r3, [r4, #24]
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	b943      	cbnz	r3, 80056d6 <__swsetup_r+0xc6>
 80056c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056c8:	d1ba      	bne.n	8005640 <__swsetup_r+0x30>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	0781      	lsls	r1, r0, #30
 80056ce:	bf58      	it	pl
 80056d0:	6963      	ldrpl	r3, [r4, #20]
 80056d2:	60a3      	str	r3, [r4, #8]
 80056d4:	e7f4      	b.n	80056c0 <__swsetup_r+0xb0>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e7f7      	b.n	80056ca <__swsetup_r+0xba>
 80056da:	bf00      	nop
 80056dc:	2000002c 	.word	0x2000002c
 80056e0:	08005ad8 	.word	0x08005ad8
 80056e4:	08005af8 	.word	0x08005af8
 80056e8:	08005ab8 	.word	0x08005ab8

080056ec <abort>:
 80056ec:	b508      	push	{r3, lr}
 80056ee:	2006      	movs	r0, #6
 80056f0:	f000 f882 	bl	80057f8 <raise>
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fe fdb9 	bl	800426c <_exit>
	...

080056fc <_close_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d06      	ldr	r5, [pc, #24]	; (8005718 <_close_r+0x1c>)
 8005700:	2300      	movs	r3, #0
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f7fe fdd7 	bl	80042ba <_close>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_close_r+0x1a>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_close_r+0x1a>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	200001d8 	.word	0x200001d8

0800571c <_fstat_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d07      	ldr	r5, [pc, #28]	; (800573c <_fstat_r+0x20>)
 8005720:	2300      	movs	r3, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	4611      	mov	r1, r2
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	f7fe fdd2 	bl	80042d2 <_fstat>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d102      	bne.n	8005738 <_fstat_r+0x1c>
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	b103      	cbz	r3, 8005738 <_fstat_r+0x1c>
 8005736:	6023      	str	r3, [r4, #0]
 8005738:	bd38      	pop	{r3, r4, r5, pc}
 800573a:	bf00      	nop
 800573c:	200001d8 	.word	0x200001d8

08005740 <_isatty_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4d06      	ldr	r5, [pc, #24]	; (800575c <_isatty_r+0x1c>)
 8005744:	2300      	movs	r3, #0
 8005746:	4604      	mov	r4, r0
 8005748:	4608      	mov	r0, r1
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	f7fe fdd1 	bl	80042f2 <_isatty>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_isatty_r+0x1a>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b103      	cbz	r3, 800575a <_isatty_r+0x1a>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	200001d8 	.word	0x200001d8

08005760 <_lseek_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	; (8005780 <_lseek_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fe fdca 	bl	8004308 <_lseek>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_lseek_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_lseek_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200001d8 	.word	0x200001d8

08005784 <_read_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d07      	ldr	r5, [pc, #28]	; (80057a4 <_read_r+0x20>)
 8005788:	4604      	mov	r4, r0
 800578a:	4608      	mov	r0, r1
 800578c:	4611      	mov	r1, r2
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f7fe fd74 	bl	8004280 <_read>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_read_r+0x1e>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_read_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	200001d8 	.word	0x200001d8

080057a8 <_raise_r>:
 80057a8:	291f      	cmp	r1, #31
 80057aa:	b538      	push	{r3, r4, r5, lr}
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	d904      	bls.n	80057bc <_raise_r+0x14>
 80057b2:	2316      	movs	r3, #22
 80057b4:	6003      	str	r3, [r0, #0]
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057be:	b112      	cbz	r2, 80057c6 <_raise_r+0x1e>
 80057c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057c4:	b94b      	cbnz	r3, 80057da <_raise_r+0x32>
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f830 	bl	800582c <_getpid_r>
 80057cc:	462a      	mov	r2, r5
 80057ce:	4601      	mov	r1, r0
 80057d0:	4620      	mov	r0, r4
 80057d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057d6:	f000 b817 	b.w	8005808 <_kill_r>
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d00a      	beq.n	80057f4 <_raise_r+0x4c>
 80057de:	1c59      	adds	r1, r3, #1
 80057e0:	d103      	bne.n	80057ea <_raise_r+0x42>
 80057e2:	2316      	movs	r3, #22
 80057e4:	6003      	str	r3, [r0, #0]
 80057e6:	2001      	movs	r0, #1
 80057e8:	e7e7      	b.n	80057ba <_raise_r+0x12>
 80057ea:	2400      	movs	r4, #0
 80057ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057f0:	4628      	mov	r0, r5
 80057f2:	4798      	blx	r3
 80057f4:	2000      	movs	r0, #0
 80057f6:	e7e0      	b.n	80057ba <_raise_r+0x12>

080057f8 <raise>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <raise+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f7ff bfd3 	b.w	80057a8 <_raise_r>
 8005802:	bf00      	nop
 8005804:	2000002c 	.word	0x2000002c

08005808 <_kill_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d07      	ldr	r5, [pc, #28]	; (8005828 <_kill_r+0x20>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	f7fe fd19 	bl	800424c <_kill>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	d102      	bne.n	8005824 <_kill_r+0x1c>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	b103      	cbz	r3, 8005824 <_kill_r+0x1c>
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	bd38      	pop	{r3, r4, r5, pc}
 8005826:	bf00      	nop
 8005828:	200001d8 	.word	0x200001d8

0800582c <_getpid_r>:
 800582c:	f7fe bd06 	b.w	800423c <_getpid>

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
