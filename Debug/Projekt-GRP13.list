
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003e80  08003e80  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e80  08003e80  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08003f18  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003f18  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d45b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bb  00000000  00000000  0002d51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  0002fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c0  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ff7  00000000  00000000  00034dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6f8  00000000  00000000  0003edb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000994af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  00099504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bbc 	.word	0x08003bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003bbc 	.word	0x08003bbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <uart_get_char+0x48>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d011      	beq.n	8000890 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <uart_get_char+0x4c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	b2d1      	uxtb	r1, r2
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <uart_get_char+0x4c>)
 8000878:	7011      	strb	r1, [r2, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <uart_get_char+0x50>)
 800087e:	5c9b      	ldrb	r3, [r3, r2]
 8000880:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <uart_get_char+0x48>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <uart_get_char+0x48>)
 800088e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200001ae 	.word	0x200001ae
 80008a4:	200001ad 	.word	0x200001ad
 80008a8:	200000ac 	.word	0x200000ac

080008ac <uart_put_char>:

void uart_put_char(uint8_t c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <uart_put_char+0x30>)
 80008be:	f7ff fef3 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008c2:	bf00      	nop
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <uart_put_char+0x30>)
 80008c8:	f7ff ff42 	bl	8000750 <USART_GetFlagStatus>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f8      	beq.n	80008c4 <uart_put_char+0x18>
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400

080008e0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e012      	b.n	800091a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b0a      	cmp	r3, #10
 80008fe:	d102      	bne.n	8000906 <_write_r+0x26>
            uart_put_char('\r');
 8000900:	200d      	movs	r0, #13
 8000902:	f7ff ffd3 	bl	80008ac <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffcc 	bl	80008ac <uart_put_char>
    for (n = 0; n < len; n++) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	dbe8      	blt.n	80008f4 <_write_r+0x14>
    }

    return len;
 8000922:	683b      	ldr	r3, [r7, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000930:	4915      	ldr	r1, [pc, #84]	; (8000988 <USART2_IRQHandler+0x5c>)
 8000932:	4816      	ldr	r0, [pc, #88]	; (800098c <USART2_IRQHandler+0x60>)
 8000934:	f7ff ff25 	bl	8000782 <USART_GetITStatus>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d021      	beq.n	8000982 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <USART2_IRQHandler+0x60>)
 8000940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000942:	b299      	uxth	r1, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <USART2_IRQHandler+0x64>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d0      	uxtb	r0, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <USART2_IRQHandler+0x64>)
 8000950:	7010      	strb	r0, [r2, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <USART2_IRQHandler+0x68>)
 8000958:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <USART2_IRQHandler+0x6c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d107      	bne.n	8000974 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <USART2_IRQHandler+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <USART2_IRQHandler+0x70>)
 8000970:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000972:	e006      	b.n	8000982 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	00050105 	.word	0x00050105
 800098c:	40004400 	.word	0x40004400
 8000990:	200001ac 	.word	0x200001ac
 8000994:	200000ac 	.word	0x200000ac
 8000998:	200001ae 	.word	0x200001ae
 800099c:	200001ad 	.word	0x200001ad

080009a0 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009a8:	4b86      	ldr	r3, [pc, #536]	; (8000bc4 <uart_init+0x224>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f8cb 	bl	8002b4c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009b6:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <uart_init+0x224>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 f8c4 	bl	8002b4c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009c4:	4b80      	ldr	r3, [pc, #512]	; (8000bc8 <uart_init+0x228>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a7f      	ldr	r2, [pc, #508]	; (8000bc8 <uart_init+0x228>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009d0:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <uart_init+0x228>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a7c      	ldr	r2, [pc, #496]	; (8000bc8 <uart_init+0x228>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80009ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a0a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a16:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a1a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a36:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a3a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a48:	f023 030c 	bic.w	r3, r3, #12
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	8892      	ldrh	r2, [r2, #4]
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a7c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a98:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a9c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <uart_init+0x22c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <uart_init+0x22c>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <uart_init+0x22c>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <uart_init+0x22c>)
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ab6:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <uart_init+0x22c>)
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <uart_init+0x22c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <uart_init+0x22c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <uart_init+0x22c>)
 8000ac4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ac8:	f023 030c 	bic.w	r3, r3, #12
 8000acc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <uart_init+0x22c>)
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <uart_init+0x22c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <uart_init+0x22c>)
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <uart_init+0x22c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <uart_init+0x22c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <uart_init+0x22c>)
 8000ae4:	f043 030c 	orr.w	r3, r3, #12
 8000ae8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <uart_init+0x22c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4a37      	ldr	r2, [pc, #220]	; (8000bcc <uart_init+0x22c>)
 8000af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000af4:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <uart_init+0x22c>)
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <uart_init+0x22c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
 8000b06:	2300      	movs	r3, #0
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fbb6 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <uart_init+0x22c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d010      	beq.n	8000b46 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	005a      	lsls	r2, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	fb01 f202 	mul.w	r2, r1, r2
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b44:	e00d      	b.n	8000b62 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	fb01 f202 	mul.w	r2, r1, r2
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <uart_init+0x1d2>
        divider++;
 8000b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <uart_init+0x22c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b8a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b8e:	4013      	ands	r3, r2
 8000b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b92:	4313      	orrs	r3, r2
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <uart_init+0x22c>)
 8000b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b9a:	b292      	uxth	r2, r2
 8000b9c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <uart_init+0x22c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <uart_init+0x22c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000baa:	2201      	movs	r2, #1
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <uart_init+0x230>)
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <uart_init+0x22c>)
 8000bb0:	f7ff fd8c 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f7ff fe35 	bl	8000824 <NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	00050105 	.word	0x00050105

08000bd4 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000bde:	2316      	movs	r3, #22
 8000be0:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d904      	bls.n	8000bf2 <fgcolor+0x1e>
	  type = 1;                // bold text
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	331e      	adds	r3, #30
 8000bf8:	211b      	movs	r1, #27
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <fgcolor+0x34>)
 8000bfc:	f001 fe84 	bl	8002908 <iprintf>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08003bd4 	.word	0x08003bd4

08000c0c <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8000c10:	211b      	movs	r1, #27
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <clrscr+0x18>)
 8000c14:	f001 fe78 	bl	8002908 <iprintf>
    printf("%c[J", ESC);
 8000c18:	211b      	movs	r1, #27
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <clrscr+0x1c>)
 8000c1c:	f001 fe74 	bl	8002908 <iprintf>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08003c00 	.word	0x08003c00
 8000c28:	08003c08 	.word	0x08003c08

08000c2c <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	211b      	movs	r1, #27
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <gotoxy+0x20>)
 8000c3e:	f001 fe63 	bl	8002908 <iprintf>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08003c18 	.word	0x08003c18

08000c50 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d15e      	bne.n	8000d22 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	e019      	b.n	8000c9e <drawBox+0x4e>
			 gotoxy(x1,y);
 8000c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff ffdd 	bl	8000c2c <gotoxy>
			 if (y==y1){
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d103      	bne.n	8000c82 <drawBox+0x32>
				printf("%c", 201);
 8000c7a:	20c9      	movs	r0, #201	; 0xc9
 8000c7c:	f001 fe5c 	bl	8002938 <putchar>
 8000c80:	e00a      	b.n	8000c98 <drawBox+0x48>
			 }
			 else if(y==y2){
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d103      	bne.n	8000c92 <drawBox+0x42>
				printf("%c", 200);
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f001 fe54 	bl	8002938 <putchar>
 8000c90:	e002      	b.n	8000c98 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000c92:	20ba      	movs	r0, #186	; 0xba
 8000c94:	f001 fe50 	bl	8002938 <putchar>
		 for(int y = y1; y <= y2; y++){
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dde1      	ble.n	8000c6a <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	e014      	b.n	8000cd6 <drawBox+0x86>
   			 if(x!=x1){
 8000cac:	6a3a      	ldr	r2, [r7, #32]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d00d      	beq.n	8000cd0 <drawBox+0x80>
				 gotoxy(x,y1);
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6a38      	ldr	r0, [r7, #32]
 8000cb8:	f7ff ffb8 	bl	8000c2c <gotoxy>
				 printf("%c", 205);
 8000cbc:	20cd      	movs	r0, #205	; 0xcd
 8000cbe:	f001 fe3b 	bl	8002938 <putchar>
				 gotoxy(x,y2);
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	6a38      	ldr	r0, [r7, #32]
 8000cc6:	f7ff ffb1 	bl	8000c2c <gotoxy>
				 printf("%c", 205);
 8000cca:	20cd      	movs	r0, #205	; 0xcd
 8000ccc:	f001 fe34 	bl	8002938 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
 8000cd6:	6a3a      	ldr	r2, [r7, #32]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dde6      	ble.n	8000cac <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e019      	b.n	8000d18 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000ce4:	69f9      	ldr	r1, [r7, #28]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa0 	bl	8000c2c <gotoxy>
   			 if (y==y1){
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d103      	bne.n	8000cfc <drawBox+0xac>
				printf("%c", 187);
 8000cf4:	20bb      	movs	r0, #187	; 0xbb
 8000cf6:	f001 fe1f 	bl	8002938 <putchar>
 8000cfa:	e00a      	b.n	8000d12 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d103      	bne.n	8000d0c <drawBox+0xbc>
				printf("%c", 188);
 8000d04:	20bc      	movs	r0, #188	; 0xbc
 8000d06:	f001 fe17 	bl	8002938 <putchar>
 8000d0a:	e002      	b.n	8000d12 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000d0c:	20ba      	movs	r0, #186	; 0xba
 8000d0e:	f001 fe13 	bl	8002938 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dde1      	ble.n	8000ce4 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8000d20:	e05d      	b.n	8000dde <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e019      	b.n	8000d5c <drawBox+0x10c>
			 gotoxy(x1,y);
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff ff7e 	bl	8000c2c <gotoxy>
			 if (y==y1){
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d103      	bne.n	8000d40 <drawBox+0xf0>
				printf("%c", 218);
 8000d38:	20da      	movs	r0, #218	; 0xda
 8000d3a:	f001 fdfd 	bl	8002938 <putchar>
 8000d3e:	e00a      	b.n	8000d56 <drawBox+0x106>
			 else if(y==y2){
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d103      	bne.n	8000d50 <drawBox+0x100>
				printf("%c", 192);
 8000d48:	20c0      	movs	r0, #192	; 0xc0
 8000d4a:	f001 fdf5 	bl	8002938 <putchar>
 8000d4e:	e002      	b.n	8000d56 <drawBox+0x106>
				printf("%c", 179);
 8000d50:	20b3      	movs	r0, #179	; 0xb3
 8000d52:	f001 fdf1 	bl	8002938 <putchar>
		for(int y = y1; y <= y2; y++){
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dde1      	ble.n	8000d28 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e014      	b.n	8000d94 <drawBox+0x144>
			if(x!=x1){
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d00d      	beq.n	8000d8e <drawBox+0x13e>
				 gotoxy(x,y1);
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ff59 	bl	8000c2c <gotoxy>
				 printf("%c", 196);
 8000d7a:	20c4      	movs	r0, #196	; 0xc4
 8000d7c:	f001 fddc 	bl	8002938 <putchar>
				 gotoxy(x,y2);
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff52 	bl	8000c2c <gotoxy>
				 printf("%c", 196);
 8000d88:	20c4      	movs	r0, #196	; 0xc4
 8000d8a:	f001 fdd5 	bl	8002938 <putchar>
		for(int x = x1; x <= x2; x++){
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dde6      	ble.n	8000d6a <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e019      	b.n	8000dd6 <drawBox+0x186>
			 gotoxy(x2,y);
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff41 	bl	8000c2c <gotoxy>
			if (y==y1){
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d103      	bne.n	8000dba <drawBox+0x16a>
				printf("%c", 191);
 8000db2:	20bf      	movs	r0, #191	; 0xbf
 8000db4:	f001 fdc0 	bl	8002938 <putchar>
 8000db8:	e00a      	b.n	8000dd0 <drawBox+0x180>
			 else if(y==y2){
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d103      	bne.n	8000dca <drawBox+0x17a>
				printf("%c", 217);
 8000dc2:	20d9      	movs	r0, #217	; 0xd9
 8000dc4:	f001 fdb8 	bl	8002938 <putchar>
 8000dc8:	e002      	b.n	8000dd0 <drawBox+0x180>
				printf("%c", 179);
 8000dca:	20b3      	movs	r0, #179	; 0xb3
 8000dcc:	f001 fdb4 	bl	8002938 <putchar>
		for(int y = y1; y <= y2; y++){
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dde1      	ble.n	8000da2 <drawBox+0x152>
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletHead;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000df4:	e010      	b.n	8000e18 <updateBullets+0x32>
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	441a      	add	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1eb      	bne.n	8000df6 <updateBullets+0x10>
	}
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	bulletNode_t* current = gameState->bulletHead;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e3a:	e00f      	b.n	8000e5c <detectBulletHit+0x30>


		if(fpToInt(current->bullet.nextPosition.y)<=1){ //TODO: add other boundaries
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fac0 	bl	80013c6 <fpToInt>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	dc04      	bgt.n	8000e56 <detectBulletHit+0x2a>
			deleteBulletNode(&(gameState->bulletHead), current);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fea4 	bl	8001b9e <deleteBulletNode>
		}
		current = current->nextBulletAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1ec      	bne.n	8000e3c <detectBulletHit+0x10>

	}
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <drawBullets>:

void drawBullets(gameState_t* gameState){
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletHead;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000e7a:	e030      	b.n	8000ede <drawBullets+0x72>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 faa0 	bl	80013c6 <fpToInt>
 8000e86:	4604      	mov	r4, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fa9a 	bl	80013c6 <fpToInt>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fec8 	bl	8000c2c <gotoxy>
		printf(" ");
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f001 fd4b 	bl	8002938 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fa8d 	bl	80013c6 <fpToInt>
 8000eac:	4604      	mov	r4, r0
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa87 	bl	80013c6 <fpToInt>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff feb5 	bl	8000c2c <gotoxy>
		printf("O");
 8000ec2:	204f      	movs	r0, #79	; 0x4f
 8000ec4:	f001 fd38 	bl	8002938 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1cb      	bne.n	8000e7c <drawBullets+0x10>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}
	...

08000ef0 <NVIC_EnableIRQ>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2201      	movs	r2, #1
 8000f02:	fa02 f103 	lsl.w	r1, r2, r3
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <NVIC_EnableIRQ+0x30>)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	095b      	lsrs	r3, r3, #5
 8000f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da0b      	bge.n	8000f50 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <NVIC_SetPriority+0x4c>)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	3b04      	subs	r3, #4
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000f4e:	e009      	b.n	8000f64 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <NVIC_SetPriority+0x50>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <initJoystick+0x120>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <initJoystick+0x120>)
 8000f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f86:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <initJoystick+0x120>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a42      	ldr	r2, [pc, #264]	; (8001098 <initJoystick+0x120>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <initJoystick+0x120>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a3f      	ldr	r2, [pc, #252]	; (8001098 <initJoystick+0x120>)
 8000f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f9e:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <initJoystick+0x124>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <initJoystick+0x124>)
 8000fa6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000faa:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <initJoystick+0x124>)
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <initJoystick+0x124>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <initJoystick+0x124>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a38      	ldr	r2, [pc, #224]	; (800109c <initJoystick+0x124>)
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <initJoystick+0x124>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a35      	ldr	r2, [pc, #212]	; (800109c <initJoystick+0x124>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fda:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8000fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <initJoystick+0x124>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a23      	ldr	r2, [pc, #140]	; (800109c <initJoystick+0x124>)
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <initJoystick+0x124>)
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <initJoystick+0x124>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <initJoystick+0x124>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <initJoystick+0x124>)
 8001022:	f023 0303 	bic.w	r3, r3, #3
 8001026:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <initJoystick+0x124>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <initJoystick+0x124>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <initJoystick+0x128>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <initJoystick+0x128>)
 800103a:	f023 030c 	bic.w	r3, r3, #12
 800103e:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <initJoystick+0x128>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <initJoystick+0x128>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <initJoystick+0x128>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <initJoystick+0x128>)
 800104e:	f023 0303 	bic.w	r3, r3, #3
 8001052:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <initJoystick+0x128>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <initJoystick+0x128>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <initJoystick+0x128>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <initJoystick+0x128>)
 8001066:	f023 0303 	bic.w	r3, r3, #3
 800106a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <initJoystick+0x128>)
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <initJoystick+0x128>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <initJoystick+0x128>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <initJoystick+0x128>)
 800107a:	f023 0303 	bic.w	r3, r3, #3
 800107e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <initJoystick+0x128>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <initJoystick+0x128>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	60d3      	str	r3, [r2, #12]

}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800

080010a4 <centerIsPressed>:



uint8_t centerIsPressed(){
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <centerIsPressed+0x50>)
 80010aa:	8a1b      	ldrh	r3, [r3, #16]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <centerIsPressed+0x2c>
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <centerIsPressed+0x54>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <centerIsPressed+0x58>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b1e      	cmp	r3, #30
 80010c2:	d905      	bls.n	80010d0 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <centerIsPressed+0x54>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <centerIsPressed+0x58>)
 80010ca:	6013      	str	r3, [r2, #0]
		 return 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e00c      	b.n	80010ea <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <centerIsPressed+0x50>)
 80010d2:	8a1b      	ldrh	r3, [r3, #16]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <centerIsPressed+0x54>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b1e      	subs	r3, #30
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <centerIsPressed+0x58>)
 80010e6:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80010e8:	2300      	movs	r3, #0
	 }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	48000400 	.word	0x48000400
 80010f8:	200001c8 	.word	0x200001c8
 80010fc:	200001b0 	.word	0x200001b0

08001100 <upIsPressed>:

uint8_t upIsPressed(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001108:	8a1b      	ldrh	r3, [r3, #16]
 800110a:	b29b      	uxth	r3, r3
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <upIsPressed+0x2e>
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <upIsPressed+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <upIsPressed+0x58>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b1e      	cmp	r3, #30
 8001120:	d905      	bls.n	800112e <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <upIsPressed+0x54>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <upIsPressed+0x58>)
 8001128:	6013      	str	r3, [r2, #0]
			 return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e00d      	b.n	800114a <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800112e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001132:	8a1b      	ldrh	r3, [r3, #16]
 8001134:	b29b      	uxth	r3, r3
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <upIsPressed+0x54>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b1e      	subs	r3, #30
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <upIsPressed+0x58>)
 8001146:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001148:	2300      	movs	r3, #0
		 }
	 }
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200001c8 	.word	0x200001c8
 8001158:	200001b4 	.word	0x200001b4

0800115c <downIsPressed>:

uint8_t downIsPressed(){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <downIsPressed+0x50>)
 8001162:	8a1b      	ldrh	r3, [r3, #16]
 8001164:	b29b      	uxth	r3, r3
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00c      	beq.n	8001188 <downIsPressed+0x2c>
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <downIsPressed+0x54>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <downIsPressed+0x58>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b1e      	cmp	r3, #30
 800117a:	d905      	bls.n	8001188 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <downIsPressed+0x54>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <downIsPressed+0x58>)
 8001182:	6013      	str	r3, [r2, #0]
			 return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e00c      	b.n	80011a2 <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <downIsPressed+0x50>)
 800118a:	8a1b      	ldrh	r3, [r3, #16]
 800118c:	b29b      	uxth	r3, r3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d104      	bne.n	80011a0 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <downIsPressed+0x54>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b1e      	subs	r3, #30
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <downIsPressed+0x58>)
 800119e:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80011a0:	2300      	movs	r3, #0
		 }
	 }
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	48000400 	.word	0x48000400
 80011b0:	200001c8 	.word	0x200001c8
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <initTimer+0x60>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <initTimer+0x60>)
 80011c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c6:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <initTimer+0x64>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <initTimer+0x64>)
 80011d0:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	b29b      	uxth	r3, r3
 80011da:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <initTimer+0x64>)
 80011de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <initTimer+0x64>)
 80011e6:	2209      	movs	r2, #9
 80011e8:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <initTimer+0x64>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <initTimer+0x64>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <initTimer+0x64>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <initTimer+0x64>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001206:	2100      	movs	r1, #0
 8001208:	2018      	movs	r0, #24
 800120a:	f7ff fe8b 	bl	8000f24 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800120e:	2018      	movs	r0, #24
 8001210:	f7ff fe6e 	bl	8000ef0 <NVIC_EnableIRQ>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	40014000 	.word	0x40014000

08001220 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	runtime++;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a06      	ldr	r2, [pc, #24]	; (8001244 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800122c:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6113      	str	r3, [r2, #16]
 }
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200001c8 	.word	0x200001c8
 8001248:	40014000 	.word	0x40014000

0800124c <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:49].
 8001254:	f001 fc2a 	bl	8002aac <rand>
 8001258:	4603      	mov	r3, r0
 800125a:	4a33      	ldr	r2, [pc, #204]	; (8001328 <spawnEnemy+0xdc>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1151      	asrs	r1, r2, #5
 8001262:	17da      	asrs	r2, r3, #31
 8001264:	1a8a      	subs	r2, r1, r2
 8001266:	2164      	movs	r1, #100	; 0x64
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d154      	bne.n	8001320 <spawnEnemy+0xd4>
		int8_t enemyPos = rand() % 156;
 8001276:	f001 fc19 	bl	8002aac <rand>
 800127a:	4603      	mov	r3, r0
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <spawnEnemy+0xe0>)
 800127e:	fb82 1203 	smull	r1, r2, r2, r3
 8001282:	441a      	add	r2, r3
 8001284:	11d1      	asrs	r1, r2, #7
 8001286:	17da      	asrs	r2, r3, #31
 8001288:	1a8a      	subs	r2, r1, r2
 800128a:	219c      	movs	r1, #156	; 0x9c
 800128c:	fb01 f202 	mul.w	r2, r1, r2
 8001290:	1a9a      	subs	r2, r3, r2
 8001292:	4613      	mov	r3, r2
 8001294:	76fb      	strb	r3, [r7, #27]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 8001296:	2010      	movs	r0, #16
 8001298:	f001 fa74 	bl	8002784 <malloc>
 800129c:	4603      	mov	r3, r0
 800129e:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2202      	movs	r2, #2
 80012a4:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 80012a6:	2008      	movs	r0, #8
 80012a8:	f001 fa6c 	bl	8002784 <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 80012b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f870 	bl	800139c <intToFp>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f000 f86a 	bl	800139c <intToFp>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 80012d4:	2008      	movs	r0, #8
 80012d6:	f001 fa55 	bl	8002784 <malloc>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f85c 	bl	800139c <intToFp>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f0:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 80012f8:	2008      	movs	r0, #8
 80012fa:	f001 fa43 	bl	8002784 <malloc>
 80012fe:	4603      	mov	r3, r0
 8001300:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	605a      	str	r2, [r3, #4]

		appendEnemy(gameState, enemy);
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fc13 	bl	8001b46 <appendEnemy>
	}
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	51eb851f 	.word	0x51eb851f
 800132c:	d20d20d3 	.word	0xd20d20d3

08001330 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0){
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <updateEnemy+0x4e>
			thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	440a      	add	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
			thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	440a      	add	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <updateEnemy+0x5e>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 800138c:	e7d7      	b.n	800133e <updateEnemy+0xe>
			break;
 800138e:	bf00      	nop
	}
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
	output+=n;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
	output<<=16;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	60fb      	str	r3, [r7, #12]
	return output;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60bb      	str	r3, [r7, #8]
	int output=0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013dc:	607b      	str	r3, [r7, #4]
	fp>>=16;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	607b      	str	r3, [r7, #4]
	output+=fp;
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da03      	bge.n	80013fa <fpToInt+0x34>
		output-=65536;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80013f8:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80013fa:	68fb      	ldr	r3, [r7, #12]

}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <drawbackground>:
 */
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"

void drawbackground(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 800140c:	2123      	movs	r1, #35	; 0x23
 800140e:	2037      	movs	r0, #55	; 0x37
 8001410:	f7ff fc0c 	bl	8000c2c <gotoxy>
	printf("*");
 8001414:	202a      	movs	r0, #42	; 0x2a
 8001416:	f001 fa8f 	bl	8002938 <putchar>
	gotoxy(63,27);
 800141a:	211b      	movs	r1, #27
 800141c:	203f      	movs	r0, #63	; 0x3f
 800141e:	f7ff fc05 	bl	8000c2c <gotoxy>
	printf("*");
 8001422:	202a      	movs	r0, #42	; 0x2a
 8001424:	f001 fa88 	bl	8002938 <putchar>
	gotoxy(10,15);
 8001428:	210f      	movs	r1, #15
 800142a:	200a      	movs	r0, #10
 800142c:	f7ff fbfe 	bl	8000c2c <gotoxy>
	printf("*");
 8001430:	202a      	movs	r0, #42	; 0x2a
 8001432:	f001 fa81 	bl	8002938 <putchar>
	gotoxy(20,40);
 8001436:	2128      	movs	r1, #40	; 0x28
 8001438:	2014      	movs	r0, #20
 800143a:	f7ff fbf7 	bl	8000c2c <gotoxy>
	printf("%c",43);
 800143e:	202b      	movs	r0, #43	; 0x2b
 8001440:	f001 fa7a 	bl	8002938 <putchar>

	gotoxy(155,37);
 8001444:	2125      	movs	r1, #37	; 0x25
 8001446:	209b      	movs	r0, #155	; 0x9b
 8001448:	f7ff fbf0 	bl	8000c2c <gotoxy>
	printf("*");
 800144c:	202a      	movs	r0, #42	; 0x2a
 800144e:	f001 fa73 	bl	8002938 <putchar>
	gotoxy(110,28);
 8001452:	211c      	movs	r1, #28
 8001454:	206e      	movs	r0, #110	; 0x6e
 8001456:	f7ff fbe9 	bl	8000c2c <gotoxy>
	printf("*");
 800145a:	202a      	movs	r0, #42	; 0x2a
 800145c:	f001 fa6c 	bl	8002938 <putchar>
	gotoxy(95,13);
 8001460:	210d      	movs	r1, #13
 8001462:	205f      	movs	r0, #95	; 0x5f
 8001464:	f7ff fbe2 	bl	8000c2c <gotoxy>
	printf("*");
 8001468:	202a      	movs	r0, #42	; 0x2a
 800146a:	f001 fa65 	bl	8002938 <putchar>
	gotoxy(130,19);
 800146e:	2113      	movs	r1, #19
 8001470:	2082      	movs	r0, #130	; 0x82
 8001472:	f7ff fbdb 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001476:	202b      	movs	r0, #43	; 0x2b
 8001478:	f001 fa5e 	bl	8002938 <putchar>

	gotoxy(5,27);
 800147c:	211b      	movs	r1, #27
 800147e:	2005      	movs	r0, #5
 8001480:	f7ff fbd4 	bl	8000c2c <gotoxy>
	printf("*");
 8001484:	202a      	movs	r0, #42	; 0x2a
 8001486:	f001 fa57 	bl	8002938 <putchar>
	gotoxy(6,5);
 800148a:	2105      	movs	r1, #5
 800148c:	2006      	movs	r0, #6
 800148e:	f7ff fbcd 	bl	8000c2c <gotoxy>
	printf("*");
 8001492:	202a      	movs	r0, #42	; 0x2a
 8001494:	f001 fa50 	bl	8002938 <putchar>
	gotoxy(13,13);
 8001498:	210d      	movs	r1, #13
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fbc6 	bl	8000c2c <gotoxy>
	printf("*");
 80014a0:	202a      	movs	r0, #42	; 0x2a
 80014a2:	f001 fa49 	bl	8002938 <putchar>
	gotoxy(60,7);
 80014a6:	2107      	movs	r1, #7
 80014a8:	203c      	movs	r0, #60	; 0x3c
 80014aa:	f7ff fbbf 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80014ae:	202b      	movs	r0, #43	; 0x2b
 80014b0:	f001 fa42 	bl	8002938 <putchar>

	gotoxy(140,3);
 80014b4:	2103      	movs	r1, #3
 80014b6:	208c      	movs	r0, #140	; 0x8c
 80014b8:	f7ff fbb8 	bl	8000c2c <gotoxy>
	printf("*");
 80014bc:	202a      	movs	r0, #42	; 0x2a
 80014be:	f001 fa3b 	bl	8002938 <putchar>
	gotoxy(120,5);
 80014c2:	2105      	movs	r1, #5
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f7ff fbb1 	bl	8000c2c <gotoxy>
	printf("*");
 80014ca:	202a      	movs	r0, #42	; 0x2a
 80014cc:	f001 fa34 	bl	8002938 <putchar>
	gotoxy(110,7);
 80014d0:	2107      	movs	r1, #7
 80014d2:	206e      	movs	r0, #110	; 0x6e
 80014d4:	f7ff fbaa 	bl	8000c2c <gotoxy>
	printf("*");
 80014d8:	202a      	movs	r0, #42	; 0x2a
 80014da:	f001 fa2d 	bl	8002938 <putchar>
	gotoxy(70,30);
 80014de:	211e      	movs	r1, #30
 80014e0:	2046      	movs	r0, #70	; 0x46
 80014e2:	f7ff fba3 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80014e6:	202b      	movs	r0, #43	; 0x2b
 80014e8:	f001 fa26 	bl	8002938 <putchar>

	gotoxy(135,33);
 80014ec:	2121      	movs	r1, #33	; 0x21
 80014ee:	2087      	movs	r0, #135	; 0x87
 80014f0:	f7ff fb9c 	bl	8000c2c <gotoxy>
	printf("*");
 80014f4:	202a      	movs	r0, #42	; 0x2a
 80014f6:	f001 fa1f 	bl	8002938 <putchar>
	gotoxy(123,36);
 80014fa:	2124      	movs	r1, #36	; 0x24
 80014fc:	207b      	movs	r0, #123	; 0x7b
 80014fe:	f7ff fb95 	bl	8000c2c <gotoxy>
	printf("*");
 8001502:	202a      	movs	r0, #42	; 0x2a
 8001504:	f001 fa18 	bl	8002938 <putchar>
	gotoxy(138,40);
 8001508:	2128      	movs	r1, #40	; 0x28
 800150a:	208a      	movs	r0, #138	; 0x8a
 800150c:	f7ff fb8e 	bl	8000c2c <gotoxy>
	printf("*");
 8001510:	202a      	movs	r0, #42	; 0x2a
 8001512:	f001 fa11 	bl	8002938 <putchar>
	gotoxy(127,25);
 8001516:	2119      	movs	r1, #25
 8001518:	207f      	movs	r0, #127	; 0x7f
 800151a:	f7ff fb87 	bl	8000c2c <gotoxy>
	printf("%c",43);
 800151e:	202b      	movs	r0, #43	; 0x2b
 8001520:	f001 fa0a 	bl	8002938 <putchar>

	gotoxy(105,32);
 8001524:	2120      	movs	r1, #32
 8001526:	2069      	movs	r0, #105	; 0x69
 8001528:	f7ff fb80 	bl	8000c2c <gotoxy>
	printf("%c",42);
 800152c:	202a      	movs	r0, #42	; 0x2a
 800152e:	f001 fa03 	bl	8002938 <putchar>
	gotoxy(106,33);
 8001532:	2121      	movs	r1, #33	; 0x21
 8001534:	206a      	movs	r0, #106	; 0x6a
 8001536:	f7ff fb79 	bl	8000c2c <gotoxy>
	printf("%c",92);
 800153a:	205c      	movs	r0, #92	; 0x5c
 800153c:	f001 f9fc 	bl	8002938 <putchar>
	gotoxy(107,34);
 8001540:	2122      	movs	r1, #34	; 0x22
 8001542:	206b      	movs	r0, #107	; 0x6b
 8001544:	f7ff fb72 	bl	8000c2c <gotoxy>
	printf("%c",92);
 8001548:	205c      	movs	r0, #92	; 0x5c
 800154a:	f001 f9f5 	bl	8002938 <putchar>

	gotoxy(23,15);
 800154e:	210f      	movs	r1, #15
 8001550:	2017      	movs	r0, #23
 8001552:	f7ff fb6b 	bl	8000c2c <gotoxy>
	printf("*");
 8001556:	202a      	movs	r0, #42	; 0x2a
 8001558:	f001 f9ee 	bl	8002938 <putchar>
	gotoxy(37,21);
 800155c:	2115      	movs	r1, #21
 800155e:	2025      	movs	r0, #37	; 0x25
 8001560:	f7ff fb64 	bl	8000c2c <gotoxy>
	printf("*");
 8001564:	202a      	movs	r0, #42	; 0x2a
 8001566:	f001 f9e7 	bl	8002938 <putchar>
	gotoxy(26,24);
 800156a:	2118      	movs	r1, #24
 800156c:	201a      	movs	r0, #26
 800156e:	f7ff fb5d 	bl	8000c2c <gotoxy>
	printf("*");
 8001572:	202a      	movs	r0, #42	; 0x2a
 8001574:	f001 f9e0 	bl	8002938 <putchar>
	gotoxy(30,29);
 8001578:	211d      	movs	r1, #29
 800157a:	201e      	movs	r0, #30
 800157c:	f7ff fb56 	bl	8000c2c <gotoxy>
	printf("%c",43);
 8001580:	202b      	movs	r0, #43	; 0x2b
 8001582:	f001 f9d9 	bl	8002938 <putchar>

	gotoxy(25,6);
 8001586:	2106      	movs	r1, #6
 8001588:	2019      	movs	r0, #25
 800158a:	f7ff fb4f 	bl	8000c2c <gotoxy>
	printf("*");
 800158e:	202a      	movs	r0, #42	; 0x2a
 8001590:	f001 f9d2 	bl	8002938 <putchar>
	gotoxy(39,7);
 8001594:	2107      	movs	r1, #7
 8001596:	2027      	movs	r0, #39	; 0x27
 8001598:	f7ff fb48 	bl	8000c2c <gotoxy>
	printf("*");
 800159c:	202a      	movs	r0, #42	; 0x2a
 800159e:	f001 f9cb 	bl	8002938 <putchar>
	gotoxy(41,3);
 80015a2:	2103      	movs	r1, #3
 80015a4:	2029      	movs	r0, #41	; 0x29
 80015a6:	f7ff fb41 	bl	8000c2c <gotoxy>
	printf("*");
 80015aa:	202a      	movs	r0, #42	; 0x2a
 80015ac:	f001 f9c4 	bl	8002938 <putchar>
	gotoxy(75,10);
 80015b0:	210a      	movs	r1, #10
 80015b2:	204b      	movs	r0, #75	; 0x4b
 80015b4:	f7ff fb3a 	bl	8000c2c <gotoxy>
	printf("%c",43);
 80015b8:	202b      	movs	r0, #43	; 0x2b
 80015ba:	f001 f9bd 	bl	8002938 <putchar>

	gotoxy(100,20);
 80015be:	2114      	movs	r1, #20
 80015c0:	2064      	movs	r0, #100	; 0x64
 80015c2:	f7ff fb33 	bl	8000c2c <gotoxy>
	printf("%c",197);
 80015c6:	20c5      	movs	r0, #197	; 0xc5
 80015c8:	f001 f9b6 	bl	8002938 <putchar>
	gotoxy(135,12);
 80015cc:	210c      	movs	r1, #12
 80015ce:	2087      	movs	r0, #135	; 0x87
 80015d0:	f7ff fb2c 	bl	8000c2c <gotoxy>
	printf("%c",197);
 80015d4:	20c5      	movs	r0, #197	; 0xc5
 80015d6:	f001 f9af 	bl	8002938 <putchar>
	gotoxy(30,5);
 80015da:	2105      	movs	r1, #5
 80015dc:	201e      	movs	r0, #30
 80015de:	f7ff fb25 	bl	8000c2c <gotoxy>
	printf("%c",197);
 80015e2:	20c5      	movs	r0, #197	; 0xc5
 80015e4:	f001 f9a8 	bl	8002938 <putchar>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	1e5a      	subs	r2, r3, #1
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	3303      	adds	r3, #3
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f7ff fb10 	bl	8000c2c <gotoxy>
	printf("_");
 800160c:	205f      	movs	r0, #95	; 0x5f
 800160e:	f001 f993 	bl	8002938 <putchar>
	gotoxy(X,Y+3);
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	3303      	adds	r3, #3
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff fb06 	bl	8000c2c <gotoxy>
	printf("_");
 8001620:	205f      	movs	r0, #95	; 0x5f
 8001622:	f001 f989 	bl	8002938 <putchar>
	gotoxy(X+1,Y+3);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	3303      	adds	r3, #3
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f7ff fafb 	bl	8000c2c <gotoxy>
	printf("_");
 8001636:	205f      	movs	r0, #95	; 0x5f
 8001638:	f001 f97e 	bl	8002938 <putchar>
	gotoxy(X-2,Y+3);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	1e9a      	subs	r2, r3, #2
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	3303      	adds	r3, #3
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f7ff faf0 	bl	8000c2c <gotoxy>
	printf("(");
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f001 f973 	bl	8002938 <putchar>
	gotoxy(X+2,Y+3);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	1c9a      	adds	r2, r3, #2
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	3303      	adds	r3, #3
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff fae5 	bl	8000c2c <gotoxy>
	printf(")");
 8001662:	2029      	movs	r0, #41	; 0x29
 8001664:	f001 f968 	bl	8002938 <putchar>

	gotoxy(X+3,Y+2);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	1cda      	adds	r2, r3, #3
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	3302      	adds	r3, #2
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff fada 	bl	8000c2c <gotoxy>
	printf("_");
 8001678:	205f      	movs	r0, #95	; 0x5f
 800167a:	f001 f95d 	bl	8002938 <putchar>
	gotoxy(X-3,Y+2);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	1eda      	subs	r2, r3, #3
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	3302      	adds	r3, #2
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f7ff facf 	bl	8000c2c <gotoxy>
	printf("_");
 800168e:	205f      	movs	r0, #95	; 0x5f
 8001690:	f001 f952 	bl	8002938 <putchar>
	gotoxy(X+4,Y+2);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	3302      	adds	r3, #2
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7ff fac4 	bl	8000c2c <gotoxy>
	printf("(");
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f001 f947 	bl	8002938 <putchar>
	gotoxy(X-4,Y+2);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	1f1a      	subs	r2, r3, #4
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	3302      	adds	r3, #2
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f7ff fab9 	bl	8000c2c <gotoxy>
	printf(")");
 80016ba:	2029      	movs	r0, #41	; 0x29
 80016bc:	f001 f93c 	bl	8002938 <putchar>

	gotoxy(X-5,Y+1);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	1f5a      	subs	r2, r3, #5
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f7ff faae 	bl	8000c2c <gotoxy>
	printf("(");
 80016d0:	2028      	movs	r0, #40	; 0x28
 80016d2:	f001 f931 	bl	8002938 <putchar>
	gotoxy(X+5,Y+1);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	1d5a      	adds	r2, r3, #5
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	3301      	adds	r3, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	4610      	mov	r0, r2
 80016e2:	f7ff faa3 	bl	8000c2c <gotoxy>
	printf("(");
 80016e6:	2028      	movs	r0, #40	; 0x28
 80016e8:	f001 f926 	bl	8002938 <putchar>
	gotoxy(X-6,Y);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3b06      	subs	r3, #6
 80016f0:	79ba      	ldrb	r2, [r7, #6]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fa99 	bl	8000c2c <gotoxy>
	printf("(");
 80016fa:	2028      	movs	r0, #40	; 0x28
 80016fc:	f001 f91c 	bl	8002938 <putchar>
	gotoxy(X+6,Y);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3306      	adds	r3, #6
 8001704:	79ba      	ldrb	r2, [r7, #6]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa8f 	bl	8000c2c <gotoxy>
	printf(")");
 800170e:	2029      	movs	r0, #41	; 0x29
 8001710:	f001 f912 	bl	8002938 <putchar>

	gotoxy(X-5,Y-1);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	1f5a      	subs	r2, r3, #5
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	3b01      	subs	r3, #1
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff fa84 	bl	8000c2c <gotoxy>
	printf("(");
 8001724:	2028      	movs	r0, #40	; 0x28
 8001726:	f001 f907 	bl	8002938 <putchar>
	gotoxy(X+5,Y-1);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	1d5a      	adds	r2, r3, #5
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	3b01      	subs	r3, #1
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f7ff fa79 	bl	8000c2c <gotoxy>
	printf(")");
 800173a:	2029      	movs	r0, #41	; 0x29
 800173c:	f001 f8fc 	bl	8002938 <putchar>
	gotoxy(X-4,Y-2);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	1f1a      	subs	r2, r3, #4
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	3b02      	subs	r3, #2
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f7ff fa6e 	bl	8000c2c <gotoxy>
	printf("(");
 8001750:	2028      	movs	r0, #40	; 0x28
 8001752:	f001 f8f1 	bl	8002938 <putchar>
	gotoxy(X+4,Y-2);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	1d1a      	adds	r2, r3, #4
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	3b02      	subs	r3, #2
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7ff fa63 	bl	8000c2c <gotoxy>
	printf(")");
 8001766:	2029      	movs	r0, #41	; 0x29
 8001768:	f001 f8e6 	bl	8002938 <putchar>

	gotoxy(X-3,Y-3);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	1eda      	subs	r2, r3, #3
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	3b03      	subs	r3, #3
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff fa58 	bl	8000c2c <gotoxy>
	printf("_");
 800177c:	205f      	movs	r0, #95	; 0x5f
 800177e:	f001 f8db 	bl	8002938 <putchar>
	gotoxy(X+3,Y-3);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	1cda      	adds	r2, r3, #3
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	3b03      	subs	r3, #3
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f7ff fa4d 	bl	8000c2c <gotoxy>
	printf("_");
 8001792:	205f      	movs	r0, #95	; 0x5f
 8001794:	f001 f8d0 	bl	8002938 <putchar>
	gotoxy(X-2,Y-3);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	1e9a      	subs	r2, r3, #2
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	3b03      	subs	r3, #3
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff fa42 	bl	8000c2c <gotoxy>
	printf("(");
 80017a8:	2028      	movs	r0, #40	; 0x28
 80017aa:	f001 f8c5 	bl	8002938 <putchar>
	gotoxy(X+2,Y-3);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	1c9a      	adds	r2, r3, #2
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7ff fa37 	bl	8000c2c <gotoxy>
	printf(")");
 80017be:	2029      	movs	r0, #41	; 0x29
 80017c0:	f001 f8ba 	bl	8002938 <putchar>

	gotoxy(X-1,Y-4);
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	1e5a      	subs	r2, r3, #1
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	3b04      	subs	r3, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f7ff fa2c 	bl	8000c2c <gotoxy>
	printf("_");
 80017d4:	205f      	movs	r0, #95	; 0x5f
 80017d6:	f001 f8af 	bl	8002938 <putchar>
	gotoxy(X,Y-4);
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	3b04      	subs	r3, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f7ff fa22 	bl	8000c2c <gotoxy>
	printf("_");
 80017e8:	205f      	movs	r0, #95	; 0x5f
 80017ea:	f001 f8a5 	bl	8002938 <putchar>
	gotoxy(X+1,Y-4);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	3b04      	subs	r3, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f7ff fa17 	bl	8000c2c <gotoxy>
	printf("_");
 80017fe:	205f      	movs	r0, #95	; 0x5f
 8001800:	f001 f89a 	bl	8002938 <putchar>

	gotoxy(X-2,Y);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	3b02      	subs	r3, #2
 8001808:	79ba      	ldrb	r2, [r7, #6]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa0d 	bl	8000c2c <gotoxy>
	printf("O");
 8001812:	204f      	movs	r0, #79	; 0x4f
 8001814:	f001 f890 	bl	8002938 <putchar>
	gotoxy(X+1,Y+2);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	3302      	adds	r3, #2
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f7ff fa02 	bl	8000c2c <gotoxy>
	printf("o");
 8001828:	206f      	movs	r0, #111	; 0x6f
 800182a:	f001 f885 	bl	8002938 <putchar>
	gotoxy(X+3,Y-1);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	1cda      	adds	r2, r3, #3
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	3b01      	subs	r3, #1
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7ff f9f7 	bl	8000c2c <gotoxy>
	printf("O");
 800183e:	204f      	movs	r0, #79	; 0x4f
 8001840:	f001 f87a 	bl	8002938 <putchar>


	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <drawhearth>:


void drawhearth(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	fgcolor(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff f9bf 	bl	8000bd4 <fgcolor>
	gotoxy(15,1);
 8001856:	2101      	movs	r1, #1
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff f9e7 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800185e:	20db      	movs	r0, #219	; 0xdb
 8001860:	f001 f86a 	bl	8002938 <putchar>
	gotoxy(17,1);
 8001864:	2101      	movs	r1, #1
 8001866:	2011      	movs	r0, #17
 8001868:	f7ff f9e0 	bl	8000c2c <gotoxy>
	printf("%c",219);
 800186c:	20db      	movs	r0, #219	; 0xdb
 800186e:	f001 f863 	bl	8002938 <putchar>
	gotoxy(16,2);
 8001872:	2102      	movs	r1, #2
 8001874:	2010      	movs	r0, #16
 8001876:	f7ff f9d9 	bl	8000c2c <gotoxy>
	printf("%c",223);
 800187a:	20df      	movs	r0, #223	; 0xdf
 800187c:	f001 f85c 	bl	8002938 <putchar>
	gotoxy(16,1);
 8001880:	2101      	movs	r1, #1
 8001882:	2010      	movs	r0, #16
 8001884:	f7ff f9d2 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001888:	20dc      	movs	r0, #220	; 0xdc
 800188a:	f001 f855 	bl	8002938 <putchar>


	gotoxy(19,1);
 800188e:	2101      	movs	r1, #1
 8001890:	2013      	movs	r0, #19
 8001892:	f7ff f9cb 	bl	8000c2c <gotoxy>
	printf("%c",219);
 8001896:	20db      	movs	r0, #219	; 0xdb
 8001898:	f001 f84e 	bl	8002938 <putchar>
	gotoxy(21,1);
 800189c:	2101      	movs	r1, #1
 800189e:	2015      	movs	r0, #21
 80018a0:	f7ff f9c4 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80018a4:	20db      	movs	r0, #219	; 0xdb
 80018a6:	f001 f847 	bl	8002938 <putchar>
	gotoxy(20,2);
 80018aa:	2102      	movs	r1, #2
 80018ac:	2014      	movs	r0, #20
 80018ae:	f7ff f9bd 	bl	8000c2c <gotoxy>
	printf("%c",223);
 80018b2:	20df      	movs	r0, #223	; 0xdf
 80018b4:	f001 f840 	bl	8002938 <putchar>
	gotoxy(20,1);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2014      	movs	r0, #20
 80018bc:	f7ff f9b6 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80018c0:	20dc      	movs	r0, #220	; 0xdc
 80018c2:	f001 f839 	bl	8002938 <putchar>


	gotoxy(23,1);
 80018c6:	2101      	movs	r1, #1
 80018c8:	2017      	movs	r0, #23
 80018ca:	f7ff f9af 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80018ce:	20db      	movs	r0, #219	; 0xdb
 80018d0:	f001 f832 	bl	8002938 <putchar>
	gotoxy(25,1);
 80018d4:	2101      	movs	r1, #1
 80018d6:	2019      	movs	r0, #25
 80018d8:	f7ff f9a8 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80018dc:	20db      	movs	r0, #219	; 0xdb
 80018de:	f001 f82b 	bl	8002938 <putchar>
	gotoxy(24,2);
 80018e2:	2102      	movs	r1, #2
 80018e4:	2018      	movs	r0, #24
 80018e6:	f7ff f9a1 	bl	8000c2c <gotoxy>
	printf("%c",223);
 80018ea:	20df      	movs	r0, #223	; 0xdf
 80018ec:	f001 f824 	bl	8002938 <putchar>
	gotoxy(24,1);
 80018f0:	2101      	movs	r1, #1
 80018f2:	2018      	movs	r0, #24
 80018f4:	f7ff f99a 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80018f8:	20dc      	movs	r0, #220	; 0xdc
 80018fa:	f001 f81d 	bl	8002938 <putchar>
	fgcolor(15);
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff f968 	bl	8000bd4 <fgcolor>





}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <drawEnemy>:


void drawEnemy(gameState_t* gameState){
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	int isLastElement = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]

	while(1){
		if(thisNode->enemy->position->x != 0){
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03d      	beq.n	80019a2 <drawEnemy+0x9a>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd49 	bl	80013c6 <fpToInt>
 8001934:	4604      	mov	r4, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fd41 	bl	80013c6 <fpToInt>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff f96f 	bl	8000c2c <gotoxy>
			//printf("%d %d", fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
			printf("  ");
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <drawEnemy+0xb4>)
 8001950:	f000 ffda 	bl	8002908 <iprintf>
			gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd32 	bl	80013c6 <fpToInt>
 8001962:	4604      	mov	r4, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd2a 	bl	80013c6 <fpToInt>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff f958 	bl	8000c2c <gotoxy>
			printf(":E");
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <drawEnemy+0xb8>)
 800197e:	f000 ffc3 	bl	8002908 <iprintf>
			thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	601a      	str	r2, [r3, #0]
			thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6852      	ldr	r2, [r2, #4]
 80019a0:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <drawEnemy+0xaa>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 80019b0:	e7b3      	b.n	800191a <drawEnemy+0x12>
			break;
 80019b2:	bf00      	nop
	}
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	08003c54 	.word	0x08003c54
 80019c0:	08003c58 	.word	0x08003c58

080019c4 <drawMe>:

void drawBullet(){

}

void drawMe(uint8_t X, uint8_t Y){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
	//middle 20,35
	gotoxy(X,Y);
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	79ba      	ldrb	r2, [r7, #6]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f926 	bl	8000c2c <gotoxy>
	printf("%c",219);
 80019e0:	20db      	movs	r0, #219	; 0xdb
 80019e2:	f000 ffa9 	bl	8002938 <putchar>
	gotoxy(X-1,Y);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	79ba      	ldrb	r2, [r7, #6]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f91c 	bl	8000c2c <gotoxy>
	printf("%c",220);
 80019f4:	20dc      	movs	r0, #220	; 0xdc
 80019f6:	f000 ff9f 	bl	8002938 <putchar>
	gotoxy(X+1,Y);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	3301      	adds	r3, #1
 80019fe:	79ba      	ldrb	r2, [r7, #6]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f912 	bl	8000c2c <gotoxy>
	printf("%c",220);
 8001a08:	20dc      	movs	r0, #220	; 0xdc
 8001a0a:	f000 ff95 	bl	8002938 <putchar>
	gotoxy(X-1,Y+1);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	3301      	adds	r3, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff f907 	bl	8000c2c <gotoxy>
	printf("%c",223);
 8001a1e:	20df      	movs	r0, #223	; 0xdf
 8001a20:	f000 ff8a 	bl	8002938 <putchar>
	gotoxy(X+1,Y+1);
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff f8fc 	bl	8000c2c <gotoxy>
	printf("%c",223);
 8001a34:	20df      	movs	r0, #223	; 0xdf
 8001a36:	f000 ff7f 	bl	8002938 <putchar>

	gotoxy(X,Y-1);
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff f8f2 	bl	8000c2c <gotoxy>
	printf("%c",179);
 8001a48:	20b3      	movs	r0, #179	; 0xb3
 8001a4a:	f000 ff75 	bl	8002938 <putchar>
//186
	gotoxy(X-1,Y+2);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	1e5a      	subs	r2, r3, #1
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	3302      	adds	r3, #2
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff f8e7 	bl	8000c2c <gotoxy>
	printf("%c",176);
 8001a5e:	20b0      	movs	r0, #176	; 0xb0
 8001a60:	f000 ff6a 	bl	8002938 <putchar>
	gotoxy(X+1,Y+2);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff f8dc 	bl	8000c2c <gotoxy>
	printf("%c",176);
 8001a74:	20b0      	movs	r0, #176	; 0xb0
 8001a76:	f000 ff5f 	bl	8002938 <putchar>

//47 92


}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 8001a84:	b084      	sub	sp, #16
 8001a86:	b5b0      	push	{r4, r5, r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	f107 0418 	add.w	r4, r7, #24
 8001a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8001a94:	201c      	movs	r0, #28
 8001a96:	f000 fe75 	bl	8002784 <malloc>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	607b      	str	r3, [r7, #4]
    if (newNode == NULL) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <createBulletNode+0x2c>
        printf("Memory allocation failed\n");
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <createBulletNode+0x58>)
 8001aa6:	f000 ffcb 	bl	8002a40 <puts>
        exit(EXIT_FAILURE);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fe32 	bl	8002714 <exit>
    }
    newNode->bullet = bullet;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	f107 0418 	add.w	r4, r7, #24
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac0:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    return newNode;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ad6:	b004      	add	sp, #16
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	08003c5c 	.word	0x08003c5c

08001ae0 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af02      	add	r7, sp, #8
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	f107 001c 	add.w	r0, r7, #28
 8001aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8001af2:	466a      	mov	r2, sp
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001afc:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b06:	f7ff ffbd 	bl	8001a84 <createBulletNode>
 8001b0a:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <appendBullet+0x3c>
        // If the list is empty, make the new node the head
        *head = newNode;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8001b1a:	e00d      	b.n	8001b38 <appendBullet+0x58>
        bulletNode_t* current = *head;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8001b22:	e002      	b.n	8001b2a <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f8      	bne.n	8001b24 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	619a      	str	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b42:	b004      	add	sp, #16
 8001b44:	4770      	bx	lr

08001b46 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8001b50:	2008      	movs	r0, #8
 8001b52:	f000 fe17 	bl	8002784 <malloc>
 8001b56:	4603      	mov	r3, r0
 8001b58:	60fb      	str	r3, [r7, #12]
	newEnemy->enemy = enemy;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	617b      	str	r3, [r7, #20]
	int8_t isEndOfList = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	74fb      	strb	r3, [r7, #19]
	while(isEndOfList == 0){
 8001b70:	e00c      	b.n	8001b8c <appendEnemy+0x46>
		if(thisNode->nextEnemyNode == 0){
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <appendEnemy+0x40>
			isEndOfList = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	74fb      	strb	r3, [r7, #19]
			thisNode->nextEnemyNode = newEnemy;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	e002      	b.n	8001b8c <appendEnemy+0x46>
		}else{
			thisNode = thisNode->nextEnemyNode;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	617b      	str	r3, [r7, #20]
	while(isEndOfList == 0){
 8001b8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <appendEnemy+0x2c>
		}
	}
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8001b9e:	b590      	push	{r4, r7, lr}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <deleteBulletNode+0x8c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d039      	beq.n	8001c2a <deleteBulletNode+0x8c>
        // If the list is empty or the node to be deleted is NULL, do nothing
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fc03 	bl	80013c6 <fpToInt>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fbfd 	bl	80013c6 <fpToInt>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff f82b 	bl	8000c2c <gotoxy>
    printf(" ");
 8001bd6:	2020      	movs	r0, #32
 8001bd8:	f000 feae 	bl	8002938 <putchar>

    // If the node to be deleted is the head of the list
    if (*head == nodeToDelete) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d107      	bne.n	8001bf6 <deleteBulletNode+0x58>
        *head = nodeToDelete->nextBulletAddress;  // Update the head to the next node
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);  // Free the memory of the deleted node
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f000 fdd0 	bl	8002794 <free>
        return;
 8001bf4:	e01c      	b.n	8001c30 <deleteBulletNode+0x92>
    }

    // If the node to be deleted is not the head, traverse the list to find the previous node
    bulletNode_t* current = *head;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8001bfc:	e002      	b.n	8001c04 <deleteBulletNode+0x66>
        current = current->nextBulletAddress;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <deleteBulletNode+0x76>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1f4      	bne.n	8001bfe <deleteBulletNode+0x60>
    }

    if (current == NULL) {
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <deleteBulletNode+0x90>
        // Node to be deleted is not found in the list
        return;
    }

    // Update the next pointer of the previous node to skip the node to be deleted
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	619a      	str	r2, [r3, #24]

    // Free the memory of the deleted node

    free(nodeToDelete);
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f000 fdb6 	bl	8002794 <free>
 8001c28:	e002      	b.n	8001c30 <deleteBulletNode+0x92>
        return;
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <deleteBulletNode+0x92>
        return;
 8001c2e:	bf00      	nop
}
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}

08001c36 <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 8001c36:	b5b0      	push	{r4, r5, r7, lr}
 8001c38:	b08c      	sub	sp, #48	; 0x30
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42)}, {intToFp(2), intToFp(42)}, 1, 20, 0};
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fba3 	bl	800139c <intToFp>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	202a      	movs	r0, #42	; 0x2a
 8001c5c:	f7ff fb9e 	bl	800139c <intToFp>
 8001c60:	4603      	mov	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fb99 	bl	800139c <intToFp>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	202a      	movs	r0, #42	; 0x2a
 8001c70:	f7ff fb94 	bl	800139c <intToFp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	773b      	strb	r3, [r7, #28]
 8001c7c:	2314      	movs	r3, #20
 8001c7e:	777b      	strb	r3, [r7, #29]

	enemyNode_t* node = malloc(sizeof(enemyNode_t));
 8001c80:	2008      	movs	r0, #8
 8001c82:	f000 fd7f 	bl	8002784 <malloc>
 8001c86:	4603      	mov	r3, r0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	enemy_t* enemy = malloc(sizeof(enemy_t));
 8001c8a:	2010      	movs	r0, #16
 8001c8c:	f000 fd7a 	bl	8002784 <malloc>
 8001c90:	4603      	mov	r3, r0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
	position_t* pos = malloc(sizeof(position_t));
 8001c94:	2008      	movs	r0, #8
 8001c96:	f000 fd75 	bl	8002784 <malloc>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

	node->enemy = enemy;
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca2:	601a      	str	r2, [r3, #0]
	pos->x = 0;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
	enemy->position = pos;
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	601a      	str	r2, [r3, #0]
	node->enemy = enemy;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb4:	601a      	str	r2, [r3, #0]
	node->nextEnemyNode = 0;
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
	gameState->enemyLL = node;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc0:	605a      	str	r2, [r3, #4]

	gameState->bulletHead = NULL;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f103 040c 	add.w	r4, r3, #12
 8001cfc:	f107 050c 	add.w	r5, r7, #12
 8001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d08:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//TODO: continue to initialize everything
}
 8001d14:	bf00      	nop
 8001d16:	3730      	adds	r7, #48	; 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}

08001d1c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb4c 	bl	80013c6 <fpToInt>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fb46 	bl	80013c6 <fpToInt>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7fe ff74 	bl	8000c2c <gotoxy>
	printf(" ");
 8001d44:	2020      	movs	r0, #32
 8001d46:	f000 fdf7 	bl	8002938 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fb39 	bl	80013c6 <fpToInt>
 8001d54:	4604      	mov	r4, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb33 	bl	80013c6 <fpToInt>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ff61 	bl	8000c2c <gotoxy>
	printf("A");
 8001d6a:	2041      	movs	r0, #65	; 0x41
 8001d6c:	f000 fde4 	bl	8002938 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	330c      	adds	r3, #12
 8001d76:	3214      	adds	r2, #20
 8001d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d7c:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fdc1 	bl	8001908 <drawEnemy>
	drawBullets(gameState);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f870 	bl	8000e6c <drawBullets>
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8001d9c:	f7fe fd5c 	bl	8000858 <uart_get_char>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b66      	cmp	r3, #102	; 0x66
 8001da8:	d111      	bne.n	8001dce <bossKey+0x3a>
		if(gameState->bossMode == 0){
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <bossKey+0x2e>
			clrscr();
 8001db4:	f7fe ff2a 	bl	8000c0c <clrscr>
			gameState->bossMode = 1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001dc0:	e005      	b.n	8001dce <bossKey+0x3a>
		}else{
			gameState->bossMode = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			return 2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <bossKey+0x58>
		}
	}

	if(gameState->bossMode == 1){
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <bossKey+0x56>
		gotoxy(0,0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7fe ff26 	bl	8000c2c <gotoxy>
		printf("Noget meget vigtigt!");
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <bossKey+0x60>)
 8001de2:	f000 fd91 	bl	8002908 <iprintf>
		return 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <bossKey+0x58>
	}
	return 0;
 8001dea:	2300      	movs	r3, #0
	uart_clear();
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08003c78 	.word	0x08003c78

08001df8 <main>:

int main(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b09a      	sub	sp, #104	; 0x68
 8001dfc:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 8001dfe:	4ad6      	ldr	r2, [pc, #856]	; (8002158 <main+0x360>)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e08:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e0c:	4ad3      	ldr	r2, [pc, #844]	; (800215c <main+0x364>)
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e16:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e1a:	4ad1      	ldr	r2, [pc, #836]	; (8002160 <main+0x368>)
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e24:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8001e28:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8001e2c:	f7fe fdb8 	bl	80009a0 <uart_init>
	initVariables(&gameState);
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fefe 	bl	8001c36 <initVariables>
	initTimer();
 8001e3a:	f7ff f9bd 	bl	80011b8 <initTimer>
	initJoystick();
 8001e3e:	f7ff f89b 	bl	8000f78 <initJoystick>
	srand(time(NULL));   //RNG
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 ff50 	bl	8002ce8 <time>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fdfe 	bl	8002a50 <srand>



	while(1){
		switch(gameState.activeScreen){
 8001e54:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d8fb      	bhi.n	8001e54 <main+0x5c>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <main+0x6c>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08002029 	.word	0x08002029
 8001e6c:	080020e7 	.word	0x080020e7
 8001e70:	0800217d 	.word	0x0800217d
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8001e74:	f7fe feca 	bl	8000c0c <clrscr>
			drawWindow();
 8001e78:	f000 fa4a 	bl	8002310 <drawWindow>
			drawBox(1,1,156,43,0);//window
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	232b      	movs	r3, #43	; 0x2b
 8001e82:	229c      	movs	r2, #156	; 0x9c
 8001e84:	2101      	movs	r1, #1
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7fe fee2 	bl	8000c50 <drawBox>
			drawbackground(); // stars in background
 8001e8c:	f7ff fabc 	bl	8001408 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 8001e90:	f107 0220 	add.w	r2, r7, #32
 8001e94:	f107 0308 	add.w	r3, r7, #8
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f9fe 	bl	800229c <drawMenuScreen>


			while(gameState.activeScreen==0){
 8001ea0:	e0bc      	b.n	800201c <main+0x224>

				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff74 	bl	8001d94 <bossKey>
 8001eac:	4603      	mov	r3, r0
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
				if(bossKeyChange == 1) continue;
 8001eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d100      	bne.n	8001eb8 <main+0xc0>
 8001eb6:	e0b1      	b.n	800201c <main+0x224>
				else if(bossKeyChange == 2){
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d111      	bne.n	8001ee2 <main+0xea>
					//Initialize window agian
					clrscr();
 8001ebe:	f7fe fea5 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	232b      	movs	r3, #43	; 0x2b
 8001ec8:	229c      	movs	r2, #156	; 0x9c
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7fe febf 	bl	8000c50 <drawBox>
					drawMenuScreen(btnList, &gameState);
 8001ed2:	f107 0220 	add.w	r2, r7, #32
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f9dd 	bl	800229c <drawMenuScreen>
				}

				if(downIsPressed()){
 8001ee2:	f7ff f93b 	bl	800115c <downIsPressed>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d025      	beq.n	8001f38 <main+0x140>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8001eec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b58      	subs	r3, #88	; 0x58
 8001efa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001efe:	f000 f9ad 	bl	800225c <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8001f02:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	4b96      	ldr	r3, [pc, #600]	; (8002164 <main+0x36c>)
 8001f0a:	fb83 3102 	smull	r3, r1, r3, r2
 8001f0e:	17d3      	asrs	r3, r2, #31
 8001f10:	1ac9      	subs	r1, r1, r3
 8001f12:	460b      	mov	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	440b      	add	r3, r1
 8001f18:	1ad1      	subs	r1, r2, r3
 8001f1a:	b2cb      	uxtb	r3, r1
 8001f1c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8001f20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b58      	subs	r3, #88	; 0x58
 8001f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f32:	f000 f973 	bl	800221c <drawBtnAsSelected>
 8001f36:	e028      	b.n	8001f8a <main+0x192>
				}
				else if(upIsPressed()){
 8001f38:	f7ff f8e2 	bl	8001100 <upIsPressed>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d023      	beq.n	8001f8a <main+0x192>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8001f42:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b58      	subs	r3, #88	; 0x58
 8001f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f54:	f000 f982 	bl	800225c <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8001f58:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <main+0x170>
 8001f60:	2302      	movs	r3, #2
 8001f62:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001f66:	e005      	b.n	8001f74 <main+0x17c>
					else gameState.btnSelected=gameState.btnSelected-1;
 8001f68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8001f74:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b58      	subs	r3, #88	; 0x58
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f949 	bl	800221c <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8001f8a:	f7ff f88b 	bl	80010a4 <centerIsPressed>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d043      	beq.n	800201c <main+0x224>
					if(gameState.btnSelected==0){ //START BUTTON
 8001f94:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <main+0x1ac>
						gameState.activeScreen=1; //Game screen
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001fa2:	e03b      	b.n	800201c <main+0x224>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8001fa4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d130      	bne.n	800200e <main+0x216>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8001fac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <main+0x36c>)
 8001fb4:	fb83 3102 	smull	r3, r1, r3, r2
 8001fb8:	17d3      	asrs	r3, r2, #31
 8001fba:	1ac9      	subs	r1, r1, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	1ad1      	subs	r1, r2, r3
 8001fc4:	b2cb      	uxtb	r3, r1
 8001fc6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <main+0x364>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	330f      	adds	r3, #15
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <main+0x364>)
 8001fd2:	7852      	ldrb	r2, [r2, #1]
 8001fd4:	3201      	adds	r2, #1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe27 	bl	8000c2c <gotoxy>
						if(gameState.difficulty==0){
 8001fde:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <main+0x1f6>
							printf("EASY  ");
 8001fe6:	4860      	ldr	r0, [pc, #384]	; (8002168 <main+0x370>)
 8001fe8:	f000 fc8e 	bl	8002908 <iprintf>
 8001fec:	e016      	b.n	800201c <main+0x224>
						} else if(gameState.difficulty==1){
 8001fee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d103      	bne.n	8001ffe <main+0x206>
							printf("MEDIUM");
 8001ff6:	485d      	ldr	r0, [pc, #372]	; (800216c <main+0x374>)
 8001ff8:	f000 fc86 	bl	8002908 <iprintf>
 8001ffc:	e00e      	b.n	800201c <main+0x224>
						} else if(gameState.difficulty==2){
 8001ffe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002002:	2b02      	cmp	r3, #2
 8002004:	d10a      	bne.n	800201c <main+0x224>
							printf("HARD  ");
 8002006:	485a      	ldr	r0, [pc, #360]	; (8002170 <main+0x378>)
 8002008:	f000 fc7e 	bl	8002908 <iprintf>
 800200c:	e006      	b.n	800201c <main+0x224>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 800200e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002012:	2b02      	cmp	r3, #2
 8002014:	d102      	bne.n	800201c <main+0x224>
						gameState.activeScreen=2;// help screen
 8002016:	2302      	movs	r3, #2
 8002018:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==0){
 800201c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002020:	2b00      	cmp	r3, #0
 8002022:	f43f af3e 	beq.w	8001ea2 <main+0xaa>
					}
				}
			}
			break;
 8002026:	e0c9      	b.n	80021bc <main+0x3c4>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8002028:	f7fe fdf0 	bl	8000c0c <clrscr>
			printf("GAME SCREEN");
 800202c:	4851      	ldr	r0, [pc, #324]	; (8002174 <main+0x37c>)
 800202e:	f000 fc6b 	bl	8002908 <iprintf>
			uint32_t frameLastUpdated=0;
 8002032:	2300      	movs	r3, #0
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t dir = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
			gameState.spaceship.lastShotTime=runtime;
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <main+0x380>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
			drawbackground(); // stars in background
 8002040:	f7ff f9e2 	bl	8001408 <drawbackground>
			drawhearth();
 8002044:	f7ff fc02 	bl	800184c <drawhearth>
			drawMoon(51,17); // moon graphics
 8002048:	2111      	movs	r1, #17
 800204a:	2033      	movs	r0, #51	; 0x33
 800204c:	f7ff face 	bl	80015ec <drawMoon>
			drawMe(30,35);
 8002050:	2123      	movs	r1, #35	; 0x23
 8002052:	201e      	movs	r0, #30
 8002054:	f7ff fcb6 	bl	80019c4 <drawMe>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 8002058:	e040      	b.n	80020dc <main+0x2e4>
				if(runtime-frameLastUpdated>=framePeriod){//
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <main+0x380>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d927      	bls.n	80020b6 <main+0x2be>
					updateSpaceship(&gameState, &dir);
 8002066:	1dfa      	adds	r2, r7, #7
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f95c 	bl	800232c <updateSpaceship>
					spawnEnemy(&gameState);
 8002074:	f107 0320 	add.w	r3, r7, #32
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f8e7 	bl	800124c <spawnEnemy>
					updateEnemy(&gameState);
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f954 	bl	8001330 <updateEnemy>
					shootSpaceship(&gameState);
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f985 	bl	800239c <shootSpaceship>
//					shootEnemy(&gameState);
					updateBullets(&gameState);
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fea5 	bl	8000de6 <updateBullets>
					detectBulletHit(&gameState);
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fec3 	bl	8000e2c <detectBulletHit>
//					detectCityHit(&gameState);
//					powerUp(&gameState);
//					nukeUpdate(&gameState);

					drawScreen(&gameState);
 80020a6:	f107 0320 	add.w	r3, r7, #32
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fe36 	bl	8001d1c <drawScreen>
					frameLastUpdated=runtime;
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <main+0x380>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}

				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80020b6:	f107 0320 	add.w	r3, r7, #32
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe6a 	bl	8001d94 <bossKey>
 80020c0:	4603      	mov	r3, r0
 80020c2:	657b      	str	r3, [r7, #84]	; 0x54
				if(bossKeyChange == 1) continue;
 80020c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d100      	bne.n	80020cc <main+0x2d4>
 80020ca:	e007      	b.n	80020dc <main+0x2e4>
				else if(bossKeyChange == 2){
 80020cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d104      	bne.n	80020dc <main+0x2e4>
					//Initialize window agian
					clrscr();
 80020d2:	f7fe fd9b 	bl	8000c0c <clrscr>
					printf("GAME SCREEN");
 80020d6:	4827      	ldr	r0, [pc, #156]	; (8002174 <main+0x37c>)
 80020d8:	f000 fc16 	bl	8002908 <iprintf>
			while(gameState.activeScreen==1){
 80020dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d0ba      	beq.n	800205a <main+0x262>
				}
		}
			break;
 80020e4:	e06a      	b.n	80021bc <main+0x3c4>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80020e6:	f7fe fd91 	bl	8000c0c <clrscr>
			drawWindow();
 80020ea:	f000 f911 	bl	8002310 <drawWindow>
			drawBox(1,1,156,43,0);//window
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	232b      	movs	r3, #43	; 0x2b
 80020f4:	229c      	movs	r2, #156	; 0x9c
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe fda9 	bl	8000c50 <drawBox>
			drawbackground(); // stars in background
 80020fe:	f7ff f983 	bl	8001408 <drawbackground>
			drawHelpScreen();
 8002102:	f000 f8ef 	bl	80022e4 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8002106:	e021      	b.n	800214c <main+0x354>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fe41 	bl	8001d94 <bossKey>
 8002112:	4603      	mov	r3, r0
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
				if(bossKeyChange == 1) continue;
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	2b01      	cmp	r3, #1
 800211a:	d100      	bne.n	800211e <main+0x326>
 800211c:	e016      	b.n	800214c <main+0x354>
				else if(bossKeyChange == 2){
 800211e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002120:	2b02      	cmp	r3, #2
 8002122:	d10b      	bne.n	800213c <main+0x344>
					//Initialize window agian
					clrscr();
 8002124:	f7fe fd72 	bl	8000c0c <clrscr>
					drawBox(1,1,156,43,0);//window
 8002128:	2300      	movs	r3, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	232b      	movs	r3, #43	; 0x2b
 800212e:	229c      	movs	r2, #156	; 0x9c
 8002130:	2101      	movs	r1, #1
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe fd8c 	bl	8000c50 <drawBox>
					drawHelpScreen();
 8002138:	f000 f8d4 	bl	80022e4 <drawHelpScreen>
				}

				if(centerIsPressed()){
 800213c:	f7fe ffb2 	bl	80010a4 <centerIsPressed>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <main+0x354>
					gameState.activeScreen=0;//MENU SCREEN
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==2){
 800214c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002150:	2b02      	cmp	r3, #2
 8002152:	d0d9      	beq.n	8002108 <main+0x310>
				}
			}
			break;
 8002154:	e032      	b.n	80021bc <main+0x3c4>
 8002156:	bf00      	nop
 8002158:	08003d1c 	.word	0x08003d1c
 800215c:	08003d24 	.word	0x08003d24
 8002160:	08003d2c 	.word	0x08003d2c
 8002164:	55555556 	.word	0x55555556
 8002168:	08003c90 	.word	0x08003c90
 800216c:	08003c98 	.word	0x08003c98
 8002170:	08003ca0 	.word	0x08003ca0
 8002174:	08003ca8 	.word	0x08003ca8
 8002178:	200001c8 	.word	0x200001c8
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 800217c:	f7fe fd46 	bl	8000c0c <clrscr>
			printf("GAME OVER\nYour score is %d", gameState.score);
 8002180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002184:	4619      	mov	r1, r3
 8002186:	480e      	ldr	r0, [pc, #56]	; (80021c0 <main+0x3c8>)
 8002188:	f000 fbbe 	bl	8002908 <iprintf>
			while(gameState.activeScreen==3){
 800218c:	e00f      	b.n	80021ae <main+0x3b6>
				if(bossKey(&gameState)) break;
 800218e:	f107 0320 	add.w	r3, r7, #32
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fdfe 	bl	8001d94 <bossKey>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <main+0x3c0>

				if(centerIsPressed()){
 800219e:	f7fe ff81 	bl	80010a4 <centerIsPressed>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <main+0x3b6>
					gameState.activeScreen=0;//MENU SCREEN
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==3){
 80021ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d0eb      	beq.n	800218e <main+0x396>
				}
			}
			break;
 80021b6:	e000      	b.n	80021ba <main+0x3c2>
				if(bossKey(&gameState)) break;
 80021b8:	bf00      	nop
			break;
 80021ba:	bf00      	nop
		switch(gameState.activeScreen){
 80021bc:	e64a      	b.n	8001e54 <main+0x5c>
 80021be:	bf00      	nop
 80021c0:	08003cb4 	.word	0x08003cb4

080021c4 <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	463b      	mov	r3, r7
 80021cc:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fd fffc 	bl	80001d0 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80021dc:	783b      	ldrb	r3, [r7, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	461c      	mov	r4, r3
 80021e4:	783b      	ldrb	r3, [r7, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	1d5a      	adds	r2, r3, #5
 80021ee:	787b      	ldrb	r3, [r7, #1]
 80021f0:	3302      	adds	r3, #2
 80021f2:	2100      	movs	r1, #0
 80021f4:	9100      	str	r1, [sp, #0]
 80021f6:	4621      	mov	r1, r4
 80021f8:	f7fe fd2a 	bl	8000c50 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80021fc:	783b      	ldrb	r3, [r7, #0]
 80021fe:	3303      	adds	r3, #3
 8002200:	787a      	ldrb	r2, [r7, #1]
 8002202:	3201      	adds	r2, #1
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd10 	bl	8000c2c <gotoxy>
	printf(btn.text);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fb7a 	bl	8002908 <iprintf>
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af02      	add	r7, sp, #8
 8002222:	463b      	mov	r3, r7
 8002224:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fd ffd0 	bl	80001d0 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8002234:	783b      	ldrb	r3, [r7, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	461c      	mov	r4, r3
 800223c:	783b      	ldrb	r3, [r7, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	1d5a      	adds	r2, r3, #5
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	3302      	adds	r3, #2
 800224a:	2101      	movs	r1, #1
 800224c:	9100      	str	r1, [sp, #0]
 800224e:	4621      	mov	r1, r4
 8002250:	f7fe fcfe 	bl	8000c50 <drawBox>
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b087      	sub	sp, #28
 8002260:	af02      	add	r7, sp, #8
 8002262:	463b      	mov	r3, r7
 8002264:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fd ffb0 	bl	80001d0 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8002274:	783b      	ldrb	r3, [r7, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	461c      	mov	r4, r3
 800227c:	783b      	ldrb	r3, [r7, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	1d5a      	adds	r2, r3, #5
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	3302      	adds	r3, #2
 800228a:	2100      	movs	r1, #0
 800228c:	9100      	str	r1, [sp, #0]
 800228e:	4621      	mov	r1, r4
 8002290:	f7fe fcde 	bl	8000c50 <drawBox>
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022ac:	f7ff ff8a 	bl	80021c4 <drawButton>
	drawButton(btnList[1]);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3308      	adds	r3, #8
 80022b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022b8:	f7ff ff84 	bl	80021c4 <drawButton>
	drawButton(btnList[2]);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3310      	adds	r3, #16
 80022c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022c4:	f7ff ff7e 	bl	80021c4 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022d8:	f7ff ffa0 	bl	800221c <drawBtnAsSelected>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <drawHelpScreen>:


void drawHelpScreen(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 80022e8:	2105      	movs	r1, #5
 80022ea:	2046      	movs	r0, #70	; 0x46
 80022ec:	f7fe fc9e 	bl	8000c2c <gotoxy>
	printf("HELP SCREEN");
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <drawHelpScreen+0x24>)
 80022f2:	f000 fb09 	bl	8002908 <iprintf>
	gotoxy(60,7);
 80022f6:	2107      	movs	r1, #7
 80022f8:	203c      	movs	r0, #60	; 0x3c
 80022fa:	f7fe fc97 	bl	8000c2c <gotoxy>
	printf("Tag dig dog sammen mand!");
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <drawHelpScreen+0x28>)
 8002300:	f000 fb02 	bl	8002908 <iprintf>

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	08003cf4 	.word	0x08003cf4
 800230c:	08003d00 	.word	0x08003d00

08002310 <drawWindow>:

void drawWindow(){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8002316:	2300      	movs	r3, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	232b      	movs	r3, #43	; 0x2b
 800231c:	229c      	movs	r2, #156	; 0x9c
 800231e:	2101      	movs	r1, #1
 8002320:	2001      	movs	r0, #1
 8002322:	f7fe fc95 	bl	8000c50 <drawBox>
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState, uint8_t* dir){
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

	if(fpToInt(gameState->spaceship.position.x)>=screenWidth-1){
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f843 	bl	80013c6 <fpToInt>
 8002340:	4603      	mov	r3, r0
 8002342:	2b9a      	cmp	r3, #154	; 0x9a
 8002344:	dd03      	ble.n	800234e <updateSpaceship+0x22>
		*dir =1;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e00a      	b.n	8002364 <updateSpaceship+0x38>
	} else if(fpToInt(gameState->spaceship.position.x)<=2){
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f837 	bl	80013c6 <fpToInt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b02      	cmp	r3, #2
 800235c:	dc02      	bgt.n	8002364 <updateSpaceship+0x38>
		*dir =0;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	}
	if(*dir==0){
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <updateSpaceship+0x54>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68dc      	ldr	r4, [r3, #12]
 8002370:	2002      	movs	r0, #2
 8002372:	f7ff f813 	bl	800139c <intToFp>
 8002376:	4603      	mov	r3, r0
 8002378:	18e2      	adds	r2, r4, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
}
 800237e:	e008      	b.n	8002392 <updateSpaceship+0x66>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68dc      	ldr	r4, [r3, #12]
 8002384:	2002      	movs	r0, #2
 8002386:	f7ff f809 	bl	800139c <intToFp>
 800238a:	4603      	mov	r3, r0
 800238c:	1ae2      	subs	r2, r4, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	615a      	str	r2, [r3, #20]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
	...

0800239c <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b092      	sub	sp, #72	; 0x48
 80023a0:	af04      	add	r7, sp, #16
 80023a2:	6078      	str	r0, [r7, #4]
	uint8_t firingPeriod = gameState->spaceship.firingPeriod;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7f5b      	ldrb	r3, [r3, #29]
 80023a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	if(runtime-gameState->spaceship.lastShotTime>=firingPeriod){//
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <shootSpaceship+0xac>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d33f      	bcc.n	800243e <shootSpaceship+0xa2>
		gameState->spaceship.lastShotTime = runtime;
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <shootSpaceship+0xac>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),intToFp(-3)};
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe ffe8 	bl	800139c <intToFp>
 80023cc:	4603      	mov	r3, r0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d0:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80023d4:	f7fe ffe2 	bl	800139c <intToFp>
 80023d8:	4603      	mov	r3, r0
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691c      	ldr	r4, [r3, #16]
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7fe ffd8 	bl	800139c <intToFp>
 80023ec:	4603      	mov	r3, r0
 80023ee:	1ae3      	subs	r3, r4, r3
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800240a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800241a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800241e:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletHead), bullet);
 8002422:	687d      	ldr	r5, [r7, #4]
 8002424:	466c      	mov	r4, sp
 8002426:	f107 0318 	add.w	r3, r7, #24
 800242a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800242e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002438:	4628      	mov	r0, r5
 800243a:	f7ff fb51 	bl	8001ae0 <appendBullet>
	}
}
 800243e:	bf00      	nop
 8002440:	3738      	adds	r7, #56	; 0x38
 8002442:	46bd      	mov	sp, r7
 8002444:	bdb0      	pop	{r4, r5, r7, pc}
 8002446:	bf00      	nop
 8002448:	200001c8 	.word	0x200001c8

0800244c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002466:	f000 f94f 	bl	8002708 <__errno>
 800246a:	4603      	mov	r3, r0
 800246c:	2216      	movs	r2, #22
 800246e:	601a      	str	r2, [r3, #0]
	return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_kill>
	while (1) {}		/* Make sure we hang here */
 800248e:	e7fe      	b.n	800248e <_exit+0x12>

08002490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00a      	b.n	80024b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024a2:	f3af 8000 	nop.w
 80024a6:	4601      	mov	r1, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbf0      	blt.n	80024a2 <_read+0x12>
	}

return len;
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	return -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f2:	605a      	str	r2, [r3, #4]
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_isatty>:

int _isatty(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return 1;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <_sbrk+0x50>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <_sbrk+0x16>
		heap_end = &end;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <_sbrk+0x50>)
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <_sbrk+0x54>)
 8002548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <_sbrk+0x50>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <_sbrk+0x50>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	466a      	mov	r2, sp
 800255a:	4293      	cmp	r3, r2
 800255c:	d907      	bls.n	800256e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800255e:	f000 f8d3 	bl	8002708 <__errno>
 8002562:	4603      	mov	r3, r0
 8002564:	220c      	movs	r2, #12
 8002566:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256c:	e006      	b.n	800257c <_sbrk+0x48>
	}

	heap_end += incr;
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <_sbrk+0x50>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <_sbrk+0x50>)
 8002578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200001bc 	.word	0x200001bc
 8002588:	200001e0 	.word	0x200001e0

0800258c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <SystemInit+0x84>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <SystemInit+0x84>)
 8002598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800259c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <SystemInit+0x88>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <SystemInit+0x88>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <SystemInit+0x88>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <SystemInit+0x88>)
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <SystemInit+0x8c>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <SystemInit+0x88>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <SystemInit+0x88>)
 80025be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <SystemInit+0x88>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <SystemInit+0x88>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <SystemInit+0x88>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <SystemInit+0x88>)
 80025da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025de:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <SystemInit+0x88>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <SystemInit+0x88>)
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <SystemInit+0x88>)
 80025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f0:	4908      	ldr	r1, [pc, #32]	; (8002614 <SystemInit+0x88>)
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <SystemInit+0x90>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <SystemInit+0x88>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80025fe:	f000 f80f 	bl	8002620 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <SystemInit+0x84>)
 8002604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002608:	609a      	str	r2, [r3, #8]
#endif  
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	40021000 	.word	0x40021000
 8002618:	f87fc00c 	.word	0xf87fc00c
 800261c:	ff00fccc 	.word	0xff00fccc

08002620 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <SetSysClock+0x8c>)
 8002626:	2212      	movs	r2, #18
 8002628:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <SetSysClock+0x90>)
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <SetSysClock+0x90>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <SetSysClock+0x90>)
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <SetSysClock+0x90>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <SetSysClock+0x90>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <SetSysClock+0x90>)
 8002640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002644:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <SetSysClock+0x90>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <SetSysClock+0x90>)
 800264c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002650:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <SetSysClock+0x90>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <SetSysClock+0x90>)
 8002658:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800265c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <SetSysClock+0x90>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <SetSysClock+0x90>)
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800266a:	bf00      	nop
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <SetSysClock+0x90>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f9      	beq.n	800266c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <SetSysClock+0x90>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <SetSysClock+0x90>)
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <SetSysClock+0x90>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <SetSysClock+0x90>)
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002690:	bf00      	nop
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <SetSysClock+0x90>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1f9      	bne.n	8002692 <SetSysClock+0x72>
  {
  }
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000

080026b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ba:	490e      	ldr	r1, [pc, #56]	; (80026f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <LoopForever+0xe>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d0:	4c0b      	ldr	r4, [pc, #44]	; (8002700 <LoopForever+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026de:	f7ff ff55 	bl	800258c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026e2:	f000 f82b 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e6:	f7ff fb87 	bl	8001df8 <main>

080026ea <LoopForever>:

LoopForever:
    b LoopForever
 80026ea:	e7fe      	b.n	80026ea <LoopForever>
  ldr   r0, =_estack
 80026ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80026f8:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 80026fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002700:	200001dc 	.word	0x200001dc

08002704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC1_2_IRQHandler>
	...

08002708 <__errno>:
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <__errno+0x8>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000002c 	.word	0x2000002c

08002714 <exit>:
 8002714:	b508      	push	{r3, lr}
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <exit+0x20>)
 8002718:	4604      	mov	r4, r0
 800271a:	b113      	cbz	r3, 8002722 <exit+0xe>
 800271c:	2100      	movs	r1, #0
 800271e:	f3af 8000 	nop.w
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <exit+0x24>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002728:	b103      	cbz	r3, 800272c <exit+0x18>
 800272a:	4798      	blx	r3
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff fea5 	bl	800247c <_exit>
 8002732:	bf00      	nop
 8002734:	00000000 	.word	0x00000000
 8002738:	08003d34 	.word	0x08003d34

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	4d0d      	ldr	r5, [pc, #52]	; (8002774 <__libc_init_array+0x38>)
 8002740:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002742:	1b64      	subs	r4, r4, r5
 8002744:	10a4      	asrs	r4, r4, #2
 8002746:	2600      	movs	r6, #0
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	4d0b      	ldr	r5, [pc, #44]	; (800277c <__libc_init_array+0x40>)
 800274e:	4c0c      	ldr	r4, [pc, #48]	; (8002780 <__libc_init_array+0x44>)
 8002750:	f001 fa34 	bl	8003bbc <_init>
 8002754:	1b64      	subs	r4, r4, r5
 8002756:	10a4      	asrs	r4, r4, #2
 8002758:	2600      	movs	r6, #0
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	08003e80 	.word	0x08003e80
 8002778:	08003e80 	.word	0x08003e80
 800277c:	08003e80 	.word	0x08003e80
 8002780:	08003e84 	.word	0x08003e84

08002784 <malloc>:
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <malloc+0xc>)
 8002786:	4601      	mov	r1, r0
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	f000 b863 	b.w	8002854 <_malloc_r>
 800278e:	bf00      	nop
 8002790:	2000002c 	.word	0x2000002c

08002794 <free>:
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <free+0xc>)
 8002796:	4601      	mov	r1, r0
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	f000 b80b 	b.w	80027b4 <_free_r>
 800279e:	bf00      	nop
 80027a0:	2000002c 	.word	0x2000002c

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <_free_r>:
 80027b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027b6:	2900      	cmp	r1, #0
 80027b8:	d048      	beq.n	800284c <_free_r+0x98>
 80027ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027be:	9001      	str	r0, [sp, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f1a1 0404 	sub.w	r4, r1, #4
 80027c6:	bfb8      	it	lt
 80027c8:	18e4      	addlt	r4, r4, r3
 80027ca:	f000 fdc9 	bl	8003360 <__malloc_lock>
 80027ce:	4a20      	ldr	r2, [pc, #128]	; (8002850 <_free_r+0x9c>)
 80027d0:	9801      	ldr	r0, [sp, #4]
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	4615      	mov	r5, r2
 80027d6:	b933      	cbnz	r3, 80027e6 <_free_r+0x32>
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	6014      	str	r4, [r2, #0]
 80027dc:	b003      	add	sp, #12
 80027de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027e2:	f000 bdc3 	b.w	800336c <__malloc_unlock>
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	d90b      	bls.n	8002802 <_free_r+0x4e>
 80027ea:	6821      	ldr	r1, [r4, #0]
 80027ec:	1862      	adds	r2, r4, r1
 80027ee:	4293      	cmp	r3, r2
 80027f0:	bf04      	itt	eq
 80027f2:	681a      	ldreq	r2, [r3, #0]
 80027f4:	685b      	ldreq	r3, [r3, #4]
 80027f6:	6063      	str	r3, [r4, #4]
 80027f8:	bf04      	itt	eq
 80027fa:	1852      	addeq	r2, r2, r1
 80027fc:	6022      	streq	r2, [r4, #0]
 80027fe:	602c      	str	r4, [r5, #0]
 8002800:	e7ec      	b.n	80027dc <_free_r+0x28>
 8002802:	461a      	mov	r2, r3
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b10b      	cbz	r3, 800280c <_free_r+0x58>
 8002808:	42a3      	cmp	r3, r4
 800280a:	d9fa      	bls.n	8002802 <_free_r+0x4e>
 800280c:	6811      	ldr	r1, [r2, #0]
 800280e:	1855      	adds	r5, r2, r1
 8002810:	42a5      	cmp	r5, r4
 8002812:	d10b      	bne.n	800282c <_free_r+0x78>
 8002814:	6824      	ldr	r4, [r4, #0]
 8002816:	4421      	add	r1, r4
 8002818:	1854      	adds	r4, r2, r1
 800281a:	42a3      	cmp	r3, r4
 800281c:	6011      	str	r1, [r2, #0]
 800281e:	d1dd      	bne.n	80027dc <_free_r+0x28>
 8002820:	681c      	ldr	r4, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	6053      	str	r3, [r2, #4]
 8002826:	4421      	add	r1, r4
 8002828:	6011      	str	r1, [r2, #0]
 800282a:	e7d7      	b.n	80027dc <_free_r+0x28>
 800282c:	d902      	bls.n	8002834 <_free_r+0x80>
 800282e:	230c      	movs	r3, #12
 8002830:	6003      	str	r3, [r0, #0]
 8002832:	e7d3      	b.n	80027dc <_free_r+0x28>
 8002834:	6825      	ldr	r5, [r4, #0]
 8002836:	1961      	adds	r1, r4, r5
 8002838:	428b      	cmp	r3, r1
 800283a:	bf04      	itt	eq
 800283c:	6819      	ldreq	r1, [r3, #0]
 800283e:	685b      	ldreq	r3, [r3, #4]
 8002840:	6063      	str	r3, [r4, #4]
 8002842:	bf04      	itt	eq
 8002844:	1949      	addeq	r1, r1, r5
 8002846:	6021      	streq	r1, [r4, #0]
 8002848:	6054      	str	r4, [r2, #4]
 800284a:	e7c7      	b.n	80027dc <_free_r+0x28>
 800284c:	b003      	add	sp, #12
 800284e:	bd30      	pop	{r4, r5, pc}
 8002850:	200001c0 	.word	0x200001c0

08002854 <_malloc_r>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	1ccd      	adds	r5, r1, #3
 8002858:	f025 0503 	bic.w	r5, r5, #3
 800285c:	3508      	adds	r5, #8
 800285e:	2d0c      	cmp	r5, #12
 8002860:	bf38      	it	cc
 8002862:	250c      	movcc	r5, #12
 8002864:	2d00      	cmp	r5, #0
 8002866:	4606      	mov	r6, r0
 8002868:	db01      	blt.n	800286e <_malloc_r+0x1a>
 800286a:	42a9      	cmp	r1, r5
 800286c:	d903      	bls.n	8002876 <_malloc_r+0x22>
 800286e:	230c      	movs	r3, #12
 8002870:	6033      	str	r3, [r6, #0]
 8002872:	2000      	movs	r0, #0
 8002874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002876:	f000 fd73 	bl	8003360 <__malloc_lock>
 800287a:	4921      	ldr	r1, [pc, #132]	; (8002900 <_malloc_r+0xac>)
 800287c:	680a      	ldr	r2, [r1, #0]
 800287e:	4614      	mov	r4, r2
 8002880:	b99c      	cbnz	r4, 80028aa <_malloc_r+0x56>
 8002882:	4f20      	ldr	r7, [pc, #128]	; (8002904 <_malloc_r+0xb0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b923      	cbnz	r3, 8002892 <_malloc_r+0x3e>
 8002888:	4621      	mov	r1, r4
 800288a:	4630      	mov	r0, r6
 800288c:	f000 f94e 	bl	8002b2c <_sbrk_r>
 8002890:	6038      	str	r0, [r7, #0]
 8002892:	4629      	mov	r1, r5
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f949 	bl	8002b2c <_sbrk_r>
 800289a:	1c43      	adds	r3, r0, #1
 800289c:	d123      	bne.n	80028e6 <_malloc_r+0x92>
 800289e:	230c      	movs	r3, #12
 80028a0:	6033      	str	r3, [r6, #0]
 80028a2:	4630      	mov	r0, r6
 80028a4:	f000 fd62 	bl	800336c <__malloc_unlock>
 80028a8:	e7e3      	b.n	8002872 <_malloc_r+0x1e>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	1b5b      	subs	r3, r3, r5
 80028ae:	d417      	bmi.n	80028e0 <_malloc_r+0x8c>
 80028b0:	2b0b      	cmp	r3, #11
 80028b2:	d903      	bls.n	80028bc <_malloc_r+0x68>
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	441c      	add	r4, r3
 80028b8:	6025      	str	r5, [r4, #0]
 80028ba:	e004      	b.n	80028c6 <_malloc_r+0x72>
 80028bc:	6863      	ldr	r3, [r4, #4]
 80028be:	42a2      	cmp	r2, r4
 80028c0:	bf0c      	ite	eq
 80028c2:	600b      	streq	r3, [r1, #0]
 80028c4:	6053      	strne	r3, [r2, #4]
 80028c6:	4630      	mov	r0, r6
 80028c8:	f000 fd50 	bl	800336c <__malloc_unlock>
 80028cc:	f104 000b 	add.w	r0, r4, #11
 80028d0:	1d23      	adds	r3, r4, #4
 80028d2:	f020 0007 	bic.w	r0, r0, #7
 80028d6:	1ac2      	subs	r2, r0, r3
 80028d8:	d0cc      	beq.n	8002874 <_malloc_r+0x20>
 80028da:	1a1b      	subs	r3, r3, r0
 80028dc:	50a3      	str	r3, [r4, r2]
 80028de:	e7c9      	b.n	8002874 <_malloc_r+0x20>
 80028e0:	4622      	mov	r2, r4
 80028e2:	6864      	ldr	r4, [r4, #4]
 80028e4:	e7cc      	b.n	8002880 <_malloc_r+0x2c>
 80028e6:	1cc4      	adds	r4, r0, #3
 80028e8:	f024 0403 	bic.w	r4, r4, #3
 80028ec:	42a0      	cmp	r0, r4
 80028ee:	d0e3      	beq.n	80028b8 <_malloc_r+0x64>
 80028f0:	1a21      	subs	r1, r4, r0
 80028f2:	4630      	mov	r0, r6
 80028f4:	f000 f91a 	bl	8002b2c <_sbrk_r>
 80028f8:	3001      	adds	r0, #1
 80028fa:	d1dd      	bne.n	80028b8 <_malloc_r+0x64>
 80028fc:	e7cf      	b.n	800289e <_malloc_r+0x4a>
 80028fe:	bf00      	nop
 8002900:	200001c0 	.word	0x200001c0
 8002904:	200001c4 	.word	0x200001c4

08002908 <iprintf>:
 8002908:	b40f      	push	{r0, r1, r2, r3}
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <iprintf+0x2c>)
 800290c:	b513      	push	{r0, r1, r4, lr}
 800290e:	681c      	ldr	r4, [r3, #0]
 8002910:	b124      	cbz	r4, 800291c <iprintf+0x14>
 8002912:	69a3      	ldr	r3, [r4, #24]
 8002914:	b913      	cbnz	r3, 800291c <iprintf+0x14>
 8002916:	4620      	mov	r0, r4
 8002918:	f000 fbf8 	bl	800310c <__sinit>
 800291c:	ab05      	add	r3, sp, #20
 800291e:	9a04      	ldr	r2, [sp, #16]
 8002920:	68a1      	ldr	r1, [r4, #8]
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	4620      	mov	r0, r4
 8002926:	f000 fd51 	bl	80033cc <_vfiprintf_r>
 800292a:	b002      	add	sp, #8
 800292c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002930:	b004      	add	sp, #16
 8002932:	4770      	bx	lr
 8002934:	2000002c 	.word	0x2000002c

08002938 <putchar>:
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <putchar+0x28>)
 800293a:	b513      	push	{r0, r1, r4, lr}
 800293c:	681c      	ldr	r4, [r3, #0]
 800293e:	4601      	mov	r1, r0
 8002940:	b134      	cbz	r4, 8002950 <putchar+0x18>
 8002942:	69a3      	ldr	r3, [r4, #24]
 8002944:	b923      	cbnz	r3, 8002950 <putchar+0x18>
 8002946:	9001      	str	r0, [sp, #4]
 8002948:	4620      	mov	r0, r4
 800294a:	f000 fbdf 	bl	800310c <__sinit>
 800294e:	9901      	ldr	r1, [sp, #4]
 8002950:	68a2      	ldr	r2, [r4, #8]
 8002952:	4620      	mov	r0, r4
 8002954:	b002      	add	sp, #8
 8002956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800295a:	f000 bffb 	b.w	8003954 <_putc_r>
 800295e:	bf00      	nop
 8002960:	2000002c 	.word	0x2000002c

08002964 <_puts_r>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	460e      	mov	r6, r1
 8002968:	4605      	mov	r5, r0
 800296a:	b118      	cbz	r0, 8002974 <_puts_r+0x10>
 800296c:	6983      	ldr	r3, [r0, #24]
 800296e:	b90b      	cbnz	r3, 8002974 <_puts_r+0x10>
 8002970:	f000 fbcc 	bl	800310c <__sinit>
 8002974:	69ab      	ldr	r3, [r5, #24]
 8002976:	68ac      	ldr	r4, [r5, #8]
 8002978:	b913      	cbnz	r3, 8002980 <_puts_r+0x1c>
 800297a:	4628      	mov	r0, r5
 800297c:	f000 fbc6 	bl	800310c <__sinit>
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <_puts_r+0xd0>)
 8002982:	429c      	cmp	r4, r3
 8002984:	d120      	bne.n	80029c8 <_puts_r+0x64>
 8002986:	686c      	ldr	r4, [r5, #4]
 8002988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800298a:	07db      	lsls	r3, r3, #31
 800298c:	d405      	bmi.n	800299a <_puts_r+0x36>
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	0598      	lsls	r0, r3, #22
 8002992:	d402      	bmi.n	800299a <_puts_r+0x36>
 8002994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002996:	f000 fc7c 	bl	8003292 <__retarget_lock_acquire_recursive>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	0719      	lsls	r1, r3, #28
 800299e:	d51d      	bpl.n	80029dc <_puts_r+0x78>
 80029a0:	6923      	ldr	r3, [r4, #16]
 80029a2:	b1db      	cbz	r3, 80029dc <_puts_r+0x78>
 80029a4:	3e01      	subs	r6, #1
 80029a6:	68a3      	ldr	r3, [r4, #8]
 80029a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60a3      	str	r3, [r4, #8]
 80029b0:	bb39      	cbnz	r1, 8002a02 <_puts_r+0x9e>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da38      	bge.n	8002a28 <_puts_r+0xc4>
 80029b6:	4622      	mov	r2, r4
 80029b8:	210a      	movs	r1, #10
 80029ba:	4628      	mov	r0, r5
 80029bc:	f000 f9ae 	bl	8002d1c <__swbuf_r>
 80029c0:	3001      	adds	r0, #1
 80029c2:	d011      	beq.n	80029e8 <_puts_r+0x84>
 80029c4:	250a      	movs	r5, #10
 80029c6:	e011      	b.n	80029ec <_puts_r+0x88>
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <_puts_r+0xd4>)
 80029ca:	429c      	cmp	r4, r3
 80029cc:	d101      	bne.n	80029d2 <_puts_r+0x6e>
 80029ce:	68ac      	ldr	r4, [r5, #8]
 80029d0:	e7da      	b.n	8002988 <_puts_r+0x24>
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <_puts_r+0xd8>)
 80029d4:	429c      	cmp	r4, r3
 80029d6:	bf08      	it	eq
 80029d8:	68ec      	ldreq	r4, [r5, #12]
 80029da:	e7d5      	b.n	8002988 <_puts_r+0x24>
 80029dc:	4621      	mov	r1, r4
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f9ee 	bl	8002dc0 <__swsetup_r>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d0dd      	beq.n	80029a4 <_puts_r+0x40>
 80029e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80029ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ee:	07da      	lsls	r2, r3, #31
 80029f0:	d405      	bmi.n	80029fe <_puts_r+0x9a>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	059b      	lsls	r3, r3, #22
 80029f6:	d402      	bmi.n	80029fe <_puts_r+0x9a>
 80029f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029fa:	f000 fc4b 	bl	8003294 <__retarget_lock_release_recursive>
 80029fe:	4628      	mov	r0, r5
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da04      	bge.n	8002a10 <_puts_r+0xac>
 8002a06:	69a2      	ldr	r2, [r4, #24]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dc06      	bgt.n	8002a1a <_puts_r+0xb6>
 8002a0c:	290a      	cmp	r1, #10
 8002a0e:	d004      	beq.n	8002a1a <_puts_r+0xb6>
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	6022      	str	r2, [r4, #0]
 8002a16:	7019      	strb	r1, [r3, #0]
 8002a18:	e7c5      	b.n	80029a6 <_puts_r+0x42>
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	f000 f97d 	bl	8002d1c <__swbuf_r>
 8002a22:	3001      	adds	r0, #1
 8002a24:	d1bf      	bne.n	80029a6 <_puts_r+0x42>
 8002a26:	e7df      	b.n	80029e8 <_puts_r+0x84>
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	250a      	movs	r5, #10
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	6022      	str	r2, [r4, #0]
 8002a30:	701d      	strb	r5, [r3, #0]
 8002a32:	e7db      	b.n	80029ec <_puts_r+0x88>
 8002a34:	08003e0c 	.word	0x08003e0c
 8002a38:	08003e2c 	.word	0x08003e2c
 8002a3c:	08003dec 	.word	0x08003dec

08002a40 <puts>:
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <puts+0xc>)
 8002a42:	4601      	mov	r1, r0
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	f7ff bf8d 	b.w	8002964 <_puts_r>
 8002a4a:	bf00      	nop
 8002a4c:	2000002c 	.word	0x2000002c

08002a50 <srand>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <srand+0x44>)
 8002a54:	681d      	ldr	r5, [r3, #0]
 8002a56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a58:	4604      	mov	r4, r0
 8002a5a:	b9b3      	cbnz	r3, 8002a8a <srand+0x3a>
 8002a5c:	2018      	movs	r0, #24
 8002a5e:	f7ff fe91 	bl	8002784 <malloc>
 8002a62:	4602      	mov	r2, r0
 8002a64:	63a8      	str	r0, [r5, #56]	; 0x38
 8002a66:	b920      	cbnz	r0, 8002a72 <srand+0x22>
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <srand+0x48>)
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <srand+0x4c>)
 8002a6c:	2142      	movs	r1, #66	; 0x42
 8002a6e:	f000 fa15 	bl	8002e9c <__assert_func>
 8002a72:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <srand+0x50>)
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <srand+0x54>)
 8002a76:	e9c0 1300 	strd	r1, r3, [r0]
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <srand+0x58>)
 8002a7c:	6083      	str	r3, [r0, #8]
 8002a7e:	230b      	movs	r3, #11
 8002a80:	8183      	strh	r3, [r0, #12]
 8002a82:	2100      	movs	r1, #0
 8002a84:	2001      	movs	r0, #1
 8002a86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611c      	str	r4, [r3, #16]
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	bd38      	pop	{r3, r4, r5, pc}
 8002a94:	2000002c 	.word	0x2000002c
 8002a98:	08003d38 	.word	0x08003d38
 8002a9c:	08003d4f 	.word	0x08003d4f
 8002aa0:	abcd330e 	.word	0xabcd330e
 8002aa4:	e66d1234 	.word	0xe66d1234
 8002aa8:	0005deec 	.word	0x0005deec

08002aac <rand>:
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <rand+0x60>)
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ab4:	b9b3      	cbnz	r3, 8002ae4 <rand+0x38>
 8002ab6:	2018      	movs	r0, #24
 8002ab8:	f7ff fe64 	bl	8002784 <malloc>
 8002abc:	63a0      	str	r0, [r4, #56]	; 0x38
 8002abe:	b928      	cbnz	r0, 8002acc <rand+0x20>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <rand+0x64>)
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <rand+0x68>)
 8002ac6:	214e      	movs	r1, #78	; 0x4e
 8002ac8:	f000 f9e8 	bl	8002e9c <__assert_func>
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <rand+0x6c>)
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <rand+0x70>)
 8002ad0:	e9c0 2300 	strd	r2, r3, [r0]
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <rand+0x74>)
 8002ad6:	6083      	str	r3, [r0, #8]
 8002ad8:	230b      	movs	r3, #11
 8002ada:	8183      	strh	r3, [r0, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002ae4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ae6:	480f      	ldr	r0, [pc, #60]	; (8002b24 <rand+0x78>)
 8002ae8:	690a      	ldr	r2, [r1, #16]
 8002aea:	694b      	ldr	r3, [r1, #20]
 8002aec:	4c0e      	ldr	r4, [pc, #56]	; (8002b28 <rand+0x7c>)
 8002aee:	4350      	muls	r0, r2
 8002af0:	fb04 0003 	mla	r0, r4, r3, r0
 8002af4:	fba2 3404 	umull	r3, r4, r2, r4
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4404      	add	r4, r0
 8002afc:	f144 0000 	adc.w	r0, r4, #0
 8002b00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002b04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000002c 	.word	0x2000002c
 8002b10:	08003d38 	.word	0x08003d38
 8002b14:	08003d4f 	.word	0x08003d4f
 8002b18:	abcd330e 	.word	0xabcd330e
 8002b1c:	e66d1234 	.word	0xe66d1234
 8002b20:	0005deec 	.word	0x0005deec
 8002b24:	5851f42d 	.word	0x5851f42d
 8002b28:	4c957f2d 	.word	0x4c957f2d

08002b2c <_sbrk_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4d06      	ldr	r5, [pc, #24]	; (8002b48 <_sbrk_r+0x1c>)
 8002b30:	2300      	movs	r3, #0
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f7ff fcfc 	bl	8002534 <_sbrk>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d102      	bne.n	8002b46 <_sbrk_r+0x1a>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	b103      	cbz	r3, 8002b46 <_sbrk_r+0x1a>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	200001d8 	.word	0x200001d8

08002b4c <setbuf>:
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b52:	bf0c      	ite	eq
 8002b54:	2202      	moveq	r2, #2
 8002b56:	2200      	movne	r2, #0
 8002b58:	f000 b800 	b.w	8002b5c <setvbuf>

08002b5c <setvbuf>:
 8002b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b60:	461d      	mov	r5, r3
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <setvbuf+0x17c>)
 8002b64:	681f      	ldr	r7, [r3, #0]
 8002b66:	4604      	mov	r4, r0
 8002b68:	460e      	mov	r6, r1
 8002b6a:	4690      	mov	r8, r2
 8002b6c:	b127      	cbz	r7, 8002b78 <setvbuf+0x1c>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	b913      	cbnz	r3, 8002b78 <setvbuf+0x1c>
 8002b72:	4638      	mov	r0, r7
 8002b74:	f000 faca 	bl	800310c <__sinit>
 8002b78:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <setvbuf+0x180>)
 8002b7a:	429c      	cmp	r4, r3
 8002b7c:	d167      	bne.n	8002c4e <setvbuf+0xf2>
 8002b7e:	687c      	ldr	r4, [r7, #4]
 8002b80:	f1b8 0f02 	cmp.w	r8, #2
 8002b84:	d006      	beq.n	8002b94 <setvbuf+0x38>
 8002b86:	f1b8 0f01 	cmp.w	r8, #1
 8002b8a:	f200 809f 	bhi.w	8002ccc <setvbuf+0x170>
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	f2c0 809c 	blt.w	8002ccc <setvbuf+0x170>
 8002b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b96:	07db      	lsls	r3, r3, #31
 8002b98:	d405      	bmi.n	8002ba6 <setvbuf+0x4a>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	0598      	lsls	r0, r3, #22
 8002b9e:	d402      	bmi.n	8002ba6 <setvbuf+0x4a>
 8002ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ba2:	f000 fb76 	bl	8003292 <__retarget_lock_acquire_recursive>
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	4638      	mov	r0, r7
 8002baa:	f000 fa1b 	bl	8002fe4 <_fflush_r>
 8002bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bb0:	b141      	cbz	r1, 8002bc4 <setvbuf+0x68>
 8002bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bb6:	4299      	cmp	r1, r3
 8002bb8:	d002      	beq.n	8002bc0 <setvbuf+0x64>
 8002bba:	4638      	mov	r0, r7
 8002bbc:	f7ff fdfa 	bl	80027b4 <_free_r>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6363      	str	r3, [r4, #52]	; 0x34
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61a3      	str	r3, [r4, #24]
 8002bc8:	6063      	str	r3, [r4, #4]
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	0619      	lsls	r1, r3, #24
 8002bce:	d503      	bpl.n	8002bd8 <setvbuf+0x7c>
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f7ff fdee 	bl	80027b4 <_free_r>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f1b8 0f02 	cmp.w	r8, #2
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	d06c      	beq.n	8002cc4 <setvbuf+0x168>
 8002bea:	ab01      	add	r3, sp, #4
 8002bec:	466a      	mov	r2, sp
 8002bee:	4621      	mov	r1, r4
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	f000 fb50 	bl	8003296 <__swhatbuf_r>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	4318      	orrs	r0, r3
 8002bfa:	81a0      	strh	r0, [r4, #12]
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d130      	bne.n	8002c62 <setvbuf+0x106>
 8002c00:	9d00      	ldr	r5, [sp, #0]
 8002c02:	4628      	mov	r0, r5
 8002c04:	f7ff fdbe 	bl	8002784 <malloc>
 8002c08:	4606      	mov	r6, r0
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d155      	bne.n	8002cba <setvbuf+0x15e>
 8002c0e:	f8dd 9000 	ldr.w	r9, [sp]
 8002c12:	45a9      	cmp	r9, r5
 8002c14:	d14a      	bne.n	8002cac <setvbuf+0x150>
 8002c16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60a2      	str	r2, [r4, #8]
 8002c1e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002c22:	6022      	str	r2, [r4, #0]
 8002c24:	6122      	str	r2, [r4, #16]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c2c:	6162      	str	r2, [r4, #20]
 8002c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	07d2      	lsls	r2, r2, #31
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	d405      	bmi.n	8002c46 <setvbuf+0xea>
 8002c3a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c3e:	d102      	bne.n	8002c46 <setvbuf+0xea>
 8002c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c42:	f000 fb27 	bl	8003294 <__retarget_lock_release_recursive>
 8002c46:	4628      	mov	r0, r5
 8002c48:	b003      	add	sp, #12
 8002c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <setvbuf+0x184>)
 8002c50:	429c      	cmp	r4, r3
 8002c52:	d101      	bne.n	8002c58 <setvbuf+0xfc>
 8002c54:	68bc      	ldr	r4, [r7, #8]
 8002c56:	e793      	b.n	8002b80 <setvbuf+0x24>
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <setvbuf+0x188>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	bf08      	it	eq
 8002c5e:	68fc      	ldreq	r4, [r7, #12]
 8002c60:	e78e      	b.n	8002b80 <setvbuf+0x24>
 8002c62:	2e00      	cmp	r6, #0
 8002c64:	d0cd      	beq.n	8002c02 <setvbuf+0xa6>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	b913      	cbnz	r3, 8002c70 <setvbuf+0x114>
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f000 fa4e 	bl	800310c <__sinit>
 8002c70:	f1b8 0f01 	cmp.w	r8, #1
 8002c74:	bf08      	it	eq
 8002c76:	89a3      	ldrheq	r3, [r4, #12]
 8002c78:	6026      	str	r6, [r4, #0]
 8002c7a:	bf04      	itt	eq
 8002c7c:	f043 0301 	orreq.w	r3, r3, #1
 8002c80:	81a3      	strheq	r3, [r4, #12]
 8002c82:	89a2      	ldrh	r2, [r4, #12]
 8002c84:	f012 0308 	ands.w	r3, r2, #8
 8002c88:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002c8c:	d01c      	beq.n	8002cc8 <setvbuf+0x16c>
 8002c8e:	07d3      	lsls	r3, r2, #31
 8002c90:	bf41      	itttt	mi
 8002c92:	2300      	movmi	r3, #0
 8002c94:	426d      	negmi	r5, r5
 8002c96:	60a3      	strmi	r3, [r4, #8]
 8002c98:	61a5      	strmi	r5, [r4, #24]
 8002c9a:	bf58      	it	pl
 8002c9c:	60a5      	strpl	r5, [r4, #8]
 8002c9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002ca0:	f015 0501 	ands.w	r5, r5, #1
 8002ca4:	d115      	bne.n	8002cd2 <setvbuf+0x176>
 8002ca6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002caa:	e7c8      	b.n	8002c3e <setvbuf+0xe2>
 8002cac:	4648      	mov	r0, r9
 8002cae:	f7ff fd69 	bl	8002784 <malloc>
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0ae      	beq.n	8002c16 <setvbuf+0xba>
 8002cb8:	464d      	mov	r5, r9
 8002cba:	89a3      	ldrh	r3, [r4, #12]
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	e7d0      	b.n	8002c66 <setvbuf+0x10a>
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	e7a8      	b.n	8002c1a <setvbuf+0xbe>
 8002cc8:	60a3      	str	r3, [r4, #8]
 8002cca:	e7e8      	b.n	8002c9e <setvbuf+0x142>
 8002ccc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002cd0:	e7b9      	b.n	8002c46 <setvbuf+0xea>
 8002cd2:	2500      	movs	r5, #0
 8002cd4:	e7b7      	b.n	8002c46 <setvbuf+0xea>
 8002cd6:	bf00      	nop
 8002cd8:	2000002c 	.word	0x2000002c
 8002cdc:	08003e0c 	.word	0x08003e0c
 8002ce0:	08003e2c 	.word	0x08003e2c
 8002ce4:	08003dec 	.word	0x08003dec

08002ce8 <time>:
 8002ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <time+0x30>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	4669      	mov	r1, sp
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f000 faba 	bl	800326c <_gettimeofday_r>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	bfbe      	ittt	lt
 8002cfc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002d00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d04:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d0c:	b10c      	cbz	r4, 8002d12 <time+0x2a>
 8002d0e:	e9c4 0100 	strd	r0, r1, [r4]
 8002d12:	b004      	add	sp, #16
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	bf00      	nop
 8002d18:	2000002c 	.word	0x2000002c

08002d1c <__swbuf_r>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	460e      	mov	r6, r1
 8002d20:	4614      	mov	r4, r2
 8002d22:	4605      	mov	r5, r0
 8002d24:	b118      	cbz	r0, 8002d2e <__swbuf_r+0x12>
 8002d26:	6983      	ldr	r3, [r0, #24]
 8002d28:	b90b      	cbnz	r3, 8002d2e <__swbuf_r+0x12>
 8002d2a:	f000 f9ef 	bl	800310c <__sinit>
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <__swbuf_r+0x98>)
 8002d30:	429c      	cmp	r4, r3
 8002d32:	d12b      	bne.n	8002d8c <__swbuf_r+0x70>
 8002d34:	686c      	ldr	r4, [r5, #4]
 8002d36:	69a3      	ldr	r3, [r4, #24]
 8002d38:	60a3      	str	r3, [r4, #8]
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	071a      	lsls	r2, r3, #28
 8002d3e:	d52f      	bpl.n	8002da0 <__swbuf_r+0x84>
 8002d40:	6923      	ldr	r3, [r4, #16]
 8002d42:	b36b      	cbz	r3, 8002da0 <__swbuf_r+0x84>
 8002d44:	6923      	ldr	r3, [r4, #16]
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	6963      	ldr	r3, [r4, #20]
 8002d4c:	b2f6      	uxtb	r6, r6
 8002d4e:	4283      	cmp	r3, r0
 8002d50:	4637      	mov	r7, r6
 8002d52:	dc04      	bgt.n	8002d5e <__swbuf_r+0x42>
 8002d54:	4621      	mov	r1, r4
 8002d56:	4628      	mov	r0, r5
 8002d58:	f000 f944 	bl	8002fe4 <_fflush_r>
 8002d5c:	bb30      	cbnz	r0, 8002dac <__swbuf_r+0x90>
 8002d5e:	68a3      	ldr	r3, [r4, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60a3      	str	r3, [r4, #8]
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	6022      	str	r2, [r4, #0]
 8002d6a:	701e      	strb	r6, [r3, #0]
 8002d6c:	6963      	ldr	r3, [r4, #20]
 8002d6e:	3001      	adds	r0, #1
 8002d70:	4283      	cmp	r3, r0
 8002d72:	d004      	beq.n	8002d7e <__swbuf_r+0x62>
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	07db      	lsls	r3, r3, #31
 8002d78:	d506      	bpl.n	8002d88 <__swbuf_r+0x6c>
 8002d7a:	2e0a      	cmp	r6, #10
 8002d7c:	d104      	bne.n	8002d88 <__swbuf_r+0x6c>
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f92f 	bl	8002fe4 <_fflush_r>
 8002d86:	b988      	cbnz	r0, 8002dac <__swbuf_r+0x90>
 8002d88:	4638      	mov	r0, r7
 8002d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <__swbuf_r+0x9c>)
 8002d8e:	429c      	cmp	r4, r3
 8002d90:	d101      	bne.n	8002d96 <__swbuf_r+0x7a>
 8002d92:	68ac      	ldr	r4, [r5, #8]
 8002d94:	e7cf      	b.n	8002d36 <__swbuf_r+0x1a>
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <__swbuf_r+0xa0>)
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	bf08      	it	eq
 8002d9c:	68ec      	ldreq	r4, [r5, #12]
 8002d9e:	e7ca      	b.n	8002d36 <__swbuf_r+0x1a>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f80c 	bl	8002dc0 <__swsetup_r>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d0cb      	beq.n	8002d44 <__swbuf_r+0x28>
 8002dac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002db0:	e7ea      	b.n	8002d88 <__swbuf_r+0x6c>
 8002db2:	bf00      	nop
 8002db4:	08003e0c 	.word	0x08003e0c
 8002db8:	08003e2c 	.word	0x08003e2c
 8002dbc:	08003dec 	.word	0x08003dec

08002dc0 <__swsetup_r>:
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <__swsetup_r+0xcc>)
 8002dc2:	b570      	push	{r4, r5, r6, lr}
 8002dc4:	681d      	ldr	r5, [r3, #0]
 8002dc6:	4606      	mov	r6, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	b125      	cbz	r5, 8002dd6 <__swsetup_r+0x16>
 8002dcc:	69ab      	ldr	r3, [r5, #24]
 8002dce:	b913      	cbnz	r3, 8002dd6 <__swsetup_r+0x16>
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f000 f99b 	bl	800310c <__sinit>
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <__swsetup_r+0xd0>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d10f      	bne.n	8002dfc <__swsetup_r+0x3c>
 8002ddc:	686c      	ldr	r4, [r5, #4]
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002de4:	0719      	lsls	r1, r3, #28
 8002de6:	d42c      	bmi.n	8002e42 <__swsetup_r+0x82>
 8002de8:	06dd      	lsls	r5, r3, #27
 8002dea:	d411      	bmi.n	8002e10 <__swsetup_r+0x50>
 8002dec:	2309      	movs	r3, #9
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002df4:	81a3      	strh	r3, [r4, #12]
 8002df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dfa:	e03e      	b.n	8002e7a <__swsetup_r+0xba>
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <__swsetup_r+0xd4>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d101      	bne.n	8002e06 <__swsetup_r+0x46>
 8002e02:	68ac      	ldr	r4, [r5, #8]
 8002e04:	e7eb      	b.n	8002dde <__swsetup_r+0x1e>
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <__swsetup_r+0xd8>)
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	bf08      	it	eq
 8002e0c:	68ec      	ldreq	r4, [r5, #12]
 8002e0e:	e7e6      	b.n	8002dde <__swsetup_r+0x1e>
 8002e10:	0758      	lsls	r0, r3, #29
 8002e12:	d512      	bpl.n	8002e3a <__swsetup_r+0x7a>
 8002e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e16:	b141      	cbz	r1, 8002e2a <__swsetup_r+0x6a>
 8002e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e1c:	4299      	cmp	r1, r3
 8002e1e:	d002      	beq.n	8002e26 <__swsetup_r+0x66>
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7ff fcc7 	bl	80027b4 <_free_r>
 8002e26:	2300      	movs	r3, #0
 8002e28:	6363      	str	r3, [r4, #52]	; 0x34
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e30:	81a3      	strh	r3, [r4, #12]
 8002e32:	2300      	movs	r3, #0
 8002e34:	6063      	str	r3, [r4, #4]
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	81a3      	strh	r3, [r4, #12]
 8002e42:	6923      	ldr	r3, [r4, #16]
 8002e44:	b94b      	cbnz	r3, 8002e5a <__swsetup_r+0x9a>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d003      	beq.n	8002e5a <__swsetup_r+0x9a>
 8002e52:	4621      	mov	r1, r4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f000 fa43 	bl	80032e0 <__smakebuf_r>
 8002e5a:	89a0      	ldrh	r0, [r4, #12]
 8002e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e60:	f010 0301 	ands.w	r3, r0, #1
 8002e64:	d00a      	beq.n	8002e7c <__swsetup_r+0xbc>
 8002e66:	2300      	movs	r3, #0
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	6963      	ldr	r3, [r4, #20]
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	61a3      	str	r3, [r4, #24]
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	b943      	cbnz	r3, 8002e86 <__swsetup_r+0xc6>
 8002e74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e78:	d1ba      	bne.n	8002df0 <__swsetup_r+0x30>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	0781      	lsls	r1, r0, #30
 8002e7e:	bf58      	it	pl
 8002e80:	6963      	ldrpl	r3, [r4, #20]
 8002e82:	60a3      	str	r3, [r4, #8]
 8002e84:	e7f4      	b.n	8002e70 <__swsetup_r+0xb0>
 8002e86:	2000      	movs	r0, #0
 8002e88:	e7f7      	b.n	8002e7a <__swsetup_r+0xba>
 8002e8a:	bf00      	nop
 8002e8c:	2000002c 	.word	0x2000002c
 8002e90:	08003e0c 	.word	0x08003e0c
 8002e94:	08003e2c 	.word	0x08003e2c
 8002e98:	08003dec 	.word	0x08003dec

08002e9c <__assert_func>:
 8002e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <__assert_func+0x2c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	68d8      	ldr	r0, [r3, #12]
 8002eaa:	b14c      	cbz	r4, 8002ec0 <__assert_func+0x24>
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <__assert_func+0x30>)
 8002eae:	9100      	str	r1, [sp, #0]
 8002eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002eb4:	4906      	ldr	r1, [pc, #24]	; (8002ed0 <__assert_func+0x34>)
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	f000 f9a6 	bl	8003208 <fiprintf>
 8002ebc:	f000 fdd5 	bl	8003a6a <abort>
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__assert_func+0x38>)
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	e7f3      	b.n	8002eae <__assert_func+0x12>
 8002ec6:	bf00      	nop
 8002ec8:	2000002c 	.word	0x2000002c
 8002ecc:	08003dae 	.word	0x08003dae
 8002ed0:	08003dbb 	.word	0x08003dbb
 8002ed4:	08003de9 	.word	0x08003de9

08002ed8 <__sflush_r>:
 8002ed8:	898a      	ldrh	r2, [r1, #12]
 8002eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ede:	4605      	mov	r5, r0
 8002ee0:	0710      	lsls	r0, r2, #28
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	d458      	bmi.n	8002f98 <__sflush_r+0xc0>
 8002ee6:	684b      	ldr	r3, [r1, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dc05      	bgt.n	8002ef8 <__sflush_r+0x20>
 8002eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dc02      	bgt.n	8002ef8 <__sflush_r+0x20>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	d0f9      	beq.n	8002ef2 <__sflush_r+0x1a>
 8002efe:	2300      	movs	r3, #0
 8002f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f04:	682f      	ldr	r7, [r5, #0]
 8002f06:	602b      	str	r3, [r5, #0]
 8002f08:	d032      	beq.n	8002f70 <__sflush_r+0x98>
 8002f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	075a      	lsls	r2, r3, #29
 8002f10:	d505      	bpl.n	8002f1e <__sflush_r+0x46>
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	1ac0      	subs	r0, r0, r3
 8002f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f18:	b10b      	cbz	r3, 8002f1e <__sflush_r+0x46>
 8002f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f1c:	1ac0      	subs	r0, r0, r3
 8002f1e:	2300      	movs	r3, #0
 8002f20:	4602      	mov	r2, r0
 8002f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f24:	6a21      	ldr	r1, [r4, #32]
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b0      	blx	r6
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	d106      	bne.n	8002f3e <__sflush_r+0x66>
 8002f30:	6829      	ldr	r1, [r5, #0]
 8002f32:	291d      	cmp	r1, #29
 8002f34:	d82c      	bhi.n	8002f90 <__sflush_r+0xb8>
 8002f36:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <__sflush_r+0x108>)
 8002f38:	40ca      	lsrs	r2, r1
 8002f3a:	07d6      	lsls	r6, r2, #31
 8002f3c:	d528      	bpl.n	8002f90 <__sflush_r+0xb8>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	6062      	str	r2, [r4, #4]
 8002f42:	04d9      	lsls	r1, r3, #19
 8002f44:	6922      	ldr	r2, [r4, #16]
 8002f46:	6022      	str	r2, [r4, #0]
 8002f48:	d504      	bpl.n	8002f54 <__sflush_r+0x7c>
 8002f4a:	1c42      	adds	r2, r0, #1
 8002f4c:	d101      	bne.n	8002f52 <__sflush_r+0x7a>
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	b903      	cbnz	r3, 8002f54 <__sflush_r+0x7c>
 8002f52:	6560      	str	r0, [r4, #84]	; 0x54
 8002f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f56:	602f      	str	r7, [r5, #0]
 8002f58:	2900      	cmp	r1, #0
 8002f5a:	d0ca      	beq.n	8002ef2 <__sflush_r+0x1a>
 8002f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f60:	4299      	cmp	r1, r3
 8002f62:	d002      	beq.n	8002f6a <__sflush_r+0x92>
 8002f64:	4628      	mov	r0, r5
 8002f66:	f7ff fc25 	bl	80027b4 <_free_r>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f6e:	e7c1      	b.n	8002ef4 <__sflush_r+0x1c>
 8002f70:	6a21      	ldr	r1, [r4, #32]
 8002f72:	2301      	movs	r3, #1
 8002f74:	4628      	mov	r0, r5
 8002f76:	47b0      	blx	r6
 8002f78:	1c41      	adds	r1, r0, #1
 8002f7a:	d1c7      	bne.n	8002f0c <__sflush_r+0x34>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0c4      	beq.n	8002f0c <__sflush_r+0x34>
 8002f82:	2b1d      	cmp	r3, #29
 8002f84:	d001      	beq.n	8002f8a <__sflush_r+0xb2>
 8002f86:	2b16      	cmp	r3, #22
 8002f88:	d101      	bne.n	8002f8e <__sflush_r+0xb6>
 8002f8a:	602f      	str	r7, [r5, #0]
 8002f8c:	e7b1      	b.n	8002ef2 <__sflush_r+0x1a>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	e7ad      	b.n	8002ef4 <__sflush_r+0x1c>
 8002f98:	690f      	ldr	r7, [r1, #16]
 8002f9a:	2f00      	cmp	r7, #0
 8002f9c:	d0a9      	beq.n	8002ef2 <__sflush_r+0x1a>
 8002f9e:	0793      	lsls	r3, r2, #30
 8002fa0:	680e      	ldr	r6, [r1, #0]
 8002fa2:	bf08      	it	eq
 8002fa4:	694b      	ldreq	r3, [r1, #20]
 8002fa6:	600f      	str	r7, [r1, #0]
 8002fa8:	bf18      	it	ne
 8002faa:	2300      	movne	r3, #0
 8002fac:	eba6 0807 	sub.w	r8, r6, r7
 8002fb0:	608b      	str	r3, [r1, #8]
 8002fb2:	f1b8 0f00 	cmp.w	r8, #0
 8002fb6:	dd9c      	ble.n	8002ef2 <__sflush_r+0x1a>
 8002fb8:	6a21      	ldr	r1, [r4, #32]
 8002fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	463a      	mov	r2, r7
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b0      	blx	r6
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	dc06      	bgt.n	8002fd6 <__sflush_r+0xfe>
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd4:	e78e      	b.n	8002ef4 <__sflush_r+0x1c>
 8002fd6:	4407      	add	r7, r0
 8002fd8:	eba8 0800 	sub.w	r8, r8, r0
 8002fdc:	e7e9      	b.n	8002fb2 <__sflush_r+0xda>
 8002fde:	bf00      	nop
 8002fe0:	20400001 	.word	0x20400001

08002fe4 <_fflush_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	690b      	ldr	r3, [r1, #16]
 8002fe8:	4605      	mov	r5, r0
 8002fea:	460c      	mov	r4, r1
 8002fec:	b913      	cbnz	r3, 8002ff4 <_fflush_r+0x10>
 8002fee:	2500      	movs	r5, #0
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	b118      	cbz	r0, 8002ffe <_fflush_r+0x1a>
 8002ff6:	6983      	ldr	r3, [r0, #24]
 8002ff8:	b90b      	cbnz	r3, 8002ffe <_fflush_r+0x1a>
 8002ffa:	f000 f887 	bl	800310c <__sinit>
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <_fflush_r+0x6c>)
 8003000:	429c      	cmp	r4, r3
 8003002:	d11b      	bne.n	800303c <_fflush_r+0x58>
 8003004:	686c      	ldr	r4, [r5, #4]
 8003006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0ef      	beq.n	8002fee <_fflush_r+0xa>
 800300e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003010:	07d0      	lsls	r0, r2, #31
 8003012:	d404      	bmi.n	800301e <_fflush_r+0x3a>
 8003014:	0599      	lsls	r1, r3, #22
 8003016:	d402      	bmi.n	800301e <_fflush_r+0x3a>
 8003018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301a:	f000 f93a 	bl	8003292 <__retarget_lock_acquire_recursive>
 800301e:	4628      	mov	r0, r5
 8003020:	4621      	mov	r1, r4
 8003022:	f7ff ff59 	bl	8002ed8 <__sflush_r>
 8003026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003028:	07da      	lsls	r2, r3, #31
 800302a:	4605      	mov	r5, r0
 800302c:	d4e0      	bmi.n	8002ff0 <_fflush_r+0xc>
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	059b      	lsls	r3, r3, #22
 8003032:	d4dd      	bmi.n	8002ff0 <_fflush_r+0xc>
 8003034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003036:	f000 f92d 	bl	8003294 <__retarget_lock_release_recursive>
 800303a:	e7d9      	b.n	8002ff0 <_fflush_r+0xc>
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <_fflush_r+0x70>)
 800303e:	429c      	cmp	r4, r3
 8003040:	d101      	bne.n	8003046 <_fflush_r+0x62>
 8003042:	68ac      	ldr	r4, [r5, #8]
 8003044:	e7df      	b.n	8003006 <_fflush_r+0x22>
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <_fflush_r+0x74>)
 8003048:	429c      	cmp	r4, r3
 800304a:	bf08      	it	eq
 800304c:	68ec      	ldreq	r4, [r5, #12]
 800304e:	e7da      	b.n	8003006 <_fflush_r+0x22>
 8003050:	08003e0c 	.word	0x08003e0c
 8003054:	08003e2c 	.word	0x08003e2c
 8003058:	08003dec 	.word	0x08003dec

0800305c <std>:
 800305c:	2300      	movs	r3, #0
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	e9c0 3300 	strd	r3, r3, [r0]
 8003066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800306a:	6083      	str	r3, [r0, #8]
 800306c:	8181      	strh	r1, [r0, #12]
 800306e:	6643      	str	r3, [r0, #100]	; 0x64
 8003070:	81c2      	strh	r2, [r0, #14]
 8003072:	6183      	str	r3, [r0, #24]
 8003074:	4619      	mov	r1, r3
 8003076:	2208      	movs	r2, #8
 8003078:	305c      	adds	r0, #92	; 0x5c
 800307a:	f7ff fb93 	bl	80027a4 <memset>
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <std+0x38>)
 8003080:	6263      	str	r3, [r4, #36]	; 0x24
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <std+0x3c>)
 8003084:	62a3      	str	r3, [r4, #40]	; 0x28
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <std+0x40>)
 8003088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <std+0x44>)
 800308c:	6224      	str	r4, [r4, #32]
 800308e:	6323      	str	r3, [r4, #48]	; 0x30
 8003090:	bd10      	pop	{r4, pc}
 8003092:	bf00      	nop
 8003094:	080039e5 	.word	0x080039e5
 8003098:	08003a07 	.word	0x08003a07
 800309c:	08003a3f 	.word	0x08003a3f
 80030a0:	08003a63 	.word	0x08003a63

080030a4 <_cleanup_r>:
 80030a4:	4901      	ldr	r1, [pc, #4]	; (80030ac <_cleanup_r+0x8>)
 80030a6:	f000 b8c1 	b.w	800322c <_fwalk_reent>
 80030aa:	bf00      	nop
 80030ac:	08002fe5 	.word	0x08002fe5

080030b0 <__sfmoreglue>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	1e4a      	subs	r2, r1, #1
 80030b4:	2568      	movs	r5, #104	; 0x68
 80030b6:	4355      	muls	r5, r2
 80030b8:	460e      	mov	r6, r1
 80030ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030be:	f7ff fbc9 	bl	8002854 <_malloc_r>
 80030c2:	4604      	mov	r4, r0
 80030c4:	b140      	cbz	r0, 80030d8 <__sfmoreglue+0x28>
 80030c6:	2100      	movs	r1, #0
 80030c8:	e9c0 1600 	strd	r1, r6, [r0]
 80030cc:	300c      	adds	r0, #12
 80030ce:	60a0      	str	r0, [r4, #8]
 80030d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030d4:	f7ff fb66 	bl	80027a4 <memset>
 80030d8:	4620      	mov	r0, r4
 80030da:	bd70      	pop	{r4, r5, r6, pc}

080030dc <__sfp_lock_acquire>:
 80030dc:	4801      	ldr	r0, [pc, #4]	; (80030e4 <__sfp_lock_acquire+0x8>)
 80030de:	f000 b8d8 	b.w	8003292 <__retarget_lock_acquire_recursive>
 80030e2:	bf00      	nop
 80030e4:	200001d4 	.word	0x200001d4

080030e8 <__sfp_lock_release>:
 80030e8:	4801      	ldr	r0, [pc, #4]	; (80030f0 <__sfp_lock_release+0x8>)
 80030ea:	f000 b8d3 	b.w	8003294 <__retarget_lock_release_recursive>
 80030ee:	bf00      	nop
 80030f0:	200001d4 	.word	0x200001d4

080030f4 <__sinit_lock_acquire>:
 80030f4:	4801      	ldr	r0, [pc, #4]	; (80030fc <__sinit_lock_acquire+0x8>)
 80030f6:	f000 b8cc 	b.w	8003292 <__retarget_lock_acquire_recursive>
 80030fa:	bf00      	nop
 80030fc:	200001cf 	.word	0x200001cf

08003100 <__sinit_lock_release>:
 8003100:	4801      	ldr	r0, [pc, #4]	; (8003108 <__sinit_lock_release+0x8>)
 8003102:	f000 b8c7 	b.w	8003294 <__retarget_lock_release_recursive>
 8003106:	bf00      	nop
 8003108:	200001cf 	.word	0x200001cf

0800310c <__sinit>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	f7ff fff0 	bl	80030f4 <__sinit_lock_acquire>
 8003114:	69a3      	ldr	r3, [r4, #24]
 8003116:	b11b      	cbz	r3, 8003120 <__sinit+0x14>
 8003118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800311c:	f7ff bff0 	b.w	8003100 <__sinit_lock_release>
 8003120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003124:	6523      	str	r3, [r4, #80]	; 0x50
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <__sinit+0x68>)
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <__sinit+0x6c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	62a2      	str	r2, [r4, #40]	; 0x28
 800312e:	42a3      	cmp	r3, r4
 8003130:	bf04      	itt	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	61a3      	streq	r3, [r4, #24]
 8003136:	4620      	mov	r0, r4
 8003138:	f000 f820 	bl	800317c <__sfp>
 800313c:	6060      	str	r0, [r4, #4]
 800313e:	4620      	mov	r0, r4
 8003140:	f000 f81c 	bl	800317c <__sfp>
 8003144:	60a0      	str	r0, [r4, #8]
 8003146:	4620      	mov	r0, r4
 8003148:	f000 f818 	bl	800317c <__sfp>
 800314c:	2200      	movs	r2, #0
 800314e:	60e0      	str	r0, [r4, #12]
 8003150:	2104      	movs	r1, #4
 8003152:	6860      	ldr	r0, [r4, #4]
 8003154:	f7ff ff82 	bl	800305c <std>
 8003158:	68a0      	ldr	r0, [r4, #8]
 800315a:	2201      	movs	r2, #1
 800315c:	2109      	movs	r1, #9
 800315e:	f7ff ff7d 	bl	800305c <std>
 8003162:	68e0      	ldr	r0, [r4, #12]
 8003164:	2202      	movs	r2, #2
 8003166:	2112      	movs	r1, #18
 8003168:	f7ff ff78 	bl	800305c <std>
 800316c:	2301      	movs	r3, #1
 800316e:	61a3      	str	r3, [r4, #24]
 8003170:	e7d2      	b.n	8003118 <__sinit+0xc>
 8003172:	bf00      	nop
 8003174:	08003d34 	.word	0x08003d34
 8003178:	080030a5 	.word	0x080030a5

0800317c <__sfp>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	4607      	mov	r7, r0
 8003180:	f7ff ffac 	bl	80030dc <__sfp_lock_acquire>
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <__sfp+0x84>)
 8003186:	681e      	ldr	r6, [r3, #0]
 8003188:	69b3      	ldr	r3, [r6, #24]
 800318a:	b913      	cbnz	r3, 8003192 <__sfp+0x16>
 800318c:	4630      	mov	r0, r6
 800318e:	f7ff ffbd 	bl	800310c <__sinit>
 8003192:	3648      	adds	r6, #72	; 0x48
 8003194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003198:	3b01      	subs	r3, #1
 800319a:	d503      	bpl.n	80031a4 <__sfp+0x28>
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	b30b      	cbz	r3, 80031e4 <__sfp+0x68>
 80031a0:	6836      	ldr	r6, [r6, #0]
 80031a2:	e7f7      	b.n	8003194 <__sfp+0x18>
 80031a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031a8:	b9d5      	cbnz	r5, 80031e0 <__sfp+0x64>
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <__sfp+0x88>)
 80031ac:	60e3      	str	r3, [r4, #12]
 80031ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031b2:	6665      	str	r5, [r4, #100]	; 0x64
 80031b4:	f000 f86c 	bl	8003290 <__retarget_lock_init_recursive>
 80031b8:	f7ff ff96 	bl	80030e8 <__sfp_lock_release>
 80031bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031c4:	6025      	str	r5, [r4, #0]
 80031c6:	61a5      	str	r5, [r4, #24]
 80031c8:	2208      	movs	r2, #8
 80031ca:	4629      	mov	r1, r5
 80031cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031d0:	f7ff fae8 	bl	80027a4 <memset>
 80031d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031dc:	4620      	mov	r0, r4
 80031de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e0:	3468      	adds	r4, #104	; 0x68
 80031e2:	e7d9      	b.n	8003198 <__sfp+0x1c>
 80031e4:	2104      	movs	r1, #4
 80031e6:	4638      	mov	r0, r7
 80031e8:	f7ff ff62 	bl	80030b0 <__sfmoreglue>
 80031ec:	4604      	mov	r4, r0
 80031ee:	6030      	str	r0, [r6, #0]
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d1d5      	bne.n	80031a0 <__sfp+0x24>
 80031f4:	f7ff ff78 	bl	80030e8 <__sfp_lock_release>
 80031f8:	230c      	movs	r3, #12
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	e7ee      	b.n	80031dc <__sfp+0x60>
 80031fe:	bf00      	nop
 8003200:	08003d34 	.word	0x08003d34
 8003204:	ffff0001 	.word	0xffff0001

08003208 <fiprintf>:
 8003208:	b40e      	push	{r1, r2, r3}
 800320a:	b503      	push	{r0, r1, lr}
 800320c:	4601      	mov	r1, r0
 800320e:	ab03      	add	r3, sp, #12
 8003210:	4805      	ldr	r0, [pc, #20]	; (8003228 <fiprintf+0x20>)
 8003212:	f853 2b04 	ldr.w	r2, [r3], #4
 8003216:	6800      	ldr	r0, [r0, #0]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	f000 f8d7 	bl	80033cc <_vfiprintf_r>
 800321e:	b002      	add	sp, #8
 8003220:	f85d eb04 	ldr.w	lr, [sp], #4
 8003224:	b003      	add	sp, #12
 8003226:	4770      	bx	lr
 8003228:	2000002c 	.word	0x2000002c

0800322c <_fwalk_reent>:
 800322c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003230:	4606      	mov	r6, r0
 8003232:	4688      	mov	r8, r1
 8003234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003238:	2700      	movs	r7, #0
 800323a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800323e:	f1b9 0901 	subs.w	r9, r9, #1
 8003242:	d505      	bpl.n	8003250 <_fwalk_reent+0x24>
 8003244:	6824      	ldr	r4, [r4, #0]
 8003246:	2c00      	cmp	r4, #0
 8003248:	d1f7      	bne.n	800323a <_fwalk_reent+0xe>
 800324a:	4638      	mov	r0, r7
 800324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003250:	89ab      	ldrh	r3, [r5, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d907      	bls.n	8003266 <_fwalk_reent+0x3a>
 8003256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800325a:	3301      	adds	r3, #1
 800325c:	d003      	beq.n	8003266 <_fwalk_reent+0x3a>
 800325e:	4629      	mov	r1, r5
 8003260:	4630      	mov	r0, r6
 8003262:	47c0      	blx	r8
 8003264:	4307      	orrs	r7, r0
 8003266:	3568      	adds	r5, #104	; 0x68
 8003268:	e7e9      	b.n	800323e <_fwalk_reent+0x12>
	...

0800326c <_gettimeofday_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4d07      	ldr	r5, [pc, #28]	; (800328c <_gettimeofday_r+0x20>)
 8003270:	2300      	movs	r3, #0
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	f000 fc97 	bl	8003bac <_gettimeofday>
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	d102      	bne.n	8003288 <_gettimeofday_r+0x1c>
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	b103      	cbz	r3, 8003288 <_gettimeofday_r+0x1c>
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	bd38      	pop	{r3, r4, r5, pc}
 800328a:	bf00      	nop
 800328c:	200001d8 	.word	0x200001d8

08003290 <__retarget_lock_init_recursive>:
 8003290:	4770      	bx	lr

08003292 <__retarget_lock_acquire_recursive>:
 8003292:	4770      	bx	lr

08003294 <__retarget_lock_release_recursive>:
 8003294:	4770      	bx	lr

08003296 <__swhatbuf_r>:
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	460e      	mov	r6, r1
 800329a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329e:	2900      	cmp	r1, #0
 80032a0:	b096      	sub	sp, #88	; 0x58
 80032a2:	4614      	mov	r4, r2
 80032a4:	461d      	mov	r5, r3
 80032a6:	da07      	bge.n	80032b8 <__swhatbuf_r+0x22>
 80032a8:	2300      	movs	r3, #0
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	89b3      	ldrh	r3, [r6, #12]
 80032ae:	061a      	lsls	r2, r3, #24
 80032b0:	d410      	bmi.n	80032d4 <__swhatbuf_r+0x3e>
 80032b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b6:	e00e      	b.n	80032d6 <__swhatbuf_r+0x40>
 80032b8:	466a      	mov	r2, sp
 80032ba:	f000 fbed 	bl	8003a98 <_fstat_r>
 80032be:	2800      	cmp	r0, #0
 80032c0:	dbf2      	blt.n	80032a8 <__swhatbuf_r+0x12>
 80032c2:	9a01      	ldr	r2, [sp, #4]
 80032c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032cc:	425a      	negs	r2, r3
 80032ce:	415a      	adcs	r2, r3
 80032d0:	602a      	str	r2, [r5, #0]
 80032d2:	e7ee      	b.n	80032b2 <__swhatbuf_r+0x1c>
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	2000      	movs	r0, #0
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	b016      	add	sp, #88	; 0x58
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080032e0 <__smakebuf_r>:
 80032e0:	898b      	ldrh	r3, [r1, #12]
 80032e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032e4:	079d      	lsls	r5, r3, #30
 80032e6:	4606      	mov	r6, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	d507      	bpl.n	80032fc <__smakebuf_r+0x1c>
 80032ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	6123      	str	r3, [r4, #16]
 80032f4:	2301      	movs	r3, #1
 80032f6:	6163      	str	r3, [r4, #20]
 80032f8:	b002      	add	sp, #8
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	ab01      	add	r3, sp, #4
 80032fe:	466a      	mov	r2, sp
 8003300:	f7ff ffc9 	bl	8003296 <__swhatbuf_r>
 8003304:	9900      	ldr	r1, [sp, #0]
 8003306:	4605      	mov	r5, r0
 8003308:	4630      	mov	r0, r6
 800330a:	f7ff faa3 	bl	8002854 <_malloc_r>
 800330e:	b948      	cbnz	r0, 8003324 <__smakebuf_r+0x44>
 8003310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003314:	059a      	lsls	r2, r3, #22
 8003316:	d4ef      	bmi.n	80032f8 <__smakebuf_r+0x18>
 8003318:	f023 0303 	bic.w	r3, r3, #3
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	81a3      	strh	r3, [r4, #12]
 8003322:	e7e3      	b.n	80032ec <__smakebuf_r+0xc>
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <__smakebuf_r+0x7c>)
 8003326:	62b3      	str	r3, [r6, #40]	; 0x28
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	6020      	str	r0, [r4, #0]
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	9b00      	ldr	r3, [sp, #0]
 8003334:	6163      	str	r3, [r4, #20]
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	6120      	str	r0, [r4, #16]
 800333a:	b15b      	cbz	r3, 8003354 <__smakebuf_r+0x74>
 800333c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003340:	4630      	mov	r0, r6
 8003342:	f000 fbbb 	bl	8003abc <_isatty_r>
 8003346:	b128      	cbz	r0, 8003354 <__smakebuf_r+0x74>
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	81a3      	strh	r3, [r4, #12]
 8003354:	89a0      	ldrh	r0, [r4, #12]
 8003356:	4305      	orrs	r5, r0
 8003358:	81a5      	strh	r5, [r4, #12]
 800335a:	e7cd      	b.n	80032f8 <__smakebuf_r+0x18>
 800335c:	080030a5 	.word	0x080030a5

08003360 <__malloc_lock>:
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <__malloc_lock+0x8>)
 8003362:	f7ff bf96 	b.w	8003292 <__retarget_lock_acquire_recursive>
 8003366:	bf00      	nop
 8003368:	200001d0 	.word	0x200001d0

0800336c <__malloc_unlock>:
 800336c:	4801      	ldr	r0, [pc, #4]	; (8003374 <__malloc_unlock+0x8>)
 800336e:	f7ff bf91 	b.w	8003294 <__retarget_lock_release_recursive>
 8003372:	bf00      	nop
 8003374:	200001d0 	.word	0x200001d0

08003378 <__sfputc_r>:
 8003378:	6893      	ldr	r3, [r2, #8]
 800337a:	3b01      	subs	r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	b410      	push	{r4}
 8003380:	6093      	str	r3, [r2, #8]
 8003382:	da08      	bge.n	8003396 <__sfputc_r+0x1e>
 8003384:	6994      	ldr	r4, [r2, #24]
 8003386:	42a3      	cmp	r3, r4
 8003388:	db01      	blt.n	800338e <__sfputc_r+0x16>
 800338a:	290a      	cmp	r1, #10
 800338c:	d103      	bne.n	8003396 <__sfputc_r+0x1e>
 800338e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003392:	f7ff bcc3 	b.w	8002d1c <__swbuf_r>
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	1c58      	adds	r0, r3, #1
 800339a:	6010      	str	r0, [r2, #0]
 800339c:	7019      	strb	r1, [r3, #0]
 800339e:	4608      	mov	r0, r1
 80033a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <__sfputs_r>:
 80033a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a8:	4606      	mov	r6, r0
 80033aa:	460f      	mov	r7, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	18d5      	adds	r5, r2, r3
 80033b0:	42ac      	cmp	r4, r5
 80033b2:	d101      	bne.n	80033b8 <__sfputs_r+0x12>
 80033b4:	2000      	movs	r0, #0
 80033b6:	e007      	b.n	80033c8 <__sfputs_r+0x22>
 80033b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033bc:	463a      	mov	r2, r7
 80033be:	4630      	mov	r0, r6
 80033c0:	f7ff ffda 	bl	8003378 <__sfputc_r>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d1f3      	bne.n	80033b0 <__sfputs_r+0xa>
 80033c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033cc <_vfiprintf_r>:
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	460d      	mov	r5, r1
 80033d2:	b09d      	sub	sp, #116	; 0x74
 80033d4:	4614      	mov	r4, r2
 80033d6:	4698      	mov	r8, r3
 80033d8:	4606      	mov	r6, r0
 80033da:	b118      	cbz	r0, 80033e4 <_vfiprintf_r+0x18>
 80033dc:	6983      	ldr	r3, [r0, #24]
 80033de:	b90b      	cbnz	r3, 80033e4 <_vfiprintf_r+0x18>
 80033e0:	f7ff fe94 	bl	800310c <__sinit>
 80033e4:	4b89      	ldr	r3, [pc, #548]	; (800360c <_vfiprintf_r+0x240>)
 80033e6:	429d      	cmp	r5, r3
 80033e8:	d11b      	bne.n	8003422 <_vfiprintf_r+0x56>
 80033ea:	6875      	ldr	r5, [r6, #4]
 80033ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033ee:	07d9      	lsls	r1, r3, #31
 80033f0:	d405      	bmi.n	80033fe <_vfiprintf_r+0x32>
 80033f2:	89ab      	ldrh	r3, [r5, #12]
 80033f4:	059a      	lsls	r2, r3, #22
 80033f6:	d402      	bmi.n	80033fe <_vfiprintf_r+0x32>
 80033f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033fa:	f7ff ff4a 	bl	8003292 <__retarget_lock_acquire_recursive>
 80033fe:	89ab      	ldrh	r3, [r5, #12]
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	d501      	bpl.n	8003408 <_vfiprintf_r+0x3c>
 8003404:	692b      	ldr	r3, [r5, #16]
 8003406:	b9eb      	cbnz	r3, 8003444 <_vfiprintf_r+0x78>
 8003408:	4629      	mov	r1, r5
 800340a:	4630      	mov	r0, r6
 800340c:	f7ff fcd8 	bl	8002dc0 <__swsetup_r>
 8003410:	b1c0      	cbz	r0, 8003444 <_vfiprintf_r+0x78>
 8003412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003414:	07dc      	lsls	r4, r3, #31
 8003416:	d50e      	bpl.n	8003436 <_vfiprintf_r+0x6a>
 8003418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800341c:	b01d      	add	sp, #116	; 0x74
 800341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003422:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <_vfiprintf_r+0x244>)
 8003424:	429d      	cmp	r5, r3
 8003426:	d101      	bne.n	800342c <_vfiprintf_r+0x60>
 8003428:	68b5      	ldr	r5, [r6, #8]
 800342a:	e7df      	b.n	80033ec <_vfiprintf_r+0x20>
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <_vfiprintf_r+0x248>)
 800342e:	429d      	cmp	r5, r3
 8003430:	bf08      	it	eq
 8003432:	68f5      	ldreq	r5, [r6, #12]
 8003434:	e7da      	b.n	80033ec <_vfiprintf_r+0x20>
 8003436:	89ab      	ldrh	r3, [r5, #12]
 8003438:	0598      	lsls	r0, r3, #22
 800343a:	d4ed      	bmi.n	8003418 <_vfiprintf_r+0x4c>
 800343c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800343e:	f7ff ff29 	bl	8003294 <__retarget_lock_release_recursive>
 8003442:	e7e9      	b.n	8003418 <_vfiprintf_r+0x4c>
 8003444:	2300      	movs	r3, #0
 8003446:	9309      	str	r3, [sp, #36]	; 0x24
 8003448:	2320      	movs	r3, #32
 800344a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800344e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003452:	2330      	movs	r3, #48	; 0x30
 8003454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003618 <_vfiprintf_r+0x24c>
 8003458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800345c:	f04f 0901 	mov.w	r9, #1
 8003460:	4623      	mov	r3, r4
 8003462:	469a      	mov	sl, r3
 8003464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003468:	b10a      	cbz	r2, 800346e <_vfiprintf_r+0xa2>
 800346a:	2a25      	cmp	r2, #37	; 0x25
 800346c:	d1f9      	bne.n	8003462 <_vfiprintf_r+0x96>
 800346e:	ebba 0b04 	subs.w	fp, sl, r4
 8003472:	d00b      	beq.n	800348c <_vfiprintf_r+0xc0>
 8003474:	465b      	mov	r3, fp
 8003476:	4622      	mov	r2, r4
 8003478:	4629      	mov	r1, r5
 800347a:	4630      	mov	r0, r6
 800347c:	f7ff ff93 	bl	80033a6 <__sfputs_r>
 8003480:	3001      	adds	r0, #1
 8003482:	f000 80aa 	beq.w	80035da <_vfiprintf_r+0x20e>
 8003486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003488:	445a      	add	r2, fp
 800348a:	9209      	str	r2, [sp, #36]	; 0x24
 800348c:	f89a 3000 	ldrb.w	r3, [sl]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a2 	beq.w	80035da <_vfiprintf_r+0x20e>
 8003496:	2300      	movs	r3, #0
 8003498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800349c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a0:	f10a 0a01 	add.w	sl, sl, #1
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	9307      	str	r3, [sp, #28]
 80034a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ac:	931a      	str	r3, [sp, #104]	; 0x68
 80034ae:	4654      	mov	r4, sl
 80034b0:	2205      	movs	r2, #5
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4858      	ldr	r0, [pc, #352]	; (8003618 <_vfiprintf_r+0x24c>)
 80034b8:	f7fc fe92 	bl	80001e0 <memchr>
 80034bc:	9a04      	ldr	r2, [sp, #16]
 80034be:	b9d8      	cbnz	r0, 80034f8 <_vfiprintf_r+0x12c>
 80034c0:	06d1      	lsls	r1, r2, #27
 80034c2:	bf44      	itt	mi
 80034c4:	2320      	movmi	r3, #32
 80034c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ca:	0713      	lsls	r3, r2, #28
 80034cc:	bf44      	itt	mi
 80034ce:	232b      	movmi	r3, #43	; 0x2b
 80034d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d4:	f89a 3000 	ldrb.w	r3, [sl]
 80034d8:	2b2a      	cmp	r3, #42	; 0x2a
 80034da:	d015      	beq.n	8003508 <_vfiprintf_r+0x13c>
 80034dc:	9a07      	ldr	r2, [sp, #28]
 80034de:	4654      	mov	r4, sl
 80034e0:	2000      	movs	r0, #0
 80034e2:	f04f 0c0a 	mov.w	ip, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ec:	3b30      	subs	r3, #48	; 0x30
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d94e      	bls.n	8003590 <_vfiprintf_r+0x1c4>
 80034f2:	b1b0      	cbz	r0, 8003522 <_vfiprintf_r+0x156>
 80034f4:	9207      	str	r2, [sp, #28]
 80034f6:	e014      	b.n	8003522 <_vfiprintf_r+0x156>
 80034f8:	eba0 0308 	sub.w	r3, r0, r8
 80034fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003500:	4313      	orrs	r3, r2
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	46a2      	mov	sl, r4
 8003506:	e7d2      	b.n	80034ae <_vfiprintf_r+0xe2>
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	1d19      	adds	r1, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	9103      	str	r1, [sp, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	bfbb      	ittet	lt
 8003514:	425b      	neglt	r3, r3
 8003516:	f042 0202 	orrlt.w	r2, r2, #2
 800351a:	9307      	strge	r3, [sp, #28]
 800351c:	9307      	strlt	r3, [sp, #28]
 800351e:	bfb8      	it	lt
 8003520:	9204      	strlt	r2, [sp, #16]
 8003522:	7823      	ldrb	r3, [r4, #0]
 8003524:	2b2e      	cmp	r3, #46	; 0x2e
 8003526:	d10c      	bne.n	8003542 <_vfiprintf_r+0x176>
 8003528:	7863      	ldrb	r3, [r4, #1]
 800352a:	2b2a      	cmp	r3, #42	; 0x2a
 800352c:	d135      	bne.n	800359a <_vfiprintf_r+0x1ce>
 800352e:	9b03      	ldr	r3, [sp, #12]
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	9203      	str	r2, [sp, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	bfb8      	it	lt
 800353a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800353e:	3402      	adds	r4, #2
 8003540:	9305      	str	r3, [sp, #20]
 8003542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003628 <_vfiprintf_r+0x25c>
 8003546:	7821      	ldrb	r1, [r4, #0]
 8003548:	2203      	movs	r2, #3
 800354a:	4650      	mov	r0, sl
 800354c:	f7fc fe48 	bl	80001e0 <memchr>
 8003550:	b140      	cbz	r0, 8003564 <_vfiprintf_r+0x198>
 8003552:	2340      	movs	r3, #64	; 0x40
 8003554:	eba0 000a 	sub.w	r0, r0, sl
 8003558:	fa03 f000 	lsl.w	r0, r3, r0
 800355c:	9b04      	ldr	r3, [sp, #16]
 800355e:	4303      	orrs	r3, r0
 8003560:	3401      	adds	r4, #1
 8003562:	9304      	str	r3, [sp, #16]
 8003564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003568:	482c      	ldr	r0, [pc, #176]	; (800361c <_vfiprintf_r+0x250>)
 800356a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800356e:	2206      	movs	r2, #6
 8003570:	f7fc fe36 	bl	80001e0 <memchr>
 8003574:	2800      	cmp	r0, #0
 8003576:	d03f      	beq.n	80035f8 <_vfiprintf_r+0x22c>
 8003578:	4b29      	ldr	r3, [pc, #164]	; (8003620 <_vfiprintf_r+0x254>)
 800357a:	bb1b      	cbnz	r3, 80035c4 <_vfiprintf_r+0x1f8>
 800357c:	9b03      	ldr	r3, [sp, #12]
 800357e:	3307      	adds	r3, #7
 8003580:	f023 0307 	bic.w	r3, r3, #7
 8003584:	3308      	adds	r3, #8
 8003586:	9303      	str	r3, [sp, #12]
 8003588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800358a:	443b      	add	r3, r7
 800358c:	9309      	str	r3, [sp, #36]	; 0x24
 800358e:	e767      	b.n	8003460 <_vfiprintf_r+0x94>
 8003590:	fb0c 3202 	mla	r2, ip, r2, r3
 8003594:	460c      	mov	r4, r1
 8003596:	2001      	movs	r0, #1
 8003598:	e7a5      	b.n	80034e6 <_vfiprintf_r+0x11a>
 800359a:	2300      	movs	r3, #0
 800359c:	3401      	adds	r4, #1
 800359e:	9305      	str	r3, [sp, #20]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f04f 0c0a 	mov.w	ip, #10
 80035a6:	4620      	mov	r0, r4
 80035a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ac:	3a30      	subs	r2, #48	; 0x30
 80035ae:	2a09      	cmp	r2, #9
 80035b0:	d903      	bls.n	80035ba <_vfiprintf_r+0x1ee>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0c5      	beq.n	8003542 <_vfiprintf_r+0x176>
 80035b6:	9105      	str	r1, [sp, #20]
 80035b8:	e7c3      	b.n	8003542 <_vfiprintf_r+0x176>
 80035ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80035be:	4604      	mov	r4, r0
 80035c0:	2301      	movs	r3, #1
 80035c2:	e7f0      	b.n	80035a6 <_vfiprintf_r+0x1da>
 80035c4:	ab03      	add	r3, sp, #12
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	462a      	mov	r2, r5
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <_vfiprintf_r+0x258>)
 80035cc:	a904      	add	r1, sp, #16
 80035ce:	4630      	mov	r0, r6
 80035d0:	f3af 8000 	nop.w
 80035d4:	4607      	mov	r7, r0
 80035d6:	1c78      	adds	r0, r7, #1
 80035d8:	d1d6      	bne.n	8003588 <_vfiprintf_r+0x1bc>
 80035da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035dc:	07d9      	lsls	r1, r3, #31
 80035de:	d405      	bmi.n	80035ec <_vfiprintf_r+0x220>
 80035e0:	89ab      	ldrh	r3, [r5, #12]
 80035e2:	059a      	lsls	r2, r3, #22
 80035e4:	d402      	bmi.n	80035ec <_vfiprintf_r+0x220>
 80035e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035e8:	f7ff fe54 	bl	8003294 <__retarget_lock_release_recursive>
 80035ec:	89ab      	ldrh	r3, [r5, #12]
 80035ee:	065b      	lsls	r3, r3, #25
 80035f0:	f53f af12 	bmi.w	8003418 <_vfiprintf_r+0x4c>
 80035f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f6:	e711      	b.n	800341c <_vfiprintf_r+0x50>
 80035f8:	ab03      	add	r3, sp, #12
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	462a      	mov	r2, r5
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <_vfiprintf_r+0x258>)
 8003600:	a904      	add	r1, sp, #16
 8003602:	4630      	mov	r0, r6
 8003604:	f000 f880 	bl	8003708 <_printf_i>
 8003608:	e7e4      	b.n	80035d4 <_vfiprintf_r+0x208>
 800360a:	bf00      	nop
 800360c:	08003e0c 	.word	0x08003e0c
 8003610:	08003e2c 	.word	0x08003e2c
 8003614:	08003dec 	.word	0x08003dec
 8003618:	08003e4c 	.word	0x08003e4c
 800361c:	08003e56 	.word	0x08003e56
 8003620:	00000000 	.word	0x00000000
 8003624:	080033a7 	.word	0x080033a7
 8003628:	08003e52 	.word	0x08003e52

0800362c <_printf_common>:
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	4616      	mov	r6, r2
 8003632:	4699      	mov	r9, r3
 8003634:	688a      	ldr	r2, [r1, #8]
 8003636:	690b      	ldr	r3, [r1, #16]
 8003638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800363c:	4293      	cmp	r3, r2
 800363e:	bfb8      	it	lt
 8003640:	4613      	movlt	r3, r2
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003648:	4607      	mov	r7, r0
 800364a:	460c      	mov	r4, r1
 800364c:	b10a      	cbz	r2, 8003652 <_printf_common+0x26>
 800364e:	3301      	adds	r3, #1
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	0699      	lsls	r1, r3, #26
 8003656:	bf42      	ittt	mi
 8003658:	6833      	ldrmi	r3, [r6, #0]
 800365a:	3302      	addmi	r3, #2
 800365c:	6033      	strmi	r3, [r6, #0]
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	f015 0506 	ands.w	r5, r5, #6
 8003664:	d106      	bne.n	8003674 <_printf_common+0x48>
 8003666:	f104 0a19 	add.w	sl, r4, #25
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	6832      	ldr	r2, [r6, #0]
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	42ab      	cmp	r3, r5
 8003672:	dc26      	bgt.n	80036c2 <_printf_common+0x96>
 8003674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003678:	1e13      	subs	r3, r2, #0
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	bf18      	it	ne
 800367e:	2301      	movne	r3, #1
 8003680:	0692      	lsls	r2, r2, #26
 8003682:	d42b      	bmi.n	80036dc <_printf_common+0xb0>
 8003684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003688:	4649      	mov	r1, r9
 800368a:	4638      	mov	r0, r7
 800368c:	47c0      	blx	r8
 800368e:	3001      	adds	r0, #1
 8003690:	d01e      	beq.n	80036d0 <_printf_common+0xa4>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	68e5      	ldr	r5, [r4, #12]
 8003696:	6832      	ldr	r2, [r6, #0]
 8003698:	f003 0306 	and.w	r3, r3, #6
 800369c:	2b04      	cmp	r3, #4
 800369e:	bf08      	it	eq
 80036a0:	1aad      	subeq	r5, r5, r2
 80036a2:	68a3      	ldr	r3, [r4, #8]
 80036a4:	6922      	ldr	r2, [r4, #16]
 80036a6:	bf0c      	ite	eq
 80036a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036ac:	2500      	movne	r5, #0
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bfc4      	itt	gt
 80036b2:	1a9b      	subgt	r3, r3, r2
 80036b4:	18ed      	addgt	r5, r5, r3
 80036b6:	2600      	movs	r6, #0
 80036b8:	341a      	adds	r4, #26
 80036ba:	42b5      	cmp	r5, r6
 80036bc:	d11a      	bne.n	80036f4 <_printf_common+0xc8>
 80036be:	2000      	movs	r0, #0
 80036c0:	e008      	b.n	80036d4 <_printf_common+0xa8>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4652      	mov	r2, sl
 80036c6:	4649      	mov	r1, r9
 80036c8:	4638      	mov	r0, r7
 80036ca:	47c0      	blx	r8
 80036cc:	3001      	adds	r0, #1
 80036ce:	d103      	bne.n	80036d8 <_printf_common+0xac>
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d8:	3501      	adds	r5, #1
 80036da:	e7c6      	b.n	800366a <_printf_common+0x3e>
 80036dc:	18e1      	adds	r1, r4, r3
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	2030      	movs	r0, #48	; 0x30
 80036e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036e6:	4422      	add	r2, r4
 80036e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036f0:	3302      	adds	r3, #2
 80036f2:	e7c7      	b.n	8003684 <_printf_common+0x58>
 80036f4:	2301      	movs	r3, #1
 80036f6:	4622      	mov	r2, r4
 80036f8:	4649      	mov	r1, r9
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c0      	blx	r8
 80036fe:	3001      	adds	r0, #1
 8003700:	d0e6      	beq.n	80036d0 <_printf_common+0xa4>
 8003702:	3601      	adds	r6, #1
 8003704:	e7d9      	b.n	80036ba <_printf_common+0x8e>
	...

08003708 <_printf_i>:
 8003708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	460c      	mov	r4, r1
 800370e:	4691      	mov	r9, r2
 8003710:	7e27      	ldrb	r7, [r4, #24]
 8003712:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003714:	2f78      	cmp	r7, #120	; 0x78
 8003716:	4680      	mov	r8, r0
 8003718:	469a      	mov	sl, r3
 800371a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800371e:	d807      	bhi.n	8003730 <_printf_i+0x28>
 8003720:	2f62      	cmp	r7, #98	; 0x62
 8003722:	d80a      	bhi.n	800373a <_printf_i+0x32>
 8003724:	2f00      	cmp	r7, #0
 8003726:	f000 80d8 	beq.w	80038da <_printf_i+0x1d2>
 800372a:	2f58      	cmp	r7, #88	; 0x58
 800372c:	f000 80a3 	beq.w	8003876 <_printf_i+0x16e>
 8003730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003738:	e03a      	b.n	80037b0 <_printf_i+0xa8>
 800373a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800373e:	2b15      	cmp	r3, #21
 8003740:	d8f6      	bhi.n	8003730 <_printf_i+0x28>
 8003742:	a001      	add	r0, pc, #4	; (adr r0, 8003748 <_printf_i+0x40>)
 8003744:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003748:	080037a1 	.word	0x080037a1
 800374c:	080037b5 	.word	0x080037b5
 8003750:	08003731 	.word	0x08003731
 8003754:	08003731 	.word	0x08003731
 8003758:	08003731 	.word	0x08003731
 800375c:	08003731 	.word	0x08003731
 8003760:	080037b5 	.word	0x080037b5
 8003764:	08003731 	.word	0x08003731
 8003768:	08003731 	.word	0x08003731
 800376c:	08003731 	.word	0x08003731
 8003770:	08003731 	.word	0x08003731
 8003774:	080038c1 	.word	0x080038c1
 8003778:	080037e5 	.word	0x080037e5
 800377c:	080038a3 	.word	0x080038a3
 8003780:	08003731 	.word	0x08003731
 8003784:	08003731 	.word	0x08003731
 8003788:	080038e3 	.word	0x080038e3
 800378c:	08003731 	.word	0x08003731
 8003790:	080037e5 	.word	0x080037e5
 8003794:	08003731 	.word	0x08003731
 8003798:	08003731 	.word	0x08003731
 800379c:	080038ab 	.word	0x080038ab
 80037a0:	680b      	ldr	r3, [r1, #0]
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	600a      	str	r2, [r1, #0]
 80037a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0a3      	b.n	80038fc <_printf_i+0x1f4>
 80037b4:	6825      	ldr	r5, [r4, #0]
 80037b6:	6808      	ldr	r0, [r1, #0]
 80037b8:	062e      	lsls	r6, r5, #24
 80037ba:	f100 0304 	add.w	r3, r0, #4
 80037be:	d50a      	bpl.n	80037d6 <_printf_i+0xce>
 80037c0:	6805      	ldr	r5, [r0, #0]
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	da03      	bge.n	80037d0 <_printf_i+0xc8>
 80037c8:	232d      	movs	r3, #45	; 0x2d
 80037ca:	426d      	negs	r5, r5
 80037cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d0:	485e      	ldr	r0, [pc, #376]	; (800394c <_printf_i+0x244>)
 80037d2:	230a      	movs	r3, #10
 80037d4:	e019      	b.n	800380a <_printf_i+0x102>
 80037d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037da:	6805      	ldr	r5, [r0, #0]
 80037dc:	600b      	str	r3, [r1, #0]
 80037de:	bf18      	it	ne
 80037e0:	b22d      	sxthne	r5, r5
 80037e2:	e7ef      	b.n	80037c4 <_printf_i+0xbc>
 80037e4:	680b      	ldr	r3, [r1, #0]
 80037e6:	6825      	ldr	r5, [r4, #0]
 80037e8:	1d18      	adds	r0, r3, #4
 80037ea:	6008      	str	r0, [r1, #0]
 80037ec:	0628      	lsls	r0, r5, #24
 80037ee:	d501      	bpl.n	80037f4 <_printf_i+0xec>
 80037f0:	681d      	ldr	r5, [r3, #0]
 80037f2:	e002      	b.n	80037fa <_printf_i+0xf2>
 80037f4:	0669      	lsls	r1, r5, #25
 80037f6:	d5fb      	bpl.n	80037f0 <_printf_i+0xe8>
 80037f8:	881d      	ldrh	r5, [r3, #0]
 80037fa:	4854      	ldr	r0, [pc, #336]	; (800394c <_printf_i+0x244>)
 80037fc:	2f6f      	cmp	r7, #111	; 0x6f
 80037fe:	bf0c      	ite	eq
 8003800:	2308      	moveq	r3, #8
 8003802:	230a      	movne	r3, #10
 8003804:	2100      	movs	r1, #0
 8003806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380a:	6866      	ldr	r6, [r4, #4]
 800380c:	60a6      	str	r6, [r4, #8]
 800380e:	2e00      	cmp	r6, #0
 8003810:	bfa2      	ittt	ge
 8003812:	6821      	ldrge	r1, [r4, #0]
 8003814:	f021 0104 	bicge.w	r1, r1, #4
 8003818:	6021      	strge	r1, [r4, #0]
 800381a:	b90d      	cbnz	r5, 8003820 <_printf_i+0x118>
 800381c:	2e00      	cmp	r6, #0
 800381e:	d04d      	beq.n	80038bc <_printf_i+0x1b4>
 8003820:	4616      	mov	r6, r2
 8003822:	fbb5 f1f3 	udiv	r1, r5, r3
 8003826:	fb03 5711 	mls	r7, r3, r1, r5
 800382a:	5dc7      	ldrb	r7, [r0, r7]
 800382c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003830:	462f      	mov	r7, r5
 8003832:	42bb      	cmp	r3, r7
 8003834:	460d      	mov	r5, r1
 8003836:	d9f4      	bls.n	8003822 <_printf_i+0x11a>
 8003838:	2b08      	cmp	r3, #8
 800383a:	d10b      	bne.n	8003854 <_printf_i+0x14c>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	07df      	lsls	r7, r3, #31
 8003840:	d508      	bpl.n	8003854 <_printf_i+0x14c>
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	6861      	ldr	r1, [r4, #4]
 8003846:	4299      	cmp	r1, r3
 8003848:	bfde      	ittt	le
 800384a:	2330      	movle	r3, #48	; 0x30
 800384c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003850:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003854:	1b92      	subs	r2, r2, r6
 8003856:	6122      	str	r2, [r4, #16]
 8003858:	f8cd a000 	str.w	sl, [sp]
 800385c:	464b      	mov	r3, r9
 800385e:	aa03      	add	r2, sp, #12
 8003860:	4621      	mov	r1, r4
 8003862:	4640      	mov	r0, r8
 8003864:	f7ff fee2 	bl	800362c <_printf_common>
 8003868:	3001      	adds	r0, #1
 800386a:	d14c      	bne.n	8003906 <_printf_i+0x1fe>
 800386c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003870:	b004      	add	sp, #16
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003876:	4835      	ldr	r0, [pc, #212]	; (800394c <_printf_i+0x244>)
 8003878:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	680e      	ldr	r6, [r1, #0]
 8003880:	061f      	lsls	r7, r3, #24
 8003882:	f856 5b04 	ldr.w	r5, [r6], #4
 8003886:	600e      	str	r6, [r1, #0]
 8003888:	d514      	bpl.n	80038b4 <_printf_i+0x1ac>
 800388a:	07d9      	lsls	r1, r3, #31
 800388c:	bf44      	itt	mi
 800388e:	f043 0320 	orrmi.w	r3, r3, #32
 8003892:	6023      	strmi	r3, [r4, #0]
 8003894:	b91d      	cbnz	r5, 800389e <_printf_i+0x196>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	f023 0320 	bic.w	r3, r3, #32
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	2310      	movs	r3, #16
 80038a0:	e7b0      	b.n	8003804 <_printf_i+0xfc>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	2378      	movs	r3, #120	; 0x78
 80038ac:	4828      	ldr	r0, [pc, #160]	; (8003950 <_printf_i+0x248>)
 80038ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038b2:	e7e3      	b.n	800387c <_printf_i+0x174>
 80038b4:	065e      	lsls	r6, r3, #25
 80038b6:	bf48      	it	mi
 80038b8:	b2ad      	uxthmi	r5, r5
 80038ba:	e7e6      	b.n	800388a <_printf_i+0x182>
 80038bc:	4616      	mov	r6, r2
 80038be:	e7bb      	b.n	8003838 <_printf_i+0x130>
 80038c0:	680b      	ldr	r3, [r1, #0]
 80038c2:	6826      	ldr	r6, [r4, #0]
 80038c4:	6960      	ldr	r0, [r4, #20]
 80038c6:	1d1d      	adds	r5, r3, #4
 80038c8:	600d      	str	r5, [r1, #0]
 80038ca:	0635      	lsls	r5, r6, #24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	d501      	bpl.n	80038d4 <_printf_i+0x1cc>
 80038d0:	6018      	str	r0, [r3, #0]
 80038d2:	e002      	b.n	80038da <_printf_i+0x1d2>
 80038d4:	0671      	lsls	r1, r6, #25
 80038d6:	d5fb      	bpl.n	80038d0 <_printf_i+0x1c8>
 80038d8:	8018      	strh	r0, [r3, #0]
 80038da:	2300      	movs	r3, #0
 80038dc:	6123      	str	r3, [r4, #16]
 80038de:	4616      	mov	r6, r2
 80038e0:	e7ba      	b.n	8003858 <_printf_i+0x150>
 80038e2:	680b      	ldr	r3, [r1, #0]
 80038e4:	1d1a      	adds	r2, r3, #4
 80038e6:	600a      	str	r2, [r1, #0]
 80038e8:	681e      	ldr	r6, [r3, #0]
 80038ea:	6862      	ldr	r2, [r4, #4]
 80038ec:	2100      	movs	r1, #0
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7fc fc76 	bl	80001e0 <memchr>
 80038f4:	b108      	cbz	r0, 80038fa <_printf_i+0x1f2>
 80038f6:	1b80      	subs	r0, r0, r6
 80038f8:	6060      	str	r0, [r4, #4]
 80038fa:	6863      	ldr	r3, [r4, #4]
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	2300      	movs	r3, #0
 8003900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003904:	e7a8      	b.n	8003858 <_printf_i+0x150>
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	4632      	mov	r2, r6
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	47d0      	blx	sl
 8003910:	3001      	adds	r0, #1
 8003912:	d0ab      	beq.n	800386c <_printf_i+0x164>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	079b      	lsls	r3, r3, #30
 8003918:	d413      	bmi.n	8003942 <_printf_i+0x23a>
 800391a:	68e0      	ldr	r0, [r4, #12]
 800391c:	9b03      	ldr	r3, [sp, #12]
 800391e:	4298      	cmp	r0, r3
 8003920:	bfb8      	it	lt
 8003922:	4618      	movlt	r0, r3
 8003924:	e7a4      	b.n	8003870 <_printf_i+0x168>
 8003926:	2301      	movs	r3, #1
 8003928:	4632      	mov	r2, r6
 800392a:	4649      	mov	r1, r9
 800392c:	4640      	mov	r0, r8
 800392e:	47d0      	blx	sl
 8003930:	3001      	adds	r0, #1
 8003932:	d09b      	beq.n	800386c <_printf_i+0x164>
 8003934:	3501      	adds	r5, #1
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	9903      	ldr	r1, [sp, #12]
 800393a:	1a5b      	subs	r3, r3, r1
 800393c:	42ab      	cmp	r3, r5
 800393e:	dcf2      	bgt.n	8003926 <_printf_i+0x21e>
 8003940:	e7eb      	b.n	800391a <_printf_i+0x212>
 8003942:	2500      	movs	r5, #0
 8003944:	f104 0619 	add.w	r6, r4, #25
 8003948:	e7f5      	b.n	8003936 <_printf_i+0x22e>
 800394a:	bf00      	nop
 800394c:	08003e5d 	.word	0x08003e5d
 8003950:	08003e6e 	.word	0x08003e6e

08003954 <_putc_r>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	460d      	mov	r5, r1
 8003958:	4614      	mov	r4, r2
 800395a:	4606      	mov	r6, r0
 800395c:	b118      	cbz	r0, 8003966 <_putc_r+0x12>
 800395e:	6983      	ldr	r3, [r0, #24]
 8003960:	b90b      	cbnz	r3, 8003966 <_putc_r+0x12>
 8003962:	f7ff fbd3 	bl	800310c <__sinit>
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <_putc_r+0x84>)
 8003968:	429c      	cmp	r4, r3
 800396a:	d124      	bne.n	80039b6 <_putc_r+0x62>
 800396c:	6874      	ldr	r4, [r6, #4]
 800396e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003970:	07d8      	lsls	r0, r3, #31
 8003972:	d405      	bmi.n	8003980 <_putc_r+0x2c>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	0599      	lsls	r1, r3, #22
 8003978:	d402      	bmi.n	8003980 <_putc_r+0x2c>
 800397a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397c:	f7ff fc89 	bl	8003292 <__retarget_lock_acquire_recursive>
 8003980:	68a3      	ldr	r3, [r4, #8]
 8003982:	3b01      	subs	r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	60a3      	str	r3, [r4, #8]
 8003988:	da05      	bge.n	8003996 <_putc_r+0x42>
 800398a:	69a2      	ldr	r2, [r4, #24]
 800398c:	4293      	cmp	r3, r2
 800398e:	db1c      	blt.n	80039ca <_putc_r+0x76>
 8003990:	b2eb      	uxtb	r3, r5
 8003992:	2b0a      	cmp	r3, #10
 8003994:	d019      	beq.n	80039ca <_putc_r+0x76>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	701d      	strb	r5, [r3, #0]
 800399e:	b2ed      	uxtb	r5, r5
 80039a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039a2:	07da      	lsls	r2, r3, #31
 80039a4:	d405      	bmi.n	80039b2 <_putc_r+0x5e>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	059b      	lsls	r3, r3, #22
 80039aa:	d402      	bmi.n	80039b2 <_putc_r+0x5e>
 80039ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ae:	f7ff fc71 	bl	8003294 <__retarget_lock_release_recursive>
 80039b2:	4628      	mov	r0, r5
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <_putc_r+0x88>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d101      	bne.n	80039c0 <_putc_r+0x6c>
 80039bc:	68b4      	ldr	r4, [r6, #8]
 80039be:	e7d6      	b.n	800396e <_putc_r+0x1a>
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <_putc_r+0x8c>)
 80039c2:	429c      	cmp	r4, r3
 80039c4:	bf08      	it	eq
 80039c6:	68f4      	ldreq	r4, [r6, #12]
 80039c8:	e7d1      	b.n	800396e <_putc_r+0x1a>
 80039ca:	4629      	mov	r1, r5
 80039cc:	4622      	mov	r2, r4
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff f9a4 	bl	8002d1c <__swbuf_r>
 80039d4:	4605      	mov	r5, r0
 80039d6:	e7e3      	b.n	80039a0 <_putc_r+0x4c>
 80039d8:	08003e0c 	.word	0x08003e0c
 80039dc:	08003e2c 	.word	0x08003e2c
 80039e0:	08003dec 	.word	0x08003dec

080039e4 <__sread>:
 80039e4:	b510      	push	{r4, lr}
 80039e6:	460c      	mov	r4, r1
 80039e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ec:	f000 f888 	bl	8003b00 <_read_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	bfab      	itete	ge
 80039f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039f6:	89a3      	ldrhlt	r3, [r4, #12]
 80039f8:	181b      	addge	r3, r3, r0
 80039fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039fe:	bfac      	ite	ge
 8003a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a02:	81a3      	strhlt	r3, [r4, #12]
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <__swrite>:
 8003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	461f      	mov	r7, r3
 8003a0c:	898b      	ldrh	r3, [r1, #12]
 8003a0e:	05db      	lsls	r3, r3, #23
 8003a10:	4605      	mov	r5, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4616      	mov	r6, r2
 8003a16:	d505      	bpl.n	8003a24 <__swrite+0x1e>
 8003a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f000 f85c 	bl	8003adc <_lseek_r>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	4632      	mov	r2, r6
 8003a32:	463b      	mov	r3, r7
 8003a34:	4628      	mov	r0, r5
 8003a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	f7fc bf51 	b.w	80008e0 <_write_r>

08003a3e <__sseek>:
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	460c      	mov	r4, r1
 8003a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a46:	f000 f849 	bl	8003adc <_lseek_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	bf15      	itete	ne
 8003a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a5a:	81a3      	strheq	r3, [r4, #12]
 8003a5c:	bf18      	it	ne
 8003a5e:	81a3      	strhne	r3, [r4, #12]
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <__sclose>:
 8003a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a66:	f000 b807 	b.w	8003a78 <_close_r>

08003a6a <abort>:
 8003a6a:	b508      	push	{r3, lr}
 8003a6c:	2006      	movs	r0, #6
 8003a6e:	f000 f881 	bl	8003b74 <raise>
 8003a72:	2001      	movs	r0, #1
 8003a74:	f7fe fd02 	bl	800247c <_exit>

08003a78 <_close_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d06      	ldr	r5, [pc, #24]	; (8003a94 <_close_r+0x1c>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7fe fd21 	bl	80024ca <_close>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_close_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_close_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	200001d8 	.word	0x200001d8

08003a98 <_fstat_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4d07      	ldr	r5, [pc, #28]	; (8003ab8 <_fstat_r+0x20>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	602b      	str	r3, [r5, #0]
 8003aa6:	f7fe fd1c 	bl	80024e2 <_fstat>
 8003aaa:	1c43      	adds	r3, r0, #1
 8003aac:	d102      	bne.n	8003ab4 <_fstat_r+0x1c>
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	b103      	cbz	r3, 8003ab4 <_fstat_r+0x1c>
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001d8 	.word	0x200001d8

08003abc <_isatty_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_isatty_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fe fd1b 	bl	8002502 <_isatty>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_isatty_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_isatty_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	200001d8 	.word	0x200001d8

08003adc <_lseek_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_lseek_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fe fd14 	bl	8002518 <_lseek>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_lseek_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_lseek_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	200001d8 	.word	0x200001d8

08003b00 <_read_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	; (8003b20 <_read_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fe fcbe 	bl	8002490 <_read>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_read_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_read_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	200001d8 	.word	0x200001d8

08003b24 <_raise_r>:
 8003b24:	291f      	cmp	r1, #31
 8003b26:	b538      	push	{r3, r4, r5, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	460d      	mov	r5, r1
 8003b2c:	d904      	bls.n	8003b38 <_raise_r+0x14>
 8003b2e:	2316      	movs	r3, #22
 8003b30:	6003      	str	r3, [r0, #0]
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003b3a:	b112      	cbz	r2, 8003b42 <_raise_r+0x1e>
 8003b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b40:	b94b      	cbnz	r3, 8003b56 <_raise_r+0x32>
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f830 	bl	8003ba8 <_getpid_r>
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b52:	f000 b817 	b.w	8003b84 <_kill_r>
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d00a      	beq.n	8003b70 <_raise_r+0x4c>
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	d103      	bne.n	8003b66 <_raise_r+0x42>
 8003b5e:	2316      	movs	r3, #22
 8003b60:	6003      	str	r3, [r0, #0]
 8003b62:	2001      	movs	r0, #1
 8003b64:	e7e7      	b.n	8003b36 <_raise_r+0x12>
 8003b66:	2400      	movs	r4, #0
 8003b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	4798      	blx	r3
 8003b70:	2000      	movs	r0, #0
 8003b72:	e7e0      	b.n	8003b36 <_raise_r+0x12>

08003b74 <raise>:
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <raise+0xc>)
 8003b76:	4601      	mov	r1, r0
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f7ff bfd3 	b.w	8003b24 <_raise_r>
 8003b7e:	bf00      	nop
 8003b80:	2000002c 	.word	0x2000002c

08003b84 <_kill_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d07      	ldr	r5, [pc, #28]	; (8003ba4 <_kill_r+0x20>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	f7fe fc63 	bl	800245c <_kill>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d102      	bne.n	8003ba0 <_kill_r+0x1c>
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	b103      	cbz	r3, 8003ba0 <_kill_r+0x1c>
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200001d8 	.word	0x200001d8

08003ba8 <_getpid_r>:
 8003ba8:	f7fe bc50 	b.w	800244c <_getpid>

08003bac <_gettimeofday>:
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <_gettimeofday+0xc>)
 8003bae:	2258      	movs	r2, #88	; 0x58
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb6:	4770      	bx	lr
 8003bb8:	200001d8 	.word	0x200001d8

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
