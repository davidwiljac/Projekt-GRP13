
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000800c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009034  08009034  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800903c  0800903c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  080090d4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080090d4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d99  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347d  00000000  00000000  00035e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000392d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135cb  00000000  00000000  0003acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012175  00000000  00000000  0004e27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c96a  00000000  00000000  000603f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bcd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000bcdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008184 	.word	0x08008184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008184 	.word	0x08008184

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4611      	mov	r1, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	460b      	mov	r3, r1
 8000d68:	70bb      	strb	r3, [r7, #2]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000d76:	78bb      	ldrb	r3, [r7, #2]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d821      	bhi.n	8000dc0 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000d82:	78ba      	ldrb	r2, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	231f      	movs	r3, #31
 8000d90:	4093      	lsls	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000d9e:	78f9      	ldrb	r1, [r7, #3]
 8000da0:	78ba      	ldrb	r2, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	e074      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000dc0:	78bb      	ldrb	r3, [r7, #2]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	d823      	bhi.n	8000e0e <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000dcc:	78bb      	ldrb	r3, [r7, #2]
 8000dce:	1f5a      	subs	r2, r3, #5
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	461a      	mov	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000dea:	78f9      	ldrb	r1, [r7, #3]
 8000dec:	78bb      	ldrb	r3, [r7, #2]
 8000dee:	1f5a      	subs	r2, r3, #5
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0c:	e04d      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	2b0e      	cmp	r3, #14
 8000e12:	d825      	bhi.n	8000e60 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000e1a:	78bb      	ldrb	r3, [r7, #2]
 8000e1c:	f1a3 020a 	sub.w	r2, r3, #10
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	461a      	mov	r2, r3
 8000e2a:	231f      	movs	r3, #31
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000e3a:	78f9      	ldrb	r1, [r7, #3]
 8000e3c:	78bb      	ldrb	r3, [r7, #2]
 8000e3e:	f1a3 020a 	sub.w	r2, r3, #10
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e024      	b.n	8000eaa <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000e66:	78bb      	ldrb	r3, [r7, #2]
 8000e68:	f1a3 020f 	sub.w	r2, r3, #15
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	461a      	mov	r2, r3
 8000e76:	231f      	movs	r3, #31
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4013      	ands	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000e86:	78f9      	ldrb	r1, [r7, #3]
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	f1a3 020f 	sub.w	r2, r3, #15
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	d923      	bls.n	8000ef8 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f1a3 020a 	sub.w	r2, r3, #10
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6999      	ldr	r1, [r3, #24]
 8000edc:	7878      	ldrb	r0, [r7, #1]
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	f1a3 020a 	sub.w	r2, r3, #10
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	fa00 f303 	lsl.w	r3, r0, r3
 8000eee:	ea41 0203 	orr.w	r2, r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000ef6:	e01f      	b.n	8000f38 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	2238      	movs	r2, #56	; 0x38
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6959      	ldr	r1, [r3, #20]
 8000f22:	7878      	ldrb	r0, [r7, #1]
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f30:	ea41 0203 	orr.w	r2, r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f043 0204 	orr.w	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	b29b      	uxth	r3, r3
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <FLASH_Unlock+0x2c>)
 8000fc4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <FLASH_Unlock+0x28>)
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <FLASH_Unlock+0x30>)
 8000fca:	605a      	str	r2, [r3, #4]
  }  
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000
 8000fdc:	45670123 	.word	0x45670123
 8000fe0:	cdef89ab 	.word	0xcdef89ab

08000fe4 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <FLASH_Lock+0x1c>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <FLASH_Lock+0x1c>)
 8000fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff2:	6113      	str	r3, [r2, #16]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40022000 	.word	0x40022000

08001004 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800100c:	2304      	movs	r3, #4
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001010:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001014:	f000 f892 	bl	800113c <FLASH_WaitForLastOperation>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d11a      	bne.n	8001058 <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <FLASH_ErasePage+0x60>)
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <FLASH_ErasePage+0x60>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 800102e:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <FLASH_ErasePage+0x60>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <FLASH_ErasePage+0x60>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FLASH_ErasePage+0x60>)
 800103a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103e:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001040:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001044:	f000 f87a 	bl	800113c <FLASH_WaitForLastOperation>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <FLASH_ErasePage+0x60>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <FLASH_ErasePage+0x60>)
 8001052:	f023 0302 	bic.w	r3, r3, #2
 8001056:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8001074:	2304      	movs	r3, #4
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001078:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800107c:	f000 f85e 	bl	800113c <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d114      	bne.n	80010b4 <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800109c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80010a0:	f000 f84c 	bl	800113c <FLASH_WaitForLastOperation>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <FLASH_ProgramHalfWord+0x58>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <FLASH_ClearFlag+0x1c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60d3      	str	r3, [r2, #12]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <FLASH_GetStatus+0x54>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 80010fa:	2301      	movs	r3, #1
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	e013      	b.n	8001128 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <FLASH_GetStatus+0x54>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 800110c:	2302      	movs	r3, #2
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e00a      	b.n	8001128 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <FLASH_GetStatus+0x54>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 800111e:	2303      	movs	r3, #3
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8001124:	2304      	movs	r3, #4
 8001126:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001144:	2304      	movs	r3, #4
 8001146:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8001148:	f7ff ffcc 	bl	80010e4 <FLASH_GetStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001150:	e006      	b.n	8001160 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 8001152:	f7ff ffc7 	bl	80010e4 <FLASH_GetStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b01      	subs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <FLASH_WaitForLastOperation+0x30>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f2      	bne.n	8001152 <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001172:	2305      	movs	r3, #5
 8001174:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001198:	787a      	ldrb	r2, [r7, #1]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	210f      	movs	r1, #15
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	8879      	ldrh	r1, [r7, #2]
 80011ca:	08c9      	lsrs	r1, r1, #3
 80011cc:	b289      	uxth	r1, r1
 80011ce:	4608      	mov	r0, r1
 80011d0:	ea02 0103 	and.w	r1, r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f100 0208 	add.w	r2, r0, #8
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	817b      	strh	r3, [r7, #10]
 8001222:	4613      	mov	r3, r2
 8001224:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <I2C_TransferHandling+0x54>)
 8001234:	4013      	ands	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	431a      	orrs	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4313      	orrs	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	605a      	str	r2, [r3, #4]
}  
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	fc009800 	.word	0xfc009800

0800126c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001278:	78fa      	ldrb	r2, [r7, #3]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	b2db      	uxtb	r3, r3
}  
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}  
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	61da      	str	r2, [r3, #28]
  }
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001300:	b480      	push	{r7}
 8001302:	b08b      	sub	sp, #44	; 0x2c
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001328:	4b91      	ldr	r3, [pc, #580]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d011      	beq.n	800135c <RCC_GetClocksFreq+0x5c>
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d837      	bhi.n	80013ae <RCC_GetClocksFreq+0xae>
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <RCC_GetClocksFreq+0x4c>
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d004      	beq.n	8001354 <RCC_GetClocksFreq+0x54>
 800134a:	e030      	b.n	80013ae <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a89      	ldr	r2, [pc, #548]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e030      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001358:	601a      	str	r2, [r3, #0]
      break;
 800135a:	e02c      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001364:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001366:	4b82      	ldr	r3, [pc, #520]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3302      	adds	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4a7d      	ldr	r2, [pc, #500]	; (8001578 <RCC_GetClocksFreq+0x278>)
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	e00d      	b.n	80013a6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <RCC_GetClocksFreq+0x274>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fbb2 f2f3 	udiv	r2, r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	601a      	str	r2, [r3, #0]
      break;
 80013ac:	e003      	b.n	80013b6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a70      	ldr	r2, [pc, #448]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80013b2:	601a      	str	r2, [r3, #0]
      break;
 80013b4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80013c6:	4a6d      	ldr	r2, [pc, #436]	; (800157c <RCC_GetClocksFreq+0x27c>)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	40da      	lsrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013e6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80013ee:	4a63      	ldr	r2, [pc, #396]	; (800157c <RCC_GetClocksFreq+0x27c>)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	40da      	lsrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800140e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	0adb      	lsrs	r3, r3, #11
 8001414:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001416:	4a59      	ldr	r2, [pc, #356]	; (800157c <RCC_GetClocksFreq+0x27c>)
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	40da      	lsrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001436:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800143e:	4a50      	ldr	r2, [pc, #320]	; (8001580 <RCC_GetClocksFreq+0x280>)
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001446:	b29b      	uxth	r3, r3
 8001448:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fbb2 f2f3 	udiv	r2, r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e003      	b.n	800146a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001472:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800147a:	4a41      	ldr	r2, [pc, #260]	; (8001580 <RCC_GetClocksFreq+0x280>)
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001482:	b29b      	uxth	r3, r3
 8001484:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fbb2 f2f3 	udiv	r2, r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	e003      	b.n	80014a6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d003      	beq.n	80014ba <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	e003      	b.n	80014c2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d003      	beq.n	80014d6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <RCC_GetClocksFreq+0x274>)
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	e003      	b.n	80014de <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <RCC_GetClocksFreq+0x270>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ea:	d10d      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d108      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d104      	bne.n	8001508 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]
 8001506:	e003      	b.n	8001510 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151c:	d10d      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	429a      	cmp	r2, r3
 8001526:	d108      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d104      	bne.n	800153a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	005a      	lsls	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
 8001538:	e003      	b.n	8001542 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <RCC_GetClocksFreq+0x270>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
 8001556:	e029      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <RCC_GetClocksFreq+0x270>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10f      	bne.n	8001584 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
 800156c:	e01e      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	007a1200 	.word	0x007a1200
 8001578:	003d0900 	.word	0x003d0900
 800157c:	20000000 	.word	0x20000000
 8001580:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d104      	bne.n	800159a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
 8001598:	e008      	b.n	80015ac <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d102      	bne.n	80015ac <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <RCC_GetClocksFreq+0x424>)
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80015ac:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d104      	bne.n	80015c2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c0:	e021      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80015c2:	4b57      	ldr	r3, [pc, #348]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ce:	d104      	bne.n	80015da <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d8:	e015      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e6:	d104      	bne.n	80015f2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f0:	e009      	b.n	8001606 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015fe:	d102      	bne.n	8001606 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a48      	ldr	r2, [pc, #288]	; (8001724 <RCC_GetClocksFreq+0x424>)
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d104      	bne.n	800161c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
 800161a:	e021      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001628:	d104      	bne.n	8001634 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
 8001632:	e015      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800163c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001640:	d104      	bne.n	800164c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e009      	b.n	8001660 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <RCC_GetClocksFreq+0x420>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001654:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001658:	d102      	bne.n	8001660 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a31      	ldr	r2, [pc, #196]	; (8001724 <RCC_GetClocksFreq+0x424>)
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d104      	bne.n	8001676 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
 8001674:	e021      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800167e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001682:	d104      	bne.n	800168e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
 800168c:	e015      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800169a:	d104      	bne.n	80016a6 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
 80016a4:	e009      	b.n	80016ba <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016b2:	d102      	bne.n	80016ba <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <RCC_GetClocksFreq+0x424>)
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80016ce:	e021      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016dc:	d104      	bne.n	80016e8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016e6:	e015      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <RCC_GetClocksFreq+0x420>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016f4:	d104      	bne.n	8001700 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016fe:	e009      	b.n	8001714 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <RCC_GetClocksFreq+0x420>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800170c:	d102      	bne.n	8001714 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <RCC_GetClocksFreq+0x424>)
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001714:	bf00      	nop
 8001716:	372c      	adds	r7, #44	; 0x2c
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	007a1200 	.word	0x007a1200

08001728 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	b29b      	uxth	r3, r3
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d103      	bne.n	8001796 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e005      	b.n	80017a2 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d102      	bne.n	80017a2 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3308      	adds	r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017b4:	e006      	b.n	80017c4 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43da      	mvns	r2, r3
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e001      	b.n	80017f4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001802:	b480      	push	{r7}
 8001804:	b087      	sub	sp, #28
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800182c:	2201      	movs	r2, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4013      	ands	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e00d      	b.n	8001864 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d105      	bne.n	800185a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e004      	b.n	8001864 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800186a:	2201      	movs	r2, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <USART_GetITStatus+0x8e>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	e001      	b.n	8001894 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001894:	7cfb      	ldrb	r3, [r7, #19]
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f103 	lsl.w	r1, r2, r3
 80018ba:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <NVIC_EnableIRQ+0x30>)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <uart_get_char+0x48>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d011      	beq.n	8001910 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <uart_get_char+0x4c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	b2d1      	uxtb	r1, r2
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <uart_get_char+0x4c>)
 80018f8:	7011      	strb	r1, [r2, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <uart_get_char+0x50>)
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <uart_get_char+0x48>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <uart_get_char+0x48>)
 800190e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001910:	79fb      	ldrb	r3, [r7, #7]
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200001ae 	.word	0x200001ae
 8001924:	200001ad 	.word	0x200001ad
 8001928:	200000ac 	.word	0x200000ac

0800192c <uart_put_char>:

void uart_put_char(uint8_t c) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <uart_put_char+0x30>)
 800193e:	f7ff fef3 	bl	8001728 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001942:	bf00      	nop
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <uart_put_char+0x30>)
 8001948:	f7ff ff42 	bl	80017d0 <USART_GetFlagStatus>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f8      	beq.n	8001944 <uart_put_char+0x18>
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400

08001960 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e012      	b.n	800199a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b0a      	cmp	r3, #10
 800197e:	d102      	bne.n	8001986 <_write_r+0x26>
            uart_put_char('\r');
 8001980:	200d      	movs	r0, #13
 8001982:	f7ff ffd3 	bl	800192c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ffcc 	bl	800192c <uart_put_char>
    for (n = 0; n < len; n++) {
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbe8      	blt.n	8001974 <_write_r+0x14>
    }

    return len;
 80019a2:	683b      	ldr	r3, [r7, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80019b0:	4915      	ldr	r1, [pc, #84]	; (8001a08 <USART2_IRQHandler+0x5c>)
 80019b2:	4816      	ldr	r0, [pc, #88]	; (8001a0c <USART2_IRQHandler+0x60>)
 80019b4:	f7ff ff25 	bl	8001802 <USART_GetITStatus>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d021      	beq.n	8001a02 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <USART2_IRQHandler+0x60>)
 80019c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019c2:	b299      	uxth	r1, r3
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <USART2_IRQHandler+0x64>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	b2d0      	uxtb	r0, r2
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <USART2_IRQHandler+0x64>)
 80019d0:	7010      	strb	r0, [r2, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	b2c9      	uxtb	r1, r1
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <USART2_IRQHandler+0x68>)
 80019d8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <USART2_IRQHandler+0x6c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d107      	bne.n	80019f4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <USART2_IRQHandler+0x70>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <USART2_IRQHandler+0x70>)
 80019f0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80019f2:	e006      	b.n	8001a02 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <USART2_IRQHandler+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <USART2_IRQHandler+0x6c>)
 8001a00:	701a      	strb	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	00050105 	.word	0x00050105
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	200001ac 	.word	0x200001ac
 8001a14:	200000ac 	.word	0x200000ac
 8001a18:	200001ae 	.word	0x200001ae
 8001a1c:	200001ad 	.word	0x200001ad

08001a20 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <uart_init+0x224>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f005 fba5 	bl	8007180 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <uart_init+0x224>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f005 fb9e 	bl	8007180 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001a44:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <uart_init+0x228>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4a7f      	ldr	r2, [pc, #508]	; (8001c48 <uart_init+0x228>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001a50:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <uart_init+0x228>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	4a7c      	ldr	r2, [pc, #496]	; (8001c48 <uart_init+0x228>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a8a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a96:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001a9a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ab6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001aba:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ac8:	f023 030c 	bic.w	r3, r3, #12
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001ad0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ad8:	8892      	ldrh	r2, [r2, #4]
 8001ada:	b292      	uxth	r2, r2
 8001adc:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aec:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001af8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001afc:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b18:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001b1c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <uart_init+0x22c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <uart_init+0x22c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <uart_init+0x22c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <uart_init+0x22c>)
 8001b30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b34:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <uart_init+0x22c>)
 8001b38:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <uart_init+0x22c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <uart_init+0x22c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a42      	ldr	r2, [pc, #264]	; (8001c4c <uart_init+0x22c>)
 8001b44:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b48:	f023 030c 	bic.w	r3, r3, #12
 8001b4c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <uart_init+0x22c>)
 8001b50:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <uart_init+0x22c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <uart_init+0x22c>)
 8001b58:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <uart_init+0x22c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <uart_init+0x22c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <uart_init+0x22c>)
 8001b64:	f043 030c 	orr.w	r3, r3, #12
 8001b68:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <uart_init+0x22c>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <uart_init+0x22c>)
 8001b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b74:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <uart_init+0x22c>)
 8001b78:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <uart_init+0x22c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b82:	2300      	movs	r3, #0
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
 8001b86:	2300      	movs	r3, #0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbb6 	bl	8001300 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <uart_init+0x22c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba6:	005a      	lsls	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc4:	e00d      	b.n	8001be2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	fb01 f202 	mul.w	r2, r1, r2
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d302      	bcc.n	8001bf2 <uart_init+0x1d2>
        divider++;
 8001bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <uart_init+0x22c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c0a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001c0e:	4013      	ands	r3, r2
 8001c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c12:	4313      	orrs	r3, r2
 8001c14:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <uart_init+0x22c>)
 8001c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <uart_init+0x22c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <uart_init+0x22c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4908      	ldr	r1, [pc, #32]	; (8001c50 <uart_init+0x230>)
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <uart_init+0x22c>)
 8001c30:	f7ff fd8c 	bl	800174c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f7ff fe35 	bl	80018a4 <NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	; 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000002c 	.word	0x2000002c
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	00050105 	.word	0x00050105

08001c54 <fgcolor>:
/**
  * @brief  Sets the foreground color of text TODO:REF
  * @param  the color to be set
  * @retval None
  */
void fgcolor(uint8_t foreground) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8001c5e:	2316      	movs	r3, #22
 8001c60:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d904      	bls.n	8001c72 <fgcolor+0x1e>
	  type = 1;                // bold text
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	331e      	adds	r3, #30
 8001c78:	211b      	movs	r1, #27
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <fgcolor+0x34>)
 8001c7c:	f005 f95e 	bl	8006f3c <iprintf>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0800819c 	.word	0x0800819c

08001c8c <clrscr>:
/**
  * @brief  clears the screen TODO:REF
  * @param  None
  * @retval None
  */
void clrscr(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001c90:	211b      	movs	r1, #27
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <clrscr+0x18>)
 8001c94:	f005 f952 	bl	8006f3c <iprintf>
    printf("%c[J", ESC);
 8001c98:	211b      	movs	r1, #27
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <clrscr+0x1c>)
 8001c9c:	f005 f94e 	bl	8006f3c <iprintf>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	080081c8 	.word	0x080081c8
 8001ca8:	080081d0 	.word	0x080081d0

08001cac <gotoxy>:
/**
  * @brief  Sends cursor to the given coordinate TODO:REF
  * @param  x: x-part, y: y-part
  * @retval None
  */
void gotoxy(int x, int y){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	211b      	movs	r1, #27
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <gotoxy+0x20>)
 8001cbe:	f005 f93d 	bl	8006f3c <iprintf>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	080081d8 	.word	0x080081d8

08001cd0 <drawBox>:
/**
  * @brief  Draws a box from given coordiantes TODO:REF
  * @param  x1: x of top left, y1: y of top left, x2: x of bottom right, y2: y of bottom right, style: the style of box 0=thin 1=bold
  * @retval None
  */
void drawBox(int x1, int y1, int x2, int y2, int style) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d15e      	bne.n	8001da2 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e019      	b.n	8001d1e <drawBox+0x4e>
			 gotoxy(x1,y);
 8001cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff ffdd 	bl	8001cac <gotoxy>
			 if (y==y1){
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d103      	bne.n	8001d02 <drawBox+0x32>
				printf("%c", 201);
 8001cfa:	20c9      	movs	r0, #201	; 0xc9
 8001cfc:	f005 f936 	bl	8006f6c <putchar>
 8001d00:	e00a      	b.n	8001d18 <drawBox+0x48>
			 }
			 else if(y==y2){
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d103      	bne.n	8001d12 <drawBox+0x42>
				printf("%c", 200);
 8001d0a:	20c8      	movs	r0, #200	; 0xc8
 8001d0c:	f005 f92e 	bl	8006f6c <putchar>
 8001d10:	e002      	b.n	8001d18 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001d12:	20ba      	movs	r0, #186	; 0xba
 8001d14:	f005 f92a 	bl	8006f6c <putchar>
		 for(int y = y1; y <= y2; y++){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dde1      	ble.n	8001cea <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	e014      	b.n	8001d56 <drawBox+0x86>
   			 if(x!=x1){
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d00d      	beq.n	8001d50 <drawBox+0x80>
				 gotoxy(x,y1);
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f7ff ffb8 	bl	8001cac <gotoxy>
				 printf("%c", 205);
 8001d3c:	20cd      	movs	r0, #205	; 0xcd
 8001d3e:	f005 f915 	bl	8006f6c <putchar>
				 gotoxy(x,y2);
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6a38      	ldr	r0, [r7, #32]
 8001d46:	f7ff ffb1 	bl	8001cac <gotoxy>
				 printf("%c", 205);
 8001d4a:	20cd      	movs	r0, #205	; 0xcd
 8001d4c:	f005 f90e 	bl	8006f6c <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	3301      	adds	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dde6      	ble.n	8001d2c <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e019      	b.n	8001d98 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001d64:	69f9      	ldr	r1, [r7, #28]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa0 	bl	8001cac <gotoxy>
   			 if (y==y1){
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d103      	bne.n	8001d7c <drawBox+0xac>
				printf("%c", 187);
 8001d74:	20bb      	movs	r0, #187	; 0xbb
 8001d76:	f005 f8f9 	bl	8006f6c <putchar>
 8001d7a:	e00a      	b.n	8001d92 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d103      	bne.n	8001d8c <drawBox+0xbc>
				printf("%c", 188);
 8001d84:	20bc      	movs	r0, #188	; 0xbc
 8001d86:	f005 f8f1 	bl	8006f6c <putchar>
 8001d8a:	e002      	b.n	8001d92 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001d8c:	20ba      	movs	r0, #186	; 0xba
 8001d8e:	f005 f8ed 	bl	8006f6c <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dde1      	ble.n	8001d64 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001da0:	e05d      	b.n	8001e5e <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	e019      	b.n	8001ddc <drawBox+0x10c>
			 gotoxy(x1,y);
 8001da8:	69b9      	ldr	r1, [r7, #24]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff7e 	bl	8001cac <gotoxy>
			 if (y==y1){
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d103      	bne.n	8001dc0 <drawBox+0xf0>
				printf("%c", 218);
 8001db8:	20da      	movs	r0, #218	; 0xda
 8001dba:	f005 f8d7 	bl	8006f6c <putchar>
 8001dbe:	e00a      	b.n	8001dd6 <drawBox+0x106>
			 else if(y==y2){
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d103      	bne.n	8001dd0 <drawBox+0x100>
				printf("%c", 192);
 8001dc8:	20c0      	movs	r0, #192	; 0xc0
 8001dca:	f005 f8cf 	bl	8006f6c <putchar>
 8001dce:	e002      	b.n	8001dd6 <drawBox+0x106>
				printf("%c", 179);
 8001dd0:	20b3      	movs	r0, #179	; 0xb3
 8001dd2:	f005 f8cb 	bl	8006f6c <putchar>
		for(int y = y1; y <= y2; y++){
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dde1      	ble.n	8001da8 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e014      	b.n	8001e14 <drawBox+0x144>
			if(x!=x1){
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00d      	beq.n	8001e0e <drawBox+0x13e>
				 gotoxy(x,y1);
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7ff ff59 	bl	8001cac <gotoxy>
				 printf("%c", 196);
 8001dfa:	20c4      	movs	r0, #196	; 0xc4
 8001dfc:	f005 f8b6 	bl	8006f6c <putchar>
				 gotoxy(x,y2);
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff52 	bl	8001cac <gotoxy>
				 printf("%c", 196);
 8001e08:	20c4      	movs	r0, #196	; 0xc4
 8001e0a:	f005 f8af 	bl	8006f6c <putchar>
		for(int x = x1; x <= x2; x++){
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dde6      	ble.n	8001dea <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e019      	b.n	8001e56 <drawBox+0x186>
			 gotoxy(x2,y);
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff41 	bl	8001cac <gotoxy>
			if (y==y1){
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d103      	bne.n	8001e3a <drawBox+0x16a>
				printf("%c", 191);
 8001e32:	20bf      	movs	r0, #191	; 0xbf
 8001e34:	f005 f89a 	bl	8006f6c <putchar>
 8001e38:	e00a      	b.n	8001e50 <drawBox+0x180>
			 else if(y==y2){
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d103      	bne.n	8001e4a <drawBox+0x17a>
				printf("%c", 217);
 8001e42:	20d9      	movs	r0, #217	; 0xd9
 8001e44:	f005 f892 	bl	8006f6c <putchar>
 8001e48:	e002      	b.n	8001e50 <drawBox+0x180>
				printf("%c", 179);
 8001e4a:	20b3      	movs	r0, #179	; 0xb3
 8001e4c:	f005 f88e 	bl	8006f6c <putchar>
		for(int y = y1; y <= y2; y++){
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3301      	adds	r3, #1
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dde1      	ble.n	8001e22 <drawBox+0x152>
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <rectsOverlap>:



// from https://www.geeksforgeeks.org/find-two-rectangles-overlap/ (modified)
// returns 1 if two given rectangles overlap. returns 0 otherwise.
uint8_t rectsOverlap(position_t l1, position_t r1, position_t l2, position_t r2){
 8001e66:	b490      	push	{r4, r7}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f107 0408 	add.w	r4, r7, #8
 8001e70:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e74:	4639      	mov	r1, r7
 8001e76:	e881 000c 	stmia.w	r1, {r2, r3}
		// If one rectangle is on left side of other
		if (l1.x > r2.x || l2.x > r1.x){
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d803      	bhi.n	8001e8a <rectsOverlap+0x24>
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d901      	bls.n	8001e8e <rectsOverlap+0x28>
			return 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e00a      	b.n	8001ea4 <rectsOverlap+0x3e>
		}

		// If one rectangle is above other
		if (r1.y < l2.y || r2.y < l1.y) {
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d303      	bcc.n	8001e9e <rectsOverlap+0x38>
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d201      	bcs.n	8001ea2 <rectsOverlap+0x3c>
				return 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <rectsOverlap+0x3e>
		}
    return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc90      	pop	{r4, r7}
 8001eac:	4770      	bx	lr

08001eae <updateBullets>:
/**
  * @brief  Updates the position of all the bullets according to their velocities and thier velocities according the gravity from the moon
  * @param  gamestate: the current state of the game
  * @retval None
  */
void updateBullets(gameState_t* gameState){
 8001eae:	b590      	push	{r4, r7, lr}
 8001eb0:	b089      	sub	sp, #36	; 0x24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61fb      	str	r3, [r7, #28]
	//Loops though the bullet linked list
	while (current != NULL) {
 8001ebc:	e073      	b.n	8001fa6 <updateBullets+0xf8>
		//Gravity calculations for bullets
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y}; //Creates a vector from bullet to the moon
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7c5b      	ldrb	r3, [r3, #17]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fbfe 	bl	80036c6 <intToFp>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7c9b      	ldrb	r3, [r3, #18]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 fbf3 	bl	80036c6 <intToFp>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); //Approximates the distance to the moon by multiplying the sum of the vector-coordinates by 2/sqrt(2)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fc89 	bl	8003804 <fpAbs>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fc84 	bl	8003804 <fpAbs>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4423      	add	r3, r4
 8001f00:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 fc0c 	bl	8003722 <fpMultiply>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon)); //scales the vector to a length of 1
 8001f10:	2001      	movs	r0, #1
 8001f12:	f001 fbd8 	bl	80036c6 <intToFp>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f001 fc20 	bl	8003764 <fpDivide>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f107 0014 	add.w	r0, r7, #20
 8001f2a:	f107 0214 	add.w	r2, r7, #20
 8001f2e:	ca06      	ldmia	r2, {r1, r2}
 8001f30:	f001 fc46 	bl	80037c0 <scaleVector>
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon))); //Scale the vector proportional to the distance to the moon
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7cdb      	ldrb	r3, [r3, #19]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 fbc3 	bl	80036c6 <intToFp>
 8001f40:	4604      	mov	r4, r0
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f001 fbe8 	bl	8003722 <fpMultiply>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4620      	mov	r0, r4
 8001f58:	f001 fc04 	bl	8003764 <fpDivide>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f107 000c 	add.w	r0, r7, #12
 8001f62:	f107 0214 	add.w	r2, r7, #20
 8001f66:	ca06      	ldmia	r2, {r1, r2}
 8001f68:	f001 fc2a 	bl	80037c0 <scaleVector>

		//Adds acceleration to the bullets velocity
		current->bullet.velocity.x+=accVec.x;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	441a      	add	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	441a      	add	r2, r3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	615a      	str	r2, [r3, #20]

		//Adds velocity to the bullets position
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d188      	bne.n	8001ebe <updateBullets+0x10>
	}

}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <detectBulletHit>:
/**
  * @brief  Checks if a bullets has hit something
  * @param  gamestate: the current state of the game
  * @retval None
  */
void detectBulletHit(gameState_t* gameState){
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b09d      	sub	sp, #116	; 0x74
 8001fba:	af04      	add	r7, sp, #16
 8001fbc:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	//Loops over all bullets
	while (current != NULL) {
 8001fc4:	e1c7      	b.n	8002356 <detectBulletHit+0x3a0>
		//do initial calculations
		position_t bulletTopLftCnr = {0,0};
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
		position_t bulletDwnRghtCnr = {0,0};
 8001fce:	2300      	movs	r3, #0
 8001fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44

		if(current->bullet.position.x<current->bullet.nextPosition.x){
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d206      	bcs.n	8001ff0 <detectBulletHit+0x3a>
			bulletTopLftCnr.x=current->bullet.position.x;
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
			bulletDwnRghtCnr.x=current->bullet.nextPosition.x;
 8001fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	643b      	str	r3, [r7, #64]	; 0x40
 8001fee:	e005      	b.n	8001ffc <detectBulletHit+0x46>
		} else {
			bulletTopLftCnr.x=current->bullet.nextPosition.x;
 8001ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
			bulletDwnRghtCnr.x=current->bullet.position.x;
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(current->bullet.position.y<current->bullet.nextPosition.y){
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d206      	bcs.n	8002016 <detectBulletHit+0x60>
			bulletTopLftCnr.y=current->bullet.position.y;
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
			bulletDwnRghtCnr.y=current->bullet.nextPosition.y;
 800200e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
 8002014:	e005      	b.n	8002022 <detectBulletHit+0x6c>
		} else {
			bulletTopLftCnr.y=current->bullet.nextPosition.y;
 8002016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
			bulletDwnRghtCnr.y=current->bullet.position.y;
 800201c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
		}


		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4618      	mov	r0, r3
 8002028:	f001 fb62 	bl	80036f0 <fpToInt>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4618      	mov	r0, r3
 8002038:	f001 fb5a 	bl	80036f0 <fpToInt>
 800203c:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 800203e:	2b04      	cmp	r3, #4
 8002040:	d91b      	bls.n	800207a <detectBulletHit+0xc4>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8002042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fb52 	bl	80036f0 <fpToInt>
 800204c:	4603      	mov	r3, r0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 800204e:	2b55      	cmp	r3, #85	; 0x55
 8002050:	d813      	bhi.n	800207a <detectBulletHit+0xc4>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8002052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fb4a 	bl	80036f0 <fpToInt>
 800205c:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 800205e:	2b01      	cmp	r3, #1
 8002060:	d90b      	bls.n	800207a <detectBulletHit+0xc4>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8002062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fb42 	bl	80036f0 <fpToInt>
 800206c:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 800206e:	2b9b      	cmp	r3, #155	; 0x9b
 8002070:	d803      	bhi.n	800207a <detectBulletHit+0xc4>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8002072:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002076:	2b06      	cmp	r3, #6
 8002078:	d801      	bhi.n	800207e <detectBulletHit+0xc8>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <detectBulletHit+0xca>
 800207e:	2300      	movs	r3, #0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8002080:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				distToMoon<=6;

		//Checks if the bullet hit the moon or a wall
		if(hitInertObject){
 8002084:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <detectBulletHit+0xe8>
			deleteBulletNode(&(gameState->bulletLL), current);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f8a5 	bl	80051e0 <deleteBulletNode>
			current = current->nextBulletAddress;
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	65fb      	str	r3, [r7, #92]	; 0x5c
			continue;
 800209c:	e15b      	b.n	8002356 <detectBulletHit+0x3a0>
		}

		//Checks if the bullet hit the spaceship
		uint8_t hitSpaceship;
		if(gameState->spaceship.numberOfParts==1){
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d134      	bne.n	8002112 <detectBulletHit+0x15c>
			position_t spaceshipTopLftCnr= {gameState->spaceship.position.x-intToFp(1),gameState->spaceship.position.y};
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69dc      	ldr	r4, [r3, #28]
 80020ac:	2001      	movs	r0, #1
 80020ae:	f001 fb0a 	bl	80036c6 <intToFp>
 80020b2:	4603      	mov	r3, r0
 80020b4:	1ae3      	subs	r3, r4, r3
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			position_t spaceshipDwnLftCnr= {gameState->spaceship.position.x+intToFp(1),gameState->spaceship.position.y+intToFp(1*yScale)};
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69dc      	ldr	r4, [r3, #28]
 80020c2:	2001      	movs	r0, #1
 80020c4:	f001 faff 	bl	80036c6 <intToFp>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4423      	add	r3, r4
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1c      	ldr	r4, [r3, #32]
 80020d2:	2002      	movs	r0, #2
 80020d4:	f001 faf7 	bl	80036c6 <intToFp>
 80020d8:	4603      	mov	r3, r0
 80020da:	4423      	add	r3, r4
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
			hitSpaceship = rectsOverlap(bulletTopLftCnr, bulletDwnRghtCnr, spaceshipTopLftCnr, spaceshipDwnLftCnr);
 80020de:	aa02      	add	r2, sp, #8
 80020e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80020ec:	466a      	mov	r2, sp
 80020ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80020fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020fe:	cb0c      	ldmia	r3, {r2, r3}
 8002100:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002104:	c903      	ldmia	r1, {r0, r1}
 8002106:	f7ff feae 	bl	8001e66 <rectsOverlap>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002110:	e072      	b.n	80021f8 <detectBulletHit+0x242>
		}
		else if(gameState->spaceship.numberOfParts==2){
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002118:	2b02      	cmp	r3, #2
 800211a:	d134      	bne.n	8002186 <detectBulletHit+0x1d0>
			position_t spaceshipTopLftCnr= {gameState->spaceship.position.x-intToFp(1),gameState->spaceship.position.y};
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69dc      	ldr	r4, [r3, #28]
 8002120:	2001      	movs	r0, #1
 8002122:	f001 fad0 	bl	80036c6 <intToFp>
 8002126:	4603      	mov	r3, r0
 8002128:	1ae3      	subs	r3, r4, r3
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
			position_t spaceshipDwnLftCnr= {gameState->spaceship.position.x+intToFp(8),gameState->spaceship.position.y+intToFp(1*yScale)};
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69dc      	ldr	r4, [r3, #28]
 8002136:	2008      	movs	r0, #8
 8002138:	f001 fac5 	bl	80036c6 <intToFp>
 800213c:	4603      	mov	r3, r0
 800213e:	4423      	add	r3, r4
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1c      	ldr	r4, [r3, #32]
 8002146:	2002      	movs	r0, #2
 8002148:	f001 fabd 	bl	80036c6 <intToFp>
 800214c:	4603      	mov	r3, r0
 800214e:	4423      	add	r3, r4
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
			hitSpaceship = rectsOverlap(bulletTopLftCnr, bulletDwnRghtCnr, spaceshipTopLftCnr, spaceshipDwnLftCnr);
 8002152:	aa02      	add	r2, sp, #8
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	e893 0003 	ldmia.w	r3, {r0, r1}
 800215c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002160:	466a      	mov	r2, sp
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	e893 0003 	ldmia.w	r3, {r0, r1}
 800216a:	e882 0003 	stmia.w	r2, {r0, r1}
 800216e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002172:	cb0c      	ldmia	r3, {r2, r3}
 8002174:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002178:	c903      	ldmia	r1, {r0, r1}
 800217a:	f7ff fe74 	bl	8001e66 <rectsOverlap>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002184:	e038      	b.n	80021f8 <detectBulletHit+0x242>
		}
		else if(gameState->spaceship.numberOfParts==3){
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800218c:	2b03      	cmp	r3, #3
 800218e:	d133      	bne.n	80021f8 <detectBulletHit+0x242>
			position_t spaceshipTopLftCnr= {gameState->spaceship.position.x-intToFp(8),gameState->spaceship.position.y};
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69dc      	ldr	r4, [r3, #28]
 8002194:	2008      	movs	r0, #8
 8002196:	f001 fa96 	bl	80036c6 <intToFp>
 800219a:	4603      	mov	r3, r0
 800219c:	1ae3      	subs	r3, r4, r3
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	61fb      	str	r3, [r7, #28]
			position_t spaceshipDwnLftCnr= {gameState->spaceship.position.x+intToFp(8),gameState->spaceship.position.y+intToFp(1*yScale)};
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69dc      	ldr	r4, [r3, #28]
 80021aa:	2008      	movs	r0, #8
 80021ac:	f001 fa8b 	bl	80036c6 <intToFp>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4423      	add	r3, r4
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1c      	ldr	r4, [r3, #32]
 80021ba:	2002      	movs	r0, #2
 80021bc:	f001 fa83 	bl	80036c6 <intToFp>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4423      	add	r3, r4
 80021c4:	617b      	str	r3, [r7, #20]
			hitSpaceship = rectsOverlap(bulletTopLftCnr, bulletDwnRghtCnr, spaceshipTopLftCnr, spaceshipDwnLftCnr);
 80021c6:	aa02      	add	r2, sp, #8
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80021d4:	466a      	mov	r2, sp
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021de:	e882 0003 	stmia.w	r2, {r0, r1}
 80021e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021e6:	cb0c      	ldmia	r3, {r2, r3}
 80021e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80021ec:	c903      	ldmia	r1, {r0, r1}
 80021ee:	f7ff fe3a 	bl	8001e66 <rectsOverlap>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		}

		//If a hit deletes a part of the spaceship
		if(hitSpaceship){
 80021f8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d053      	beq.n	80022a8 <detectBulletHit+0x2f2>
			gameState->soundToPlay = 4;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

			if(gameState->spaceship.numberOfParts==3){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800220e:	2b03      	cmp	r3, #3
 8002210:	d11e      	bne.n	8002250 <detectBulletHit+0x29a>
				deleteMe(fpToInt(gameState->spaceship.position.x)-7, fpToInt(gameState->spaceship.position.y)/yScale);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fa6a 	bl	80036f0 <fpToInt>
 800221c:	4603      	mov	r3, r0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3b07      	subs	r3, #7
 8002222:	b2dc      	uxtb	r4, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fa61 	bl	80036f0 <fpToInt>
 800222e:	4603      	mov	r3, r0
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	4620      	mov	r0, r4
 800223a:	f002 f9ae 	bl	800459a <deleteMe>
				gameState->spaceship.numberOfParts--;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002244:	3b01      	subs	r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800224e:	e022      	b.n	8002296 <detectBulletHit+0x2e0>
			} else if(gameState->spaceship.numberOfParts==2){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11d      	bne.n	8002296 <detectBulletHit+0x2e0>
				deleteMe(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y)/yScale);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fa46 	bl	80036f0 <fpToInt>
 8002264:	4603      	mov	r3, r0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3307      	adds	r3, #7
 800226a:	b2dc      	uxtb	r4, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fa3d 	bl	80036f0 <fpToInt>
 8002276:	4603      	mov	r3, r0
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	b29b      	uxth	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f002 f98a 	bl	800459a <deleteMe>
				gameState->spaceship.numberOfParts--;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}

			deleteBulletNode(&(gameState->bulletLL), current);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800229a:	4618      	mov	r0, r3
 800229c:	f002 ffa0 	bl	80051e0 <deleteBulletNode>
			current = current->nextBulletAddress;
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
			continue;
 80022a6:	e056      	b.n	8002356 <detectBulletHit+0x3a0>
		}


		//Loops over all the enemies and checks for hits
		enemyNode_t* currentEnemy = gameState->enemyLL;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	657b      	str	r3, [r7, #84]	; 0x54
		while(currentEnemy != NULL){
 80022ae:	e04c      	b.n	800234a <detectBulletHit+0x394>
			position_t enemyDwnRghtCnr = {currentEnemy->enemy->position->x+intToFp(6), currentEnemy->enemy->position->y+intToFp(1*yScale)};
 80022b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	2006      	movs	r0, #6
 80022ba:	f001 fa04 	bl	80036c6 <intToFp>
 80022be:	4603      	mov	r3, r0
 80022c0:	4423      	add	r3, r4
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685c      	ldr	r4, [r3, #4]
 80022cc:	2002      	movs	r0, #2
 80022ce:	f001 f9fa 	bl	80036c6 <intToFp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4423      	add	r3, r4
 80022d6:	60fb      	str	r3, [r7, #12]
			uint8_t hitEnemy = rectsOverlap(bulletTopLftCnr, bulletDwnRghtCnr, *(currentEnemy->enemy->position), enemyDwnRghtCnr);
 80022d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681c      	ldr	r4, [r3, #0]
 80022de:	aa02      	add	r2, sp, #8
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80022ec:	466b      	mov	r3, sp
 80022ee:	4622      	mov	r2, r4
 80022f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80022f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022fc:	cb0c      	ldmia	r3, {r2, r3}
 80022fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002302:	c903      	ldmia	r1, {r0, r1}
 8002304:	f7ff fdaf 	bl	8001e66 <rectsOverlap>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

			if(hitEnemy == 1){
 800230e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002312:	2b01      	cmp	r3, #1
 8002314:	d116      	bne.n	8002344 <detectBulletHit+0x38e>
				gameState->soundToPlay = 4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
				gameState->score += 10;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	330a      	adds	r3, #10
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
				drawScore(gameState);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f002 f8c0 	bl	80044b0 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002334:	4618      	mov	r0, r3
 8002336:	f002 ff53 	bl	80051e0 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 800233a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f002 fe99 	bl	8005074 <deleteEnemyNode>
 8002342:	e005      	b.n	8002350 <detectBulletHit+0x39a>
				break;
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8002344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	657b      	str	r3, [r7, #84]	; 0x54
		while(currentEnemy != NULL){
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1af      	bne.n	80022b0 <detectBulletHit+0x2fa>
		}
		current = current->nextBulletAddress;
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (current != NULL) {
 8002356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f ae34 	bne.w	8001fc6 <detectBulletHit+0x10>
	}
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	3764      	adds	r7, #100	; 0x64
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <drawBullets>:
/**
  * @brief  draws all the bullets to the screen
  * @param  gamestate: the current state of the game
  * @retval None
  */
void drawBullets(gameState_t* gameState){
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8002376:	e036      	b.n	80023e6 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f9b7 	bl	80036f0 <fpToInt>
 8002382:	4603      	mov	r3, r0
 8002384:	461c      	mov	r4, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	f001 f9b0 	bl	80036f0 <fpToInt>
 8002390:	4603      	mov	r3, r0
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff fc87 	bl	8001cac <gotoxy>
		printf(" ");
 800239e:	2020      	movs	r0, #32
 80023a0:	f004 fde4 	bl	8006f6c <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 f9a1 	bl	80036f0 <fpToInt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461c      	mov	r4, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 f99a 	bl	80036f0 <fpToInt>
 80023bc:	4603      	mov	r3, r0
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff fc71 	bl	8001cac <gotoxy>
		printf("O");
 80023ca:	204f      	movs	r0, #79	; 0x4f
 80023cc:	f004 fdce 	bl	8006f6c <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1c5      	bne.n	8002378 <drawBullets+0x10>
	}
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
	...

080023f8 <NVIC_EnableIRQ>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2201      	movs	r2, #1
 800240a:	fa02 f103 	lsl.w	r1, r2, r3
 800240e:	4a06      	ldr	r2, [pc, #24]	; (8002428 <NVIC_EnableIRQ+0x30>)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0b      	bge.n	8002458 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <NVIC_SetPriority+0x4c>)
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	3b04      	subs	r3, #4
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002456:	e009      	b.n	800246c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <NVIC_SetPriority+0x50>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00
 800247c:	e000e100 	.word	0xe000e100

08002480 <initJoystick>:
/**
  * @brief  Sets up the pins for the joystick TODO: REF
  * @param  None
  * @retval None
  */
void initJoystick(){
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <initJoystick+0x120>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	4a45      	ldr	r2, [pc, #276]	; (80025a0 <initJoystick+0x120>)
 800248a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <initJoystick+0x120>)
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4a42      	ldr	r2, [pc, #264]	; (80025a0 <initJoystick+0x120>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249a:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <initJoystick+0x120>)
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	4a3f      	ldr	r2, [pc, #252]	; (80025a0 <initJoystick+0x120>)
 80024a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024a6:	6153      	str	r3, [r2, #20]

	//CENTER B5
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80024a8:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <initJoystick+0x124>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3d      	ldr	r2, [pc, #244]	; (80025a4 <initJoystick+0x124>)
 80024ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024b2:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 – Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <initJoystick+0x124>)
 80024b6:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <initJoystick+0x124>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <initJoystick+0x124>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <initJoystick+0x124>)
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <initJoystick+0x124>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a35      	ldr	r2, [pc, #212]	; (80025a4 <initJoystick+0x124>)
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	60d3      	str	r3, [r2, #12]

	 //UP A4
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2));
 80024d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e2:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2));
 80024e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2));
 80024f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2));
 8002500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	60d3      	str	r3, [r2, #12]

	 //down B0
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2));
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <initJoystick+0x124>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <initJoystick+0x124>)
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2));
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <initJoystick+0x124>)
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <initJoystick+0x124>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2));
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <initJoystick+0x124>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <initJoystick+0x124>)
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2));
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <initJoystick+0x124>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <initJoystick+0x124>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	60d3      	str	r3, [r2, #12]

	 //left C1
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2));
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <initJoystick+0x128>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <initJoystick+0x128>)
 8002542:	f023 030c 	bic.w	r3, r3, #12
 8002546:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2));
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <initJoystick+0x128>)
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <initJoystick+0x128>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2));
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <initJoystick+0x128>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <initJoystick+0x128>)
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2));
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <initJoystick+0x128>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <initJoystick+0x128>)
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	60d3      	str	r3, [r2, #12]

	 //right C0
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2));
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <initJoystick+0x128>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <initJoystick+0x128>)
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2));
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <initJoystick+0x128>)
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <initJoystick+0x128>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2));
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <initJoystick+0x128>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <initJoystick+0x128>)
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2));
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <initJoystick+0x128>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <initJoystick+0x128>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	60d3      	str	r3, [r2, #12]

}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800

080025ac <centerIsPressed>:
/**
  * @brief  Reads the if the center of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t centerIsPressed(){
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <centerIsPressed+0x50>)
 80025b2:	8a1b      	ldrh	r3, [r3, #16]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <centerIsPressed+0x2c>
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <centerIsPressed+0x54>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <centerIsPressed+0x58>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b1e      	cmp	r3, #30
 80025ca:	d905      	bls.n	80025d8 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <centerIsPressed+0x54>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <centerIsPressed+0x58>)
 80025d2:	6013      	str	r3, [r2, #0]
		 return 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e00c      	b.n	80025f2 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <centerIsPressed+0x50>)
 80025da:	8a1b      	ldrh	r3, [r3, #16]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <centerIsPressed+0x54>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <centerIsPressed+0x58>)
 80025ee:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80025f0:	2300      	movs	r3, #0
	 }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	48000400 	.word	0x48000400
 8002600:	200001c8 	.word	0x200001c8
 8002604:	200001b0 	.word	0x200001b0

08002608 <upIsPressed>:
/**
  * @brief  Reads the if the up of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t upIsPressed(){
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 800260c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002610:	8a1b      	ldrh	r3, [r3, #16]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <upIsPressed+0x2e>
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <upIsPressed+0x54>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <upIsPressed+0x58>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b1e      	cmp	r3, #30
 8002628:	d905      	bls.n	8002636 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <upIsPressed+0x54>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <upIsPressed+0x58>)
 8002630:	6013      	str	r3, [r2, #0]
			 return 1;
 8002632:	2301      	movs	r3, #1
 8002634:	e00d      	b.n	8002652 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8002636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800263a:	8a1b      	ldrh	r3, [r3, #16]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <upIsPressed+0x54>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3b1e      	subs	r3, #30
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <upIsPressed+0x58>)
 800264e:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8002650:	2300      	movs	r3, #0
		 }
	 }
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	200001c8 	.word	0x200001c8
 8002660:	200001b4 	.word	0x200001b4

08002664 <downIsPressed>:
/**
  * @brief  Reads the if the down of joystick is pressed
  * @param  None
  * @retval 0 if not pressed, 1 if pressed
  */
uint8_t downIsPressed(){
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <downIsPressed+0x50>)
 800266a:	8a1b      	ldrh	r3, [r3, #16]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <downIsPressed+0x2c>
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <downIsPressed+0x54>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <downIsPressed+0x58>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b1e      	cmp	r3, #30
 8002682:	d905      	bls.n	8002690 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <downIsPressed+0x54>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <downIsPressed+0x58>)
 800268a:	6013      	str	r3, [r2, #0]
			 return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e00c      	b.n	80026aa <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <downIsPressed+0x50>)
 8002692:	8a1b      	ldrh	r3, [r3, #16]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <downIsPressed+0x54>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3b1e      	subs	r3, #30
 80026a4:	4a05      	ldr	r2, [pc, #20]	; (80026bc <downIsPressed+0x58>)
 80026a6:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80026a8:	2300      	movs	r3, #0
		 }
	 }
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	48000400 	.word	0x48000400
 80026b8:	200001c8 	.word	0x200001c8
 80026bc:	200001b8 	.word	0x200001b8

080026c0 <initTimer>:
/**
  * @brief  Sets up timer 15 to a period of 0.01s and timer 2 to be configured later for the buzzer TODO: REF
  * @param  None
  * @retval None
  */
void initTimer(){ //period = 0,01 sec
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <initTimer+0x108>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <initTimer+0x108>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80026d0:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <initTimer+0x10c>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4a3d      	ldr	r2, [pc, #244]	; (80027cc <initTimer+0x10c>)
 80026d8:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80026dc:	f023 030f 	bic.w	r3, r3, #15
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <initTimer+0x10c>)
 80026e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <initTimer+0x10c>)
 80026ee:	2209      	movs	r2, #9
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <initTimer+0x10c>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <initTimer+0x10c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <initTimer+0x10c>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <initTimer+0x10c>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800270e:	2100      	movs	r1, #0
 8002710:	2018      	movs	r0, #24
 8002712:	f7ff fe8b 	bl	800242c <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8002716:	2018      	movs	r0, #24
 8002718:	f7ff fe6e 	bl	80023f8 <NVIC_EnableIRQ>


	 //BUZZER timer (TIM2)vvvvvvvvvvvvvvvv
	 RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <initTimer+0x108>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <initTimer+0x108>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	61d3      	str	r3, [r2, #28]

	 TIM2->CR1 &= 0xF400; // Configure timer 2
 8002728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002734:	f423 633f 	bic.w	r3, r3, #3056	; 0xbf0
 8002738:	f023 030f 	bic.w	r3, r3, #15
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
	 TIM2->PSC = 9;
 8002740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002744:	2209      	movs	r2, #9
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8002748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002752:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002756:	6213      	str	r3, [r2, #32]
	 TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8002758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6213      	str	r3, [r2, #32]
	 TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8002768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8002778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8002788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002792:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002796:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8002798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a2:	f023 0308 	bic.w	r3, r3, #8
 80027a6:	61d3      	str	r3, [r2, #28]
	 TIM2->CCMR2 |= TIM_OCPreload_Enable;
 80027a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	61d3      	str	r3, [r2, #28]
	 TIM2->CCR3 = 63999 / 2; // Set duty cycle to 50 %
 80027b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027bc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40014000 	.word	0x40014000

080027d0 <TIM1_BRK_TIM15_IRQHandler>:
/**
  * @brief  When timer 15 interrupts (every 0.01s) adds 1 to runtime
  * @param  None
  * @retval None
  */
void TIM1_BRK_TIM15_IRQHandler(void) {
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
	runtime++;
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80027dc:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6113      	str	r3, [r2, #16]
 }
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	200001c8 	.word	0x200001c8
 80027f8:	40014000 	.word	0x40014000

080027fc <initBuzzerPin>:
/**
  * @brief  Sets up the pin controlling the buzzer
  * @param  None
  * @retval None
  */
void initBuzzerPin(){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <initBuzzerPin+0x68>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <initBuzzerPin+0x68>)
 8002806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280a:	6153      	str	r3, [r2, #20]

	GPIOB->OSPEEDR &= ~(0x00000003 << (2*10));
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <initBuzzerPin+0x6c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <initBuzzerPin+0x6c>)
 8002812:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002816:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*10));  //Low speed
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <initBuzzerPin+0x6c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <initBuzzerPin+0x6c>)
 800281e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002822:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (10));
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <initBuzzerPin+0x6c>)
 8002826:	889b      	ldrh	r3, [r3, #4]
 8002828:	b29b      	uxth	r3, r3
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <initBuzzerPin+0x6c>)
 800282c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002830:	b29b      	uxth	r3, r3
 8002832:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= 0x0000 << (10); //Push-pull
 8002834:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <initBuzzerPin+0x6c>)
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <initBuzzerPin+0x6c>)
 8002838:	8892      	ldrh	r2, [r2, #4]
 800283a:	b292      	uxth	r2, r2
 800283c:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*10));
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <initBuzzerPin+0x6c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <initBuzzerPin+0x6c>)
 8002844:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002848:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000002 << (2*10); //Alternate function
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <initBuzzerPin+0x6c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a06      	ldr	r2, [pc, #24]	; (8002868 <initBuzzerPin+0x6c>)
 8002850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002854:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8002856:	2201      	movs	r2, #1
 8002858:	210a      	movs	r1, #10
 800285a:	4803      	ldr	r0, [pc, #12]	; (8002868 <initBuzzerPin+0x6c>)
 800285c:	f7fe fc90 	bl	8001180 <GPIO_PinAFConfig>
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	48000400 	.word	0x48000400

0800286c <I2C_Write>:
/**
  * @brief  Writes a byte on I2C bus TODO: REF
  * @param  address: the I2C adress to writer on, reg: the register to write to, val: the byte to write
  * @retval None
  */
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af02      	add	r7, sp, #8
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
 8002876:	460b      	mov	r3, r1
 8002878:	717b      	strb	r3, [r7, #5]
 800287a:	4613      	mov	r3, r2
 800287c:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 800287e:	bf00      	nop
 8002880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002884:	4825      	ldr	r0, [pc, #148]	; (800291c <I2C_Write+0xb0>)
 8002886:	f7fe fd0d 	bl	80012a4 <I2C_GetFlagStatus>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d0f7      	beq.n	8002880 <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 8002890:	88f9      	ldrh	r1, [r7, #6]
 8002892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800289c:	2201      	movs	r2, #1
 800289e:	481f      	ldr	r0, [pc, #124]	; (800291c <I2C_Write+0xb0>)
 80028a0:	f7fe fcb8 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80028a4:	bf00      	nop
 80028a6:	2102      	movs	r1, #2
 80028a8:	481c      	ldr	r0, [pc, #112]	; (800291c <I2C_Write+0xb0>)
 80028aa:	f7fe fcfb 	bl	80012a4 <I2C_GetFlagStatus>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f8      	beq.n	80028a6 <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 80028b4:	797b      	ldrb	r3, [r7, #5]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4818      	ldr	r0, [pc, #96]	; (800291c <I2C_Write+0xb0>)
 80028ba:	f7fe fcd7 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 80028be:	bf00      	nop
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	4816      	ldr	r0, [pc, #88]	; (800291c <I2C_Write+0xb0>)
 80028c4:	f7fe fcee 	bl	80012a4 <I2C_GetFlagStatus>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f8      	beq.n	80028c0 <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 80028ce:	88f9      	ldrh	r1, [r7, #6]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d8:	2201      	movs	r2, #1
 80028da:	4810      	ldr	r0, [pc, #64]	; (800291c <I2C_Write+0xb0>)
 80028dc:	f7fe fc9a 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80028e0:	bf00      	nop
 80028e2:	2102      	movs	r1, #2
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <I2C_Write+0xb0>)
 80028e6:	f7fe fcdd 	bl	80012a4 <I2C_GetFlagStatus>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f8      	beq.n	80028e2 <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 80028f0:	793b      	ldrb	r3, [r7, #4]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4809      	ldr	r0, [pc, #36]	; (800291c <I2C_Write+0xb0>)
 80028f6:	f7fe fcb9 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 80028fa:	bf00      	nop
 80028fc:	2120      	movs	r1, #32
 80028fe:	4807      	ldr	r0, [pc, #28]	; (800291c <I2C_Write+0xb0>)
 8002900:	f7fe fcd0 	bl	80012a4 <I2C_GetFlagStatus>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f8      	beq.n	80028fc <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800290a:	2120      	movs	r1, #32
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <I2C_Write+0xb0>)
 800290e:	f7fe fce8 	bl	80012e2 <I2C_ClearFlag>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40005400 	.word	0x40005400

08002920 <I2C_Read>:
/**
  * @brief  Reads data from the I2C bus TODO: REF
  * @param  address: the I2C adress to writer on, reg: the register to write to, vals: the bytes to read, n: the amout of bytes to read
  * @retval None
  */
uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b087      	sub	sp, #28
 8002924:	af02      	add	r7, sp, #8
 8002926:	603a      	str	r2, [r7, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
 800292e:	460b      	mov	r3, r1
 8002930:	717b      	strb	r3, [r7, #5]
 8002932:	4613      	mov	r3, r2
 8002934:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 800293a:	bf00      	nop
 800293c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002940:	4830      	ldr	r0, [pc, #192]	; (8002a04 <I2C_Read+0xe4>)
 8002942:	f7fe fcaf 	bl	80012a4 <I2C_GetFlagStatus>
 8002946:	4603      	mov	r3, r0
 8002948:	2b01      	cmp	r3, #1
 800294a:	d0f7      	beq.n	800293c <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 800294c:	88f9      	ldrh	r1, [r7, #6]
 800294e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	2201      	movs	r2, #1
 8002958:	482a      	ldr	r0, [pc, #168]	; (8002a04 <I2C_Read+0xe4>)
 800295a:	f7fe fc5b 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 800295e:	bf00      	nop
 8002960:	2102      	movs	r1, #2
 8002962:	4828      	ldr	r0, [pc, #160]	; (8002a04 <I2C_Read+0xe4>)
 8002964:	f7fe fc9e 	bl	80012a4 <I2C_GetFlagStatus>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f8      	beq.n	8002960 <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 800296e:	797b      	ldrb	r3, [r7, #5]
 8002970:	4619      	mov	r1, r3
 8002972:	4824      	ldr	r0, [pc, #144]	; (8002a04 <I2C_Read+0xe4>)
 8002974:	f7fe fc7a 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 8002978:	bf00      	nop
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <I2C_Read+0xe4>)
 800297e:	f7fe fc91 	bl	80012a4 <I2C_GetFlagStatus>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f8      	beq.n	800297a <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 8002988:	793a      	ldrb	r2, [r7, #4]
 800298a:	88f9      	ldrh	r1, [r7, #6]
 800298c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002996:	481b      	ldr	r0, [pc, #108]	; (8002a04 <I2C_Read+0xe4>)
 8002998:	f7fe fc3c 	bl	8001214 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 800299c:	2300      	movs	r3, #0
 800299e:	73bb      	strb	r3, [r7, #14]
 80029a0:	e01b      	b.n	80029da <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 80029a2:	bf00      	nop
 80029a4:	2104      	movs	r1, #4
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <I2C_Read+0xe4>)
 80029a8:	f7fe fc7c 	bl	80012a4 <I2C_GetFlagStatus>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f8      	beq.n	80029a4 <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 80029b2:	793b      	ldrb	r3, [r7, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d908      	bls.n	80029ca <I2C_Read+0xaa>
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	18d4      	adds	r4, r2, r3
 80029be:	4811      	ldr	r0, [pc, #68]	; (8002a04 <I2C_Read+0xe4>)
 80029c0:	f7fe fc63 	bl	800128a <I2C_ReceiveData>
 80029c4:	4603      	mov	r3, r0
 80029c6:	7023      	strb	r3, [r4, #0]
 80029c8:	e004      	b.n	80029d4 <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 80029ca:	480e      	ldr	r0, [pc, #56]	; (8002a04 <I2C_Read+0xe4>)
 80029cc:	f7fe fc5d 	bl	800128a <I2C_ReceiveData>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73bb      	strb	r3, [r7, #14]
 80029da:	7bba      	ldrb	r2, [r7, #14]
 80029dc:	793b      	ldrb	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3df      	bcc.n	80029a2 <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 80029e2:	bf00      	nop
 80029e4:	2120      	movs	r1, #32
 80029e6:	4807      	ldr	r0, [pc, #28]	; (8002a04 <I2C_Read+0xe4>)
 80029e8:	f7fe fc5c 	bl	80012a4 <I2C_GetFlagStatus>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f8      	beq.n	80029e4 <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 80029f2:	2120      	movs	r1, #32
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <I2C_Read+0xe4>)
 80029f6:	f7fe fc74 	bl	80012e2 <I2C_ClearFlag>

    return val;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}
 8002a04:	40005400 	.word	0x40005400

08002a08 <I2C_init>:
  * @brief  Sets up the I2C bus TODO: REF
  * @param  None
  * @retval None
  */
void I2C_init()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <I2C_init+0x15c>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4a54      	ldr	r2, [pc, #336]	; (8002b64 <I2C_init+0x15c>)
 8002a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a16:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002a18:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <I2C_init+0x160>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <I2C_init+0x160>)
 8002a1e:	f023 030f 	bic.w	r3, r3, #15
 8002a22:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <I2C_init+0x160>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <I2C_init+0x160>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8002a30:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <I2C_init+0x160>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <I2C_init+0x160>)
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <I2C_init+0x160>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	4a49      	ldr	r2, [pc, #292]	; (8002b68 <I2C_init+0x160>)
 8002a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a46:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <I2C_init+0x160>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <I2C_init+0x160>)
 8002a4e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002a52:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002a54:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <I2C_init+0x160>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <I2C_init+0x160>)
 8002a5a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002a5e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8002a60:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <I2C_init+0x160>)
 8002a62:	889b      	ldrh	r3, [r3, #4]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <I2C_init+0x160>)
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <I2C_init+0x160>)
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4a3c      	ldr	r2, [pc, #240]	; (8002b68 <I2C_init+0x160>)
 8002a78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <I2C_init+0x160>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <I2C_init+0x160>)
 8002a86:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002a8a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <I2C_init+0x160>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <I2C_init+0x160>)
 8002a92:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8002a96:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002a98:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <I2C_init+0x160>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <I2C_init+0x160>)
 8002a9e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002aa2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <I2C_init+0x160>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <I2C_init+0x160>)
 8002aaa:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002aae:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <I2C_init+0x15c>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <I2C_init+0x15c>)
 8002ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aba:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <I2C_init+0x164>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2a      	ldr	r2, [pc, #168]	; (8002b6c <I2C_init+0x164>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <I2C_init+0x164>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4927      	ldr	r1, [pc, #156]	; (8002b6c <I2C_init+0x164>)
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <I2C_init+0x168>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <I2C_init+0x164>)
 8002ad6:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <I2C_init+0x164>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <I2C_init+0x164>)
 8002ade:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <I2C_init+0x164>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <I2C_init+0x164>)
 8002ae6:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <I2C_init+0x16c>)
 8002ae8:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <I2C_init+0x164>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <I2C_init+0x164>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <I2C_init+0x164>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <I2C_init+0x164>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <I2C_init+0x164>)
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <I2C_init+0x164>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <I2C_init+0x164>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <I2C_init+0x164>)
 8002b10:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002b14:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <I2C_init+0x164>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <I2C_init+0x164>)
 8002b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b20:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <I2C_init+0x164>)
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <I2C_init+0x164>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <I2C_init+0x164>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <I2C_init+0x164>)
 8002b30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b38:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <I2C_init+0x164>)
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <I2C_init+0x164>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 8002b42:	2201      	movs	r2, #1
 8002b44:	2107      	movs	r1, #7
 8002b46:	2098      	movs	r0, #152	; 0x98
 8002b48:	f7ff fe90 	bl	800286c <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	210a      	movs	r1, #10
 8002b50:	2098      	movs	r0, #152	; 0x98
 8002b52:	f7ff fe8b 	bl	800286c <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 8002b56:	221f      	movs	r2, #31
 8002b58:	2109      	movs	r1, #9
 8002b5a:	2098      	movs	r0, #152	; 0x98
 8002b5c:	f7ff fe86 	bl	800286c <I2C_Write>
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	00cfe0ff 	.word	0x00cfe0ff
 8002b74:	10805e89 	.word	0x10805e89

08002b78 <analogConfigPorts>:
/**
  * @brief  Sets up the analog ports for the potentiometers TODO: REF
  * @param  None
  * @retval None
  */
void analogConfigPorts(){
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <analogConfigPorts+0x140>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <analogConfigPorts+0x140>)
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002b8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	43d2      	mvns	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8002baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8002bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	43d2      	mvns	r2, r2
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002bce:	400b      	ands	r3, r1
 8002bd0:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8002bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	2103      	movs	r1, #3
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4611      	mov	r1, r2
 8002be4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002be8:	430b      	orrs	r3, r1
 8002bea:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <analogConfigPorts+0x140>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <analogConfigPorts+0x140>)
 8002bf2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <analogConfigPorts+0x140>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	4a2e      	ldr	r2, [pc, #184]	; (8002cb8 <analogConfigPorts+0x140>)
 8002bfe:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8002c02:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <analogConfigPorts+0x140>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <analogConfigPorts+0x140>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002c10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <analogConfigPorts+0x144>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c32:	f023 030f 	bic.w	r3, r3, #15
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e002      	b.n	8002c54 <analogConfigPorts+0xdc>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c5a:	dbf8      	blt.n	8002c4e <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002c6c:	bf00      	nop
 8002c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	dafa      	bge.n	8002c6e <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	e002      	b.n	8002c84 <analogConfigPorts+0x10c>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b63      	cmp	r3, #99	; 0x63
 8002c88:	ddf9      	ble.n	8002c7e <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8002c9a:	bf00      	nop
 8002c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f8      	beq.n	8002c9c <analogConfigPorts+0x124>
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	fdffc007 	.word	0xfdffc007

08002cc0 <readPotentiometer>:
/**
  * @brief  Reads the left potentiometer TODO: REF
  * @param  None
  * @retval A value between 0 and 4096 from the potentiometers
  */
uint16_t readPotentiometer(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2101      	movs	r1, #1
 8002ccc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cd0:	f7fe f840 	bl	8000d54 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002cd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cd8:	f7fe f934 	bl	8000f44 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002cdc:	bf00      	nop
 8002cde:	2104      	movs	r1, #4
 8002ce0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ce4:	f7fe f94b 	bl	8000f7e <ADC_GetFlagStatus>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f7      	beq.n	8002cde <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8002cee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cf2:	f7fe f937 	bl	8000f64 <ADC_GetConversionValue>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <initRGB>:
/**
  * @brief  Sets up the pins for RGB TODO: REF
  * @param  None
  * @retval None
  */
void initRGB(){
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
	uint8_t pin = 9;
 8002d0a:	2309      	movs	r3, #9
 8002d0c:	71fb      	strb	r3, [r7, #7]
	GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	79fa      	ldrb	r2, [r7, #7]
 8002d16:	0052      	lsls	r2, r2, #1
 8002d18:	2103      	movs	r1, #3
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	43d2      	mvns	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d26:	400b      	ands	r3, r1
 8002d28:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8002d2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	0052      	lsls	r2, r2, #1
 8002d34:	2102      	movs	r1, #2
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~(0x0001 << (pin));
 8002d44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d48:	889b      	ldrh	r3, [r3, #4]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d64:	b292      	uxth	r2, r2
 8002d66:	809a      	strh	r2, [r3, #4]
	GPIOA->OTYPER |= 0x0000 << (pin);
 8002d68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d70:	8892      	ldrh	r2, [r2, #4]
 8002d72:	b292      	uxth	r2, r2
 8002d74:	809a      	strh	r2, [r3, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	79fa      	ldrb	r2, [r7, #7]
 8002d7e:	0052      	lsls	r2, r2, #1
 8002d80:	2103      	movs	r1, #3
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	43d2      	mvns	r2, r2
 8002d88:	4611      	mov	r1, r2
 8002d8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d8e:	400b      	ands	r3, r1
 8002d90:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000001 << (2*pin);
 8002d92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	0052      	lsls	r2, r2, #1
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	4611      	mov	r1, r2
 8002da4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6013      	str	r3, [r2, #0]

	//setup PC7 (Green)
	pin = 7;
 8002dac:	2307      	movs	r3, #7
 8002dae:	71fb      	strb	r3, [r7, #7]
	GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <initRGB+0x1c8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	0052      	lsls	r2, r2, #1
 8002db8:	2103      	movs	r1, #3
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	43d2      	mvns	r2, r2
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <initRGB+0x1c8>)
 8002dc4:	400b      	ands	r3, r1
 8002dc6:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <initRGB+0x1c8>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	79fa      	ldrb	r2, [r7, #7]
 8002dce:	0052      	lsls	r2, r2, #1
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <initRGB+0x1c8>)
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~(0x0001 << (pin));
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <initRGB+0x1c8>)
 8002de0:	889b      	ldrh	r3, [r3, #4]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <initRGB+0x1c8>)
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	809a      	strh	r2, [r3, #4]
	GPIOC->OTYPER |= 0x0000 << (pin);
 8002dfe:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <initRGB+0x1c8>)
 8002e00:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <initRGB+0x1c8>)
 8002e02:	8892      	ldrh	r2, [r2, #4]
 8002e04:	b292      	uxth	r2, r2
 8002e06:	809a      	strh	r2, [r3, #4]
	GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <initRGB+0x1c8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	0052      	lsls	r2, r2, #1
 8002e10:	2103      	movs	r1, #3
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	43d2      	mvns	r2, r2
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <initRGB+0x1c8>)
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00000001 << (2*pin);
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <initRGB+0x1c8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	79fa      	ldrb	r2, [r7, #7]
 8002e26:	0052      	lsls	r2, r2, #1
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <initRGB+0x1c8>)
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]

	//setup PB4 (Red)
	pin = 4;
 8002e36:	2304      	movs	r3, #4
 8002e38:	71fb      	strb	r3, [r7, #7]
	GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002e3a:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <initRGB+0x1cc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	0052      	lsls	r2, r2, #1
 8002e42:	2103      	movs	r1, #3
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	43d2      	mvns	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <initRGB+0x1cc>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <initRGB+0x1cc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	0052      	lsls	r2, r2, #1
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <initRGB+0x1cc>)
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (pin));
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <initRGB+0x1cc>)
 8002e6a:	889b      	ldrh	r3, [r3, #4]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <initRGB+0x1cc>)
 8002e84:	b292      	uxth	r2, r2
 8002e86:	809a      	strh	r2, [r3, #4]
	GPIOB->OTYPER |= 0x0000 << (pin);
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <initRGB+0x1cc>)
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <initRGB+0x1cc>)
 8002e8c:	8892      	ldrh	r2, [r2, #4]
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <initRGB+0x1cc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	0052      	lsls	r2, r2, #1
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	43d2      	mvns	r2, r2
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <initRGB+0x1cc>)
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000001 << (2*pin);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <initRGB+0x1cc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <initRGB+0x1cc>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	48000800 	.word	0x48000800
 8002ed0:	48000400 	.word	0x48000400

08002ed4 <RGBColor>:
/**
  * @brief Sets the color of the LED based on an array [R, G, B] TODO: REF
  * @param  color: array with 3 elements for R,G and B
  * @retval None
  */
void RGBColor(uint8_t color[]){
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <RGBColor+0x88>)
 8002ede:	8a9b      	ldrh	r3, [r3, #20]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <RGBColor+0x88>)
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <RGBColor+0x8c>)
 8002eee:	8a9b      	ldrh	r3, [r3, #20]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <RGBColor+0x8c>)
 8002ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f00:	8a9b      	ldrh	r3, [r3, #20]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002f08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d104      	bne.n	8002f22 <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <RGBColor+0x88>)
 8002f1a:	8a9b      	ldrh	r3, [r3, #20]
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <RGBColor+0x88>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3301      	adds	r3, #1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d104      	bne.n	8002f36 <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <RGBColor+0x8c>)
 8002f2e:	8a9b      	ldrh	r3, [r3, #20]
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <RGBColor+0x8c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f44:	8a9b      	ldrh	r3, [r3, #20]
 8002f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	829a      	strh	r2, [r3, #20]
	}
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	48000800 	.word	0x48000800

08002f64 <writeToFlash>:
/**
  * @brief  writes some data to a given address TODO: REF
  * @param  data: the 2 bytes to the write, address: the address to write to
  * @retval None
  */
void writeToFlash(uint16_t data, uint32_t address){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8002f70:	f7fe f81e 	bl	8000fb0 <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8002f74:	2034      	movs	r0, #52	; 0x34
 8002f76:	f7fe f8a5 	bl	80010c4 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 8002f7a:	6838      	ldr	r0, [r7, #0]
 8002f7c:	f7fe f842 	bl	8001004 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4619      	mov	r1, r3
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f7fe f86f 	bl	8001068 <FLASH_ProgramHalfWord>
	FLASH_Lock();
 8002f8a:	f7fe f82b 	bl	8000fe4 <FLASH_Lock>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <readFromFlash>:
/**
  * @brief  Reads data from flash memory TODO: REF
  * @param  address: the address to write to
  * @retval 2 bytes from memory
  */
uint16_t readFromFlash(uint32_t address){
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <setFreq>:
/**
  * @brief  Sets the frequenc of the buzzer TODO: REF
  * @param  freq: the frequency the buzzer should play [Hz]
  * @retval None
  */
void setFreq(uint16_t freq) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
	uint32_t reload = 64e6 / freq / (9 + 1) - 1;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fab1 	bl	8000524 <__aeabi_i2d>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	a11c      	add	r1, pc, #112	; (adr r1, 8003038 <setFreq+0x88>)
 8002fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fcc:	f7fd fc3e 	bl	800084c <__aeabi_ddiv>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <setFreq+0x80>)
 8002fde:	f7fd fc35 	bl	800084c <__aeabi_ddiv>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <setFreq+0x84>)
 8002ff0:	f7fd f94a 	bl	8000288 <__aeabi_dsub>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fd0e 	bl	8000a1c <__aeabi_d2uiz>
 8003000:	4603      	mov	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]
	TIM2->ARR = reload; // Set auto reload value
 8003004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR3 = reload/2; // Set compare register
 800300c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->EGR |= 0x01;
 8003016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6153      	str	r3, [r2, #20]
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40240000 	.word	0x40240000
 8003034:	3ff00000 	.word	0x3ff00000
 8003038:	00000000 	.word	0x00000000
 800303c:	418e8480 	.word	0x418e8480

08003040 <toggleBuzzer>:
/**
  * @brief  (de)activates the buzzer TODO: REF
  * @param  on: 1 = turn on, everything else = turn off
  * @retval None
  */
void toggleBuzzer(uint8_t on){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
	if(on == 1){
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10a      	bne.n	8003066 <toggleBuzzer+0x26>
		TIM2->CR1 |= 0x0001; //enable
 8003050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	8013      	strh	r3, [r2, #0]
	}else{
		TIM2->CR1 &= ~(0x0001); //disable
	}
}
 8003064:	e009      	b.n	800307a <toggleBuzzer+0x3a>
		TIM2->CR1 &= ~(0x0001); //disable
 8003066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <spawnDropper>:
#include "types.h"
#include "powerup.h"
#define spawnPeriod 1200


void spawnDropper(gameState_t* gameState){
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->dropper.lastseentime>=spawnPeriod){
 8003090:	4b31      	ldr	r3, [pc, #196]	; (8003158 <spawnDropper+0xd0>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80030a0:	d356      	bcc.n	8003150 <spawnDropper+0xc8>
		gameState->dropper.lastseentime=runtime;
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <spawnDropper+0xd0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		gameState->dropper.isvisible=1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		position_t spawnPos = {intToFp(4), intToFp(5)*yScale};
 80030b4:	2004      	movs	r0, #4
 80030b6:	f000 fb06 	bl	80036c6 <intToFp>
 80030ba:	4603      	mov	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	2005      	movs	r0, #5
 80030c0:	f000 fb01 	bl	80036c6 <intToFp>
 80030c4:	4603      	mov	r3, r0
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
		vector_t vel = {intToFp(1), intToFp(0)*yScale};
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 fafb 	bl	80036c6 <intToFp>
 80030d0:	4603      	mov	r3, r0
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 faf6 	bl	80036c6 <intToFp>
 80030da:	4603      	mov	r3, r0
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
		gameState->dropper.position=spawnPos;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	336c      	adds	r3, #108	; 0x6c
 80030e4:	f107 0210 	add.w	r2, r7, #16
 80030e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030ec:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->dropper.nextposition=spawnPos;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3374      	adds	r3, #116	; 0x74
 80030f4:	f107 0210 	add.w	r2, r7, #16
 80030f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030fc:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->dropper.velocity=vel;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	337c      	adds	r3, #124	; 0x7c
 8003104:	f107 0208 	add.w	r2, r7, #8
 8003108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310c:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->dropper.randomX=-1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(!xValIsValid(gameState->dropper.randomX,6)){
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2106      	movs	r1, #6
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f8cb 	bl	80032c0 <xValIsValid>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <spawnDropper+0xc8>
			gameState->dropper.randomX=(rand() % 139);
 8003130:	f003 ffd6 	bl	80070e0 <rand>
 8003134:	4603      	mov	r3, r0
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <spawnDropper+0xd4>)
 8003138:	fb82 1203 	smull	r1, r2, r2, r3
 800313c:	1191      	asrs	r1, r2, #6
 800313e:	17da      	asrs	r2, r3, #31
 8003140:	1a8a      	subs	r2, r1, r2
 8003142:	218b      	movs	r1, #139	; 0x8b
 8003144:	fb01 f202 	mul.w	r2, r1, r2
 8003148:	1a9a      	subs	r2, r3, r2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		}
	}
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	200001c8 	.word	0x200001c8
 800315c:	75ded953 	.word	0x75ded953

08003160 <updateDropper>:


void updateDropper(gameState_t* gameState){
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	if(gameState->dropper.isvisible){
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800316e:	2b00      	cmp	r3, #0
 8003170:	d047      	beq.n	8003202 <updateDropper+0xa2>

		gameState->dropper.nextposition.x=gameState->dropper.position.x+gameState->dropper.velocity.x;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	441a      	add	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	675a      	str	r2, [r3, #116]	; 0x74
		gameState->dropper.nextposition.y=gameState->dropper.position.y+gameState->dropper.velocity.y;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	679a      	str	r2, [r3, #120]	; 0x78
		if(fpToInt(gameState->dropper.position.x) >= gameState->dropper.randomX && !gameState->powerup.isVisible){
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003194:	4618      	mov	r0, r3
 8003196:	f000 faab 	bl	80036f0 <fpToInt>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d307      	bcc.n	80031b8 <updateDropper+0x58>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <updateDropper+0x58>
			spawnPowerup(gameState);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f003 f868 	bl	8006288 <spawnPowerup>
		}

		if(fpToInt(gameState->dropper.nextposition.x)>=139){
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa97 	bl	80036f0 <fpToInt>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b8a      	cmp	r3, #138	; 0x8a
 80031c6:	d91c      	bls.n	8003202 <updateDropper+0xa2>
			deleteDropper(fpToInt(gameState->dropper.position.x),fpToInt(gameState->dropper.position.y)/yScale);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fa8f 	bl	80036f0 <fpToInt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	b2dc      	uxtb	r4, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa88 	bl	80036f0 <fpToInt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 f83c 	bl	8003268 <deleteDropper>
			gameState->dropper.isvisible=0;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			gameState->dropper.lastseentime=runtime;
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <updateDropper+0xac>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}
	}
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	bf00      	nop
 800320c:	200001c8 	.word	0x200001c8

08003210 <conditionDropper>:

void conditionDropper(gameState_t* gameState){
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

	if(gameState->dropper.isvisible){
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <conditionDropper+0x40>
		deleteDropper(fpToInt(gameState->dropper.position.x),fpToInt(gameState->dropper.position.y)/yScale);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fa62 	bl	80036f0 <fpToInt>
 800322c:	4603      	mov	r3, r0
 800322e:	b2dc      	uxtb	r4, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa5b 	bl	80036f0 <fpToInt>
 800323a:	4603      	mov	r3, r0
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	4620      	mov	r0, r4
 8003246:	f000 f80f 	bl	8003268 <deleteDropper>
		drawDropper(gameState);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 fdd8 	bl	8004e00 <drawDropper>
	}
	gameState->dropper.position=gameState->dropper.nextposition;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	336c      	adds	r3, #108	; 0x6c
 8003256:	3274      	adds	r2, #116	; 0x74
 8003258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800325c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <deleteDropper>:

void deleteDropper(uint8_t X,uint8_t Y){
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	460a      	mov	r2, r1
 8003272:	71fb      	strb	r3, [r7, #7]
 8003274:	4613      	mov	r3, r2
 8003276:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	79ba      	ldrb	r2, [r7, #6]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fd14 	bl	8001cac <gotoxy>
	printf("       ");
 8003284:	480d      	ldr	r0, [pc, #52]	; (80032bc <deleteDropper+0x54>)
 8003286:	f003 fe59 	bl	8006f3c <iprintf>
	gotoxy(X,Y-1);
 800328a:	79fa      	ldrb	r2, [r7, #7]
 800328c:	79bb      	ldrb	r3, [r7, #6]
 800328e:	3b01      	subs	r3, #1
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7fe fd0a 	bl	8001cac <gotoxy>
	printf("       ");
 8003298:	4808      	ldr	r0, [pc, #32]	; (80032bc <deleteDropper+0x54>)
 800329a:	f003 fe4f 	bl	8006f3c <iprintf>
	gotoxy(X,Y+1);
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7fe fd00 	bl	8001cac <gotoxy>
	printf("       ");
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <deleteDropper+0x54>)
 80032ae:	f003 fe45 	bl	8006f3c <iprintf>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	080081e4 	.word	0x080081e4

080032c0 <xValIsValid>:
/**
  * @brief  ensure powerups and enemies dont spawn over the moon
  * @param  xVal: the position of the objects, objectWidth: the width of the object
  * @retval 1 = valid, 0 = non-valid
  */
uint8_t xValIsValid(uint8_t xVal, uint8_t objectWidth){ //ensure powerups and enemies dont spawn over the moon
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	460a      	mov	r2, r1
 80032ca:	71fb      	strb	r3, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71bb      	strb	r3, [r7, #6]
	if ((xVal>=2 && xVal<=63-objectWidth) || (xVal>=77 && xVal<=screenWidth)){
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d905      	bls.n	80032e2 <xValIsValid+0x22>
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	79bb      	ldrb	r3, [r7, #6]
 80032da:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80032de:	429a      	cmp	r2, r3
 80032e0:	dd05      	ble.n	80032ee <xValIsValid+0x2e>
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2b4c      	cmp	r3, #76	; 0x4c
 80032e6:	d904      	bls.n	80032f2 <xValIsValid+0x32>
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2b9c      	cmp	r3, #156	; 0x9c
 80032ec:	d801      	bhi.n	80032f2 <xValIsValid+0x32>
		return 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xValIsValid+0x34>
	} else {
		return 0;
 80032f2:	2300      	movs	r3, #0
	}
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <spawnEnemy>:
/**
  * @brief  Checks if it should spawn a new enemy, and if so spawns one
  * @param  gameState: the current state of the game
  * @retval None
  */
void spawnEnemy(gameState_t* gameState){
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	//Checks if a enemy should spawn
	if(runtime >= gameState->nextEnemySpawn){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b58      	ldr	r3, [pc, #352]	; (8003470 <spawnEnemy+0x170>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	f200 80a9 	bhi.w	8003468 <spawnEnemy+0x168>
		uint16_t enemyPos = (rand() % 149) + 1; //x-position between 1 and 149
 8003316:	f003 fee3 	bl	80070e0 <rand>
 800331a:	4603      	mov	r3, r0
 800331c:	4a55      	ldr	r2, [pc, #340]	; (8003474 <spawnEnemy+0x174>)
 800331e:	fb82 1203 	smull	r1, r2, r2, r3
 8003322:	10d1      	asrs	r1, r2, #3
 8003324:	17da      	asrs	r2, r3, #31
 8003326:	1a8a      	subs	r2, r1, r2
 8003328:	2195      	movs	r1, #149	; 0x95
 800332a:	fb01 f202 	mul.w	r2, r1, r2
 800332e:	1a9a      	subs	r2, r3, r2
 8003330:	b293      	uxth	r3, r2
 8003332:	3301      	adds	r3, #1
 8003334:	83fb      	strh	r3, [r7, #30]

		//Recalculates if position is non-valid
		while(!xValIsValid(enemyPos, 7)){
 8003336:	e00f      	b.n	8003358 <spawnEnemy+0x58>
			enemyPos  = (rand() % 149) + 1;
 8003338:	f003 fed2 	bl	80070e0 <rand>
 800333c:	4603      	mov	r3, r0
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <spawnEnemy+0x174>)
 8003340:	fb82 1203 	smull	r1, r2, r2, r3
 8003344:	10d1      	asrs	r1, r2, #3
 8003346:	17da      	asrs	r2, r3, #31
 8003348:	1a8a      	subs	r2, r1, r2
 800334a:	2195      	movs	r1, #149	; 0x95
 800334c:	fb01 f202 	mul.w	r2, r1, r2
 8003350:	1a9a      	subs	r2, r3, r2
 8003352:	b293      	uxth	r3, r2
 8003354:	3301      	adds	r3, #1
 8003356:	83fb      	strh	r3, [r7, #30]
		while(!xValIsValid(enemyPos, 7)){
 8003358:	8bfb      	ldrh	r3, [r7, #30]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2107      	movs	r1, #7
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ffae 	bl	80032c0 <xValIsValid>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0e6      	beq.n	8003338 <spawnEnemy+0x38>
		}

		//Generates a new enemy and appends to the linked list of enemies
		enemy_t* enemy = malloc(sizeof(enemy_t));
 800336a:	2014      	movs	r0, #20
 800336c:	f003 fd24 	bl	8006db8 <malloc>
 8003370:	4603      	mov	r3, r0
 8003372:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 8003374:	2008      	movs	r0, #8
 8003376:	f003 fd1f 	bl	8006db8 <malloc>
 800337a:	4603      	mov	r3, r0
 800337c:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 800337e:	8bfb      	ldrh	r3, [r7, #30]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f9a0 	bl	80036c6 <intToFp>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 800338c:	2006      	movs	r0, #6
 800338e:	f000 f99a 	bl	80036c6 <intToFp>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]

		uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100) + intToFp(gameState->difficulty), 0x00004000) + intToFp(1); //(score/100 + difficulty) * 0.25 + 1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	4a35      	ldr	r2, [pc, #212]	; (8003478 <spawnEnemy+0x178>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f98a 	bl	80036c6 <intToFp>
 80033b2:	4604      	mov	r4, r0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f982 	bl	80036c6 <intToFp>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4423      	add	r3, r4
 80033c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f9a9 	bl	8003722 <fpMultiply>
 80033d0:	4604      	mov	r4, r0
 80033d2:	2001      	movs	r0, #1
 80033d4:	f000 f977 	bl	80036c6 <intToFp>
 80033d8:	4603      	mov	r3, r0
 80033da:	4423      	add	r3, r4
 80033dc:	613b      	str	r3, [r7, #16]
		vector_t* vEnemy = malloc(sizeof(vector_t));
 80033de:	2008      	movs	r0, #8
 80033e0:	f003 fcea 	bl	8006db8 <malloc>
 80033e4:	4603      	mov	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f000 f96c 	bl	80036c6 <intToFp>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]
		vEnemy->y = fpMultiply((0x00004000 * yScale), levelMultiplier); //0.25 * multiplier
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80033fa:	f000 f992 	bl	8003722 <fpMultiply>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 800340a:	2008      	movs	r0, #8
 800340c:	f003 fcd4 	bl	8006db8 <malloc>
 8003410:	4603      	mov	r3, r0
 8003412:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <spawnEnemy+0x170>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100; //A second every seconds
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2264      	movs	r2, #100	; 0x64
 8003436:	731a      	strb	r2, [r3, #12]

		gameState->nextEnemySpawn = runtime + (rand()%200) + 100; //spawns the next enemy after between 100 and 300 centiseconds
 8003438:	f003 fe52 	bl	80070e0 <rand>
 800343c:	4603      	mov	r3, r0
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <spawnEnemy+0x178>)
 8003440:	fb82 1203 	smull	r1, r2, r2, r3
 8003444:	1191      	asrs	r1, r2, #6
 8003446:	17da      	asrs	r2, r3, #31
 8003448:	1a8a      	subs	r2, r1, r2
 800344a:	21c8      	movs	r1, #200	; 0xc8
 800344c:	fb01 f202 	mul.w	r2, r1, r2
 8003450:	1a9a      	subs	r2, r3, r2
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <spawnEnemy+0x170>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4413      	add	r3, r2
 8003458:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	609a      	str	r2, [r3, #8]
		appendEnemy(gameState, enemy);
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 fdd9 	bl	800501a <appendEnemy>
	}
}
 8003468:	bf00      	nop
 800346a:	3724      	adds	r7, #36	; 0x24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	200001c8 	.word	0x200001c8
 8003474:	0dbeb61f 	.word	0x0dbeb61f
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <updateEnemy>:
/**
  * @brief  Loops over all the enemies and updates their position based on their velocities
  * @param  gameState: the current state of the game
  * @retval None
  */
void updateEnemy(gameState_t* gameState){
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800348a:	e01c      	b.n	80034c6 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	440a      	add	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	440a      	add	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1df      	bne.n	800348c <updateEnemy+0x10>
	}
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <shootEnemy>:
/**
  * @brief  Loops over all the enemies and shoots a bullet based on firingRate
  * @param  gameState: the current state of the game
  * @retval None
  */
void shootEnemy(gameState_t* gameState){
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b094      	sub	sp, #80	; 0x50
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(runtime-gameState->enemyCanonDisableTime >= enemyDisableDuration || gameState->enemyCanonsUnchanged){
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <shootEnemy+0x134>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f8:	d204      	bcs.n	8003504 <shootEnemy+0x28>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7c1b      	ldrb	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8081 	beq.w	8003606 <shootEnemy+0x12a>
		uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100) + intToFp(gameState->difficulty), 0x00004000) + intToFp(1); //level * 0.25 + 1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003508:	4a42      	ldr	r2, [pc, #264]	; (8003614 <shootEnemy+0x138>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	b29b      	uxth	r3, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8d7 	bl	80036c6 <intToFp>
 8003518:	4604      	mov	r4, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b29b      	uxth	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8cf 	bl	80036c6 <intToFp>
 8003528:	4603      	mov	r3, r0
 800352a:	4423      	add	r3, r4
 800352c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f8f6 	bl	8003722 <fpMultiply>
 8003536:	4604      	mov	r4, r0
 8003538:	2001      	movs	r0, #1
 800353a:	f000 f8c4 	bl	80036c6 <intToFp>
 800353e:	4603      	mov	r3, r0
 8003540:	4423      	add	r3, r4
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
		while(thisNode != NULL){
 8003544:	e05c      	b.n	8003600 <shootEnemy+0x124>
			if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8003546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	7b12      	ldrb	r2, [r2, #12]
 8003552:	441a      	add	r2, r3
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <shootEnemy+0x134>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d24e      	bcs.n	80035fa <shootEnemy+0x11e>
					vector_t bulletVector = {intToFp(0), fpMultiply(0x00008000*yScale, levelMultiplier)};
 800355c:	2000      	movs	r0, #0
 800355e:	f000 f8b2 	bl	80036c6 <intToFp>
 8003562:	4603      	mov	r3, r0
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
 8003566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003568:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800356c:	f000 f8d9 	bl	8003722 <fpMultiply>
 8003570:	4603      	mov	r3, r0
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
					position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 8003574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685c      	ldr	r4, [r3, #4]
 8003586:	2004      	movs	r0, #4
 8003588:	f000 f89d 	bl	80036c6 <intToFp>
 800358c:	4603      	mov	r3, r0
 800358e:	4423      	add	r3, r4
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
					bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	615a      	str	r2, [r3, #20]
 80035a4:	619a      	str	r2, [r3, #24]
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035d2:	e883 0003 	stmia.w	r3, {r0, r1}
					appendBullet(&(gameState->bulletLL), bullet);
 80035d6:	687d      	ldr	r5, [r7, #4]
 80035d8:	466c      	mov	r4, sp
 80035da:	f107 0318 	add.w	r3, r7, #24
 80035de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ea:	4628      	mov	r0, r5
 80035ec:	f001 fcdd 	bl	8004faa <appendBullet>
					thisNode->enemy->lastShotTime = runtime;
 80035f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <shootEnemy+0x134>)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	611a      	str	r2, [r3, #16]
			}
			thisNode = thisNode->nextEnemyNode;
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(thisNode != NULL){
 8003600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d19f      	bne.n	8003546 <shootEnemy+0x6a>
		}
	}
}
 8003606:	bf00      	nop
 8003608:	3740      	adds	r7, #64	; 0x40
 800360a:	46bd      	mov	sp, r7
 800360c:	bdb0      	pop	{r4, r5, r7, pc}
 800360e:	bf00      	nop
 8003610:	200001c8 	.word	0x200001c8
 8003614:	51eb851f 	.word	0x51eb851f

08003618 <detectCityHit>:
/**
  * @brief  Detects if an enemy has hit the bottom of the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void detectCityHit(gameState_t* gameState){
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 8003626:	e046      	b.n	80036b6 <detectCityHit+0x9e>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f85d 	bl	80036f0 <fpToInt>
 8003636:	4603      	mov	r3, r0
 8003638:	2b4f      	cmp	r3, #79	; 0x4f
 800363a:	d939      	bls.n	80036b0 <detectCityHit+0x98>

			gameState->cityLives--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003642:	3b01      	subs	r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			gameState->soundToPlay = 5;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2205      	movs	r2, #5
 8003650:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

			if(gameState->cityLives == 2){
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800365a:	2b02      	cmp	r3, #2
 800365c:	d10f      	bne.n	800367e <detectCityHit+0x66>
				gotoxy(1, 42);
 800365e:	212a      	movs	r1, #42	; 0x2a
 8003660:	2001      	movs	r0, #1
 8003662:	f7fe fb23 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e005      	b.n	8003678 <detectCityHit+0x60>
					printf(" ");
 800366c:	2020      	movs	r0, #32
 800366e:	f003 fc7d 	bl	8006f6c <putchar>
				for(int i = 0; i<screenWidth;i++){
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3301      	adds	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b9b      	cmp	r3, #155	; 0x9b
 800367c:	ddf6      	ble.n	800366c <detectCityHit+0x54>
				}
			}
			if(gameState->cityLives == 1){
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003684:	2b01      	cmp	r3, #1
 8003686:	d10f      	bne.n	80036a8 <detectCityHit+0x90>
				gotoxy(1, 43);
 8003688:	212b      	movs	r1, #43	; 0x2b
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe fb0e 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e005      	b.n	80036a2 <detectCityHit+0x8a>
					printf(" ");
 8003696:	2020      	movs	r0, #32
 8003698:	f003 fc68 	bl	8006f6c <putchar>
				for(int i = 0; i<screenWidth;i++){
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b9b      	cmp	r3, #155	; 0x9b
 80036a6:	ddf6      	ble.n	8003696 <detectCityHit+0x7e>
				}
			}
			deleteEnemyNode(gameState, thisNode);
 80036a8:	6979      	ldr	r1, [r7, #20]
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f001 fce2 	bl	8005074 <deleteEnemyNode>
		}
		thisNode = thisNode->nextEnemyNode;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1b5      	bne.n	8003628 <detectCityHit+0x10>
	}
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <intToFp>:
/**
  * @brief  Converts uint_t to fixed point 16.16 format type uint32_t
  * @param  n: an unsigned 16 bit integer
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t intToFp(uint16_t n){
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
	output+=n;
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
	output<<=16;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	60fb      	str	r3, [r7, #12]
	return output;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <fpToInt>:
/**
  * @brief  Converts fixed point 16.16 format to normal integer and rounds correctly
  * @param  fp: a 16.16 32-bit fixed point number in 2' complement
  * @retval an integer
  */
uint16_t fpToInt(uint32_t fp){
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	uint16_t output=0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	81fb      	strh	r3, [r7, #14]
	fp+=32768; //32768 in 16.16 format is 0,5
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003702:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	607b      	str	r3, [r7, #4]
	output+=fp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	b29a      	uxth	r2, r3
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	4413      	add	r3, r2
 8003712:	81fb      	strh	r3, [r7, #14]
	return output;
 8003714:	89fb      	ldrh	r3, [r7, #14]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <fpMultiply>:
/**
  * @brief  Multiplies 2 fixed-point values
  * @param  n: first number, m: second number
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
	n>>=8;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	607b      	str	r3, [r7, #4]
	m>>=8;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <fpDivide>:
/**
  * @brief  Divides 2 fixed-point values TODO: ref
  * @param  n: first number, m: second number
  * @retval a 16.16 32-bit fixed point number in 2' complement
  */
uint32_t fpDivide(uint32_t n, uint32_t m){
 8003764:	b5b0      	push	{r4, r5, r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
    uint64_t numerator = (uint64_t)n << 16;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	040b      	lsls	r3, r1, #16
 8003780:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003784:	0402      	lsls	r2, r0, #16
 8003786:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003798:	1884      	adds	r4, r0, r2
 800379a:	eb41 0503 	adc.w	r5, r1, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fd f957 	bl	8000a5c <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4613      	mov	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
    return result;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdb0      	pop	{r4, r5, r7, pc}

080037c0 <scaleVector>:
/**
  * @brief  Scale a vector with a given factor
  * @param  vectorIn: The vector to be scaled, fpScalar: The amount to scale
  * @retval The scaled vector
  */
vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	1d38      	adds	r0, r7, #4
 80037ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80037ce:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ffa4 	bl	8003722 <fpMultiply>
 80037da:	4603      	mov	r3, r0
 80037dc:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff9d 	bl	8003722 <fpMultiply>
 80037e8:	4603      	mov	r3, r0
 80037ea:	617b      	str	r3, [r7, #20]
	return vectorOut;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <fpAbs>:
/**
  * @brief Gives the absolute value of a fixed point value
  * @param  n: the 16.16 element to get the abs of
  * @retval A positive 16.16 number
  */
uint32_t fpAbs(uint32_t n){
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	da02      	bge.n	800381c <fpAbs+0x18>
			output=(~output)+1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	425b      	negs	r3, r3
 800381a:	60fb      	str	r3, [r7, #12]
		}
	return output;
 800381c:	68fb      	ldr	r3, [r7, #12]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <drawbackground>:
/**
  * @brief Draws the stary background of the screen
  * @param  None
  * @retval None
  */
void drawbackground(){
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 800382e:	2123      	movs	r1, #35	; 0x23
 8003830:	2037      	movs	r0, #55	; 0x37
 8003832:	f7fe fa3b 	bl	8001cac <gotoxy>
	printf("*");
 8003836:	202a      	movs	r0, #42	; 0x2a
 8003838:	f003 fb98 	bl	8006f6c <putchar>
	gotoxy(63,27);
 800383c:	211b      	movs	r1, #27
 800383e:	203f      	movs	r0, #63	; 0x3f
 8003840:	f7fe fa34 	bl	8001cac <gotoxy>
	printf("*");
 8003844:	202a      	movs	r0, #42	; 0x2a
 8003846:	f003 fb91 	bl	8006f6c <putchar>
	gotoxy(10,15);
 800384a:	210f      	movs	r1, #15
 800384c:	200a      	movs	r0, #10
 800384e:	f7fe fa2d 	bl	8001cac <gotoxy>
	printf("*");
 8003852:	202a      	movs	r0, #42	; 0x2a
 8003854:	f003 fb8a 	bl	8006f6c <putchar>
	gotoxy(20,40);
 8003858:	2128      	movs	r1, #40	; 0x28
 800385a:	2014      	movs	r0, #20
 800385c:	f7fe fa26 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003860:	202b      	movs	r0, #43	; 0x2b
 8003862:	f003 fb83 	bl	8006f6c <putchar>

	gotoxy(155,37);
 8003866:	2125      	movs	r1, #37	; 0x25
 8003868:	209b      	movs	r0, #155	; 0x9b
 800386a:	f7fe fa1f 	bl	8001cac <gotoxy>
	printf("*");
 800386e:	202a      	movs	r0, #42	; 0x2a
 8003870:	f003 fb7c 	bl	8006f6c <putchar>
	gotoxy(110,28);
 8003874:	211c      	movs	r1, #28
 8003876:	206e      	movs	r0, #110	; 0x6e
 8003878:	f7fe fa18 	bl	8001cac <gotoxy>
	printf("*");
 800387c:	202a      	movs	r0, #42	; 0x2a
 800387e:	f003 fb75 	bl	8006f6c <putchar>
	gotoxy(95,13);
 8003882:	210d      	movs	r1, #13
 8003884:	205f      	movs	r0, #95	; 0x5f
 8003886:	f7fe fa11 	bl	8001cac <gotoxy>
	printf("*");
 800388a:	202a      	movs	r0, #42	; 0x2a
 800388c:	f003 fb6e 	bl	8006f6c <putchar>
	gotoxy(130,19);
 8003890:	2113      	movs	r1, #19
 8003892:	2082      	movs	r0, #130	; 0x82
 8003894:	f7fe fa0a 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003898:	202b      	movs	r0, #43	; 0x2b
 800389a:	f003 fb67 	bl	8006f6c <putchar>

	gotoxy(5,27);
 800389e:	211b      	movs	r1, #27
 80038a0:	2005      	movs	r0, #5
 80038a2:	f7fe fa03 	bl	8001cac <gotoxy>
	printf("*");
 80038a6:	202a      	movs	r0, #42	; 0x2a
 80038a8:	f003 fb60 	bl	8006f6c <putchar>
	gotoxy(6,5);
 80038ac:	2105      	movs	r1, #5
 80038ae:	2006      	movs	r0, #6
 80038b0:	f7fe f9fc 	bl	8001cac <gotoxy>
	printf("*");
 80038b4:	202a      	movs	r0, #42	; 0x2a
 80038b6:	f003 fb59 	bl	8006f6c <putchar>
	gotoxy(13,13);
 80038ba:	210d      	movs	r1, #13
 80038bc:	200d      	movs	r0, #13
 80038be:	f7fe f9f5 	bl	8001cac <gotoxy>
	printf("*");
 80038c2:	202a      	movs	r0, #42	; 0x2a
 80038c4:	f003 fb52 	bl	8006f6c <putchar>
	gotoxy(60,7);
 80038c8:	2107      	movs	r1, #7
 80038ca:	203c      	movs	r0, #60	; 0x3c
 80038cc:	f7fe f9ee 	bl	8001cac <gotoxy>
	printf("%c",43);
 80038d0:	202b      	movs	r0, #43	; 0x2b
 80038d2:	f003 fb4b 	bl	8006f6c <putchar>

	gotoxy(140,3);
 80038d6:	2103      	movs	r1, #3
 80038d8:	208c      	movs	r0, #140	; 0x8c
 80038da:	f7fe f9e7 	bl	8001cac <gotoxy>
	printf("*");
 80038de:	202a      	movs	r0, #42	; 0x2a
 80038e0:	f003 fb44 	bl	8006f6c <putchar>
	gotoxy(120,5);
 80038e4:	2105      	movs	r1, #5
 80038e6:	2078      	movs	r0, #120	; 0x78
 80038e8:	f7fe f9e0 	bl	8001cac <gotoxy>
	printf("*");
 80038ec:	202a      	movs	r0, #42	; 0x2a
 80038ee:	f003 fb3d 	bl	8006f6c <putchar>
	gotoxy(110,7);
 80038f2:	2107      	movs	r1, #7
 80038f4:	206e      	movs	r0, #110	; 0x6e
 80038f6:	f7fe f9d9 	bl	8001cac <gotoxy>
	printf("*");
 80038fa:	202a      	movs	r0, #42	; 0x2a
 80038fc:	f003 fb36 	bl	8006f6c <putchar>
	gotoxy(70,30);
 8003900:	211e      	movs	r1, #30
 8003902:	2046      	movs	r0, #70	; 0x46
 8003904:	f7fe f9d2 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003908:	202b      	movs	r0, #43	; 0x2b
 800390a:	f003 fb2f 	bl	8006f6c <putchar>

	gotoxy(135,33);
 800390e:	2121      	movs	r1, #33	; 0x21
 8003910:	2087      	movs	r0, #135	; 0x87
 8003912:	f7fe f9cb 	bl	8001cac <gotoxy>
	printf("*");
 8003916:	202a      	movs	r0, #42	; 0x2a
 8003918:	f003 fb28 	bl	8006f6c <putchar>
	gotoxy(123,36);
 800391c:	2124      	movs	r1, #36	; 0x24
 800391e:	207b      	movs	r0, #123	; 0x7b
 8003920:	f7fe f9c4 	bl	8001cac <gotoxy>
	printf("*");
 8003924:	202a      	movs	r0, #42	; 0x2a
 8003926:	f003 fb21 	bl	8006f6c <putchar>
	gotoxy(138,40);
 800392a:	2128      	movs	r1, #40	; 0x28
 800392c:	208a      	movs	r0, #138	; 0x8a
 800392e:	f7fe f9bd 	bl	8001cac <gotoxy>
	printf("*");
 8003932:	202a      	movs	r0, #42	; 0x2a
 8003934:	f003 fb1a 	bl	8006f6c <putchar>
	gotoxy(127,25);
 8003938:	2119      	movs	r1, #25
 800393a:	207f      	movs	r0, #127	; 0x7f
 800393c:	f7fe f9b6 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003940:	202b      	movs	r0, #43	; 0x2b
 8003942:	f003 fb13 	bl	8006f6c <putchar>

	gotoxy(105,32);
 8003946:	2120      	movs	r1, #32
 8003948:	2069      	movs	r0, #105	; 0x69
 800394a:	f7fe f9af 	bl	8001cac <gotoxy>
	printf("%c",42);
 800394e:	202a      	movs	r0, #42	; 0x2a
 8003950:	f003 fb0c 	bl	8006f6c <putchar>
	gotoxy(106,33);
 8003954:	2121      	movs	r1, #33	; 0x21
 8003956:	206a      	movs	r0, #106	; 0x6a
 8003958:	f7fe f9a8 	bl	8001cac <gotoxy>
	printf("%c",92);
 800395c:	205c      	movs	r0, #92	; 0x5c
 800395e:	f003 fb05 	bl	8006f6c <putchar>
	gotoxy(107,34);
 8003962:	2122      	movs	r1, #34	; 0x22
 8003964:	206b      	movs	r0, #107	; 0x6b
 8003966:	f7fe f9a1 	bl	8001cac <gotoxy>
	printf("%c",92);
 800396a:	205c      	movs	r0, #92	; 0x5c
 800396c:	f003 fafe 	bl	8006f6c <putchar>

	gotoxy(23,15);
 8003970:	210f      	movs	r1, #15
 8003972:	2017      	movs	r0, #23
 8003974:	f7fe f99a 	bl	8001cac <gotoxy>
	printf("*");
 8003978:	202a      	movs	r0, #42	; 0x2a
 800397a:	f003 faf7 	bl	8006f6c <putchar>
	gotoxy(37,21);
 800397e:	2115      	movs	r1, #21
 8003980:	2025      	movs	r0, #37	; 0x25
 8003982:	f7fe f993 	bl	8001cac <gotoxy>
	printf("*");
 8003986:	202a      	movs	r0, #42	; 0x2a
 8003988:	f003 faf0 	bl	8006f6c <putchar>
	gotoxy(26,24);
 800398c:	2118      	movs	r1, #24
 800398e:	201a      	movs	r0, #26
 8003990:	f7fe f98c 	bl	8001cac <gotoxy>
	printf("*");
 8003994:	202a      	movs	r0, #42	; 0x2a
 8003996:	f003 fae9 	bl	8006f6c <putchar>
	gotoxy(30,29);
 800399a:	211d      	movs	r1, #29
 800399c:	201e      	movs	r0, #30
 800399e:	f7fe f985 	bl	8001cac <gotoxy>
	printf("%c",43);
 80039a2:	202b      	movs	r0, #43	; 0x2b
 80039a4:	f003 fae2 	bl	8006f6c <putchar>

	gotoxy(25,6);
 80039a8:	2106      	movs	r1, #6
 80039aa:	2019      	movs	r0, #25
 80039ac:	f7fe f97e 	bl	8001cac <gotoxy>
	printf("*");
 80039b0:	202a      	movs	r0, #42	; 0x2a
 80039b2:	f003 fadb 	bl	8006f6c <putchar>
	gotoxy(39,7);
 80039b6:	2107      	movs	r1, #7
 80039b8:	2027      	movs	r0, #39	; 0x27
 80039ba:	f7fe f977 	bl	8001cac <gotoxy>
	printf("*");
 80039be:	202a      	movs	r0, #42	; 0x2a
 80039c0:	f003 fad4 	bl	8006f6c <putchar>
	gotoxy(41,3);
 80039c4:	2103      	movs	r1, #3
 80039c6:	2029      	movs	r0, #41	; 0x29
 80039c8:	f7fe f970 	bl	8001cac <gotoxy>
	printf("*");
 80039cc:	202a      	movs	r0, #42	; 0x2a
 80039ce:	f003 facd 	bl	8006f6c <putchar>
	gotoxy(75,10);
 80039d2:	210a      	movs	r1, #10
 80039d4:	204b      	movs	r0, #75	; 0x4b
 80039d6:	f7fe f969 	bl	8001cac <gotoxy>
	printf("%c",43);
 80039da:	202b      	movs	r0, #43	; 0x2b
 80039dc:	f003 fac6 	bl	8006f6c <putchar>

	fgcolor(11);
 80039e0:	200b      	movs	r0, #11
 80039e2:	f7fe f937 	bl	8001c54 <fgcolor>
	gotoxy(100,20);
 80039e6:	2114      	movs	r1, #20
 80039e8:	2064      	movs	r0, #100	; 0x64
 80039ea:	f7fe f95f 	bl	8001cac <gotoxy>
	printf("%c",197);
 80039ee:	20c5      	movs	r0, #197	; 0xc5
 80039f0:	f003 fabc 	bl	8006f6c <putchar>
	gotoxy(135,12);
 80039f4:	210c      	movs	r1, #12
 80039f6:	2087      	movs	r0, #135	; 0x87
 80039f8:	f7fe f958 	bl	8001cac <gotoxy>
	printf("%c",197);
 80039fc:	20c5      	movs	r0, #197	; 0xc5
 80039fe:	f003 fab5 	bl	8006f6c <putchar>
	gotoxy(30,5);
 8003a02:	2105      	movs	r1, #5
 8003a04:	201e      	movs	r0, #30
 8003a06:	f7fe f951 	bl	8001cac <gotoxy>
	printf("%c",197);
 8003a0a:	20c5      	movs	r0, #197	; 0xc5
 8003a0c:	f003 faae 	bl	8006f6c <putchar>
	fgcolor(15);
 8003a10:	200f      	movs	r0, #15
 8003a12:	f7fe f91f 	bl	8001c54 <fgcolor>
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <drawMoon>:
/**
  * @brief Draws the moon
  * @param  x: x-coordinate, y: y-coordinate
  * @retval None
  */
void drawMoon(uint8_t X, uint8_t Y){
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	460a      	mov	r2, r1
 8003a24:	71fb      	strb	r3, [r7, #7]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8003a2a:	79bb      	ldrb	r3, [r7, #6]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	71bb      	strb	r3, [r7, #6]
	fgcolor(12);
 8003a30:	200c      	movs	r0, #12
 8003a32:	f7fe f90f 	bl	8001c54 <fgcolor>
	gotoxy(X-1,Y+3);
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	79bb      	ldrb	r3, [r7, #6]
 8003a3c:	3303      	adds	r3, #3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe f933 	bl	8001cac <gotoxy>
	printf("_");
 8003a46:	205f      	movs	r0, #95	; 0x5f
 8003a48:	f003 fa90 	bl	8006f6c <putchar>
	gotoxy(X,Y+3);
 8003a4c:	79fa      	ldrb	r2, [r7, #7]
 8003a4e:	79bb      	ldrb	r3, [r7, #6]
 8003a50:	3303      	adds	r3, #3
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7fe f929 	bl	8001cac <gotoxy>
	printf("_");
 8003a5a:	205f      	movs	r0, #95	; 0x5f
 8003a5c:	f003 fa86 	bl	8006f6c <putchar>
	gotoxy(X+1,Y+3);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	79bb      	ldrb	r3, [r7, #6]
 8003a66:	3303      	adds	r3, #3
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7fe f91e 	bl	8001cac <gotoxy>
	printf("_");
 8003a70:	205f      	movs	r0, #95	; 0x5f
 8003a72:	f003 fa7b 	bl	8006f6c <putchar>
	gotoxy(X-2,Y+3);
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	1e9a      	subs	r2, r3, #2
 8003a7a:	79bb      	ldrb	r3, [r7, #6]
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f7fe f913 	bl	8001cac <gotoxy>
	printf("(");
 8003a86:	2028      	movs	r0, #40	; 0x28
 8003a88:	f003 fa70 	bl	8006f6c <putchar>
	gotoxy(X+2,Y+3);
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	1c9a      	adds	r2, r3, #2
 8003a90:	79bb      	ldrb	r3, [r7, #6]
 8003a92:	3303      	adds	r3, #3
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f7fe f908 	bl	8001cac <gotoxy>
	printf(")");
 8003a9c:	2029      	movs	r0, #41	; 0x29
 8003a9e:	f003 fa65 	bl	8006f6c <putchar>

	gotoxy(X+3,Y+2);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	1cda      	adds	r2, r3, #3
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe f8fd 	bl	8001cac <gotoxy>
	printf("_");
 8003ab2:	205f      	movs	r0, #95	; 0x5f
 8003ab4:	f003 fa5a 	bl	8006f6c <putchar>
	gotoxy(X-3,Y+2);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	1eda      	subs	r2, r3, #3
 8003abc:	79bb      	ldrb	r3, [r7, #6]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe f8f2 	bl	8001cac <gotoxy>
	printf("_");
 8003ac8:	205f      	movs	r0, #95	; 0x5f
 8003aca:	f003 fa4f 	bl	8006f6c <putchar>
	gotoxy(X+4,Y+2);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	1d1a      	adds	r2, r3, #4
 8003ad2:	79bb      	ldrb	r3, [r7, #6]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7fe f8e7 	bl	8001cac <gotoxy>
	printf("(");
 8003ade:	2028      	movs	r0, #40	; 0x28
 8003ae0:	f003 fa44 	bl	8006f6c <putchar>
	gotoxy(X-4,Y+2);
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	1f1a      	subs	r2, r3, #4
 8003ae8:	79bb      	ldrb	r3, [r7, #6]
 8003aea:	3302      	adds	r3, #2
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fe f8dc 	bl	8001cac <gotoxy>
	printf(")");
 8003af4:	2029      	movs	r0, #41	; 0x29
 8003af6:	f003 fa39 	bl	8006f6c <putchar>

	gotoxy(X-5,Y+1);
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	1f5a      	subs	r2, r3, #5
 8003afe:	79bb      	ldrb	r3, [r7, #6]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe f8d1 	bl	8001cac <gotoxy>
	printf("(");
 8003b0a:	2028      	movs	r0, #40	; 0x28
 8003b0c:	f003 fa2e 	bl	8006f6c <putchar>
	gotoxy(X+5,Y+1);
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	1d5a      	adds	r2, r3, #5
 8003b14:	79bb      	ldrb	r3, [r7, #6]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7fe f8c6 	bl	8001cac <gotoxy>
	printf("(");
 8003b20:	2028      	movs	r0, #40	; 0x28
 8003b22:	f003 fa23 	bl	8006f6c <putchar>
	gotoxy(X-6,Y);
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	3b06      	subs	r3, #6
 8003b2a:	79ba      	ldrb	r2, [r7, #6]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f8bc 	bl	8001cac <gotoxy>
	printf("(");
 8003b34:	2028      	movs	r0, #40	; 0x28
 8003b36:	f003 fa19 	bl	8006f6c <putchar>
	gotoxy(X+6,Y);
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	3306      	adds	r3, #6
 8003b3e:	79ba      	ldrb	r2, [r7, #6]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe f8b2 	bl	8001cac <gotoxy>
	printf(")");
 8003b48:	2029      	movs	r0, #41	; 0x29
 8003b4a:	f003 fa0f 	bl	8006f6c <putchar>

	gotoxy(X-5,Y-1);
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	1f5a      	subs	r2, r3, #5
 8003b52:	79bb      	ldrb	r3, [r7, #6]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe f8a7 	bl	8001cac <gotoxy>
	printf("(");
 8003b5e:	2028      	movs	r0, #40	; 0x28
 8003b60:	f003 fa04 	bl	8006f6c <putchar>
	gotoxy(X+5,Y-1);
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	1d5a      	adds	r2, r3, #5
 8003b68:	79bb      	ldrb	r3, [r7, #6]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fe f89c 	bl	8001cac <gotoxy>
	printf(")");
 8003b74:	2029      	movs	r0, #41	; 0x29
 8003b76:	f003 f9f9 	bl	8006f6c <putchar>
	gotoxy(X-4,Y-2);
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	1f1a      	subs	r2, r3, #4
 8003b7e:	79bb      	ldrb	r3, [r7, #6]
 8003b80:	3b02      	subs	r3, #2
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fe f891 	bl	8001cac <gotoxy>
	printf("(");
 8003b8a:	2028      	movs	r0, #40	; 0x28
 8003b8c:	f003 f9ee 	bl	8006f6c <putchar>
	gotoxy(X+4,Y-2);
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	79bb      	ldrb	r3, [r7, #6]
 8003b96:	3b02      	subs	r3, #2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f7fe f886 	bl	8001cac <gotoxy>
	printf(")");
 8003ba0:	2029      	movs	r0, #41	; 0x29
 8003ba2:	f003 f9e3 	bl	8006f6c <putchar>

	gotoxy(X-3,Y-3);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	1eda      	subs	r2, r3, #3
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7fe f87b 	bl	8001cac <gotoxy>
	printf("_");
 8003bb6:	205f      	movs	r0, #95	; 0x5f
 8003bb8:	f003 f9d8 	bl	8006f6c <putchar>
	gotoxy(X+3,Y-3);
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	1cda      	adds	r2, r3, #3
 8003bc0:	79bb      	ldrb	r3, [r7, #6]
 8003bc2:	3b03      	subs	r3, #3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe f870 	bl	8001cac <gotoxy>
	printf("_");
 8003bcc:	205f      	movs	r0, #95	; 0x5f
 8003bce:	f003 f9cd 	bl	8006f6c <putchar>
	gotoxy(X-2,Y-3);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	1e9a      	subs	r2, r3, #2
 8003bd6:	79bb      	ldrb	r3, [r7, #6]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7fe f865 	bl	8001cac <gotoxy>
	printf("(");
 8003be2:	2028      	movs	r0, #40	; 0x28
 8003be4:	f003 f9c2 	bl	8006f6c <putchar>
	gotoxy(X+2,Y-3);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	79bb      	ldrb	r3, [r7, #6]
 8003bee:	3b03      	subs	r3, #3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe f85a 	bl	8001cac <gotoxy>
	printf(")");
 8003bf8:	2029      	movs	r0, #41	; 0x29
 8003bfa:	f003 f9b7 	bl	8006f6c <putchar>

	gotoxy(X-1,Y-4);
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	3b04      	subs	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fe f84f 	bl	8001cac <gotoxy>
	printf("_");
 8003c0e:	205f      	movs	r0, #95	; 0x5f
 8003c10:	f003 f9ac 	bl	8006f6c <putchar>
	gotoxy(X,Y-4);
 8003c14:	79fa      	ldrb	r2, [r7, #7]
 8003c16:	79bb      	ldrb	r3, [r7, #6]
 8003c18:	3b04      	subs	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe f845 	bl	8001cac <gotoxy>
	printf("_");
 8003c22:	205f      	movs	r0, #95	; 0x5f
 8003c24:	f003 f9a2 	bl	8006f6c <putchar>
	gotoxy(X+1,Y-4);
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	79bb      	ldrb	r3, [r7, #6]
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fe f83a 	bl	8001cac <gotoxy>
	printf("_");
 8003c38:	205f      	movs	r0, #95	; 0x5f
 8003c3a:	f003 f997 	bl	8006f6c <putchar>

	fgcolor(3);
 8003c3e:	2003      	movs	r0, #3
 8003c40:	f7fe f808 	bl	8001c54 <fgcolor>
	gotoxy(X-2,Y);
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	3b02      	subs	r3, #2
 8003c48:	79ba      	ldrb	r2, [r7, #6]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe f82d 	bl	8001cac <gotoxy>
	printf("O");
 8003c52:	204f      	movs	r0, #79	; 0x4f
 8003c54:	f003 f98a 	bl	8006f6c <putchar>
	gotoxy(X+1,Y+2);
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	79bb      	ldrb	r3, [r7, #6]
 8003c5e:	3302      	adds	r3, #2
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fe f822 	bl	8001cac <gotoxy>
	printf("o");
 8003c68:	206f      	movs	r0, #111	; 0x6f
 8003c6a:	f003 f97f 	bl	8006f6c <putchar>
	gotoxy(X+3,Y-1);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	1cda      	adds	r2, r3, #3
 8003c72:	79bb      	ldrb	r3, [r7, #6]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7fe f817 	bl	8001cac <gotoxy>
	printf("O");
 8003c7e:	204f      	movs	r0, #79	; 0x4f
 8003c80:	f003 f974 	bl	8006f6c <putchar>
	fgcolor(15);
 8003c84:	200f      	movs	r0, #15
 8003c86:	f7fd ffe5 	bl	8001c54 <fgcolor>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <drawhearth>:
/**
  * @brief Draws the hearts indicating the number of lives
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawhearth(gameState_t* gameState){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	200f      	movs	r0, #15
 8003ca0:	f7fe f804 	bl	8001cac <gotoxy>
	printf("           ");
 8003ca4:	483b      	ldr	r0, [pc, #236]	; (8003d94 <drawhearth+0x100>)
 8003ca6:	f003 f949 	bl	8006f3c <iprintf>
	gotoxy(15,2);
 8003caa:	2102      	movs	r1, #2
 8003cac:	200f      	movs	r0, #15
 8003cae:	f7fd fffd 	bl	8001cac <gotoxy>
	printf("           ");
 8003cb2:	4838      	ldr	r0, [pc, #224]	; (8003d94 <drawhearth+0x100>)
 8003cb4:	f003 f942 	bl	8006f3c <iprintf>
	fgcolor(1);
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7fd ffcb 	bl	8001c54 <fgcolor>

	if(gameState->cityLives >= 1){
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <drawhearth+0x6c>
		gotoxy(15,1);
 8003cc8:	2101      	movs	r1, #1
 8003cca:	200f      	movs	r0, #15
 8003ccc:	f7fd ffee 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003cd0:	20db      	movs	r0, #219	; 0xdb
 8003cd2:	f003 f94b 	bl	8006f6c <putchar>
		gotoxy(17,1);
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	2011      	movs	r0, #17
 8003cda:	f7fd ffe7 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003cde:	20db      	movs	r0, #219	; 0xdb
 8003ce0:	f003 f944 	bl	8006f6c <putchar>
		gotoxy(16,2);
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	2010      	movs	r0, #16
 8003ce8:	f7fd ffe0 	bl	8001cac <gotoxy>
		printf("%c",223);
 8003cec:	20df      	movs	r0, #223	; 0xdf
 8003cee:	f003 f93d 	bl	8006f6c <putchar>
		gotoxy(16,1);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f7fd ffd9 	bl	8001cac <gotoxy>
		printf("%c",220);
 8003cfa:	20dc      	movs	r0, #220	; 0xdc
 8003cfc:	f003 f936 	bl	8006f6c <putchar>
	}
	if(gameState->cityLives >= 2){
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d91b      	bls.n	8003d42 <drawhearth+0xae>
		gotoxy(19,1);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	2013      	movs	r0, #19
 8003d0e:	f7fd ffcd 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003d12:	20db      	movs	r0, #219	; 0xdb
 8003d14:	f003 f92a 	bl	8006f6c <putchar>
		gotoxy(21,1);
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2015      	movs	r0, #21
 8003d1c:	f7fd ffc6 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003d20:	20db      	movs	r0, #219	; 0xdb
 8003d22:	f003 f923 	bl	8006f6c <putchar>
		gotoxy(20,2);
 8003d26:	2102      	movs	r1, #2
 8003d28:	2014      	movs	r0, #20
 8003d2a:	f7fd ffbf 	bl	8001cac <gotoxy>
		printf("%c",223);
 8003d2e:	20df      	movs	r0, #223	; 0xdf
 8003d30:	f003 f91c 	bl	8006f6c <putchar>
		gotoxy(20,1);
 8003d34:	2101      	movs	r1, #1
 8003d36:	2014      	movs	r0, #20
 8003d38:	f7fd ffb8 	bl	8001cac <gotoxy>
		printf("%c",220);
 8003d3c:	20dc      	movs	r0, #220	; 0xdc
 8003d3e:	f003 f915 	bl	8006f6c <putchar>

	}
	if(gameState->cityLives >= 3){
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d91b      	bls.n	8003d84 <drawhearth+0xf0>
		gotoxy(23,1);
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	2017      	movs	r0, #23
 8003d50:	f7fd ffac 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003d54:	20db      	movs	r0, #219	; 0xdb
 8003d56:	f003 f909 	bl	8006f6c <putchar>
		gotoxy(25,1);
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	2019      	movs	r0, #25
 8003d5e:	f7fd ffa5 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003d62:	20db      	movs	r0, #219	; 0xdb
 8003d64:	f003 f902 	bl	8006f6c <putchar>
		gotoxy(24,2);
 8003d68:	2102      	movs	r1, #2
 8003d6a:	2018      	movs	r0, #24
 8003d6c:	f7fd ff9e 	bl	8001cac <gotoxy>
		printf("%c",223);
 8003d70:	20df      	movs	r0, #223	; 0xdf
 8003d72:	f003 f8fb 	bl	8006f6c <putchar>
		gotoxy(24,1);
 8003d76:	2101      	movs	r1, #1
 8003d78:	2018      	movs	r0, #24
 8003d7a:	f7fd ff97 	bl	8001cac <gotoxy>
		printf("%c",220);
 8003d7e:	20dc      	movs	r0, #220	; 0xdc
 8003d80:	f003 f8f4 	bl	8006f6c <putchar>
	}
	fgcolor(15);
 8003d84:	200f      	movs	r0, #15
 8003d86:	f7fd ff65 	bl	8001c54 <fgcolor>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	080081ec 	.word	0x080081ec

08003d98 <drawEnemy>:
/**
  * @brief Loops over all the enemies and draws them to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawEnemy(gameState_t* gameState){
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8003da6:	e089      	b.n	8003ebc <drawEnemy+0x124>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fc9d 	bl	80036f0 <fpToInt>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461c      	mov	r4, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fc94 	bl	80036f0 <fpToInt>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7fd ff6b 	bl	8001cac <gotoxy>
		printf("       ");
 8003dd6:	483e      	ldr	r0, [pc, #248]	; (8003ed0 <drawEnemy+0x138>)
 8003dd8:	f003 f8b0 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fc83 	bl	80036f0 <fpToInt>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461c      	mov	r4, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fc7a 	bl	80036f0 <fpToInt>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	3302      	adds	r3, #2
 8003e00:	0fda      	lsrs	r2, r3, #31
 8003e02:	4413      	add	r3, r2
 8003e04:	105b      	asrs	r3, r3, #1
 8003e06:	4619      	mov	r1, r3
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7fd ff4f 	bl	8001cac <gotoxy>
		printf("       ");
 8003e0e:	4830      	ldr	r0, [pc, #192]	; (8003ed0 <drawEnemy+0x138>)
 8003e10:	f003 f894 	bl	8006f3c <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fc67 	bl	80036f0 <fpToInt>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461c      	mov	r4, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fc5e 	bl	80036f0 <fpToInt>
 8003e34:	4603      	mov	r3, r0
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7fd ff35 	bl	8001cac <gotoxy>
		printf("  o o  ");
 8003e42:	4824      	ldr	r0, [pc, #144]	; (8003ed4 <drawEnemy+0x13c>)
 8003e44:	f003 f87a 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fc4d 	bl	80036f0 <fpToInt>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461c      	mov	r4, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fc44 	bl	80036f0 <fpToInt>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	0fda      	lsrs	r2, r3, #31
 8003e6e:	4413      	add	r3, r2
 8003e70:	105b      	asrs	r3, r3, #1
 8003e72:	4619      	mov	r1, r3
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7fd ff19 	bl	8001cac <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8003e7a:	23bb      	movs	r3, #187	; 0xbb
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	23cd      	movs	r3, #205	; 0xcd
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	23cd      	movs	r3, #205	; 0xcd
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	23cd      	movs	r3, #205	; 0xcd
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	23cd      	movs	r3, #205	; 0xcd
 8003e8c:	22cd      	movs	r2, #205	; 0xcd
 8003e8e:	21c9      	movs	r1, #201	; 0xc9
 8003e90:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <drawEnemy+0x140>)
 8003e92:	f003 f853 	bl	8006f3c <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6852      	ldr	r2, [r2, #4]
 8003eb4:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f47f af72 	bne.w	8003da8 <drawEnemy+0x10>

	}
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	080081f8 	.word	0x080081f8
 8003ed4:	08008200 	.word	0x08008200
 8003ed8:	08008208 	.word	0x08008208

08003edc <drawCity>:
/**
  * @brief Draw the city at the bottom of the screen
  * @param  None
  * @retval None
  */
void drawCity(){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	200e      	movs	r0, #14
 8003ee4:	f7fd fee2 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ee8:	20db      	movs	r0, #219	; 0xdb
 8003eea:	f003 f83f 	bl	8006f6c <putchar>

	gotoxy(16,44);
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	2010      	movs	r0, #16
 8003ef2:	f7fd fedb 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ef6:	20db      	movs	r0, #219	; 0xdb
 8003ef8:	f003 f838 	bl	8006f6c <putchar>

	gotoxy(17,44);
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	2011      	movs	r0, #17
 8003f00:	f7fd fed4 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f04:	20db      	movs	r0, #219	; 0xdb
 8003f06:	f003 f831 	bl	8006f6c <putchar>
	gotoxy(17,43);
 8003f0a:	212b      	movs	r1, #43	; 0x2b
 8003f0c:	2011      	movs	r0, #17
 8003f0e:	f7fd fecd 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f12:	20db      	movs	r0, #219	; 0xdb
 8003f14:	f003 f82a 	bl	8006f6c <putchar>

	gotoxy(19,44);
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	2013      	movs	r0, #19
 8003f1c:	f7fd fec6 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f20:	20dc      	movs	r0, #220	; 0xdc
 8003f22:	f003 f823 	bl	8006f6c <putchar>

	gotoxy(21,44);
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	2015      	movs	r0, #21
 8003f2a:	f7fd febf 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f2e:	20db      	movs	r0, #219	; 0xdb
 8003f30:	f003 f81c 	bl	8006f6c <putchar>

	gotoxy(23,44);
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	2017      	movs	r0, #23
 8003f38:	f7fd feb8 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f3c:	20db      	movs	r0, #219	; 0xdb
 8003f3e:	f003 f815 	bl	8006f6c <putchar>
	gotoxy(23,43);
 8003f42:	212b      	movs	r1, #43	; 0x2b
 8003f44:	2017      	movs	r0, #23
 8003f46:	f7fd feb1 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f4a:	20dc      	movs	r0, #220	; 0xdc
 8003f4c:	f003 f80e 	bl	8006f6c <putchar>

	gotoxy(25,44);
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	2019      	movs	r0, #25
 8003f54:	f7fd feaa 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f58:	20db      	movs	r0, #219	; 0xdb
 8003f5a:	f003 f807 	bl	8006f6c <putchar>
	gotoxy(25,43);
 8003f5e:	212b      	movs	r1, #43	; 0x2b
 8003f60:	2019      	movs	r0, #25
 8003f62:	f7fd fea3 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f66:	20db      	movs	r0, #219	; 0xdb
 8003f68:	f003 f800 	bl	8006f6c <putchar>
	gotoxy(25,42);
 8003f6c:	212a      	movs	r1, #42	; 0x2a
 8003f6e:	2019      	movs	r0, #25
 8003f70:	f7fd fe9c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f74:	20db      	movs	r0, #219	; 0xdb
 8003f76:	f002 fff9 	bl	8006f6c <putchar>

	gotoxy(27,44);
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	201b      	movs	r0, #27
 8003f7e:	f7fd fe95 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f82:	20db      	movs	r0, #219	; 0xdb
 8003f84:	f002 fff2 	bl	8006f6c <putchar>
	gotoxy(27,43);
 8003f88:	212b      	movs	r1, #43	; 0x2b
 8003f8a:	201b      	movs	r0, #27
 8003f8c:	f7fd fe8e 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f90:	20dc      	movs	r0, #220	; 0xdc
 8003f92:	f002 ffeb 	bl	8006f6c <putchar>

	gotoxy(28,44);
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	201c      	movs	r0, #28
 8003f9a:	f7fd fe87 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f9e:	20db      	movs	r0, #219	; 0xdb
 8003fa0:	f002 ffe4 	bl	8006f6c <putchar>

	gotoxy(36,44);
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	2024      	movs	r0, #36	; 0x24
 8003fa8:	f7fd fe80 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fac:	20db      	movs	r0, #219	; 0xdb
 8003fae:	f002 ffdd 	bl	8006f6c <putchar>
	gotoxy(36,43);
 8003fb2:	212b      	movs	r1, #43	; 0x2b
 8003fb4:	2024      	movs	r0, #36	; 0x24
 8003fb6:	f7fd fe79 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fba:	20db      	movs	r0, #219	; 0xdb
 8003fbc:	f002 ffd6 	bl	8006f6c <putchar>

	gotoxy(37,44);
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	2025      	movs	r0, #37	; 0x25
 8003fc4:	f7fd fe72 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fc8:	20db      	movs	r0, #219	; 0xdb
 8003fca:	f002 ffcf 	bl	8006f6c <putchar>

	gotoxy(38,44);
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	2026      	movs	r0, #38	; 0x26
 8003fd2:	f7fd fe6b 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003fd6:	20dc      	movs	r0, #220	; 0xdc
 8003fd8:	f002 ffc8 	bl	8006f6c <putchar>

	gotoxy(40,44);
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	2028      	movs	r0, #40	; 0x28
 8003fe0:	f7fd fe64 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fe4:	20db      	movs	r0, #219	; 0xdb
 8003fe6:	f002 ffc1 	bl	8006f6c <putchar>
	gotoxy(40,43);
 8003fea:	212b      	movs	r1, #43	; 0x2b
 8003fec:	2028      	movs	r0, #40	; 0x28
 8003fee:	f7fd fe5d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ff2:	20db      	movs	r0, #219	; 0xdb
 8003ff4:	f002 ffba 	bl	8006f6c <putchar>

	gotoxy(41,43);
 8003ff8:	212b      	movs	r1, #43	; 0x2b
 8003ffa:	2029      	movs	r0, #41	; 0x29
 8003ffc:	f7fd fe56 	bl	8001cac <gotoxy>
	printf("%c",205);
 8004000:	20cd      	movs	r0, #205	; 0xcd
 8004002:	f002 ffb3 	bl	8006f6c <putchar>

	gotoxy(42,44);
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	202a      	movs	r0, #42	; 0x2a
 800400a:	f7fd fe4f 	bl	8001cac <gotoxy>
	printf("%c",219);
 800400e:	20db      	movs	r0, #219	; 0xdb
 8004010:	f002 ffac 	bl	8006f6c <putchar>
	gotoxy(42,43);
 8004014:	212b      	movs	r1, #43	; 0x2b
 8004016:	202a      	movs	r0, #42	; 0x2a
 8004018:	f7fd fe48 	bl	8001cac <gotoxy>
	printf("%c",219);
 800401c:	20db      	movs	r0, #219	; 0xdb
 800401e:	f002 ffa5 	bl	8006f6c <putchar>

	gotoxy(45,44);
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	202d      	movs	r0, #45	; 0x2d
 8004026:	f7fd fe41 	bl	8001cac <gotoxy>
	printf("%c",186);
 800402a:	20ba      	movs	r0, #186	; 0xba
 800402c:	f002 ff9e 	bl	8006f6c <putchar>

	gotoxy(47,44);
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	202f      	movs	r0, #47	; 0x2f
 8004034:	f7fd fe3a 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004038:	20dc      	movs	r0, #220	; 0xdc
 800403a:	f002 ff97 	bl	8006f6c <putchar>

	gotoxy(55,44);
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	2037      	movs	r0, #55	; 0x37
 8004042:	f7fd fe33 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004046:	20db      	movs	r0, #219	; 0xdb
 8004048:	f002 ff90 	bl	8006f6c <putchar>
	gotoxy(55,43);
 800404c:	212b      	movs	r1, #43	; 0x2b
 800404e:	2037      	movs	r0, #55	; 0x37
 8004050:	f7fd fe2c 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004054:	20dc      	movs	r0, #220	; 0xdc
 8004056:	f002 ff89 	bl	8006f6c <putchar>

	gotoxy(58,44);
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	203a      	movs	r0, #58	; 0x3a
 800405e:	f7fd fe25 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004062:	20db      	movs	r0, #219	; 0xdb
 8004064:	f002 ff82 	bl	8006f6c <putchar>
	gotoxy(58,43);
 8004068:	212b      	movs	r1, #43	; 0x2b
 800406a:	203a      	movs	r0, #58	; 0x3a
 800406c:	f7fd fe1e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004070:	20db      	movs	r0, #219	; 0xdb
 8004072:	f002 ff7b 	bl	8006f6c <putchar>
	gotoxy(58,42);
 8004076:	212a      	movs	r1, #42	; 0x2a
 8004078:	203a      	movs	r0, #58	; 0x3a
 800407a:	f7fd fe17 	bl	8001cac <gotoxy>
	printf("%c",220);
 800407e:	20dc      	movs	r0, #220	; 0xdc
 8004080:	f002 ff74 	bl	8006f6c <putchar>

	gotoxy(59,44);
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	203b      	movs	r0, #59	; 0x3b
 8004088:	f7fd fe10 	bl	8001cac <gotoxy>
	printf("%c",219);
 800408c:	20db      	movs	r0, #219	; 0xdb
 800408e:	f002 ff6d 	bl	8006f6c <putchar>
	gotoxy(59,43);
 8004092:	212b      	movs	r1, #43	; 0x2b
 8004094:	203b      	movs	r0, #59	; 0x3b
 8004096:	f7fd fe09 	bl	8001cac <gotoxy>
	printf("%c",220);
 800409a:	20dc      	movs	r0, #220	; 0xdc
 800409c:	f002 ff66 	bl	8006f6c <putchar>

	gotoxy(60,44);
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	203c      	movs	r0, #60	; 0x3c
 80040a4:	f7fd fe02 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040a8:	20db      	movs	r0, #219	; 0xdb
 80040aa:	f002 ff5f 	bl	8006f6c <putchar>

	gotoxy(61,44);
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	203d      	movs	r0, #61	; 0x3d
 80040b2:	f7fd fdfb 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040b6:	20db      	movs	r0, #219	; 0xdb
 80040b8:	f002 ff58 	bl	8006f6c <putchar>
	gotoxy(61,43);
 80040bc:	212b      	movs	r1, #43	; 0x2b
 80040be:	203d      	movs	r0, #61	; 0x3d
 80040c0:	f7fd fdf4 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040c4:	20db      	movs	r0, #219	; 0xdb
 80040c6:	f002 ff51 	bl	8006f6c <putchar>

	gotoxy(63,44);
 80040ca:	212c      	movs	r1, #44	; 0x2c
 80040cc:	203f      	movs	r0, #63	; 0x3f
 80040ce:	f7fd fded 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040d2:	20db      	movs	r0, #219	; 0xdb
 80040d4:	f002 ff4a 	bl	8006f6c <putchar>

	gotoxy(64,44);
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	2040      	movs	r0, #64	; 0x40
 80040dc:	f7fd fde6 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040e0:	20dc      	movs	r0, #220	; 0xdc
 80040e2:	f002 ff43 	bl	8006f6c <putchar>

	gotoxy(65,44);
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	2041      	movs	r0, #65	; 0x41
 80040ea:	f7fd fddf 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040ee:	20db      	movs	r0, #219	; 0xdb
 80040f0:	f002 ff3c 	bl	8006f6c <putchar>

	gotoxy(67,44);
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	2043      	movs	r0, #67	; 0x43
 80040f8:	f7fd fdd8 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040fc:	20db      	movs	r0, #219	; 0xdb
 80040fe:	f002 ff35 	bl	8006f6c <putchar>
	gotoxy(67,43);
 8004102:	212b      	movs	r1, #43	; 0x2b
 8004104:	2043      	movs	r0, #67	; 0x43
 8004106:	f7fd fdd1 	bl	8001cac <gotoxy>
	printf("%c",219);
 800410a:	20db      	movs	r0, #219	; 0xdb
 800410c:	f002 ff2e 	bl	8006f6c <putchar>
	gotoxy(67,42);
 8004110:	212a      	movs	r1, #42	; 0x2a
 8004112:	2043      	movs	r0, #67	; 0x43
 8004114:	f7fd fdca 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004118:	20db      	movs	r0, #219	; 0xdb
 800411a:	f002 ff27 	bl	8006f6c <putchar>

	gotoxy(69,44);
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	2045      	movs	r0, #69	; 0x45
 8004122:	f7fd fdc3 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004126:	20db      	movs	r0, #219	; 0xdb
 8004128:	f002 ff20 	bl	8006f6c <putchar>
	gotoxy(69,43);
 800412c:	212b      	movs	r1, #43	; 0x2b
 800412e:	2045      	movs	r0, #69	; 0x45
 8004130:	f7fd fdbc 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004134:	20db      	movs	r0, #219	; 0xdb
 8004136:	f002 ff19 	bl	8006f6c <putchar>
	gotoxy(69,42);
 800413a:	212a      	movs	r1, #42	; 0x2a
 800413c:	2045      	movs	r0, #69	; 0x45
 800413e:	f7fd fdb5 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004142:	20db      	movs	r0, #219	; 0xdb
 8004144:	f002 ff12 	bl	8006f6c <putchar>

	gotoxy(71,44);
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	2047      	movs	r0, #71	; 0x47
 800414c:	f7fd fdae 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004150:	20db      	movs	r0, #219	; 0xdb
 8004152:	f002 ff0b 	bl	8006f6c <putchar>
	gotoxy(71,43);
 8004156:	212b      	movs	r1, #43	; 0x2b
 8004158:	2047      	movs	r0, #71	; 0x47
 800415a:	f7fd fda7 	bl	8001cac <gotoxy>
	printf("%c",219);
 800415e:	20db      	movs	r0, #219	; 0xdb
 8004160:	f002 ff04 	bl	8006f6c <putchar>
	gotoxy(71,42);
 8004164:	212a      	movs	r1, #42	; 0x2a
 8004166:	2047      	movs	r0, #71	; 0x47
 8004168:	f7fd fda0 	bl	8001cac <gotoxy>
	printf("%c",219);
 800416c:	20db      	movs	r0, #219	; 0xdb
 800416e:	f002 fefd 	bl	8006f6c <putchar>

	gotoxy(73,44);
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	2049      	movs	r0, #73	; 0x49
 8004176:	f7fd fd99 	bl	8001cac <gotoxy>
	printf("%c",219);
 800417a:	20db      	movs	r0, #219	; 0xdb
 800417c:	f002 fef6 	bl	8006f6c <putchar>
	gotoxy(73,43);
 8004180:	212b      	movs	r1, #43	; 0x2b
 8004182:	2049      	movs	r0, #73	; 0x49
 8004184:	f7fd fd92 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004188:	20db      	movs	r0, #219	; 0xdb
 800418a:	f002 feef 	bl	8006f6c <putchar>

	gotoxy(74,44);
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	204a      	movs	r0, #74	; 0x4a
 8004192:	f7fd fd8b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004196:	20db      	movs	r0, #219	; 0xdb
 8004198:	f002 fee8 	bl	8006f6c <putchar>

	gotoxy(76,44);
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	204c      	movs	r0, #76	; 0x4c
 80041a0:	f7fd fd84 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041a4:	20db      	movs	r0, #219	; 0xdb
 80041a6:	f002 fee1 	bl	8006f6c <putchar>

	gotoxy(77,44);
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	204d      	movs	r0, #77	; 0x4d
 80041ae:	f7fd fd7d 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041b2:	20db      	movs	r0, #219	; 0xdb
 80041b4:	f002 feda 	bl	8006f6c <putchar>
	gotoxy(77,43);
 80041b8:	212b      	movs	r1, #43	; 0x2b
 80041ba:	204d      	movs	r0, #77	; 0x4d
 80041bc:	f7fd fd76 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041c0:	20db      	movs	r0, #219	; 0xdb
 80041c2:	f002 fed3 	bl	8006f6c <putchar>

	gotoxy(79,44);
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	204f      	movs	r0, #79	; 0x4f
 80041ca:	f7fd fd6f 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041ce:	20db      	movs	r0, #219	; 0xdb
 80041d0:	f002 fecc 	bl	8006f6c <putchar>
	gotoxy(79,44);
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	204f      	movs	r0, #79	; 0x4f
 80041d8:	f7fd fd68 	bl	8001cac <gotoxy>
	printf("%c",220);
 80041dc:	20dc      	movs	r0, #220	; 0xdc
 80041de:	f002 fec5 	bl	8006f6c <putchar>

	gotoxy(81,44);
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	2051      	movs	r0, #81	; 0x51
 80041e6:	f7fd fd61 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041ea:	20db      	movs	r0, #219	; 0xdb
 80041ec:	f002 febe 	bl	8006f6c <putchar>
	gotoxy(81,43);
 80041f0:	212b      	movs	r1, #43	; 0x2b
 80041f2:	2051      	movs	r0, #81	; 0x51
 80041f4:	f7fd fd5a 	bl	8001cac <gotoxy>
	printf("%c",219);
 80041f8:	20db      	movs	r0, #219	; 0xdb
 80041fa:	f002 feb7 	bl	8006f6c <putchar>

	gotoxy(82,44);
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	2052      	movs	r0, #82	; 0x52
 8004202:	f7fd fd53 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004206:	20db      	movs	r0, #219	; 0xdb
 8004208:	f002 feb0 	bl	8006f6c <putchar>

	gotoxy(85,44);
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	2055      	movs	r0, #85	; 0x55
 8004210:	f7fd fd4c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004214:	20db      	movs	r0, #219	; 0xdb
 8004216:	f002 fea9 	bl	8006f6c <putchar>
	gotoxy(85,43);
 800421a:	212b      	movs	r1, #43	; 0x2b
 800421c:	2055      	movs	r0, #85	; 0x55
 800421e:	f7fd fd45 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004222:	20db      	movs	r0, #219	; 0xdb
 8004224:	f002 fea2 	bl	8006f6c <putchar>
	gotoxy(85,42);
 8004228:	212a      	movs	r1, #42	; 0x2a
 800422a:	2055      	movs	r0, #85	; 0x55
 800422c:	f7fd fd3e 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004230:	20dc      	movs	r0, #220	; 0xdc
 8004232:	f002 fe9b 	bl	8006f6c <putchar>

	gotoxy(86,44);
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	2056      	movs	r0, #86	; 0x56
 800423a:	f7fd fd37 	bl	8001cac <gotoxy>
	printf("%c",219);
 800423e:	20db      	movs	r0, #219	; 0xdb
 8004240:	f002 fe94 	bl	8006f6c <putchar>

	gotoxy(87,44);
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	2057      	movs	r0, #87	; 0x57
 8004248:	f7fd fd30 	bl	8001cac <gotoxy>
	printf("%c",220);
 800424c:	20dc      	movs	r0, #220	; 0xdc
 800424e:	f002 fe8d 	bl	8006f6c <putchar>

	gotoxy(88,44);
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	2058      	movs	r0, #88	; 0x58
 8004256:	f7fd fd29 	bl	8001cac <gotoxy>
	printf("%c",219);
 800425a:	20db      	movs	r0, #219	; 0xdb
 800425c:	f002 fe86 	bl	8006f6c <putchar>
	gotoxy(88,43);
 8004260:	212b      	movs	r1, #43	; 0x2b
 8004262:	2058      	movs	r0, #88	; 0x58
 8004264:	f7fd fd22 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004268:	20dc      	movs	r0, #220	; 0xdc
 800426a:	f002 fe7f 	bl	8006f6c <putchar>

	gotoxy(93,44);
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	205d      	movs	r0, #93	; 0x5d
 8004272:	f7fd fd1b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004276:	20db      	movs	r0, #219	; 0xdb
 8004278:	f002 fe78 	bl	8006f6c <putchar>

	gotoxy(94,44);
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	205e      	movs	r0, #94	; 0x5e
 8004280:	f7fd fd14 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004284:	20db      	movs	r0, #219	; 0xdb
 8004286:	f002 fe71 	bl	8006f6c <putchar>
	gotoxy(94,43);
 800428a:	212b      	movs	r1, #43	; 0x2b
 800428c:	205e      	movs	r0, #94	; 0x5e
 800428e:	f7fd fd0d 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004292:	20dc      	movs	r0, #220	; 0xdc
 8004294:	f002 fe6a 	bl	8006f6c <putchar>

	gotoxy(95,44);
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	205f      	movs	r0, #95	; 0x5f
 800429c:	f7fd fd06 	bl	8001cac <gotoxy>
	printf("%c",220);
 80042a0:	20dc      	movs	r0, #220	; 0xdc
 80042a2:	f002 fe63 	bl	8006f6c <putchar>

	gotoxy(96,44);
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	2060      	movs	r0, #96	; 0x60
 80042aa:	f7fd fcff 	bl	8001cac <gotoxy>
	printf("%c",219);
 80042ae:	20db      	movs	r0, #219	; 0xdb
 80042b0:	f002 fe5c 	bl	8006f6c <putchar>

	gotoxy(98,44);
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	2062      	movs	r0, #98	; 0x62
 80042b8:	f7fd fcf8 	bl	8001cac <gotoxy>
	printf("%c",219);
 80042bc:	20db      	movs	r0, #219	; 0xdb
 80042be:	f002 fe55 	bl	8006f6c <putchar>
	gotoxy(98,43);
 80042c2:	212b      	movs	r1, #43	; 0x2b
 80042c4:	2062      	movs	r0, #98	; 0x62
 80042c6:	f7fd fcf1 	bl	8001cac <gotoxy>
	printf("%c",220);
 80042ca:	20dc      	movs	r0, #220	; 0xdc
 80042cc:	f002 fe4e 	bl	8006f6c <putchar>

	gotoxy(99,44);
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	2063      	movs	r0, #99	; 0x63
 80042d4:	f7fd fcea 	bl	8001cac <gotoxy>
	printf("%c",219);
 80042d8:	20db      	movs	r0, #219	; 0xdb
 80042da:	f002 fe47 	bl	8006f6c <putchar>

	gotoxy(103,44);
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	2067      	movs	r0, #103	; 0x67
 80042e2:	f7fd fce3 	bl	8001cac <gotoxy>
	printf("%c",219);
 80042e6:	20db      	movs	r0, #219	; 0xdb
 80042e8:	f002 fe40 	bl	8006f6c <putchar>

	gotoxy(104,44);
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	2068      	movs	r0, #104	; 0x68
 80042f0:	f7fd fcdc 	bl	8001cac <gotoxy>
	printf("%c",220);
 80042f4:	20dc      	movs	r0, #220	; 0xdc
 80042f6:	f002 fe39 	bl	8006f6c <putchar>

	gotoxy(107,44);
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	206b      	movs	r0, #107	; 0x6b
 80042fe:	f7fd fcd5 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004302:	20db      	movs	r0, #219	; 0xdb
 8004304:	f002 fe32 	bl	8006f6c <putchar>

	gotoxy(108,44);
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	206c      	movs	r0, #108	; 0x6c
 800430c:	f7fd fcce 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004310:	20db      	movs	r0, #219	; 0xdb
 8004312:	f002 fe2b 	bl	8006f6c <putchar>
	gotoxy(108,43);
 8004316:	212b      	movs	r1, #43	; 0x2b
 8004318:	206c      	movs	r0, #108	; 0x6c
 800431a:	f7fd fcc7 	bl	8001cac <gotoxy>
	printf("%c",219);
 800431e:	20db      	movs	r0, #219	; 0xdb
 8004320:	f002 fe24 	bl	8006f6c <putchar>

	gotoxy(109,44);
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	206d      	movs	r0, #109	; 0x6d
 8004328:	f7fd fcc0 	bl	8001cac <gotoxy>
	printf("%c",220);
 800432c:	20dc      	movs	r0, #220	; 0xdc
 800432e:	f002 fe1d 	bl	8006f6c <putchar>

	gotoxy(112,44);
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	2070      	movs	r0, #112	; 0x70
 8004336:	f7fd fcb9 	bl	8001cac <gotoxy>
	printf("%c",219);
 800433a:	20db      	movs	r0, #219	; 0xdb
 800433c:	f002 fe16 	bl	8006f6c <putchar>

	gotoxy(113,44);
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	2071      	movs	r0, #113	; 0x71
 8004344:	f7fd fcb2 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004348:	20dc      	movs	r0, #220	; 0xdc
 800434a:	f002 fe0f 	bl	8006f6c <putchar>

	gotoxy(114,44);
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	2072      	movs	r0, #114	; 0x72
 8004352:	f7fd fcab 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004356:	20db      	movs	r0, #219	; 0xdb
 8004358:	f002 fe08 	bl	8006f6c <putchar>
	gotoxy(114,43);
 800435c:	212b      	movs	r1, #43	; 0x2b
 800435e:	2072      	movs	r0, #114	; 0x72
 8004360:	f7fd fca4 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004364:	20db      	movs	r0, #219	; 0xdb
 8004366:	f002 fe01 	bl	8006f6c <putchar>

	gotoxy(115,44);
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	2073      	movs	r0, #115	; 0x73
 800436e:	f7fd fc9d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004372:	20db      	movs	r0, #219	; 0xdb
 8004374:	f002 fdfa 	bl	8006f6c <putchar>

	gotoxy(120,44);
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	2078      	movs	r0, #120	; 0x78
 800437c:	f7fd fc96 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004380:	202f      	movs	r0, #47	; 0x2f
 8004382:	f002 fdf3 	bl	8006f6c <putchar>
	gotoxy(121,43);
 8004386:	212b      	movs	r1, #43	; 0x2b
 8004388:	2079      	movs	r0, #121	; 0x79
 800438a:	f7fd fc8f 	bl	8001cac <gotoxy>
	printf("%c",47);
 800438e:	202f      	movs	r0, #47	; 0x2f
 8004390:	f002 fdec 	bl	8006f6c <putchar>
	gotoxy(122,43);
 8004394:	212b      	movs	r1, #43	; 0x2b
 8004396:	207a      	movs	r0, #122	; 0x7a
 8004398:	f7fd fc88 	bl	8001cac <gotoxy>
	printf("%c",223);
 800439c:	20df      	movs	r0, #223	; 0xdf
 800439e:	f002 fde5 	bl	8006f6c <putchar>
	gotoxy(122,42);
 80043a2:	212a      	movs	r1, #42	; 0x2a
 80043a4:	207a      	movs	r0, #122	; 0x7a
 80043a6:	f7fd fc81 	bl	8001cac <gotoxy>
	printf("%c",168);
 80043aa:	20a8      	movs	r0, #168	; 0xa8
 80043ac:	f002 fdde 	bl	8006f6c <putchar>
	gotoxy(123,43);
 80043b0:	212b      	movs	r1, #43	; 0x2b
 80043b2:	207b      	movs	r0, #123	; 0x7b
 80043b4:	f7fd fc7a 	bl	8001cac <gotoxy>
	printf("%c",92);
 80043b8:	205c      	movs	r0, #92	; 0x5c
 80043ba:	f002 fdd7 	bl	8006f6c <putchar>
	gotoxy(124,44);
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	207c      	movs	r0, #124	; 0x7c
 80043c2:	f7fd fc73 	bl	8001cac <gotoxy>
	printf("%c",92);
 80043c6:	205c      	movs	r0, #92	; 0x5c
 80043c8:	f002 fdd0 	bl	8006f6c <putchar>

	gotoxy(127,44);
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	207f      	movs	r0, #127	; 0x7f
 80043d0:	f7fd fc6c 	bl	8001cac <gotoxy>
	printf("%c",219);
 80043d4:	20db      	movs	r0, #219	; 0xdb
 80043d6:	f002 fdc9 	bl	8006f6c <putchar>
	gotoxy(127,43);
 80043da:	212b      	movs	r1, #43	; 0x2b
 80043dc:	207f      	movs	r0, #127	; 0x7f
 80043de:	f7fd fc65 	bl	8001cac <gotoxy>
	printf("%c",219);
 80043e2:	20db      	movs	r0, #219	; 0xdb
 80043e4:	f002 fdc2 	bl	8006f6c <putchar>
	gotoxy(127,42);
 80043e8:	212a      	movs	r1, #42	; 0x2a
 80043ea:	207f      	movs	r0, #127	; 0x7f
 80043ec:	f7fd fc5e 	bl	8001cac <gotoxy>
	printf("%c",219);
 80043f0:	20db      	movs	r0, #219	; 0xdb
 80043f2:	f002 fdbb 	bl	8006f6c <putchar>

	gotoxy(129,44);
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	2081      	movs	r0, #129	; 0x81
 80043fa:	f7fd fc57 	bl	8001cac <gotoxy>
	printf("%c",219);
 80043fe:	20db      	movs	r0, #219	; 0xdb
 8004400:	f002 fdb4 	bl	8006f6c <putchar>
	gotoxy(129,43);
 8004404:	212b      	movs	r1, #43	; 0x2b
 8004406:	2081      	movs	r0, #129	; 0x81
 8004408:	f7fd fc50 	bl	8001cac <gotoxy>
	printf("%c",220);
 800440c:	20dc      	movs	r0, #220	; 0xdc
 800440e:	f002 fdad 	bl	8006f6c <putchar>

	gotoxy(130,44);
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	2082      	movs	r0, #130	; 0x82
 8004416:	f7fd fc49 	bl	8001cac <gotoxy>
	printf("%c",219);
 800441a:	20db      	movs	r0, #219	; 0xdb
 800441c:	f002 fda6 	bl	8006f6c <putchar>

	gotoxy(131,44);
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	2083      	movs	r0, #131	; 0x83
 8004424:	f7fd fc42 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004428:	20dc      	movs	r0, #220	; 0xdc
 800442a:	f002 fd9f 	bl	8006f6c <putchar>

	gotoxy(132,44);
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	2084      	movs	r0, #132	; 0x84
 8004432:	f7fd fc3b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004436:	20db      	movs	r0, #219	; 0xdb
 8004438:	f002 fd98 	bl	8006f6c <putchar>

	gotoxy(133,44);
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	2085      	movs	r0, #133	; 0x85
 8004440:	f7fd fc34 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004444:	20db      	movs	r0, #219	; 0xdb
 8004446:	f002 fd91 	bl	8006f6c <putchar>
	gotoxy(133,43);
 800444a:	212b      	movs	r1, #43	; 0x2b
 800444c:	2085      	movs	r0, #133	; 0x85
 800444e:	f7fd fc2d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004452:	20db      	movs	r0, #219	; 0xdb
 8004454:	f002 fd8a 	bl	8006f6c <putchar>

	gotoxy(134,44);
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	2086      	movs	r0, #134	; 0x86
 800445c:	f7fd fc26 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004460:	20db      	movs	r0, #219	; 0xdb
 8004462:	f002 fd83 	bl	8006f6c <putchar>

	gotoxy(135,44);
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	2087      	movs	r0, #135	; 0x87
 800446a:	f7fd fc1f 	bl	8001cac <gotoxy>
	printf("%c",220);
 800446e:	20dc      	movs	r0, #220	; 0xdc
 8004470:	f002 fd7c 	bl	8006f6c <putchar>

	gotoxy(137,44);
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	2089      	movs	r0, #137	; 0x89
 8004478:	f7fd fc18 	bl	8001cac <gotoxy>
	printf("%c",220);
 800447c:	20dc      	movs	r0, #220	; 0xdc
 800447e:	f002 fd75 	bl	8006f6c <putchar>

	gotoxy(139,44);
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	208b      	movs	r0, #139	; 0x8b
 8004486:	f7fd fc11 	bl	8001cac <gotoxy>
	printf("%c",220);
 800448a:	20dc      	movs	r0, #220	; 0xdc
 800448c:	f002 fd6e 	bl	8006f6c <putchar>

	gotoxy(141,44);
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	208d      	movs	r0, #141	; 0x8d
 8004494:	f7fd fc0a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004498:	20db      	movs	r0, #219	; 0xdb
 800449a:	f002 fd67 	bl	8006f6c <putchar>

	gotoxy(142,44);
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	208e      	movs	r0, #142	; 0x8e
 80044a2:	f7fd fc03 	bl	8001cac <gotoxy>
	printf("%c",220);
 80044a6:	20dc      	movs	r0, #220	; 0xdc
 80044a8:	f002 fd60 	bl	8006f6c <putchar>
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <drawScore>:
/**
  * @brief Writes the score and level at top right level of screen
  * @param  the current state of the game
  * @retval None
  */
void drawScore(gameState_t* gameState){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	gotoxy(135, 0);
 80044b8:	2100      	movs	r1, #0
 80044ba:	2087      	movs	r0, #135	; 0x87
 80044bc:	f7fd fbf6 	bl	8001cac <gotoxy>
	printf("Your score is: %d", gameState->score);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	4619      	mov	r1, r3
 80044c6:	480d      	ldr	r0, [pc, #52]	; (80044fc <drawScore+0x4c>)
 80044c8:	f002 fd38 	bl	8006f3c <iprintf>
	gotoxy(135,1*yScale);
 80044cc:	2102      	movs	r1, #2
 80044ce:	2087      	movs	r0, #135	; 0x87
 80044d0:	f7fd fbec 	bl	8001cac <gotoxy>
	printf("Level: %d", gameState->score/100 + gameState->difficulty);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	4a09      	ldr	r2, [pc, #36]	; (8004500 <drawScore+0x50>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	4413      	add	r3, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4805      	ldr	r0, [pc, #20]	; (8004504 <drawScore+0x54>)
 80044f0:	f002 fd24 	bl	8006f3c <iprintf>
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	08008218 	.word	0x08008218
 8004500:	51eb851f 	.word	0x51eb851f
 8004504:	0800822c 	.word	0x0800822c

08004508 <drawMe>:
/**
  * @brief Draws the player at some coordinates
  * @param  X: x-coordinate, Y: y-coordinate
  * @retval None
  */
void drawMe(uint8_t X, uint8_t Y){
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	460a      	mov	r2, r1
 8004512:	71fb      	strb	r3, [r7, #7]
 8004514:	4613      	mov	r3, r2
 8004516:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	79ba      	ldrb	r2, [r7, #6]
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fbc4 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004524:	20db      	movs	r0, #219	; 0xdb
 8004526:	f002 fd21 	bl	8006f6c <putchar>
	gotoxy(X-1,Y);
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	3b01      	subs	r3, #1
 800452e:	79ba      	ldrb	r2, [r7, #6]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fbba 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004538:	20dc      	movs	r0, #220	; 0xdc
 800453a:	f002 fd17 	bl	8006f6c <putchar>
	gotoxy(X+1,Y);
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	3301      	adds	r3, #1
 8004542:	79ba      	ldrb	r2, [r7, #6]
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd fbb0 	bl	8001cac <gotoxy>
	printf("%c",220);
 800454c:	20dc      	movs	r0, #220	; 0xdc
 800454e:	f002 fd0d 	bl	8006f6c <putchar>
	gotoxy(X-1,Y+1);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	79bb      	ldrb	r3, [r7, #6]
 8004558:	3301      	adds	r3, #1
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fd fba5 	bl	8001cac <gotoxy>
	printf("%c",223);
 8004562:	20df      	movs	r0, #223	; 0xdf
 8004564:	f002 fd02 	bl	8006f6c <putchar>
	gotoxy(X+1,Y+1);
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	79bb      	ldrb	r3, [r7, #6]
 800456e:	3301      	adds	r3, #1
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fd fb9a 	bl	8001cac <gotoxy>
	printf("%c",223);
 8004578:	20df      	movs	r0, #223	; 0xdf
 800457a:	f002 fcf7 	bl	8006f6c <putchar>
	gotoxy(X,Y-1);
 800457e:	79fa      	ldrb	r2, [r7, #7]
 8004580:	79bb      	ldrb	r3, [r7, #6]
 8004582:	3b01      	subs	r3, #1
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fd fb90 	bl	8001cac <gotoxy>
	printf("%c",179);
 800458c:	20b3      	movs	r0, #179	; 0xb3
 800458e:	f002 fced 	bl	8006f6c <putchar>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <deleteMe>:
/**
  * @brief Erases the player at some coordinates
  * @param  X: x-coordinate, Y: y-coordinate
  * @retval None
  */
void deleteMe(uint8_t X, uint8_t Y){
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	460a      	mov	r2, r1
 80045a4:	71fb      	strb	r3, [r7, #7]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	79ba      	ldrb	r2, [r7, #6]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fb7b 	bl	8001cac <gotoxy>
	printf(" ");
 80045b6:	2020      	movs	r0, #32
 80045b8:	f002 fcd8 	bl	8006f6c <putchar>
	gotoxy(X-1,Y);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	3b01      	subs	r3, #1
 80045c0:	79ba      	ldrb	r2, [r7, #6]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fd fb71 	bl	8001cac <gotoxy>
	printf(" ");
 80045ca:	2020      	movs	r0, #32
 80045cc:	f002 fcce 	bl	8006f6c <putchar>
	gotoxy(X+1,Y);
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	3301      	adds	r3, #1
 80045d4:	79ba      	ldrb	r2, [r7, #6]
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd fb67 	bl	8001cac <gotoxy>
	printf(" ");
 80045de:	2020      	movs	r0, #32
 80045e0:	f002 fcc4 	bl	8006f6c <putchar>
	gotoxy(X-1,Y+1);
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	1e5a      	subs	r2, r3, #1
 80045e8:	79bb      	ldrb	r3, [r7, #6]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fd fb5c 	bl	8001cac <gotoxy>
	printf(" ");
 80045f4:	2020      	movs	r0, #32
 80045f6:	f002 fcb9 	bl	8006f6c <putchar>
	gotoxy(X+1,Y+1);
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	79bb      	ldrb	r3, [r7, #6]
 8004600:	3301      	adds	r3, #1
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7fd fb51 	bl	8001cac <gotoxy>
	printf(" ");
 800460a:	2020      	movs	r0, #32
 800460c:	f002 fcae 	bl	8006f6c <putchar>

	gotoxy(X,Y-1);
 8004610:	79fa      	ldrb	r2, [r7, #7]
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	3b01      	subs	r3, #1
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fd fb47 	bl	8001cac <gotoxy>
	printf(" ");
 800461e:	2020      	movs	r0, #32
 8004620:	f002 fca4 	bl	8006f6c <putchar>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <drawAttachmentRods>:
/**
  * @brief Draws the attachments for the player
  * @param  X: x-coordinate of player, Y: y-coordinate of player
  * @retval None
  */
void drawAttachmentRods(uint8_t x, uint8_t y){
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	460a      	mov	r2, r1
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	4613      	mov	r3, r2
 800463a:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	3302      	adds	r3, #2
 8004640:	79ba      	ldrb	r2, [r7, #6]
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f7fd fb31 	bl	8001cac <gotoxy>
	printf("____");
 800464a:	4808      	ldr	r0, [pc, #32]	; (800466c <drawAttachmentRods+0x40>)
 800464c:	f002 fc76 	bl	8006f3c <iprintf>
	gotoxy(x-5, y);
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	3b05      	subs	r3, #5
 8004654:	79ba      	ldrb	r2, [r7, #6]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7fd fb27 	bl	8001cac <gotoxy>
	printf("____");
 800465e:	4803      	ldr	r0, [pc, #12]	; (800466c <drawAttachmentRods+0x40>)
 8004660:	f002 fc6c 	bl	8006f3c <iprintf>
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	08008238 	.word	0x08008238

08004670 <deleteAttachmentRods>:
/**
  * @brief Deletes the attachments for the player
  * @param  X: x-coordinate of player, Y: y-coordinate of player
  * @retval None
  */
void deleteAttachmentRods(uint8_t x, uint8_t y){
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	460a      	mov	r2, r1
 800467a:	71fb      	strb	r3, [r7, #7]
 800467c:	4613      	mov	r3, r2
 800467e:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	3302      	adds	r3, #2
 8004684:	79ba      	ldrb	r2, [r7, #6]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd fb0f 	bl	8001cac <gotoxy>
	printf("    ");
 800468e:	4808      	ldr	r0, [pc, #32]	; (80046b0 <deleteAttachmentRods+0x40>)
 8004690:	f002 fc54 	bl	8006f3c <iprintf>
	gotoxy(x-5, y);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	3b05      	subs	r3, #5
 8004698:	79ba      	ldrb	r2, [r7, #6]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb05 	bl	8001cac <gotoxy>
	printf("    ");
 80046a2:	4803      	ldr	r0, [pc, #12]	; (80046b0 <deleteAttachmentRods+0x40>)
 80046a4:	f002 fc4a 	bl	8006f3c <iprintf>
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08008240 	.word	0x08008240

080046b4 <deletePowerupGraphics>:
/**
  * @brief Deletes the powerup
  * @param  X: x-coordinate of the powerup, Y: y-coordinate of the powerup
  * @retval None
  */
void deletePowerupGraphics(uint8_t x, uint8_t y){
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	460a      	mov	r2, r1
 80046be:	71fb      	strb	r3, [r7, #7]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	79ba      	ldrb	r2, [r7, #6]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd faee 	bl	8001cac <gotoxy>
	printf("     ");
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <deletePowerupGraphics+0x54>)
 80046d2:	f002 fc33 	bl	8006f3c <iprintf>
	gotoxy(x, y+1);
 80046d6:	79fa      	ldrb	r2, [r7, #7]
 80046d8:	79bb      	ldrb	r3, [r7, #6]
 80046da:	3301      	adds	r3, #1
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fd fae4 	bl	8001cac <gotoxy>
	printf("     ");
 80046e4:	4808      	ldr	r0, [pc, #32]	; (8004708 <deletePowerupGraphics+0x54>)
 80046e6:	f002 fc29 	bl	8006f3c <iprintf>
	gotoxy(x, y+2);
 80046ea:	79fa      	ldrb	r2, [r7, #7]
 80046ec:	79bb      	ldrb	r3, [r7, #6]
 80046ee:	3302      	adds	r3, #2
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fd fada 	bl	8001cac <gotoxy>
	printf("     ");
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <deletePowerupGraphics+0x54>)
 80046fa:	f002 fc1f 	bl	8006f3c <iprintf>

}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	08008248 	.word	0x08008248

0800470c <drawPowerupGraphics>:
/**
  * @brief Draws the powerup
  * @param  X: x-coordinate of the powerup, Y: y-coordinate of the powerup
  * @retval None
  */
void drawPowerupGraphics(uint8_t x, uint8_t y){
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b085      	sub	sp, #20
 8004710:	af02      	add	r7, sp, #8
 8004712:	4603      	mov	r3, r0
 8004714:	460a      	mov	r2, r1
 8004716:	71fb      	strb	r3, [r7, #7]
 8004718:	4613      	mov	r3, r2
 800471a:	71bb      	strb	r3, [r7, #6]
 fgcolor(2);
 800471c:	2002      	movs	r0, #2
 800471e:	f7fd fa99 	bl	8001c54 <fgcolor>
 drawBox(x, y, x+4, y+2, 1);
 8004722:	79f8      	ldrb	r0, [r7, #7]
 8004724:	79b9      	ldrb	r1, [r7, #6]
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	1d1a      	adds	r2, r3, #4
 800472a:	79bb      	ldrb	r3, [r7, #6]
 800472c:	3302      	adds	r3, #2
 800472e:	2401      	movs	r4, #1
 8004730:	9400      	str	r4, [sp, #0]
 8004732:	f7fd facd 	bl	8001cd0 <drawBox>
 gotoxy(x+2, y+1);
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	79bb      	ldrb	r3, [r7, #6]
 800473c:	3301      	adds	r3, #1
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fd fab3 	bl	8001cac <gotoxy>
 printf("?");
 8004746:	203f      	movs	r0, #63	; 0x3f
 8004748:	f002 fc10 	bl	8006f6c <putchar>
 fgcolor(15);
 800474c:	200f      	movs	r0, #15
 800474e:	f7fd fa81 	bl	8001c54 <fgcolor>
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
	...

0800475c <drawNuke>:
/**
  * @brief Draws the nuke
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawNuke(gameState_t* gameState){
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	7e1b      	ldrb	r3, [r3, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 80a2 	bne.w	80048b4 <drawNuke+0x158>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe ffba 	bl	80036f0 <fpToInt>
 800477c:	4603      	mov	r3, r0
 800477e:	461c      	mov	r4, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe ffb2 	bl	80036f0 <fpToInt>
 800478c:	4603      	mov	r3, r0
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	b29b      	uxth	r3, r3
 8004792:	4619      	mov	r1, r3
 8004794:	4620      	mov	r0, r4
 8004796:	f7fd fa89 	bl	8001cac <gotoxy>
		printf("     ");
 800479a:	4848      	ldr	r0, [pc, #288]	; (80048bc <drawNuke+0x160>)
 800479c:	f002 fbce 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe ffa2 	bl	80036f0 <fpToInt>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461c      	mov	r4, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe ff9a 	bl	80036f0 <fpToInt>
 80047bc:	4603      	mov	r3, r0
 80047be:	3302      	adds	r3, #2
 80047c0:	0fda      	lsrs	r2, r3, #31
 80047c2:	4413      	add	r3, r2
 80047c4:	105b      	asrs	r3, r3, #1
 80047c6:	4619      	mov	r1, r3
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7fd fa6f 	bl	8001cac <gotoxy>
		printf("     ");
 80047ce:	483b      	ldr	r0, [pc, #236]	; (80048bc <drawNuke+0x160>)
 80047d0:	f002 fbb4 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe ff88 	bl	80036f0 <fpToInt>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461c      	mov	r4, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ff80 	bl	80036f0 <fpToInt>
 80047f0:	4603      	mov	r3, r0
 80047f2:	3304      	adds	r3, #4
 80047f4:	0fda      	lsrs	r2, r3, #31
 80047f6:	4413      	add	r3, r2
 80047f8:	105b      	asrs	r3, r3, #1
 80047fa:	4619      	mov	r1, r3
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7fd fa55 	bl	8001cac <gotoxy>
		printf("     ");
 8004802:	482e      	ldr	r0, [pc, #184]	; (80048bc <drawNuke+0x160>)
 8004804:	f002 fb9a 	bl	8006f3c <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe ff6e 	bl	80036f0 <fpToInt>
 8004814:	4603      	mov	r3, r0
 8004816:	461c      	mov	r4, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe ff66 	bl	80036f0 <fpToInt>
 8004824:	4603      	mov	r3, r0
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	4620      	mov	r0, r4
 800482e:	f7fd fa3d 	bl	8001cac <gotoxy>
		printf("  |  ");
 8004832:	4823      	ldr	r0, [pc, #140]	; (80048c0 <drawNuke+0x164>)
 8004834:	f002 fb82 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe ff56 	bl	80036f0 <fpToInt>
 8004844:	4603      	mov	r3, r0
 8004846:	461c      	mov	r4, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe ff4e 	bl	80036f0 <fpToInt>
 8004854:	4603      	mov	r3, r0
 8004856:	3302      	adds	r3, #2
 8004858:	0fda      	lsrs	r2, r3, #31
 800485a:	4413      	add	r3, r2
 800485c:	105b      	asrs	r3, r3, #1
 800485e:	4619      	mov	r1, r3
 8004860:	4620      	mov	r0, r4
 8004862:	f7fd fa23 	bl	8001cac <gotoxy>
		printf("- o -");
 8004866:	4817      	ldr	r0, [pc, #92]	; (80048c4 <drawNuke+0x168>)
 8004868:	f002 fb68 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe ff3c 	bl	80036f0 <fpToInt>
 8004878:	4603      	mov	r3, r0
 800487a:	461c      	mov	r4, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe ff34 	bl	80036f0 <fpToInt>
 8004888:	4603      	mov	r3, r0
 800488a:	3304      	adds	r3, #4
 800488c:	0fda      	lsrs	r2, r3, #31
 800488e:	4413      	add	r3, r2
 8004890:	105b      	asrs	r3, r3, #1
 8004892:	4619      	mov	r1, r3
 8004894:	4620      	mov	r0, r4
 8004896:	f7fd fa09 	bl	8001cac <gotoxy>
		printf(" / %c ", 92);
 800489a:	215c      	movs	r1, #92	; 0x5c
 800489c:	480a      	ldr	r0, [pc, #40]	; (80048c8 <drawNuke+0x16c>)
 800489e:	f002 fb4d 	bl	8006f3c <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048aa:	3308      	adds	r3, #8
 80048ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048b0:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	08008248 	.word	0x08008248
 80048c0:	08008250 	.word	0x08008250
 80048c4:	08008258 	.word	0x08008258
 80048c8:	08008260 	.word	0x08008260

080048cc <drawNukeCircle>:
/**
  * @brief Draws the nuke eksploson
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawNukeCircle(gameState_t* gameState){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe ff08 	bl	80036f0 <fpToInt>
 80048e0:	4603      	mov	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe ff00 	bl	80036f0 <fpToInt>
 80048f0:	4603      	mov	r3, r0
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3b0f      	subs	r3, #15
 80048fc:	461a      	mov	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3b07      	subs	r3, #7
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fd f9d1 	bl	8001cac <gotoxy>
	printf("              ___-------___               \n");
 800490a:	4875      	ldr	r0, [pc, #468]	; (8004ae0 <drawNukeCircle+0x214>)
 800490c:	f002 fbb2 	bl	8007074 <puts>
	gotoxy(x-15, y-6);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b0f      	subs	r3, #15
 8004914:	461a      	mov	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3b06      	subs	r3, #6
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7fd f9c5 	bl	8001cac <gotoxy>
	printf("           __-             -__            \n");
 8004922:	4870      	ldr	r0, [pc, #448]	; (8004ae4 <drawNukeCircle+0x218>)
 8004924:	f002 fba6 	bl	8007074 <puts>
	gotoxy(x-15, y-5);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b0f      	subs	r3, #15
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3b05      	subs	r3, #5
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fd f9b9 	bl	8001cac <gotoxy>
	printf("         _-                   -_          \n");
 800493a:	486b      	ldr	r0, [pc, #428]	; (8004ae8 <drawNukeCircle+0x21c>)
 800493c:	f002 fb9a 	bl	8007074 <puts>
	gotoxy(x-15, y-4);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b0f      	subs	r3, #15
 8004944:	461a      	mov	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3b04      	subs	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7fd f9ad 	bl	8001cac <gotoxy>
	printf("       _-                       -_        \n");
 8004952:	4866      	ldr	r0, [pc, #408]	; (8004aec <drawNukeCircle+0x220>)
 8004954:	f002 fb8e 	bl	8007074 <puts>
	gotoxy(x-15, y-3);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3b0f      	subs	r3, #15
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3b03      	subs	r3, #3
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fd f9a1 	bl	8001cac <gotoxy>
	printf("     _-                            -_     \n");
 800496a:	4861      	ldr	r0, [pc, #388]	; (8004af0 <drawNukeCircle+0x224>)
 800496c:	f002 fb82 	bl	8007074 <puts>
	gotoxy(x-15, y-2);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3b0f      	subs	r3, #15
 8004974:	461a      	mov	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3b02      	subs	r3, #2
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f7fd f995 	bl	8001cac <gotoxy>
	printf("   _-                                -_   \n");
 8004982:	485c      	ldr	r0, [pc, #368]	; (8004af4 <drawNukeCircle+0x228>)
 8004984:	f002 fb76 	bl	8007074 <puts>
	gotoxy(x-15, y-1);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b0f      	subs	r3, #15
 800498c:	461a      	mov	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3b01      	subs	r3, #1
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fd f989 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 800499a:	4857      	ldr	r0, [pc, #348]	; (8004af8 <drawNukeCircle+0x22c>)
 800499c:	f002 fb6a 	bl	8007074 <puts>
	gotoxy(x-15, y);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b0f      	subs	r3, #15
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fd f97e 	bl	8001cac <gotoxy>
	printf("_-                                      -_\n");
 80049b0:	4852      	ldr	r0, [pc, #328]	; (8004afc <drawNukeCircle+0x230>)
 80049b2:	f002 fb5f 	bl	8007074 <puts>
	gotoxy(x-15, y+1);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b0f      	subs	r3, #15
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3301      	adds	r3, #1
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7fd f972 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 80049c8:	484d      	ldr	r0, [pc, #308]	; (8004b00 <drawNukeCircle+0x234>)
 80049ca:	f002 fb53 	bl	8007074 <puts>
	gotoxy(x-15, y+2);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b0f      	subs	r3, #15
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3302      	adds	r3, #2
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fd f966 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 80049e0:	4847      	ldr	r0, [pc, #284]	; (8004b00 <drawNukeCircle+0x234>)
 80049e2:	f002 fb47 	bl	8007074 <puts>
	gotoxy(x-15, y+3);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b0f      	subs	r3, #15
 80049ea:	461a      	mov	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3303      	adds	r3, #3
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fd f95a 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 80049f8:	4841      	ldr	r0, [pc, #260]	; (8004b00 <drawNukeCircle+0x234>)
 80049fa:	f002 fb3b 	bl	8007074 <puts>
	gotoxy(x-15, y+4);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b0f      	subs	r3, #15
 8004a02:	461a      	mov	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fd f94e 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 8004a10:	483b      	ldr	r0, [pc, #236]	; (8004b00 <drawNukeCircle+0x234>)
 8004a12:	f002 fb2f 	bl	8007074 <puts>
	gotoxy(x-15, y+5);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b0f      	subs	r3, #15
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3305      	adds	r3, #5
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7fd f942 	bl	8001cac <gotoxy>
	printf("-_                                      _-\n");
 8004a28:	4836      	ldr	r0, [pc, #216]	; (8004b04 <drawNukeCircle+0x238>)
 8004a2a:	f002 fb23 	bl	8007074 <puts>
	gotoxy(x-15, y+6);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b0f      	subs	r3, #15
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3306      	adds	r3, #6
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7fd f936 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 8004a40:	482d      	ldr	r0, [pc, #180]	; (8004af8 <drawNukeCircle+0x22c>)
 8004a42:	f002 fb17 	bl	8007074 <puts>
	gotoxy(x-15, y+7);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b0f      	subs	r3, #15
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3307      	adds	r3, #7
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fd f92a 	bl	8001cac <gotoxy>
	printf("   -_                                _-   \n");
 8004a58:	482b      	ldr	r0, [pc, #172]	; (8004b08 <drawNukeCircle+0x23c>)
 8004a5a:	f002 fb0b 	bl	8007074 <puts>
	gotoxy(x-15, y+8);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b0f      	subs	r3, #15
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3308      	adds	r3, #8
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fd f91e 	bl	8001cac <gotoxy>
	printf("     -_                            _-     \n");
 8004a70:	4826      	ldr	r0, [pc, #152]	; (8004b0c <drawNukeCircle+0x240>)
 8004a72:	f002 faff 	bl	8007074 <puts>
	gotoxy(x-15, y+9);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b0f      	subs	r3, #15
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3309      	adds	r3, #9
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fd f912 	bl	8001cac <gotoxy>
	printf("       -_                       _-        \n");
 8004a88:	4821      	ldr	r0, [pc, #132]	; (8004b10 <drawNukeCircle+0x244>)
 8004a8a:	f002 faf3 	bl	8007074 <puts>
	gotoxy(x-15, y+10);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3b0f      	subs	r3, #15
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	330a      	adds	r3, #10
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fd f906 	bl	8001cac <gotoxy>
	printf("         -_                   _-          \n");
 8004aa0:	481c      	ldr	r0, [pc, #112]	; (8004b14 <drawNukeCircle+0x248>)
 8004aa2:	f002 fae7 	bl	8007074 <puts>
	gotoxy(x-15, y+11);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b0f      	subs	r3, #15
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	330b      	adds	r3, #11
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f7fd f8fa 	bl	8001cac <gotoxy>
	printf("           -__             _--            \n");
 8004ab8:	4817      	ldr	r0, [pc, #92]	; (8004b18 <drawNukeCircle+0x24c>)
 8004aba:	f002 fadb 	bl	8007074 <puts>
	gotoxy(x-15, y+12);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b0f      	subs	r3, #15
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f7fd f8ee 	bl	8001cac <gotoxy>
	printf("              ---_______---               \n");
 8004ad0:	4812      	ldr	r0, [pc, #72]	; (8004b1c <drawNukeCircle+0x250>)
 8004ad2:	f002 facf 	bl	8007074 <puts>
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08008268 	.word	0x08008268
 8004ae4:	08008294 	.word	0x08008294
 8004ae8:	080082c0 	.word	0x080082c0
 8004aec:	080082ec 	.word	0x080082ec
 8004af0:	08008318 	.word	0x08008318
 8004af4:	08008344 	.word	0x08008344
 8004af8:	08008370 	.word	0x08008370
 8004afc:	0800839c 	.word	0x0800839c
 8004b00:	080083c8 	.word	0x080083c8
 8004b04:	080083f4 	.word	0x080083f4
 8004b08:	08008420 	.word	0x08008420
 8004b0c:	0800844c 	.word	0x0800844c
 8004b10:	08008478 	.word	0x08008478
 8004b14:	080084a4 	.word	0x080084a4
 8004b18:	080084d0 	.word	0x080084d0
 8004b1c:	080084fc 	.word	0x080084fc

08004b20 <clearNukeCircle>:
/**
  * @brief Clears the nuke eksploson
  * @param  gameState: the current state of the game
  * @retval None
  */
void clearNukeCircle(gameState_t* gameState){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fdde 	bl	80036f0 <fpToInt>
 8004b34:	4603      	mov	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fdd6 	bl	80036f0 <fpToInt>
 8004b44:	4603      	mov	r3, r0
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b0f      	subs	r3, #15
 8004b50:	461a      	mov	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3b07      	subs	r3, #7
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fd f8a7 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004b5e:	4875      	ldr	r0, [pc, #468]	; (8004d34 <clearNukeCircle+0x214>)
 8004b60:	f002 fa88 	bl	8007074 <puts>
	gotoxy(x-15, y-6);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b0f      	subs	r3, #15
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3b06      	subs	r3, #6
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fd f89b 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004b76:	486f      	ldr	r0, [pc, #444]	; (8004d34 <clearNukeCircle+0x214>)
 8004b78:	f002 fa7c 	bl	8007074 <puts>
	gotoxy(x-15, y-5);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b0f      	subs	r3, #15
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3b05      	subs	r3, #5
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fd f88f 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004b8e:	4869      	ldr	r0, [pc, #420]	; (8004d34 <clearNukeCircle+0x214>)
 8004b90:	f002 fa70 	bl	8007074 <puts>
	gotoxy(x-15, y-4);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b0f      	subs	r3, #15
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3b04      	subs	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fd f883 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004ba6:	4863      	ldr	r0, [pc, #396]	; (8004d34 <clearNukeCircle+0x214>)
 8004ba8:	f002 fa64 	bl	8007074 <puts>
	gotoxy(x-15, y-3);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3b0f      	subs	r3, #15
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3b03      	subs	r3, #3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fd f877 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004bbe:	485d      	ldr	r0, [pc, #372]	; (8004d34 <clearNukeCircle+0x214>)
 8004bc0:	f002 fa58 	bl	8007074 <puts>
	gotoxy(x-15, y-2);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3b0f      	subs	r3, #15
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3b02      	subs	r3, #2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fd f86b 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004bd6:	4857      	ldr	r0, [pc, #348]	; (8004d34 <clearNukeCircle+0x214>)
 8004bd8:	f002 fa4c 	bl	8007074 <puts>
	gotoxy(x-15, y-1);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3b0f      	subs	r3, #15
 8004be0:	461a      	mov	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7fd f85f 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004bee:	4851      	ldr	r0, [pc, #324]	; (8004d34 <clearNukeCircle+0x214>)
 8004bf0:	f002 fa40 	bl	8007074 <puts>
	gotoxy(x-15, y);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3b0f      	subs	r3, #15
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7fd f854 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c04:	484b      	ldr	r0, [pc, #300]	; (8004d34 <clearNukeCircle+0x214>)
 8004c06:	f002 fa35 	bl	8007074 <puts>
	gotoxy(x-15, y+1);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b0f      	subs	r3, #15
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7fd f848 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c1c:	4845      	ldr	r0, [pc, #276]	; (8004d34 <clearNukeCircle+0x214>)
 8004c1e:	f002 fa29 	bl	8007074 <puts>
	gotoxy(x-15, y+2);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3b0f      	subs	r3, #15
 8004c26:	461a      	mov	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fd f83c 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c34:	483f      	ldr	r0, [pc, #252]	; (8004d34 <clearNukeCircle+0x214>)
 8004c36:	f002 fa1d 	bl	8007074 <puts>
	gotoxy(x-15, y+3);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3b0f      	subs	r3, #15
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3303      	adds	r3, #3
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fd f830 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c4c:	4839      	ldr	r0, [pc, #228]	; (8004d34 <clearNukeCircle+0x214>)
 8004c4e:	f002 fa11 	bl	8007074 <puts>
	gotoxy(x-15, y+4);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3b0f      	subs	r3, #15
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f7fd f824 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c64:	4833      	ldr	r0, [pc, #204]	; (8004d34 <clearNukeCircle+0x214>)
 8004c66:	f002 fa05 	bl	8007074 <puts>
	gotoxy(x-15, y+5);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b0f      	subs	r3, #15
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	3305      	adds	r3, #5
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fd f818 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c7c:	482d      	ldr	r0, [pc, #180]	; (8004d34 <clearNukeCircle+0x214>)
 8004c7e:	f002 f9f9 	bl	8007074 <puts>
	gotoxy(x-15, y+6);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b0f      	subs	r3, #15
 8004c86:	461a      	mov	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	3306      	adds	r3, #6
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fd f80c 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004c94:	4827      	ldr	r0, [pc, #156]	; (8004d34 <clearNukeCircle+0x214>)
 8004c96:	f002 f9ed 	bl	8007074 <puts>
	gotoxy(x-15, y+7);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b0f      	subs	r3, #15
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7fd f800 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004cac:	4821      	ldr	r0, [pc, #132]	; (8004d34 <clearNukeCircle+0x214>)
 8004cae:	f002 f9e1 	bl	8007074 <puts>
	gotoxy(x-15, y+8);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b0f      	subs	r3, #15
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3308      	adds	r3, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f7fc fff4 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004cc4:	481b      	ldr	r0, [pc, #108]	; (8004d34 <clearNukeCircle+0x214>)
 8004cc6:	f002 f9d5 	bl	8007074 <puts>
	gotoxy(x-15, y+9);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b0f      	subs	r3, #15
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	3309      	adds	r3, #9
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f7fc ffe8 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004cdc:	4815      	ldr	r0, [pc, #84]	; (8004d34 <clearNukeCircle+0x214>)
 8004cde:	f002 f9c9 	bl	8007074 <puts>
	gotoxy(x-15, y+10);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b0f      	subs	r3, #15
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	330a      	adds	r3, #10
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fc ffdc 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004cf4:	480f      	ldr	r0, [pc, #60]	; (8004d34 <clearNukeCircle+0x214>)
 8004cf6:	f002 f9bd 	bl	8007074 <puts>
	gotoxy(x-15, y+11);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b0f      	subs	r3, #15
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	330b      	adds	r3, #11
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fc ffd0 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004d0c:	4809      	ldr	r0, [pc, #36]	; (8004d34 <clearNukeCircle+0x214>)
 8004d0e:	f002 f9b1 	bl	8007074 <puts>
	gotoxy(x-15, y+12);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b0f      	subs	r3, #15
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7fc ffc4 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004d24:	4803      	ldr	r0, [pc, #12]	; (8004d34 <clearNukeCircle+0x214>)
 8004d26:	f002 f9a5 	bl	8007074 <puts>
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	08008528 	.word	0x08008528

08004d38 <drawBossKey>:
/**
  * @brief Draws the bossKey screen
  * @param  None
  * @retval None
  */
void drawBossKey(){
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 8004d3c:	481e      	ldr	r0, [pc, #120]	; (8004db8 <drawBossKey+0x80>)
 8004d3e:	f002 f999 	bl	8007074 <puts>
	printf("	char c = uart_get_char();\n");
 8004d42:	481e      	ldr	r0, [pc, #120]	; (8004dbc <drawBossKey+0x84>)
 8004d44:	f002 f996 	bl	8007074 <puts>
	printf("	if(c == 'f'){\n");
 8004d48:	481d      	ldr	r0, [pc, #116]	; (8004dc0 <drawBossKey+0x88>)
 8004d4a:	f002 f993 	bl	8007074 <puts>
	printf("		if(gameState->bossMode == 0){\n");
 8004d4e:	481d      	ldr	r0, [pc, #116]	; (8004dc4 <drawBossKey+0x8c>)
 8004d50:	f002 f990 	bl	8007074 <puts>
	printf("			clrscr();\n");
 8004d54:	481c      	ldr	r0, [pc, #112]	; (8004dc8 <drawBossKey+0x90>)
 8004d56:	f002 f98d 	bl	8007074 <puts>
	printf("			gameState->bossMode = 1;\n");
 8004d5a:	481c      	ldr	r0, [pc, #112]	; (8004dcc <drawBossKey+0x94>)
 8004d5c:	f002 f98a 	bl	8007074 <puts>
	printf("		}else{\n");
 8004d60:	481b      	ldr	r0, [pc, #108]	; (8004dd0 <drawBossKey+0x98>)
 8004d62:	f002 f987 	bl	8007074 <puts>
	printf("			gameState->bossMode = 0;\n");
 8004d66:	481b      	ldr	r0, [pc, #108]	; (8004dd4 <drawBossKey+0x9c>)
 8004d68:	f002 f984 	bl	8007074 <puts>
	printf("			return 2;\n");
 8004d6c:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <drawBossKey+0xa0>)
 8004d6e:	f002 f981 	bl	8007074 <puts>
	printf("		}\n");
 8004d72:	481a      	ldr	r0, [pc, #104]	; (8004ddc <drawBossKey+0xa4>)
 8004d74:	f002 f97e 	bl	8007074 <puts>
	printf("	}\n");
 8004d78:	4819      	ldr	r0, [pc, #100]	; (8004de0 <drawBossKey+0xa8>)
 8004d7a:	f002 f97b 	bl	8007074 <puts>
	printf("\n");
 8004d7e:	200a      	movs	r0, #10
 8004d80:	f002 f8f4 	bl	8006f6c <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 8004d84:	4817      	ldr	r0, [pc, #92]	; (8004de4 <drawBossKey+0xac>)
 8004d86:	f002 f975 	bl	8007074 <puts>
	printf("		gotoxy(0,0);\n");
 8004d8a:	4817      	ldr	r0, [pc, #92]	; (8004de8 <drawBossKey+0xb0>)
 8004d8c:	f002 f972 	bl	8007074 <puts>
	printf("		drawBossKey();\n");
 8004d90:	4816      	ldr	r0, [pc, #88]	; (8004dec <drawBossKey+0xb4>)
 8004d92:	f002 f96f 	bl	8007074 <puts>
	printf("		return 1;\n");
 8004d96:	4816      	ldr	r0, [pc, #88]	; (8004df0 <drawBossKey+0xb8>)
 8004d98:	f002 f96c 	bl	8007074 <puts>
	printf("	}\n");
 8004d9c:	4810      	ldr	r0, [pc, #64]	; (8004de0 <drawBossKey+0xa8>)
 8004d9e:	f002 f969 	bl	8007074 <puts>
	printf("	return 0;\n");
 8004da2:	4814      	ldr	r0, [pc, #80]	; (8004df4 <drawBossKey+0xbc>)
 8004da4:	f002 f966 	bl	8007074 <puts>
	printf("	uart_clear();\n");
 8004da8:	4813      	ldr	r0, [pc, #76]	; (8004df8 <drawBossKey+0xc0>)
 8004daa:	f002 f963 	bl	8007074 <puts>
	printf("}\n");
 8004dae:	4813      	ldr	r0, [pc, #76]	; (8004dfc <drawBossKey+0xc4>)
 8004db0:	f002 f960 	bl	8007074 <puts>
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08008554 	.word	0x08008554
 8004dbc:	0800857c 	.word	0x0800857c
 8004dc0:	08008598 	.word	0x08008598
 8004dc4:	080085a8 	.word	0x080085a8
 8004dc8:	080085c8 	.word	0x080085c8
 8004dcc:	080085d8 	.word	0x080085d8
 8004dd0:	080085f4 	.word	0x080085f4
 8004dd4:	08008600 	.word	0x08008600
 8004dd8:	0800861c 	.word	0x0800861c
 8004ddc:	0800862c 	.word	0x0800862c
 8004de0:	08008630 	.word	0x08008630
 8004de4:	08008634 	.word	0x08008634
 8004de8:	08008654 	.word	0x08008654
 8004dec:	08008664 	.word	0x08008664
 8004df0:	08008678 	.word	0x08008678
 8004df4:	08008684 	.word	0x08008684
 8004df8:	08008690 	.word	0x08008690
 8004dfc:	080086a0 	.word	0x080086a0

08004e00 <drawDropper>:

void drawDropper(gameState_t* gameState){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	uint32_t X = fpToInt(gameState->dropper.nextposition.x);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe fc6f 	bl	80036f0 <fpToInt>
 8004e12:	4603      	mov	r3, r0
 8004e14:	60fb      	str	r3, [r7, #12]
	uint32_t Y = fpToInt(gameState->dropper.nextposition.y)/yScale;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fc68 	bl	80036f0 <fpToInt>
 8004e20:	4603      	mov	r3, r0
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	60bb      	str	r3, [r7, #8]
	fgcolor(2);
 8004e28:	2002      	movs	r0, #2
 8004e2a:	f7fc ff13 	bl	8001c54 <fgcolor>
	gotoxy(X+1,Y);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fc ff37 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004e3e:	205f      	movs	r0, #95	; 0x5f
 8004e40:	f002 f894 	bl	8006f6c <putchar>
	gotoxy(X+2,Y);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3302      	adds	r3, #2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f7fc ff2c 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004e54:	205f      	movs	r0, #95	; 0x5f
 8004e56:	f002 f889 	bl	8006f6c <putchar>
	gotoxy(X+3,Y);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3303      	adds	r3, #3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7fc ff21 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004e6a:	205f      	movs	r0, #95	; 0x5f
 8004e6c:	f002 f87e 	bl	8006f6c <putchar>
	gotoxy(X+4,Y);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3304      	adds	r3, #4
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f7fc ff16 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004e80:	205f      	movs	r0, #95	; 0x5f
 8004e82:	f002 f873 	bl	8006f6c <putchar>
	gotoxy(X+5,Y);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3305      	adds	r3, #5
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fc ff0b 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004e96:	205f      	movs	r0, #95	; 0x5f
 8004e98:	f002 f868 	bl	8006f6c <putchar>

	gotoxy(X,Y);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fc ff02 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004ea8:	202f      	movs	r0, #47	; 0x2f
 8004eaa:	f002 f85f 	bl	8006f6c <putchar>
	gotoxy(X+6,Y);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3306      	adds	r3, #6
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fc fef7 	bl	8001cac <gotoxy>
	printf("%c",92);
 8004ebe:	205c      	movs	r0, #92	; 0x5c
 8004ec0:	f002 f854 	bl	8006f6c <putchar>

	gotoxy(X+1,Y-1);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fc feeb 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004ed6:	205f      	movs	r0, #95	; 0x5f
 8004ed8:	f002 f848 	bl	8006f6c <putchar>
	gotoxy(X+2,Y-1);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3302      	adds	r3, #2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fc fedf 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004eee:	205f      	movs	r0, #95	; 0x5f
 8004ef0:	f002 f83c 	bl	8006f6c <putchar>
	gotoxy(X+3,Y-1);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3303      	adds	r3, #3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fc fed3 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004f06:	205f      	movs	r0, #95	; 0x5f
 8004f08:	f002 f830 	bl	8006f6c <putchar>
	gotoxy(X+4,Y-1);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fc fec7 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004f1e:	205f      	movs	r0, #95	; 0x5f
 8004f20:	f002 f824 	bl	8006f6c <putchar>
	gotoxy(X+5,Y-1);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3305      	adds	r3, #5
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7fc febb 	bl	8001cac <gotoxy>
	printf("%c",95);
 8004f36:	205f      	movs	r0, #95	; 0x5f
 8004f38:	f002 f818 	bl	8006f6c <putchar>

	gotoxy(X+1,Y+1);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f7fc feaf 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004f4e:	202f      	movs	r0, #47	; 0x2f
 8004f50:	f002 f80c 	bl	8006f6c <putchar>
	gotoxy(X+2,Y+1);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3302      	adds	r3, #2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7fc fea3 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004f66:	202f      	movs	r0, #47	; 0x2f
 8004f68:	f002 f800 	bl	8006f6c <putchar>
	gotoxy(X+4,Y+1);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fc fe97 	bl	8001cac <gotoxy>
	printf("%c",92);
 8004f7e:	205c      	movs	r0, #92	; 0x5c
 8004f80:	f001 fff4 	bl	8006f6c <putchar>
	gotoxy(X+5,Y+1);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3305      	adds	r3, #5
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fc fe8b 	bl	8001cac <gotoxy>
	printf("%c",92);
 8004f96:	205c      	movs	r0, #92	; 0x5c
 8004f98:	f001 ffe8 	bl	8006f6c <putchar>
	fgcolor(15);
 8004f9c:	200f      	movs	r0, #15
 8004f9e:	f7fc fe59 	bl	8001c54 <fgcolor>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <appendBullet>:
/**
  * @brief  Adds a new buletNode to the ends of the bullet linked list
  * @param  head: the head of the bullet list, bullet: the bullet to append
  * @retval None
  */
void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8004faa:	b084      	sub	sp, #16
 8004fac:	b5b0      	push	{r4, r5, r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8004fbc:	2020      	movs	r0, #32
 8004fbe:	f001 fefb 	bl	8006db8 <malloc>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	60bb      	str	r3, [r7, #8]
    newNode->bullet = bullet;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	461d      	mov	r5, r3
 8004fca:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fd2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004fd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	61da      	str	r2, [r3, #28]
    //If the list is empty assign the bullet as head
    if (*head == NULL) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <appendBullet+0x46>
        *head = newNode;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8004fee:	e00d      	b.n	800500c <appendBullet+0x62>
        bulletNode_t* current = *head;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004ff6:	e002      	b.n	8004ffe <appendBullet+0x54>
            current = current->nextBulletAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f8      	bne.n	8004ff8 <appendBullet+0x4e>
        current->nextBulletAddress = newNode;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	61da      	str	r2, [r3, #28]
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005016:	b004      	add	sp, #16
 8005018:	4770      	bx	lr

0800501a <appendEnemy>:
/**
  * @brief  Adds a new enemyNode to the ends of the bullet linked list
  * @param  gameState: the current state of the game,  enemy: the enemy to append
  * @retval None
  */
void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8005024:	2008      	movs	r0, #8
 8005026:	f001 fec7 	bl	8006db8 <malloc>
 800502a:	4603      	mov	r3, r0
 800502c:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]

    //If the list is empty assign the enemy as head
	if(gameState->enemyLL == NULL){
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <appendEnemy+0x30>
		gameState->enemyLL = newEnemy;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	605a      	str	r2, [r3, #4]
		return;
 8005048:	e011      	b.n	800506e <appendEnemy+0x54>
	}

	//Loops through the entire list and adds bullet to the end
	enemyNode_t* thisNode = gameState->enemyLL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8005050:	e00a      	b.n	8005068 <appendEnemy+0x4e>
		if(thisNode->nextEnemyNode == NULL){
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <appendEnemy+0x48>
			thisNode->nextEnemyNode = newEnemy;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	605a      	str	r2, [r3, #4]
			break;
 8005060:	e005      	b.n	800506e <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f1      	bne.n	8005052 <appendEnemy+0x38>
	}
}
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <deleteEnemyNode>:
/**
  * @brief  deletes a given enemy node
  * @param  gameState: the current state of the game,  enemy: the enemy to delete
  * @retval None
  */
void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60bb      	str	r3, [r7, #8]

	///If the enemy to delete is the first delete the head, sets the head as the second element, and free the memory
	if(gameState->enemyLL == enemy){
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	f040 809d 	bne.w	80051ce <deleteEnemyNode+0x15a>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fb27 	bl	80036f0 <fpToInt>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461c      	mov	r4, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fb1e 	bl	80036f0 <fpToInt>
 80050b4:	4603      	mov	r3, r0
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	4619      	mov	r1, r3
 80050bc:	4620      	mov	r0, r4
 80050be:	f7fc fdf5 	bl	8001cac <gotoxy>
		printf("       ");
 80050c2:	4846      	ldr	r0, [pc, #280]	; (80051dc <deleteEnemyNode+0x168>)
 80050c4:	f001 ff3a 	bl	8006f3c <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fb0d 	bl	80036f0 <fpToInt>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461c      	mov	r4, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fb04 	bl	80036f0 <fpToInt>
 80050e8:	4603      	mov	r3, r0
 80050ea:	3302      	adds	r3, #2
 80050ec:	0fda      	lsrs	r2, r3, #31
 80050ee:	4413      	add	r3, r2
 80050f0:	105b      	asrs	r3, r3, #1
 80050f2:	4619      	mov	r1, r3
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7fc fdd9 	bl	8001cac <gotoxy>
		printf("       ");
 80050fa:	4838      	ldr	r0, [pc, #224]	; (80051dc <deleteEnemyNode+0x168>)
 80050fc:	f001 ff1e 	bl	8006f3c <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
		free(enemy);
 800510a:	6838      	ldr	r0, [r7, #0]
 800510c:	f001 fe5c 	bl	8006dc8 <free>
		return;
 8005110:	e060      	b.n	80051d4 <deleteEnemyNode+0x160>
	}

	///Loops through the entire list of enemies and deletes the given enemy. Also "links" the previous element to the next, and frees memory
	while(thisNode != NULL){
		if(thisNode == enemy){
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d154      	bne.n	80051c4 <deleteEnemyNode+0x150>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fae4 	bl	80036f0 <fpToInt>
 8005128:	4603      	mov	r3, r0
 800512a:	461c      	mov	r4, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fadb 	bl	80036f0 <fpToInt>
 800513a:	4603      	mov	r3, r0
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	b29b      	uxth	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f7fc fdb2 	bl	8001cac <gotoxy>
			printf("       ");
 8005148:	4824      	ldr	r0, [pc, #144]	; (80051dc <deleteEnemyNode+0x168>)
 800514a:	f001 fef7 	bl	8006f3c <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe faca 	bl	80036f0 <fpToInt>
 800515c:	4603      	mov	r3, r0
 800515e:	461c      	mov	r4, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fac1 	bl	80036f0 <fpToInt>
 800516e:	4603      	mov	r3, r0
 8005170:	3302      	adds	r3, #2
 8005172:	0fda      	lsrs	r2, r3, #31
 8005174:	4413      	add	r3, r2
 8005176:	105b      	asrs	r3, r3, #1
 8005178:	4619      	mov	r1, r3
 800517a:	4620      	mov	r0, r4
 800517c:	f7fc fd96 	bl	8001cac <gotoxy>
			printf("       ");
 8005180:	4816      	ldr	r0, [pc, #88]	; (80051dc <deleteEnemyNode+0x168>)
 8005182:	f001 fedb 	bl	8006f3c <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fe17 	bl	8006dc8 <free>
			free(thisNode->enemy->position);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fe11 	bl	8006dc8 <free>
			free(thisNode->enemy->velocity);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fe0b 	bl	8006dc8 <free>
			free(thisNode->enemy);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fe06 	bl	8006dc8 <free>
			free(thisNode);
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	f001 fe03 	bl	8006dc8 <free>
			return;
 80051c2:	e007      	b.n	80051d4 <deleteEnemyNode+0x160>
		}
		preNode = thisNode;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d19e      	bne.n	8005112 <deleteEnemyNode+0x9e>
	}
}
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	080086a4 	.word	0x080086a4

080051e0 <deleteBulletNode>:
/**
  * @brief  Deletes an element from the bulletList
  * @param  head: the head of the bullet list, nodeToDelete: the bullet to delete
  * @retval None
  */
void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03c      	beq.n	800526c <deleteBulletNode+0x8c>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d039      	beq.n	800526c <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe fa77 	bl	80036f0 <fpToInt>
 8005202:	4603      	mov	r3, r0
 8005204:	461c      	mov	r4, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fa70 	bl	80036f0 <fpToInt>
 8005210:	4603      	mov	r3, r0
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	4619      	mov	r1, r3
 8005218:	4620      	mov	r0, r4
 800521a:	f7fc fd47 	bl	8001cac <gotoxy>
    printf(" ");
 800521e:	2020      	movs	r0, #32
 8005220:	f001 fea4 	bl	8006f6c <putchar>

	///If the enemy to delete is the first delete the head, sets the head as the second element, and free the memory
    if (*head == nodeToDelete) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d107      	bne.n	800523e <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f001 fdc6 	bl	8006dc8 <free>
        return;
 800523c:	e017      	b.n	800526e <deleteBulletNode+0x8e>
    }

	///Loops through the entire list of bullets and deletes the given bullet. Also "links" the previous element to the next, and frees memory
    bulletNode_t* current = *head;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8005244:	e002      	b.n	800524c <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <deleteBulletNode+0x7c>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d1f4      	bne.n	8005246 <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f001 fdaf 	bl	8006dc8 <free>
 800526a:	e000      	b.n	800526e <deleteBulletNode+0x8e>
        return;
 800526c:	bf00      	nop
}
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}

08005274 <initVariables>:
/**
  * @brief  Sets all the relevant variables to reset values
  * @param  gamestate: the current state of the game
  * @retval None
  */
void initVariables(gameState_t* gameState){
 8005274:	b5b0      	push	{r4, r5, r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 800527c:	2003      	movs	r0, #3
 800527e:	f7fe fa22 	bl	80036c6 <intToFp>
 8005282:	4603      	mov	r3, r0
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	2050      	movs	r0, #80	; 0x50
 8005288:	f7fe fa1d 	bl	80036c6 <intToFp>
 800528c:	4603      	mov	r3, r0
 800528e:	61fb      	str	r3, [r7, #28]
			{intToFp(3), intToFp(40*yScale)}, //position
 8005290:	2003      	movs	r0, #3
 8005292:	f7fe fa18 	bl	80036c6 <intToFp>
 8005296:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8005298:	623b      	str	r3, [r7, #32]
			{intToFp(3), intToFp(40*yScale)}, //position
 800529a:	2050      	movs	r0, #80	; 0x50
 800529c:	f7fe fa13 	bl	80036c6 <intToFp>
 80052a0:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
			{intToFp(3), intToFp(40*yScale)}, //next Position
 80052a4:	2003      	movs	r0, #3
 80052a6:	f7fe fa0e 	bl	80036c6 <intToFp>
 80052aa:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
			{intToFp(3), intToFp(40*yScale)}, //next Position
 80052ae:	2050      	movs	r0, #80	; 0x50
 80052b0:	f7fe fa09 	bl	80036c6 <intToFp>
 80052b4:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			1, 0}; //Number of parts, powerups
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 80052c4:	4a46      	ldr	r2, [pc, #280]	; (80053e0 <initVariables+0x16c>)
 80052c6:	f107 0314 	add.w	r3, r7, #20
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	4611      	mov	r1, r2
 80052ce:	8019      	strh	r1, [r3, #0]
 80052d0:	3302      	adds	r3, #2
 80052d2:	0c12      	lsrs	r2, r2, #16
 80052d4:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 80052e2:	2028      	movs	r0, #40	; 0x28
 80052e4:	f001 fd68 	bl	8006db8 <malloc>
 80052e8:	4603      	mov	r3, r0
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
	position_t pos = {0,0};
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
	nuke->position = pos;
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	461a      	mov	r2, r3
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005300:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	3308      	adds	r3, #8
 8005308:	f107 020c 	add.w	r2, r7, #12
 800530c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005310:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	2200      	movs	r2, #0
 8005318:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	2200      	movs	r2, #0
 800531e:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800532e:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gameState->difficulty=5;   // medium (if changed here, update also definition of diffBtn)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2205      	movs	r2, #5
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	gameState->btnSelected=0; //start game
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	gameState->isDead=0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	gameState->score=0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	86da      	strh	r2, [r3, #54]	; 0x36
	gameState->cityLives=3;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2203      	movs	r2, #3
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	gameState->spaceship= initSpaceship;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f103 0414 	add.w	r4, r3, #20
 800536e:	f107 0518 	add.w	r5, r7, #24
 8005372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800537a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gameState->bossMode = 0;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	gameState->moon = moon;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3311      	adds	r3, #17
 800538a:	f107 0214 	add.w	r2, r7, #20
 800538e:	8811      	ldrh	r1, [r2, #0]
 8005390:	7892      	ldrb	r2, [r2, #2]
 8005392:	8019      	strh	r1, [r3, #0]
 8005394:	709a      	strb	r2, [r3, #2]
	gameState->powerup.lastUseTime=0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	665a      	str	r2, [r3, #100]	; 0x64
	gameState->powerup.isVisible=0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gameState->enemyCanonDisableTime = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	60da      	str	r2, [r3, #12]
	gameState->enemyCanonsUnchanged =1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	741a      	strb	r2, [r3, #16]
	gameState->dropper.isvisible=0;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	gameState->dropper.lastseentime=0;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	gameState->soundIndex = 0;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	gameState->soundTime = 0;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	gameState->soundToPlay = 0;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80053d8:	bf00      	nop
 80053da:	3738      	adds	r7, #56	; 0x38
 80053dc:	46bd      	mov	sp, r7
 80053de:	bdb0      	pop	{r4, r5, r7, pc}
 80053e0:	080086ac 	.word	0x080086ac

080053e4 <drawOnscreenMessage>:

void drawOnscreenMessage(gameState_t* gameState){
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->enemyCanonDisableTime <= enemyDisableDuration && !gameState->enemyCanonsUnchanged){
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <drawOnscreenMessage+0x48>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fa:	d80b      	bhi.n	8005414 <drawOnscreenMessage+0x30>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7c1b      	ldrb	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <drawOnscreenMessage+0x30>
		gotoxy(65,5);
 8005404:	2105      	movs	r1, #5
 8005406:	2041      	movs	r0, #65	; 0x41
 8005408:	f7fc fc50 	bl	8001cac <gotoxy>
		printf("Enemy canons are disabled");
 800540c:	4808      	ldr	r0, [pc, #32]	; (8005430 <drawOnscreenMessage+0x4c>)
 800540e:	f001 fd95 	bl	8006f3c <iprintf>
 8005412:	e007      	b.n	8005424 <drawOnscreenMessage+0x40>
	} else {
		gotoxy(65,5);
 8005414:	2105      	movs	r1, #5
 8005416:	2041      	movs	r0, #65	; 0x41
 8005418:	f7fc fc48 	bl	8001cac <gotoxy>
		printf("                         ");
 800541c:	4805      	ldr	r0, [pc, #20]	; (8005434 <drawOnscreenMessage+0x50>)
 800541e:	f001 fd8d 	bl	8006f3c <iprintf>
	}
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200001c8 	.word	0x200001c8
 8005430:	080086b0 	.word	0x080086b0
 8005434:	080086cc 	.word	0x080086cc

08005438 <drawScreen>:
/**
  * @brief  draws the current state of the game
  * @param  gamestate: the current state of the game
  * @retval None
  */
void drawScreen(gameState_t* gameState) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

	drawOnscreenMessage(gameState);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ffcf 	bl	80053e4 <drawOnscreenMessage>
	drawSpaceship(gameState);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fa82 	bl	8006950 <drawSpaceship>
	drawEnemy(gameState);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fe fca3 	bl	8003d98 <drawEnemy>
	drawBullets(gameState);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc ff88 	bl	8002368 <drawBullets>
	drawPowerup(gameState);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 f853 	bl	8006504 <drawPowerup>
	drawhearth(gameState);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fe fc18 	bl	8003c94 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7c5a      	ldrb	r2, [r3, #17]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7c9b      	ldrb	r3, [r3, #18]
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fad3 	bl	8003a1a <drawMoon>
	drawNuke(gameState);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff f971 	bl	800475c <drawNuke>
	conditionDropper(gameState);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd fec8 	bl	8003210 <conditionDropper>


}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <checkIfDead>:
/**
  * @brief  checks if the player is dead, and writes the score to memory if applicable
  * @param  gamestate: the current state of the game
  * @retval None
  */
void checkIfDead(gameState_t* gameState){
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	if(gameState->cityLives == 0){
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2203      	movs	r2, #3
 800549e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <checkBossKey>:
/**
  * @brief  Checks if 'f' is pressed and (de)activates bossKey i it's pressed
  * @param  gamestate: the current state of the game
  * @retval None
  */
void checkBossKey(gameState_t* gameState){
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 80054b6:	f7fc fa0f 	bl	80018d8 <uart_get_char>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b66      	cmp	r3, #102	; 0x66
 80054c2:	d117      	bne.n	80054f4 <checkBossKey+0x46>
		if(gameState->activeScreen != 4){
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d00c      	beq.n	80054e8 <checkBossKey+0x3a>
			clrscr();
 80054ce:	f7fc fbdd 	bl	8001c8c <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			gameState->activeScreen = 4;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		}else{
			gameState->activeScreen = gameState->lastScreen;
		}
	}
}
 80054e6:	e005      	b.n	80054f4 <checkBossKey+0x46>
			gameState->activeScreen = gameState->lastScreen;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <main>:
/**
  * @brief  The main loop of the game. Runs the menus, if activeScreen == 1 runs the game.
  * @param  None
  * @retval None
  */
int main(void) {
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b0af      	sub	sp, #188	; 0xbc
 8005500:	af00      	add	r7, sp, #0

	//Defines the menu buttons
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 8005502:	4ad6      	ldr	r2, [pc, #856]	; (800585c <main+0x360>)
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800550c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005510:	4ad3      	ldr	r2, [pc, #844]	; (8005860 <main+0x364>)
 8005512:	f107 0310 	add.w	r3, r7, #16
 8005516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800551a:	e883 0003 	stmia.w	r3, {r0, r1}
 800551e:	4ad1      	ldr	r2, [pc, #836]	; (8005864 <main+0x368>)
 8005520:	f107 0318 	add.w	r3, r7, #24
 8005524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005528:	e883 0003 	stmia.w	r3, {r0, r1}

	//Sets up all the used hardware
	uart_init(512000);
 800552c:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8005530:	f7fc fa76 	bl	8001a20 <uart_init>
	initVariables(&gameState);
 8005534:	f107 0320 	add.w	r3, r7, #32
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fe9b 	bl	8005274 <initVariables>
	initJoystick();
 800553e:	f7fc ff9f 	bl	8002480 <initJoystick>
	initTimer();
 8005542:	f7fd f8bd 	bl	80026c0 <initTimer>
	initBuzzerPin();
 8005546:	f7fd f959 	bl	80027fc <initBuzzerPin>
	initRGB();
 800554a:	f7fd fbdb 	bl	8002d04 <initRGB>
	I2C_init();
 800554e:	f7fd fa5b 	bl	8002a08 <I2C_init>

	analogConfigPorts();
 8005552:	f7fd fb11 	bl	8002b78 <analogConfigPorts>
	uint8_t color[] = {0,0,0};
 8005556:	4ac4      	ldr	r2, [pc, #784]	; (8005868 <main+0x36c>)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	4611      	mov	r1, r2
 800555e:	8019      	strh	r1, [r3, #0]
 8005560:	3302      	adds	r3, #2
 8005562:	0c12      	lsrs	r2, r2, #16
 8005564:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fd fcb3 	bl	8002ed4 <RGBColor>
	srand(readPotentiometer());   //RNG
 800556e:	f7fd fba7 	bl	8002cc0 <readPotentiometer>
 8005572:	4603      	mov	r3, r0
 8005574:	4618      	mov	r0, r3
 8005576:	f001 fd85 	bl	8007084 <srand>



	while(1){
		switch(gameState.activeScreen){
 800557a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800557e:	2b04      	cmp	r3, #4
 8005580:	d8fb      	bhi.n	800557a <main+0x7e>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <main+0x8c>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	0800559d 	.word	0x0800559d
 800558c:	08005725 	.word	0x08005725
 8005590:	08005847 	.word	0x08005847
 8005594:	080058b9 	.word	0x080058b9
 8005598:	080059b5 	.word	0x080059b5
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			//Sets up the menu
			clrscr();
 800559c:	f7fc fb76 	bl	8001c8c <clrscr>
			drawMenuScreen(btnList, &gameState);
 80055a0:	f107 0220 	add.w	r2, r7, #32
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa94 	bl	8005ad8 <drawMenuScreen>

			//Continuously checks if the joystick is used and acts accordingly
			while(gameState.activeScreen==0){
 80055b0:	e0b2      	b.n	8005718 <main+0x21c>
				playSound(&gameState);
 80055b2:	f107 0320 	add.w	r3, r7, #32
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 ffe2 	bl	8006580 <playSound>
				checkBossKey(&gameState);
 80055bc:	f107 0320 	add.w	r3, r7, #32
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff74 	bl	80054ae <checkBossKey>
				if(downIsPressed()){
 80055c6:	f7fd f84d 	bl	8002664 <downIsPressed>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d028      	beq.n	8005622 <main+0x126>
					gameState.soundToPlay = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80055d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80055e0:	4413      	add	r3, r2
 80055e2:	3bb0      	subs	r3, #176	; 0xb0
 80055e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80055e8:	f000 fa56 	bl	8005a98 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 80055ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	4b9e      	ldr	r3, [pc, #632]	; (800586c <main+0x370>)
 80055f4:	fb83 3102 	smull	r3, r1, r3, r2
 80055f8:	17d3      	asrs	r3, r2, #31
 80055fa:	1ac9      	subs	r1, r1, r3
 80055fc:	460b      	mov	r3, r1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	440b      	add	r3, r1
 8005602:	1ad1      	subs	r1, r2, r3
 8005604:	b2cb      	uxtb	r3, r1
 8005606:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 800560a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005614:	4413      	add	r3, r2
 8005616:	3bb0      	subs	r3, #176	; 0xb0
 8005618:	e893 0003 	ldmia.w	r3, {r0, r1}
 800561c:	f000 fa1c 	bl	8005a58 <drawBtnAsSelected>
 8005620:	e07a      	b.n	8005718 <main+0x21c>
				}
				else if(upIsPressed()){
 8005622:	f7fc fff1 	bl	8002608 <upIsPressed>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d027      	beq.n	800567c <main+0x180>
					gameState.soundToPlay = 1;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8005632:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800563c:	4413      	add	r3, r2
 800563e:	3bb0      	subs	r3, #176	; 0xb0
 8005640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005644:	f000 fa28 	bl	8005a98 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8005648:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <main+0x15c>
 8005650:	2302      	movs	r3, #2
 8005652:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005656:	e005      	b.n	8005664 <main+0x168>
					else gameState.btnSelected=gameState.btnSelected-1;
 8005658:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800565c:	3b01      	subs	r3, #1
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8005664:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800566e:	4413      	add	r3, r2
 8005670:	3bb0      	subs	r3, #176	; 0xb0
 8005672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005676:	f000 f9ef 	bl	8005a58 <drawBtnAsSelected>
 800567a:	e04d      	b.n	8005718 <main+0x21c>
				}
				else if(centerIsPressed()){
 800567c:	f7fc ff96 	bl	80025ac <centerIsPressed>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d048      	beq.n	8005718 <main+0x21c>
					gameState.soundToPlay = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
					if(gameState.btnSelected==0){ //START BUTTON
 800568c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <main+0x1a0>
						gameState.activeScreen=1; //Game screen
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800569a:	e03d      	b.n	8005718 <main+0x21c>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 800569c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d132      	bne.n	800570a <main+0x20e>
						gameState.difficulty=(gameState.difficulty+5)%15;
 80056a4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80056a8:	1d5a      	adds	r2, r3, #5
 80056aa:	4b71      	ldr	r3, [pc, #452]	; (8005870 <main+0x374>)
 80056ac:	fb83 1302 	smull	r1, r3, r3, r2
 80056b0:	4413      	add	r3, r2
 80056b2:	10d9      	asrs	r1, r3, #3
 80056b4:	17d3      	asrs	r3, r2, #31
 80056b6:	1ac9      	subs	r1, r1, r3
 80056b8:	460b      	mov	r3, r1
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a5b      	subs	r3, r3, r1
 80056be:	1ad1      	subs	r1, r2, r3
 80056c0:	b2cb      	uxtb	r3, r1
 80056c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 80056c6:	4b66      	ldr	r3, [pc, #408]	; (8005860 <main+0x364>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	330f      	adds	r3, #15
 80056cc:	4a64      	ldr	r2, [pc, #400]	; (8005860 <main+0x364>)
 80056ce:	7852      	ldrb	r2, [r2, #1]
 80056d0:	3201      	adds	r2, #1
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fc fae9 	bl	8001cac <gotoxy>
						if(gameState.difficulty==0){
 80056da:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <main+0x1ee>
							printf("EASY  ");
 80056e2:	4864      	ldr	r0, [pc, #400]	; (8005874 <main+0x378>)
 80056e4:	f001 fc2a 	bl	8006f3c <iprintf>
 80056e8:	e016      	b.n	8005718 <main+0x21c>
						} else if(gameState.difficulty==5){
 80056ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d103      	bne.n	80056fa <main+0x1fe>
							printf("MEDIUM");
 80056f2:	4861      	ldr	r0, [pc, #388]	; (8005878 <main+0x37c>)
 80056f4:	f001 fc22 	bl	8006f3c <iprintf>
 80056f8:	e00e      	b.n	8005718 <main+0x21c>
						} else if(gameState.difficulty==10){
 80056fa:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80056fe:	2b0a      	cmp	r3, #10
 8005700:	d10a      	bne.n	8005718 <main+0x21c>
							printf("HARD  ");
 8005702:	485e      	ldr	r0, [pc, #376]	; (800587c <main+0x380>)
 8005704:	f001 fc1a 	bl	8006f3c <iprintf>
 8005708:	e006      	b.n	8005718 <main+0x21c>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 800570a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800570e:	2b02      	cmp	r3, #2
 8005710:	d102      	bne.n	8005718 <main+0x21c>
						gameState.activeScreen=2;// help screen
 8005712:	2302      	movs	r3, #2
 8005714:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(gameState.activeScreen==0){
 8005718:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800571c:	2b00      	cmp	r3, #0
 800571e:	f43f af48 	beq.w	80055b2 <main+0xb6>
					}
				}

			}
			break;
 8005722:	e154      	b.n	80059ce <main+0x4d2>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			//Sets up the game screen
			clrscr();
 8005724:	f7fc fab2 	bl	8001c8c <clrscr>
			uint32_t frameLastUpdated=0;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			gameState.powerup.lastUseTime = runtime;
 800572e:	4b54      	ldr	r3, [pc, #336]	; (8005880 <main+0x384>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			drawWindow(1);
 8005736:	2001      	movs	r0, #1
 8005738:	f000 fbb0 	bl	8005e9c <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800573c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005740:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe f967 	bl	8003a1a <drawMoon>
			drawhearth(&gameState);
 800574c:	f107 0320 	add.w	r3, r7, #32
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fa9f 	bl	8003c94 <drawhearth>
			drawCity();
 8005756:	f7fe fbc1 	bl	8003edc <drawCity>

			drawScore(&gameState);
 800575a:	f107 0320 	add.w	r3, r7, #32
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fea6 	bl	80044b0 <drawScore>
			gameState.powerup.lastUseTime = runtime; //Starts the spawing of powerups
 8005764:	4b46      	ldr	r3, [pc, #280]	; (8005880 <main+0x384>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			gameState.nuke->lastActivationTime = runtime; //Start charging of nuke
 800576c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576e:	4a44      	ldr	r2, [pc, #272]	; (8005880 <main+0x384>)
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
			gameState.soundTime = runtime; //Starts the soundengine
 8005774:	4b42      	ldr	r3, [pc, #264]	; (8005880 <main+0x384>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			gameState.nextEnemySpawn = runtime + 20; //Spawns first enemy after 0.2 seconds
 800577c:	4b40      	ldr	r3, [pc, #256]	; (8005880 <main+0x384>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28

			//Continuously updates the game updateing sound and bosskey as quicly as possible, and the rest 4 times pr second
			while(gameState.activeScreen==1){
 8005784:	e05a      	b.n	800583c <main+0x340>
				checkBossKey(&gameState);
 8005786:	f107 0320 	add.w	r3, r7, #32
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fe8f 	bl	80054ae <checkBossKey>
				playSound(&gameState);
 8005790:	f107 0320 	add.w	r3, r7, #32
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fef3 	bl	8006580 <playSound>
				if(runtime-frameLastUpdated>=framePeriod){//
 800579a:	4b39      	ldr	r3, [pc, #228]	; (8005880 <main+0x384>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d949      	bls.n	800583c <main+0x340>
					spawnEnemy(&gameState);
 80057a8:	f107 0320 	add.w	r3, r7, #32
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fd fda7 	bl	8003300 <spawnEnemy>

					updateSpaceship(&gameState);
 80057b2:	f107 0320 	add.w	r3, r7, #32
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 ff68 	bl	800668c <updateSpaceship>
					updateEnemy(&gameState);
 80057bc:	f107 0320 	add.w	r3, r7, #32
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fd fe5b 	bl	800347c <updateEnemy>
					updatePowerup(&gameState);
 80057c6:	f107 0320 	add.w	r3, r7, #32
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fda0 	bl	8006310 <updatePowerup>

					shootSpaceship(&gameState);
 80057d0:	f107 0320 	add.w	r3, r7, #32
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ffd7 	bl	8006788 <shootSpaceship>
					shootEnemy(&gameState);
 80057da:	f107 0320 	add.w	r3, r7, #32
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fe7c 	bl	80034dc <shootEnemy>
					updateBullets(&gameState);
 80057e4:	f107 0320 	add.w	r3, r7, #32
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fc fb60 	bl	8001eae <updateBullets>
					spawnDropper(&gameState);
 80057ee:	f107 0320 	add.w	r3, r7, #32
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fd fc48 	bl	8003088 <spawnDropper>
					updateDropper(&gameState);
 80057f8:	f107 0320 	add.w	r3, r7, #32
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fcaf 	bl	8003160 <updateDropper>

					detectBulletHit(&gameState);
 8005802:	f107 0320 	add.w	r3, r7, #32
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fbd5 	bl	8001fb6 <detectBulletHit>
					detectCityHit(&gameState);
 800580c:	f107 0320 	add.w	r3, r7, #32
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd ff01 	bl	8003618 <detectCityHit>
					updateNuke(&gameState);
 8005816:	f107 0320 	add.w	r3, r7, #32
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fcf0 	bl	8006200 <updateNuke>
					checkIfDead(&gameState);
 8005820:	f107 0320 	add.w	r3, r7, #32
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fe2f 	bl	8005488 <checkIfDead>

					drawScreen(&gameState);
 800582a:	f107 0320 	add.w	r3, r7, #32
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe02 	bl	8005438 <drawScreen>
					frameLastUpdated=runtime;
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <main+0x384>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			while(gameState.activeScreen==1){
 800583c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005840:	2b01      	cmp	r3, #1
 8005842:	d0a0      	beq.n	8005786 <main+0x28a>
				}
		}
			break;
 8005844:	e0c3      	b.n	80059ce <main+0x4d2>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			//Sets up the help screen
			clrscr();
 8005846:	f7fc fa21 	bl	8001c8c <clrscr>
			drawWindow(0);
 800584a:	2000      	movs	r0, #0
 800584c:	f000 fb26 	bl	8005e9c <drawWindow>
			drawbackground(); // stars in background
 8005850:	f7fd ffeb 	bl	800382a <drawbackground>
			drawHelpScreen();
 8005854:	f000 f9ca 	bl	8005bec <drawHelpScreen>

			//If center is pressed leave the help screen
			while(gameState.activeScreen==2){
 8005858:	e029      	b.n	80058ae <main+0x3b2>
 800585a:	bf00      	nop
 800585c:	08008e70 	.word	0x08008e70
 8005860:	08008e78 	.word	0x08008e78
 8005864:	08008e80 	.word	0x08008e80
 8005868:	080088c8 	.word	0x080088c8
 800586c:	55555556 	.word	0x55555556
 8005870:	88888889 	.word	0x88888889
 8005874:	080086e8 	.word	0x080086e8
 8005878:	080086f0 	.word	0x080086f0
 800587c:	080086f8 	.word	0x080086f8
 8005880:	200001c8 	.word	0x200001c8
				playSound(&gameState);
 8005884:	f107 0320 	add.w	r3, r7, #32
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fe79 	bl	8006580 <playSound>
				checkBossKey(&gameState);
 800588e:	f107 0320 	add.w	r3, r7, #32
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fe0b 	bl	80054ae <checkBossKey>
				if(centerIsPressed()){
 8005898:	f7fc fe88 	bl	80025ac <centerIsPressed>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <main+0x3b2>
					gameState.soundToPlay = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
					gameState.activeScreen=0;//MENU SCREEN
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(gameState.activeScreen==2){
 80058ae:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d0e6      	beq.n	8005884 <main+0x388>
				}
			}
			break;
 80058b6:	e08a      	b.n	80059ce <main+0x4d2>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			//Sets up the game over screen
			clrscr();
 80058b8:	f7fc f9e8 	bl	8001c8c <clrscr>

			gotoxy(50,5); printf(" _____   ___  ___  ___ _____   _____  _   _ ___________ ");
 80058bc:	2105      	movs	r1, #5
 80058be:	2032      	movs	r0, #50	; 0x32
 80058c0:	f7fc f9f4 	bl	8001cac <gotoxy>
 80058c4:	4842      	ldr	r0, [pc, #264]	; (80059d0 <main+0x4d4>)
 80058c6:	f001 fb39 	bl	8006f3c <iprintf>
			gotoxy(50,6); printf("|  __ \\ / _ \\ |  \\/  ||  ___| |  _  || | | |  ___| ___ \\");
 80058ca:	2106      	movs	r1, #6
 80058cc:	2032      	movs	r0, #50	; 0x32
 80058ce:	f7fc f9ed 	bl	8001cac <gotoxy>
 80058d2:	4840      	ldr	r0, [pc, #256]	; (80059d4 <main+0x4d8>)
 80058d4:	f001 fb32 	bl	8006f3c <iprintf>
			gotoxy(50,7); printf("| |  \\// /_\\ \\| .  . || |__   | | | || | | | |__ | |_/ /");
 80058d8:	2107      	movs	r1, #7
 80058da:	2032      	movs	r0, #50	; 0x32
 80058dc:	f7fc f9e6 	bl	8001cac <gotoxy>
 80058e0:	483d      	ldr	r0, [pc, #244]	; (80059d8 <main+0x4dc>)
 80058e2:	f001 fb2b 	bl	8006f3c <iprintf>
			gotoxy(50,8); printf("| | __ |  _  || |\\/| ||  __|  | | | || | | |  __||    /");
 80058e6:	2108      	movs	r1, #8
 80058e8:	2032      	movs	r0, #50	; 0x32
 80058ea:	f7fc f9df 	bl	8001cac <gotoxy>
 80058ee:	483b      	ldr	r0, [pc, #236]	; (80059dc <main+0x4e0>)
 80058f0:	f001 fb24 	bl	8006f3c <iprintf>
			gotoxy(50,9); printf("| |_\\ \\| | | || |  | || |___  \\ \\_/ /\\ \\_/ / |___| |\\ \\ ");
 80058f4:	2109      	movs	r1, #9
 80058f6:	2032      	movs	r0, #50	; 0x32
 80058f8:	f7fc f9d8 	bl	8001cac <gotoxy>
 80058fc:	4838      	ldr	r0, [pc, #224]	; (80059e0 <main+0x4e4>)
 80058fe:	f001 fb1d 	bl	8006f3c <iprintf>
			gotoxy(50,10); printf(" \\____/\\_| |_/\\_|  |_/\\____/   \\___/  \\___/\\____/\\_| \\_|");
 8005902:	210a      	movs	r1, #10
 8005904:	2032      	movs	r0, #50	; 0x32
 8005906:	f7fc f9d1 	bl	8001cac <gotoxy>
 800590a:	4836      	ldr	r0, [pc, #216]	; (80059e4 <main+0x4e8>)
 800590c:	f001 fb16 	bl	8006f3c <iprintf>


			gotoxy(64,15);
 8005910:	210f      	movs	r1, #15
 8005912:	2040      	movs	r0, #64	; 0x40
 8005914:	f7fc f9ca 	bl	8001cac <gotoxy>
			printf("SCORE: %d", gameState.score);
 8005918:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800591c:	4619      	mov	r1, r3
 800591e:	4832      	ldr	r0, [pc, #200]	; (80059e8 <main+0x4ec>)
 8005920:	f001 fb0c 	bl	8006f3c <iprintf>
			if(gameState.score<=30){
 8005924:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005928:	2b1e      	cmp	r3, #30
 800592a:	d802      	bhi.n	8005932 <main+0x436>
				printf(" (you suck)");
 800592c:	482f      	ldr	r0, [pc, #188]	; (80059ec <main+0x4f0>)
 800592e:	f001 fb05 	bl	8006f3c <iprintf>
			}

			if(gameState.score>readFromFlash(0x0800F800)){
 8005932:	f8b7 4056 	ldrh.w	r4, [r7, #86]	; 0x56
 8005936:	482e      	ldr	r0, [pc, #184]	; (80059f0 <main+0x4f4>)
 8005938:	f7fd fb2d 	bl	8002f96 <readFromFlash>
 800593c:	4603      	mov	r3, r0
 800593e:	429c      	cmp	r4, r3
 8005940:	d90d      	bls.n	800595e <main+0x462>
				gotoxy(64,17);
 8005942:	2111      	movs	r1, #17
 8005944:	2040      	movs	r0, #64	; 0x40
 8005946:	f7fc f9b1 	bl	8001cac <gotoxy>
				printf("NEW HIGHSCORE!");
 800594a:	482a      	ldr	r0, [pc, #168]	; (80059f4 <main+0x4f8>)
 800594c:	f001 faf6 	bl	8006f3c <iprintf>
				writeToFlash(gameState.score, 0x0800F800);
 8005950:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005954:	4926      	ldr	r1, [pc, #152]	; (80059f0 <main+0x4f4>)
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd fb04 	bl	8002f64 <writeToFlash>
 800595c:	e00b      	b.n	8005976 <main+0x47a>
			} else {
				gotoxy(64,17);
 800595e:	2111      	movs	r1, #17
 8005960:	2040      	movs	r0, #64	; 0x40
 8005962:	f7fc f9a3 	bl	8001cac <gotoxy>
				printf("Your highscore is %d", readFromFlash(0x0800F800));
 8005966:	4822      	ldr	r0, [pc, #136]	; (80059f0 <main+0x4f4>)
 8005968:	f7fd fb15 	bl	8002f96 <readFromFlash>
 800596c:	4603      	mov	r3, r0
 800596e:	4619      	mov	r1, r3
 8005970:	4821      	ldr	r0, [pc, #132]	; (80059f8 <main+0x4fc>)
 8005972:	f001 fae3 	bl	8006f3c <iprintf>
			}

			gotoxy(62,30);
 8005976:	211e      	movs	r1, #30
 8005978:	203e      	movs	r0, #62	; 0x3e
 800597a:	f7fc f997 	bl	8001cac <gotoxy>
			printf("Pull down on joystick to continue");
 800597e:	481f      	ldr	r0, [pc, #124]	; (80059fc <main+0x500>)
 8005980:	f001 fadc 	bl	8006f3c <iprintf>

			while(gameState.activeScreen==3){
 8005984:	e011      	b.n	80059aa <main+0x4ae>
				checkBossKey(&gameState);
 8005986:	f107 0320 	add.w	r3, r7, #32
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fd8f 	bl	80054ae <checkBossKey>
				if(downIsPressed()){
 8005990:	f7fc fe68 	bl	8002664 <downIsPressed>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <main+0x4ae>
					initVariables(&gameState);
 800599a:	f107 0320 	add.w	r3, r7, #32
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fc68 	bl	8005274 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(gameState.activeScreen==3){
 80059aa:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d0e9      	beq.n	8005986 <main+0x48a>
				}
			}
			break;
 80059b2:	e00c      	b.n	80059ce <main+0x4d2>
		case 4: // BOSS KEY --- Draws the bosskey screen and checks if it should leave it again
			drawBossKey();
 80059b4:	f7ff f9c0 	bl	8004d38 <drawBossKey>
			while(gameState.activeScreen==4){
 80059b8:	e004      	b.n	80059c4 <main+0x4c8>
				checkBossKey(&gameState);
 80059ba:	f107 0320 	add.w	r3, r7, #32
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fd75 	bl	80054ae <checkBossKey>
			while(gameState.activeScreen==4){
 80059c4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d0f6      	beq.n	80059ba <main+0x4be>
			}
			break;
 80059cc:	bf00      	nop
		switch(gameState.activeScreen){
 80059ce:	e5d4      	b.n	800557a <main+0x7e>
 80059d0:	08008700 	.word	0x08008700
 80059d4:	0800873c 	.word	0x0800873c
 80059d8:	08008778 	.word	0x08008778
 80059dc:	080087b4 	.word	0x080087b4
 80059e0:	080087ec 	.word	0x080087ec
 80059e4:	08008828 	.word	0x08008828
 80059e8:	08008864 	.word	0x08008864
 80059ec:	08008870 	.word	0x08008870
 80059f0:	0800f800 	.word	0x0800f800
 80059f4:	0800887c 	.word	0x0800887c
 80059f8:	0800888c 	.word	0x0800888c
 80059fc:	080088a4 	.word	0x080088a4

08005a00 <drawButton>:
/**
  * @brief  Draws a button to the screen
  * @param  btn: the button to draw
  * @retval None
  */
void drawButton(button_t btn){
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	463b      	mov	r3, r7
 8005a08:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fa fbde 	bl	80001d0 <strlen>
 8005a14:	4603      	mov	r3, r0
 8005a16:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8005a18:	783b      	ldrb	r3, [r7, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	787b      	ldrb	r3, [r7, #1]
 8005a1e:	461c      	mov	r4, r3
 8005a20:	783b      	ldrb	r3, [r7, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	1d5a      	adds	r2, r3, #5
 8005a2a:	787b      	ldrb	r3, [r7, #1]
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	2100      	movs	r1, #0
 8005a30:	9100      	str	r1, [sp, #0]
 8005a32:	4621      	mov	r1, r4
 8005a34:	f7fc f94c 	bl	8001cd0 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8005a38:	783b      	ldrb	r3, [r7, #0]
 8005a3a:	3303      	adds	r3, #3
 8005a3c:	787a      	ldrb	r2, [r7, #1]
 8005a3e:	3201      	adds	r2, #1
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc f932 	bl	8001cac <gotoxy>
	printf(btn.text);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fa76 	bl	8006f3c <iprintf>
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <drawBtnAsSelected>:
/**
  * @brief  Draws a button that has been selected to the screen
  * @param  btn: the button to draw
  * @retval None
  */
void drawBtnAsSelected(button_t btn){
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	463b      	mov	r3, r7
 8005a60:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fa fbb2 	bl	80001d0 <strlen>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8005a70:	783b      	ldrb	r3, [r7, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	787b      	ldrb	r3, [r7, #1]
 8005a76:	461c      	mov	r4, r3
 8005a78:	783b      	ldrb	r3, [r7, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	1d5a      	adds	r2, r3, #5
 8005a82:	787b      	ldrb	r3, [r7, #1]
 8005a84:	3302      	adds	r3, #2
 8005a86:	2101      	movs	r1, #1
 8005a88:	9100      	str	r1, [sp, #0]
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	f7fc f920 	bl	8001cd0 <drawBox>
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd90      	pop	{r4, r7, pc}

08005a98 <drawBtnAsDeselected>:
/**
  * @brief  Draw a button that was selected that aren't any more
  * @param  btn: the button to draw
  * @retval None
  */
void drawBtnAsDeselected(button_t btn){
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fb92 	bl	80001d0 <strlen>
 8005aac:	4603      	mov	r3, r0
 8005aae:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8005ab0:	783b      	ldrb	r3, [r7, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	787b      	ldrb	r3, [r7, #1]
 8005ab6:	461c      	mov	r4, r3
 8005ab8:	783b      	ldrb	r3, [r7, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	1d5a      	adds	r2, r3, #5
 8005ac2:	787b      	ldrb	r3, [r7, #1]
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	9100      	str	r1, [sp, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	f7fc f900 	bl	8001cd0 <drawBox>
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd90      	pop	{r4, r7, pc}

08005ad8 <drawMenuScreen>:
/**
  * @brief  Draws the entire main menu
  * @param  btnList: A list of buttons to draw, gameState: the current state of the game
  * @retval None
  */
void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]

	drawWindow(0);
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f000 f9da 	bl	8005e9c <drawWindow>
	drawbackground(); // stars in background
 8005ae8:	f7fd fe9f 	bl	800382a <drawbackground>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	7c5a      	ldrb	r2, [r3, #17]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	7c9b      	ldrb	r3, [r3, #18]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fd ff8f 	bl	8003a1a <drawMoon>

	gotoxy(47,5); printf(" _____                 _ _             ___  _   _             _    ");
 8005afc:	2105      	movs	r1, #5
 8005afe:	202f      	movs	r0, #47	; 0x2f
 8005b00:	f7fc f8d4 	bl	8001cac <gotoxy>
 8005b04:	482f      	ldr	r0, [pc, #188]	; (8005bc4 <drawMenuScreen+0xec>)
 8005b06:	f001 fa19 	bl	8006f3c <iprintf>
	gotoxy(47,6); printf("|  __ \\               (_) |           / _ \\| | | |           | |   ");
 8005b0a:	2106      	movs	r1, #6
 8005b0c:	202f      	movs	r0, #47	; 0x2f
 8005b0e:	f7fc f8cd 	bl	8001cac <gotoxy>
 8005b12:	482d      	ldr	r0, [pc, #180]	; (8005bc8 <drawMenuScreen+0xf0>)
 8005b14:	f001 fa12 	bl	8006f3c <iprintf>
	gotoxy(47,7); printf("| |  \\/_ __ __ ___   ___| |_ _   _   / /_\\ \\ |_| |_ __ _  ___| | __");
 8005b18:	2107      	movs	r1, #7
 8005b1a:	202f      	movs	r0, #47	; 0x2f
 8005b1c:	f7fc f8c6 	bl	8001cac <gotoxy>
 8005b20:	482a      	ldr	r0, [pc, #168]	; (8005bcc <drawMenuScreen+0xf4>)
 8005b22:	f001 fa0b 	bl	8006f3c <iprintf>
	gotoxy(47,8); printf("| | __| '__/ _` \\ \\ / / | __| | | |  |  _  | __| __/ _` |/ __| |/ /");
 8005b26:	2108      	movs	r1, #8
 8005b28:	202f      	movs	r0, #47	; 0x2f
 8005b2a:	f7fc f8bf 	bl	8001cac <gotoxy>
 8005b2e:	4828      	ldr	r0, [pc, #160]	; (8005bd0 <drawMenuScreen+0xf8>)
 8005b30:	f001 fa04 	bl	8006f3c <iprintf>
	gotoxy(47,9); printf("| |_\\ \\ | | (_| |\\ V /| | |_| |_| |  | | | | |_| || (_| | (__|   < ");
 8005b34:	2109      	movs	r1, #9
 8005b36:	202f      	movs	r0, #47	; 0x2f
 8005b38:	f7fc f8b8 	bl	8001cac <gotoxy>
 8005b3c:	4825      	ldr	r0, [pc, #148]	; (8005bd4 <drawMenuScreen+0xfc>)
 8005b3e:	f001 f9fd 	bl	8006f3c <iprintf>
	gotoxy(47,10); printf(" \\____/_|  \\__,_| \\_/ |_|\\__|\\__, |  \\_| |_/\\__|\\__\\__,_|\\___|_|\\_\\");
 8005b42:	210a      	movs	r1, #10
 8005b44:	202f      	movs	r0, #47	; 0x2f
 8005b46:	f7fc f8b1 	bl	8001cac <gotoxy>
 8005b4a:	4823      	ldr	r0, [pc, #140]	; (8005bd8 <drawMenuScreen+0x100>)
 8005b4c:	f001 f9f6 	bl	8006f3c <iprintf>
	gotoxy(47,11); printf("                              __/ |                                ");
 8005b50:	210b      	movs	r1, #11
 8005b52:	202f      	movs	r0, #47	; 0x2f
 8005b54:	f7fc f8aa 	bl	8001cac <gotoxy>
 8005b58:	4820      	ldr	r0, [pc, #128]	; (8005bdc <drawMenuScreen+0x104>)
 8005b5a:	f001 f9ef 	bl	8006f3c <iprintf>
    gotoxy(47,12); printf("                             |___/                                 ");
 8005b5e:	210c      	movs	r1, #12
 8005b60:	202f      	movs	r0, #47	; 0x2f
 8005b62:	f7fc f8a3 	bl	8001cac <gotoxy>
 8005b66:	481e      	ldr	r0, [pc, #120]	; (8005be0 <drawMenuScreen+0x108>)
 8005b68:	f001 f9e8 	bl	8006f3c <iprintf>

	drawButton(btnList[0]);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b72:	f7ff ff45 	bl	8005a00 <drawButton>
	drawButton(btnList[1]);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b7e:	f7ff ff3f 	bl	8005a00 <drawButton>
	drawButton(btnList[2]);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3310      	adds	r3, #16
 8005b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b8a:	f7ff ff39 	bl	8005a00 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b9e:	f7ff ff5b 	bl	8005a58 <drawBtnAsSelected>
	gotoxy(73,35);
 8005ba2:	2123      	movs	r1, #35	; 0x23
 8005ba4:	2049      	movs	r0, #73	; 0x49
 8005ba6:	f7fc f881 	bl	8001cac <gotoxy>
	printf("Highscore: %d", readFromFlash(0x0800F800));
 8005baa:	480e      	ldr	r0, [pc, #56]	; (8005be4 <drawMenuScreen+0x10c>)
 8005bac:	f7fd f9f3 	bl	8002f96 <readFromFlash>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	480c      	ldr	r0, [pc, #48]	; (8005be8 <drawMenuScreen+0x110>)
 8005bb6:	f001 f9c1 	bl	8006f3c <iprintf>
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	080088f0 	.word	0x080088f0
 8005bc8:	08008934 	.word	0x08008934
 8005bcc:	08008978 	.word	0x08008978
 8005bd0:	080089bc 	.word	0x080089bc
 8005bd4:	08008a00 	.word	0x08008a00
 8005bd8:	08008a44 	.word	0x08008a44
 8005bdc:	08008a88 	.word	0x08008a88
 8005be0:	08008acc 	.word	0x08008acc
 8005be4:	0800f800 	.word	0x0800f800
 8005be8:	08008b10 	.word	0x08008b10

08005bec <drawHelpScreen>:
/**
  * @brief  Draws the help screen
  * @param  None
  * @retval None
  */
void drawHelpScreen(){
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	af1a      	add	r7, sp, #104	; 0x68
	gotoxy(70,5);
 8005bf2:	2105      	movs	r1, #5
 8005bf4:	2046      	movs	r0, #70	; 0x46
 8005bf6:	f7fc f859 	bl	8001cac <gotoxy>
	printf("HELP SCREEN");
 8005bfa:	4899      	ldr	r0, [pc, #612]	; (8005e60 <drawHelpScreen+0x274>)
 8005bfc:	f001 f99e 	bl	8006f3c <iprintf>
	uint16_t x = 10;
 8005c00:	230a      	movs	r3, #10
 8005c02:	80fb      	strh	r3, [r7, #6]
	uint16_t y = 10;
 8005c04:	230a      	movs	r3, #10
 8005c06:	80bb      	strh	r3, [r7, #4]
	gotoxy(x,y);
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	88ba      	ldrh	r2, [r7, #4]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fc f84c 	bl	8001cac <gotoxy>
	printf("Styr din rum skib ved at dreje det venstre potentiometer frem og tilbage");
 8005c14:	4893      	ldr	r0, [pc, #588]	; (8005e64 <drawHelpScreen+0x278>)
 8005c16:	f001 f991 	bl	8006f3c <iprintf>
	gotoxy(x+=24, y+=2);
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	80fb      	strh	r3, [r7, #6]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	88bb      	ldrh	r3, [r7, #4]
 8005c24:	3302      	adds	r3, #2
 8005c26:	80bb      	strh	r3, [r7, #4]
 8005c28:	88bb      	ldrh	r3, [r7, #4]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f7fc f83d 	bl	8001cac <gotoxy>
	printf("<-----     ----->");
 8005c32:	488d      	ldr	r0, [pc, #564]	; (8005e68 <drawHelpScreen+0x27c>)
 8005c34:	f001 f982 	bl	8006f3c <iprintf>
	drawMe(x+=8,y);
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	80fb      	strh	r3, [r7, #6]
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	88ba      	ldrh	r2, [r7, #4]
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fc5d 	bl	8004508 <drawMe>

	gotoxy(x-=32, y+=3);
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	3b20      	subs	r3, #32
 8005c52:	80fb      	strh	r3, [r7, #6]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	88bb      	ldrh	r3, [r7, #4]
 8005c58:	3303      	adds	r3, #3
 8005c5a:	80bb      	strh	r3, [r7, #4]
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7fc f823 	bl	8001cac <gotoxy>
	printf("Rumvaeserne vil prove at odelaegge din by. Hver gang de rammer den mister du et liv!");
 8005c66:	4881      	ldr	r0, [pc, #516]	; (8005e6c <drawHelpScreen+0x280>)
 8005c68:	f001 f968 	bl	8006f3c <iprintf>
	gotoxy(x, ++y);
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	88bb      	ldrh	r3, [r7, #4]
 8005c70:	3301      	adds	r3, #1
 8005c72:	80bb      	strh	r3, [r7, #4]
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fc f817 	bl	8001cac <gotoxy>
	printf("  o o     o o     o o     o o  ");
 8005c7e:	487c      	ldr	r0, [pc, #496]	; (8005e70 <drawHelpScreen+0x284>)
 8005c80:	f001 f95c 	bl	8006f3c <iprintf>
	gotoxy(x, ++y);
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	88bb      	ldrh	r3, [r7, #4]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	80bb      	strh	r3, [r7, #4]
 8005c8c:	88bb      	ldrh	r3, [r7, #4]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fc f80b 	bl	8001cac <gotoxy>
	printf("%c%c%c%c%c%c%c %c%c%c%c%c%c%c %c%c%c%c%c%c%c %c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 187);
 8005c96:	23bb      	movs	r3, #187	; 0xbb
 8005c98:	9318      	str	r3, [sp, #96]	; 0x60
 8005c9a:	23cd      	movs	r3, #205	; 0xcd
 8005c9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c9e:	23cd      	movs	r3, #205	; 0xcd
 8005ca0:	9316      	str	r3, [sp, #88]	; 0x58
 8005ca2:	23cd      	movs	r3, #205	; 0xcd
 8005ca4:	9315      	str	r3, [sp, #84]	; 0x54
 8005ca6:	23cd      	movs	r3, #205	; 0xcd
 8005ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8005caa:	23cd      	movs	r3, #205	; 0xcd
 8005cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cae:	23c9      	movs	r3, #201	; 0xc9
 8005cb0:	9312      	str	r3, [sp, #72]	; 0x48
 8005cb2:	23bb      	movs	r3, #187	; 0xbb
 8005cb4:	9311      	str	r3, [sp, #68]	; 0x44
 8005cb6:	23cd      	movs	r3, #205	; 0xcd
 8005cb8:	9310      	str	r3, [sp, #64]	; 0x40
 8005cba:	23cd      	movs	r3, #205	; 0xcd
 8005cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cbe:	23cd      	movs	r3, #205	; 0xcd
 8005cc0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc2:	23cd      	movs	r3, #205	; 0xcd
 8005cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc6:	23cd      	movs	r3, #205	; 0xcd
 8005cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cca:	23c9      	movs	r3, #201	; 0xc9
 8005ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cce:	23bb      	movs	r3, #187	; 0xbb
 8005cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd2:	23cd      	movs	r3, #205	; 0xcd
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	23cd      	movs	r3, #205	; 0xcd
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	23cd      	movs	r3, #205	; 0xcd
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	23cd      	movs	r3, #205	; 0xcd
 8005ce0:	9306      	str	r3, [sp, #24]
 8005ce2:	23cd      	movs	r3, #205	; 0xcd
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	23c9      	movs	r3, #201	; 0xc9
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	23bb      	movs	r3, #187	; 0xbb
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	23cd      	movs	r3, #205	; 0xcd
 8005cf0:	9302      	str	r3, [sp, #8]
 8005cf2:	23cd      	movs	r3, #205	; 0xcd
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	23cd      	movs	r3, #205	; 0xcd
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	23cd      	movs	r3, #205	; 0xcd
 8005cfc:	22cd      	movs	r2, #205	; 0xcd
 8005cfe:	21c9      	movs	r1, #201	; 0xc9
 8005d00:	485c      	ldr	r0, [pc, #368]	; (8005e74 <drawHelpScreen+0x288>)
 8005d02:	f001 f91b 	bl	8006f3c <iprintf>

	gotoxy(x, y+=3);
 8005d06:	88fa      	ldrh	r2, [r7, #6]
 8005d08:	88bb      	ldrh	r3, [r7, #4]
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	80bb      	strh	r3, [r7, #4]
 8005d0e:	88bb      	ldrh	r3, [r7, #4]
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fb ffca 	bl	8001cac <gotoxy>
	printf("Er du ved at blive overvaeldet, kan du bruge din nuke.");
 8005d18:	4857      	ldr	r0, [pc, #348]	; (8005e78 <drawHelpScreen+0x28c>)
 8005d1a:	f001 f90f 	bl	8006f3c <iprintf>
	gotoxy(x,++y);
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	88bb      	ldrh	r3, [r7, #4]
 8005d22:	3301      	adds	r3, #1
 8005d24:	80bb      	strh	r3, [r7, #4]
 8005d26:	88bb      	ldrh	r3, [r7, #4]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fb ffbe 	bl	8001cac <gotoxy>
	printf("Se pa LED'en hvornar den er klar");
 8005d30:	4852      	ldr	r0, [pc, #328]	; (8005e7c <drawHelpScreen+0x290>)
 8005d32:	f001 f903 	bl	8006f3c <iprintf>
	gotoxy(x,++y);
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	88bb      	ldrh	r3, [r7, #4]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	80bb      	strh	r3, [r7, #4]
 8005d3e:	88bb      	ldrh	r3, [r7, #4]
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f7fb ffb2 	bl	8001cac <gotoxy>
	fgcolor(1);
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f7fb ff83 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 8005d4e:	20db      	movs	r0, #219	; 0xdb
 8005d50:	f001 f90c 	bl	8006f6c <putchar>
	fgcolor(13);
 8005d54:	200d      	movs	r0, #13
 8005d56:	f7fb ff7d 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 8005d5a:	20db      	movs	r0, #219	; 0xdb
 8005d5c:	f001 f906 	bl	8006f6c <putchar>
	fgcolor(11);
 8005d60:	200b      	movs	r0, #11
 8005d62:	f7fb ff77 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 8005d66:	20db      	movs	r0, #219	; 0xdb
 8005d68:	f001 f900 	bl	8006f6c <putchar>
	fgcolor(2);
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	f7fb ff71 	bl	8001c54 <fgcolor>
	printf("%c", 219);
 8005d72:	20db      	movs	r0, #219	; 0xdb
 8005d74:	f001 f8fa 	bl	8006f6c <putchar>
	fgcolor(15);
 8005d78:	200f      	movs	r0, #15
 8005d7a:	f7fb ff6b 	bl	8001c54 <fgcolor>

	gotoxy(x,y+=2);
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	88bb      	ldrh	r3, [r7, #4]
 8005d82:	3302      	adds	r3, #2
 8005d84:	80bb      	strh	r3, [r7, #4]
 8005d86:	88bb      	ldrh	r3, [r7, #4]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fb ff8e 	bl	8001cac <gotoxy>
	printf("Nar din nuke er klar dasker du blot til boardet for at sende den afted. Nar den er sendt afsted dasker du igen for at detonere den");
 8005d90:	483b      	ldr	r0, [pc, #236]	; (8005e80 <drawHelpScreen+0x294>)
 8005d92:	f001 f8d3 	bl	8006f3c <iprintf>
	gotoxy(x,++y);
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	88bb      	ldrh	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	80bb      	strh	r3, [r7, #4]
 8005d9e:	88bb      	ldrh	r3, [r7, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f7fb ff82 	bl	8001cac <gotoxy>
	printf("  |  ");
 8005da8:	4836      	ldr	r0, [pc, #216]	; (8005e84 <drawHelpScreen+0x298>)
 8005daa:	f001 f8c7 	bl	8006f3c <iprintf>
	gotoxy(x,++y);
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	88bb      	ldrh	r3, [r7, #4]
 8005db2:	3301      	adds	r3, #1
 8005db4:	80bb      	strh	r3, [r7, #4]
 8005db6:	88bb      	ldrh	r3, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fb ff76 	bl	8001cac <gotoxy>
	printf("- o -");
 8005dc0:	4831      	ldr	r0, [pc, #196]	; (8005e88 <drawHelpScreen+0x29c>)
 8005dc2:	f001 f8bb 	bl	8006f3c <iprintf>
	gotoxy(x,++y);
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	80bb      	strh	r3, [r7, #4]
 8005dce:	88bb      	ldrh	r3, [r7, #4]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fb ff6a 	bl	8001cac <gotoxy>
	printf(" / %c ", 92);
 8005dd8:	215c      	movs	r1, #92	; 0x5c
 8005dda:	482c      	ldr	r0, [pc, #176]	; (8005e8c <drawHelpScreen+0x2a0>)
 8005ddc:	f001 f8ae 	bl	8006f3c <iprintf>

	gotoxy(x, y+=2);
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	3302      	adds	r3, #2
 8005de6:	80bb      	strh	r3, [r7, #4]
 8005de8:	88bb      	ldrh	r3, [r7, #4]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fb ff5d 	bl	8001cac <gotoxy>
	printf("Har du brug for hjælp kan du samle powerups op. De giver dig enten flere rumdele, eller slukker fjendernes kanoner.");
 8005df2:	4827      	ldr	r0, [pc, #156]	; (8005e90 <drawHelpScreen+0x2a4>)
 8005df4:	f001 f8a2 	bl	8006f3c <iprintf>
	gotoxy(x, ++y);
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	88bb      	ldrh	r3, [r7, #4]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	80bb      	strh	r3, [r7, #4]
 8005e00:	88bb      	ldrh	r3, [r7, #4]
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fb ff51 	bl	8001cac <gotoxy>
	printf("Men pas pa både dine egne og fjendens kugler kan ødelægge dine ekstra dele");
 8005e0a:	4822      	ldr	r0, [pc, #136]	; (8005e94 <drawHelpScreen+0x2a8>)
 8005e0c:	f001 f896 	bl	8006f3c <iprintf>
	drawBox(x, ++y, x+4, y+2, 1);
 8005e10:	88f8      	ldrh	r0, [r7, #6]
 8005e12:	88bb      	ldrh	r3, [r7, #4]
 8005e14:	3301      	adds	r3, #1
 8005e16:	80bb      	strh	r3, [r7, #4]
 8005e18:	88b9      	ldrh	r1, [r7, #4]
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	88bb      	ldrh	r3, [r7, #4]
 8005e20:	3302      	adds	r3, #2
 8005e22:	2401      	movs	r4, #1
 8005e24:	9400      	str	r4, [sp, #0]
 8005e26:	f7fb ff53 	bl	8001cd0 <drawBox>
	gotoxy(x+2, y+1);
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	88bb      	ldrh	r3, [r7, #4]
 8005e30:	3301      	adds	r3, #1
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fb ff39 	bl	8001cac <gotoxy>
	printf("$");
 8005e3a:	2024      	movs	r0, #36	; 0x24
 8005e3c:	f001 f896 	bl	8006f6c <putchar>

	gotoxy(x, y+=4);
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	88bb      	ldrh	r3, [r7, #4]
 8005e44:	3304      	adds	r3, #4
 8005e46:	80bb      	strh	r3, [r7, #4]
 8005e48:	88bb      	ldrh	r3, [r7, #4]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fb ff2d 	bl	8001cac <gotoxy>
	printf("Har du brug for at skjule spillet, trykker du blot pa 'f', så bliver spillet til en masse c-kode.");
 8005e52:	4811      	ldr	r0, [pc, #68]	; (8005e98 <drawHelpScreen+0x2ac>)
 8005e54:	f001 f872 	bl	8006f3c <iprintf>
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd90      	pop	{r4, r7, pc}
 8005e60:	08008b20 	.word	0x08008b20
 8005e64:	08008b2c 	.word	0x08008b2c
 8005e68:	08008b78 	.word	0x08008b78
 8005e6c:	08008b8c 	.word	0x08008b8c
 8005e70:	08008be4 	.word	0x08008be4
 8005e74:	08008c04 	.word	0x08008c04
 8005e78:	08008c40 	.word	0x08008c40
 8005e7c:	08008c78 	.word	0x08008c78
 8005e80:	08008c9c 	.word	0x08008c9c
 8005e84:	08008d20 	.word	0x08008d20
 8005e88:	08008d28 	.word	0x08008d28
 8005e8c:	08008d30 	.word	0x08008d30
 8005e90:	08008d38 	.word	0x08008d38
 8005e94:	08008db0 	.word	0x08008db0
 8005e98:	08008e00 	.word	0x08008e00

08005e9c <drawWindow>:
/**
  * @brief  Draws the outer bounds
  * @param  isGameWindow: 1 = deletes bottom layer
  * @retval None
  */
void drawWindow(uint8_t isGameWindow){
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
	drawBox(1,1,screenWidth, screenHeight,0);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	232b      	movs	r3, #43	; 0x2b
 8005eac:	229c      	movs	r2, #156	; 0x9c
 8005eae:	2101      	movs	r1, #1
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7fb ff0d 	bl	8001cd0 <drawBox>
	if(isGameWindow){//bottom line is deleted
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d039      	beq.n	8005f30 <drawWindow+0x94>
		gotoxy(1,screenHeight-1);
 8005ebc:	212a      	movs	r1, #42	; 0x2a
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f7fb fef4 	bl	8001cac <gotoxy>
		printf(" ");
 8005ec4:	2020      	movs	r0, #32
 8005ec6:	f001 f851 	bl	8006f6c <putchar>
		gotoxy(1,screenHeight-2);
 8005eca:	2129      	movs	r1, #41	; 0x29
 8005ecc:	2001      	movs	r0, #1
 8005ece:	f7fb feed 	bl	8001cac <gotoxy>
		printf(" ");
 8005ed2:	2020      	movs	r0, #32
 8005ed4:	f001 f84a 	bl	8006f6c <putchar>
		gotoxy(1,screenHeight-3);
 8005ed8:	2128      	movs	r1, #40	; 0x28
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7fb fee6 	bl	8001cac <gotoxy>
		printf(" ");
 8005ee0:	2020      	movs	r0, #32
 8005ee2:	f001 f843 	bl	8006f6c <putchar>
		gotoxy(screenWidth,screenHeight-1);
 8005ee6:	212a      	movs	r1, #42	; 0x2a
 8005ee8:	209c      	movs	r0, #156	; 0x9c
 8005eea:	f7fb fedf 	bl	8001cac <gotoxy>
		printf(" ");
 8005eee:	2020      	movs	r0, #32
 8005ef0:	f001 f83c 	bl	8006f6c <putchar>
		gotoxy(screenWidth,screenHeight-2);
 8005ef4:	2129      	movs	r1, #41	; 0x29
 8005ef6:	209c      	movs	r0, #156	; 0x9c
 8005ef8:	f7fb fed8 	bl	8001cac <gotoxy>
		printf(" ");
 8005efc:	2020      	movs	r0, #32
 8005efe:	f001 f835 	bl	8006f6c <putchar>
		gotoxy(screenWidth,screenHeight-3);
 8005f02:	2128      	movs	r1, #40	; 0x28
 8005f04:	209c      	movs	r0, #156	; 0x9c
 8005f06:	f7fb fed1 	bl	8001cac <gotoxy>
		printf(" ");
 8005f0a:	2020      	movs	r0, #32
 8005f0c:	f001 f82e 	bl	8006f6c <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8005f10:	2301      	movs	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e009      	b.n	8005f2a <drawWindow+0x8e>
			gotoxy(x, screenHeight);
 8005f16:	212b      	movs	r1, #43	; 0x2b
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fb fec7 	bl	8001cac <gotoxy>
			printf(" ");
 8005f1e:	2020      	movs	r0, #32
 8005f20:	f001 f824 	bl	8006f6c <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b9c      	cmp	r3, #156	; 0x9c
 8005f2e:	ddf2      	ble.n	8005f16 <drawWindow+0x7a>

		}
	}
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <chargeNuke>:
/**
  * @brief  Tests how charged the nuke is
  * @param  gameState: the current state of the game
  * @retval None
  */
void chargeNuke(gameState_t* gameState){
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <chargeNuke+0xc0>)
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	8019      	strh	r1, [r3, #0]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	0c12      	lsrs	r2, r2, #16
 8005f50:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime <= 500){
 8005f52:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <chargeNuke+0xc4>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f62:	d805      	bhi.n	8005f70 <chargeNuke+0x38>
		color[0] = 1;
 8005f64:	2301      	movs	r3, #1
 8005f66:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8005f70:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <chargeNuke+0xc4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f80:	d905      	bls.n	8005f8e <chargeNuke+0x56>
		color[0] = 1;
 8005f82:	2301      	movs	r3, #1
 8005f84:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 8005f8e:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <chargeNuke+0xc4>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9e:	d905      	bls.n	8005fac <chargeNuke+0x74>
		color[0] = 1;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <chargeNuke+0xc4>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d912      	bls.n	8005fe6 <chargeNuke+0xae>
		color[0] = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73bb      	strb	r3, [r7, #14]
		if(gameState->nuke->readyState == 0) gameState->soundToPlay = 2; //Plays the charge sound if it's the first time.
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	7e5b      	ldrb	r3, [r3, #25]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <chargeNuke+0xa6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		gameState->nuke->readyState = 1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	765a      	strb	r2, [r3, #25]
	}
	RGBColor(color);
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc ff72 	bl	8002ed4 <RGBColor>
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	08008e64 	.word	0x08008e64
 8005ffc:	200001c8 	.word	0x200001c8

08006000 <detonateNuke>:
/**
  * @brief  Deletes the unexploded nuke, draws the explosion circle and deletes all enemies in a given radius
  * @param  None
  * @retval None
  */
void detonateNuke(gameState_t* gameState){
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	//Resets nuke
	gameState->nuke->isDeployed = 0;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	2200      	movs	r2, #0
 800600e:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	765a      	strb	r2, [r3, #25]

	//Deletes the unexploded nuke
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f7fd fb66 	bl	80036f0 <fpToInt>
 8006024:	4603      	mov	r3, r0
 8006026:	461c      	mov	r4, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fb5e 	bl	80036f0 <fpToInt>
 8006034:	4603      	mov	r3, r0
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	4620      	mov	r0, r4
 800603e:	f7fb fe35 	bl	8001cac <gotoxy>
	printf("     ");
 8006042:	483e      	ldr	r0, [pc, #248]	; (800613c <detonateNuke+0x13c>)
 8006044:	f000 ff7a 	bl	8006f3c <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fb4e 	bl	80036f0 <fpToInt>
 8006054:	4603      	mov	r3, r0
 8006056:	461c      	mov	r4, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fb46 	bl	80036f0 <fpToInt>
 8006064:	4603      	mov	r3, r0
 8006066:	3302      	adds	r3, #2
 8006068:	0fda      	lsrs	r2, r3, #31
 800606a:	4413      	add	r3, r2
 800606c:	105b      	asrs	r3, r3, #1
 800606e:	4619      	mov	r1, r3
 8006070:	4620      	mov	r0, r4
 8006072:	f7fb fe1b 	bl	8001cac <gotoxy>
	printf("     ");
 8006076:	4831      	ldr	r0, [pc, #196]	; (800613c <detonateNuke+0x13c>)
 8006078:	f000 ff60 	bl	8006f3c <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd fb34 	bl	80036f0 <fpToInt>
 8006088:	4603      	mov	r3, r0
 800608a:	461c      	mov	r4, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd fb2c 	bl	80036f0 <fpToInt>
 8006098:	4603      	mov	r3, r0
 800609a:	3304      	adds	r3, #4
 800609c:	0fda      	lsrs	r2, r3, #31
 800609e:	4413      	add	r3, r2
 80060a0:	105b      	asrs	r3, r3, #1
 80060a2:	4619      	mov	r1, r3
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7fb fe01 	bl	8001cac <gotoxy>
	printf("     ");
 80060aa:	4824      	ldr	r0, [pc, #144]	; (800613c <detonateNuke+0x13c>)
 80060ac:	f000 ff46 	bl	8006f3c <iprintf>


	drawNukeCircle(gameState);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fe fc0b 	bl	80048cc <drawNukeCircle>

	gameState->nuke->lastDetonationTime = runtime;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <detonateNuke+0x140>)
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2020 	strb.w	r2, [r3, #32]

	//Loops over all the enemies and deletes the ones closer than 35 uints
	enemyNode_t* current = gameState->enemyLL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 80060d0:	e02c      	b.n	800612c <detonateNuke+0x12c>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fd fb86 	bl	8003804 <fpAbs>
 80060f8:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 80060fa:	4423      	add	r3, r4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fd fb81 	bl	8003804 <fpAbs>
 8006102:	4603      	mov	r3, r0
 8006104:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8006108:	4618      	mov	r0, r3
 800610a:	f7fd fb0a 	bl	8003722 <fpMultiply>
 800610e:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 8006110:	2023      	movs	r0, #35	; 0x23
 8006112:	f7fd fad8 	bl	80036c6 <intToFp>
 8006116:	4602      	mov	r2, r0
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4293      	cmp	r3, r2
 800611c:	d203      	bcs.n	8006126 <detonateNuke+0x126>
			deleteEnemyNode(gameState, current);
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fe ffa7 	bl	8005074 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1cf      	bne.n	80060d2 <detonateNuke+0xd2>
	}
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}
 800613c:	08008e68 	.word	0x08008e68
 8006140:	200001c8 	.word	0x200001c8

08006144 <shootNuke>:
/**
  * @brief  Checks if the nuke should be deployed and does if so
  * @param  gameState: te current state of the game
  * @retval None
  */
void shootNuke(gameState_t* gameState){
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register of the accelerometer
 800614c:	2301      	movs	r3, #1
 800614e:	2200      	movs	r2, #0
 8006150:	2103      	movs	r1, #3
 8006152:	2098      	movs	r0, #152	; 0x98
 8006154:	f7fc fbe4 	bl	8002920 <I2C_Read>
 8006158:	4603      	mov	r3, r0
 800615a:	77fb      	strb	r3, [r7, #31]

	//If the 8'th bit (tap-detection) is on and the nuke is ready and deployed if it isn't. If it has be deployed for a second detonate it
	if(x > 128 && gameState->nuke->readyState){
 800615c:	7ffb      	ldrb	r3, [r7, #31]
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d947      	bls.n	80061f2 <shootNuke+0xae>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	7e5b      	ldrb	r3, [r3, #25]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d042      	beq.n	80061f2 <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	7e1b      	ldrb	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d132      	bne.n	80061dc <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800618a:	f7fd fa9c 	bl	80036c6 <intToFp>
 800618e:	4603      	mov	r3, r0
 8006190:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	461a      	mov	r2, r3
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061a0:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	3308      	adds	r3, #8
 80061aa:	f107 0214 	add.w	r2, r7, #20
 80061ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061b2:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	3310      	adds	r3, #16
 80061bc:	f107 020c 	add.w	r2, r7, #12
 80061c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c4:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	2201      	movs	r2, #1
 80061ce:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	4a09      	ldr	r2, [pc, #36]	; (80061fc <shootNuke+0xb8>)
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
		}else{
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
		}
	}
}
 80061da:	e00a      	b.n	80061f2 <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 80061dc:	4b07      	ldr	r3, [pc, #28]	; (80061fc <shootNuke+0xb8>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b64      	cmp	r3, #100	; 0x64
 80061ea:	d902      	bls.n	80061f2 <shootNuke+0xae>
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff07 	bl	8006000 <detonateNuke>
}
 80061f2:	bf00      	nop
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	200001c8 	.word	0x200001c8

08006200 <updateNuke>:
/**
  * @brief  Update the state of the nuke
  * @param  None
  * @retval None
  */
void updateNuke(gameState_t* gameState){
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fe95 	bl	8005f38 <chargeNuke>
	shootNuke(gameState);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ff98 	bl	8006144 <shootNuke>

	//If the nuke is deployed update it's position
	if(gameState->nuke->isDeployed == 1){
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	7e1b      	ldrb	r3, [r3, #24]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d113      	bne.n	8006246 <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	440a      	add	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	440a      	add	r2, r1
 8006244:	60da      	str	r2, [r3, #12]
	}

	//If it's more than 0.1s since detonation and the circle is not clear, clear it.
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <updateNuke+0x84>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	; 0x64
 8006254:	d912      	bls.n	800627c <updateNuke+0x7c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10c      	bne.n	800627c <updateNuke+0x7c>
		clearNukeCircle(gameState);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fe fc5c 	bl	8004b20 <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006270:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200001c8 	.word	0x200001c8

08006288 <spawnPowerup>:
/**
  * @brief  Checks if it should spawn a powerup and does if it should
  * @param  gameState: the current state of the game
  * @retval None
  */
void spawnPowerup(gameState_t* gameState){
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8006290:	4b1e      	ldr	r3, [pc, #120]	; (800630c <spawnPowerup+0x84>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629e:	d330      	bcc.n	8006302 <spawnPowerup+0x7a>
		gameState->powerup.lastUseTime=runtime;
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <spawnPowerup+0x84>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	665a      	str	r2, [r3, #100]	; 0x64
		gameState->powerup.isVisible=1;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48



		position_t spawnPos = {gameState->dropper.position.x,intToFp(5)*yScale};
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	2005      	movs	r0, #5
 80062b8:	f7fd fa05 	bl	80036c6 <intToFp>
 80062bc:	4603      	mov	r3, r0
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
		vector_t vel = {intToFp(0), 0x00008000*yScale}; //0x00008000 = 0.5
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fd f9ff 	bl	80036c6 <intToFp>
 80062c8:	4603      	mov	r3, r0
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062d0:	60fb      	str	r3, [r7, #12]
		gameState->powerup.position=spawnPos;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	334c      	adds	r3, #76	; 0x4c
 80062d6:	f107 0210 	add.w	r2, r7, #16
 80062da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062de:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3354      	adds	r3, #84	; 0x54
 80062e6:	f107 0210 	add.w	r2, r7, #16
 80062ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ee:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	335c      	adds	r3, #92	; 0x5c
 80062f6:	f107 0208 	add.w	r2, r7, #8
 80062fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062fe:	e883 0003 	stmia.w	r3, {r0, r1}

	}
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200001c8 	.word	0x200001c8

08006310 <updatePowerup>:
/**
  * @brief  Updates the state of the powerup
  * @param  gameState: the current state of the game
  * @retval None
  */
void updatePowerup(gameState_t* gameState){
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80ea 	beq.w	80064f8 <updatePowerup+0x1e8>
		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633a:	441a      	add	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	659a      	str	r2, [r3, #88]	; 0x58

		//Checks if the powerup is on level with the player
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale >= fpToInt(gameState->spaceship.position.y)/yScale-3){
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd f9d3 	bl	80036f0 <fpToInt>
 800634a:	4603      	mov	r3, r0
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	b29b      	uxth	r3, r3
 8006350:	461c      	mov	r4, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd f9ca 	bl	80036f0 <fpToInt>
 800635c:	4603      	mov	r3, r0
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b03      	subs	r3, #3
 8006364:	429c      	cmp	r4, r3
 8006366:	f2c0 809d 	blt.w	80064a4 <updatePowerup+0x194>

			//Checks if the player collides with the powerup
			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006370:	2b03      	cmp	r3, #3
 8006372:	d125      	bne.n	80063c0 <updatePowerup+0xb0>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	4618      	mov	r0, r3
 800637a:	f7fd f9b9 	bl	80036f0 <fpToInt>
 800637e:	4603      	mov	r3, r0
 8006380:	f103 0408 	add.w	r4, r3, #8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd f9b1 	bl	80036f0 <fpToInt>
 800638e:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8006390:	429c      	cmp	r4, r3
 8006392:	db12      	blt.n	80063ba <updatePowerup+0xaa>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	4618      	mov	r0, r3
 800639a:	f7fd f9a9 	bl	80036f0 <fpToInt>
 800639e:	4603      	mov	r3, r0
 80063a0:	f1a3 0408 	sub.w	r4, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fd f9a1 	bl	80036f0 <fpToInt>
 80063ae:	4603      	mov	r3, r0
 80063b0:	3304      	adds	r3, #4
 80063b2:	429c      	cmp	r4, r3
 80063b4:	dc01      	bgt.n	80063ba <updatePowerup+0xaa>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <updatePowerup+0xac>
 80063ba:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e02a      	b.n	8006416 <updatePowerup+0x106>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fd f993 	bl	80036f0 <fpToInt>
 80063ca:	4603      	mov	r3, r0
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	18cc      	adds	r4, r1, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fd f984 	bl	80036f0 <fpToInt>
 80063e8:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 80063ea:	429c      	cmp	r4, r3
 80063ec:	db11      	blt.n	8006412 <updatePowerup+0x102>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fd f97c 	bl	80036f0 <fpToInt>
 80063f8:	4603      	mov	r3, r0
 80063fa:	1e5c      	subs	r4, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006400:	4618      	mov	r0, r3
 8006402:	f7fd f975 	bl	80036f0 <fpToInt>
 8006406:	4603      	mov	r3, r0
 8006408:	3304      	adds	r3, #4
 800640a:	429c      	cmp	r4, r3
 800640c:	dc01      	bgt.n	8006412 <updatePowerup+0x102>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <updatePowerup+0x104>
 8006412:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8006414:	73fb      	strb	r3, [r7, #15]
			}

			if(powerupIsTaken){
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d043      	beq.n	80064a4 <updatePowerup+0x194>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006420:	4618      	mov	r0, r3
 8006422:	f7fd f965 	bl	80036f0 <fpToInt>
 8006426:	4603      	mov	r3, r0
 8006428:	b2dc      	uxtb	r4, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642e:	4618      	mov	r0, r3
 8006430:	f7fd f95e 	bl	80036f0 <fpToInt>
 8006434:	4603      	mov	r3, r0
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	4620      	mov	r0, r4
 8006440:	f7fe f938 	bl	80046b4 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				gameState->soundToPlay = 3;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2203      	movs	r2, #3
 8006450:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
				uint8_t powerupType = rand()%2;
 8006454:	f000 fe44 	bl	80070e0 <rand>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	bfb8      	it	lt
 8006462:	425b      	neglt	r3, r3
 8006464:	73bb      	strb	r3, [r7, #14]

				if(powerupType==0){ //extra spaceship
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d114      	bne.n	8006496 <updatePowerup+0x186>
					if(gameState->spaceship.numberOfParts<3){
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006472:	2b02      	cmp	r3, #2
 8006474:	d808      	bhi.n	8006488 <updatePowerup+0x178>
						gameState->spaceship.numberOfParts++;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800647c:	3301      	adds	r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006486:	e00d      	b.n	80064a4 <updatePowerup+0x194>
					} else {
						gameState->score += 100;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648c:	3364      	adds	r3, #100	; 0x64
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	86da      	strh	r2, [r3, #54]	; 0x36
 8006494:	e006      	b.n	80064a4 <updatePowerup+0x194>
					}
				} else { //disable enemy canons
					gameState->enemyCanonDisableTime=runtime;
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <updatePowerup+0x1f0>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
					gameState->enemyCanonsUnchanged =0;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	741a      	strb	r2, [r3, #16]
				}
			}
		}

		//Deletes the powerup if below the screen
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale+1){
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fd f921 	bl	80036f0 <fpToInt>
 80064ae:	4603      	mov	r3, r0
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	b29c      	uxth	r4, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd f919 	bl	80036f0 <fpToInt>
 80064be:	4603      	mov	r3, r0
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	429c      	cmp	r4, r3
 80064c6:	d217      	bcs.n	80064f8 <updatePowerup+0x1e8>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd f90f 	bl	80036f0 <fpToInt>
 80064d2:	4603      	mov	r3, r0
 80064d4:	b2dc      	uxtb	r4, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd f908 	bl	80036f0 <fpToInt>
 80064e0:	4603      	mov	r3, r0
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7fe f8e2 	bl	80046b4 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}
 8006500:	200001c8 	.word	0x200001c8

08006504 <drawPowerup>:
/**
  * @brief  Draw the powerup to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawPowerup(gameState_t* gameState){
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006512:	2b00      	cmp	r3, #0
 8006514:	d02f      	beq.n	8006576 <drawPowerup+0x72>
		deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	4618      	mov	r0, r3
 800651c:	f7fd f8e8 	bl	80036f0 <fpToInt>
 8006520:	4603      	mov	r3, r0
 8006522:	b2dc      	uxtb	r4, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	4618      	mov	r0, r3
 800652a:	f7fd f8e1 	bl	80036f0 <fpToInt>
 800652e:	4603      	mov	r3, r0
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	b29b      	uxth	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4619      	mov	r1, r3
 8006538:	4620      	mov	r0, r4
 800653a:	f7fe f8bb 	bl	80046b4 <deletePowerupGraphics>
		drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd f8d4 	bl	80036f0 <fpToInt>
 8006548:	4603      	mov	r3, r0
 800654a:	b2dc      	uxtb	r4, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006550:	4618      	mov	r0, r3
 8006552:	f7fd f8cd 	bl	80036f0 <fpToInt>
 8006556:	4603      	mov	r3, r0
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4619      	mov	r1, r3
 8006560:	4620      	mov	r0, r4
 8006562:	f7fe f8d3 	bl	800470c <drawPowerupGraphics>
		gameState->powerup.position=gameState->powerup.nextPosition;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	334c      	adds	r3, #76	; 0x4c
 800656c:	3254      	adds	r2, #84	; 0x54
 800656e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006572:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	bd90      	pop	{r4, r7, pc}
	...

08006580 <playSound>:
/**
  * @brief  Checks if a sound should be played, and does if so
  * @param  gameState: the current state of the game
  * @retval None
  */
void playSound(gameState_t* gameState){
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	//Checks if a sound should play
	if(gameState->soundToPlay == 0) return;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d073      	beq.n	800667a <playSound+0xfa>

	//Checks if the sound has changed
	if(gameState->soundToPlay != gameState->lastSoundToPlay){
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800659e:	429a      	cmp	r2, r3
 80065a0:	d003      	beq.n	80065aa <playSound+0x2a>
		gameState->soundIndex = 0;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	}

	//Checks if the current tone has completed
	if(runtime - gameState->soundTime > sounds[gameState->soundToPlay][gameState->soundIndex-1].duration){
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <playSound+0x104>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	1ad2      	subs	r2, r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80065bc:	4619      	mov	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4830      	ldr	r0, [pc, #192]	; (8006688 <playSound+0x108>)
 80065c8:	0089      	lsls	r1, r1, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4403      	add	r3, r0
 80065d0:	885b      	ldrh	r3, [r3, #2]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d94a      	bls.n	800666c <playSound+0xec>
		setFreq(sounds[gameState->soundToPlay][gameState->soundIndex].frequency);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80065dc:	4618      	mov	r0, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80065e4:	4619      	mov	r1, r3
 80065e6:	4a28      	ldr	r2, [pc, #160]	; (8006688 <playSound+0x108>)
 80065e8:	0083      	lsls	r3, r0, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fc fcdd 	bl	8002fb0 <setFreq>
		toggleBuzzer(1);
 80065f6:	2001      	movs	r0, #1
 80065f8:	f7fc fd22 	bl	8003040 <toggleBuzzer>


		//If it reaches {0,0} stop playing any sound
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006602:	4618      	mov	r0, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800660a:	4619      	mov	r1, r3
 800660c:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <playSound+0x108>)
 800660e:	0083      	lsls	r3, r0, #2
 8006610:	440b      	add	r3, r1
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11a      	bne.n	8006652 <playSound+0xd2>
				sounds[gameState->soundToPlay][gameState->soundIndex].frequency == 0){
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006622:	4618      	mov	r0, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800662a:	4619      	mov	r1, r3
 800662c:	4a16      	ldr	r2, [pc, #88]	; (8006688 <playSound+0x108>)
 800662e:	0083      	lsls	r3, r0, #2
 8006630:	440b      	add	r3, r1
 8006632:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <playSound+0xd2>
			toggleBuzzer(0);
 800663a:	2000      	movs	r0, #0
 800663c:	f7fc fd00 	bl	8003040 <toggleBuzzer>
			gameState->soundToPlay = 0;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			gameState->soundIndex = 0;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8006650:	e00c      	b.n	800666c <playSound+0xec>
		}else{
			gameState->soundIndex++;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8006658:	3301      	adds	r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			gameState->soundTime = runtime;
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <playSound+0x104>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		}
	}
	gameState->lastSoundToPlay = gameState->soundToPlay;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8006678:	e000      	b.n	800667c <playSound+0xfc>
	if(gameState->soundToPlay == 0) return;
 800667a:	bf00      	nop
}
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	200001c8 	.word	0x200001c8
 8006688:	08008e88 	.word	0x08008e88

0800668c <updateSpaceship>:
/**
  * @brief  Updates the position of the spaceship
  * @param  gameState: the current state of the game
  * @retval None
  */
void updateSpaceship(gameState_t* gameState){
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	//Reads the potentiometer and calculates the x-value by dividing it by 13 (2048 / 156) (2048 is half of the potentiometer range)
	uint16_t potVal = readPotentiometer();
 8006694:	f7fc fb14 	bl	8002cc0 <readPotentiometer>
 8006698:	4603      	mov	r3, r0
 800669a:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 800669c:	897b      	ldrh	r3, [r7, #10]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fd f811 	bl	80036c6 <intToFp>
 80066a4:	4604      	mov	r4, r0
 80066a6:	200d      	movs	r0, #13
 80066a8:	f7fd f80d 	bl	80036c6 <intToFp>
 80066ac:	4603      	mov	r3, r0
 80066ae:	4619      	mov	r1, r3
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fd f857 	bl	8003764 <fpDivide>
 80066b6:	60f8      	str	r0, [r7, #12]

	//Ant jitter
	if(fpAbs(gameState->spaceship.prePosition.x - x) < intToFp(2)){
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fd f89f 	bl	8003804 <fpAbs>
 80066c6:	4604      	mov	r4, r0
 80066c8:	2002      	movs	r0, #2
 80066ca:	f7fc fffc 	bl	80036c6 <intToFp>
 80066ce:	4603      	mov	r3, r0
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d354      	bcc.n	800677e <updateSpaceship+0xf2>
		return;
	}

	//Stops the spaceship at the edges
	if(gameState->spaceship.numberOfParts==1){
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d114      	bne.n	8006708 <updateSpaceship+0x7c>
		if(fpToInt(x) <= 2){
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7fd f806 	bl	80036f0 <fpToInt>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d803      	bhi.n	80066f2 <updateSpaceship+0x66>
			x = intToFp(3);
 80066ea:	2003      	movs	r0, #3
 80066ec:	f7fc ffeb 	bl	80036c6 <intToFp>
 80066f0:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155){
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7fc fffc 	bl	80036f0 <fpToInt>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b9a      	cmp	r3, #154	; 0x9a
 80066fc:	d937      	bls.n	800676e <updateSpaceship+0xe2>
			x = intToFp(154);
 80066fe:	209a      	movs	r0, #154	; 0x9a
 8006700:	f7fc ffe1 	bl	80036c6 <intToFp>
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	e032      	b.n	800676e <updateSpaceship+0xe2>
		}
	}
	else if(gameState->spaceship.numberOfParts==2){
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800670e:	2b02      	cmp	r3, #2
 8006710:	d114      	bne.n	800673c <updateSpaceship+0xb0>
		if(fpToInt(x) <= 2){
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7fc ffec 	bl	80036f0 <fpToInt>
 8006718:	4603      	mov	r3, r0
 800671a:	2b02      	cmp	r3, #2
 800671c:	d803      	bhi.n	8006726 <updateSpaceship+0x9a>
			x = intToFp(3);
 800671e:	2003      	movs	r0, #3
 8006720:	f7fc ffd1 	bl	80036c6 <intToFp>
 8006724:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7fc ffe2 	bl	80036f0 <fpToInt>
 800672c:	4603      	mov	r3, r0
 800672e:	2b93      	cmp	r3, #147	; 0x93
 8006730:	d91d      	bls.n	800676e <updateSpaceship+0xe2>
			x = intToFp(154-7);
 8006732:	2093      	movs	r0, #147	; 0x93
 8006734:	f7fc ffc7 	bl	80036c6 <intToFp>
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	e018      	b.n	800676e <updateSpaceship+0xe2>
		}
	}
	else if(gameState->spaceship.numberOfParts==3){
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006742:	2b03      	cmp	r3, #3
 8006744:	d113      	bne.n	800676e <updateSpaceship+0xe2>
		if(fpToInt(x) <= 2+7){
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7fc ffd2 	bl	80036f0 <fpToInt>
 800674c:	4603      	mov	r3, r0
 800674e:	2b09      	cmp	r3, #9
 8006750:	d803      	bhi.n	800675a <updateSpaceship+0xce>
			x = intToFp(3+7);
 8006752:	200a      	movs	r0, #10
 8006754:	f7fc ffb7 	bl	80036c6 <intToFp>
 8006758:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7fc ffc8 	bl	80036f0 <fpToInt>
 8006760:	4603      	mov	r3, r0
 8006762:	2b93      	cmp	r3, #147	; 0x93
 8006764:	d903      	bls.n	800676e <updateSpaceship+0xe2>
			x = intToFp(154-7);
 8006766:	2093      	movs	r0, #147	; 0x93
 8006768:	f7fc ffad 	bl	80036c6 <intToFp>
 800676c:	60f8      	str	r0, [r7, #12]
		}
	}
	gameState->spaceship.prePosition.x = gameState->spaceship.position.x;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	615a      	str	r2, [r3, #20]
	gameState->spaceship.nextPosition.x = x;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
 800677c:	e000      	b.n	8006780 <updateSpaceship+0xf4>
		return;
 800677e:	bf00      	nop
}
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bd90      	pop	{r4, r7, pc}
	...

08006788 <shootSpaceship>:
/**
  * @brief  Shoot a bullet if center is pressed
  * @param  gameState: the current state of the game
  * @retval None
  */
void shootSpaceship(gameState_t* gameState){
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b09e      	sub	sp, #120	; 0x78
 800678c:	af04      	add	r7, sp, #16
 800678e:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8006790:	f7fb ff0c 	bl	80025ac <centerIsPressed>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80d2 	beq.w	8006940 <shootSpaceship+0x1b8>
		gameState->soundToPlay = 1;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100) + intToFp(gameState->difficulty), 0x00004000) + intToFp(1); //level * 0.25 + 1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a8:	4a67      	ldr	r2, [pc, #412]	; (8006948 <shootSpaceship+0x1c0>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fc ff87 	bl	80036c6 <intToFp>
 80067b8:	4604      	mov	r4, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc ff7f 	bl	80036c6 <intToFp>
 80067c8:	4603      	mov	r3, r0
 80067ca:	4423      	add	r3, r4
 80067cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fc ffa6 	bl	8003722 <fpMultiply>
 80067d6:	4604      	mov	r4, r0
 80067d8:	2001      	movs	r0, #1
 80067da:	f7fc ff74 	bl	80036c6 <intToFp>
 80067de:	4603      	mov	r3, r0
 80067e0:	4423      	add	r3, r4
 80067e2:	663b      	str	r3, [r7, #96]	; 0x60

		//Shoots a bullet for each part of the ship
		for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 80067e4:	2300      	movs	r3, #0
 80067e6:	667b      	str	r3, [r7, #100]	; 0x64
 80067e8:	e0a2      	b.n	8006930 <shootSpaceship+0x1a8>

			if(i == 2){
 80067ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d14b      	bne.n	8006888 <shootSpaceship+0x100>
				vector_t bulletVelocity = {intToFp(0),fpMultiply(0xffff8000 * yScale, levelMultiplier)}; //{0, -0,5 * Multiplier}
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7fc ff68 	bl	80036c6 <intToFp>
 80067f6:	4603      	mov	r3, r0
 80067f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80067fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067fc:	4853      	ldr	r0, [pc, #332]	; (800694c <shootSpaceship+0x1c4>)
 80067fe:	f7fc ff90 	bl	8003722 <fpMultiply>
 8006802:	4603      	mov	r3, r0
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69dc      	ldr	r4, [r3, #28]
 800680a:	2007      	movs	r0, #7
 800680c:	f7fc ff5b 	bl	80036c6 <intToFp>
 8006810:	4603      	mov	r3, r0
 8006812:	1ae3      	subs	r3, r4, r3
 8006814:	653b      	str	r3, [r7, #80]	; 0x50
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1c      	ldr	r4, [r3, #32]
 800681a:	2001      	movs	r0, #1
 800681c:	f7fc ff53 	bl	80036c6 <intToFp>
 8006820:	4603      	mov	r3, r0
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	1ae3      	subs	r3, r4, r3
 8006826:	657b      	str	r3, [r7, #84]	; 0x54
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8006828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	611a      	str	r2, [r3, #16]
 8006838:	615a      	str	r2, [r3, #20]
 800683a:	619a      	str	r2, [r3, #24]
 800683c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006840:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006848:	e883 0003 	stmia.w	r3, {r0, r1}
 800684c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006850:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006858:	e883 0003 	stmia.w	r3, {r0, r1}
 800685c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006860:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006868:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 800686c:	687d      	ldr	r5, [r7, #4]
 800686e:	466c      	mov	r4, sp
 8006870:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800687a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800687e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006880:	4628      	mov	r0, r5
 8006882:	f7fe fb92 	bl	8004faa <appendBullet>
 8006886:	e050      	b.n	800692a <shootSpaceship+0x1a2>
			} else {
				vector_t bulletVelocity = {intToFp(0),fpMultiply(0xffff8000 * yScale, levelMultiplier)}; //{0, -0,5 * Multiplier}
 8006888:	2000      	movs	r0, #0
 800688a:	f7fc ff1c 	bl	80036c6 <intToFp>
 800688e:	4603      	mov	r3, r0
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006892:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006894:	482d      	ldr	r0, [pc, #180]	; (800694c <shootSpaceship+0x1c4>)
 8006896:	f7fc ff44 	bl	8003722 <fpMultiply>
 800689a:	4603      	mov	r3, r0
 800689c:	633b      	str	r3, [r7, #48]	; 0x30
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69dc      	ldr	r4, [r3, #28]
 80068a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	00d2      	lsls	r2, r2, #3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc ff09 	bl	80036c6 <intToFp>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4423      	add	r3, r4
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1c      	ldr	r4, [r3, #32]
 80068be:	2001      	movs	r0, #1
 80068c0:	f7fc ff01 	bl	80036c6 <intToFp>
 80068c4:	4603      	mov	r3, r0
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	1ae3      	subs	r3, r4, r3
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	611a      	str	r2, [r3, #16]
 80068dc:	615a      	str	r2, [r3, #20]
 80068de:	619a      	str	r2, [r3, #24]
 80068e0:	f107 0308 	add.w	r3, r7, #8
 80068e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80068e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80068f0:	f107 0310 	add.w	r3, r7, #16
 80068f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80068f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006900:	f107 0318 	add.w	r3, r7, #24
 8006904:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800690c:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8006910:	687d      	ldr	r5, [r7, #4]
 8006912:	466c      	mov	r4, sp
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800691a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800691e:	f107 0308 	add.w	r3, r7, #8
 8006922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006924:	4628      	mov	r0, r5
 8006926:	f7fe fb40 	bl	8004faa <appendBullet>
		for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 800692a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692c:	3301      	adds	r3, #1
 800692e:	667b      	str	r3, [r7, #100]	; 0x64
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006936:	461a      	mov	r2, r3
 8006938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693a:	4293      	cmp	r3, r2
 800693c:	f6ff af55 	blt.w	80067ea <shootSpaceship+0x62>
			}
		}
	}
}
 8006940:	bf00      	nop
 8006942:	3768      	adds	r7, #104	; 0x68
 8006944:	46bd      	mov	sp, r7
 8006946:	bdb0      	pop	{r4, r5, r7, pc}
 8006948:	51eb851f 	.word	0x51eb851f
 800694c:	ffff0000 	.word	0xffff0000

08006950 <drawSpaceship>:
/**
  * @brief  Draws the spaceship to the screen
  * @param  gameState: the current state of the game
  * @retval None
  */
void drawSpaceship(gameState_t* gameState){
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	//Draw attachment points
	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4618      	mov	r0, r3
 800695e:	f7fc fec7 	bl	80036f0 <fpToInt>
 8006962:	4603      	mov	r3, r0
 8006964:	b2dc      	uxtb	r4, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fc fec0 	bl	80036f0 <fpToInt>
 8006970:	4603      	mov	r3, r0
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	4619      	mov	r1, r3
 800697a:	4620      	mov	r0, r4
 800697c:	f7fd fe78 	bl	8004670 <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f7fc feb3 	bl	80036f0 <fpToInt>
 800698a:	4603      	mov	r3, r0
 800698c:	b2dc      	uxtb	r4, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc feac 	bl	80036f0 <fpToInt>
 8006998:	4603      	mov	r3, r0
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7fd fe42 	bl	800462c <drawAttachmentRods>

	//Draw all the parts
	for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e06a      	b.n	8006a84 <drawSpaceship+0x134>
		if(i == 2){
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d12c      	bne.n	8006a0e <drawSpaceship+0xbe>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fc fe99 	bl	80036f0 <fpToInt>
 80069be:	4603      	mov	r3, r0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	3b07      	subs	r3, #7
 80069c4:	b2dc      	uxtb	r4, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fc fe90 	bl	80036f0 <fpToInt>
 80069d0:	4603      	mov	r3, r0
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	f7fd fddd 	bl	800459a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fc fe83 	bl	80036f0 <fpToInt>
 80069ea:	4603      	mov	r3, r0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	3b07      	subs	r3, #7
 80069f0:	b2dc      	uxtb	r4, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fc fe7a 	bl	80036f0 <fpToInt>
 80069fc:	4603      	mov	r3, r0
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7fd fd7e 	bl	8004508 <drawMe>
 8006a0c:	e037      	b.n	8006a7e <drawSpaceship+0x12e>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fc fe6c 	bl	80036f0 <fpToInt>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	00c9      	lsls	r1, r1, #3
 8006a24:	1acb      	subs	r3, r1, r3
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	b2dc      	uxtb	r4, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fc fe5d 	bl	80036f0 <fpToInt>
 8006a36:	4603      	mov	r3, r0
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7fd fdaa 	bl	800459a <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fc fe50 	bl	80036f0 <fpToInt>
 8006a50:	4603      	mov	r3, r0
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	00c9      	lsls	r1, r1, #3
 8006a5c:	1acb      	subs	r3, r1, r3
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	b2dc      	uxtb	r4, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fc fe41 	bl	80036f0 <fpToInt>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7fd fd45 	bl	8004508 <drawMe>
	for (int i = 0; i < gameState->spaceship.numberOfParts; i++){
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	db8d      	blt.n	80069ae <drawSpaceship+0x5e>
		}
	}
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	331c      	adds	r3, #28
 8006a98:	3224      	adds	r2, #36	; 0x24
 8006a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}

08006aaa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0
	return 1;
 8006aae:	2301      	movs	r3, #1
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <_kill>:

int _kill(int pid, int sig)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006ac4:	f000 f94e 	bl	8006d64 <__errno>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2216      	movs	r2, #22
 8006acc:	601a      	str	r2, [r3, #0]
	return -1;
 8006ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <_exit>:

void _exit (int status)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006ae2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ffe7 	bl	8006aba <_kill>
	while (1) {}		/* Make sure we hang here */
 8006aec:	e7fe      	b.n	8006aec <_exit+0x12>

08006aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e00a      	b.n	8006b16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006b00:	f3af 8000 	nop.w
 8006b04:	4601      	mov	r1, r0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	60ba      	str	r2, [r7, #8]
 8006b0c:	b2ca      	uxtb	r2, r1
 8006b0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	3301      	adds	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	dbf0      	blt.n	8006b00 <_read+0x12>
	}

return len;
 8006b1e:	687b      	ldr	r3, [r7, #4]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	return -1;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b50:	605a      	str	r2, [r3, #4]
	return 0;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <_isatty>:

int _isatty(int file)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	return 1;
 8006b68:	2301      	movs	r3, #1
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
	return 0;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <_sbrk+0x50>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <_sbrk+0x16>
		heap_end = &end;
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <_sbrk+0x50>)
 8006ba2:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <_sbrk+0x54>)
 8006ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <_sbrk+0x50>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <_sbrk+0x50>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	466a      	mov	r2, sp
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d907      	bls.n	8006bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006bba:	f000 f8d3 	bl	8006d64 <__errno>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	220c      	movs	r2, #12
 8006bc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc8:	e006      	b.n	8006bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <_sbrk+0x50>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4a03      	ldr	r2, [pc, #12]	; (8006be0 <_sbrk+0x50>)
 8006bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200001bc 	.word	0x200001bc
 8006be4:	200001e0 	.word	0x200001e0

08006be8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bec:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <SystemInit+0x84>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <SystemInit+0x84>)
 8006bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006bfc:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <SystemInit+0x88>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <SystemInit+0x88>)
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8006c08:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <SystemInit+0x88>)
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4918      	ldr	r1, [pc, #96]	; (8006c70 <SystemInit+0x88>)
 8006c0e:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <SystemInit+0x8c>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006c14:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <SystemInit+0x88>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <SystemInit+0x88>)
 8006c1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006c24:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <SystemInit+0x88>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <SystemInit+0x88>)
 8006c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <SystemInit+0x88>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <SystemInit+0x88>)
 8006c36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006c3a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <SystemInit+0x88>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a0b      	ldr	r2, [pc, #44]	; (8006c70 <SystemInit+0x88>)
 8006c42:	f023 030f 	bic.w	r3, r3, #15
 8006c46:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <SystemInit+0x88>)
 8006c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4c:	4908      	ldr	r1, [pc, #32]	; (8006c70 <SystemInit+0x88>)
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <SystemInit+0x90>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <SystemInit+0x88>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8006c5a:	f000 f80f 	bl	8006c7c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <SystemInit+0x84>)
 8006c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c64:	609a      	str	r2, [r3, #8]
#endif  
}
 8006c66:	bf00      	nop
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	e000ed00 	.word	0xe000ed00
 8006c70:	40021000 	.word	0x40021000
 8006c74:	f87fc00c 	.word	0xf87fc00c
 8006c78:	ff00fccc 	.word	0xff00fccc

08006c7c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <SetSysClock+0x8c>)
 8006c82:	2212      	movs	r2, #18
 8006c84:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8006c86:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <SetSysClock+0x90>)
 8006c88:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <SetSysClock+0x90>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <SetSysClock+0x90>)
 8006c90:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <SetSysClock+0x90>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <SetSysClock+0x90>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <SetSysClock+0x90>)
 8006c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ca0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <SetSysClock+0x90>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <SetSysClock+0x90>)
 8006ca8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006cac:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8006cae:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <SetSysClock+0x90>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <SetSysClock+0x90>)
 8006cb4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8006cb8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <SetSysClock+0x90>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <SetSysClock+0x90>)
 8006cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006cc6:	bf00      	nop
 8006cc8:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <SetSysClock+0x90>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f9      	beq.n	8006cc8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <SetSysClock+0x90>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <SetSysClock+0x90>)
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <SetSysClock+0x90>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <SetSysClock+0x90>)
 8006ce6:	f043 0302 	orr.w	r3, r3, #2
 8006cea:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8006cec:	bf00      	nop
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <SetSysClock+0x90>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d1f9      	bne.n	8006cee <SetSysClock+0x72>
  {
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40022000 	.word	0x40022000
 8006d0c:	40021000 	.word	0x40021000

08006d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006d10:	480d      	ldr	r0, [pc, #52]	; (8006d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d14:	480d      	ldr	r0, [pc, #52]	; (8006d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8006d16:	490e      	ldr	r1, [pc, #56]	; (8006d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006d18:	4a0e      	ldr	r2, [pc, #56]	; (8006d54 <LoopForever+0xe>)
  movs r3, #0
 8006d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d1c:	e002      	b.n	8006d24 <LoopCopyDataInit>

08006d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d22:	3304      	adds	r3, #4

08006d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d28:	d3f9      	bcc.n	8006d1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d2a:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006d2c:	4c0b      	ldr	r4, [pc, #44]	; (8006d5c <LoopForever+0x16>)
  movs r3, #0
 8006d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d30:	e001      	b.n	8006d36 <LoopFillZerobss>

08006d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d34:	3204      	adds	r2, #4

08006d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d38:	d3fb      	bcc.n	8006d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006d3a:	f7ff ff55 	bl	8006be8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006d3e:	f000 f817 	bl	8006d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d42:	f7fe fbdb 	bl	80054fc <main>

08006d46 <LoopForever>:

LoopForever:
    b LoopForever
 8006d46:	e7fe      	b.n	8006d46 <LoopForever>
  ldr   r0, =_estack
 8006d48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d50:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8006d54:	08009044 	.word	0x08009044
  ldr r2, =_sbss
 8006d58:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8006d5c:	200001dc 	.word	0x200001dc

08006d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d60:	e7fe      	b.n	8006d60 <ADC1_2_IRQHandler>
	...

08006d64 <__errno>:
 8006d64:	4b01      	ldr	r3, [pc, #4]	; (8006d6c <__errno+0x8>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	2000002c 	.word	0x2000002c

08006d70 <__libc_init_array>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4d0d      	ldr	r5, [pc, #52]	; (8006da8 <__libc_init_array+0x38>)
 8006d74:	4c0d      	ldr	r4, [pc, #52]	; (8006dac <__libc_init_array+0x3c>)
 8006d76:	1b64      	subs	r4, r4, r5
 8006d78:	10a4      	asrs	r4, r4, #2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	42a6      	cmp	r6, r4
 8006d7e:	d109      	bne.n	8006d94 <__libc_init_array+0x24>
 8006d80:	4d0b      	ldr	r5, [pc, #44]	; (8006db0 <__libc_init_array+0x40>)
 8006d82:	4c0c      	ldr	r4, [pc, #48]	; (8006db4 <__libc_init_array+0x44>)
 8006d84:	f001 f9fe 	bl	8008184 <_init>
 8006d88:	1b64      	subs	r4, r4, r5
 8006d8a:	10a4      	asrs	r4, r4, #2
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	42a6      	cmp	r6, r4
 8006d90:	d105      	bne.n	8006d9e <__libc_init_array+0x2e>
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d98:	4798      	blx	r3
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7ee      	b.n	8006d7c <__libc_init_array+0xc>
 8006d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da2:	4798      	blx	r3
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7f2      	b.n	8006d8e <__libc_init_array+0x1e>
 8006da8:	0800903c 	.word	0x0800903c
 8006dac:	0800903c 	.word	0x0800903c
 8006db0:	0800903c 	.word	0x0800903c
 8006db4:	08009040 	.word	0x08009040

08006db8 <malloc>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <malloc+0xc>)
 8006dba:	4601      	mov	r1, r0
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f000 b863 	b.w	8006e88 <_malloc_r>
 8006dc2:	bf00      	nop
 8006dc4:	2000002c 	.word	0x2000002c

08006dc8 <free>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <free+0xc>)
 8006dca:	4601      	mov	r1, r0
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f000 b80b 	b.w	8006de8 <_free_r>
 8006dd2:	bf00      	nop
 8006dd4:	2000002c 	.word	0x2000002c

08006dd8 <memset>:
 8006dd8:	4402      	add	r2, r0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d100      	bne.n	8006de2 <memset+0xa>
 8006de0:	4770      	bx	lr
 8006de2:	f803 1b01 	strb.w	r1, [r3], #1
 8006de6:	e7f9      	b.n	8006ddc <memset+0x4>

08006de8 <_free_r>:
 8006de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dea:	2900      	cmp	r1, #0
 8006dec:	d048      	beq.n	8006e80 <_free_r+0x98>
 8006dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df2:	9001      	str	r0, [sp, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfa:	bfb8      	it	lt
 8006dfc:	18e4      	addlt	r4, r4, r3
 8006dfe:	f000 fd9b 	bl	8007938 <__malloc_lock>
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <_free_r+0x9c>)
 8006e04:	9801      	ldr	r0, [sp, #4]
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	4615      	mov	r5, r2
 8006e0a:	b933      	cbnz	r3, 8006e1a <_free_r+0x32>
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6014      	str	r4, [r2, #0]
 8006e10:	b003      	add	sp, #12
 8006e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e16:	f000 bd95 	b.w	8007944 <__malloc_unlock>
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	d90b      	bls.n	8006e36 <_free_r+0x4e>
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	1862      	adds	r2, r4, r1
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bf04      	itt	eq
 8006e26:	681a      	ldreq	r2, [r3, #0]
 8006e28:	685b      	ldreq	r3, [r3, #4]
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	bf04      	itt	eq
 8006e2e:	1852      	addeq	r2, r2, r1
 8006e30:	6022      	streq	r2, [r4, #0]
 8006e32:	602c      	str	r4, [r5, #0]
 8006e34:	e7ec      	b.n	8006e10 <_free_r+0x28>
 8006e36:	461a      	mov	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b10b      	cbz	r3, 8006e40 <_free_r+0x58>
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	d9fa      	bls.n	8006e36 <_free_r+0x4e>
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	1855      	adds	r5, r2, r1
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	d10b      	bne.n	8006e60 <_free_r+0x78>
 8006e48:	6824      	ldr	r4, [r4, #0]
 8006e4a:	4421      	add	r1, r4
 8006e4c:	1854      	adds	r4, r2, r1
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	d1dd      	bne.n	8006e10 <_free_r+0x28>
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7d7      	b.n	8006e10 <_free_r+0x28>
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x80>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	e7d3      	b.n	8006e10 <_free_r+0x28>
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	1961      	adds	r1, r4, r5
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	bf04      	itt	eq
 8006e70:	6819      	ldreq	r1, [r3, #0]
 8006e72:	685b      	ldreq	r3, [r3, #4]
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	bf04      	itt	eq
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6054      	str	r4, [r2, #4]
 8006e7e:	e7c7      	b.n	8006e10 <_free_r+0x28>
 8006e80:	b003      	add	sp, #12
 8006e82:	bd30      	pop	{r4, r5, pc}
 8006e84:	200001c0 	.word	0x200001c0

08006e88 <_malloc_r>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	1ccd      	adds	r5, r1, #3
 8006e8c:	f025 0503 	bic.w	r5, r5, #3
 8006e90:	3508      	adds	r5, #8
 8006e92:	2d0c      	cmp	r5, #12
 8006e94:	bf38      	it	cc
 8006e96:	250c      	movcc	r5, #12
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	db01      	blt.n	8006ea2 <_malloc_r+0x1a>
 8006e9e:	42a9      	cmp	r1, r5
 8006ea0:	d903      	bls.n	8006eaa <_malloc_r+0x22>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eaa:	f000 fd45 	bl	8007938 <__malloc_lock>
 8006eae:	4921      	ldr	r1, [pc, #132]	; (8006f34 <_malloc_r+0xac>)
 8006eb0:	680a      	ldr	r2, [r1, #0]
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	b99c      	cbnz	r4, 8006ede <_malloc_r+0x56>
 8006eb6:	4f20      	ldr	r7, [pc, #128]	; (8006f38 <_malloc_r+0xb0>)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	b923      	cbnz	r3, 8006ec6 <_malloc_r+0x3e>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 f94e 	bl	8007160 <_sbrk_r>
 8006ec4:	6038      	str	r0, [r7, #0]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f949 	bl	8007160 <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d123      	bne.n	8006f1a <_malloc_r+0x92>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 fd34 	bl	8007944 <__malloc_unlock>
 8006edc:	e7e3      	b.n	8006ea6 <_malloc_r+0x1e>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1b5b      	subs	r3, r3, r5
 8006ee2:	d417      	bmi.n	8006f14 <_malloc_r+0x8c>
 8006ee4:	2b0b      	cmp	r3, #11
 8006ee6:	d903      	bls.n	8006ef0 <_malloc_r+0x68>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	441c      	add	r4, r3
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	e004      	b.n	8006efa <_malloc_r+0x72>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	42a2      	cmp	r2, r4
 8006ef4:	bf0c      	ite	eq
 8006ef6:	600b      	streq	r3, [r1, #0]
 8006ef8:	6053      	strne	r3, [r2, #4]
 8006efa:	4630      	mov	r0, r6
 8006efc:	f000 fd22 	bl	8007944 <__malloc_unlock>
 8006f00:	f104 000b 	add.w	r0, r4, #11
 8006f04:	1d23      	adds	r3, r4, #4
 8006f06:	f020 0007 	bic.w	r0, r0, #7
 8006f0a:	1ac2      	subs	r2, r0, r3
 8006f0c:	d0cc      	beq.n	8006ea8 <_malloc_r+0x20>
 8006f0e:	1a1b      	subs	r3, r3, r0
 8006f10:	50a3      	str	r3, [r4, r2]
 8006f12:	e7c9      	b.n	8006ea8 <_malloc_r+0x20>
 8006f14:	4622      	mov	r2, r4
 8006f16:	6864      	ldr	r4, [r4, #4]
 8006f18:	e7cc      	b.n	8006eb4 <_malloc_r+0x2c>
 8006f1a:	1cc4      	adds	r4, r0, #3
 8006f1c:	f024 0403 	bic.w	r4, r4, #3
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	d0e3      	beq.n	8006eec <_malloc_r+0x64>
 8006f24:	1a21      	subs	r1, r4, r0
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f91a 	bl	8007160 <_sbrk_r>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d1dd      	bne.n	8006eec <_malloc_r+0x64>
 8006f30:	e7cf      	b.n	8006ed2 <_malloc_r+0x4a>
 8006f32:	bf00      	nop
 8006f34:	200001c0 	.word	0x200001c0
 8006f38:	200001c4 	.word	0x200001c4

08006f3c <iprintf>:
 8006f3c:	b40f      	push	{r0, r1, r2, r3}
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <iprintf+0x2c>)
 8006f40:	b513      	push	{r0, r1, r4, lr}
 8006f42:	681c      	ldr	r4, [r3, #0]
 8006f44:	b124      	cbz	r4, 8006f50 <iprintf+0x14>
 8006f46:	69a3      	ldr	r3, [r4, #24]
 8006f48:	b913      	cbnz	r3, 8006f50 <iprintf+0x14>
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fbde 	bl	800770c <__sinit>
 8006f50:	ab05      	add	r3, sp, #20
 8006f52:	9a04      	ldr	r2, [sp, #16]
 8006f54:	68a1      	ldr	r1, [r4, #8]
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fd23 	bl	80079a4 <_vfiprintf_r>
 8006f5e:	b002      	add	sp, #8
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	b004      	add	sp, #16
 8006f66:	4770      	bx	lr
 8006f68:	2000002c 	.word	0x2000002c

08006f6c <putchar>:
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <putchar+0x28>)
 8006f6e:	b513      	push	{r0, r1, r4, lr}
 8006f70:	681c      	ldr	r4, [r3, #0]
 8006f72:	4601      	mov	r1, r0
 8006f74:	b134      	cbz	r4, 8006f84 <putchar+0x18>
 8006f76:	69a3      	ldr	r3, [r4, #24]
 8006f78:	b923      	cbnz	r3, 8006f84 <putchar+0x18>
 8006f7a:	9001      	str	r0, [sp, #4]
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fbc5 	bl	800770c <__sinit>
 8006f82:	9901      	ldr	r1, [sp, #4]
 8006f84:	68a2      	ldr	r2, [r4, #8]
 8006f86:	4620      	mov	r0, r4
 8006f88:	b002      	add	sp, #8
 8006f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8e:	f000 bfcd 	b.w	8007f2c <_putc_r>
 8006f92:	bf00      	nop
 8006f94:	2000002c 	.word	0x2000002c

08006f98 <_puts_r>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b118      	cbz	r0, 8006fa8 <_puts_r+0x10>
 8006fa0:	6983      	ldr	r3, [r0, #24]
 8006fa2:	b90b      	cbnz	r3, 8006fa8 <_puts_r+0x10>
 8006fa4:	f000 fbb2 	bl	800770c <__sinit>
 8006fa8:	69ab      	ldr	r3, [r5, #24]
 8006faa:	68ac      	ldr	r4, [r5, #8]
 8006fac:	b913      	cbnz	r3, 8006fb4 <_puts_r+0x1c>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 fbac 	bl	800770c <__sinit>
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <_puts_r+0xd0>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d120      	bne.n	8006ffc <_puts_r+0x64>
 8006fba:	686c      	ldr	r4, [r5, #4]
 8006fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fbe:	07db      	lsls	r3, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_puts_r+0x36>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	0598      	lsls	r0, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_puts_r+0x36>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fca:	f000 fc4f 	bl	800786c <__retarget_lock_acquire_recursive>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0719      	lsls	r1, r3, #28
 8006fd2:	d51d      	bpl.n	8007010 <_puts_r+0x78>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	b1db      	cbz	r3, 8007010 <_puts_r+0x78>
 8006fd8:	3e01      	subs	r6, #1
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	bb39      	cbnz	r1, 8007036 <_puts_r+0x9e>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da38      	bge.n	800705c <_puts_r+0xc4>
 8006fea:	4622      	mov	r2, r4
 8006fec:	210a      	movs	r1, #10
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 f994 	bl	800731c <__swbuf_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d011      	beq.n	800701c <_puts_r+0x84>
 8006ff8:	250a      	movs	r5, #10
 8006ffa:	e011      	b.n	8007020 <_puts_r+0x88>
 8006ffc:	4b1b      	ldr	r3, [pc, #108]	; (800706c <_puts_r+0xd4>)
 8006ffe:	429c      	cmp	r4, r3
 8007000:	d101      	bne.n	8007006 <_puts_r+0x6e>
 8007002:	68ac      	ldr	r4, [r5, #8]
 8007004:	e7da      	b.n	8006fbc <_puts_r+0x24>
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <_puts_r+0xd8>)
 8007008:	429c      	cmp	r4, r3
 800700a:	bf08      	it	eq
 800700c:	68ec      	ldreq	r4, [r5, #12]
 800700e:	e7d5      	b.n	8006fbc <_puts_r+0x24>
 8007010:	4621      	mov	r1, r4
 8007012:	4628      	mov	r0, r5
 8007014:	f000 f9d4 	bl	80073c0 <__swsetup_r>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0dd      	beq.n	8006fd8 <_puts_r+0x40>
 800701c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007022:	07da      	lsls	r2, r3, #31
 8007024:	d405      	bmi.n	8007032 <_puts_r+0x9a>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	059b      	lsls	r3, r3, #22
 800702a:	d402      	bmi.n	8007032 <_puts_r+0x9a>
 800702c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800702e:	f000 fc1e 	bl	800786e <__retarget_lock_release_recursive>
 8007032:	4628      	mov	r0, r5
 8007034:	bd70      	pop	{r4, r5, r6, pc}
 8007036:	2b00      	cmp	r3, #0
 8007038:	da04      	bge.n	8007044 <_puts_r+0xac>
 800703a:	69a2      	ldr	r2, [r4, #24]
 800703c:	429a      	cmp	r2, r3
 800703e:	dc06      	bgt.n	800704e <_puts_r+0xb6>
 8007040:	290a      	cmp	r1, #10
 8007042:	d004      	beq.n	800704e <_puts_r+0xb6>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	6022      	str	r2, [r4, #0]
 800704a:	7019      	strb	r1, [r3, #0]
 800704c:	e7c5      	b.n	8006fda <_puts_r+0x42>
 800704e:	4622      	mov	r2, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 f963 	bl	800731c <__swbuf_r>
 8007056:	3001      	adds	r0, #1
 8007058:	d1bf      	bne.n	8006fda <_puts_r+0x42>
 800705a:	e7df      	b.n	800701c <_puts_r+0x84>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	250a      	movs	r5, #10
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	701d      	strb	r5, [r3, #0]
 8007066:	e7db      	b.n	8007020 <_puts_r+0x88>
 8007068:	08008fc0 	.word	0x08008fc0
 800706c:	08008fe0 	.word	0x08008fe0
 8007070:	08008fa0 	.word	0x08008fa0

08007074 <puts>:
 8007074:	4b02      	ldr	r3, [pc, #8]	; (8007080 <puts+0xc>)
 8007076:	4601      	mov	r1, r0
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f7ff bf8d 	b.w	8006f98 <_puts_r>
 800707e:	bf00      	nop
 8007080:	2000002c 	.word	0x2000002c

08007084 <srand>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <srand+0x44>)
 8007088:	681d      	ldr	r5, [r3, #0]
 800708a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800708c:	4604      	mov	r4, r0
 800708e:	b9b3      	cbnz	r3, 80070be <srand+0x3a>
 8007090:	2018      	movs	r0, #24
 8007092:	f7ff fe91 	bl	8006db8 <malloc>
 8007096:	4602      	mov	r2, r0
 8007098:	63a8      	str	r0, [r5, #56]	; 0x38
 800709a:	b920      	cbnz	r0, 80070a6 <srand+0x22>
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <srand+0x48>)
 800709e:	480c      	ldr	r0, [pc, #48]	; (80070d0 <srand+0x4c>)
 80070a0:	2142      	movs	r1, #66	; 0x42
 80070a2:	f000 f9fb 	bl	800749c <__assert_func>
 80070a6:	490b      	ldr	r1, [pc, #44]	; (80070d4 <srand+0x50>)
 80070a8:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <srand+0x54>)
 80070aa:	e9c0 1300 	strd	r1, r3, [r0]
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <srand+0x58>)
 80070b0:	6083      	str	r3, [r0, #8]
 80070b2:	230b      	movs	r3, #11
 80070b4:	8183      	strh	r3, [r0, #12]
 80070b6:	2100      	movs	r1, #0
 80070b8:	2001      	movs	r0, #1
 80070ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80070be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80070c0:	2200      	movs	r2, #0
 80070c2:	611c      	str	r4, [r3, #16]
 80070c4:	615a      	str	r2, [r3, #20]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000002c 	.word	0x2000002c
 80070cc:	08008eec 	.word	0x08008eec
 80070d0:	08008f03 	.word	0x08008f03
 80070d4:	abcd330e 	.word	0xabcd330e
 80070d8:	e66d1234 	.word	0xe66d1234
 80070dc:	0005deec 	.word	0x0005deec

080070e0 <rand>:
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <rand+0x60>)
 80070e2:	b510      	push	{r4, lr}
 80070e4:	681c      	ldr	r4, [r3, #0]
 80070e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070e8:	b9b3      	cbnz	r3, 8007118 <rand+0x38>
 80070ea:	2018      	movs	r0, #24
 80070ec:	f7ff fe64 	bl	8006db8 <malloc>
 80070f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80070f2:	b928      	cbnz	r0, 8007100 <rand+0x20>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <rand+0x64>)
 80070f8:	4813      	ldr	r0, [pc, #76]	; (8007148 <rand+0x68>)
 80070fa:	214e      	movs	r1, #78	; 0x4e
 80070fc:	f000 f9ce 	bl	800749c <__assert_func>
 8007100:	4a12      	ldr	r2, [pc, #72]	; (800714c <rand+0x6c>)
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <rand+0x70>)
 8007104:	e9c0 2300 	strd	r2, r3, [r0]
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <rand+0x74>)
 800710a:	6083      	str	r3, [r0, #8]
 800710c:	230b      	movs	r3, #11
 800710e:	8183      	strh	r3, [r0, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	2300      	movs	r3, #0
 8007114:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007118:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800711a:	480f      	ldr	r0, [pc, #60]	; (8007158 <rand+0x78>)
 800711c:	690a      	ldr	r2, [r1, #16]
 800711e:	694b      	ldr	r3, [r1, #20]
 8007120:	4c0e      	ldr	r4, [pc, #56]	; (800715c <rand+0x7c>)
 8007122:	4350      	muls	r0, r2
 8007124:	fb04 0003 	mla	r0, r4, r3, r0
 8007128:	fba2 3404 	umull	r3, r4, r2, r4
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	4404      	add	r4, r0
 8007130:	f144 0000 	adc.w	r0, r4, #0
 8007134:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007138:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	2000002c 	.word	0x2000002c
 8007144:	08008eec 	.word	0x08008eec
 8007148:	08008f03 	.word	0x08008f03
 800714c:	abcd330e 	.word	0xabcd330e
 8007150:	e66d1234 	.word	0xe66d1234
 8007154:	0005deec 	.word	0x0005deec
 8007158:	5851f42d 	.word	0x5851f42d
 800715c:	4c957f2d 	.word	0x4c957f2d

08007160 <_sbrk_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d06      	ldr	r5, [pc, #24]	; (800717c <_sbrk_r+0x1c>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7ff fd10 	bl	8006b90 <_sbrk>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_sbrk_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_sbrk_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	200001d8 	.word	0x200001d8

08007180 <setbuf>:
 8007180:	2900      	cmp	r1, #0
 8007182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007186:	bf0c      	ite	eq
 8007188:	2202      	moveq	r2, #2
 800718a:	2200      	movne	r2, #0
 800718c:	f000 b800 	b.w	8007190 <setvbuf>

08007190 <setvbuf>:
 8007190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007194:	461d      	mov	r5, r3
 8007196:	4b5d      	ldr	r3, [pc, #372]	; (800730c <setvbuf+0x17c>)
 8007198:	681f      	ldr	r7, [r3, #0]
 800719a:	4604      	mov	r4, r0
 800719c:	460e      	mov	r6, r1
 800719e:	4690      	mov	r8, r2
 80071a0:	b127      	cbz	r7, 80071ac <setvbuf+0x1c>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	b913      	cbnz	r3, 80071ac <setvbuf+0x1c>
 80071a6:	4638      	mov	r0, r7
 80071a8:	f000 fab0 	bl	800770c <__sinit>
 80071ac:	4b58      	ldr	r3, [pc, #352]	; (8007310 <setvbuf+0x180>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d167      	bne.n	8007282 <setvbuf+0xf2>
 80071b2:	687c      	ldr	r4, [r7, #4]
 80071b4:	f1b8 0f02 	cmp.w	r8, #2
 80071b8:	d006      	beq.n	80071c8 <setvbuf+0x38>
 80071ba:	f1b8 0f01 	cmp.w	r8, #1
 80071be:	f200 809f 	bhi.w	8007300 <setvbuf+0x170>
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	f2c0 809c 	blt.w	8007300 <setvbuf+0x170>
 80071c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ca:	07db      	lsls	r3, r3, #31
 80071cc:	d405      	bmi.n	80071da <setvbuf+0x4a>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	0598      	lsls	r0, r3, #22
 80071d2:	d402      	bmi.n	80071da <setvbuf+0x4a>
 80071d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d6:	f000 fb49 	bl	800786c <__retarget_lock_acquire_recursive>
 80071da:	4621      	mov	r1, r4
 80071dc:	4638      	mov	r0, r7
 80071de:	f000 fa01 	bl	80075e4 <_fflush_r>
 80071e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e4:	b141      	cbz	r1, 80071f8 <setvbuf+0x68>
 80071e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ea:	4299      	cmp	r1, r3
 80071ec:	d002      	beq.n	80071f4 <setvbuf+0x64>
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff fdfa 	bl	8006de8 <_free_r>
 80071f4:	2300      	movs	r3, #0
 80071f6:	6363      	str	r3, [r4, #52]	; 0x34
 80071f8:	2300      	movs	r3, #0
 80071fa:	61a3      	str	r3, [r4, #24]
 80071fc:	6063      	str	r3, [r4, #4]
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	0619      	lsls	r1, r3, #24
 8007202:	d503      	bpl.n	800720c <setvbuf+0x7c>
 8007204:	6921      	ldr	r1, [r4, #16]
 8007206:	4638      	mov	r0, r7
 8007208:	f7ff fdee 	bl	8006de8 <_free_r>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	f1b8 0f02 	cmp.w	r8, #2
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	d06c      	beq.n	80072f8 <setvbuf+0x168>
 800721e:	ab01      	add	r3, sp, #4
 8007220:	466a      	mov	r2, sp
 8007222:	4621      	mov	r1, r4
 8007224:	4638      	mov	r0, r7
 8007226:	f000 fb23 	bl	8007870 <__swhatbuf_r>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	4318      	orrs	r0, r3
 800722e:	81a0      	strh	r0, [r4, #12]
 8007230:	2d00      	cmp	r5, #0
 8007232:	d130      	bne.n	8007296 <setvbuf+0x106>
 8007234:	9d00      	ldr	r5, [sp, #0]
 8007236:	4628      	mov	r0, r5
 8007238:	f7ff fdbe 	bl	8006db8 <malloc>
 800723c:	4606      	mov	r6, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	d155      	bne.n	80072ee <setvbuf+0x15e>
 8007242:	f8dd 9000 	ldr.w	r9, [sp]
 8007246:	45a9      	cmp	r9, r5
 8007248:	d14a      	bne.n	80072e0 <setvbuf+0x150>
 800724a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800724e:	2200      	movs	r2, #0
 8007250:	60a2      	str	r2, [r4, #8]
 8007252:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	6122      	str	r2, [r4, #16]
 800725a:	2201      	movs	r2, #1
 800725c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007260:	6162      	str	r2, [r4, #20]
 8007262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	07d2      	lsls	r2, r2, #31
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	d405      	bmi.n	800727a <setvbuf+0xea>
 800726e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007272:	d102      	bne.n	800727a <setvbuf+0xea>
 8007274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007276:	f000 fafa 	bl	800786e <__retarget_lock_release_recursive>
 800727a:	4628      	mov	r0, r5
 800727c:	b003      	add	sp, #12
 800727e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <setvbuf+0x184>)
 8007284:	429c      	cmp	r4, r3
 8007286:	d101      	bne.n	800728c <setvbuf+0xfc>
 8007288:	68bc      	ldr	r4, [r7, #8]
 800728a:	e793      	b.n	80071b4 <setvbuf+0x24>
 800728c:	4b22      	ldr	r3, [pc, #136]	; (8007318 <setvbuf+0x188>)
 800728e:	429c      	cmp	r4, r3
 8007290:	bf08      	it	eq
 8007292:	68fc      	ldreq	r4, [r7, #12]
 8007294:	e78e      	b.n	80071b4 <setvbuf+0x24>
 8007296:	2e00      	cmp	r6, #0
 8007298:	d0cd      	beq.n	8007236 <setvbuf+0xa6>
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	b913      	cbnz	r3, 80072a4 <setvbuf+0x114>
 800729e:	4638      	mov	r0, r7
 80072a0:	f000 fa34 	bl	800770c <__sinit>
 80072a4:	f1b8 0f01 	cmp.w	r8, #1
 80072a8:	bf08      	it	eq
 80072aa:	89a3      	ldrheq	r3, [r4, #12]
 80072ac:	6026      	str	r6, [r4, #0]
 80072ae:	bf04      	itt	eq
 80072b0:	f043 0301 	orreq.w	r3, r3, #1
 80072b4:	81a3      	strheq	r3, [r4, #12]
 80072b6:	89a2      	ldrh	r2, [r4, #12]
 80072b8:	f012 0308 	ands.w	r3, r2, #8
 80072bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80072c0:	d01c      	beq.n	80072fc <setvbuf+0x16c>
 80072c2:	07d3      	lsls	r3, r2, #31
 80072c4:	bf41      	itttt	mi
 80072c6:	2300      	movmi	r3, #0
 80072c8:	426d      	negmi	r5, r5
 80072ca:	60a3      	strmi	r3, [r4, #8]
 80072cc:	61a5      	strmi	r5, [r4, #24]
 80072ce:	bf58      	it	pl
 80072d0:	60a5      	strpl	r5, [r4, #8]
 80072d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80072d4:	f015 0501 	ands.w	r5, r5, #1
 80072d8:	d115      	bne.n	8007306 <setvbuf+0x176>
 80072da:	f412 7f00 	tst.w	r2, #512	; 0x200
 80072de:	e7c8      	b.n	8007272 <setvbuf+0xe2>
 80072e0:	4648      	mov	r0, r9
 80072e2:	f7ff fd69 	bl	8006db8 <malloc>
 80072e6:	4606      	mov	r6, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d0ae      	beq.n	800724a <setvbuf+0xba>
 80072ec:	464d      	mov	r5, r9
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	e7d0      	b.n	800729a <setvbuf+0x10a>
 80072f8:	2500      	movs	r5, #0
 80072fa:	e7a8      	b.n	800724e <setvbuf+0xbe>
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	e7e8      	b.n	80072d2 <setvbuf+0x142>
 8007300:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007304:	e7b9      	b.n	800727a <setvbuf+0xea>
 8007306:	2500      	movs	r5, #0
 8007308:	e7b7      	b.n	800727a <setvbuf+0xea>
 800730a:	bf00      	nop
 800730c:	2000002c 	.word	0x2000002c
 8007310:	08008fc0 	.word	0x08008fc0
 8007314:	08008fe0 	.word	0x08008fe0
 8007318:	08008fa0 	.word	0x08008fa0

0800731c <__swbuf_r>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	460e      	mov	r6, r1
 8007320:	4614      	mov	r4, r2
 8007322:	4605      	mov	r5, r0
 8007324:	b118      	cbz	r0, 800732e <__swbuf_r+0x12>
 8007326:	6983      	ldr	r3, [r0, #24]
 8007328:	b90b      	cbnz	r3, 800732e <__swbuf_r+0x12>
 800732a:	f000 f9ef 	bl	800770c <__sinit>
 800732e:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <__swbuf_r+0x98>)
 8007330:	429c      	cmp	r4, r3
 8007332:	d12b      	bne.n	800738c <__swbuf_r+0x70>
 8007334:	686c      	ldr	r4, [r5, #4]
 8007336:	69a3      	ldr	r3, [r4, #24]
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	071a      	lsls	r2, r3, #28
 800733e:	d52f      	bpl.n	80073a0 <__swbuf_r+0x84>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	b36b      	cbz	r3, 80073a0 <__swbuf_r+0x84>
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	6963      	ldr	r3, [r4, #20]
 800734c:	b2f6      	uxtb	r6, r6
 800734e:	4283      	cmp	r3, r0
 8007350:	4637      	mov	r7, r6
 8007352:	dc04      	bgt.n	800735e <__swbuf_r+0x42>
 8007354:	4621      	mov	r1, r4
 8007356:	4628      	mov	r0, r5
 8007358:	f000 f944 	bl	80075e4 <_fflush_r>
 800735c:	bb30      	cbnz	r0, 80073ac <__swbuf_r+0x90>
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	701e      	strb	r6, [r3, #0]
 800736c:	6963      	ldr	r3, [r4, #20]
 800736e:	3001      	adds	r0, #1
 8007370:	4283      	cmp	r3, r0
 8007372:	d004      	beq.n	800737e <__swbuf_r+0x62>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d506      	bpl.n	8007388 <__swbuf_r+0x6c>
 800737a:	2e0a      	cmp	r6, #10
 800737c:	d104      	bne.n	8007388 <__swbuf_r+0x6c>
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 f92f 	bl	80075e4 <_fflush_r>
 8007386:	b988      	cbnz	r0, 80073ac <__swbuf_r+0x90>
 8007388:	4638      	mov	r0, r7
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <__swbuf_r+0x9c>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <__swbuf_r+0x7a>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7cf      	b.n	8007336 <__swbuf_r+0x1a>
 8007396:	4b09      	ldr	r3, [pc, #36]	; (80073bc <__swbuf_r+0xa0>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7ca      	b.n	8007336 <__swbuf_r+0x1a>
 80073a0:	4621      	mov	r1, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 f80c 	bl	80073c0 <__swsetup_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d0cb      	beq.n	8007344 <__swbuf_r+0x28>
 80073ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073b0:	e7ea      	b.n	8007388 <__swbuf_r+0x6c>
 80073b2:	bf00      	nop
 80073b4:	08008fc0 	.word	0x08008fc0
 80073b8:	08008fe0 	.word	0x08008fe0
 80073bc:	08008fa0 	.word	0x08008fa0

080073c0 <__swsetup_r>:
 80073c0:	4b32      	ldr	r3, [pc, #200]	; (800748c <__swsetup_r+0xcc>)
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	4606      	mov	r6, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	b125      	cbz	r5, 80073d6 <__swsetup_r+0x16>
 80073cc:	69ab      	ldr	r3, [r5, #24]
 80073ce:	b913      	cbnz	r3, 80073d6 <__swsetup_r+0x16>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f000 f99b 	bl	800770c <__sinit>
 80073d6:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <__swsetup_r+0xd0>)
 80073d8:	429c      	cmp	r4, r3
 80073da:	d10f      	bne.n	80073fc <__swsetup_r+0x3c>
 80073dc:	686c      	ldr	r4, [r5, #4]
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d42c      	bmi.n	8007442 <__swsetup_r+0x82>
 80073e8:	06dd      	lsls	r5, r3, #27
 80073ea:	d411      	bmi.n	8007410 <__swsetup_r+0x50>
 80073ec:	2309      	movs	r3, #9
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fa:	e03e      	b.n	800747a <__swsetup_r+0xba>
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <__swsetup_r+0xd4>)
 80073fe:	429c      	cmp	r4, r3
 8007400:	d101      	bne.n	8007406 <__swsetup_r+0x46>
 8007402:	68ac      	ldr	r4, [r5, #8]
 8007404:	e7eb      	b.n	80073de <__swsetup_r+0x1e>
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <__swsetup_r+0xd8>)
 8007408:	429c      	cmp	r4, r3
 800740a:	bf08      	it	eq
 800740c:	68ec      	ldreq	r4, [r5, #12]
 800740e:	e7e6      	b.n	80073de <__swsetup_r+0x1e>
 8007410:	0758      	lsls	r0, r3, #29
 8007412:	d512      	bpl.n	800743a <__swsetup_r+0x7a>
 8007414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007416:	b141      	cbz	r1, 800742a <__swsetup_r+0x6a>
 8007418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800741c:	4299      	cmp	r1, r3
 800741e:	d002      	beq.n	8007426 <__swsetup_r+0x66>
 8007420:	4630      	mov	r0, r6
 8007422:	f7ff fce1 	bl	8006de8 <_free_r>
 8007426:	2300      	movs	r3, #0
 8007428:	6363      	str	r3, [r4, #52]	; 0x34
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	2300      	movs	r3, #0
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0308 	orr.w	r3, r3, #8
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	b94b      	cbnz	r3, 800745a <__swsetup_r+0x9a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800744c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007450:	d003      	beq.n	800745a <__swsetup_r+0x9a>
 8007452:	4621      	mov	r1, r4
 8007454:	4630      	mov	r0, r6
 8007456:	f000 fa2f 	bl	80078b8 <__smakebuf_r>
 800745a:	89a0      	ldrh	r0, [r4, #12]
 800745c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007460:	f010 0301 	ands.w	r3, r0, #1
 8007464:	d00a      	beq.n	800747c <__swsetup_r+0xbc>
 8007466:	2300      	movs	r3, #0
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	6963      	ldr	r3, [r4, #20]
 800746c:	425b      	negs	r3, r3
 800746e:	61a3      	str	r3, [r4, #24]
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	b943      	cbnz	r3, 8007486 <__swsetup_r+0xc6>
 8007474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007478:	d1ba      	bne.n	80073f0 <__swsetup_r+0x30>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	0781      	lsls	r1, r0, #30
 800747e:	bf58      	it	pl
 8007480:	6963      	ldrpl	r3, [r4, #20]
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	e7f4      	b.n	8007470 <__swsetup_r+0xb0>
 8007486:	2000      	movs	r0, #0
 8007488:	e7f7      	b.n	800747a <__swsetup_r+0xba>
 800748a:	bf00      	nop
 800748c:	2000002c 	.word	0x2000002c
 8007490:	08008fc0 	.word	0x08008fc0
 8007494:	08008fe0 	.word	0x08008fe0
 8007498:	08008fa0 	.word	0x08008fa0

0800749c <__assert_func>:
 800749c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800749e:	4614      	mov	r4, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <__assert_func+0x2c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4605      	mov	r5, r0
 80074a8:	68d8      	ldr	r0, [r3, #12]
 80074aa:	b14c      	cbz	r4, 80074c0 <__assert_func+0x24>
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <__assert_func+0x30>)
 80074ae:	9100      	str	r1, [sp, #0]
 80074b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <__assert_func+0x34>)
 80074b6:	462b      	mov	r3, r5
 80074b8:	f000 f9a6 	bl	8007808 <fiprintf>
 80074bc:	f000 fdc1 	bl	8008042 <abort>
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <__assert_func+0x38>)
 80074c2:	461c      	mov	r4, r3
 80074c4:	e7f3      	b.n	80074ae <__assert_func+0x12>
 80074c6:	bf00      	nop
 80074c8:	2000002c 	.word	0x2000002c
 80074cc:	08008f62 	.word	0x08008f62
 80074d0:	08008f6f 	.word	0x08008f6f
 80074d4:	08008f9d 	.word	0x08008f9d

080074d8 <__sflush_r>:
 80074d8:	898a      	ldrh	r2, [r1, #12]
 80074da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074de:	4605      	mov	r5, r0
 80074e0:	0710      	lsls	r0, r2, #28
 80074e2:	460c      	mov	r4, r1
 80074e4:	d458      	bmi.n	8007598 <__sflush_r+0xc0>
 80074e6:	684b      	ldr	r3, [r1, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc05      	bgt.n	80074f8 <__sflush_r+0x20>
 80074ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dc02      	bgt.n	80074f8 <__sflush_r+0x20>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074fa:	2e00      	cmp	r6, #0
 80074fc:	d0f9      	beq.n	80074f2 <__sflush_r+0x1a>
 80074fe:	2300      	movs	r3, #0
 8007500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007504:	682f      	ldr	r7, [r5, #0]
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	d032      	beq.n	8007570 <__sflush_r+0x98>
 800750a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	075a      	lsls	r2, r3, #29
 8007510:	d505      	bpl.n	800751e <__sflush_r+0x46>
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	1ac0      	subs	r0, r0, r3
 8007516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007518:	b10b      	cbz	r3, 800751e <__sflush_r+0x46>
 800751a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800751c:	1ac0      	subs	r0, r0, r3
 800751e:	2300      	movs	r3, #0
 8007520:	4602      	mov	r2, r0
 8007522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007524:	6a21      	ldr	r1, [r4, #32]
 8007526:	4628      	mov	r0, r5
 8007528:	47b0      	blx	r6
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	d106      	bne.n	800753e <__sflush_r+0x66>
 8007530:	6829      	ldr	r1, [r5, #0]
 8007532:	291d      	cmp	r1, #29
 8007534:	d82c      	bhi.n	8007590 <__sflush_r+0xb8>
 8007536:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <__sflush_r+0x108>)
 8007538:	40ca      	lsrs	r2, r1
 800753a:	07d6      	lsls	r6, r2, #31
 800753c:	d528      	bpl.n	8007590 <__sflush_r+0xb8>
 800753e:	2200      	movs	r2, #0
 8007540:	6062      	str	r2, [r4, #4]
 8007542:	04d9      	lsls	r1, r3, #19
 8007544:	6922      	ldr	r2, [r4, #16]
 8007546:	6022      	str	r2, [r4, #0]
 8007548:	d504      	bpl.n	8007554 <__sflush_r+0x7c>
 800754a:	1c42      	adds	r2, r0, #1
 800754c:	d101      	bne.n	8007552 <__sflush_r+0x7a>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b903      	cbnz	r3, 8007554 <__sflush_r+0x7c>
 8007552:	6560      	str	r0, [r4, #84]	; 0x54
 8007554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007556:	602f      	str	r7, [r5, #0]
 8007558:	2900      	cmp	r1, #0
 800755a:	d0ca      	beq.n	80074f2 <__sflush_r+0x1a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__sflush_r+0x92>
 8007564:	4628      	mov	r0, r5
 8007566:	f7ff fc3f 	bl	8006de8 <_free_r>
 800756a:	2000      	movs	r0, #0
 800756c:	6360      	str	r0, [r4, #52]	; 0x34
 800756e:	e7c1      	b.n	80074f4 <__sflush_r+0x1c>
 8007570:	6a21      	ldr	r1, [r4, #32]
 8007572:	2301      	movs	r3, #1
 8007574:	4628      	mov	r0, r5
 8007576:	47b0      	blx	r6
 8007578:	1c41      	adds	r1, r0, #1
 800757a:	d1c7      	bne.n	800750c <__sflush_r+0x34>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0c4      	beq.n	800750c <__sflush_r+0x34>
 8007582:	2b1d      	cmp	r3, #29
 8007584:	d001      	beq.n	800758a <__sflush_r+0xb2>
 8007586:	2b16      	cmp	r3, #22
 8007588:	d101      	bne.n	800758e <__sflush_r+0xb6>
 800758a:	602f      	str	r7, [r5, #0]
 800758c:	e7b1      	b.n	80074f2 <__sflush_r+0x1a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	e7ad      	b.n	80074f4 <__sflush_r+0x1c>
 8007598:	690f      	ldr	r7, [r1, #16]
 800759a:	2f00      	cmp	r7, #0
 800759c:	d0a9      	beq.n	80074f2 <__sflush_r+0x1a>
 800759e:	0793      	lsls	r3, r2, #30
 80075a0:	680e      	ldr	r6, [r1, #0]
 80075a2:	bf08      	it	eq
 80075a4:	694b      	ldreq	r3, [r1, #20]
 80075a6:	600f      	str	r7, [r1, #0]
 80075a8:	bf18      	it	ne
 80075aa:	2300      	movne	r3, #0
 80075ac:	eba6 0807 	sub.w	r8, r6, r7
 80075b0:	608b      	str	r3, [r1, #8]
 80075b2:	f1b8 0f00 	cmp.w	r8, #0
 80075b6:	dd9c      	ble.n	80074f2 <__sflush_r+0x1a>
 80075b8:	6a21      	ldr	r1, [r4, #32]
 80075ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075bc:	4643      	mov	r3, r8
 80075be:	463a      	mov	r2, r7
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b0      	blx	r6
 80075c4:	2800      	cmp	r0, #0
 80075c6:	dc06      	bgt.n	80075d6 <__sflush_r+0xfe>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d4:	e78e      	b.n	80074f4 <__sflush_r+0x1c>
 80075d6:	4407      	add	r7, r0
 80075d8:	eba8 0800 	sub.w	r8, r8, r0
 80075dc:	e7e9      	b.n	80075b2 <__sflush_r+0xda>
 80075de:	bf00      	nop
 80075e0:	20400001 	.word	0x20400001

080075e4 <_fflush_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	690b      	ldr	r3, [r1, #16]
 80075e8:	4605      	mov	r5, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b913      	cbnz	r3, 80075f4 <_fflush_r+0x10>
 80075ee:	2500      	movs	r5, #0
 80075f0:	4628      	mov	r0, r5
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	b118      	cbz	r0, 80075fe <_fflush_r+0x1a>
 80075f6:	6983      	ldr	r3, [r0, #24]
 80075f8:	b90b      	cbnz	r3, 80075fe <_fflush_r+0x1a>
 80075fa:	f000 f887 	bl	800770c <__sinit>
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <_fflush_r+0x6c>)
 8007600:	429c      	cmp	r4, r3
 8007602:	d11b      	bne.n	800763c <_fflush_r+0x58>
 8007604:	686c      	ldr	r4, [r5, #4]
 8007606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0ef      	beq.n	80075ee <_fflush_r+0xa>
 800760e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007610:	07d0      	lsls	r0, r2, #31
 8007612:	d404      	bmi.n	800761e <_fflush_r+0x3a>
 8007614:	0599      	lsls	r1, r3, #22
 8007616:	d402      	bmi.n	800761e <_fflush_r+0x3a>
 8007618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800761a:	f000 f927 	bl	800786c <__retarget_lock_acquire_recursive>
 800761e:	4628      	mov	r0, r5
 8007620:	4621      	mov	r1, r4
 8007622:	f7ff ff59 	bl	80074d8 <__sflush_r>
 8007626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007628:	07da      	lsls	r2, r3, #31
 800762a:	4605      	mov	r5, r0
 800762c:	d4e0      	bmi.n	80075f0 <_fflush_r+0xc>
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	059b      	lsls	r3, r3, #22
 8007632:	d4dd      	bmi.n	80075f0 <_fflush_r+0xc>
 8007634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007636:	f000 f91a 	bl	800786e <__retarget_lock_release_recursive>
 800763a:	e7d9      	b.n	80075f0 <_fflush_r+0xc>
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <_fflush_r+0x70>)
 800763e:	429c      	cmp	r4, r3
 8007640:	d101      	bne.n	8007646 <_fflush_r+0x62>
 8007642:	68ac      	ldr	r4, [r5, #8]
 8007644:	e7df      	b.n	8007606 <_fflush_r+0x22>
 8007646:	4b04      	ldr	r3, [pc, #16]	; (8007658 <_fflush_r+0x74>)
 8007648:	429c      	cmp	r4, r3
 800764a:	bf08      	it	eq
 800764c:	68ec      	ldreq	r4, [r5, #12]
 800764e:	e7da      	b.n	8007606 <_fflush_r+0x22>
 8007650:	08008fc0 	.word	0x08008fc0
 8007654:	08008fe0 	.word	0x08008fe0
 8007658:	08008fa0 	.word	0x08008fa0

0800765c <std>:
 800765c:	2300      	movs	r3, #0
 800765e:	b510      	push	{r4, lr}
 8007660:	4604      	mov	r4, r0
 8007662:	e9c0 3300 	strd	r3, r3, [r0]
 8007666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800766a:	6083      	str	r3, [r0, #8]
 800766c:	8181      	strh	r1, [r0, #12]
 800766e:	6643      	str	r3, [r0, #100]	; 0x64
 8007670:	81c2      	strh	r2, [r0, #14]
 8007672:	6183      	str	r3, [r0, #24]
 8007674:	4619      	mov	r1, r3
 8007676:	2208      	movs	r2, #8
 8007678:	305c      	adds	r0, #92	; 0x5c
 800767a:	f7ff fbad 	bl	8006dd8 <memset>
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <std+0x38>)
 8007680:	6263      	str	r3, [r4, #36]	; 0x24
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std+0x3c>)
 8007684:	62a3      	str	r3, [r4, #40]	; 0x28
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std+0x40>)
 8007688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <std+0x44>)
 800768c:	6224      	str	r4, [r4, #32]
 800768e:	6323      	str	r3, [r4, #48]	; 0x30
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	08007fbd 	.word	0x08007fbd
 8007698:	08007fdf 	.word	0x08007fdf
 800769c:	08008017 	.word	0x08008017
 80076a0:	0800803b 	.word	0x0800803b

080076a4 <_cleanup_r>:
 80076a4:	4901      	ldr	r1, [pc, #4]	; (80076ac <_cleanup_r+0x8>)
 80076a6:	f000 b8c1 	b.w	800782c <_fwalk_reent>
 80076aa:	bf00      	nop
 80076ac:	080075e5 	.word	0x080075e5

080076b0 <__sfmoreglue>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	1e4a      	subs	r2, r1, #1
 80076b4:	2568      	movs	r5, #104	; 0x68
 80076b6:	4355      	muls	r5, r2
 80076b8:	460e      	mov	r6, r1
 80076ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076be:	f7ff fbe3 	bl	8006e88 <_malloc_r>
 80076c2:	4604      	mov	r4, r0
 80076c4:	b140      	cbz	r0, 80076d8 <__sfmoreglue+0x28>
 80076c6:	2100      	movs	r1, #0
 80076c8:	e9c0 1600 	strd	r1, r6, [r0]
 80076cc:	300c      	adds	r0, #12
 80076ce:	60a0      	str	r0, [r4, #8]
 80076d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076d4:	f7ff fb80 	bl	8006dd8 <memset>
 80076d8:	4620      	mov	r0, r4
 80076da:	bd70      	pop	{r4, r5, r6, pc}

080076dc <__sfp_lock_acquire>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__sfp_lock_acquire+0x8>)
 80076de:	f000 b8c5 	b.w	800786c <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	200001d4 	.word	0x200001d4

080076e8 <__sfp_lock_release>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__sfp_lock_release+0x8>)
 80076ea:	f000 b8c0 	b.w	800786e <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	200001d4 	.word	0x200001d4

080076f4 <__sinit_lock_acquire>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__sinit_lock_acquire+0x8>)
 80076f6:	f000 b8b9 	b.w	800786c <__retarget_lock_acquire_recursive>
 80076fa:	bf00      	nop
 80076fc:	200001cf 	.word	0x200001cf

08007700 <__sinit_lock_release>:
 8007700:	4801      	ldr	r0, [pc, #4]	; (8007708 <__sinit_lock_release+0x8>)
 8007702:	f000 b8b4 	b.w	800786e <__retarget_lock_release_recursive>
 8007706:	bf00      	nop
 8007708:	200001cf 	.word	0x200001cf

0800770c <__sinit>:
 800770c:	b510      	push	{r4, lr}
 800770e:	4604      	mov	r4, r0
 8007710:	f7ff fff0 	bl	80076f4 <__sinit_lock_acquire>
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	b11b      	cbz	r3, 8007720 <__sinit+0x14>
 8007718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771c:	f7ff bff0 	b.w	8007700 <__sinit_lock_release>
 8007720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007724:	6523      	str	r3, [r4, #80]	; 0x50
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <__sinit+0x68>)
 8007728:	4a13      	ldr	r2, [pc, #76]	; (8007778 <__sinit+0x6c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	62a2      	str	r2, [r4, #40]	; 0x28
 800772e:	42a3      	cmp	r3, r4
 8007730:	bf04      	itt	eq
 8007732:	2301      	moveq	r3, #1
 8007734:	61a3      	streq	r3, [r4, #24]
 8007736:	4620      	mov	r0, r4
 8007738:	f000 f820 	bl	800777c <__sfp>
 800773c:	6060      	str	r0, [r4, #4]
 800773e:	4620      	mov	r0, r4
 8007740:	f000 f81c 	bl	800777c <__sfp>
 8007744:	60a0      	str	r0, [r4, #8]
 8007746:	4620      	mov	r0, r4
 8007748:	f000 f818 	bl	800777c <__sfp>
 800774c:	2200      	movs	r2, #0
 800774e:	60e0      	str	r0, [r4, #12]
 8007750:	2104      	movs	r1, #4
 8007752:	6860      	ldr	r0, [r4, #4]
 8007754:	f7ff ff82 	bl	800765c <std>
 8007758:	68a0      	ldr	r0, [r4, #8]
 800775a:	2201      	movs	r2, #1
 800775c:	2109      	movs	r1, #9
 800775e:	f7ff ff7d 	bl	800765c <std>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	2112      	movs	r1, #18
 8007768:	f7ff ff78 	bl	800765c <std>
 800776c:	2301      	movs	r3, #1
 800776e:	61a3      	str	r3, [r4, #24]
 8007770:	e7d2      	b.n	8007718 <__sinit+0xc>
 8007772:	bf00      	nop
 8007774:	08008ee8 	.word	0x08008ee8
 8007778:	080076a5 	.word	0x080076a5

0800777c <__sfp>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	4607      	mov	r7, r0
 8007780:	f7ff ffac 	bl	80076dc <__sfp_lock_acquire>
 8007784:	4b1e      	ldr	r3, [pc, #120]	; (8007800 <__sfp+0x84>)
 8007786:	681e      	ldr	r6, [r3, #0]
 8007788:	69b3      	ldr	r3, [r6, #24]
 800778a:	b913      	cbnz	r3, 8007792 <__sfp+0x16>
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff ffbd 	bl	800770c <__sinit>
 8007792:	3648      	adds	r6, #72	; 0x48
 8007794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	d503      	bpl.n	80077a4 <__sfp+0x28>
 800779c:	6833      	ldr	r3, [r6, #0]
 800779e:	b30b      	cbz	r3, 80077e4 <__sfp+0x68>
 80077a0:	6836      	ldr	r6, [r6, #0]
 80077a2:	e7f7      	b.n	8007794 <__sfp+0x18>
 80077a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077a8:	b9d5      	cbnz	r5, 80077e0 <__sfp+0x64>
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <__sfp+0x88>)
 80077ac:	60e3      	str	r3, [r4, #12]
 80077ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077b2:	6665      	str	r5, [r4, #100]	; 0x64
 80077b4:	f000 f859 	bl	800786a <__retarget_lock_init_recursive>
 80077b8:	f7ff ff96 	bl	80076e8 <__sfp_lock_release>
 80077bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077c4:	6025      	str	r5, [r4, #0]
 80077c6:	61a5      	str	r5, [r4, #24]
 80077c8:	2208      	movs	r2, #8
 80077ca:	4629      	mov	r1, r5
 80077cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077d0:	f7ff fb02 	bl	8006dd8 <memset>
 80077d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077dc:	4620      	mov	r0, r4
 80077de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e0:	3468      	adds	r4, #104	; 0x68
 80077e2:	e7d9      	b.n	8007798 <__sfp+0x1c>
 80077e4:	2104      	movs	r1, #4
 80077e6:	4638      	mov	r0, r7
 80077e8:	f7ff ff62 	bl	80076b0 <__sfmoreglue>
 80077ec:	4604      	mov	r4, r0
 80077ee:	6030      	str	r0, [r6, #0]
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d1d5      	bne.n	80077a0 <__sfp+0x24>
 80077f4:	f7ff ff78 	bl	80076e8 <__sfp_lock_release>
 80077f8:	230c      	movs	r3, #12
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	e7ee      	b.n	80077dc <__sfp+0x60>
 80077fe:	bf00      	nop
 8007800:	08008ee8 	.word	0x08008ee8
 8007804:	ffff0001 	.word	0xffff0001

08007808 <fiprintf>:
 8007808:	b40e      	push	{r1, r2, r3}
 800780a:	b503      	push	{r0, r1, lr}
 800780c:	4601      	mov	r1, r0
 800780e:	ab03      	add	r3, sp, #12
 8007810:	4805      	ldr	r0, [pc, #20]	; (8007828 <fiprintf+0x20>)
 8007812:	f853 2b04 	ldr.w	r2, [r3], #4
 8007816:	6800      	ldr	r0, [r0, #0]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	f000 f8c3 	bl	80079a4 <_vfiprintf_r>
 800781e:	b002      	add	sp, #8
 8007820:	f85d eb04 	ldr.w	lr, [sp], #4
 8007824:	b003      	add	sp, #12
 8007826:	4770      	bx	lr
 8007828:	2000002c 	.word	0x2000002c

0800782c <_fwalk_reent>:
 800782c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007830:	4606      	mov	r6, r0
 8007832:	4688      	mov	r8, r1
 8007834:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007838:	2700      	movs	r7, #0
 800783a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800783e:	f1b9 0901 	subs.w	r9, r9, #1
 8007842:	d505      	bpl.n	8007850 <_fwalk_reent+0x24>
 8007844:	6824      	ldr	r4, [r4, #0]
 8007846:	2c00      	cmp	r4, #0
 8007848:	d1f7      	bne.n	800783a <_fwalk_reent+0xe>
 800784a:	4638      	mov	r0, r7
 800784c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007850:	89ab      	ldrh	r3, [r5, #12]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d907      	bls.n	8007866 <_fwalk_reent+0x3a>
 8007856:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800785a:	3301      	adds	r3, #1
 800785c:	d003      	beq.n	8007866 <_fwalk_reent+0x3a>
 800785e:	4629      	mov	r1, r5
 8007860:	4630      	mov	r0, r6
 8007862:	47c0      	blx	r8
 8007864:	4307      	orrs	r7, r0
 8007866:	3568      	adds	r5, #104	; 0x68
 8007868:	e7e9      	b.n	800783e <_fwalk_reent+0x12>

0800786a <__retarget_lock_init_recursive>:
 800786a:	4770      	bx	lr

0800786c <__retarget_lock_acquire_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_release_recursive>:
 800786e:	4770      	bx	lr

08007870 <__swhatbuf_r>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	460e      	mov	r6, r1
 8007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007878:	2900      	cmp	r1, #0
 800787a:	b096      	sub	sp, #88	; 0x58
 800787c:	4614      	mov	r4, r2
 800787e:	461d      	mov	r5, r3
 8007880:	da07      	bge.n	8007892 <__swhatbuf_r+0x22>
 8007882:	2300      	movs	r3, #0
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	89b3      	ldrh	r3, [r6, #12]
 8007888:	061a      	lsls	r2, r3, #24
 800788a:	d410      	bmi.n	80078ae <__swhatbuf_r+0x3e>
 800788c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007890:	e00e      	b.n	80078b0 <__swhatbuf_r+0x40>
 8007892:	466a      	mov	r2, sp
 8007894:	f000 fbec 	bl	8008070 <_fstat_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	dbf2      	blt.n	8007882 <__swhatbuf_r+0x12>
 800789c:	9a01      	ldr	r2, [sp, #4]
 800789e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078a6:	425a      	negs	r2, r3
 80078a8:	415a      	adcs	r2, r3
 80078aa:	602a      	str	r2, [r5, #0]
 80078ac:	e7ee      	b.n	800788c <__swhatbuf_r+0x1c>
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	2000      	movs	r0, #0
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	b016      	add	sp, #88	; 0x58
 80078b6:	bd70      	pop	{r4, r5, r6, pc}

080078b8 <__smakebuf_r>:
 80078b8:	898b      	ldrh	r3, [r1, #12]
 80078ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078bc:	079d      	lsls	r5, r3, #30
 80078be:	4606      	mov	r6, r0
 80078c0:	460c      	mov	r4, r1
 80078c2:	d507      	bpl.n	80078d4 <__smakebuf_r+0x1c>
 80078c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	2301      	movs	r3, #1
 80078ce:	6163      	str	r3, [r4, #20]
 80078d0:	b002      	add	sp, #8
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	ab01      	add	r3, sp, #4
 80078d6:	466a      	mov	r2, sp
 80078d8:	f7ff ffca 	bl	8007870 <__swhatbuf_r>
 80078dc:	9900      	ldr	r1, [sp, #0]
 80078de:	4605      	mov	r5, r0
 80078e0:	4630      	mov	r0, r6
 80078e2:	f7ff fad1 	bl	8006e88 <_malloc_r>
 80078e6:	b948      	cbnz	r0, 80078fc <__smakebuf_r+0x44>
 80078e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ec:	059a      	lsls	r2, r3, #22
 80078ee:	d4ef      	bmi.n	80078d0 <__smakebuf_r+0x18>
 80078f0:	f023 0303 	bic.w	r3, r3, #3
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	e7e3      	b.n	80078c4 <__smakebuf_r+0xc>
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <__smakebuf_r+0x7c>)
 80078fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	6020      	str	r0, [r4, #0]
 8007904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	6163      	str	r3, [r4, #20]
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	6120      	str	r0, [r4, #16]
 8007912:	b15b      	cbz	r3, 800792c <__smakebuf_r+0x74>
 8007914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007918:	4630      	mov	r0, r6
 800791a:	f000 fbbb 	bl	8008094 <_isatty_r>
 800791e:	b128      	cbz	r0, 800792c <__smakebuf_r+0x74>
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f023 0303 	bic.w	r3, r3, #3
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	89a0      	ldrh	r0, [r4, #12]
 800792e:	4305      	orrs	r5, r0
 8007930:	81a5      	strh	r5, [r4, #12]
 8007932:	e7cd      	b.n	80078d0 <__smakebuf_r+0x18>
 8007934:	080076a5 	.word	0x080076a5

08007938 <__malloc_lock>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__malloc_lock+0x8>)
 800793a:	f7ff bf97 	b.w	800786c <__retarget_lock_acquire_recursive>
 800793e:	bf00      	nop
 8007940:	200001d0 	.word	0x200001d0

08007944 <__malloc_unlock>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__malloc_unlock+0x8>)
 8007946:	f7ff bf92 	b.w	800786e <__retarget_lock_release_recursive>
 800794a:	bf00      	nop
 800794c:	200001d0 	.word	0x200001d0

08007950 <__sfputc_r>:
 8007950:	6893      	ldr	r3, [r2, #8]
 8007952:	3b01      	subs	r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	b410      	push	{r4}
 8007958:	6093      	str	r3, [r2, #8]
 800795a:	da08      	bge.n	800796e <__sfputc_r+0x1e>
 800795c:	6994      	ldr	r4, [r2, #24]
 800795e:	42a3      	cmp	r3, r4
 8007960:	db01      	blt.n	8007966 <__sfputc_r+0x16>
 8007962:	290a      	cmp	r1, #10
 8007964:	d103      	bne.n	800796e <__sfputc_r+0x1e>
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796a:	f7ff bcd7 	b.w	800731c <__swbuf_r>
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	1c58      	adds	r0, r3, #1
 8007972:	6010      	str	r0, [r2, #0]
 8007974:	7019      	strb	r1, [r3, #0]
 8007976:	4608      	mov	r0, r1
 8007978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800797c:	4770      	bx	lr

0800797e <__sfputs_r>:
 800797e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	4614      	mov	r4, r2
 8007986:	18d5      	adds	r5, r2, r3
 8007988:	42ac      	cmp	r4, r5
 800798a:	d101      	bne.n	8007990 <__sfputs_r+0x12>
 800798c:	2000      	movs	r0, #0
 800798e:	e007      	b.n	80079a0 <__sfputs_r+0x22>
 8007990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007994:	463a      	mov	r2, r7
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ffda 	bl	8007950 <__sfputc_r>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d1f3      	bne.n	8007988 <__sfputs_r+0xa>
 80079a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079a4 <_vfiprintf_r>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	460d      	mov	r5, r1
 80079aa:	b09d      	sub	sp, #116	; 0x74
 80079ac:	4614      	mov	r4, r2
 80079ae:	4698      	mov	r8, r3
 80079b0:	4606      	mov	r6, r0
 80079b2:	b118      	cbz	r0, 80079bc <_vfiprintf_r+0x18>
 80079b4:	6983      	ldr	r3, [r0, #24]
 80079b6:	b90b      	cbnz	r3, 80079bc <_vfiprintf_r+0x18>
 80079b8:	f7ff fea8 	bl	800770c <__sinit>
 80079bc:	4b89      	ldr	r3, [pc, #548]	; (8007be4 <_vfiprintf_r+0x240>)
 80079be:	429d      	cmp	r5, r3
 80079c0:	d11b      	bne.n	80079fa <_vfiprintf_r+0x56>
 80079c2:	6875      	ldr	r5, [r6, #4]
 80079c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c6:	07d9      	lsls	r1, r3, #31
 80079c8:	d405      	bmi.n	80079d6 <_vfiprintf_r+0x32>
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	059a      	lsls	r2, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_vfiprintf_r+0x32>
 80079d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d2:	f7ff ff4b 	bl	800786c <__retarget_lock_acquire_recursive>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	071b      	lsls	r3, r3, #28
 80079da:	d501      	bpl.n	80079e0 <_vfiprintf_r+0x3c>
 80079dc:	692b      	ldr	r3, [r5, #16]
 80079de:	b9eb      	cbnz	r3, 8007a1c <_vfiprintf_r+0x78>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff fcec 	bl	80073c0 <__swsetup_r>
 80079e8:	b1c0      	cbz	r0, 8007a1c <_vfiprintf_r+0x78>
 80079ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ec:	07dc      	lsls	r4, r3, #31
 80079ee:	d50e      	bpl.n	8007a0e <_vfiprintf_r+0x6a>
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f4:	b01d      	add	sp, #116	; 0x74
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	4b7b      	ldr	r3, [pc, #492]	; (8007be8 <_vfiprintf_r+0x244>)
 80079fc:	429d      	cmp	r5, r3
 80079fe:	d101      	bne.n	8007a04 <_vfiprintf_r+0x60>
 8007a00:	68b5      	ldr	r5, [r6, #8]
 8007a02:	e7df      	b.n	80079c4 <_vfiprintf_r+0x20>
 8007a04:	4b79      	ldr	r3, [pc, #484]	; (8007bec <_vfiprintf_r+0x248>)
 8007a06:	429d      	cmp	r5, r3
 8007a08:	bf08      	it	eq
 8007a0a:	68f5      	ldreq	r5, [r6, #12]
 8007a0c:	e7da      	b.n	80079c4 <_vfiprintf_r+0x20>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	0598      	lsls	r0, r3, #22
 8007a12:	d4ed      	bmi.n	80079f0 <_vfiprintf_r+0x4c>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f7ff ff2a 	bl	800786e <__retarget_lock_release_recursive>
 8007a1a:	e7e9      	b.n	80079f0 <_vfiprintf_r+0x4c>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a20:	2320      	movs	r3, #32
 8007a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2a:	2330      	movs	r3, #48	; 0x30
 8007a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bf0 <_vfiprintf_r+0x24c>
 8007a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a34:	f04f 0901 	mov.w	r9, #1
 8007a38:	4623      	mov	r3, r4
 8007a3a:	469a      	mov	sl, r3
 8007a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a40:	b10a      	cbz	r2, 8007a46 <_vfiprintf_r+0xa2>
 8007a42:	2a25      	cmp	r2, #37	; 0x25
 8007a44:	d1f9      	bne.n	8007a3a <_vfiprintf_r+0x96>
 8007a46:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4a:	d00b      	beq.n	8007a64 <_vfiprintf_r+0xc0>
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ff93 	bl	800797e <__sfputs_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f000 80aa 	beq.w	8007bb2 <_vfiprintf_r+0x20e>
 8007a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a60:	445a      	add	r2, fp
 8007a62:	9209      	str	r2, [sp, #36]	; 0x24
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80a2 	beq.w	8007bb2 <_vfiprintf_r+0x20e>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a78:	f10a 0a01 	add.w	sl, sl, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a84:	931a      	str	r3, [sp, #104]	; 0x68
 8007a86:	4654      	mov	r4, sl
 8007a88:	2205      	movs	r2, #5
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	4858      	ldr	r0, [pc, #352]	; (8007bf0 <_vfiprintf_r+0x24c>)
 8007a90:	f7f8 fba6 	bl	80001e0 <memchr>
 8007a94:	9a04      	ldr	r2, [sp, #16]
 8007a96:	b9d8      	cbnz	r0, 8007ad0 <_vfiprintf_r+0x12c>
 8007a98:	06d1      	lsls	r1, r2, #27
 8007a9a:	bf44      	itt	mi
 8007a9c:	2320      	movmi	r3, #32
 8007a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa2:	0713      	lsls	r3, r2, #28
 8007aa4:	bf44      	itt	mi
 8007aa6:	232b      	movmi	r3, #43	; 0x2b
 8007aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aac:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab2:	d015      	beq.n	8007ae0 <_vfiprintf_r+0x13c>
 8007ab4:	9a07      	ldr	r2, [sp, #28]
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f04f 0c0a 	mov.w	ip, #10
 8007abe:	4621      	mov	r1, r4
 8007ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac4:	3b30      	subs	r3, #48	; 0x30
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d94e      	bls.n	8007b68 <_vfiprintf_r+0x1c4>
 8007aca:	b1b0      	cbz	r0, 8007afa <_vfiprintf_r+0x156>
 8007acc:	9207      	str	r2, [sp, #28]
 8007ace:	e014      	b.n	8007afa <_vfiprintf_r+0x156>
 8007ad0:	eba0 0308 	sub.w	r3, r0, r8
 8007ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	46a2      	mov	sl, r4
 8007ade:	e7d2      	b.n	8007a86 <_vfiprintf_r+0xe2>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d19      	adds	r1, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfbb      	ittet	lt
 8007aec:	425b      	neglt	r3, r3
 8007aee:	f042 0202 	orrlt.w	r2, r2, #2
 8007af2:	9307      	strge	r3, [sp, #28]
 8007af4:	9307      	strlt	r3, [sp, #28]
 8007af6:	bfb8      	it	lt
 8007af8:	9204      	strlt	r2, [sp, #16]
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	2b2e      	cmp	r3, #46	; 0x2e
 8007afe:	d10c      	bne.n	8007b1a <_vfiprintf_r+0x176>
 8007b00:	7863      	ldrb	r3, [r4, #1]
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d135      	bne.n	8007b72 <_vfiprintf_r+0x1ce>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9203      	str	r2, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b16:	3402      	adds	r4, #2
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c00 <_vfiprintf_r+0x25c>
 8007b1e:	7821      	ldrb	r1, [r4, #0]
 8007b20:	2203      	movs	r2, #3
 8007b22:	4650      	mov	r0, sl
 8007b24:	f7f8 fb5c 	bl	80001e0 <memchr>
 8007b28:	b140      	cbz	r0, 8007b3c <_vfiprintf_r+0x198>
 8007b2a:	2340      	movs	r3, #64	; 0x40
 8007b2c:	eba0 000a 	sub.w	r0, r0, sl
 8007b30:	fa03 f000 	lsl.w	r0, r3, r0
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	4303      	orrs	r3, r0
 8007b38:	3401      	adds	r4, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b40:	482c      	ldr	r0, [pc, #176]	; (8007bf4 <_vfiprintf_r+0x250>)
 8007b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b46:	2206      	movs	r2, #6
 8007b48:	f7f8 fb4a 	bl	80001e0 <memchr>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d03f      	beq.n	8007bd0 <_vfiprintf_r+0x22c>
 8007b50:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <_vfiprintf_r+0x254>)
 8007b52:	bb1b      	cbnz	r3, 8007b9c <_vfiprintf_r+0x1f8>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	3307      	adds	r3, #7
 8007b58:	f023 0307 	bic.w	r3, r3, #7
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	443b      	add	r3, r7
 8007b64:	9309      	str	r3, [sp, #36]	; 0x24
 8007b66:	e767      	b.n	8007a38 <_vfiprintf_r+0x94>
 8007b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	2001      	movs	r0, #1
 8007b70:	e7a5      	b.n	8007abe <_vfiprintf_r+0x11a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	3401      	adds	r4, #1
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0c0a 	mov.w	ip, #10
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b84:	3a30      	subs	r2, #48	; 0x30
 8007b86:	2a09      	cmp	r2, #9
 8007b88:	d903      	bls.n	8007b92 <_vfiprintf_r+0x1ee>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0c5      	beq.n	8007b1a <_vfiprintf_r+0x176>
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	e7c3      	b.n	8007b1a <_vfiprintf_r+0x176>
 8007b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b96:	4604      	mov	r4, r0
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e7f0      	b.n	8007b7e <_vfiprintf_r+0x1da>
 8007b9c:	ab03      	add	r3, sp, #12
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <_vfiprintf_r+0x258>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f3af 8000 	nop.w
 8007bac:	4607      	mov	r7, r0
 8007bae:	1c78      	adds	r0, r7, #1
 8007bb0:	d1d6      	bne.n	8007b60 <_vfiprintf_r+0x1bc>
 8007bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb4:	07d9      	lsls	r1, r3, #31
 8007bb6:	d405      	bmi.n	8007bc4 <_vfiprintf_r+0x220>
 8007bb8:	89ab      	ldrh	r3, [r5, #12]
 8007bba:	059a      	lsls	r2, r3, #22
 8007bbc:	d402      	bmi.n	8007bc4 <_vfiprintf_r+0x220>
 8007bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc0:	f7ff fe55 	bl	800786e <__retarget_lock_release_recursive>
 8007bc4:	89ab      	ldrh	r3, [r5, #12]
 8007bc6:	065b      	lsls	r3, r3, #25
 8007bc8:	f53f af12 	bmi.w	80079f0 <_vfiprintf_r+0x4c>
 8007bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bce:	e711      	b.n	80079f4 <_vfiprintf_r+0x50>
 8007bd0:	ab03      	add	r3, sp, #12
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <_vfiprintf_r+0x258>)
 8007bd8:	a904      	add	r1, sp, #16
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f880 	bl	8007ce0 <_printf_i>
 8007be0:	e7e4      	b.n	8007bac <_vfiprintf_r+0x208>
 8007be2:	bf00      	nop
 8007be4:	08008fc0 	.word	0x08008fc0
 8007be8:	08008fe0 	.word	0x08008fe0
 8007bec:	08008fa0 	.word	0x08008fa0
 8007bf0:	08009000 	.word	0x08009000
 8007bf4:	0800900a 	.word	0x0800900a
 8007bf8:	00000000 	.word	0x00000000
 8007bfc:	0800797f 	.word	0x0800797f
 8007c00:	08009006 	.word	0x08009006

08007c04 <_printf_common>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	4616      	mov	r6, r2
 8007c0a:	4699      	mov	r9, r3
 8007c0c:	688a      	ldr	r2, [r1, #8]
 8007c0e:	690b      	ldr	r3, [r1, #16]
 8007c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	bfb8      	it	lt
 8007c18:	4613      	movlt	r3, r2
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c20:	4607      	mov	r7, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b10a      	cbz	r2, 8007c2a <_printf_common+0x26>
 8007c26:	3301      	adds	r3, #1
 8007c28:	6033      	str	r3, [r6, #0]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	0699      	lsls	r1, r3, #26
 8007c2e:	bf42      	ittt	mi
 8007c30:	6833      	ldrmi	r3, [r6, #0]
 8007c32:	3302      	addmi	r3, #2
 8007c34:	6033      	strmi	r3, [r6, #0]
 8007c36:	6825      	ldr	r5, [r4, #0]
 8007c38:	f015 0506 	ands.w	r5, r5, #6
 8007c3c:	d106      	bne.n	8007c4c <_printf_common+0x48>
 8007c3e:	f104 0a19 	add.w	sl, r4, #25
 8007c42:	68e3      	ldr	r3, [r4, #12]
 8007c44:	6832      	ldr	r2, [r6, #0]
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	dc26      	bgt.n	8007c9a <_printf_common+0x96>
 8007c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c50:	1e13      	subs	r3, r2, #0
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	bf18      	it	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	0692      	lsls	r2, r2, #26
 8007c5a:	d42b      	bmi.n	8007cb4 <_printf_common+0xb0>
 8007c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c60:	4649      	mov	r1, r9
 8007c62:	4638      	mov	r0, r7
 8007c64:	47c0      	blx	r8
 8007c66:	3001      	adds	r0, #1
 8007c68:	d01e      	beq.n	8007ca8 <_printf_common+0xa4>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	68e5      	ldr	r5, [r4, #12]
 8007c6e:	6832      	ldr	r2, [r6, #0]
 8007c70:	f003 0306 	and.w	r3, r3, #6
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	bf08      	it	eq
 8007c78:	1aad      	subeq	r5, r5, r2
 8007c7a:	68a3      	ldr	r3, [r4, #8]
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	bf0c      	ite	eq
 8007c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c84:	2500      	movne	r5, #0
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bfc4      	itt	gt
 8007c8a:	1a9b      	subgt	r3, r3, r2
 8007c8c:	18ed      	addgt	r5, r5, r3
 8007c8e:	2600      	movs	r6, #0
 8007c90:	341a      	adds	r4, #26
 8007c92:	42b5      	cmp	r5, r6
 8007c94:	d11a      	bne.n	8007ccc <_printf_common+0xc8>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e008      	b.n	8007cac <_printf_common+0xa8>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	47c0      	blx	r8
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d103      	bne.n	8007cb0 <_printf_common+0xac>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	e7c6      	b.n	8007c42 <_printf_common+0x3e>
 8007cb4:	18e1      	adds	r1, r4, r3
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	2030      	movs	r0, #48	; 0x30
 8007cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cbe:	4422      	add	r2, r4
 8007cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc8:	3302      	adds	r3, #2
 8007cca:	e7c7      	b.n	8007c5c <_printf_common+0x58>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c0      	blx	r8
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d0e6      	beq.n	8007ca8 <_printf_common+0xa4>
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7d9      	b.n	8007c92 <_printf_common+0x8e>
	...

08007ce0 <_printf_i>:
 8007ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	4691      	mov	r9, r2
 8007ce8:	7e27      	ldrb	r7, [r4, #24]
 8007cea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cec:	2f78      	cmp	r7, #120	; 0x78
 8007cee:	4680      	mov	r8, r0
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf6:	d807      	bhi.n	8007d08 <_printf_i+0x28>
 8007cf8:	2f62      	cmp	r7, #98	; 0x62
 8007cfa:	d80a      	bhi.n	8007d12 <_printf_i+0x32>
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	f000 80d8 	beq.w	8007eb2 <_printf_i+0x1d2>
 8007d02:	2f58      	cmp	r7, #88	; 0x58
 8007d04:	f000 80a3 	beq.w	8007e4e <_printf_i+0x16e>
 8007d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d10:	e03a      	b.n	8007d88 <_printf_i+0xa8>
 8007d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d16:	2b15      	cmp	r3, #21
 8007d18:	d8f6      	bhi.n	8007d08 <_printf_i+0x28>
 8007d1a:	a001      	add	r0, pc, #4	; (adr r0, 8007d20 <_printf_i+0x40>)
 8007d1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d20:	08007d79 	.word	0x08007d79
 8007d24:	08007d8d 	.word	0x08007d8d
 8007d28:	08007d09 	.word	0x08007d09
 8007d2c:	08007d09 	.word	0x08007d09
 8007d30:	08007d09 	.word	0x08007d09
 8007d34:	08007d09 	.word	0x08007d09
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007d09 	.word	0x08007d09
 8007d40:	08007d09 	.word	0x08007d09
 8007d44:	08007d09 	.word	0x08007d09
 8007d48:	08007d09 	.word	0x08007d09
 8007d4c:	08007e99 	.word	0x08007e99
 8007d50:	08007dbd 	.word	0x08007dbd
 8007d54:	08007e7b 	.word	0x08007e7b
 8007d58:	08007d09 	.word	0x08007d09
 8007d5c:	08007d09 	.word	0x08007d09
 8007d60:	08007ebb 	.word	0x08007ebb
 8007d64:	08007d09 	.word	0x08007d09
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d09 	.word	0x08007d09
 8007d70:	08007d09 	.word	0x08007d09
 8007d74:	08007e83 	.word	0x08007e83
 8007d78:	680b      	ldr	r3, [r1, #0]
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	600a      	str	r2, [r1, #0]
 8007d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0a3      	b.n	8007ed4 <_printf_i+0x1f4>
 8007d8c:	6825      	ldr	r5, [r4, #0]
 8007d8e:	6808      	ldr	r0, [r1, #0]
 8007d90:	062e      	lsls	r6, r5, #24
 8007d92:	f100 0304 	add.w	r3, r0, #4
 8007d96:	d50a      	bpl.n	8007dae <_printf_i+0xce>
 8007d98:	6805      	ldr	r5, [r0, #0]
 8007d9a:	600b      	str	r3, [r1, #0]
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	da03      	bge.n	8007da8 <_printf_i+0xc8>
 8007da0:	232d      	movs	r3, #45	; 0x2d
 8007da2:	426d      	negs	r5, r5
 8007da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da8:	485e      	ldr	r0, [pc, #376]	; (8007f24 <_printf_i+0x244>)
 8007daa:	230a      	movs	r3, #10
 8007dac:	e019      	b.n	8007de2 <_printf_i+0x102>
 8007dae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007db2:	6805      	ldr	r5, [r0, #0]
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	bf18      	it	ne
 8007db8:	b22d      	sxthne	r5, r5
 8007dba:	e7ef      	b.n	8007d9c <_printf_i+0xbc>
 8007dbc:	680b      	ldr	r3, [r1, #0]
 8007dbe:	6825      	ldr	r5, [r4, #0]
 8007dc0:	1d18      	adds	r0, r3, #4
 8007dc2:	6008      	str	r0, [r1, #0]
 8007dc4:	0628      	lsls	r0, r5, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xec>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e002      	b.n	8007dd2 <_printf_i+0xf2>
 8007dcc:	0669      	lsls	r1, r5, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xe8>
 8007dd0:	881d      	ldrh	r5, [r3, #0]
 8007dd2:	4854      	ldr	r0, [pc, #336]	; (8007f24 <_printf_i+0x244>)
 8007dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2308      	moveq	r3, #8
 8007dda:	230a      	movne	r3, #10
 8007ddc:	2100      	movs	r1, #0
 8007dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007de2:	6866      	ldr	r6, [r4, #4]
 8007de4:	60a6      	str	r6, [r4, #8]
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	bfa2      	ittt	ge
 8007dea:	6821      	ldrge	r1, [r4, #0]
 8007dec:	f021 0104 	bicge.w	r1, r1, #4
 8007df0:	6021      	strge	r1, [r4, #0]
 8007df2:	b90d      	cbnz	r5, 8007df8 <_printf_i+0x118>
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	d04d      	beq.n	8007e94 <_printf_i+0x1b4>
 8007df8:	4616      	mov	r6, r2
 8007dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8007e02:	5dc7      	ldrb	r7, [r0, r7]
 8007e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e08:	462f      	mov	r7, r5
 8007e0a:	42bb      	cmp	r3, r7
 8007e0c:	460d      	mov	r5, r1
 8007e0e:	d9f4      	bls.n	8007dfa <_printf_i+0x11a>
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d10b      	bne.n	8007e2c <_printf_i+0x14c>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	07df      	lsls	r7, r3, #31
 8007e18:	d508      	bpl.n	8007e2c <_printf_i+0x14c>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	6861      	ldr	r1, [r4, #4]
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	bfde      	ittt	le
 8007e22:	2330      	movle	r3, #48	; 0x30
 8007e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007e2c:	1b92      	subs	r2, r2, r6
 8007e2e:	6122      	str	r2, [r4, #16]
 8007e30:	f8cd a000 	str.w	sl, [sp]
 8007e34:	464b      	mov	r3, r9
 8007e36:	aa03      	add	r2, sp, #12
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f7ff fee2 	bl	8007c04 <_printf_common>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d14c      	bne.n	8007ede <_printf_i+0x1fe>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e48:	b004      	add	sp, #16
 8007e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4e:	4835      	ldr	r0, [pc, #212]	; (8007f24 <_printf_i+0x244>)
 8007e50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	680e      	ldr	r6, [r1, #0]
 8007e58:	061f      	lsls	r7, r3, #24
 8007e5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e5e:	600e      	str	r6, [r1, #0]
 8007e60:	d514      	bpl.n	8007e8c <_printf_i+0x1ac>
 8007e62:	07d9      	lsls	r1, r3, #31
 8007e64:	bf44      	itt	mi
 8007e66:	f043 0320 	orrmi.w	r3, r3, #32
 8007e6a:	6023      	strmi	r3, [r4, #0]
 8007e6c:	b91d      	cbnz	r5, 8007e76 <_printf_i+0x196>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f023 0320 	bic.w	r3, r3, #32
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	2310      	movs	r3, #16
 8007e78:	e7b0      	b.n	8007ddc <_printf_i+0xfc>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f043 0320 	orr.w	r3, r3, #32
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	2378      	movs	r3, #120	; 0x78
 8007e84:	4828      	ldr	r0, [pc, #160]	; (8007f28 <_printf_i+0x248>)
 8007e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e8a:	e7e3      	b.n	8007e54 <_printf_i+0x174>
 8007e8c:	065e      	lsls	r6, r3, #25
 8007e8e:	bf48      	it	mi
 8007e90:	b2ad      	uxthmi	r5, r5
 8007e92:	e7e6      	b.n	8007e62 <_printf_i+0x182>
 8007e94:	4616      	mov	r6, r2
 8007e96:	e7bb      	b.n	8007e10 <_printf_i+0x130>
 8007e98:	680b      	ldr	r3, [r1, #0]
 8007e9a:	6826      	ldr	r6, [r4, #0]
 8007e9c:	6960      	ldr	r0, [r4, #20]
 8007e9e:	1d1d      	adds	r5, r3, #4
 8007ea0:	600d      	str	r5, [r1, #0]
 8007ea2:	0635      	lsls	r5, r6, #24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	d501      	bpl.n	8007eac <_printf_i+0x1cc>
 8007ea8:	6018      	str	r0, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <_printf_i+0x1d2>
 8007eac:	0671      	lsls	r1, r6, #25
 8007eae:	d5fb      	bpl.n	8007ea8 <_printf_i+0x1c8>
 8007eb0:	8018      	strh	r0, [r3, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	e7ba      	b.n	8007e30 <_printf_i+0x150>
 8007eba:	680b      	ldr	r3, [r1, #0]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	600a      	str	r2, [r1, #0]
 8007ec0:	681e      	ldr	r6, [r3, #0]
 8007ec2:	6862      	ldr	r2, [r4, #4]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7f8 f98a 	bl	80001e0 <memchr>
 8007ecc:	b108      	cbz	r0, 8007ed2 <_printf_i+0x1f2>
 8007ece:	1b80      	subs	r0, r0, r6
 8007ed0:	6060      	str	r0, [r4, #4]
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007edc:	e7a8      	b.n	8007e30 <_printf_i+0x150>
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	47d0      	blx	sl
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d0ab      	beq.n	8007e44 <_printf_i+0x164>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	079b      	lsls	r3, r3, #30
 8007ef0:	d413      	bmi.n	8007f1a <_printf_i+0x23a>
 8007ef2:	68e0      	ldr	r0, [r4, #12]
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	bfb8      	it	lt
 8007efa:	4618      	movlt	r0, r3
 8007efc:	e7a4      	b.n	8007e48 <_printf_i+0x168>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4632      	mov	r2, r6
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	47d0      	blx	sl
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d09b      	beq.n	8007e44 <_printf_i+0x164>
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	68e3      	ldr	r3, [r4, #12]
 8007f10:	9903      	ldr	r1, [sp, #12]
 8007f12:	1a5b      	subs	r3, r3, r1
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dcf2      	bgt.n	8007efe <_printf_i+0x21e>
 8007f18:	e7eb      	b.n	8007ef2 <_printf_i+0x212>
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	f104 0619 	add.w	r6, r4, #25
 8007f20:	e7f5      	b.n	8007f0e <_printf_i+0x22e>
 8007f22:	bf00      	nop
 8007f24:	08009011 	.word	0x08009011
 8007f28:	08009022 	.word	0x08009022

08007f2c <_putc_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	460d      	mov	r5, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	4606      	mov	r6, r0
 8007f34:	b118      	cbz	r0, 8007f3e <_putc_r+0x12>
 8007f36:	6983      	ldr	r3, [r0, #24]
 8007f38:	b90b      	cbnz	r3, 8007f3e <_putc_r+0x12>
 8007f3a:	f7ff fbe7 	bl	800770c <__sinit>
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <_putc_r+0x84>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d124      	bne.n	8007f8e <_putc_r+0x62>
 8007f44:	6874      	ldr	r4, [r6, #4]
 8007f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f48:	07d8      	lsls	r0, r3, #31
 8007f4a:	d405      	bmi.n	8007f58 <_putc_r+0x2c>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	0599      	lsls	r1, r3, #22
 8007f50:	d402      	bmi.n	8007f58 <_putc_r+0x2c>
 8007f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f54:	f7ff fc8a 	bl	800786c <__retarget_lock_acquire_recursive>
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	da05      	bge.n	8007f6e <_putc_r+0x42>
 8007f62:	69a2      	ldr	r2, [r4, #24]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	db1c      	blt.n	8007fa2 <_putc_r+0x76>
 8007f68:	b2eb      	uxtb	r3, r5
 8007f6a:	2b0a      	cmp	r3, #10
 8007f6c:	d019      	beq.n	8007fa2 <_putc_r+0x76>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	6022      	str	r2, [r4, #0]
 8007f74:	701d      	strb	r5, [r3, #0]
 8007f76:	b2ed      	uxtb	r5, r5
 8007f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f7a:	07da      	lsls	r2, r3, #31
 8007f7c:	d405      	bmi.n	8007f8a <_putc_r+0x5e>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	059b      	lsls	r3, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_putc_r+0x5e>
 8007f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f86:	f7ff fc72 	bl	800786e <__retarget_lock_release_recursive>
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <_putc_r+0x88>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d101      	bne.n	8007f98 <_putc_r+0x6c>
 8007f94:	68b4      	ldr	r4, [r6, #8]
 8007f96:	e7d6      	b.n	8007f46 <_putc_r+0x1a>
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <_putc_r+0x8c>)
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	bf08      	it	eq
 8007f9e:	68f4      	ldreq	r4, [r6, #12]
 8007fa0:	e7d1      	b.n	8007f46 <_putc_r+0x1a>
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff f9b8 	bl	800731c <__swbuf_r>
 8007fac:	4605      	mov	r5, r0
 8007fae:	e7e3      	b.n	8007f78 <_putc_r+0x4c>
 8007fb0:	08008fc0 	.word	0x08008fc0
 8007fb4:	08008fe0 	.word	0x08008fe0
 8007fb8:	08008fa0 	.word	0x08008fa0

08007fbc <__sread>:
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc4:	f000 f888 	bl	80080d8 <_read_r>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	bfab      	itete	ge
 8007fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fce:	89a3      	ldrhlt	r3, [r4, #12]
 8007fd0:	181b      	addge	r3, r3, r0
 8007fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fd6:	bfac      	ite	ge
 8007fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fda:	81a3      	strhlt	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__swrite>:
 8007fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	898b      	ldrh	r3, [r1, #12]
 8007fe6:	05db      	lsls	r3, r3, #23
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4616      	mov	r6, r2
 8007fee:	d505      	bpl.n	8007ffc <__swrite+0x1e>
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f000 f85c 	bl	80080b4 <_lseek_r>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	f7f9 bca5 	b.w	8001960 <_write_r>

08008016 <__sseek>:
 8008016:	b510      	push	{r4, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801e:	f000 f849 	bl	80080b4 <_lseek_r>
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	bf15      	itete	ne
 8008028:	6560      	strne	r0, [r4, #84]	; 0x54
 800802a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800802e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strheq	r3, [r4, #12]
 8008034:	bf18      	it	ne
 8008036:	81a3      	strhne	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__sclose>:
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 b807 	b.w	8008050 <_close_r>

08008042 <abort>:
 8008042:	b508      	push	{r3, lr}
 8008044:	2006      	movs	r0, #6
 8008046:	f000 f881 	bl	800814c <raise>
 800804a:	2001      	movs	r0, #1
 800804c:	f7fe fd45 	bl	8006ada <_exit>

08008050 <_close_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d06      	ldr	r5, [pc, #24]	; (800806c <_close_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7fe fd64 	bl	8006b28 <_close>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_close_r+0x1a>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_close_r+0x1a>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200001d8 	.word	0x200001d8

08008070 <_fstat_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_fstat_r+0x20>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7fe fd5f 	bl	8006b40 <_fstat>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d102      	bne.n	800808c <_fstat_r+0x1c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b103      	cbz	r3, 800808c <_fstat_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	200001d8 	.word	0x200001d8

08008094 <_isatty_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4d06      	ldr	r5, [pc, #24]	; (80080b0 <_isatty_r+0x1c>)
 8008098:	2300      	movs	r3, #0
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7fe fd5e 	bl	8006b60 <_isatty>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_isatty_r+0x1a>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_isatty_r+0x1a>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200001d8 	.word	0x200001d8

080080b4 <_lseek_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	; (80080d4 <_lseek_r+0x20>)
 80080b8:	4604      	mov	r4, r0
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	602a      	str	r2, [r5, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f7fe fd57 	bl	8006b76 <_lseek>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_lseek_r+0x1e>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_lseek_r+0x1e>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200001d8 	.word	0x200001d8

080080d8 <_read_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_read_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7fe fd01 	bl	8006aee <_read>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_read_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_read_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	200001d8 	.word	0x200001d8

080080fc <_raise_r>:
 80080fc:	291f      	cmp	r1, #31
 80080fe:	b538      	push	{r3, r4, r5, lr}
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	d904      	bls.n	8008110 <_raise_r+0x14>
 8008106:	2316      	movs	r3, #22
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008112:	b112      	cbz	r2, 800811a <_raise_r+0x1e>
 8008114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008118:	b94b      	cbnz	r3, 800812e <_raise_r+0x32>
 800811a:	4620      	mov	r0, r4
 800811c:	f000 f830 	bl	8008180 <_getpid_r>
 8008120:	462a      	mov	r2, r5
 8008122:	4601      	mov	r1, r0
 8008124:	4620      	mov	r0, r4
 8008126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812a:	f000 b817 	b.w	800815c <_kill_r>
 800812e:	2b01      	cmp	r3, #1
 8008130:	d00a      	beq.n	8008148 <_raise_r+0x4c>
 8008132:	1c59      	adds	r1, r3, #1
 8008134:	d103      	bne.n	800813e <_raise_r+0x42>
 8008136:	2316      	movs	r3, #22
 8008138:	6003      	str	r3, [r0, #0]
 800813a:	2001      	movs	r0, #1
 800813c:	e7e7      	b.n	800810e <_raise_r+0x12>
 800813e:	2400      	movs	r4, #0
 8008140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008144:	4628      	mov	r0, r5
 8008146:	4798      	blx	r3
 8008148:	2000      	movs	r0, #0
 800814a:	e7e0      	b.n	800810e <_raise_r+0x12>

0800814c <raise>:
 800814c:	4b02      	ldr	r3, [pc, #8]	; (8008158 <raise+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f7ff bfd3 	b.w	80080fc <_raise_r>
 8008156:	bf00      	nop
 8008158:	2000002c 	.word	0x2000002c

0800815c <_kill_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_kill_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7fe fca6 	bl	8006aba <_kill>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_kill_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_kill_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	200001d8 	.word	0x200001d8

08008180 <_getpid_r>:
 8008180:	f7fe bc93 	b.w	8006aaa <_getpid>

08008184 <_init>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

08008190 <_fini>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr
