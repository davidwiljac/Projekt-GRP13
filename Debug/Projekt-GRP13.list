
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f6c  08005f6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08006004  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006004  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011747  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002997  00000000  00000000  00031807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  000341a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  00034be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011dcf  00000000  00000000  000354e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb1  00000000  00000000  000472b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bbf8  00000000  00000000  00054168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000afd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  000afdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c48 	.word	0x08005c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005c48 	.word	0x08005c48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	4608      	mov	r0, r1
 8000582:	4611      	mov	r1, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4603      	mov	r3, r0
 8000588:	70fb      	strb	r3, [r7, #3]
 800058a:	460b      	mov	r3, r1
 800058c:	70bb      	strb	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 800059a:	78bb      	ldrb	r3, [r7, #2]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d821      	bhi.n	80005e4 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80005a6:	78ba      	ldrb	r2, [r7, #2]
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	461a      	mov	r2, r3
 80005b2:	231f      	movs	r3, #31
 80005b4:	4093      	lsls	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	43db      	mvns	r3, r3
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80005c2:	78f9      	ldrb	r1, [r7, #3]
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	e074      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d823      	bhi.n	8000632 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80005f0:	78bb      	ldrb	r3, [r7, #2]
 80005f2:	1f5a      	subs	r2, r3, #5
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	461a      	mov	r2, r3
 80005fe:	231f      	movs	r3, #31
 8000600:	4093      	lsls	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1f5a      	subs	r2, r3, #5
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	e04d      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000632:	78bb      	ldrb	r3, [r7, #2]
 8000634:	2b0e      	cmp	r3, #14
 8000636:	d825      	bhi.n	8000684 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 800063e:	78bb      	ldrb	r3, [r7, #2]
 8000640:	f1a3 020a 	sub.w	r2, r3, #10
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	461a      	mov	r2, r3
 800064e:	231f      	movs	r3, #31
 8000650:	4093      	lsls	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	43db      	mvns	r3, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 800065e:	78f9      	ldrb	r1, [r7, #3]
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	f1a3 020a 	sub.w	r2, r3, #10
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4313      	orrs	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
 8000682:	e024      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000688:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	f1a3 020f 	sub.w	r2, r3, #15
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	461a      	mov	r2, r3
 800069a:	231f      	movs	r3, #31
 800069c:	4093      	lsls	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	43db      	mvns	r3, r3
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80006aa:	78f9      	ldrb	r1, [r7, #3]
 80006ac:	78bb      	ldrb	r3, [r7, #2]
 80006ae:	f1a3 020f 	sub.w	r2, r3, #15
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d923      	bls.n	800071c <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f1a3 020a 	sub.w	r2, r3, #10
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	401a      	ands	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6999      	ldr	r1, [r3, #24]
 8000700:	7878      	ldrb	r0, [r7, #1]
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	f1a3 020a 	sub.w	r2, r3, #10
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	fa00 f303 	lsl.w	r3, r0, r3
 8000712:	ea41 0203 	orr.w	r2, r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 800071a:	e01f      	b.n	800075c <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	43db      	mvns	r3, r3
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6959      	ldr	r1, [r3, #20]
 8000746:	7878      	ldrb	r0, [r7, #1]
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	fa00 f303 	lsl.w	r3, r0, r3
 8000754:	ea41 0203 	orr.w	r2, r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f043 0204 	orr.w	r2, r3, #4
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	609a      	str	r2, [r3, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	b29b      	uxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e001      	b.n	80007c6 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007fc:	4b91      	ldr	r3, [pc, #580]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 030c 	and.w	r3, r3, #12
 8000804:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d011      	beq.n	8000830 <RCC_GetClocksFreq+0x5c>
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	2b08      	cmp	r3, #8
 8000810:	d837      	bhi.n	8000882 <RCC_GetClocksFreq+0xae>
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <RCC_GetClocksFreq+0x4c>
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d004      	beq.n	8000828 <RCC_GetClocksFreq+0x54>
 800081e:	e030      	b.n	8000882 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a89      	ldr	r2, [pc, #548]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 8000824:	601a      	str	r2, [r3, #0]
      break;
 8000826:	e030      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a87      	ldr	r2, [pc, #540]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800082c:	601a      	str	r2, [r3, #0]
      break;
 800082e:	e02c      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000830:	4b84      	ldr	r3, [pc, #528]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000838:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800083a:	4b82      	ldr	r3, [pc, #520]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000842:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3302      	adds	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	4a7d      	ldr	r2, [pc, #500]	; (8000a4c <RCC_GetClocksFreq+0x278>)
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
 800085c:	e00d      	b.n	800087a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800085e:	4b79      	ldr	r3, [pc, #484]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3301      	adds	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800086a:	4a77      	ldr	r2, [pc, #476]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087e:	601a      	str	r2, [r3, #0]
      break;
 8000880:	e003      	b.n	800088a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a70      	ldr	r2, [pc, #448]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 8000886:	601a      	str	r2, [r3, #0]
      break;
 8000888:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800088a:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000892:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800089a:	4a6d      	ldr	r2, [pc, #436]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	40da      	lsrs	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008ba:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80008c2:	4a63      	ldr	r2, [pc, #396]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	40da      	lsrs	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80008e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	0adb      	lsrs	r3, r3, #11
 80008e8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80008ea:	4a59      	ldr	r2, [pc, #356]	; (8000a50 <RCC_GetClocksFreq+0x27c>)
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	40da      	lsrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800090a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000912:	4a50      	ldr	r2, [pc, #320]	; (8000a54 <RCC_GetClocksFreq+0x280>)
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	b29b      	uxth	r3, r3
 800091c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	e003      	b.n	800093e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000946:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800094e:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <RCC_GetClocksFreq+0x280>)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000956:	b29b      	uxth	r3, r3
 8000958:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	fbb2 f2f3 	udiv	r2, r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	e003      	b.n	800097a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	2b10      	cmp	r3, #16
 8000984:	d003      	beq.n	800098e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 800098a:	619a      	str	r2, [r3, #24]
 800098c:	e003      	b.n	8000996 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b20      	cmp	r3, #32
 80009a0:	d003      	beq.n	80009aa <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <RCC_GetClocksFreq+0x274>)
 80009a6:	61da      	str	r2, [r3, #28]
 80009a8:	e003      	b.n	80009b2 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009be:	d10d      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d108      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d104      	bne.n	80009dc <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	005a      	lsls	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	621a      	str	r2, [r3, #32]
 80009da:	e003      	b.n	80009e4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009f0:	d10d      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d108      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d104      	bne.n	8000a0e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	005a      	lsls	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a0c:	e003      	b.n	8000a16 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d104      	bne.n	8000a2c <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
 8000a2a:	e029      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <RCC_GetClocksFreq+0x270>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10f      	bne.n	8000a58 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a40:	e01e      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	003d0900 	.word	0x003d0900
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a58:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d104      	bne.n	8000a6e <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8000a6c:	e008      	b.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a6e:	4b61      	ldr	r3, [pc, #388]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d102      	bne.n	8000a80 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a5e      	ldr	r2, [pc, #376]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d104      	bne.n	8000a96 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a94:	e021      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a96:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa2:	d104      	bne.n	8000aae <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aac:	e015      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000aae:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000aba:	d104      	bne.n	8000ac6 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac4:	e009      	b.n	8000ada <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000ad2:	d102      	bne.n	8000ada <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000ada:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
 8000aee:	e021      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000afc:	d104      	bne.n	8000b08 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
 8000b06:	e015      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000b10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b14:	d104      	bne.n	8000b20 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1e:	e009      	b.n	8000b34 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000b28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b2c:	d102      	bne.n	8000b34 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
 8000b48:	e021      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b56:	d104      	bne.n	8000b62 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b60:	e015      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b6e:	d104      	bne.n	8000b7a <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
 8000b78:	e009      	b.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000b86:	d102      	bne.n	8000b8e <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d104      	bne.n	8000ba4 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ba2:	e021      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bb0:	d104      	bne.n	8000bbc <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bba:	e015      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000bc8:	d104      	bne.n	8000bd4 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bd2:	e009      	b.n	8000be8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <RCC_GetClocksFreq+0x420>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000be0:	d102      	bne.n	8000be8 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <RCC_GetClocksFreq+0x424>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000be8:	bf00      	nop
 8000bea:	372c      	adds	r7, #44	; 0x2c
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	007a1200 	.word	0x007a1200

08000bfc <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d103      	bne.n	8000c6a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e005      	b.n	8000c76 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d102      	bne.n	8000c76 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3308      	adds	r3, #8
 8000c74:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c88:	e006      	b.n	8000c98 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43da      	mvns	r2, r3
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3724      	adds	r7, #36	; 0x24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69da      	ldr	r2, [r3, #28]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e001      	b.n	8000cc8 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000d00:	2201      	movs	r2, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4013      	ands	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e00d      	b.n	8000d38 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d105      	bne.n	8000d2e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e004      	b.n	8000d38 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <USART_GetITStatus+0x8e>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	74fb      	strb	r3, [r7, #19]
 8000d62:	e001      	b.n	8000d68 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000d68:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f103 	lsl.w	r1, r2, r3
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <NVIC_EnableIRQ+0x30>)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <uart_get_char+0x48>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d011      	beq.n	8000de4 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <uart_get_char+0x4c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	b2d1      	uxtb	r1, r2
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <uart_get_char+0x4c>)
 8000dcc:	7011      	strb	r1, [r2, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <uart_get_char+0x50>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <uart_get_char+0x48>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <uart_get_char+0x48>)
 8000de2:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001ae 	.word	0x200001ae
 8000df8:	200001ad 	.word	0x200001ad
 8000dfc:	200000ac 	.word	0x200000ac

08000e00 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <uart_put_char+0x30>)
 8000e12:	f7ff fef3 	bl	8000bfc <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000e16:	bf00      	nop
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <uart_put_char+0x30>)
 8000e1c:	f7ff ff42 	bl	8000ca4 <USART_GetFlagStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f8      	beq.n	8000e18 <uart_put_char+0x18>
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004400 	.word	0x40004400

08000e34 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e012      	b.n	8000e6e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	d102      	bne.n	8000e5a <_write_r+0x26>
            uart_put_char('\r');
 8000e54:	200d      	movs	r0, #13
 8000e56:	f7ff ffd3 	bl	8000e00 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffcc 	bl	8000e00 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbe8      	blt.n	8000e48 <_write_r+0x14>
    }

    return len;
 8000e76:	683b      	ldr	r3, [r7, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <USART2_IRQHandler+0x5c>)
 8000e86:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <USART2_IRQHandler+0x60>)
 8000e88:	f7ff ff25 	bl	8000cd6 <USART_GetITStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d021      	beq.n	8000ed6 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <USART2_IRQHandler+0x60>)
 8000e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e96:	b299      	uxth	r1, r3
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <USART2_IRQHandler+0x64>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	b2d0      	uxtb	r0, r2
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <USART2_IRQHandler+0x64>)
 8000ea4:	7010      	strb	r0, [r2, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	b2c9      	uxtb	r1, r1
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <USART2_IRQHandler+0x68>)
 8000eac:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2bff      	cmp	r3, #255	; 0xff
 8000eb6:	d107      	bne.n	8000ec8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <USART2_IRQHandler+0x70>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <USART2_IRQHandler+0x70>)
 8000ec4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000ec6:	e006      	b.n	8000ed6 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <USART2_IRQHandler+0x6c>)
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	00050105 	.word	0x00050105
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	200001ac 	.word	0x200001ac
 8000ee8:	200000ac 	.word	0x200000ac
 8000eec:	200001ae 	.word	0x200001ae
 8000ef0:	200001ad 	.word	0x200001ad

08000ef4 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000efc:	4b86      	ldr	r3, [pc, #536]	; (8001118 <uart_init+0x224>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fe9b 	bl	8004c40 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000f0a:	4b83      	ldr	r3, [pc, #524]	; (8001118 <uart_init+0x224>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fe94 	bl	8004c40 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000f18:	4b80      	ldr	r3, [pc, #512]	; (800111c <uart_init+0x228>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a7f      	ldr	r2, [pc, #508]	; (800111c <uart_init+0x228>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000f24:	4b7d      	ldr	r3, [pc, #500]	; (800111c <uart_init+0x228>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4a7c      	ldr	r2, [pc, #496]	; (800111c <uart_init+0x228>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f3e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f4e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000f5e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f6a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000f6e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f7e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f8a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f8e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f9c:	f023 030c 	bic.w	r3, r3, #12
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fac:	8892      	ldrh	r2, [r2, #4]
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fc0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000fc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fcc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000fd0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fec:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ff0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <uart_init+0x22c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	; (8001120 <uart_init+0x22c>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <uart_init+0x22c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a47      	ldr	r2, [pc, #284]	; (8001120 <uart_init+0x22c>)
 8001004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001008:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <uart_init+0x22c>)
 800100c:	4a44      	ldr	r2, [pc, #272]	; (8001120 <uart_init+0x22c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <uart_init+0x22c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <uart_init+0x22c>)
 8001018:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800101c:	f023 030c 	bic.w	r3, r3, #12
 8001020:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <uart_init+0x22c>)
 8001024:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <uart_init+0x22c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <uart_init+0x22c>)
 800102c:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <uart_init+0x22c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <uart_init+0x22c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <uart_init+0x22c>)
 8001038:	f043 030c 	orr.w	r3, r3, #12
 800103c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <uart_init+0x22c>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <uart_init+0x22c>)
 8001044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001048:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <uart_init+0x22c>)
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <uart_init+0x22c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
 800105a:	2300      	movs	r3, #0
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fbb6 	bl	80007d4 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <uart_init+0x22c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d010      	beq.n	800109a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107a:	005a      	lsls	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	fbb3 f2f2 	udiv	r2, r3, r2
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	fb01 f202 	mul.w	r2, r1, r2
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
 8001098:	e00d      	b.n	80010b6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800109a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80010a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	fb01 f202 	mul.w	r2, r1, r2
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010bc:	429a      	cmp	r2, r3
 80010be:	d302      	bcc.n	80010c6 <uart_init+0x1d2>
        divider++;
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c2:	3301      	adds	r3, #1
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <uart_init+0x22c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80010d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80010dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010de:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80010e2:	4013      	ands	r3, r2
 80010e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010e6:	4313      	orrs	r3, r2
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <uart_init+0x22c>)
 80010ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010ee:	b292      	uxth	r2, r2
 80010f0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <uart_init+0x22c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <uart_init+0x22c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80010fe:	2201      	movs	r2, #1
 8001100:	4908      	ldr	r1, [pc, #32]	; (8001124 <uart_init+0x230>)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <uart_init+0x22c>)
 8001104:	f7ff fd8c 	bl	8000c20 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001108:	2026      	movs	r0, #38	; 0x26
 800110a:	f7ff fe35 	bl	8000d78 <NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000002c 	.word	0x2000002c
 800111c:	40021000 	.word	0x40021000
 8001120:	40004400 	.word	0x40004400
 8001124:	00050105 	.word	0x00050105

08001128 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8001132:	2316      	movs	r3, #22
 8001134:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d904      	bls.n	8001146 <fgcolor+0x1e>
	  type = 1;                // bold text
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b08      	subs	r3, #8
 8001144:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	331e      	adds	r3, #30
 800114c:	211b      	movs	r1, #27
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <fgcolor+0x34>)
 8001150:	f003 fcca 	bl	8004ae8 <iprintf>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08005c60 	.word	0x08005c60

08001160 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8001164:	211b      	movs	r1, #27
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <clrscr+0x18>)
 8001168:	f003 fcbe 	bl	8004ae8 <iprintf>
    printf("%c[J", ESC);
 800116c:	211b      	movs	r1, #27
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <clrscr+0x1c>)
 8001170:	f003 fcba 	bl	8004ae8 <iprintf>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08005c8c 	.word	0x08005c8c
 800117c:	08005c94 	.word	0x08005c94

08001180 <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	211b      	movs	r1, #27
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <gotoxy+0x20>)
 8001192:	f003 fca9 	bl	8004ae8 <iprintf>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08005ca4 	.word	0x08005ca4

080011a4 <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d15e      	bne.n	8001276 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
 80011bc:	e019      	b.n	80011f2 <drawBox+0x4e>
			 gotoxy(x1,y);
 80011be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ffdd 	bl	8001180 <gotoxy>
			 if (y==y1){
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d103      	bne.n	80011d6 <drawBox+0x32>
				printf("%c", 201);
 80011ce:	20c9      	movs	r0, #201	; 0xc9
 80011d0:	f003 fca2 	bl	8004b18 <putchar>
 80011d4:	e00a      	b.n	80011ec <drawBox+0x48>
			 }
			 else if(y==y2){
 80011d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d103      	bne.n	80011e6 <drawBox+0x42>
				printf("%c", 200);
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f003 fc9a 	bl	8004b18 <putchar>
 80011e4:	e002      	b.n	80011ec <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 80011e6:	20ba      	movs	r0, #186	; 0xba
 80011e8:	f003 fc96 	bl	8004b18 <putchar>
		 for(int y = y1; y <= y2; y++){
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	3301      	adds	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dde1      	ble.n	80011be <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	e014      	b.n	800122a <drawBox+0x86>
   			 if(x!=x1){
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d00d      	beq.n	8001224 <drawBox+0x80>
				 gotoxy(x,y1);
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6a38      	ldr	r0, [r7, #32]
 800120c:	f7ff ffb8 	bl	8001180 <gotoxy>
				 printf("%c", 205);
 8001210:	20cd      	movs	r0, #205	; 0xcd
 8001212:	f003 fc81 	bl	8004b18 <putchar>
				 gotoxy(x,y2);
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f7ff ffb1 	bl	8001180 <gotoxy>
				 printf("%c", 205);
 800121e:	20cd      	movs	r0, #205	; 0xcd
 8001220:	f003 fc7a 	bl	8004b18 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3a      	ldr	r2, [r7, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	dde6      	ble.n	8001200 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e019      	b.n	800126c <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001238:	69f9      	ldr	r1, [r7, #28]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa0 	bl	8001180 <gotoxy>
   			 if (y==y1){
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	429a      	cmp	r2, r3
 8001246:	d103      	bne.n	8001250 <drawBox+0xac>
				printf("%c", 187);
 8001248:	20bb      	movs	r0, #187	; 0xbb
 800124a:	f003 fc65 	bl	8004b18 <putchar>
 800124e:	e00a      	b.n	8001266 <drawBox+0xc2>
			 }
			 else if(y==y2){
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d103      	bne.n	8001260 <drawBox+0xbc>
				printf("%c", 188);
 8001258:	20bc      	movs	r0, #188	; 0xbc
 800125a:	f003 fc5d 	bl	8004b18 <putchar>
 800125e:	e002      	b.n	8001266 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001260:	20ba      	movs	r0, #186	; 0xba
 8001262:	f003 fc59 	bl	8004b18 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dde1      	ble.n	8001238 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8001274:	e05d      	b.n	8001332 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e019      	b.n	80012b0 <drawBox+0x10c>
			 gotoxy(x1,y);
 800127c:	69b9      	ldr	r1, [r7, #24]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff ff7e 	bl	8001180 <gotoxy>
			 if (y==y1){
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	429a      	cmp	r2, r3
 800128a:	d103      	bne.n	8001294 <drawBox+0xf0>
				printf("%c", 218);
 800128c:	20da      	movs	r0, #218	; 0xda
 800128e:	f003 fc43 	bl	8004b18 <putchar>
 8001292:	e00a      	b.n	80012aa <drawBox+0x106>
			 else if(y==y2){
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d103      	bne.n	80012a4 <drawBox+0x100>
				printf("%c", 192);
 800129c:	20c0      	movs	r0, #192	; 0xc0
 800129e:	f003 fc3b 	bl	8004b18 <putchar>
 80012a2:	e002      	b.n	80012aa <drawBox+0x106>
				printf("%c", 179);
 80012a4:	20b3      	movs	r0, #179	; 0xb3
 80012a6:	f003 fc37 	bl	8004b18 <putchar>
		for(int y = y1; y <= y2; y++){
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dde1      	ble.n	800127c <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e014      	b.n	80012e8 <drawBox+0x144>
			if(x!=x1){
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d00d      	beq.n	80012e2 <drawBox+0x13e>
				 gotoxy(x,y1);
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f7ff ff59 	bl	8001180 <gotoxy>
				 printf("%c", 196);
 80012ce:	20c4      	movs	r0, #196	; 0xc4
 80012d0:	f003 fc22 	bl	8004b18 <putchar>
				 gotoxy(x,y2);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff52 	bl	8001180 <gotoxy>
				 printf("%c", 196);
 80012dc:	20c4      	movs	r0, #196	; 0xc4
 80012de:	f003 fc1b 	bl	8004b18 <putchar>
		for(int x = x1; x <= x2; x++){
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dde6      	ble.n	80012be <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e019      	b.n	800132a <drawBox+0x186>
			 gotoxy(x2,y);
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff41 	bl	8001180 <gotoxy>
			if (y==y1){
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <drawBox+0x16a>
				printf("%c", 191);
 8001306:	20bf      	movs	r0, #191	; 0xbf
 8001308:	f003 fc06 	bl	8004b18 <putchar>
 800130c:	e00a      	b.n	8001324 <drawBox+0x180>
			 else if(y==y2){
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d103      	bne.n	800131e <drawBox+0x17a>
				printf("%c", 217);
 8001316:	20d9      	movs	r0, #217	; 0xd9
 8001318:	f003 fbfe 	bl	8004b18 <putchar>
 800131c:	e002      	b.n	8001324 <drawBox+0x180>
				printf("%c", 179);
 800131e:	20b3      	movs	r0, #179	; 0xb3
 8001320:	f003 fbfa 	bl	8004b18 <putchar>
		for(int y = y1; y <= y2; y++){
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	dde1      	ble.n	80012f6 <drawBox+0x152>
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 800133a:	b590      	push	{r4, r7, lr}
 800133c:	b089      	sub	sp, #36	; 0x24
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001348:	e073      	b.n	8001432 <updateBullets+0xf8>

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7a1b      	ldrb	r3, [r3, #8]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f001 f846 	bl	80023e2 <intToFp>
 8001356:	4602      	mov	r2, r0
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f83b 	bl	80023e2 <intToFp>
 800136c:	4602      	mov	r2, r0
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f8d3 	bl	8002524 <fpAbs>
 800137e:	4604      	mov	r4, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f8ce 	bl	8002524 <fpAbs>
 8001388:	4603      	mov	r3, r0
 800138a:	4423      	add	r3, r4
 800138c:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001390:	4618      	mov	r0, r3
 8001392:	f001 f85c 	bl	800244e <fpMultiply>
 8001396:	4602      	mov	r2, r0
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 800139c:	2001      	movs	r0, #1
 800139e:	f001 f820 	bl	80023e2 <intToFp>
 80013a2:	4602      	mov	r2, r0
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f001 f870 	bl	8002490 <fpDivide>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f107 0014 	add.w	r0, r7, #20
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	ca06      	ldmia	r2, {r1, r2}
 80013bc:	f001 f890 	bl	80024e0 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7a9b      	ldrb	r3, [r3, #10]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f80b 	bl	80023e2 <intToFp>
 80013cc:	4604      	mov	r4, r0
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f001 f838 	bl	800244e <fpMultiply>
 80013de:	4603      	mov	r3, r0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4620      	mov	r0, r4
 80013e4:	f001 f854 	bl	8002490 <fpDivide>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f107 000c 	add.w	r0, r7, #12
 80013ee:	f107 0214 	add.w	r2, r7, #20
 80013f2:	ca06      	ldmia	r2, {r1, r2}
 80013f4:	f001 f874 	bl	80024e0 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	441a      	add	r2, r3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	441a      	add	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	441a      	add	r2, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	441a      	add	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d188      	bne.n	800134a <updateBullets+0x10>
	}

}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}

08001442 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001450:	e194      	b.n	800177c <detectBulletHit+0x33a>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 ffd8 	bl	800240c <fpToInt>
 800145c:	4603      	mov	r3, r0
 800145e:	72fb      	strb	r3, [r7, #11]


		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ffd1 	bl	800240c <fpToInt>
 800146a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 800146c:	2b04      	cmp	r3, #4
 800146e:	dd1a      	ble.n	80014a6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 ffc9 	bl	800240c <fpToInt>
 800147a:	4603      	mov	r3, r0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 800147c:	2b55      	cmp	r3, #85	; 0x55
 800147e:	dc12      	bgt.n	80014a6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 ffc1 	bl	800240c <fpToInt>
 800148a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 800148c:	2b01      	cmp	r3, #1
 800148e:	dd0a      	ble.n	80014a6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 ffb9 	bl	800240c <fpToInt>
 800149a:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 800149c:	2b9b      	cmp	r3, #155	; 0x9b
 800149e:	dc02      	bgt.n	80014a6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d801      	bhi.n	80014aa <detectBulletHit+0x68>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <detectBulletHit+0x6a>
 80014aa:	2300      	movs	r3, #0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80014ac:	72bb      	strb	r3, [r7, #10]
				distToMoon<=6;

		if(hitInertObject){
 80014ae:	7abb      	ldrb	r3, [r7, #10]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <detectBulletHit+0x84>
			deleteBulletNode(&(gameState->bulletLL), current);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6979      	ldr	r1, [r7, #20]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f8e5 	bl	8003688 <deleteBulletNode>
			current = current->nextBulletAddress;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	617b      	str	r3, [r7, #20]
			continue;
 80014c4:	e15a      	b.n	800177c <detectBulletHit+0x33a>
		}

		uint8_t hitSpaceship;

		if(gameState->spaceship.numberOfParts==1){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d131      	bne.n	8001532 <detectBulletHit+0xf0>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 ff9a 	bl	800240c <fpToInt>
 80014d8:	4604      	mov	r4, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ff94 	bl	800240c <fpToInt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	3b01      	subs	r3, #1
 80014e8:	429c      	cmp	r4, r3
 80014ea:	db1f      	blt.n	800152c <detectBulletHit+0xea>
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 ff8b 	bl	800240c <fpToInt>
 80014f6:	4604      	mov	r4, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 ff85 	bl	800240c <fpToInt>
 8001502:	4603      	mov	r3, r0
 8001504:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001506:	429c      	cmp	r4, r3
 8001508:	db10      	blt.n	800152c <detectBulletHit+0xea>
						fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+1);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 ff7c 	bl	800240c <fpToInt>
 8001514:	4604      	mov	r4, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 ff76 	bl	800240c <fpToInt>
 8001520:	4603      	mov	r3, r0
 8001522:	3301      	adds	r3, #1
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8001524:	429c      	cmp	r4, r3
 8001526:	dc01      	bgt.n	800152c <detectBulletHit+0xea>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <detectBulletHit+0xec>
 800152c:	2300      	movs	r3, #0
 800152e:	74fb      	strb	r3, [r7, #19]
 8001530:	e06a      	b.n	8001608 <detectBulletHit+0x1c6>
		}
		else if(gameState->spaceship.numberOfParts==2){
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f1b      	ldrb	r3, [r3, #28]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d131      	bne.n	800159e <detectBulletHit+0x15c>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 ff64 	bl	800240c <fpToInt>
 8001544:	4604      	mov	r4, r0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 ff5e 	bl	800240c <fpToInt>
 8001550:	4603      	mov	r3, r0
 8001552:	3b01      	subs	r3, #1
 8001554:	429c      	cmp	r4, r3
 8001556:	db1f      	blt.n	8001598 <detectBulletHit+0x156>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 ff55 	bl	800240c <fpToInt>
 8001562:	4604      	mov	r4, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 ff4f 	bl	800240c <fpToInt>
 800156e:	4603      	mov	r3, r0
 8001570:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001572:	429c      	cmp	r4, r3
 8001574:	db10      	blt.n	8001598 <detectBulletHit+0x156>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 ff46 	bl	800240c <fpToInt>
 8001580:	4604      	mov	r4, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 ff40 	bl	800240c <fpToInt>
 800158c:	4603      	mov	r3, r0
 800158e:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8001590:	429c      	cmp	r4, r3
 8001592:	dc01      	bgt.n	8001598 <detectBulletHit+0x156>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <detectBulletHit+0x158>
 8001598:	2300      	movs	r3, #0
 800159a:	74fb      	strb	r3, [r7, #19]
 800159c:	e034      	b.n	8001608 <detectBulletHit+0x1c6>
		}
		else if(gameState->spaceship.numberOfParts==3){
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7f1b      	ldrb	r3, [r3, #28]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d130      	bne.n	8001608 <detectBulletHit+0x1c6>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 ff2e 	bl	800240c <fpToInt>
 80015b0:	4604      	mov	r4, r0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 ff28 	bl	800240c <fpToInt>
 80015bc:	4603      	mov	r3, r0
 80015be:	3b01      	subs	r3, #1
 80015c0:	429c      	cmp	r4, r3
 80015c2:	db1f      	blt.n	8001604 <detectBulletHit+0x1c2>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 ff1f 	bl	800240c <fpToInt>
 80015ce:	4604      	mov	r4, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ff19 	bl	800240c <fpToInt>
 80015da:	4603      	mov	r3, r0
 80015dc:	3b09      	subs	r3, #9
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80015de:	429c      	cmp	r4, r3
 80015e0:	db10      	blt.n	8001604 <detectBulletHit+0x1c2>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 ff10 	bl	800240c <fpToInt>
 80015ec:	4604      	mov	r4, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 ff0a 	bl	800240c <fpToInt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 80015fc:	429c      	cmp	r4, r3
 80015fe:	dc01      	bgt.n	8001604 <detectBulletHit+0x1c2>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <detectBulletHit+0x1c4>
 8001604:	2300      	movs	r3, #0
 8001606:	74fb      	strb	r3, [r7, #19]
		}

		if(hitSpaceship){
 8001608:	7cfb      	ldrb	r3, [r7, #19]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04b      	beq.n	80016a6 <detectBulletHit+0x264>

			if(gameState->spaceship.numberOfParts==3){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f1b      	ldrb	r3, [r3, #28]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d11d      	bne.n	8001652 <detectBulletHit+0x210>
				deleteMe(fpToInt(gameState->spaceship.position.x)-7, fpToInt(gameState->spaceship.position.y)/yScale);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fef6 	bl	800240c <fpToInt>
 8001620:	4603      	mov	r3, r0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3b07      	subs	r3, #7
 8001626:	b2dc      	uxtb	r4, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 feed 	bl	800240c <fpToInt>
 8001632:	4603      	mov	r3, r0
 8001634:	0fda      	lsrs	r2, r3, #31
 8001636:	4413      	add	r3, r2
 8001638:	105b      	asrs	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	4620      	mov	r0, r4
 8001640:	f001 fe11 	bl	8003266 <deleteMe>
				gameState->spaceship.numberOfParts--;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7f1b      	ldrb	r3, [r3, #28]
 8001648:	3b01      	subs	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	771a      	strb	r2, [r3, #28]
 8001650:	e020      	b.n	8001694 <detectBulletHit+0x252>
			} else if(gameState->spaceship.numberOfParts==2){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7f1b      	ldrb	r3, [r3, #28]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d11c      	bne.n	8001694 <detectBulletHit+0x252>
				//gotoxy(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y));
				deleteMe(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y)/yScale);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fed4 	bl	800240c <fpToInt>
 8001664:	4603      	mov	r3, r0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3307      	adds	r3, #7
 800166a:	b2dc      	uxtb	r4, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fecb 	bl	800240c <fpToInt>
 8001676:	4603      	mov	r3, r0
 8001678:	0fda      	lsrs	r2, r3, #31
 800167a:	4413      	add	r3, r2
 800167c:	105b      	asrs	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	4620      	mov	r0, r4
 8001684:	f001 fdef 	bl	8003266 <deleteMe>
				gameState->spaceship.numberOfParts--;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	3b01      	subs	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	771a      	strb	r2, [r3, #28]
			}


			deleteBulletNode(&(gameState->bulletLL), current);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fff5 	bl	8003688 <deleteBulletNode>
			current = current->nextBulletAddress;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	617b      	str	r3, [r7, #20]
			continue;
 80016a4:	e06a      	b.n	800177c <detectBulletHit+0x33a>
		}


		//Check if the bullet hit an enemy
		enemyNode_t* currentEnemy = gameState->enemyLL;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80016ac:	e060      	b.n	8001770 <detectBulletHit+0x32e>
			uint8_t hitEnemy = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	727b      	strb	r3, [r7, #9]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fea8 	bl	800240c <fpToInt>
 80016bc:	4604      	mov	r4, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fea0 	bl	800240c <fpToInt>
 80016cc:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80016ce:	429c      	cmp	r4, r3
 80016d0:	db33      	blt.n	800173a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fe98 	bl	800240c <fpToInt>
 80016dc:	4604      	mov	r4, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fe90 	bl	800240c <fpToInt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80016f0:	429c      	cmp	r4, r3
 80016f2:	dc22      	bgt.n	800173a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fe87 	bl	800240c <fpToInt>
 80016fe:	4604      	mov	r4, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fe7f 	bl	800240c <fpToInt>
 800170e:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8001710:	429c      	cmp	r4, r3
 8001712:	db12      	blt.n	800173a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fe77 	bl	800240c <fpToInt>
 800171e:	4604      	mov	r4, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fe6f 	bl	800240c <fpToInt>
 800172e:	4603      	mov	r3, r0
 8001730:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001732:	429c      	cmp	r4, r3
 8001734:	dc01      	bgt.n	800173a <detectBulletHit+0x2f8>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <detectBulletHit+0x2fa>
 800173a:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800173c:	727b      	strb	r3, [r7, #9]
			if(hitEnemy == 1){
 800173e:	7a7b      	ldrb	r3, [r7, #9]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d112      	bne.n	800176a <detectBulletHit+0x328>
				gameState->score += 10;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	330a      	adds	r3, #10
 800174a:	b29a      	uxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f001 fd2b 	bl	80031ac <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6979      	ldr	r1, [r7, #20]
 800175a:	4618      	mov	r0, r3
 800175c:	f001 ff94 	bl	8003688 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 fedc 	bl	8003520 <deleteEnemyNode>
				break;
 8001768:	e005      	b.n	8001776 <detectBulletHit+0x334>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d19b      	bne.n	80016ae <detectBulletHit+0x26c>
		}
		current = current->nextBulletAddress;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f ae67 	bne.w	8001452 <detectBulletHit+0x10>
	}
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}

0800178e <drawBullets>:

void drawBullets(gameState_t* gameState){
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 800179c:	e036      	b.n	800180c <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fe32 	bl	800240c <fpToInt>
 80017a8:	4604      	mov	r4, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fe2c 	bl	800240c <fpToInt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	0fda      	lsrs	r2, r3, #31
 80017b8:	4413      	add	r3, r2
 80017ba:	105b      	asrs	r3, r3, #1
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff fcde 	bl	8001180 <gotoxy>
		printf(" ");
 80017c4:	2020      	movs	r0, #32
 80017c6:	f003 f9a7 	bl	8004b18 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fe1c 	bl	800240c <fpToInt>
 80017d4:	4604      	mov	r4, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fe16 	bl	800240c <fpToInt>
 80017e0:	4603      	mov	r3, r0
 80017e2:	0fda      	lsrs	r2, r3, #31
 80017e4:	4413      	add	r3, r2
 80017e6:	105b      	asrs	r3, r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fcc8 	bl	8001180 <gotoxy>
		printf("O");
 80017f0:	204f      	movs	r0, #79	; 0x4f
 80017f2:	f003 f991 	bl	8004b18 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1c5      	bne.n	800179e <drawBullets+0x10>
	}
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}

0800181c <NVIC_EnableIRQ>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	2201      	movs	r2, #1
 800182e:	fa02 f103 	lsl.w	r1, r2, r3
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <NVIC_EnableIRQ+0x30>)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da0b      	bge.n	800187c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <NVIC_SetPriority+0x4c>)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	3b04      	subs	r3, #4
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800187a:	e009      	b.n	8001890 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <NVIC_SetPriority+0x50>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <initJoystick+0x120>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <initJoystick+0x120>)
 80018ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b2:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <initJoystick+0x120>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <initJoystick+0x120>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 80018c0:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <initJoystick+0x120>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <initJoystick+0x120>)
 80018c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ca:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <initJoystick+0x124>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3d      	ldr	r2, [pc, #244]	; (80019c8 <initJoystick+0x124>)
 80018d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018d6:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <initJoystick+0x124>)
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <initJoystick+0x124>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <initJoystick+0x124>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <initJoystick+0x124>)
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <initJoystick+0x124>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4a35      	ldr	r2, [pc, #212]	; (80019c8 <initJoystick+0x124>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80018f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001906:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800190c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <initJoystick+0x124>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <initJoystick+0x124>)
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <initJoystick+0x124>)
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <initJoystick+0x124>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <initJoystick+0x124>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <initJoystick+0x124>)
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <initJoystick+0x124>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <initJoystick+0x124>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <initJoystick+0x128>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <initJoystick+0x128>)
 8001966:	f023 030c 	bic.w	r3, r3, #12
 800196a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <initJoystick+0x128>)
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <initJoystick+0x128>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <initJoystick+0x128>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <initJoystick+0x128>)
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <initJoystick+0x128>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <initJoystick+0x128>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <initJoystick+0x128>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <initJoystick+0x128>)
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <initJoystick+0x128>)
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <initJoystick+0x128>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <initJoystick+0x128>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <initJoystick+0x128>)
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <initJoystick+0x128>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <initJoystick+0x128>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	60d3      	str	r3, [r2, #12]

}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800

080019d0 <centerIsPressed>:

uint8_t centerIsPressed(){
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <centerIsPressed+0x50>)
 80019d6:	8a1b      	ldrh	r3, [r3, #16]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <centerIsPressed+0x2c>
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <centerIsPressed+0x54>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <centerIsPressed+0x58>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b1e      	cmp	r3, #30
 80019ee:	d905      	bls.n	80019fc <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <centerIsPressed+0x54>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <centerIsPressed+0x58>)
 80019f6:	6013      	str	r3, [r2, #0]
		 return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00c      	b.n	8001a16 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <centerIsPressed+0x50>)
 80019fe:	8a1b      	ldrh	r3, [r3, #16]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d104      	bne.n	8001a14 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <centerIsPressed+0x54>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3b1e      	subs	r3, #30
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <centerIsPressed+0x58>)
 8001a12:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001a14:	2300      	movs	r3, #0
	 }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	48000400 	.word	0x48000400
 8001a24:	200001c8 	.word	0x200001c8
 8001a28:	200001b0 	.word	0x200001b0

08001a2c <upIsPressed>:

uint8_t upIsPressed(){
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a34:	8a1b      	ldrh	r3, [r3, #16]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <upIsPressed+0x2e>
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <upIsPressed+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <upIsPressed+0x58>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b1e      	cmp	r3, #30
 8001a4c:	d905      	bls.n	8001a5a <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <upIsPressed+0x54>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <upIsPressed+0x58>)
 8001a54:	6013      	str	r3, [r2, #0]
			 return 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00d      	b.n	8001a76 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001a5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a5e:	8a1b      	ldrh	r3, [r3, #16]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <upIsPressed+0x54>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <upIsPressed+0x58>)
 8001a72:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001a74:	2300      	movs	r3, #0
		 }
	 }
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200001c8 	.word	0x200001c8
 8001a84:	200001b4 	.word	0x200001b4

08001a88 <downIsPressed>:

uint8_t downIsPressed(){
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <downIsPressed+0x50>)
 8001a8e:	8a1b      	ldrh	r3, [r3, #16]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <downIsPressed+0x2c>
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <downIsPressed+0x54>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <downIsPressed+0x58>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b1e      	cmp	r3, #30
 8001aa6:	d905      	bls.n	8001ab4 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <downIsPressed+0x54>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <downIsPressed+0x58>)
 8001aae:	6013      	str	r3, [r2, #0]
			 return 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e00c      	b.n	8001ace <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <downIsPressed+0x50>)
 8001ab6:	8a1b      	ldrh	r3, [r3, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <downIsPressed+0x54>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3b1e      	subs	r3, #30
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <downIsPressed+0x58>)
 8001aca:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001acc:	2300      	movs	r3, #0
		 }
	 }
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	200001c8 	.word	0x200001c8
 8001ae0:	200001b8 	.word	0x200001b8

08001ae4 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <initTimer+0x60>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <initTimer+0x60>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <initTimer+0x64>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <initTimer+0x64>)
 8001afc:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001b00:	f023 030f 	bic.w	r3, r3, #15
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <initTimer+0x64>)
 8001b0a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <initTimer+0x64>)
 8001b12:	2209      	movs	r2, #9
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <initTimer+0x64>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <initTimer+0x64>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <initTimer+0x64>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <initTimer+0x64>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001b32:	2100      	movs	r1, #0
 8001b34:	2018      	movs	r0, #24
 8001b36:	f7ff fe8b 	bl	8001850 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001b3a:	2018      	movs	r0, #24
 8001b3c:	f7ff fe6e 	bl	800181c <NVIC_EnableIRQ>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40014000 	.word	0x40014000

08001b4c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	runtime++;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001b58:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6113      	str	r3, [r2, #16]
 }
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	200001c8 	.word	0x200001c8
 8001b74:	40014000 	.word	0x40014000

08001b78 <I2C_init>:

    return val;
}

void I2C_init()
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <I2C_init+0x144>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	; (8001cbc <I2C_init+0x144>)
 8001b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b86:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <I2C_init+0x148>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <I2C_init+0x148>)
 8001b8e:	f023 030f 	bic.w	r3, r3, #15
 8001b92:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <I2C_init+0x148>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	4a49      	ldr	r2, [pc, #292]	; (8001cc0 <I2C_init+0x148>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <I2C_init+0x148>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <I2C_init+0x148>)
 8001ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001baa:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <I2C_init+0x148>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	4a43      	ldr	r2, [pc, #268]	; (8001cc0 <I2C_init+0x148>)
 8001bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb6:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <I2C_init+0x148>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <I2C_init+0x148>)
 8001bbe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001bc2:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <I2C_init+0x148>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <I2C_init+0x148>)
 8001bca:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001bce:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <I2C_init+0x148>)
 8001bd2:	889b      	ldrh	r3, [r3, #4]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4a3a      	ldr	r2, [pc, #232]	; (8001cc0 <I2C_init+0x148>)
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <I2C_init+0x148>)
 8001be2:	889b      	ldrh	r3, [r3, #4]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <I2C_init+0x148>)
 8001be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <I2C_init+0x148>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <I2C_init+0x148>)
 8001bf6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001bfa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <I2C_init+0x148>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2f      	ldr	r2, [pc, #188]	; (8001cc0 <I2C_init+0x148>)
 8001c02:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8001c06:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <I2C_init+0x148>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <I2C_init+0x148>)
 8001c0e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001c12:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <I2C_init+0x148>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <I2C_init+0x148>)
 8001c1a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001c1e:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <I2C_init+0x144>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <I2C_init+0x144>)
 8001c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2a:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <I2C_init+0x14c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <I2C_init+0x14c>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <I2C_init+0x14c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4921      	ldr	r1, [pc, #132]	; (8001cc4 <I2C_init+0x14c>)
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <I2C_init+0x150>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <I2C_init+0x14c>)
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <I2C_init+0x14c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <I2C_init+0x14c>)
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <I2C_init+0x14c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <I2C_init+0x14c>)
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <I2C_init+0x154>)
 8001c58:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <I2C_init+0x14c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <I2C_init+0x14c>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <I2C_init+0x14c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <I2C_init+0x14c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <I2C_init+0x14c>)
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <I2C_init+0x14c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <I2C_init+0x14c>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <I2C_init+0x14c>)
 8001c80:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8001c84:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <I2C_init+0x14c>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <I2C_init+0x14c>)
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <I2C_init+0x14c>)
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <I2C_init+0x14c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <I2C_init+0x14c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <I2C_init+0x14c>)
 8001ca0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ca8:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <I2C_init+0x14c>)
 8001cac:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <I2C_init+0x14c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	6053      	str	r3, [r2, #4]
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	40005400 	.word	0x40005400
 8001cc8:	00cfe0ff 	.word	0x00cfe0ff
 8001ccc:	10805e89 	.word	0x10805e89

08001cd0 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <analogConfigPorts+0x140>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4a4d      	ldr	r2, [pc, #308]	; (8001e10 <analogConfigPorts+0x140>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8001ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	0052      	lsls	r2, r2, #1
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	43d2      	mvns	r2, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cfe:	400b      	ands	r3, r1
 8001d00:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8001d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8001d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	0052      	lsls	r2, r2, #1
 8001d18:	2103      	movs	r1, #3
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	43d2      	mvns	r2, r2
 8001d20:	4611      	mov	r1, r2
 8001d22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d26:	400b      	ands	r3, r1
 8001d28:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8001d2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	2103      	movs	r1, #3
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <analogConfigPorts+0x140>)
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <analogConfigPorts+0x140>)
 8001d4a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <analogConfigPorts+0x140>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <analogConfigPorts+0x140>)
 8001d56:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8001d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <analogConfigPorts+0x140>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <analogConfigPorts+0x140>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8001d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8001d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <analogConfigPorts+0x144>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8001d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d8a:	f023 030f 	bic.w	r3, r3, #15
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8001d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e002      	b.n	8001dac <analogConfigPorts+0xdc>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db2:	dbf8      	blt.n	8001da6 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8001db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dc2:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8001dc4:	bf00      	nop
 8001dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dafa      	bge.n	8001dc6 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e002      	b.n	8001ddc <analogConfigPorts+0x10c>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b63      	cmp	r3, #99	; 0x63
 8001de0:	ddf9      	ble.n	8001dd6 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8001de2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8001df2:	bf00      	nop
 8001df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f8      	beq.n	8001df4 <analogConfigPorts+0x124>
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	fdffc007 	.word	0xfdffc007

08001e18 <readPotentiometer>:

uint16_t readPotentiometer(){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2201      	movs	r2, #1
 8001e22:	2101      	movs	r1, #1
 8001e24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e28:	f7fe fba6 	bl	8000578 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8001e2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e30:	f7fe fc9a 	bl	8000768 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001e34:	bf00      	nop
 8001e36:	2104      	movs	r1, #4
 8001e38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e3c:	f7fe fcb1 	bl	80007a2 <ADC_GetFlagStatus>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f7      	beq.n	8001e36 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8001e46:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e4a:	f7fe fc9d 	bl	8000788 <ADC_GetConversionValue>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8001e52:	88fb      	ldrh	r3, [r7, #6]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8001e62:	2309      	movs	r3, #9
 8001e64:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	0052      	lsls	r2, r2, #1
 8001e70:	2103      	movs	r1, #3
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	43d2      	mvns	r2, r2
 8001e78:	4611      	mov	r1, r2
 8001e7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e7e:	400b      	ands	r3, r1
 8001e80:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8001e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	4611      	mov	r1, r2
 8001e94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 8001e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 8001ec0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ec8:	8892      	ldrh	r2, [r2, #4]
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8001ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	2103      	movs	r1, #3
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	43d2      	mvns	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 8001eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8001f04:	2307      	movs	r3, #7
 8001f06:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <initRGB+0x1c8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	0052      	lsls	r2, r2, #1
 8001f10:	2103      	movs	r1, #3
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	43d2      	mvns	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <initRGB+0x1c8>)
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <initRGB+0x1c8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	0052      	lsls	r2, r2, #1
 8001f28:	2102      	movs	r1, #2
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4a3c      	ldr	r2, [pc, #240]	; (8002024 <initRGB+0x1c8>)
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <initRGB+0x1c8>)
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <initRGB+0x1c8>)
 8001f52:	b292      	uxth	r2, r2
 8001f54:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 8001f56:	4a33      	ldr	r2, [pc, #204]	; (8002024 <initRGB+0x1c8>)
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <initRGB+0x1c8>)
 8001f5a:	8892      	ldrh	r2, [r2, #4]
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <initRGB+0x1c8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	2103      	movs	r1, #3
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	43d2      	mvns	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <initRGB+0x1c8>)
 8001f74:	400b      	ands	r3, r1
 8001f76:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <initRGB+0x1c8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	0052      	lsls	r2, r2, #1
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4611      	mov	r1, r2
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <initRGB+0x1c8>)
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <initRGB+0x1cc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	0052      	lsls	r2, r2, #1
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	43d2      	mvns	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4a20      	ldr	r2, [pc, #128]	; (8002028 <initRGB+0x1cc>)
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <initRGB+0x1cc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	0052      	lsls	r2, r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <initRGB+0x1cc>)
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <initRGB+0x1cc>)
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <initRGB+0x1cc>)
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <initRGB+0x1cc>)
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <initRGB+0x1cc>)
 8001fe4:	8892      	ldrh	r2, [r2, #4]
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <initRGB+0x1cc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	0052      	lsls	r2, r2, #1
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <initRGB+0x1cc>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <initRGB+0x1cc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	0052      	lsls	r2, r2, #1
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4611      	mov	r1, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <initRGB+0x1cc>)
 8002014:	430b      	orrs	r3, r1
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	48000800 	.word	0x48000800
 8002028:	48000400 	.word	0x48000400

0800202c <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <RGBColor+0x88>)
 8002036:	8a9b      	ldrh	r3, [r3, #20]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <RGBColor+0x88>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	b29b      	uxth	r3, r3
 8002042:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <RGBColor+0x8c>)
 8002046:	8a9b      	ldrh	r3, [r3, #20]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <RGBColor+0x8c>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	b29b      	uxth	r3, r3
 8002052:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002054:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002058:	8a9b      	ldrh	r3, [r3, #20]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002064:	b29b      	uxth	r3, r3
 8002066:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d104      	bne.n	800207a <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <RGBColor+0x88>)
 8002072:	8a9b      	ldrh	r3, [r3, #20]
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <RGBColor+0x88>)
 8002076:	2200      	movs	r2, #0
 8002078:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d104      	bne.n	800208e <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <RGBColor+0x8c>)
 8002086:	8a9b      	ldrh	r3, [r3, #20]
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <RGBColor+0x8c>)
 800208a:	2200      	movs	r2, #0
 800208c:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3302      	adds	r3, #2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800209c:	8a9b      	ldrh	r3, [r3, #20]
 800209e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020a2:	2200      	movs	r2, #0
 80020a4:	829a      	strh	r2, [r3, #20]
	}
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	48000400 	.word	0x48000400
 80020b8:	48000800 	.word	0x48000800

080020bc <xValIsValid>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"

uint8_t xValIsValid(uint8_t xVal, uint8_t objectWidth){
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	4613      	mov	r3, r2
 80020ca:	71bb      	strb	r3, [r7, #6]
	if ((xVal>=2 && xVal<=63-objectWidth) || (xVal>=77 && xVal<=screenWidth)){
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d905      	bls.n	80020de <xValIsValid+0x22>
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80020da:	429a      	cmp	r2, r3
 80020dc:	dd05      	ble.n	80020ea <xValIsValid+0x2e>
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b4c      	cmp	r3, #76	; 0x4c
 80020e2:	d904      	bls.n	80020ee <xValIsValid+0x32>
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b9c      	cmp	r3, #156	; 0x9c
 80020e8:	d801      	bhi.n	80020ee <xValIsValid+0x32>
		return 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <xValIsValid+0x34>
	} else {
		return 0;
 80020ee:	2300      	movs	r3, #0
	}
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <spawnEnemy>:
void spawnEnemy(gameState_t* gameState){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 8002104:	f002 fd4c 	bl	8004ba0 <rand>
 8002108:	4603      	mov	r3, r0
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <spawnEnemy+0xf8>)
 800210c:	fb82 1203 	smull	r1, r2, r2, r3
 8002110:	1151      	asrs	r1, r2, #5
 8002112:	17da      	asrs	r2, r3, #31
 8002114:	1a8a      	subs	r2, r1, r2
 8002116:	2164      	movs	r1, #100	; 0x64
 8002118:	fb01 f202 	mul.w	r2, r1, r2
 800211c:	1a9a      	subs	r2, r3, r2
 800211e:	4613      	mov	r3, r2
 8002120:	77bb      	strb	r3, [r7, #30]
	if(shouldGenEnemy == 0){
 8002122:	7fbb      	ldrb	r3, [r7, #30]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d160      	bne.n	80021ea <spawnEnemy+0xee>
		uint8_t enemyPos;

		while(!xValIsValid(enemyPos, 7)){
 8002128:	e00f      	b.n	800214a <spawnEnemy+0x4e>
			enemyPos  = (rand() % 149) + 1;
 800212a:	f002 fd39 	bl	8004ba0 <rand>
 800212e:	4603      	mov	r3, r0
 8002130:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <spawnEnemy+0xfc>)
 8002132:	fb82 1203 	smull	r1, r2, r2, r3
 8002136:	10d1      	asrs	r1, r2, #3
 8002138:	17da      	asrs	r2, r3, #31
 800213a:	1a8a      	subs	r2, r1, r2
 800213c:	2195      	movs	r1, #149	; 0x95
 800213e:	fb01 f202 	mul.w	r2, r1, r2
 8002142:	1a9a      	subs	r2, r3, r2
 8002144:	b2d3      	uxtb	r3, r2
 8002146:	3301      	adds	r3, #1
 8002148:	77fb      	strb	r3, [r7, #31]
		while(!xValIsValid(enemyPos, 7)){
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	2107      	movs	r1, #7
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ffb4 	bl	80020bc <xValIsValid>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0e7      	beq.n	800212a <spawnEnemy+0x2e>
		}


		enemy_t* enemy = malloc(sizeof(enemy_t));
 800215a:	2014      	movs	r0, #20
 800215c:	f002 fc02 	bl	8004964 <malloc>
 8002160:	4603      	mov	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 8002164:	2008      	movs	r0, #8
 8002166:	f002 fbfd 	bl	8004964 <malloc>
 800216a:	4603      	mov	r3, r0
 800216c:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f935 	bl	80023e2 <intToFp>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 800217e:	2006      	movs	r0, #6
 8002180:	f000 f92f 	bl	80023e2 <intToFp>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8002190:	2008      	movs	r0, #8
 8002192:	f002 fbe7 	bl	8004964 <malloc>
 8002196:	4603      	mov	r3, r0
 8002198:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f921 	bl	80023e2 <intToFp>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ac:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 80021b4:	2008      	movs	r0, #8
 80021b6:	f002 fbd5 	bl	8004964 <malloc>
 80021ba:	4603      	mov	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <spawnEnemy+0x100>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2264      	movs	r2, #100	; 0x64
 80021e0:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f001 f96d 	bl	80034c4 <appendEnemy>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	51eb851f 	.word	0x51eb851f
 80021f8:	0dbeb61f 	.word	0x0dbeb61f
 80021fc:	200001c8 	.word	0x200001c8

08002200 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800220e:	e01c      	b.n	800224a <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	440a      	add	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	440a      	add	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1df      	bne.n	8002210 <updateEnemy+0x10>
	}
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b092      	sub	sp, #72	; 0x48
 8002264:	af04      	add	r7, sp, #16
 8002266:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 800226e:	e05a      	b.n	8002326 <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	7b12      	ldrb	r2, [r2, #12]
 800227c:	441a      	add	r2, r3
 800227e:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <shootEnemy+0xd8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d24c      	bcs.n	8002320 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f8ab 	bl	80023e2 <intToFp>
 800228c:	4603      	mov	r3, r0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	2002      	movs	r0, #2
 8002292:	f000 f8a6 	bl	80023e2 <intToFp>
 8002296:	4603      	mov	r3, r0
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685c      	ldr	r4, [r3, #4]
 80022ac:	2004      	movs	r0, #4
 80022ae:	f000 f898 	bl	80023e2 <intToFp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4423      	add	r3, r4
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80022f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f8:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 80022fc:	687d      	ldr	r5, [r7, #4]
 80022fe:	466c      	mov	r4, sp
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	4628      	mov	r0, r5
 8002312:	f001 f8a4 	bl	800345e <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <shootEnemy+0xd8>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1a1      	bne.n	8002270 <shootEnemy+0x10>
	}
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	bf00      	nop
 8002338:	200001c8 	.word	0x200001c8

0800233c <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 800234a:	e042      	b.n	80023d2 <detectCityHit+0x96>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f859 	bl	800240c <fpToInt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b4f      	cmp	r3, #79	; 0x4f
 800235e:	dd35      	ble.n	80023cc <detectCityHit+0x90>
			gameState->cityLives--;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			if(gameState->cityLives == 2){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002376:	2b02      	cmp	r3, #2
 8002378:	d10f      	bne.n	800239a <detectCityHit+0x5e>
				gotoxy(1, 42);
 800237a:	212a      	movs	r1, #42	; 0x2a
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe feff 	bl	8001180 <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e005      	b.n	8002394 <detectCityHit+0x58>
					printf(" ");
 8002388:	2020      	movs	r0, #32
 800238a:	f002 fbc5 	bl	8004b18 <putchar>
				for(int i = 0; i<screenWidth;i++){
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3301      	adds	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b9b      	cmp	r3, #155	; 0x9b
 8002398:	ddf6      	ble.n	8002388 <detectCityHit+0x4c>
				}
			}
			if(gameState->cityLives == 1){
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10f      	bne.n	80023c4 <detectCityHit+0x88>
				gotoxy(1, 43);
 80023a4:	212b      	movs	r1, #43	; 0x2b
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe feea 	bl	8001180 <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e005      	b.n	80023be <detectCityHit+0x82>
					printf(" ");
 80023b2:	2020      	movs	r0, #32
 80023b4:	f002 fbb0 	bl	8004b18 <putchar>
				for(int i = 0; i<screenWidth;i++){
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b9b      	cmp	r3, #155	; 0x9b
 80023c2:	ddf6      	ble.n	80023b2 <detectCityHit+0x76>
				}
			}
			deleteEnemyNode(gameState, thisNode);
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f001 f8aa 	bl	8003520 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1b9      	bne.n	800234c <detectCityHit+0x10>
	}
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
	output+=n;
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
	output<<=16;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	60fb      	str	r3, [r7, #12]
	return output;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60bb      	str	r3, [r7, #8]
	int output=0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002422:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	607b      	str	r3, [r7, #4]
	output+=fp;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da03      	bge.n	8002440 <fpToInt+0x34>
		output-=65536;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800243e:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002440:	68fb      	ldr	r3, [r7, #12]

}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
	n>>=8;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	607b      	str	r3, [r7, #4]
	m>>=8;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    uint64_t numerator = (long long)n << 16;
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4608      	mov	r0, r1
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	0c03      	lsrs	r3, r0, #16
 80024a4:	0402      	lsls	r2, r0, #16
 80024a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024b8:	1884      	adds	r4, r0, r2
 80024ba:	eb41 0503 	adc.w	r5, r1, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f7fd fed9 	bl	8000280 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4613      	mov	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    return result;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}

080024e0 <scaleVector>:

//IMPORTANT: Scalar must be non negative
vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	1d38      	adds	r0, r7, #4
 80024ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80024ee:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ffaa 	bl	800244e <fpMultiply>
 80024fa:	4603      	mov	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffa3 	bl	800244e <fpMultiply>
 8002508:	4603      	mov	r3, r0
 800250a:	617b      	str	r3, [r7, #20]
	return vectorOut;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002518:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da02      	bge.n	800253c <fpAbs+0x18>
			output=(~output)+1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	425b      	negs	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
		}
	return output;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <drawbackground>:
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
 800254a:	b580      	push	{r7, lr}
 800254c:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 800254e:	2123      	movs	r1, #35	; 0x23
 8002550:	2037      	movs	r0, #55	; 0x37
 8002552:	f7fe fe15 	bl	8001180 <gotoxy>
	printf("*");
 8002556:	202a      	movs	r0, #42	; 0x2a
 8002558:	f002 fade 	bl	8004b18 <putchar>
	gotoxy(63,27);
 800255c:	211b      	movs	r1, #27
 800255e:	203f      	movs	r0, #63	; 0x3f
 8002560:	f7fe fe0e 	bl	8001180 <gotoxy>
	printf("*");
 8002564:	202a      	movs	r0, #42	; 0x2a
 8002566:	f002 fad7 	bl	8004b18 <putchar>
	gotoxy(10,15);
 800256a:	210f      	movs	r1, #15
 800256c:	200a      	movs	r0, #10
 800256e:	f7fe fe07 	bl	8001180 <gotoxy>
	printf("*");
 8002572:	202a      	movs	r0, #42	; 0x2a
 8002574:	f002 fad0 	bl	8004b18 <putchar>
	gotoxy(20,40);
 8002578:	2128      	movs	r1, #40	; 0x28
 800257a:	2014      	movs	r0, #20
 800257c:	f7fe fe00 	bl	8001180 <gotoxy>
	printf("%c",43);
 8002580:	202b      	movs	r0, #43	; 0x2b
 8002582:	f002 fac9 	bl	8004b18 <putchar>

	gotoxy(155,37);
 8002586:	2125      	movs	r1, #37	; 0x25
 8002588:	209b      	movs	r0, #155	; 0x9b
 800258a:	f7fe fdf9 	bl	8001180 <gotoxy>
	printf("*");
 800258e:	202a      	movs	r0, #42	; 0x2a
 8002590:	f002 fac2 	bl	8004b18 <putchar>
	gotoxy(110,28);
 8002594:	211c      	movs	r1, #28
 8002596:	206e      	movs	r0, #110	; 0x6e
 8002598:	f7fe fdf2 	bl	8001180 <gotoxy>
	printf("*");
 800259c:	202a      	movs	r0, #42	; 0x2a
 800259e:	f002 fabb 	bl	8004b18 <putchar>
	gotoxy(95,13);
 80025a2:	210d      	movs	r1, #13
 80025a4:	205f      	movs	r0, #95	; 0x5f
 80025a6:	f7fe fdeb 	bl	8001180 <gotoxy>
	printf("*");
 80025aa:	202a      	movs	r0, #42	; 0x2a
 80025ac:	f002 fab4 	bl	8004b18 <putchar>
	gotoxy(130,19);
 80025b0:	2113      	movs	r1, #19
 80025b2:	2082      	movs	r0, #130	; 0x82
 80025b4:	f7fe fde4 	bl	8001180 <gotoxy>
	printf("%c",43);
 80025b8:	202b      	movs	r0, #43	; 0x2b
 80025ba:	f002 faad 	bl	8004b18 <putchar>

	gotoxy(5,27);
 80025be:	211b      	movs	r1, #27
 80025c0:	2005      	movs	r0, #5
 80025c2:	f7fe fddd 	bl	8001180 <gotoxy>
	printf("*");
 80025c6:	202a      	movs	r0, #42	; 0x2a
 80025c8:	f002 faa6 	bl	8004b18 <putchar>
	gotoxy(6,5);
 80025cc:	2105      	movs	r1, #5
 80025ce:	2006      	movs	r0, #6
 80025d0:	f7fe fdd6 	bl	8001180 <gotoxy>
	printf("*");
 80025d4:	202a      	movs	r0, #42	; 0x2a
 80025d6:	f002 fa9f 	bl	8004b18 <putchar>
	gotoxy(13,13);
 80025da:	210d      	movs	r1, #13
 80025dc:	200d      	movs	r0, #13
 80025de:	f7fe fdcf 	bl	8001180 <gotoxy>
	printf("*");
 80025e2:	202a      	movs	r0, #42	; 0x2a
 80025e4:	f002 fa98 	bl	8004b18 <putchar>
	gotoxy(60,7);
 80025e8:	2107      	movs	r1, #7
 80025ea:	203c      	movs	r0, #60	; 0x3c
 80025ec:	f7fe fdc8 	bl	8001180 <gotoxy>
	printf("%c",43);
 80025f0:	202b      	movs	r0, #43	; 0x2b
 80025f2:	f002 fa91 	bl	8004b18 <putchar>

	gotoxy(140,3);
 80025f6:	2103      	movs	r1, #3
 80025f8:	208c      	movs	r0, #140	; 0x8c
 80025fa:	f7fe fdc1 	bl	8001180 <gotoxy>
	printf("*");
 80025fe:	202a      	movs	r0, #42	; 0x2a
 8002600:	f002 fa8a 	bl	8004b18 <putchar>
	gotoxy(120,5);
 8002604:	2105      	movs	r1, #5
 8002606:	2078      	movs	r0, #120	; 0x78
 8002608:	f7fe fdba 	bl	8001180 <gotoxy>
	printf("*");
 800260c:	202a      	movs	r0, #42	; 0x2a
 800260e:	f002 fa83 	bl	8004b18 <putchar>
	gotoxy(110,7);
 8002612:	2107      	movs	r1, #7
 8002614:	206e      	movs	r0, #110	; 0x6e
 8002616:	f7fe fdb3 	bl	8001180 <gotoxy>
	printf("*");
 800261a:	202a      	movs	r0, #42	; 0x2a
 800261c:	f002 fa7c 	bl	8004b18 <putchar>
	gotoxy(70,30);
 8002620:	211e      	movs	r1, #30
 8002622:	2046      	movs	r0, #70	; 0x46
 8002624:	f7fe fdac 	bl	8001180 <gotoxy>
	printf("%c",43);
 8002628:	202b      	movs	r0, #43	; 0x2b
 800262a:	f002 fa75 	bl	8004b18 <putchar>

	gotoxy(135,33);
 800262e:	2121      	movs	r1, #33	; 0x21
 8002630:	2087      	movs	r0, #135	; 0x87
 8002632:	f7fe fda5 	bl	8001180 <gotoxy>
	printf("*");
 8002636:	202a      	movs	r0, #42	; 0x2a
 8002638:	f002 fa6e 	bl	8004b18 <putchar>
	gotoxy(123,36);
 800263c:	2124      	movs	r1, #36	; 0x24
 800263e:	207b      	movs	r0, #123	; 0x7b
 8002640:	f7fe fd9e 	bl	8001180 <gotoxy>
	printf("*");
 8002644:	202a      	movs	r0, #42	; 0x2a
 8002646:	f002 fa67 	bl	8004b18 <putchar>
	gotoxy(138,40);
 800264a:	2128      	movs	r1, #40	; 0x28
 800264c:	208a      	movs	r0, #138	; 0x8a
 800264e:	f7fe fd97 	bl	8001180 <gotoxy>
	printf("*");
 8002652:	202a      	movs	r0, #42	; 0x2a
 8002654:	f002 fa60 	bl	8004b18 <putchar>
	gotoxy(127,25);
 8002658:	2119      	movs	r1, #25
 800265a:	207f      	movs	r0, #127	; 0x7f
 800265c:	f7fe fd90 	bl	8001180 <gotoxy>
	printf("%c",43);
 8002660:	202b      	movs	r0, #43	; 0x2b
 8002662:	f002 fa59 	bl	8004b18 <putchar>

	gotoxy(105,32);
 8002666:	2120      	movs	r1, #32
 8002668:	2069      	movs	r0, #105	; 0x69
 800266a:	f7fe fd89 	bl	8001180 <gotoxy>
	printf("%c",42);
 800266e:	202a      	movs	r0, #42	; 0x2a
 8002670:	f002 fa52 	bl	8004b18 <putchar>
	gotoxy(106,33);
 8002674:	2121      	movs	r1, #33	; 0x21
 8002676:	206a      	movs	r0, #106	; 0x6a
 8002678:	f7fe fd82 	bl	8001180 <gotoxy>
	printf("%c",92);
 800267c:	205c      	movs	r0, #92	; 0x5c
 800267e:	f002 fa4b 	bl	8004b18 <putchar>
	gotoxy(107,34);
 8002682:	2122      	movs	r1, #34	; 0x22
 8002684:	206b      	movs	r0, #107	; 0x6b
 8002686:	f7fe fd7b 	bl	8001180 <gotoxy>
	printf("%c",92);
 800268a:	205c      	movs	r0, #92	; 0x5c
 800268c:	f002 fa44 	bl	8004b18 <putchar>

	gotoxy(23,15);
 8002690:	210f      	movs	r1, #15
 8002692:	2017      	movs	r0, #23
 8002694:	f7fe fd74 	bl	8001180 <gotoxy>
	printf("*");
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	f002 fa3d 	bl	8004b18 <putchar>
	gotoxy(37,21);
 800269e:	2115      	movs	r1, #21
 80026a0:	2025      	movs	r0, #37	; 0x25
 80026a2:	f7fe fd6d 	bl	8001180 <gotoxy>
	printf("*");
 80026a6:	202a      	movs	r0, #42	; 0x2a
 80026a8:	f002 fa36 	bl	8004b18 <putchar>
	gotoxy(26,24);
 80026ac:	2118      	movs	r1, #24
 80026ae:	201a      	movs	r0, #26
 80026b0:	f7fe fd66 	bl	8001180 <gotoxy>
	printf("*");
 80026b4:	202a      	movs	r0, #42	; 0x2a
 80026b6:	f002 fa2f 	bl	8004b18 <putchar>
	gotoxy(30,29);
 80026ba:	211d      	movs	r1, #29
 80026bc:	201e      	movs	r0, #30
 80026be:	f7fe fd5f 	bl	8001180 <gotoxy>
	printf("%c",43);
 80026c2:	202b      	movs	r0, #43	; 0x2b
 80026c4:	f002 fa28 	bl	8004b18 <putchar>

	gotoxy(25,6);
 80026c8:	2106      	movs	r1, #6
 80026ca:	2019      	movs	r0, #25
 80026cc:	f7fe fd58 	bl	8001180 <gotoxy>
	printf("*");
 80026d0:	202a      	movs	r0, #42	; 0x2a
 80026d2:	f002 fa21 	bl	8004b18 <putchar>
	gotoxy(39,7);
 80026d6:	2107      	movs	r1, #7
 80026d8:	2027      	movs	r0, #39	; 0x27
 80026da:	f7fe fd51 	bl	8001180 <gotoxy>
	printf("*");
 80026de:	202a      	movs	r0, #42	; 0x2a
 80026e0:	f002 fa1a 	bl	8004b18 <putchar>
	gotoxy(41,3);
 80026e4:	2103      	movs	r1, #3
 80026e6:	2029      	movs	r0, #41	; 0x29
 80026e8:	f7fe fd4a 	bl	8001180 <gotoxy>
	printf("*");
 80026ec:	202a      	movs	r0, #42	; 0x2a
 80026ee:	f002 fa13 	bl	8004b18 <putchar>
	gotoxy(75,10);
 80026f2:	210a      	movs	r1, #10
 80026f4:	204b      	movs	r0, #75	; 0x4b
 80026f6:	f7fe fd43 	bl	8001180 <gotoxy>
	printf("%c",43);
 80026fa:	202b      	movs	r0, #43	; 0x2b
 80026fc:	f002 fa0c 	bl	8004b18 <putchar>

	gotoxy(100,20);
 8002700:	2114      	movs	r1, #20
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f7fe fd3c 	bl	8001180 <gotoxy>
	printf("%c",197);
 8002708:	20c5      	movs	r0, #197	; 0xc5
 800270a:	f002 fa05 	bl	8004b18 <putchar>
	gotoxy(135,12);
 800270e:	210c      	movs	r1, #12
 8002710:	2087      	movs	r0, #135	; 0x87
 8002712:	f7fe fd35 	bl	8001180 <gotoxy>
	printf("%c",197);
 8002716:	20c5      	movs	r0, #197	; 0xc5
 8002718:	f002 f9fe 	bl	8004b18 <putchar>
	gotoxy(30,5);
 800271c:	2105      	movs	r1, #5
 800271e:	201e      	movs	r0, #30
 8002720:	f7fe fd2e 	bl	8001180 <gotoxy>
	printf("%c",197);
 8002724:	20c5      	movs	r0, #197	; 0xc5
 8002726:	f002 f9f7 	bl	8004b18 <putchar>
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	460a      	mov	r2, r1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	4613      	mov	r3, r2
 800273c:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	71bb      	strb	r3, [r7, #6]
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	3303      	adds	r3, #3
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7fe fd16 	bl	8001180 <gotoxy>
	printf("_");
 8002754:	205f      	movs	r0, #95	; 0x5f
 8002756:	f002 f9df 	bl	8004b18 <putchar>
	gotoxy(X,Y+3);
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	3303      	adds	r3, #3
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7fe fd0c 	bl	8001180 <gotoxy>
	printf("_");
 8002768:	205f      	movs	r0, #95	; 0x5f
 800276a:	f002 f9d5 	bl	8004b18 <putchar>
	gotoxy(X+1,Y+3);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	3303      	adds	r3, #3
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7fe fd01 	bl	8001180 <gotoxy>
	printf("_");
 800277e:	205f      	movs	r0, #95	; 0x5f
 8002780:	f002 f9ca 	bl	8004b18 <putchar>
	gotoxy(X-2,Y+3);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	1e9a      	subs	r2, r3, #2
 8002788:	79bb      	ldrb	r3, [r7, #6]
 800278a:	3303      	adds	r3, #3
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7fe fcf6 	bl	8001180 <gotoxy>
	printf("(");
 8002794:	2028      	movs	r0, #40	; 0x28
 8002796:	f002 f9bf 	bl	8004b18 <putchar>
	gotoxy(X+2,Y+3);
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	3303      	adds	r3, #3
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7fe fceb 	bl	8001180 <gotoxy>
	printf(")");
 80027aa:	2029      	movs	r0, #41	; 0x29
 80027ac:	f002 f9b4 	bl	8004b18 <putchar>

	gotoxy(X+3,Y+2);
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	1cda      	adds	r2, r3, #3
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	3302      	adds	r3, #2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe fce0 	bl	8001180 <gotoxy>
	printf("_");
 80027c0:	205f      	movs	r0, #95	; 0x5f
 80027c2:	f002 f9a9 	bl	8004b18 <putchar>
	gotoxy(X-3,Y+2);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	1eda      	subs	r2, r3, #3
 80027ca:	79bb      	ldrb	r3, [r7, #6]
 80027cc:	3302      	adds	r3, #2
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fe fcd5 	bl	8001180 <gotoxy>
	printf("_");
 80027d6:	205f      	movs	r0, #95	; 0x5f
 80027d8:	f002 f99e 	bl	8004b18 <putchar>
	gotoxy(X+4,Y+2);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	79bb      	ldrb	r3, [r7, #6]
 80027e2:	3302      	adds	r3, #2
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7fe fcca 	bl	8001180 <gotoxy>
	printf("(");
 80027ec:	2028      	movs	r0, #40	; 0x28
 80027ee:	f002 f993 	bl	8004b18 <putchar>
	gotoxy(X-4,Y+2);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	1f1a      	subs	r2, r3, #4
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	3302      	adds	r3, #2
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7fe fcbf 	bl	8001180 <gotoxy>
	printf(")");
 8002802:	2029      	movs	r0, #41	; 0x29
 8002804:	f002 f988 	bl	8004b18 <putchar>

	gotoxy(X-5,Y+1);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	1f5a      	subs	r2, r3, #5
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	3301      	adds	r3, #1
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7fe fcb4 	bl	8001180 <gotoxy>
	printf("(");
 8002818:	2028      	movs	r0, #40	; 0x28
 800281a:	f002 f97d 	bl	8004b18 <putchar>
	gotoxy(X+5,Y+1);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	1d5a      	adds	r2, r3, #5
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	3301      	adds	r3, #1
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f7fe fca9 	bl	8001180 <gotoxy>
	printf("(");
 800282e:	2028      	movs	r0, #40	; 0x28
 8002830:	f002 f972 	bl	8004b18 <putchar>
	gotoxy(X-6,Y);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	3b06      	subs	r3, #6
 8002838:	79ba      	ldrb	r2, [r7, #6]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fc9f 	bl	8001180 <gotoxy>
	printf("(");
 8002842:	2028      	movs	r0, #40	; 0x28
 8002844:	f002 f968 	bl	8004b18 <putchar>
	gotoxy(X+6,Y);
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	3306      	adds	r3, #6
 800284c:	79ba      	ldrb	r2, [r7, #6]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fc95 	bl	8001180 <gotoxy>
	printf(")");
 8002856:	2029      	movs	r0, #41	; 0x29
 8002858:	f002 f95e 	bl	8004b18 <putchar>

	gotoxy(X-5,Y-1);
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	1f5a      	subs	r2, r3, #5
 8002860:	79bb      	ldrb	r3, [r7, #6]
 8002862:	3b01      	subs	r3, #1
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f7fe fc8a 	bl	8001180 <gotoxy>
	printf("(");
 800286c:	2028      	movs	r0, #40	; 0x28
 800286e:	f002 f953 	bl	8004b18 <putchar>
	gotoxy(X+5,Y-1);
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	1d5a      	adds	r2, r3, #5
 8002876:	79bb      	ldrb	r3, [r7, #6]
 8002878:	3b01      	subs	r3, #1
 800287a:	4619      	mov	r1, r3
 800287c:	4610      	mov	r0, r2
 800287e:	f7fe fc7f 	bl	8001180 <gotoxy>
	printf(")");
 8002882:	2029      	movs	r0, #41	; 0x29
 8002884:	f002 f948 	bl	8004b18 <putchar>
	gotoxy(X-4,Y-2);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	1f1a      	subs	r2, r3, #4
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	3b02      	subs	r3, #2
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fc74 	bl	8001180 <gotoxy>
	printf("(");
 8002898:	2028      	movs	r0, #40	; 0x28
 800289a:	f002 f93d 	bl	8004b18 <putchar>
	gotoxy(X+4,Y-2);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	1d1a      	adds	r2, r3, #4
 80028a2:	79bb      	ldrb	r3, [r7, #6]
 80028a4:	3b02      	subs	r3, #2
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f7fe fc69 	bl	8001180 <gotoxy>
	printf(")");
 80028ae:	2029      	movs	r0, #41	; 0x29
 80028b0:	f002 f932 	bl	8004b18 <putchar>

	gotoxy(X-3,Y-3);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	1eda      	subs	r2, r3, #3
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	3b03      	subs	r3, #3
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f7fe fc5e 	bl	8001180 <gotoxy>
	printf("_");
 80028c4:	205f      	movs	r0, #95	; 0x5f
 80028c6:	f002 f927 	bl	8004b18 <putchar>
	gotoxy(X+3,Y-3);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	1cda      	adds	r2, r3, #3
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7fe fc53 	bl	8001180 <gotoxy>
	printf("_");
 80028da:	205f      	movs	r0, #95	; 0x5f
 80028dc:	f002 f91c 	bl	8004b18 <putchar>
	gotoxy(X-2,Y-3);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	1e9a      	subs	r2, r3, #2
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	3b03      	subs	r3, #3
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe fc48 	bl	8001180 <gotoxy>
	printf("(");
 80028f0:	2028      	movs	r0, #40	; 0x28
 80028f2:	f002 f911 	bl	8004b18 <putchar>
	gotoxy(X+2,Y-3);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f7fe fc3d 	bl	8001180 <gotoxy>
	printf(")");
 8002906:	2029      	movs	r0, #41	; 0x29
 8002908:	f002 f906 	bl	8004b18 <putchar>

	gotoxy(X-1,Y-4);
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	79bb      	ldrb	r3, [r7, #6]
 8002912:	3b04      	subs	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f7fe fc32 	bl	8001180 <gotoxy>
	printf("_");
 800291c:	205f      	movs	r0, #95	; 0x5f
 800291e:	f002 f8fb 	bl	8004b18 <putchar>
	gotoxy(X,Y-4);
 8002922:	79fa      	ldrb	r2, [r7, #7]
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	3b04      	subs	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f7fe fc28 	bl	8001180 <gotoxy>
	printf("_");
 8002930:	205f      	movs	r0, #95	; 0x5f
 8002932:	f002 f8f1 	bl	8004b18 <putchar>
	gotoxy(X+1,Y-4);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	3b04      	subs	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f7fe fc1d 	bl	8001180 <gotoxy>
	printf("_");
 8002946:	205f      	movs	r0, #95	; 0x5f
 8002948:	f002 f8e6 	bl	8004b18 <putchar>

	gotoxy(X-2,Y);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	3b02      	subs	r3, #2
 8002950:	79ba      	ldrb	r2, [r7, #6]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fc13 	bl	8001180 <gotoxy>
	printf("O");
 800295a:	204f      	movs	r0, #79	; 0x4f
 800295c:	f002 f8dc 	bl	8004b18 <putchar>
	gotoxy(X+1,Y+2);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	79bb      	ldrb	r3, [r7, #6]
 8002966:	3302      	adds	r3, #2
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7fe fc08 	bl	8001180 <gotoxy>
	printf("o");
 8002970:	206f      	movs	r0, #111	; 0x6f
 8002972:	f002 f8d1 	bl	8004b18 <putchar>
	gotoxy(X+3,Y-1);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	1cda      	adds	r2, r3, #3
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	3b01      	subs	r3, #1
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7fe fbfd 	bl	8001180 <gotoxy>
	printf("O");
 8002986:	204f      	movs	r0, #79	; 0x4f
 8002988:	f002 f8c6 	bl	8004b18 <putchar>

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 800299c:	2101      	movs	r1, #1
 800299e:	200f      	movs	r0, #15
 80029a0:	f7fe fbee 	bl	8001180 <gotoxy>
	printf("           ");
 80029a4:	483b      	ldr	r0, [pc, #236]	; (8002a94 <drawhearth+0x100>)
 80029a6:	f002 f89f 	bl	8004ae8 <iprintf>
	gotoxy(15,2);
 80029aa:	2102      	movs	r1, #2
 80029ac:	200f      	movs	r0, #15
 80029ae:	f7fe fbe7 	bl	8001180 <gotoxy>
	printf("           ");
 80029b2:	4838      	ldr	r0, [pc, #224]	; (8002a94 <drawhearth+0x100>)
 80029b4:	f002 f898 	bl	8004ae8 <iprintf>
	fgcolor(1);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7fe fbb5 	bl	8001128 <fgcolor>

	if(gameState->cityLives >= 1){
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <drawhearth+0x6c>
		gotoxy(15,1);
 80029c8:	2101      	movs	r1, #1
 80029ca:	200f      	movs	r0, #15
 80029cc:	f7fe fbd8 	bl	8001180 <gotoxy>
		printf("%c",219);
 80029d0:	20db      	movs	r0, #219	; 0xdb
 80029d2:	f002 f8a1 	bl	8004b18 <putchar>
		gotoxy(17,1);
 80029d6:	2101      	movs	r1, #1
 80029d8:	2011      	movs	r0, #17
 80029da:	f7fe fbd1 	bl	8001180 <gotoxy>
		printf("%c",219);
 80029de:	20db      	movs	r0, #219	; 0xdb
 80029e0:	f002 f89a 	bl	8004b18 <putchar>
		gotoxy(16,2);
 80029e4:	2102      	movs	r1, #2
 80029e6:	2010      	movs	r0, #16
 80029e8:	f7fe fbca 	bl	8001180 <gotoxy>
		printf("%c",223);
 80029ec:	20df      	movs	r0, #223	; 0xdf
 80029ee:	f002 f893 	bl	8004b18 <putchar>
		gotoxy(16,1);
 80029f2:	2101      	movs	r1, #1
 80029f4:	2010      	movs	r0, #16
 80029f6:	f7fe fbc3 	bl	8001180 <gotoxy>
		printf("%c",220);
 80029fa:	20dc      	movs	r0, #220	; 0xdc
 80029fc:	f002 f88c 	bl	8004b18 <putchar>
	}
	if(gameState->cityLives >= 2){
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d91b      	bls.n	8002a42 <drawhearth+0xae>
		gotoxy(19,1);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2013      	movs	r0, #19
 8002a0e:	f7fe fbb7 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002a12:	20db      	movs	r0, #219	; 0xdb
 8002a14:	f002 f880 	bl	8004b18 <putchar>
		gotoxy(21,1);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2015      	movs	r0, #21
 8002a1c:	f7fe fbb0 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002a20:	20db      	movs	r0, #219	; 0xdb
 8002a22:	f002 f879 	bl	8004b18 <putchar>
		gotoxy(20,2);
 8002a26:	2102      	movs	r1, #2
 8002a28:	2014      	movs	r0, #20
 8002a2a:	f7fe fba9 	bl	8001180 <gotoxy>
		printf("%c",223);
 8002a2e:	20df      	movs	r0, #223	; 0xdf
 8002a30:	f002 f872 	bl	8004b18 <putchar>
		gotoxy(20,1);
 8002a34:	2101      	movs	r1, #1
 8002a36:	2014      	movs	r0, #20
 8002a38:	f7fe fba2 	bl	8001180 <gotoxy>
		printf("%c",220);
 8002a3c:	20dc      	movs	r0, #220	; 0xdc
 8002a3e:	f002 f86b 	bl	8004b18 <putchar>

	}
	if(gameState->cityLives >= 3){
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d91b      	bls.n	8002a84 <drawhearth+0xf0>
		gotoxy(23,1);
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2017      	movs	r0, #23
 8002a50:	f7fe fb96 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002a54:	20db      	movs	r0, #219	; 0xdb
 8002a56:	f002 f85f 	bl	8004b18 <putchar>
		gotoxy(25,1);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	2019      	movs	r0, #25
 8002a5e:	f7fe fb8f 	bl	8001180 <gotoxy>
		printf("%c",219);
 8002a62:	20db      	movs	r0, #219	; 0xdb
 8002a64:	f002 f858 	bl	8004b18 <putchar>
		gotoxy(24,2);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	2018      	movs	r0, #24
 8002a6c:	f7fe fb88 	bl	8001180 <gotoxy>
		printf("%c",223);
 8002a70:	20df      	movs	r0, #223	; 0xdf
 8002a72:	f002 f851 	bl	8004b18 <putchar>
		gotoxy(24,1);
 8002a76:	2101      	movs	r1, #1
 8002a78:	2018      	movs	r0, #24
 8002a7a:	f7fe fb81 	bl	8001180 <gotoxy>
		printf("%c",220);
 8002a7e:	20dc      	movs	r0, #220	; 0xdc
 8002a80:	f002 f84a 	bl	8004b18 <putchar>
	}
	fgcolor(15);
 8002a84:	200f      	movs	r0, #15
 8002a86:	f7fe fb4f 	bl	8001128 <fgcolor>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	08005ce0 	.word	0x08005ce0

08002a98 <drawEnemy>:
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af04      	add	r7, sp, #16
 8002a9e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8002aa6:	e087      	b.n	8002bb8 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fcab 	bl	800240c <fpToInt>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fca3 	bl	800240c <fpToInt>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	0fda      	lsrs	r2, r3, #31
 8002aca:	4413      	add	r3, r2
 8002acc:	105b      	asrs	r3, r3, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7fe fb55 	bl	8001180 <gotoxy>
		printf("       ");
 8002ad6:	483d      	ldr	r0, [pc, #244]	; (8002bcc <drawEnemy+0x134>)
 8002ad8:	f002 f806 	bl	8004ae8 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fc91 	bl	800240c <fpToInt>
 8002aea:	4604      	mov	r4, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fc89 	bl	800240c <fpToInt>
 8002afa:	4603      	mov	r3, r0
 8002afc:	3302      	adds	r3, #2
 8002afe:	0fda      	lsrs	r2, r3, #31
 8002b00:	4413      	add	r3, r2
 8002b02:	105b      	asrs	r3, r3, #1
 8002b04:	4619      	mov	r1, r3
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7fe fb3a 	bl	8001180 <gotoxy>
		printf("       ");
 8002b0c:	482f      	ldr	r0, [pc, #188]	; (8002bcc <drawEnemy+0x134>)
 8002b0e:	f001 ffeb 	bl	8004ae8 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fc76 	bl	800240c <fpToInt>
 8002b20:	4604      	mov	r4, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fc6e 	bl	800240c <fpToInt>
 8002b30:	4603      	mov	r3, r0
 8002b32:	0fda      	lsrs	r2, r3, #31
 8002b34:	4413      	add	r3, r2
 8002b36:	105b      	asrs	r3, r3, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fe fb20 	bl	8001180 <gotoxy>
		printf("  o o  ");
 8002b40:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <drawEnemy+0x138>)
 8002b42:	f001 ffd1 	bl	8004ae8 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fc5c 	bl	800240c <fpToInt>
 8002b54:	4604      	mov	r4, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fc54 	bl	800240c <fpToInt>
 8002b64:	4603      	mov	r3, r0
 8002b66:	3302      	adds	r3, #2
 8002b68:	0fda      	lsrs	r2, r3, #31
 8002b6a:	4413      	add	r3, r2
 8002b6c:	105b      	asrs	r3, r3, #1
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7fe fb05 	bl	8001180 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8002b76:	23bb      	movs	r3, #187	; 0xbb
 8002b78:	9303      	str	r3, [sp, #12]
 8002b7a:	23cd      	movs	r3, #205	; 0xcd
 8002b7c:	9302      	str	r3, [sp, #8]
 8002b7e:	23cd      	movs	r3, #205	; 0xcd
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	23cd      	movs	r3, #205	; 0xcd
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	23cd      	movs	r3, #205	; 0xcd
 8002b88:	22cd      	movs	r2, #205	; 0xcd
 8002b8a:	21c9      	movs	r1, #201	; 0xc9
 8002b8c:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <drawEnemy+0x13c>)
 8002b8e:	f001 ffab 	bl	8004ae8 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6852      	ldr	r2, [r2, #4]
 8002bb0:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f47f af74 	bne.w	8002aa8 <drawEnemy+0x10>
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	08005cec 	.word	0x08005cec
 8002bd0:	08005cf4 	.word	0x08005cf4
 8002bd4:	08005cfc 	.word	0x08005cfc

08002bd8 <drawCity>:
	printf("%c",127);
}



void drawCity(){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	200e      	movs	r0, #14
 8002be0:	f7fe face 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002be4:	20db      	movs	r0, #219	; 0xdb
 8002be6:	f001 ff97 	bl	8004b18 <putchar>

	gotoxy(16,44);
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	2010      	movs	r0, #16
 8002bee:	f7fe fac7 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002bf2:	20db      	movs	r0, #219	; 0xdb
 8002bf4:	f001 ff90 	bl	8004b18 <putchar>

	gotoxy(17,44);
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	2011      	movs	r0, #17
 8002bfc:	f7fe fac0 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c00:	20db      	movs	r0, #219	; 0xdb
 8002c02:	f001 ff89 	bl	8004b18 <putchar>
	gotoxy(17,43);
 8002c06:	212b      	movs	r1, #43	; 0x2b
 8002c08:	2011      	movs	r0, #17
 8002c0a:	f7fe fab9 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c0e:	20db      	movs	r0, #219	; 0xdb
 8002c10:	f001 ff82 	bl	8004b18 <putchar>

	gotoxy(19,44);
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	2013      	movs	r0, #19
 8002c18:	f7fe fab2 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002c1c:	20dc      	movs	r0, #220	; 0xdc
 8002c1e:	f001 ff7b 	bl	8004b18 <putchar>

	gotoxy(21,44);
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	2015      	movs	r0, #21
 8002c26:	f7fe faab 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c2a:	20db      	movs	r0, #219	; 0xdb
 8002c2c:	f001 ff74 	bl	8004b18 <putchar>

	gotoxy(23,44);
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	2017      	movs	r0, #23
 8002c34:	f7fe faa4 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c38:	20db      	movs	r0, #219	; 0xdb
 8002c3a:	f001 ff6d 	bl	8004b18 <putchar>
	gotoxy(23,43);
 8002c3e:	212b      	movs	r1, #43	; 0x2b
 8002c40:	2017      	movs	r0, #23
 8002c42:	f7fe fa9d 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002c46:	20dc      	movs	r0, #220	; 0xdc
 8002c48:	f001 ff66 	bl	8004b18 <putchar>

	gotoxy(25,44);
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	2019      	movs	r0, #25
 8002c50:	f7fe fa96 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c54:	20db      	movs	r0, #219	; 0xdb
 8002c56:	f001 ff5f 	bl	8004b18 <putchar>
	gotoxy(25,43);
 8002c5a:	212b      	movs	r1, #43	; 0x2b
 8002c5c:	2019      	movs	r0, #25
 8002c5e:	f7fe fa8f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c62:	20db      	movs	r0, #219	; 0xdb
 8002c64:	f001 ff58 	bl	8004b18 <putchar>
	gotoxy(25,42);
 8002c68:	212a      	movs	r1, #42	; 0x2a
 8002c6a:	2019      	movs	r0, #25
 8002c6c:	f7fe fa88 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c70:	20db      	movs	r0, #219	; 0xdb
 8002c72:	f001 ff51 	bl	8004b18 <putchar>

	gotoxy(27,44);
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	201b      	movs	r0, #27
 8002c7a:	f7fe fa81 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c7e:	20db      	movs	r0, #219	; 0xdb
 8002c80:	f001 ff4a 	bl	8004b18 <putchar>
	gotoxy(27,43);
 8002c84:	212b      	movs	r1, #43	; 0x2b
 8002c86:	201b      	movs	r0, #27
 8002c88:	f7fe fa7a 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002c8c:	20dc      	movs	r0, #220	; 0xdc
 8002c8e:	f001 ff43 	bl	8004b18 <putchar>

	gotoxy(28,44);
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	201c      	movs	r0, #28
 8002c96:	f7fe fa73 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002c9a:	20db      	movs	r0, #219	; 0xdb
 8002c9c:	f001 ff3c 	bl	8004b18 <putchar>

	gotoxy(36,44);
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	2024      	movs	r0, #36	; 0x24
 8002ca4:	f7fe fa6c 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ca8:	20db      	movs	r0, #219	; 0xdb
 8002caa:	f001 ff35 	bl	8004b18 <putchar>
	gotoxy(36,43);
 8002cae:	212b      	movs	r1, #43	; 0x2b
 8002cb0:	2024      	movs	r0, #36	; 0x24
 8002cb2:	f7fe fa65 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cb6:	20db      	movs	r0, #219	; 0xdb
 8002cb8:	f001 ff2e 	bl	8004b18 <putchar>

	gotoxy(37,44);
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	2025      	movs	r0, #37	; 0x25
 8002cc0:	f7fe fa5e 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cc4:	20db      	movs	r0, #219	; 0xdb
 8002cc6:	f001 ff27 	bl	8004b18 <putchar>

	gotoxy(38,44);
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	2026      	movs	r0, #38	; 0x26
 8002cce:	f7fe fa57 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002cd2:	20dc      	movs	r0, #220	; 0xdc
 8002cd4:	f001 ff20 	bl	8004b18 <putchar>

	gotoxy(40,44);
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	2028      	movs	r0, #40	; 0x28
 8002cdc:	f7fe fa50 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ce0:	20db      	movs	r0, #219	; 0xdb
 8002ce2:	f001 ff19 	bl	8004b18 <putchar>
	gotoxy(40,43);
 8002ce6:	212b      	movs	r1, #43	; 0x2b
 8002ce8:	2028      	movs	r0, #40	; 0x28
 8002cea:	f7fe fa49 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002cee:	20db      	movs	r0, #219	; 0xdb
 8002cf0:	f001 ff12 	bl	8004b18 <putchar>

	gotoxy(41,43);
 8002cf4:	212b      	movs	r1, #43	; 0x2b
 8002cf6:	2029      	movs	r0, #41	; 0x29
 8002cf8:	f7fe fa42 	bl	8001180 <gotoxy>
	printf("%c",205);
 8002cfc:	20cd      	movs	r0, #205	; 0xcd
 8002cfe:	f001 ff0b 	bl	8004b18 <putchar>

	gotoxy(42,44);
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	202a      	movs	r0, #42	; 0x2a
 8002d06:	f7fe fa3b 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d0a:	20db      	movs	r0, #219	; 0xdb
 8002d0c:	f001 ff04 	bl	8004b18 <putchar>
	gotoxy(42,43);
 8002d10:	212b      	movs	r1, #43	; 0x2b
 8002d12:	202a      	movs	r0, #42	; 0x2a
 8002d14:	f7fe fa34 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d18:	20db      	movs	r0, #219	; 0xdb
 8002d1a:	f001 fefd 	bl	8004b18 <putchar>

	gotoxy(45,44);
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	202d      	movs	r0, #45	; 0x2d
 8002d22:	f7fe fa2d 	bl	8001180 <gotoxy>
	printf("%c",186);
 8002d26:	20ba      	movs	r0, #186	; 0xba
 8002d28:	f001 fef6 	bl	8004b18 <putchar>

	gotoxy(47,44);
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	202f      	movs	r0, #47	; 0x2f
 8002d30:	f7fe fa26 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d34:	20dc      	movs	r0, #220	; 0xdc
 8002d36:	f001 feef 	bl	8004b18 <putchar>

	gotoxy(55,44);
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	2037      	movs	r0, #55	; 0x37
 8002d3e:	f7fe fa1f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d42:	20db      	movs	r0, #219	; 0xdb
 8002d44:	f001 fee8 	bl	8004b18 <putchar>
	gotoxy(55,43);
 8002d48:	212b      	movs	r1, #43	; 0x2b
 8002d4a:	2037      	movs	r0, #55	; 0x37
 8002d4c:	f7fe fa18 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d50:	20dc      	movs	r0, #220	; 0xdc
 8002d52:	f001 fee1 	bl	8004b18 <putchar>

	gotoxy(58,44);
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	203a      	movs	r0, #58	; 0x3a
 8002d5a:	f7fe fa11 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d5e:	20db      	movs	r0, #219	; 0xdb
 8002d60:	f001 feda 	bl	8004b18 <putchar>
	gotoxy(58,43);
 8002d64:	212b      	movs	r1, #43	; 0x2b
 8002d66:	203a      	movs	r0, #58	; 0x3a
 8002d68:	f7fe fa0a 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d6c:	20db      	movs	r0, #219	; 0xdb
 8002d6e:	f001 fed3 	bl	8004b18 <putchar>
	gotoxy(58,42);
 8002d72:	212a      	movs	r1, #42	; 0x2a
 8002d74:	203a      	movs	r0, #58	; 0x3a
 8002d76:	f7fe fa03 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d7a:	20dc      	movs	r0, #220	; 0xdc
 8002d7c:	f001 fecc 	bl	8004b18 <putchar>

	gotoxy(59,44);
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	203b      	movs	r0, #59	; 0x3b
 8002d84:	f7fe f9fc 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002d88:	20db      	movs	r0, #219	; 0xdb
 8002d8a:	f001 fec5 	bl	8004b18 <putchar>
	gotoxy(59,43);
 8002d8e:	212b      	movs	r1, #43	; 0x2b
 8002d90:	203b      	movs	r0, #59	; 0x3b
 8002d92:	f7fe f9f5 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002d96:	20dc      	movs	r0, #220	; 0xdc
 8002d98:	f001 febe 	bl	8004b18 <putchar>

	gotoxy(60,44);
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	203c      	movs	r0, #60	; 0x3c
 8002da0:	f7fe f9ee 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002da4:	20db      	movs	r0, #219	; 0xdb
 8002da6:	f001 feb7 	bl	8004b18 <putchar>

	gotoxy(61,44);
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	203d      	movs	r0, #61	; 0x3d
 8002dae:	f7fe f9e7 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002db2:	20db      	movs	r0, #219	; 0xdb
 8002db4:	f001 feb0 	bl	8004b18 <putchar>
	gotoxy(61,43);
 8002db8:	212b      	movs	r1, #43	; 0x2b
 8002dba:	203d      	movs	r0, #61	; 0x3d
 8002dbc:	f7fe f9e0 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002dc0:	20db      	movs	r0, #219	; 0xdb
 8002dc2:	f001 fea9 	bl	8004b18 <putchar>

	gotoxy(63,44);
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	203f      	movs	r0, #63	; 0x3f
 8002dca:	f7fe f9d9 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002dce:	20db      	movs	r0, #219	; 0xdb
 8002dd0:	f001 fea2 	bl	8004b18 <putchar>

	gotoxy(64,44);
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	2040      	movs	r0, #64	; 0x40
 8002dd8:	f7fe f9d2 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ddc:	20dc      	movs	r0, #220	; 0xdc
 8002dde:	f001 fe9b 	bl	8004b18 <putchar>

	gotoxy(65,44);
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	2041      	movs	r0, #65	; 0x41
 8002de6:	f7fe f9cb 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002dea:	20db      	movs	r0, #219	; 0xdb
 8002dec:	f001 fe94 	bl	8004b18 <putchar>

	gotoxy(67,44);
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	2043      	movs	r0, #67	; 0x43
 8002df4:	f7fe f9c4 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002df8:	20db      	movs	r0, #219	; 0xdb
 8002dfa:	f001 fe8d 	bl	8004b18 <putchar>
	gotoxy(67,43);
 8002dfe:	212b      	movs	r1, #43	; 0x2b
 8002e00:	2043      	movs	r0, #67	; 0x43
 8002e02:	f7fe f9bd 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e06:	20db      	movs	r0, #219	; 0xdb
 8002e08:	f001 fe86 	bl	8004b18 <putchar>
	gotoxy(67,42);
 8002e0c:	212a      	movs	r1, #42	; 0x2a
 8002e0e:	2043      	movs	r0, #67	; 0x43
 8002e10:	f7fe f9b6 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e14:	20db      	movs	r0, #219	; 0xdb
 8002e16:	f001 fe7f 	bl	8004b18 <putchar>

	gotoxy(69,44);
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	2045      	movs	r0, #69	; 0x45
 8002e1e:	f7fe f9af 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e22:	20db      	movs	r0, #219	; 0xdb
 8002e24:	f001 fe78 	bl	8004b18 <putchar>
	gotoxy(69,43);
 8002e28:	212b      	movs	r1, #43	; 0x2b
 8002e2a:	2045      	movs	r0, #69	; 0x45
 8002e2c:	f7fe f9a8 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e30:	20db      	movs	r0, #219	; 0xdb
 8002e32:	f001 fe71 	bl	8004b18 <putchar>
	gotoxy(69,42);
 8002e36:	212a      	movs	r1, #42	; 0x2a
 8002e38:	2045      	movs	r0, #69	; 0x45
 8002e3a:	f7fe f9a1 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e3e:	20db      	movs	r0, #219	; 0xdb
 8002e40:	f001 fe6a 	bl	8004b18 <putchar>

	gotoxy(71,44);
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	2047      	movs	r0, #71	; 0x47
 8002e48:	f7fe f99a 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e4c:	20db      	movs	r0, #219	; 0xdb
 8002e4e:	f001 fe63 	bl	8004b18 <putchar>
	gotoxy(71,43);
 8002e52:	212b      	movs	r1, #43	; 0x2b
 8002e54:	2047      	movs	r0, #71	; 0x47
 8002e56:	f7fe f993 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e5a:	20db      	movs	r0, #219	; 0xdb
 8002e5c:	f001 fe5c 	bl	8004b18 <putchar>
	gotoxy(71,42);
 8002e60:	212a      	movs	r1, #42	; 0x2a
 8002e62:	2047      	movs	r0, #71	; 0x47
 8002e64:	f7fe f98c 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e68:	20db      	movs	r0, #219	; 0xdb
 8002e6a:	f001 fe55 	bl	8004b18 <putchar>

	gotoxy(73,44);
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	2049      	movs	r0, #73	; 0x49
 8002e72:	f7fe f985 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e76:	20db      	movs	r0, #219	; 0xdb
 8002e78:	f001 fe4e 	bl	8004b18 <putchar>
	gotoxy(73,43);
 8002e7c:	212b      	movs	r1, #43	; 0x2b
 8002e7e:	2049      	movs	r0, #73	; 0x49
 8002e80:	f7fe f97e 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e84:	20db      	movs	r0, #219	; 0xdb
 8002e86:	f001 fe47 	bl	8004b18 <putchar>

	gotoxy(74,44);
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	204a      	movs	r0, #74	; 0x4a
 8002e8e:	f7fe f977 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002e92:	20db      	movs	r0, #219	; 0xdb
 8002e94:	f001 fe40 	bl	8004b18 <putchar>

	gotoxy(76,44);
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	204c      	movs	r0, #76	; 0x4c
 8002e9c:	f7fe f970 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ea0:	20db      	movs	r0, #219	; 0xdb
 8002ea2:	f001 fe39 	bl	8004b18 <putchar>

	gotoxy(77,44);
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	204d      	movs	r0, #77	; 0x4d
 8002eaa:	f7fe f969 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002eae:	20db      	movs	r0, #219	; 0xdb
 8002eb0:	f001 fe32 	bl	8004b18 <putchar>
	gotoxy(77,43);
 8002eb4:	212b      	movs	r1, #43	; 0x2b
 8002eb6:	204d      	movs	r0, #77	; 0x4d
 8002eb8:	f7fe f962 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ebc:	20db      	movs	r0, #219	; 0xdb
 8002ebe:	f001 fe2b 	bl	8004b18 <putchar>

	gotoxy(79,44);
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	204f      	movs	r0, #79	; 0x4f
 8002ec6:	f7fe f95b 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002eca:	20db      	movs	r0, #219	; 0xdb
 8002ecc:	f001 fe24 	bl	8004b18 <putchar>
	gotoxy(79,44);
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	204f      	movs	r0, #79	; 0x4f
 8002ed4:	f7fe f954 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ed8:	20dc      	movs	r0, #220	; 0xdc
 8002eda:	f001 fe1d 	bl	8004b18 <putchar>

	gotoxy(81,44);
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	2051      	movs	r0, #81	; 0x51
 8002ee2:	f7fe f94d 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ee6:	20db      	movs	r0, #219	; 0xdb
 8002ee8:	f001 fe16 	bl	8004b18 <putchar>
	gotoxy(81,43);
 8002eec:	212b      	movs	r1, #43	; 0x2b
 8002eee:	2051      	movs	r0, #81	; 0x51
 8002ef0:	f7fe f946 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ef4:	20db      	movs	r0, #219	; 0xdb
 8002ef6:	f001 fe0f 	bl	8004b18 <putchar>

	gotoxy(82,44);
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	2052      	movs	r0, #82	; 0x52
 8002efe:	f7fe f93f 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f02:	20db      	movs	r0, #219	; 0xdb
 8002f04:	f001 fe08 	bl	8004b18 <putchar>

	gotoxy(85,44);
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	2055      	movs	r0, #85	; 0x55
 8002f0c:	f7fe f938 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f10:	20db      	movs	r0, #219	; 0xdb
 8002f12:	f001 fe01 	bl	8004b18 <putchar>
	gotoxy(85,43);
 8002f16:	212b      	movs	r1, #43	; 0x2b
 8002f18:	2055      	movs	r0, #85	; 0x55
 8002f1a:	f7fe f931 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f1e:	20db      	movs	r0, #219	; 0xdb
 8002f20:	f001 fdfa 	bl	8004b18 <putchar>
	gotoxy(85,42);
 8002f24:	212a      	movs	r1, #42	; 0x2a
 8002f26:	2055      	movs	r0, #85	; 0x55
 8002f28:	f7fe f92a 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f2c:	20dc      	movs	r0, #220	; 0xdc
 8002f2e:	f001 fdf3 	bl	8004b18 <putchar>

	gotoxy(86,44);
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	2056      	movs	r0, #86	; 0x56
 8002f36:	f7fe f923 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f3a:	20db      	movs	r0, #219	; 0xdb
 8002f3c:	f001 fdec 	bl	8004b18 <putchar>

	gotoxy(87,44);
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	2057      	movs	r0, #87	; 0x57
 8002f44:	f7fe f91c 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f48:	20dc      	movs	r0, #220	; 0xdc
 8002f4a:	f001 fde5 	bl	8004b18 <putchar>

	gotoxy(88,44);
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	2058      	movs	r0, #88	; 0x58
 8002f52:	f7fe f915 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f56:	20db      	movs	r0, #219	; 0xdb
 8002f58:	f001 fdde 	bl	8004b18 <putchar>
	gotoxy(88,43);
 8002f5c:	212b      	movs	r1, #43	; 0x2b
 8002f5e:	2058      	movs	r0, #88	; 0x58
 8002f60:	f7fe f90e 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f64:	20dc      	movs	r0, #220	; 0xdc
 8002f66:	f001 fdd7 	bl	8004b18 <putchar>

	gotoxy(93,44);
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	205d      	movs	r0, #93	; 0x5d
 8002f6e:	f7fe f907 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f72:	20db      	movs	r0, #219	; 0xdb
 8002f74:	f001 fdd0 	bl	8004b18 <putchar>

	gotoxy(94,44);
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	205e      	movs	r0, #94	; 0x5e
 8002f7c:	f7fe f900 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002f80:	20db      	movs	r0, #219	; 0xdb
 8002f82:	f001 fdc9 	bl	8004b18 <putchar>
	gotoxy(94,43);
 8002f86:	212b      	movs	r1, #43	; 0x2b
 8002f88:	205e      	movs	r0, #94	; 0x5e
 8002f8a:	f7fe f8f9 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f8e:	20dc      	movs	r0, #220	; 0xdc
 8002f90:	f001 fdc2 	bl	8004b18 <putchar>

	gotoxy(95,44);
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	205f      	movs	r0, #95	; 0x5f
 8002f98:	f7fe f8f2 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002f9c:	20dc      	movs	r0, #220	; 0xdc
 8002f9e:	f001 fdbb 	bl	8004b18 <putchar>

	gotoxy(96,44);
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	2060      	movs	r0, #96	; 0x60
 8002fa6:	f7fe f8eb 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002faa:	20db      	movs	r0, #219	; 0xdb
 8002fac:	f001 fdb4 	bl	8004b18 <putchar>

	gotoxy(98,44);
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	2062      	movs	r0, #98	; 0x62
 8002fb4:	f7fe f8e4 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002fb8:	20db      	movs	r0, #219	; 0xdb
 8002fba:	f001 fdad 	bl	8004b18 <putchar>
	gotoxy(98,43);
 8002fbe:	212b      	movs	r1, #43	; 0x2b
 8002fc0:	2062      	movs	r0, #98	; 0x62
 8002fc2:	f7fe f8dd 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002fc6:	20dc      	movs	r0, #220	; 0xdc
 8002fc8:	f001 fda6 	bl	8004b18 <putchar>

	gotoxy(99,44);
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	2063      	movs	r0, #99	; 0x63
 8002fd0:	f7fe f8d6 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002fd4:	20db      	movs	r0, #219	; 0xdb
 8002fd6:	f001 fd9f 	bl	8004b18 <putchar>

	gotoxy(103,44);
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	2067      	movs	r0, #103	; 0x67
 8002fde:	f7fe f8cf 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002fe2:	20db      	movs	r0, #219	; 0xdb
 8002fe4:	f001 fd98 	bl	8004b18 <putchar>

	gotoxy(104,44);
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	2068      	movs	r0, #104	; 0x68
 8002fec:	f7fe f8c8 	bl	8001180 <gotoxy>
	printf("%c",220);
 8002ff0:	20dc      	movs	r0, #220	; 0xdc
 8002ff2:	f001 fd91 	bl	8004b18 <putchar>

	gotoxy(107,44);
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	206b      	movs	r0, #107	; 0x6b
 8002ffa:	f7fe f8c1 	bl	8001180 <gotoxy>
	printf("%c",219);
 8002ffe:	20db      	movs	r0, #219	; 0xdb
 8003000:	f001 fd8a 	bl	8004b18 <putchar>

	gotoxy(108,44);
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	206c      	movs	r0, #108	; 0x6c
 8003008:	f7fe f8ba 	bl	8001180 <gotoxy>
	printf("%c",219);
 800300c:	20db      	movs	r0, #219	; 0xdb
 800300e:	f001 fd83 	bl	8004b18 <putchar>
	gotoxy(108,43);
 8003012:	212b      	movs	r1, #43	; 0x2b
 8003014:	206c      	movs	r0, #108	; 0x6c
 8003016:	f7fe f8b3 	bl	8001180 <gotoxy>
	printf("%c",219);
 800301a:	20db      	movs	r0, #219	; 0xdb
 800301c:	f001 fd7c 	bl	8004b18 <putchar>

	gotoxy(109,44);
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	206d      	movs	r0, #109	; 0x6d
 8003024:	f7fe f8ac 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003028:	20dc      	movs	r0, #220	; 0xdc
 800302a:	f001 fd75 	bl	8004b18 <putchar>

	gotoxy(112,44);
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	2070      	movs	r0, #112	; 0x70
 8003032:	f7fe f8a5 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003036:	20db      	movs	r0, #219	; 0xdb
 8003038:	f001 fd6e 	bl	8004b18 <putchar>

	gotoxy(113,44);
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	2071      	movs	r0, #113	; 0x71
 8003040:	f7fe f89e 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003044:	20dc      	movs	r0, #220	; 0xdc
 8003046:	f001 fd67 	bl	8004b18 <putchar>

	gotoxy(114,44);
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	2072      	movs	r0, #114	; 0x72
 800304e:	f7fe f897 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003052:	20db      	movs	r0, #219	; 0xdb
 8003054:	f001 fd60 	bl	8004b18 <putchar>
	gotoxy(114,43);
 8003058:	212b      	movs	r1, #43	; 0x2b
 800305a:	2072      	movs	r0, #114	; 0x72
 800305c:	f7fe f890 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003060:	20db      	movs	r0, #219	; 0xdb
 8003062:	f001 fd59 	bl	8004b18 <putchar>

	gotoxy(115,44);
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	2073      	movs	r0, #115	; 0x73
 800306a:	f7fe f889 	bl	8001180 <gotoxy>
	printf("%c",219);
 800306e:	20db      	movs	r0, #219	; 0xdb
 8003070:	f001 fd52 	bl	8004b18 <putchar>

	gotoxy(120,44);
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	2078      	movs	r0, #120	; 0x78
 8003078:	f7fe f882 	bl	8001180 <gotoxy>
	printf("%c",47);
 800307c:	202f      	movs	r0, #47	; 0x2f
 800307e:	f001 fd4b 	bl	8004b18 <putchar>
	gotoxy(121,43);
 8003082:	212b      	movs	r1, #43	; 0x2b
 8003084:	2079      	movs	r0, #121	; 0x79
 8003086:	f7fe f87b 	bl	8001180 <gotoxy>
	printf("%c",47);
 800308a:	202f      	movs	r0, #47	; 0x2f
 800308c:	f001 fd44 	bl	8004b18 <putchar>
	gotoxy(122,43);
 8003090:	212b      	movs	r1, #43	; 0x2b
 8003092:	207a      	movs	r0, #122	; 0x7a
 8003094:	f7fe f874 	bl	8001180 <gotoxy>
	printf("%c",223);
 8003098:	20df      	movs	r0, #223	; 0xdf
 800309a:	f001 fd3d 	bl	8004b18 <putchar>
	gotoxy(122,42);
 800309e:	212a      	movs	r1, #42	; 0x2a
 80030a0:	207a      	movs	r0, #122	; 0x7a
 80030a2:	f7fe f86d 	bl	8001180 <gotoxy>
	printf("%c",168);
 80030a6:	20a8      	movs	r0, #168	; 0xa8
 80030a8:	f001 fd36 	bl	8004b18 <putchar>
	gotoxy(123,43);
 80030ac:	212b      	movs	r1, #43	; 0x2b
 80030ae:	207b      	movs	r0, #123	; 0x7b
 80030b0:	f7fe f866 	bl	8001180 <gotoxy>
	printf("%c",92);
 80030b4:	205c      	movs	r0, #92	; 0x5c
 80030b6:	f001 fd2f 	bl	8004b18 <putchar>
	gotoxy(124,44);
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	207c      	movs	r0, #124	; 0x7c
 80030be:	f7fe f85f 	bl	8001180 <gotoxy>
	printf("%c",92);
 80030c2:	205c      	movs	r0, #92	; 0x5c
 80030c4:	f001 fd28 	bl	8004b18 <putchar>

	gotoxy(127,44);
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	207f      	movs	r0, #127	; 0x7f
 80030cc:	f7fe f858 	bl	8001180 <gotoxy>
	printf("%c",219);
 80030d0:	20db      	movs	r0, #219	; 0xdb
 80030d2:	f001 fd21 	bl	8004b18 <putchar>
	gotoxy(127,43);
 80030d6:	212b      	movs	r1, #43	; 0x2b
 80030d8:	207f      	movs	r0, #127	; 0x7f
 80030da:	f7fe f851 	bl	8001180 <gotoxy>
	printf("%c",219);
 80030de:	20db      	movs	r0, #219	; 0xdb
 80030e0:	f001 fd1a 	bl	8004b18 <putchar>
	gotoxy(127,42);
 80030e4:	212a      	movs	r1, #42	; 0x2a
 80030e6:	207f      	movs	r0, #127	; 0x7f
 80030e8:	f7fe f84a 	bl	8001180 <gotoxy>
	printf("%c",219);
 80030ec:	20db      	movs	r0, #219	; 0xdb
 80030ee:	f001 fd13 	bl	8004b18 <putchar>

	gotoxy(129,44);
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	2081      	movs	r0, #129	; 0x81
 80030f6:	f7fe f843 	bl	8001180 <gotoxy>
	printf("%c",219);
 80030fa:	20db      	movs	r0, #219	; 0xdb
 80030fc:	f001 fd0c 	bl	8004b18 <putchar>
	gotoxy(129,43);
 8003100:	212b      	movs	r1, #43	; 0x2b
 8003102:	2081      	movs	r0, #129	; 0x81
 8003104:	f7fe f83c 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003108:	20dc      	movs	r0, #220	; 0xdc
 800310a:	f001 fd05 	bl	8004b18 <putchar>

	gotoxy(130,44);
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	2082      	movs	r0, #130	; 0x82
 8003112:	f7fe f835 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003116:	20db      	movs	r0, #219	; 0xdb
 8003118:	f001 fcfe 	bl	8004b18 <putchar>

	gotoxy(131,44);
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	2083      	movs	r0, #131	; 0x83
 8003120:	f7fe f82e 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003124:	20dc      	movs	r0, #220	; 0xdc
 8003126:	f001 fcf7 	bl	8004b18 <putchar>

	gotoxy(132,44);
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	2084      	movs	r0, #132	; 0x84
 800312e:	f7fe f827 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003132:	20db      	movs	r0, #219	; 0xdb
 8003134:	f001 fcf0 	bl	8004b18 <putchar>

	gotoxy(133,44);
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	2085      	movs	r0, #133	; 0x85
 800313c:	f7fe f820 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003140:	20db      	movs	r0, #219	; 0xdb
 8003142:	f001 fce9 	bl	8004b18 <putchar>
	gotoxy(133,43);
 8003146:	212b      	movs	r1, #43	; 0x2b
 8003148:	2085      	movs	r0, #133	; 0x85
 800314a:	f7fe f819 	bl	8001180 <gotoxy>
	printf("%c",219);
 800314e:	20db      	movs	r0, #219	; 0xdb
 8003150:	f001 fce2 	bl	8004b18 <putchar>

	gotoxy(134,44);
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	2086      	movs	r0, #134	; 0x86
 8003158:	f7fe f812 	bl	8001180 <gotoxy>
	printf("%c",219);
 800315c:	20db      	movs	r0, #219	; 0xdb
 800315e:	f001 fcdb 	bl	8004b18 <putchar>

	gotoxy(135,44);
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	2087      	movs	r0, #135	; 0x87
 8003166:	f7fe f80b 	bl	8001180 <gotoxy>
	printf("%c",220);
 800316a:	20dc      	movs	r0, #220	; 0xdc
 800316c:	f001 fcd4 	bl	8004b18 <putchar>

	gotoxy(137,44);
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	2089      	movs	r0, #137	; 0x89
 8003174:	f7fe f804 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003178:	20dc      	movs	r0, #220	; 0xdc
 800317a:	f001 fccd 	bl	8004b18 <putchar>

	gotoxy(139,44);
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	208b      	movs	r0, #139	; 0x8b
 8003182:	f7fd fffd 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003186:	20dc      	movs	r0, #220	; 0xdc
 8003188:	f001 fcc6 	bl	8004b18 <putchar>

	gotoxy(141,44);
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	208d      	movs	r0, #141	; 0x8d
 8003190:	f7fd fff6 	bl	8001180 <gotoxy>
	printf("%c",219);
 8003194:	20db      	movs	r0, #219	; 0xdb
 8003196:	f001 fcbf 	bl	8004b18 <putchar>

	gotoxy(142,44);
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	208e      	movs	r0, #142	; 0x8e
 800319e:	f7fd ffef 	bl	8001180 <gotoxy>
	printf("%c",220);
 80031a2:	20dc      	movs	r0, #220	; 0xdc
 80031a4:	f001 fcb8 	bl	8004b18 <putchar>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <drawScore>:

void drawScore(gameState_t* gameState){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 80031b4:	2100      	movs	r1, #0
 80031b6:	208c      	movs	r0, #140	; 0x8c
 80031b8:	f7fd ffe2 	bl	8001180 <gotoxy>
	printf("Your score is: %d", gameState->score);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	4619      	mov	r1, r3
 80031c2:	4803      	ldr	r0, [pc, #12]	; (80031d0 <drawScore+0x24>)
 80031c4:	f001 fc90 	bl	8004ae8 <iprintf>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	08005d0c 	.word	0x08005d0c

080031d4 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	460a      	mov	r2, r1
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	4613      	mov	r3, r2
 80031e2:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	79ba      	ldrb	r2, [r7, #6]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd ffc8 	bl	8001180 <gotoxy>
	printf("%c",219);
 80031f0:	20db      	movs	r0, #219	; 0xdb
 80031f2:	f001 fc91 	bl	8004b18 <putchar>
	gotoxy(X-1,Y);
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	79ba      	ldrb	r2, [r7, #6]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd ffbe 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003204:	20dc      	movs	r0, #220	; 0xdc
 8003206:	f001 fc87 	bl	8004b18 <putchar>
	gotoxy(X+1,Y);
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	3301      	adds	r3, #1
 800320e:	79ba      	ldrb	r2, [r7, #6]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd ffb4 	bl	8001180 <gotoxy>
	printf("%c",220);
 8003218:	20dc      	movs	r0, #220	; 0xdc
 800321a:	f001 fc7d 	bl	8004b18 <putchar>
	gotoxy(X-1,Y+1);
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	79bb      	ldrb	r3, [r7, #6]
 8003224:	3301      	adds	r3, #1
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7fd ffa9 	bl	8001180 <gotoxy>
	printf("%c",223);
 800322e:	20df      	movs	r0, #223	; 0xdf
 8003230:	f001 fc72 	bl	8004b18 <putchar>
	gotoxy(X+1,Y+1);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	79bb      	ldrb	r3, [r7, #6]
 800323a:	3301      	adds	r3, #1
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fd ff9e 	bl	8001180 <gotoxy>
	printf("%c",223);
 8003244:	20df      	movs	r0, #223	; 0xdf
 8003246:	f001 fc67 	bl	8004b18 <putchar>

	gotoxy(X,Y-1);
 800324a:	79fa      	ldrb	r2, [r7, #7]
 800324c:	79bb      	ldrb	r3, [r7, #6]
 800324e:	3b01      	subs	r3, #1
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7fd ff94 	bl	8001180 <gotoxy>
	printf("%c",179);
 8003258:	20b3      	movs	r0, #179	; 0xb3
 800325a:	f001 fc5d 	bl	8004b18 <putchar>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	460a      	mov	r2, r1
 8003270:	71fb      	strb	r3, [r7, #7]
 8003272:	4613      	mov	r3, r2
 8003274:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	79ba      	ldrb	r2, [r7, #6]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd ff7f 	bl	8001180 <gotoxy>
	printf(" ");
 8003282:	2020      	movs	r0, #32
 8003284:	f001 fc48 	bl	8004b18 <putchar>
	gotoxy(X-1,Y);
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	3b01      	subs	r3, #1
 800328c:	79ba      	ldrb	r2, [r7, #6]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd ff75 	bl	8001180 <gotoxy>
	printf(" ");
 8003296:	2020      	movs	r0, #32
 8003298:	f001 fc3e 	bl	8004b18 <putchar>
	gotoxy(X+1,Y);
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	3301      	adds	r3, #1
 80032a0:	79ba      	ldrb	r2, [r7, #6]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd ff6b 	bl	8001180 <gotoxy>
	printf(" ");
 80032aa:	2020      	movs	r0, #32
 80032ac:	f001 fc34 	bl	8004b18 <putchar>
	gotoxy(X-1,Y+1);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7fd ff60 	bl	8001180 <gotoxy>
	printf(" ");
 80032c0:	2020      	movs	r0, #32
 80032c2:	f001 fc29 	bl	8004b18 <putchar>
	gotoxy(X+1,Y+1);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	79bb      	ldrb	r3, [r7, #6]
 80032cc:	3301      	adds	r3, #1
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7fd ff55 	bl	8001180 <gotoxy>
	printf(" ");
 80032d6:	2020      	movs	r0, #32
 80032d8:	f001 fc1e 	bl	8004b18 <putchar>

	gotoxy(X,Y-1);
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	79bb      	ldrb	r3, [r7, #6]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7fd ff4b 	bl	8001180 <gotoxy>
	printf(" ");
 80032ea:	2020      	movs	r0, #32
 80032ec:	f001 fc14 	bl	8004b18 <putchar>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	460a      	mov	r2, r1
 8003302:	71fb      	strb	r3, [r7, #7]
 8003304:	4613      	mov	r3, r2
 8003306:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	3302      	adds	r3, #2
 800330c:	79ba      	ldrb	r2, [r7, #6]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd ff35 	bl	8001180 <gotoxy>
	printf("____");
 8003316:	4808      	ldr	r0, [pc, #32]	; (8003338 <drawAttachmentRods+0x40>)
 8003318:	f001 fbe6 	bl	8004ae8 <iprintf>
	gotoxy(x-5, y);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	3b05      	subs	r3, #5
 8003320:	79ba      	ldrb	r2, [r7, #6]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd ff2b 	bl	8001180 <gotoxy>
	printf("____");
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <drawAttachmentRods+0x40>)
 800332c:	f001 fbdc 	bl	8004ae8 <iprintf>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	08005d20 	.word	0x08005d20

0800333c <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	460a      	mov	r2, r1
 8003346:	71fb      	strb	r3, [r7, #7]
 8003348:	4613      	mov	r3, r2
 800334a:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	3302      	adds	r3, #2
 8003350:	79ba      	ldrb	r2, [r7, #6]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd ff13 	bl	8001180 <gotoxy>
	printf("    ");
 800335a:	4808      	ldr	r0, [pc, #32]	; (800337c <deleteAttachmentRods+0x40>)
 800335c:	f001 fbc4 	bl	8004ae8 <iprintf>
	gotoxy(x-5, y);
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	3b05      	subs	r3, #5
 8003364:	79ba      	ldrb	r2, [r7, #6]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd ff09 	bl	8001180 <gotoxy>
	printf("    ");
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <deleteAttachmentRods+0x40>)
 8003370:	f001 fbba 	bl	8004ae8 <iprintf>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08005d28 	.word	0x08005d28

08003380 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	460a      	mov	r2, r1
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	4613      	mov	r3, r2
 800338e:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	79ba      	ldrb	r2, [r7, #6]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fef2 	bl	8001180 <gotoxy>
	printf("     ");
 800339c:	480d      	ldr	r0, [pc, #52]	; (80033d4 <deletePowerupGraphics+0x54>)
 800339e:	f001 fba3 	bl	8004ae8 <iprintf>
	gotoxy(x, y+1);
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7fd fee8 	bl	8001180 <gotoxy>
	printf("     ");
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <deletePowerupGraphics+0x54>)
 80033b2:	f001 fb99 	bl	8004ae8 <iprintf>
	gotoxy(x, y+2);
 80033b6:	79fa      	ldrb	r2, [r7, #7]
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	3302      	adds	r3, #2
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fd fede 	bl	8001180 <gotoxy>
	printf("     ");
 80033c4:	4803      	ldr	r0, [pc, #12]	; (80033d4 <deletePowerupGraphics+0x54>)
 80033c6:	f001 fb8f 	bl	8004ae8 <iprintf>

}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08005d30 	.word	0x08005d30

080033d8 <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b085      	sub	sp, #20
 80033dc:	af02      	add	r7, sp, #8
 80033de:	4603      	mov	r3, r0
 80033e0:	460a      	mov	r2, r1
 80033e2:	71fb      	strb	r3, [r7, #7]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 80033e8:	79f8      	ldrb	r0, [r7, #7]
 80033ea:	79b9      	ldrb	r1, [r7, #6]
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	79bb      	ldrb	r3, [r7, #6]
 80033f2:	3302      	adds	r3, #2
 80033f4:	2401      	movs	r4, #1
 80033f6:	9400      	str	r4, [sp, #0]
 80033f8:	f7fd fed4 	bl	80011a4 <drawBox>
 gotoxy(x+2, y+1);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	79bb      	ldrb	r3, [r7, #6]
 8003402:	3301      	adds	r3, #1
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fd feba 	bl	8001180 <gotoxy>
 printf("$");
 800340c:	2024      	movs	r0, #36	; 0x24
 800340e:	f001 fb83 	bl	8004b18 <putchar>
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}

0800341a <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 800341a:	b084      	sub	sp, #16
 800341c:	b5b0      	push	{r4, r5, r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	f107 0418 	add.w	r4, r7, #24
 8003426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 800342a:	2020      	movs	r0, #32
 800342c:	f001 fa9a 	bl	8004964 <malloc>
 8003430:	4603      	mov	r3, r0
 8003432:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	461d      	mov	r5, r3
 8003438:	f107 0418 	add.w	r4, r7, #24
 800343c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003440:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003444:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
    return newNode;
 800344e:	687b      	ldr	r3, [r7, #4]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800345a:	b004      	add	sp, #16
 800345c:	4770      	bx	lr

0800345e <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 800345e:	b084      	sub	sp, #16
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af04      	add	r7, sp, #16
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800346c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8003470:	466c      	mov	r4, sp
 8003472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800347a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003484:	f7ff ffc9 	bl	800341a <createBulletNode>
 8003488:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <appendBullet+0x3c>
        *head = newNode;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8003498:	e00d      	b.n	80034b6 <appendBullet+0x58>
        bulletNode_t* current = *head;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80034a0:	e002      	b.n	80034a8 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f8      	bne.n	80034a2 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	61da      	str	r2, [r3, #28]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80034c0:	b004      	add	sp, #16
 80034c2:	4770      	bx	lr

080034c4 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 80034ce:	2008      	movs	r0, #8
 80034d0:	f001 fa48 	bl	8004964 <malloc>
 80034d4:	4603      	mov	r3, r0
 80034d6:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10e      	bne.n	8003510 <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 80034f8:	e00a      	b.n	8003510 <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	605a      	str	r2, [r3, #4]
			break;
 8003508:	e006      	b.n	8003518 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f1      	bne.n	80034fa <appendEnemy+0x36>
	}
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	f040 809b 	bne.w	8003676 <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe ff5f 	bl	800240c <fpToInt>
 800354e:	4604      	mov	r4, r0
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe ff57 	bl	800240c <fpToInt>
 800355e:	4603      	mov	r3, r0
 8003560:	0fda      	lsrs	r2, r3, #31
 8003562:	4413      	add	r3, r2
 8003564:	105b      	asrs	r3, r3, #1
 8003566:	4619      	mov	r1, r3
 8003568:	4620      	mov	r0, r4
 800356a:	f7fd fe09 	bl	8001180 <gotoxy>
		printf("       ");
 800356e:	4845      	ldr	r0, [pc, #276]	; (8003684 <deleteEnemyNode+0x164>)
 8003570:	f001 faba 	bl	8004ae8 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe ff45 	bl	800240c <fpToInt>
 8003582:	4604      	mov	r4, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe ff3d 	bl	800240c <fpToInt>
 8003592:	4603      	mov	r3, r0
 8003594:	3302      	adds	r3, #2
 8003596:	0fda      	lsrs	r2, r3, #31
 8003598:	4413      	add	r3, r2
 800359a:	105b      	asrs	r3, r3, #1
 800359c:	4619      	mov	r1, r3
 800359e:	4620      	mov	r0, r4
 80035a0:	f7fd fdee 	bl	8001180 <gotoxy>
		printf("       ");
 80035a4:	4837      	ldr	r0, [pc, #220]	; (8003684 <deleteEnemyNode+0x164>)
 80035a6:	f001 fa9f 	bl	8004ae8 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]
		free(enemy);
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f001 f9dd 	bl	8004974 <free>
		return;
 80035ba:	e05f      	b.n	800367c <deleteEnemyNode+0x15c>
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d153      	bne.n	800366c <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe ff1d 	bl	800240c <fpToInt>
 80035d2:	4604      	mov	r4, r0
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe ff15 	bl	800240c <fpToInt>
 80035e2:	4603      	mov	r3, r0
 80035e4:	0fda      	lsrs	r2, r3, #31
 80035e6:	4413      	add	r3, r2
 80035e8:	105b      	asrs	r3, r3, #1
 80035ea:	4619      	mov	r1, r3
 80035ec:	4620      	mov	r0, r4
 80035ee:	f7fd fdc7 	bl	8001180 <gotoxy>
			printf("       ");
 80035f2:	4824      	ldr	r0, [pc, #144]	; (8003684 <deleteEnemyNode+0x164>)
 80035f4:	f001 fa78 	bl	8004ae8 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe ff03 	bl	800240c <fpToInt>
 8003606:	4604      	mov	r4, r0
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fefb 	bl	800240c <fpToInt>
 8003616:	4603      	mov	r3, r0
 8003618:	3302      	adds	r3, #2
 800361a:	0fda      	lsrs	r2, r3, #31
 800361c:	4413      	add	r3, r2
 800361e:	105b      	asrs	r3, r3, #1
 8003620:	4619      	mov	r1, r3
 8003622:	4620      	mov	r0, r4
 8003624:	f7fd fdac 	bl	8001180 <gotoxy>
			printf("       ");
 8003628:	4816      	ldr	r0, [pc, #88]	; (8003684 <deleteEnemyNode+0x164>)
 800362a:	f001 fa5d 	bl	8004ae8 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	f001 f999 	bl	8004974 <free>
			free(thisNode->enemy->position);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f993 	bl	8004974 <free>
			free(thisNode->enemy->velocity);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f98d 	bl	8004974 <free>
			free(thisNode->enemy);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f988 	bl	8004974 <free>
			free(thisNode);
 8003664:	68b8      	ldr	r0, [r7, #8]
 8003666:	f001 f985 	bl	8004974 <free>
			return;
 800366a:	e007      	b.n	800367c <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d19f      	bne.n	80035bc <deleteEnemyNode+0x9c>
	}
}
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	08005d38 	.word	0x08005d38

08003688 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d03c      	beq.n	8003714 <deleteBulletNode+0x8c>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d039      	beq.n	8003714 <deleteBulletNode+0x8c>
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe feb1 	bl	800240c <fpToInt>
 80036aa:	4604      	mov	r4, r0
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe feab 	bl	800240c <fpToInt>
 80036b6:	4603      	mov	r3, r0
 80036b8:	0fda      	lsrs	r2, r3, #31
 80036ba:	4413      	add	r3, r2
 80036bc:	105b      	asrs	r3, r3, #1
 80036be:	4619      	mov	r1, r3
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7fd fd5d 	bl	8001180 <gotoxy>
    printf(" ");
 80036c6:	2020      	movs	r0, #32
 80036c8:	f001 fa26 	bl	8004b18 <putchar>

    if (*head == nodeToDelete) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d107      	bne.n	80036e6 <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 80036de:	6838      	ldr	r0, [r7, #0]
 80036e0:	f001 f948 	bl	8004974 <free>
        return;
 80036e4:	e017      	b.n	8003716 <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 80036ec:	e002      	b.n	80036f4 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <deleteBulletNode+0x7c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d1f4      	bne.n	80036ee <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 800370c:	6838      	ldr	r0, [r7, #0]
 800370e:	f001 f931 	bl	8004974 <free>
 8003712:	e000      	b.n	8003716 <deleteBulletNode+0x8e>
        return;
 8003714:	bf00      	nop
}
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <initVariables>:
#include "powerup.h"


#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	b08e      	sub	sp, #56	; 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, {intToFp(3), intToFp(40*yScale)}, 1, 20, 0};
 8003724:	f107 0320 	add.w	r3, r7, #32
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
 8003734:	615a      	str	r2, [r3, #20]
 8003736:	2003      	movs	r0, #3
 8003738:	f7fe fe53 	bl	80023e2 <intToFp>
 800373c:	4603      	mov	r3, r0
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	2050      	movs	r0, #80	; 0x50
 8003742:	f7fe fe4e 	bl	80023e2 <intToFp>
 8003746:	4603      	mov	r3, r0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	2003      	movs	r0, #3
 800374c:	f7fe fe49 	bl	80023e2 <intToFp>
 8003750:	4603      	mov	r3, r0
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
 8003754:	2050      	movs	r0, #80	; 0x50
 8003756:	f7fe fe44 	bl	80023e2 <intToFp>
 800375a:	4603      	mov	r3, r0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003764:	2314      	movs	r3, #20
 8003766:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <initVariables+0xfc>)
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	4611      	mov	r1, r2
 8003774:	8019      	strh	r1, [r3, #0]
 8003776:	3302      	adds	r3, #2
 8003778:	0c12      	lsrs	r2, r2, #16
 800377a:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

	nuke_t nuke = {NULL, NULL, 0, 0, 0};
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
	gameState->nuke = &nuke;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f107 0208 	add.w	r2, r7, #8
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

	gameState->activeScreen=0; //menu screen
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 040c 	add.w	r4, r3, #12
 80037d4:	f107 0520 	add.w	r5, r7, #32
 80037d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037e0:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f107 021c 	add.w	r2, r7, #28
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4611      	mov	r1, r2
 80037f8:	8019      	strh	r1, [r3, #0]
 80037fa:	3302      	adds	r3, #2
 80037fc:	0c12      	lsrs	r2, r2, #16
 80037fe:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	659a      	str	r2, [r3, #88]	; 0x58
	gameState->powerup.isVisible=0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//TODO: continue to initialize everything
}
 800380e:	bf00      	nop
 8003810:	3738      	adds	r7, #56	; 0x38
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	08005d40 	.word	0x08005d40

0800381c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fe63 	bl	80044f0 <drawSpaceship>
	drawEnemy(gameState);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff f934 	bl	8002a98 <drawEnemy>
	drawBullets(gameState);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fd ffac 	bl	800178e <drawBullets>
	drawPowerup(gameState);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fcf8 	bl	800422c <drawPowerup>
	drawhearth(gameState);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff f8a9 	bl	8002994 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7a1a      	ldrb	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7a5b      	ldrb	r3, [r3, #9]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe ff6e 	bl	800272e <drawMoon>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <checkIfDead>:
	}
	return 0;
	uart_clear();
}

void checkIfDead(gameState_t* gameState){
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <readInput>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8003888:	f7fd fa90 	bl	8000dac <uart_get_char>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d107      	bne.n	80038a6 <readInput+0x26>
		gameState->direction = 1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <readInput+0x90>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b61      	cmp	r3, #97	; 0x61
 80038aa:	d107      	bne.n	80038bc <readInput+0x3c>
		gameState->direction = -1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	22ff      	movs	r2, #255	; 0xff
 80038b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <readInput+0x90>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b66      	cmp	r3, #102	; 0x66
 80038c0:	d117      	bne.n	80038f2 <readInput+0x72>
		if(gameState->activeScreen != 4){
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00c      	beq.n	80038e6 <readInput+0x66>
			clrscr();
 80038cc:	f7fd fc48 	bl	8001160 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80038e4:	e005      	b.n	80038f2 <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <readInput+0x90>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d903      	bls.n	8003908 <readInput+0x88>
		gameState->direction = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200001c8 	.word	0x200001c8

08003914 <main>:

int main(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b0a0      	sub	sp, #128	; 0x80
 8003918:	af00      	add	r7, sp, #0
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 800391a:	4ad9      	ldr	r2, [pc, #868]	; (8003c80 <main+0x36c>)
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003924:	e883 0003 	stmia.w	r3, {r0, r1}
 8003928:	4ad6      	ldr	r2, [pc, #856]	; (8003c84 <main+0x370>)
 800392a:	f107 0310 	add.w	r3, r7, #16
 800392e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003932:	e883 0003 	stmia.w	r3, {r0, r1}
 8003936:	4ad4      	ldr	r2, [pc, #848]	; (8003c88 <main+0x374>)
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003940:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8003944:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8003948:	f7fd fad4 	bl	8000ef4 <uart_init>
	initVariables(&gameState);
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fee3 	bl	800371c <initVariables>
	initTimer();
 8003956:	f7fe f8c5 	bl	8001ae4 <initTimer>
	initJoystick();
 800395a:	f7fd ffa3 	bl	80018a4 <initJoystick>
	initRGB();
 800395e:	f7fe fa7d 	bl	8001e5c <initRGB>
	I2C_init();
 8003962:	f7fe f909 	bl	8001b78 <I2C_init>
	analogConfigPorts();
 8003966:	f7fe f9b3 	bl	8001cd0 <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 800396a:	4ac8      	ldr	r2, [pc, #800]	; (8003c8c <main+0x378>)
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4611      	mov	r1, r2
 8003972:	8019      	strh	r1, [r3, #0]
 8003974:	3302      	adds	r3, #2
 8003976:	0c12      	lsrs	r2, r2, #16
 8003978:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fb55 	bl	800202c <RGBColor>
	srand(readPotentiometer());   //RNG
 8003982:	f7fe fa49 	bl	8001e18 <readPotentiometer>
 8003986:	4603      	mov	r3, r0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 f8db 	bl	8004b44 <srand>

	while(1){
		switch(gameState.activeScreen){
 800398e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003992:	2b04      	cmp	r3, #4
 8003994:	d8fb      	bhi.n	800398e <main+0x7a>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <main+0x88>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039b1 	.word	0x080039b1
 80039a0:	08003b31 	.word	0x08003b31
 80039a4:	08003c37 	.word	0x08003c37
 80039a8:	08003c6f 	.word	0x08003c6f
 80039ac:	08003cdb 	.word	0x08003cdb
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 80039b0:	f7fd fbd6 	bl	8001160 <clrscr>
			drawWindow(0);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f000 fa47 	bl	8003e48 <drawWindow>
			drawbackground(); // stars in background
 80039ba:	f7fe fdc6 	bl	800254a <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80039be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe feb0 	bl	800272e <drawMoon>
			drawMenuScreen(btnList, &gameState);
 80039ce:	f107 0220 	add.w	r2, r7, #32
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f9fb 	bl	8003dd4 <drawMenuScreen>


			while(gameState.activeScreen==0){
 80039de:	e0a1      	b.n	8003b24 <main+0x210>
				readInput(&gameState);
 80039e0:	f107 0320 	add.w	r3, r7, #32
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff4b 	bl	8003880 <readInput>
				if(downIsPressed()){
 80039ea:	f7fe f84d 	bl	8001a88 <downIsPressed>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d025      	beq.n	8003a40 <main+0x12c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80039f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80039fe:	4413      	add	r3, r2
 8003a00:	3b78      	subs	r3, #120	; 0x78
 8003a02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a06:	f000 f9c5 	bl	8003d94 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8003a0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	4b9f      	ldr	r3, [pc, #636]	; (8003c90 <main+0x37c>)
 8003a12:	fb83 3102 	smull	r3, r1, r3, r2
 8003a16:	17d3      	asrs	r3, r2, #31
 8003a18:	1ac9      	subs	r1, r1, r3
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	440b      	add	r3, r1
 8003a20:	1ad1      	subs	r1, r2, r3
 8003a22:	b2cb      	uxtb	r3, r1
 8003a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003a28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003a32:	4413      	add	r3, r2
 8003a34:	3b78      	subs	r3, #120	; 0x78
 8003a36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a3a:	f000 f98b 	bl	8003d54 <drawBtnAsSelected>
 8003a3e:	e028      	b.n	8003a92 <main+0x17e>
				}
				else if(upIsPressed()){
 8003a40:	f7fd fff4 	bl	8001a2c <upIsPressed>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d023      	beq.n	8003a92 <main+0x17e>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8003a4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003a54:	4413      	add	r3, r2
 8003a56:	3b78      	subs	r3, #120	; 0x78
 8003a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a5c:	f000 f99a 	bl	8003d94 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8003a60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <main+0x15c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003a6e:	e005      	b.n	8003a7c <main+0x168>
					else gameState.btnSelected=gameState.btnSelected-1;
 8003a70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8003a7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003a86:	4413      	add	r3, r2
 8003a88:	3b78      	subs	r3, #120	; 0x78
 8003a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a8e:	f000 f961 	bl	8003d54 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8003a92:	f7fd ff9d 	bl	80019d0 <centerIsPressed>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d043      	beq.n	8003b24 <main+0x210>
					if(gameState.btnSelected==0){ //START BUTTON
 8003a9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <main+0x198>
						gameState.activeScreen=1; //Game screen
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003aaa:	e03b      	b.n	8003b24 <main+0x210>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8003aac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d130      	bne.n	8003b16 <main+0x202>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8003ab4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <main+0x37c>)
 8003abc:	fb83 3102 	smull	r3, r1, r3, r2
 8003ac0:	17d3      	asrs	r3, r2, #31
 8003ac2:	1ac9      	subs	r1, r1, r3
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	440b      	add	r3, r1
 8003aca:	1ad1      	subs	r1, r2, r3
 8003acc:	b2cb      	uxtb	r3, r1
 8003ace:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8003ad2:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <main+0x370>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	330f      	adds	r3, #15
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <main+0x370>)
 8003ada:	7852      	ldrb	r2, [r2, #1]
 8003adc:	3201      	adds	r2, #1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd fb4d 	bl	8001180 <gotoxy>
						if(gameState.difficulty==0){
 8003ae6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <main+0x1e2>
							printf("EASY  ");
 8003aee:	4869      	ldr	r0, [pc, #420]	; (8003c94 <main+0x380>)
 8003af0:	f000 fffa 	bl	8004ae8 <iprintf>
 8003af4:	e016      	b.n	8003b24 <main+0x210>
						} else if(gameState.difficulty==1){
 8003af6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d103      	bne.n	8003b06 <main+0x1f2>
							printf("MEDIUM");
 8003afe:	4866      	ldr	r0, [pc, #408]	; (8003c98 <main+0x384>)
 8003b00:	f000 fff2 	bl	8004ae8 <iprintf>
 8003b04:	e00e      	b.n	8003b24 <main+0x210>
						} else if(gameState.difficulty==2){
 8003b06:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d10a      	bne.n	8003b24 <main+0x210>
							printf("HARD  ");
 8003b0e:	4863      	ldr	r0, [pc, #396]	; (8003c9c <main+0x388>)
 8003b10:	f000 ffea 	bl	8004ae8 <iprintf>
 8003b14:	e006      	b.n	8003b24 <main+0x210>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8003b16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d102      	bne.n	8003b24 <main+0x210>
						gameState.activeScreen=2;// help screen
 8003b1e:	2302      	movs	r3, #2
 8003b20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 8003b24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f43f af59 	beq.w	80039e0 <main+0xcc>
					}
				}
			}
			break;
 8003b2e:	e0e1      	b.n	8003cf4 <main+0x3e0>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8003b30:	f7fd fb16 	bl	8001160 <clrscr>
			printf("GAME SCREEN");
 8003b34:	485a      	ldr	r0, [pc, #360]	; (8003ca0 <main+0x38c>)
 8003b36:	f000 ffd7 	bl	8004ae8 <iprintf>
			uint32_t frameLastUpdated=0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
			gameState.spaceship.lastShotTime=runtime;
 8003b3e:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <main+0x390>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
			gameState.powerup.lastUseTime = runtime;
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <main+0x390>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	67bb      	str	r3, [r7, #120]	; 0x78
			drawWindow(1);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 f97c 	bl	8003e48 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8003b50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b54:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fde7 	bl	800272e <drawMoon>
			drawhearth(&gameState);
 8003b60:	f107 0320 	add.w	r3, r7, #32
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe ff15 	bl	8002994 <drawhearth>
			//drawWindow();
			drawCity();
 8003b6a:	f7ff f835 	bl	8002bd8 <drawCity>
			drawScore(&gameState);
 8003b6e:	f107 0320 	add.w	r3, r7, #32
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fb1a 	bl	80031ac <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 8003b78:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <main+0x390>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	749a      	strb	r2, [r3, #18]
			while(gameState.activeScreen==1){
 8003b82:	e053      	b.n	8003c2c <main+0x318>
				readInput(&gameState);
 8003b84:	f107 0320 	add.w	r3, r7, #32
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fe79 	bl	8003880 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 8003b8e:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <main+0x390>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d948      	bls.n	8003c2c <main+0x318>
					readInput(&gameState);
 8003b9a:	f107 0320 	add.w	r3, r7, #32
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fe6e 	bl	8003880 <readInput>
					
					spawnEnemy(&gameState);
 8003ba4:	f107 0320 	add.w	r3, r7, #32
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe faa7 	bl	80020fc <spawnEnemy>
					spawnPowerup(&gameState);
 8003bae:	f107 0320 	add.w	r3, r7, #32
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f9fe 	bl	8003fb4 <spawnPowerup>

					updateSpaceship(&gameState);
 8003bb8:	f107 0320 	add.w	r3, r7, #32
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb74 	bl	80042aa <updateSpaceship>
					updateEnemy(&gameState);
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fb1a 	bl	8002200 <updateEnemy>
					updatePowerup(&gameState);
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fa51 	bl	8004078 <updatePowerup>
					shootSpaceship(&gameState);
 8003bd6:	f107 0320 	add.w	r3, r7, #32
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fbcc 	bl	8004378 <shootSpaceship>
					updateBullets(&gameState);
 8003be0:	f107 0320 	add.w	r3, r7, #32
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fba8 	bl	800133a <updateBullets>

					shootEnemy(&gameState);
 8003bea:	f107 0320 	add.w	r3, r7, #32
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fb36 	bl	8002260 <shootEnemy>

					detectBulletHit(&gameState);
 8003bf4:	f107 0320 	add.w	r3, r7, #32
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd fc22 	bl	8001442 <detectBulletHit>
					detectCityHit(&gameState);
 8003bfe:	f107 0320 	add.w	r3, r7, #32
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fb9a 	bl	800233c <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 8003c08:	f107 0320 	add.w	r3, r7, #32
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f9c5 	bl	8003f9c <updateNuke>
					checkIfDead(&gameState);
 8003c12:	f107 0320 	add.w	r3, r7, #32
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fe1f 	bl	800385a <checkIfDead>
					drawScreen(&gameState);
 8003c1c:	f107 0320 	add.w	r3, r7, #32
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fdfb 	bl	800381c <drawScreen>
					frameLastUpdated=runtime;
 8003c26:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <main+0x390>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(gameState.activeScreen==1){
 8003c2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d0a7      	beq.n	8003b84 <main+0x270>
				}
		}
			break;
 8003c34:	e05e      	b.n	8003cf4 <main+0x3e0>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8003c36:	f7fd fa93 	bl	8001160 <clrscr>
			drawWindow(0);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 f904 	bl	8003e48 <drawWindow>
			drawbackground(); // stars in background
 8003c40:	f7fe fc83 	bl	800254a <drawbackground>
			drawHelpScreen();
 8003c44:	f000 f8ea 	bl	8003e1c <drawHelpScreen>
			while(gameState.activeScreen==2){
 8003c48:	e00c      	b.n	8003c64 <main+0x350>
				readInput(&gameState);
 8003c4a:	f107 0320 	add.w	r3, r7, #32
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fe16 	bl	8003880 <readInput>
				if(centerIsPressed()){
 8003c54:	f7fd febc 	bl	80019d0 <centerIsPressed>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <main+0x350>
					gameState.activeScreen=0;//MENU SCREEN
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 8003c64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d0ee      	beq.n	8003c4a <main+0x336>
				}
			}
			break;
 8003c6c:	e042      	b.n	8003cf4 <main+0x3e0>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8003c6e:	f7fd fa77 	bl	8001160 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 8003c72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c76:	4619      	mov	r1, r3
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <main+0x394>)
 8003c7a:	f000 ff35 	bl	8004ae8 <iprintf>
			while(gameState.activeScreen==3){
 8003c7e:	e027      	b.n	8003cd0 <main+0x3bc>
 8003c80:	08005e00 	.word	0x08005e00
 8003c84:	08005e08 	.word	0x08005e08
 8003c88:	08005e10 	.word	0x08005e10
 8003c8c:	08005dac 	.word	0x08005dac
 8003c90:	55555556 	.word	0x55555556
 8003c94:	08005d5c 	.word	0x08005d5c
 8003c98:	08005d64 	.word	0x08005d64
 8003c9c:	08005d6c 	.word	0x08005d6c
 8003ca0:	08005d74 	.word	0x08005d74
 8003ca4:	200001c8 	.word	0x200001c8
 8003ca8:	08005d80 	.word	0x08005d80
				readInput(&gameState);
 8003cac:	f107 0320 	add.w	r3, r7, #32
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fde5 	bl	8003880 <readInput>
				if(centerIsPressed()){
 8003cb6:	f7fd fe8b 	bl	80019d0 <centerIsPressed>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <main+0x3bc>
					initVariables(&gameState);
 8003cc0:	f107 0320 	add.w	r3, r7, #32
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fd29 	bl	800371c <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8003cd0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d0e9      	beq.n	8003cac <main+0x398>
				}
			}
			break;
 8003cd8:	e00c      	b.n	8003cf4 <main+0x3e0>
		case 4:
			readInput(&gameState);
 8003cda:	f107 0320 	add.w	r3, r7, #32
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fdce 	bl	8003880 <readInput>
			gotoxy(0,0);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fd fa4a 	bl	8001180 <gotoxy>
			printf("Noget meget vigtigt!");
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <main+0x3e4>)
 8003cee:	f000 fefb 	bl	8004ae8 <iprintf>
			break;
 8003cf2:	bf00      	nop
		switch(gameState.activeScreen){
 8003cf4:	e64b      	b.n	800398e <main+0x7a>
 8003cf6:	bf00      	nop
 8003cf8:	08005d44 	.word	0x08005d44

08003cfc <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	463b      	mov	r3, r7
 8003d04:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fa60 	bl	80001d0 <strlen>
 8003d10:	4603      	mov	r3, r0
 8003d12:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003d14:	783b      	ldrb	r3, [r7, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	783b      	ldrb	r3, [r7, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	1d5a      	adds	r2, r3, #5
 8003d26:	787b      	ldrb	r3, [r7, #1]
 8003d28:	3302      	adds	r3, #2
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	9100      	str	r1, [sp, #0]
 8003d2e:	4621      	mov	r1, r4
 8003d30:	f7fd fa38 	bl	80011a4 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8003d34:	783b      	ldrb	r3, [r7, #0]
 8003d36:	3303      	adds	r3, #3
 8003d38:	787a      	ldrb	r2, [r7, #1]
 8003d3a:	3201      	adds	r2, #1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fa1e 	bl	8001180 <gotoxy>
	printf(btn.text);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fece 	bl	8004ae8 <iprintf>
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd90      	pop	{r4, r7, pc}

08003d54 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fa34 	bl	80001d0 <strlen>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8003d6c:	783b      	ldrb	r3, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	461c      	mov	r4, r3
 8003d74:	783b      	ldrb	r3, [r7, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	1d5a      	adds	r2, r3, #5
 8003d7e:	787b      	ldrb	r3, [r7, #1]
 8003d80:	3302      	adds	r3, #2
 8003d82:	2101      	movs	r1, #1
 8003d84:	9100      	str	r1, [sp, #0]
 8003d86:	4621      	mov	r1, r4
 8003d88:	f7fd fa0c 	bl	80011a4 <drawBox>
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fa14 	bl	80001d0 <strlen>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8003dac:	783b      	ldrb	r3, [r7, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	461c      	mov	r4, r3
 8003db4:	783b      	ldrb	r3, [r7, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	1d5a      	adds	r2, r3, #5
 8003dbe:	787b      	ldrb	r3, [r7, #1]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	9100      	str	r1, [sp, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	f7fd f9ec 	bl	80011a4 <drawBox>
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}

08003dd4 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003de4:	f7ff ff8a 	bl	8003cfc <drawButton>
	drawButton(btnList[1]);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3308      	adds	r3, #8
 8003dec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003df0:	f7ff ff84 	bl	8003cfc <drawButton>
	drawButton(btnList[2]);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3310      	adds	r3, #16
 8003df8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003dfc:	f7ff ff7e 	bl	8003cfc <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e10:	f7ff ffa0 	bl	8003d54 <drawBtnAsSelected>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <drawHelpScreen>:


void drawHelpScreen(){
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8003e20:	2105      	movs	r1, #5
 8003e22:	2046      	movs	r0, #70	; 0x46
 8003e24:	f7fd f9ac 	bl	8001180 <gotoxy>
	printf("HELP SCREEN");
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <drawHelpScreen+0x24>)
 8003e2a:	f000 fe5d 	bl	8004ae8 <iprintf>
	gotoxy(60,7);
 8003e2e:	2107      	movs	r1, #7
 8003e30:	203c      	movs	r0, #60	; 0x3c
 8003e32:	f7fd f9a5 	bl	8001180 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8003e36:	4803      	ldr	r0, [pc, #12]	; (8003e44 <drawHelpScreen+0x28>)
 8003e38:	f000 fe56 	bl	8004ae8 <iprintf>

}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08005dd4 	.word	0x08005dd4
 8003e44:	08005de0 	.word	0x08005de0

08003e48 <drawWindow>:

void drawWindow(uint8_t isGameWindow){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
	drawBox(1,1,screenWidth, screenHeight,0);
 8003e52:	2300      	movs	r3, #0
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	232b      	movs	r3, #43	; 0x2b
 8003e58:	229c      	movs	r2, #156	; 0x9c
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7fd f9a1 	bl	80011a4 <drawBox>
	if(isGameWindow){//bottom line is deleted
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d039      	beq.n	8003edc <drawWindow+0x94>
		gotoxy(1,screenHeight-1);
 8003e68:	212a      	movs	r1, #42	; 0x2a
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f7fd f988 	bl	8001180 <gotoxy>
		printf(" ");
 8003e70:	2020      	movs	r0, #32
 8003e72:	f000 fe51 	bl	8004b18 <putchar>
		gotoxy(1,screenHeight-2);
 8003e76:	2129      	movs	r1, #41	; 0x29
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f7fd f981 	bl	8001180 <gotoxy>
		printf(" ");
 8003e7e:	2020      	movs	r0, #32
 8003e80:	f000 fe4a 	bl	8004b18 <putchar>
		gotoxy(1,screenHeight-3);
 8003e84:	2128      	movs	r1, #40	; 0x28
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7fd f97a 	bl	8001180 <gotoxy>
		printf(" ");
 8003e8c:	2020      	movs	r0, #32
 8003e8e:	f000 fe43 	bl	8004b18 <putchar>
		gotoxy(screenWidth,screenHeight-1);
 8003e92:	212a      	movs	r1, #42	; 0x2a
 8003e94:	209c      	movs	r0, #156	; 0x9c
 8003e96:	f7fd f973 	bl	8001180 <gotoxy>
		printf(" ");
 8003e9a:	2020      	movs	r0, #32
 8003e9c:	f000 fe3c 	bl	8004b18 <putchar>
		gotoxy(screenWidth,screenHeight-2);
 8003ea0:	2129      	movs	r1, #41	; 0x29
 8003ea2:	209c      	movs	r0, #156	; 0x9c
 8003ea4:	f7fd f96c 	bl	8001180 <gotoxy>
		printf(" ");
 8003ea8:	2020      	movs	r0, #32
 8003eaa:	f000 fe35 	bl	8004b18 <putchar>
		gotoxy(screenWidth,screenHeight-3);
 8003eae:	2128      	movs	r1, #40	; 0x28
 8003eb0:	209c      	movs	r0, #156	; 0x9c
 8003eb2:	f7fd f965 	bl	8001180 <gotoxy>
		printf(" ");
 8003eb6:	2020      	movs	r0, #32
 8003eb8:	f000 fe2e 	bl	8004b18 <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e009      	b.n	8003ed6 <drawWindow+0x8e>
			gotoxy(x, screenHeight);
 8003ec2:	212b      	movs	r1, #43	; 0x2b
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7fd f95b 	bl	8001180 <gotoxy>
			printf(" ");
 8003eca:	2020      	movs	r0, #32
 8003ecc:	f000 fe24 	bl	8004b18 <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b9c      	cmp	r3, #156	; 0x9c
 8003eda:	ddf2      	ble.n	8003ec2 <drawWindow+0x7a>

		}
	}
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <chargeNuke>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"nuke.h"

void chargeNuke(gameState_t* gameState){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->readyState == 1){
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	7c5b      	ldrb	r3, [r3, #17]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d04a      	beq.n	8003f8c <chargeNuke+0xa8>
		return;
	}
	uint8_t color[] = {1,0,0};
 8003ef6:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <chargeNuke+0xb0>)
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	4611      	mov	r1, r2
 8003f00:	8019      	strh	r1, [r3, #0]
 8003f02:	3302      	adds	r3, #2
 8003f04:	0c12      	lsrs	r2, r2, #16
 8003f06:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8003f08:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <chargeNuke+0xb4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f10:	7c92      	ldrb	r2, [r2, #18]
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f18:	d90a      	bls.n	8003f30 <chargeNuke+0x4c>
		color[0] = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f87e 	bl	800202c <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <chargeNuke+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f38:	7c92      	ldrb	r2, [r2, #18]
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f40:	d90a      	bls.n	8003f58 <chargeNuke+0x74>
		color[0] = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f86a 	bl	800202c <RGBColor>
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <chargeNuke+0xb4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f60:	7c92      	ldrb	r2, [r2, #18]
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d910      	bls.n	8003f8e <chargeNuke+0xaa>
		color[0] = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73bb      	strb	r3, [r7, #14]
		RGBColor(color);
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe f855 	bl	800202c <RGBColor>
		gameState->nuke->readyState = 1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2201      	movs	r2, #1
 8003f88:	745a      	strb	r2, [r3, #17]
 8003f8a:	e000      	b.n	8003f8e <chargeNuke+0xaa>
		return;
 8003f8c:	bf00      	nop
	}
}
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	08005dfc 	.word	0x08005dfc
 8003f98:	200001c8 	.word	0x200001c8

08003f9c <updateNuke>:

void shootNuke(gameState_t* gameState){

}

void updateNuke(gameState_t* gameState){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff9d 	bl	8003ee4 <chargeNuke>

}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <spawnPowerup>:
 *      Author: david
 */
#include "powerup.h"
#define spawnPeriod 600

void spawnPowerup(gameState_t* gameState){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <spawnPowerup+0xbc>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003fca:	d34d      	bcc.n	8004068 <spawnPowerup+0xb4>



		gameState->powerup.lastUseTime=runtime;
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <spawnPowerup+0xbc>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	659a      	str	r2, [r3, #88]	; 0x58
		gameState->powerup.isVisible=1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		uint8_t randomX;
				while(!xValIsValid(randomX, 5)){
 8003fdc:	e00f      	b.n	8003ffe <spawnPowerup+0x4a>
					randomX = (rand() % 147) + 1;
 8003fde:	f000 fddf 	bl	8004ba0 <rand>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a23      	ldr	r2, [pc, #140]	; (8004074 <spawnPowerup+0xc0>)
 8003fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8003fea:	1191      	asrs	r1, r2, #6
 8003fec:	17da      	asrs	r2, r3, #31
 8003fee:	1a8a      	subs	r2, r1, r2
 8003ff0:	2193      	movs	r1, #147	; 0x93
 8003ff2:	fb01 f202 	mul.w	r2, r1, r2
 8003ff6:	1a9a      	subs	r2, r3, r2
 8003ff8:	b2d3      	uxtb	r3, r2
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	77fb      	strb	r3, [r7, #31]
				while(!xValIsValid(randomX, 5)){
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	2105      	movs	r1, #5
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe f85a 	bl	80020bc <xValIsValid>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0e7      	beq.n	8003fde <spawnPowerup+0x2a>
				}

		position_t spawnPos = {intToFp(randomX), intToFp(2)*yScale};
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	b29b      	uxth	r3, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe f9e5 	bl	80023e2 <intToFp>
 8004018:	4603      	mov	r3, r0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	2002      	movs	r0, #2
 800401e:	f7fe f9e0 	bl	80023e2 <intToFp>
 8004022:	4603      	mov	r3, r0
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	61bb      	str	r3, [r7, #24]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 8004028:	2000      	movs	r0, #0
 800402a:	f7fe f9da 	bl	80023e2 <intToFp>
 800402e:	4603      	mov	r3, r0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004036:	613b      	str	r3, [r7, #16]
		gameState->powerup.position=spawnPos;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3340      	adds	r3, #64	; 0x40
 800403c:	f107 0214 	add.w	r2, r7, #20
 8004040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004044:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3348      	adds	r3, #72	; 0x48
 800404c:	f107 0214 	add.w	r2, r7, #20
 8004050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004054:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3350      	adds	r3, #80	; 0x50
 800405c:	f107 020c 	add.w	r2, r7, #12
 8004060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004064:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8004068:	bf00      	nop
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200001c8 	.word	0x200001c8
 8004074:	6f74ae27 	.word	0x6f74ae27

08004078 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80cc 	beq.w	8004224 <updatePowerup+0x1ac>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	649a      	str	r2, [r3, #72]	; 0x48
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	64da      	str	r2, [r3, #76]	; 0x4c


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale-3){
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe f9ad 	bl	800240c <fpToInt>
 80040b2:	4603      	mov	r3, r0
 80040b4:	0fda      	lsrs	r2, r3, #31
 80040b6:	4413      	add	r3, r2
 80040b8:	105b      	asrs	r3, r3, #1
 80040ba:	461c      	mov	r4, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe f9a3 	bl	800240c <fpToInt>
 80040c6:	4603      	mov	r3, r0
 80040c8:	0fda      	lsrs	r2, r3, #31
 80040ca:	4413      	add	r3, r2
 80040cc:	105b      	asrs	r3, r3, #1
 80040ce:	3b03      	subs	r3, #3
 80040d0:	429c      	cmp	r4, r3
 80040d2:	db79      	blt.n	80041c8 <updatePowerup+0x150>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7f1b      	ldrb	r3, [r3, #28]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d125      	bne.n	8004128 <updatePowerup+0xb0>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe f993 	bl	800240c <fpToInt>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f103 0408 	add.w	r4, r3, #8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f98b 	bl	800240c <fpToInt>
 80040f6:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 80040f8:	429c      	cmp	r4, r3
 80040fa:	db12      	blt.n	8004122 <updatePowerup+0xaa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe f983 	bl	800240c <fpToInt>
 8004106:	4603      	mov	r3, r0
 8004108:	f1a3 0408 	sub.w	r4, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe f97b 	bl	800240c <fpToInt>
 8004116:	4603      	mov	r3, r0
 8004118:	3304      	adds	r3, #4
 800411a:	429c      	cmp	r4, r3
 800411c:	dc01      	bgt.n	8004122 <updatePowerup+0xaa>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <updatePowerup+0xac>
 8004122:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	e029      	b.n	800417c <updatePowerup+0x104>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f96d 	bl	800240c <fpToInt>
 8004132:	4603      	mov	r3, r0
 8004134:	1c59      	adds	r1, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7f1b      	ldrb	r3, [r3, #28]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	18cc      	adds	r4, r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe f95f 	bl	800240c <fpToInt>
 800414e:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8004150:	429c      	cmp	r4, r3
 8004152:	db11      	blt.n	8004178 <updatePowerup+0x100>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe f957 	bl	800240c <fpToInt>
 800415e:	4603      	mov	r3, r0
 8004160:	1e5c      	subs	r4, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f950 	bl	800240c <fpToInt>
 800416c:	4603      	mov	r3, r0
 800416e:	3304      	adds	r3, #4
 8004170:	429c      	cmp	r4, r3
 8004172:	dc01      	bgt.n	8004178 <updatePowerup+0x100>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <updatePowerup+0x102>
 8004178:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 800417a:	73fb      	strb	r3, [r7, #15]

			}


			if(powerupIsTaken){
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d022      	beq.n	80041c8 <updatePowerup+0x150>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f940 	bl	800240c <fpToInt>
 800418c:	4603      	mov	r3, r0
 800418e:	b2dc      	uxtb	r4, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe f939 	bl	800240c <fpToInt>
 800419a:	4603      	mov	r3, r0
 800419c:	0fda      	lsrs	r2, r3, #31
 800419e:	4413      	add	r3, r2
 80041a0:	105b      	asrs	r3, r3, #1
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff f8ea 	bl	8003380 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7f1b      	ldrb	r3, [r3, #28]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d805      	bhi.n	80041c8 <updatePowerup+0x150>
					gameState->spaceship.numberOfParts++;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7f1b      	ldrb	r3, [r3, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	771a      	strb	r2, [r3, #28]
				} else {
					//TODO: tilføj point??
				}
			}
		}
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale+1){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe f91d 	bl	800240c <fpToInt>
 80041d2:	4603      	mov	r3, r0
 80041d4:	0fda      	lsrs	r2, r3, #31
 80041d6:	4413      	add	r3, r2
 80041d8:	105b      	asrs	r3, r3, #1
 80041da:	461c      	mov	r4, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe f913 	bl	800240c <fpToInt>
 80041e6:	4603      	mov	r3, r0
 80041e8:	0fda      	lsrs	r2, r3, #31
 80041ea:	4413      	add	r3, r2
 80041ec:	105b      	asrs	r3, r3, #1
 80041ee:	429c      	cmp	r4, r3
 80041f0:	da18      	bge.n	8004224 <updatePowerup+0x1ac>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe f908 	bl	800240c <fpToInt>
 80041fc:	4603      	mov	r3, r0
 80041fe:	b2dc      	uxtb	r4, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe f901 	bl	800240c <fpToInt>
 800420a:	4603      	mov	r3, r0
 800420c:	0fda      	lsrs	r2, r3, #31
 800420e:	4413      	add	r3, r2
 8004210:	105b      	asrs	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff f8b2 	bl	8003380 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
	}
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d031      	beq.n	80042a2 <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe f8e2 	bl	800240c <fpToInt>
 8004248:	4603      	mov	r3, r0
 800424a:	b2dc      	uxtb	r4, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe f8db 	bl	800240c <fpToInt>
 8004256:	4603      	mov	r3, r0
 8004258:	0fda      	lsrs	r2, r3, #31
 800425a:	4413      	add	r3, r2
 800425c:	105b      	asrs	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff f88c 	bl	8003380 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe f8cd 	bl	800240c <fpToInt>
 8004272:	4603      	mov	r3, r0
 8004274:	b2dc      	uxtb	r4, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f8c6 	bl	800240c <fpToInt>
 8004280:	4603      	mov	r3, r0
 8004282:	0fda      	lsrs	r2, r3, #31
 8004284:	4413      	add	r3, r2
 8004286:	105b      	asrs	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4619      	mov	r1, r3
 800428c:	4620      	mov	r0, r4
 800428e:	f7ff f8a3 	bl	80033d8 <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	3340      	adds	r3, #64	; 0x40
 8004298:	3248      	adds	r2, #72	; 0x48
 800429a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800429e:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}

080042aa <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 80042b2:	f7fd fdb1 	bl	8001e18 <readPotentiometer>
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe f890 	bl	80023e2 <intToFp>
 80042c2:	4604      	mov	r4, r0
 80042c4:	200d      	movs	r0, #13
 80042c6:	f7fe f88c 	bl	80023e2 <intToFp>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4619      	mov	r1, r3
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7fe f8de 	bl	8002490 <fpDivide>
 80042d4:	60f8      	str	r0, [r7, #12]


	if(gameState->spaceship.numberOfParts==1){
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7f1b      	ldrb	r3, [r3, #28]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d114      	bne.n	8004308 <updateSpaceship+0x5e>
		if(fpToInt(x) <= 2){
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7fe f894 	bl	800240c <fpToInt>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	dc03      	bgt.n	80042f2 <updateSpaceship+0x48>
			x = intToFp(3);
 80042ea:	2003      	movs	r0, #3
 80042ec:	f7fe f879 	bl	80023e2 <intToFp>
 80042f0:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155){
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7fe f88a 	bl	800240c <fpToInt>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b9a      	cmp	r3, #154	; 0x9a
 80042fc:	dd35      	ble.n	800436a <updateSpaceship+0xc0>
			x = intToFp(154);
 80042fe:	209a      	movs	r0, #154	; 0x9a
 8004300:	f7fe f86f 	bl	80023e2 <intToFp>
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	e030      	b.n	800436a <updateSpaceship+0xc0>
		}
	}

	else if(gameState->spaceship.numberOfParts==2){
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7f1b      	ldrb	r3, [r3, #28]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d114      	bne.n	800433a <updateSpaceship+0x90>
			if(fpToInt(x) <= 2){
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7fe f87b 	bl	800240c <fpToInt>
 8004316:	4603      	mov	r3, r0
 8004318:	2b02      	cmp	r3, #2
 800431a:	dc03      	bgt.n	8004324 <updateSpaceship+0x7a>
				x = intToFp(3);
 800431c:	2003      	movs	r0, #3
 800431e:	f7fe f860 	bl	80023e2 <intToFp>
 8004322:	60f8      	str	r0, [r7, #12]
			}
			if(fpToInt(x) >= 155-7){
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fe f871 	bl	800240c <fpToInt>
 800432a:	4603      	mov	r3, r0
 800432c:	2b93      	cmp	r3, #147	; 0x93
 800432e:	dd1c      	ble.n	800436a <updateSpaceship+0xc0>
				x = intToFp(154-7);
 8004330:	2093      	movs	r0, #147	; 0x93
 8004332:	f7fe f856 	bl	80023e2 <intToFp>
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	e017      	b.n	800436a <updateSpaceship+0xc0>
			}
		}
	else if(gameState->spaceship.numberOfParts==3){
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7f1b      	ldrb	r3, [r3, #28]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d113      	bne.n	800436a <updateSpaceship+0xc0>
				if(fpToInt(x) <= 2+7){
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7fe f862 	bl	800240c <fpToInt>
 8004348:	4603      	mov	r3, r0
 800434a:	2b09      	cmp	r3, #9
 800434c:	dc03      	bgt.n	8004356 <updateSpaceship+0xac>
					x = intToFp(3+7);
 800434e:	200a      	movs	r0, #10
 8004350:	f7fe f847 	bl	80023e2 <intToFp>
 8004354:	60f8      	str	r0, [r7, #12]
				}
				if(fpToInt(x) >= 155-7){
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7fe f858 	bl	800240c <fpToInt>
 800435c:	4603      	mov	r3, r0
 800435e:	2b93      	cmp	r3, #147	; 0x93
 8004360:	dd03      	ble.n	800436a <updateSpaceship+0xc0>
					x = intToFp(154-7);
 8004362:	2093      	movs	r0, #147	; 0x93
 8004364:	f7fe f83d 	bl	80023e2 <intToFp>
 8004368:	60f8      	str	r0, [r7, #12]
				}
			}


	gameState->spaceship.nextPosition.x = x;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	615a      	str	r2, [r3, #20]

}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}

08004378 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8004378:	b5b0      	push	{r4, r5, r7, lr}
 800437a:	b09e      	sub	sp, #120	; 0x78
 800437c:	af04      	add	r7, sp, #16
 800437e:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8004380:	f7fd fb26 	bl	80019d0 <centerIsPressed>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a9 	beq.w	80044de <shootSpaceship+0x166>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 800438c:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <shootSpaceship+0x170>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8004394:	2300      	movs	r3, #0
 8004396:	667b      	str	r3, [r7, #100]	; 0x64
 8004398:	e09a      	b.n	80044d0 <shootSpaceship+0x158>
			if(i ==2){
 800439a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439c:	2b02      	cmp	r3, #2
 800439e:	d147      	bne.n	8004430 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 80043a0:	2000      	movs	r0, #0
 80043a2:	f7fe f81e 	bl	80023e2 <intToFp>
 80043a6:	4603      	mov	r3, r0
 80043a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043aa:	4b50      	ldr	r3, [pc, #320]	; (80044ec <shootSpaceship+0x174>)
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68dc      	ldr	r4, [r3, #12]
 80043b2:	2007      	movs	r0, #7
 80043b4:	f7fe f815 	bl	80023e2 <intToFp>
 80043b8:	4603      	mov	r3, r0
 80043ba:	1ae3      	subs	r3, r4, r3
 80043bc:	657b      	str	r3, [r7, #84]	; 0x54
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691c      	ldr	r4, [r3, #16]
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fe f80d 	bl	80023e2 <intToFp>
 80043c8:	4603      	mov	r3, r0
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	1ae3      	subs	r3, r4, r3
 80043ce:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 80043d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	615a      	str	r2, [r3, #20]
 80043e2:	619a      	str	r2, [r3, #24]
 80043e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80043f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004400:	e883 0003 	stmia.w	r3, {r0, r1}
 8004404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004408:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800440c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004410:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8004414:	687d      	ldr	r5, [r7, #4]
 8004416:	466c      	mov	r4, sp
 8004418:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800441c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800441e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004422:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004428:	4628      	mov	r0, r5
 800442a:	f7ff f818 	bl	800345e <appendBullet>
 800442e:	e04c      	b.n	80044ca <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8004430:	2000      	movs	r0, #0
 8004432:	f7fd ffd6 	bl	80023e2 <intToFp>
 8004436:	4603      	mov	r3, r0
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <shootSpaceship+0x174>)
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68dc      	ldr	r4, [r3, #12]
 8004442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	00d2      	lsls	r2, r2, #3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd ffc7 	bl	80023e2 <intToFp>
 8004454:	4603      	mov	r3, r0
 8004456:	4423      	add	r3, r4
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691c      	ldr	r4, [r3, #16]
 800445e:	2001      	movs	r0, #1
 8004460:	f7fd ffbf 	bl	80023e2 <intToFp>
 8004464:	4603      	mov	r3, r0
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	1ae3      	subs	r3, r4, r3
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 800446c:	f107 030c 	add.w	r3, r7, #12
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
 800447c:	615a      	str	r2, [r3, #20]
 800447e:	619a      	str	r2, [r3, #24]
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800448c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800449c:	e883 0003 	stmia.w	r3, {r0, r1}
 80044a0:	f107 031c 	add.w	r3, r7, #28
 80044a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ac:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 80044b0:	687d      	ldr	r5, [r7, #4]
 80044b2:	466c      	mov	r4, sp
 80044b4:	f107 0318 	add.w	r3, r7, #24
 80044b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7fe ffca 	bl	800345e <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80044ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044cc:	3301      	adds	r3, #1
 80044ce:	667b      	str	r3, [r7, #100]	; 0x64
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7f1b      	ldrb	r3, [r3, #28]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d8:	4293      	cmp	r3, r2
 80044da:	f6ff af5e 	blt.w	800439a <shootSpaceship+0x22>
		}


	}

}
 80044de:	bf00      	nop
 80044e0:	3768      	adds	r7, #104	; 0x68
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bdb0      	pop	{r4, r5, r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200001c8 	.word	0x200001c8
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd ff85 	bl	800240c <fpToInt>
 8004502:	4603      	mov	r3, r0
 8004504:	b2dc      	uxtb	r4, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd ff7e 	bl	800240c <fpToInt>
 8004510:	4603      	mov	r3, r0
 8004512:	0fda      	lsrs	r2, r3, #31
 8004514:	4413      	add	r3, r2
 8004516:	105b      	asrs	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	4620      	mov	r0, r4
 800451e:	f7fe ff0d 	bl	800333c <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd ff70 	bl	800240c <fpToInt>
 800452c:	4603      	mov	r3, r0
 800452e:	b2dc      	uxtb	r4, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd ff69 	bl	800240c <fpToInt>
 800453a:	4603      	mov	r3, r0
 800453c:	0fda      	lsrs	r2, r3, #31
 800453e:	4413      	add	r3, r2
 8004540:	105b      	asrs	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	4620      	mov	r0, r4
 8004548:	f7fe fed6 	bl	80032f8 <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e06e      	b.n	8004630 <drawSpaceship+0x140>

		if(i == 2){
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d12e      	bne.n	80045b6 <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd ff55 	bl	800240c <fpToInt>
 8004562:	4603      	mov	r3, r0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	3b07      	subs	r3, #7
 8004568:	b2dc      	uxtb	r4, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd ff4c 	bl	800240c <fpToInt>
 8004574:	4603      	mov	r3, r0
 8004576:	0fda      	lsrs	r2, r3, #31
 8004578:	4413      	add	r3, r2
 800457a:	105b      	asrs	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	4619      	mov	r1, r3
 8004580:	4620      	mov	r0, r4
 8004582:	f7fe fe70 	bl	8003266 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd ff3e 	bl	800240c <fpToInt>
 8004590:	4603      	mov	r3, r0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3b07      	subs	r3, #7
 8004596:	b2dc      	uxtb	r4, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd ff35 	bl	800240c <fpToInt>
 80045a2:	4603      	mov	r3, r0
 80045a4:	0fda      	lsrs	r2, r3, #31
 80045a6:	4413      	add	r3, r2
 80045a8:	105b      	asrs	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7fe fe10 	bl	80031d4 <drawMe>
 80045b4:	e039      	b.n	800462a <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd ff26 	bl	800240c <fpToInt>
 80045c0:	4603      	mov	r3, r0
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	00c9      	lsls	r1, r1, #3
 80045cc:	1acb      	subs	r3, r1, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	b2dc      	uxtb	r4, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd ff17 	bl	800240c <fpToInt>
 80045de:	4603      	mov	r3, r0
 80045e0:	0fda      	lsrs	r2, r3, #31
 80045e2:	4413      	add	r3, r2
 80045e4:	105b      	asrs	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7fe fe3b 	bl	8003266 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd ff09 	bl	800240c <fpToInt>
 80045fa:	4603      	mov	r3, r0
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	00c9      	lsls	r1, r1, #3
 8004606:	1acb      	subs	r3, r1, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	4413      	add	r3, r2
 800460c:	b2dc      	uxtb	r4, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fefa 	bl	800240c <fpToInt>
 8004618:	4603      	mov	r3, r0
 800461a:	0fda      	lsrs	r2, r3, #31
 800461c:	4413      	add	r3, r2
 800461e:	105b      	asrs	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	4620      	mov	r0, r4
 8004626:	f7fe fdd5 	bl	80031d4 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7f1b      	ldrb	r3, [r3, #28]
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4293      	cmp	r3, r2
 800463a:	db8a      	blt.n	8004552 <drawSpaceship+0x62>

	}



	gameState->spaceship.position=gameState->spaceship.nextPosition;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	330c      	adds	r3, #12
 8004642:	3214      	adds	r2, #20
 8004644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004648:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}

08004654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
	return 1;
 8004658:	2301      	movs	r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <_kill>:

int _kill(int pid, int sig)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800466e:	f000 f94f 	bl	8004910 <__errno>
 8004672:	4603      	mov	r3, r0
 8004674:	2216      	movs	r2, #22
 8004676:	601a      	str	r2, [r3, #0]
	return -1;
 8004678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_exit>:

void _exit (int status)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800468c:	f04f 31ff 	mov.w	r1, #4294967295
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ffe7 	bl	8004664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004696:	e7fe      	b.n	8004696 <_exit+0x12>

08004698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e00a      	b.n	80046c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046aa:	f3af 8000 	nop.w
 80046ae:	4601      	mov	r1, r0
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	60ba      	str	r2, [r7, #8]
 80046b6:	b2ca      	uxtb	r2, r1
 80046b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	3301      	adds	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	dbf0      	blt.n	80046aa <_read+0x12>
	}

return len;
 80046c8:	687b      	ldr	r3, [r7, #4]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
	return -1;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046fa:	605a      	str	r2, [r3, #4]
	return 0;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <_isatty>:

int _isatty(int file)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
	return 1;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
	return 0;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <_sbrk+0x50>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <_sbrk+0x16>
		heap_end = &end;
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <_sbrk+0x50>)
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <_sbrk+0x54>)
 8004750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <_sbrk+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <_sbrk+0x50>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	466a      	mov	r2, sp
 8004762:	4293      	cmp	r3, r2
 8004764:	d907      	bls.n	8004776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004766:	f000 f8d3 	bl	8004910 <__errno>
 800476a:	4603      	mov	r3, r0
 800476c:	220c      	movs	r2, #12
 800476e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	e006      	b.n	8004784 <_sbrk+0x48>
	}

	heap_end += incr;
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <_sbrk+0x50>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	4a03      	ldr	r2, [pc, #12]	; (800478c <_sbrk+0x50>)
 8004780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200001bc 	.word	0x200001bc
 8004790:	200001e0 	.word	0x200001e0

08004794 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <SystemInit+0x84>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <SystemInit+0x84>)
 80047a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <SystemInit+0x88>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <SystemInit+0x88>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <SystemInit+0x88>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4918      	ldr	r1, [pc, #96]	; (800481c <SystemInit+0x88>)
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <SystemInit+0x8c>)
 80047bc:	4013      	ands	r3, r2
 80047be:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <SystemInit+0x88>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <SystemInit+0x88>)
 80047c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80047ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <SystemInit+0x88>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a11      	ldr	r2, [pc, #68]	; (800481c <SystemInit+0x88>)
 80047d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <SystemInit+0x88>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a0e      	ldr	r2, [pc, #56]	; (800481c <SystemInit+0x88>)
 80047e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80047e6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <SystemInit+0x88>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <SystemInit+0x88>)
 80047ee:	f023 030f 	bic.w	r3, r3, #15
 80047f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <SystemInit+0x88>)
 80047f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f8:	4908      	ldr	r1, [pc, #32]	; (800481c <SystemInit+0x88>)
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <SystemInit+0x90>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <SystemInit+0x88>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004806:	f000 f80f 	bl	8004828 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800480a:	4b03      	ldr	r3, [pc, #12]	; (8004818 <SystemInit+0x84>)
 800480c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004810:	609a      	str	r2, [r3, #8]
#endif  
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed00 	.word	0xe000ed00
 800481c:	40021000 	.word	0x40021000
 8004820:	f87fc00c 	.word	0xf87fc00c
 8004824:	ff00fccc 	.word	0xff00fccc

08004828 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <SetSysClock+0x8c>)
 800482e:	2212      	movs	r2, #18
 8004830:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <SetSysClock+0x90>)
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <SetSysClock+0x90>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800483a:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <SetSysClock+0x90>)
 800483c:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <SetSysClock+0x90>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <SetSysClock+0x90>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <SetSysClock+0x90>)
 8004848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800484c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <SetSysClock+0x90>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <SetSysClock+0x90>)
 8004854:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004858:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <SetSysClock+0x90>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <SetSysClock+0x90>)
 8004860:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8004864:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <SetSysClock+0x90>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <SetSysClock+0x90>)
 800486c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004870:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004872:	bf00      	nop
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <SetSysClock+0x90>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f9      	beq.n	8004874 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <SetSysClock+0x90>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <SetSysClock+0x90>)
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <SetSysClock+0x90>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <SetSysClock+0x90>)
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8004898:	bf00      	nop
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <SetSysClock+0x90>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d1f9      	bne.n	800489a <SetSysClock+0x72>
  {
  }
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40021000 	.word	0x40021000

080048bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80048c2:	490e      	ldr	r1, [pc, #56]	; (80048fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <LoopForever+0xe>)
  movs r3, #0
 80048c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048c8:	e002      	b.n	80048d0 <LoopCopyDataInit>

080048ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ce:	3304      	adds	r3, #4

080048d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d4:	d3f9      	bcc.n	80048ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048d6:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048d8:	4c0b      	ldr	r4, [pc, #44]	; (8004908 <LoopForever+0x16>)
  movs r3, #0
 80048da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048dc:	e001      	b.n	80048e2 <LoopFillZerobss>

080048de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e0:	3204      	adds	r2, #4

080048e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e4:	d3fb      	bcc.n	80048de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80048e6:	f7ff ff55 	bl	8004794 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80048ea:	f000 f817 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048ee:	f7ff f811 	bl	8003914 <main>

080048f2 <LoopForever>:

LoopForever:
    b LoopForever
 80048f2:	e7fe      	b.n	80048f2 <LoopForever>
  ldr   r0, =_estack
 80048f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80048f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048fc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8004900:	08005f74 	.word	0x08005f74
  ldr r2, =_sbss
 8004904:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004908:	200001dc 	.word	0x200001dc

0800490c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800490c:	e7fe      	b.n	800490c <ADC1_2_IRQHandler>
	...

08004910 <__errno>:
 8004910:	4b01      	ldr	r3, [pc, #4]	; (8004918 <__errno+0x8>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	2000002c 	.word	0x2000002c

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4d0d      	ldr	r5, [pc, #52]	; (8004954 <__libc_init_array+0x38>)
 8004920:	4c0d      	ldr	r4, [pc, #52]	; (8004958 <__libc_init_array+0x3c>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	2600      	movs	r6, #0
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	4d0b      	ldr	r5, [pc, #44]	; (800495c <__libc_init_array+0x40>)
 800492e:	4c0c      	ldr	r4, [pc, #48]	; (8004960 <__libc_init_array+0x44>)
 8004930:	f001 f98a 	bl	8005c48 <_init>
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	2600      	movs	r6, #0
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	08005f6c 	.word	0x08005f6c
 8004958:	08005f6c 	.word	0x08005f6c
 800495c:	08005f6c 	.word	0x08005f6c
 8004960:	08005f70 	.word	0x08005f70

08004964 <malloc>:
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <malloc+0xc>)
 8004966:	4601      	mov	r1, r0
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f000 b863 	b.w	8004a34 <_malloc_r>
 800496e:	bf00      	nop
 8004970:	2000002c 	.word	0x2000002c

08004974 <free>:
 8004974:	4b02      	ldr	r3, [pc, #8]	; (8004980 <free+0xc>)
 8004976:	4601      	mov	r1, r0
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f000 b80b 	b.w	8004994 <_free_r>
 800497e:	bf00      	nop
 8004980:	2000002c 	.word	0x2000002c

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <_free_r>:
 8004994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004996:	2900      	cmp	r1, #0
 8004998:	d048      	beq.n	8004a2c <_free_r+0x98>
 800499a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499e:	9001      	str	r0, [sp, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f1a1 0404 	sub.w	r4, r1, #4
 80049a6:	bfb8      	it	lt
 80049a8:	18e4      	addlt	r4, r4, r3
 80049aa:	f000 fc65 	bl	8005278 <__malloc_lock>
 80049ae:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <_free_r+0x9c>)
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	4615      	mov	r5, r2
 80049b6:	b933      	cbnz	r3, 80049c6 <_free_r+0x32>
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	6014      	str	r4, [r2, #0]
 80049bc:	b003      	add	sp, #12
 80049be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049c2:	f000 bc5f 	b.w	8005284 <__malloc_unlock>
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	d90b      	bls.n	80049e2 <_free_r+0x4e>
 80049ca:	6821      	ldr	r1, [r4, #0]
 80049cc:	1862      	adds	r2, r4, r1
 80049ce:	4293      	cmp	r3, r2
 80049d0:	bf04      	itt	eq
 80049d2:	681a      	ldreq	r2, [r3, #0]
 80049d4:	685b      	ldreq	r3, [r3, #4]
 80049d6:	6063      	str	r3, [r4, #4]
 80049d8:	bf04      	itt	eq
 80049da:	1852      	addeq	r2, r2, r1
 80049dc:	6022      	streq	r2, [r4, #0]
 80049de:	602c      	str	r4, [r5, #0]
 80049e0:	e7ec      	b.n	80049bc <_free_r+0x28>
 80049e2:	461a      	mov	r2, r3
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	b10b      	cbz	r3, 80049ec <_free_r+0x58>
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	d9fa      	bls.n	80049e2 <_free_r+0x4e>
 80049ec:	6811      	ldr	r1, [r2, #0]
 80049ee:	1855      	adds	r5, r2, r1
 80049f0:	42a5      	cmp	r5, r4
 80049f2:	d10b      	bne.n	8004a0c <_free_r+0x78>
 80049f4:	6824      	ldr	r4, [r4, #0]
 80049f6:	4421      	add	r1, r4
 80049f8:	1854      	adds	r4, r2, r1
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	6011      	str	r1, [r2, #0]
 80049fe:	d1dd      	bne.n	80049bc <_free_r+0x28>
 8004a00:	681c      	ldr	r4, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	6053      	str	r3, [r2, #4]
 8004a06:	4421      	add	r1, r4
 8004a08:	6011      	str	r1, [r2, #0]
 8004a0a:	e7d7      	b.n	80049bc <_free_r+0x28>
 8004a0c:	d902      	bls.n	8004a14 <_free_r+0x80>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	6003      	str	r3, [r0, #0]
 8004a12:	e7d3      	b.n	80049bc <_free_r+0x28>
 8004a14:	6825      	ldr	r5, [r4, #0]
 8004a16:	1961      	adds	r1, r4, r5
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	bf04      	itt	eq
 8004a1c:	6819      	ldreq	r1, [r3, #0]
 8004a1e:	685b      	ldreq	r3, [r3, #4]
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	bf04      	itt	eq
 8004a24:	1949      	addeq	r1, r1, r5
 8004a26:	6021      	streq	r1, [r4, #0]
 8004a28:	6054      	str	r4, [r2, #4]
 8004a2a:	e7c7      	b.n	80049bc <_free_r+0x28>
 8004a2c:	b003      	add	sp, #12
 8004a2e:	bd30      	pop	{r4, r5, pc}
 8004a30:	200001c0 	.word	0x200001c0

08004a34 <_malloc_r>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	1ccd      	adds	r5, r1, #3
 8004a38:	f025 0503 	bic.w	r5, r5, #3
 8004a3c:	3508      	adds	r5, #8
 8004a3e:	2d0c      	cmp	r5, #12
 8004a40:	bf38      	it	cc
 8004a42:	250c      	movcc	r5, #12
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	4606      	mov	r6, r0
 8004a48:	db01      	blt.n	8004a4e <_malloc_r+0x1a>
 8004a4a:	42a9      	cmp	r1, r5
 8004a4c:	d903      	bls.n	8004a56 <_malloc_r+0x22>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	2000      	movs	r0, #0
 8004a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a56:	f000 fc0f 	bl	8005278 <__malloc_lock>
 8004a5a:	4921      	ldr	r1, [pc, #132]	; (8004ae0 <_malloc_r+0xac>)
 8004a5c:	680a      	ldr	r2, [r1, #0]
 8004a5e:	4614      	mov	r4, r2
 8004a60:	b99c      	cbnz	r4, 8004a8a <_malloc_r+0x56>
 8004a62:	4f20      	ldr	r7, [pc, #128]	; (8004ae4 <_malloc_r+0xb0>)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b923      	cbnz	r3, 8004a72 <_malloc_r+0x3e>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f8d8 	bl	8004c20 <_sbrk_r>
 8004a70:	6038      	str	r0, [r7, #0]
 8004a72:	4629      	mov	r1, r5
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f8d3 	bl	8004c20 <_sbrk_r>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	d123      	bne.n	8004ac6 <_malloc_r+0x92>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 fbfe 	bl	8005284 <__malloc_unlock>
 8004a88:	e7e3      	b.n	8004a52 <_malloc_r+0x1e>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	1b5b      	subs	r3, r3, r5
 8004a8e:	d417      	bmi.n	8004ac0 <_malloc_r+0x8c>
 8004a90:	2b0b      	cmp	r3, #11
 8004a92:	d903      	bls.n	8004a9c <_malloc_r+0x68>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	441c      	add	r4, r3
 8004a98:	6025      	str	r5, [r4, #0]
 8004a9a:	e004      	b.n	8004aa6 <_malloc_r+0x72>
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	42a2      	cmp	r2, r4
 8004aa0:	bf0c      	ite	eq
 8004aa2:	600b      	streq	r3, [r1, #0]
 8004aa4:	6053      	strne	r3, [r2, #4]
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f000 fbec 	bl	8005284 <__malloc_unlock>
 8004aac:	f104 000b 	add.w	r0, r4, #11
 8004ab0:	1d23      	adds	r3, r4, #4
 8004ab2:	f020 0007 	bic.w	r0, r0, #7
 8004ab6:	1ac2      	subs	r2, r0, r3
 8004ab8:	d0cc      	beq.n	8004a54 <_malloc_r+0x20>
 8004aba:	1a1b      	subs	r3, r3, r0
 8004abc:	50a3      	str	r3, [r4, r2]
 8004abe:	e7c9      	b.n	8004a54 <_malloc_r+0x20>
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	6864      	ldr	r4, [r4, #4]
 8004ac4:	e7cc      	b.n	8004a60 <_malloc_r+0x2c>
 8004ac6:	1cc4      	adds	r4, r0, #3
 8004ac8:	f024 0403 	bic.w	r4, r4, #3
 8004acc:	42a0      	cmp	r0, r4
 8004ace:	d0e3      	beq.n	8004a98 <_malloc_r+0x64>
 8004ad0:	1a21      	subs	r1, r4, r0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f000 f8a4 	bl	8004c20 <_sbrk_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d1dd      	bne.n	8004a98 <_malloc_r+0x64>
 8004adc:	e7cf      	b.n	8004a7e <_malloc_r+0x4a>
 8004ade:	bf00      	nop
 8004ae0:	200001c0 	.word	0x200001c0
 8004ae4:	200001c4 	.word	0x200001c4

08004ae8 <iprintf>:
 8004ae8:	b40f      	push	{r0, r1, r2, r3}
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <iprintf+0x2c>)
 8004aec:	b513      	push	{r0, r1, r4, lr}
 8004aee:	681c      	ldr	r4, [r3, #0]
 8004af0:	b124      	cbz	r4, 8004afc <iprintf+0x14>
 8004af2:	69a3      	ldr	r3, [r4, #24]
 8004af4:	b913      	cbnz	r3, 8004afc <iprintf+0x14>
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 faa8 	bl	800504c <__sinit>
 8004afc:	ab05      	add	r3, sp, #20
 8004afe:	9a04      	ldr	r2, [sp, #16]
 8004b00:	68a1      	ldr	r1, [r4, #8]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 fbed 	bl	80052e4 <_vfiprintf_r>
 8004b0a:	b002      	add	sp, #8
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	b004      	add	sp, #16
 8004b12:	4770      	bx	lr
 8004b14:	2000002c 	.word	0x2000002c

08004b18 <putchar>:
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <putchar+0x28>)
 8004b1a:	b513      	push	{r0, r1, r4, lr}
 8004b1c:	681c      	ldr	r4, [r3, #0]
 8004b1e:	4601      	mov	r1, r0
 8004b20:	b134      	cbz	r4, 8004b30 <putchar+0x18>
 8004b22:	69a3      	ldr	r3, [r4, #24]
 8004b24:	b923      	cbnz	r3, 8004b30 <putchar+0x18>
 8004b26:	9001      	str	r0, [sp, #4]
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fa8f 	bl	800504c <__sinit>
 8004b2e:	9901      	ldr	r1, [sp, #4]
 8004b30:	68a2      	ldr	r2, [r4, #8]
 8004b32:	4620      	mov	r0, r4
 8004b34:	b002      	add	sp, #8
 8004b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3a:	f000 be97 	b.w	800586c <_putc_r>
 8004b3e:	bf00      	nop
 8004b40:	2000002c 	.word	0x2000002c

08004b44 <srand>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <srand+0x44>)
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	b9b3      	cbnz	r3, 8004b7e <srand+0x3a>
 8004b50:	2018      	movs	r0, #24
 8004b52:	f7ff ff07 	bl	8004964 <malloc>
 8004b56:	4602      	mov	r2, r0
 8004b58:	63a8      	str	r0, [r5, #56]	; 0x38
 8004b5a:	b920      	cbnz	r0, 8004b66 <srand+0x22>
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <srand+0x48>)
 8004b5e:	480c      	ldr	r0, [pc, #48]	; (8004b90 <srand+0x4c>)
 8004b60:	2142      	movs	r1, #66	; 0x42
 8004b62:	f000 f93b 	bl	8004ddc <__assert_func>
 8004b66:	490b      	ldr	r1, [pc, #44]	; (8004b94 <srand+0x50>)
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <srand+0x54>)
 8004b6a:	e9c0 1300 	strd	r1, r3, [r0]
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <srand+0x58>)
 8004b70:	6083      	str	r3, [r0, #8]
 8004b72:	230b      	movs	r3, #11
 8004b74:	8183      	strh	r3, [r0, #12]
 8004b76:	2100      	movs	r1, #0
 8004b78:	2001      	movs	r0, #1
 8004b7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004b7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004b80:	2200      	movs	r2, #0
 8004b82:	611c      	str	r4, [r3, #16]
 8004b84:	615a      	str	r2, [r3, #20]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	2000002c 	.word	0x2000002c
 8004b8c:	08005e1c 	.word	0x08005e1c
 8004b90:	08005e33 	.word	0x08005e33
 8004b94:	abcd330e 	.word	0xabcd330e
 8004b98:	e66d1234 	.word	0xe66d1234
 8004b9c:	0005deec 	.word	0x0005deec

08004ba0 <rand>:
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <rand+0x60>)
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	681c      	ldr	r4, [r3, #0]
 8004ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ba8:	b9b3      	cbnz	r3, 8004bd8 <rand+0x38>
 8004baa:	2018      	movs	r0, #24
 8004bac:	f7ff feda 	bl	8004964 <malloc>
 8004bb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8004bb2:	b928      	cbnz	r0, 8004bc0 <rand+0x20>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <rand+0x64>)
 8004bb8:	4813      	ldr	r0, [pc, #76]	; (8004c08 <rand+0x68>)
 8004bba:	214e      	movs	r1, #78	; 0x4e
 8004bbc:	f000 f90e 	bl	8004ddc <__assert_func>
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <rand+0x6c>)
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <rand+0x70>)
 8004bc4:	e9c0 2300 	strd	r2, r3, [r0]
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <rand+0x74>)
 8004bca:	6083      	str	r3, [r0, #8]
 8004bcc:	230b      	movs	r3, #11
 8004bce:	8183      	strh	r3, [r0, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004bd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bda:	480f      	ldr	r0, [pc, #60]	; (8004c18 <rand+0x78>)
 8004bdc:	690a      	ldr	r2, [r1, #16]
 8004bde:	694b      	ldr	r3, [r1, #20]
 8004be0:	4c0e      	ldr	r4, [pc, #56]	; (8004c1c <rand+0x7c>)
 8004be2:	4350      	muls	r0, r2
 8004be4:	fb04 0003 	mla	r0, r4, r3, r0
 8004be8:	fba2 3404 	umull	r3, r4, r2, r4
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	4404      	add	r4, r0
 8004bf0:	f144 0000 	adc.w	r0, r4, #0
 8004bf4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004bf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	bf00      	nop
 8004c00:	2000002c 	.word	0x2000002c
 8004c04:	08005e1c 	.word	0x08005e1c
 8004c08:	08005e33 	.word	0x08005e33
 8004c0c:	abcd330e 	.word	0xabcd330e
 8004c10:	e66d1234 	.word	0xe66d1234
 8004c14:	0005deec 	.word	0x0005deec
 8004c18:	5851f42d 	.word	0x5851f42d
 8004c1c:	4c957f2d 	.word	0x4c957f2d

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	; (8004c3c <_sbrk_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7ff fd86 	bl	800473c <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	200001d8 	.word	0x200001d8

08004c40 <setbuf>:
 8004c40:	2900      	cmp	r1, #0
 8004c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c46:	bf0c      	ite	eq
 8004c48:	2202      	moveq	r2, #2
 8004c4a:	2200      	movne	r2, #0
 8004c4c:	f000 b800 	b.w	8004c50 <setvbuf>

08004c50 <setvbuf>:
 8004c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c54:	461d      	mov	r5, r3
 8004c56:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <setvbuf+0x17c>)
 8004c58:	681f      	ldr	r7, [r3, #0]
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	4690      	mov	r8, r2
 8004c60:	b127      	cbz	r7, 8004c6c <setvbuf+0x1c>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	b913      	cbnz	r3, 8004c6c <setvbuf+0x1c>
 8004c66:	4638      	mov	r0, r7
 8004c68:	f000 f9f0 	bl	800504c <__sinit>
 8004c6c:	4b58      	ldr	r3, [pc, #352]	; (8004dd0 <setvbuf+0x180>)
 8004c6e:	429c      	cmp	r4, r3
 8004c70:	d167      	bne.n	8004d42 <setvbuf+0xf2>
 8004c72:	687c      	ldr	r4, [r7, #4]
 8004c74:	f1b8 0f02 	cmp.w	r8, #2
 8004c78:	d006      	beq.n	8004c88 <setvbuf+0x38>
 8004c7a:	f1b8 0f01 	cmp.w	r8, #1
 8004c7e:	f200 809f 	bhi.w	8004dc0 <setvbuf+0x170>
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	f2c0 809c 	blt.w	8004dc0 <setvbuf+0x170>
 8004c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c8a:	07db      	lsls	r3, r3, #31
 8004c8c:	d405      	bmi.n	8004c9a <setvbuf+0x4a>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	0598      	lsls	r0, r3, #22
 8004c92:	d402      	bmi.n	8004c9a <setvbuf+0x4a>
 8004c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c96:	f000 fa89 	bl	80051ac <__retarget_lock_acquire_recursive>
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f000 f941 	bl	8004f24 <_fflush_r>
 8004ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca4:	b141      	cbz	r1, 8004cb8 <setvbuf+0x68>
 8004ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d002      	beq.n	8004cb4 <setvbuf+0x64>
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f7ff fe70 	bl	8004994 <_free_r>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61a3      	str	r3, [r4, #24]
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	0619      	lsls	r1, r3, #24
 8004cc2:	d503      	bpl.n	8004ccc <setvbuf+0x7c>
 8004cc4:	6921      	ldr	r1, [r4, #16]
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff fe64 	bl	8004994 <_free_r>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f1b8 0f02 	cmp.w	r8, #2
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	d06c      	beq.n	8004db8 <setvbuf+0x168>
 8004cde:	ab01      	add	r3, sp, #4
 8004ce0:	466a      	mov	r2, sp
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f000 fa63 	bl	80051b0 <__swhatbuf_r>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	4318      	orrs	r0, r3
 8004cee:	81a0      	strh	r0, [r4, #12]
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d130      	bne.n	8004d56 <setvbuf+0x106>
 8004cf4:	9d00      	ldr	r5, [sp, #0]
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7ff fe34 	bl	8004964 <malloc>
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d155      	bne.n	8004dae <setvbuf+0x15e>
 8004d02:	f8dd 9000 	ldr.w	r9, [sp]
 8004d06:	45a9      	cmp	r9, r5
 8004d08:	d14a      	bne.n	8004da0 <setvbuf+0x150>
 8004d0a:	f04f 35ff 	mov.w	r5, #4294967295
 8004d0e:	2200      	movs	r2, #0
 8004d10:	60a2      	str	r2, [r4, #8]
 8004d12:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004d16:	6022      	str	r2, [r4, #0]
 8004d18:	6122      	str	r2, [r4, #16]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d20:	6162      	str	r2, [r4, #20]
 8004d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	07d2      	lsls	r2, r2, #31
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	d405      	bmi.n	8004d3a <setvbuf+0xea>
 8004d2e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d32:	d102      	bne.n	8004d3a <setvbuf+0xea>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f000 fa3a 	bl	80051ae <__retarget_lock_release_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	b003      	add	sp, #12
 8004d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <setvbuf+0x184>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	d101      	bne.n	8004d4c <setvbuf+0xfc>
 8004d48:	68bc      	ldr	r4, [r7, #8]
 8004d4a:	e793      	b.n	8004c74 <setvbuf+0x24>
 8004d4c:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <setvbuf+0x188>)
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	bf08      	it	eq
 8004d52:	68fc      	ldreq	r4, [r7, #12]
 8004d54:	e78e      	b.n	8004c74 <setvbuf+0x24>
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d0cd      	beq.n	8004cf6 <setvbuf+0xa6>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	b913      	cbnz	r3, 8004d64 <setvbuf+0x114>
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f000 f974 	bl	800504c <__sinit>
 8004d64:	f1b8 0f01 	cmp.w	r8, #1
 8004d68:	bf08      	it	eq
 8004d6a:	89a3      	ldrheq	r3, [r4, #12]
 8004d6c:	6026      	str	r6, [r4, #0]
 8004d6e:	bf04      	itt	eq
 8004d70:	f043 0301 	orreq.w	r3, r3, #1
 8004d74:	81a3      	strheq	r3, [r4, #12]
 8004d76:	89a2      	ldrh	r2, [r4, #12]
 8004d78:	f012 0308 	ands.w	r3, r2, #8
 8004d7c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004d80:	d01c      	beq.n	8004dbc <setvbuf+0x16c>
 8004d82:	07d3      	lsls	r3, r2, #31
 8004d84:	bf41      	itttt	mi
 8004d86:	2300      	movmi	r3, #0
 8004d88:	426d      	negmi	r5, r5
 8004d8a:	60a3      	strmi	r3, [r4, #8]
 8004d8c:	61a5      	strmi	r5, [r4, #24]
 8004d8e:	bf58      	it	pl
 8004d90:	60a5      	strpl	r5, [r4, #8]
 8004d92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d94:	f015 0501 	ands.w	r5, r5, #1
 8004d98:	d115      	bne.n	8004dc6 <setvbuf+0x176>
 8004d9a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d9e:	e7c8      	b.n	8004d32 <setvbuf+0xe2>
 8004da0:	4648      	mov	r0, r9
 8004da2:	f7ff fddf 	bl	8004964 <malloc>
 8004da6:	4606      	mov	r6, r0
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d0ae      	beq.n	8004d0a <setvbuf+0xba>
 8004dac:	464d      	mov	r5, r9
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	e7d0      	b.n	8004d5a <setvbuf+0x10a>
 8004db8:	2500      	movs	r5, #0
 8004dba:	e7a8      	b.n	8004d0e <setvbuf+0xbe>
 8004dbc:	60a3      	str	r3, [r4, #8]
 8004dbe:	e7e8      	b.n	8004d92 <setvbuf+0x142>
 8004dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8004dc4:	e7b9      	b.n	8004d3a <setvbuf+0xea>
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	e7b7      	b.n	8004d3a <setvbuf+0xea>
 8004dca:	bf00      	nop
 8004dcc:	2000002c 	.word	0x2000002c
 8004dd0:	08005ef0 	.word	0x08005ef0
 8004dd4:	08005f10 	.word	0x08005f10
 8004dd8:	08005ed0 	.word	0x08005ed0

08004ddc <__assert_func>:
 8004ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dde:	4614      	mov	r4, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <__assert_func+0x2c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4605      	mov	r5, r0
 8004de8:	68d8      	ldr	r0, [r3, #12]
 8004dea:	b14c      	cbz	r4, 8004e00 <__assert_func+0x24>
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <__assert_func+0x30>)
 8004dee:	9100      	str	r1, [sp, #0]
 8004df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004df4:	4906      	ldr	r1, [pc, #24]	; (8004e10 <__assert_func+0x34>)
 8004df6:	462b      	mov	r3, r5
 8004df8:	f000 f9a6 	bl	8005148 <fiprintf>
 8004dfc:	f000 fe82 	bl	8005b04 <abort>
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <__assert_func+0x38>)
 8004e02:	461c      	mov	r4, r3
 8004e04:	e7f3      	b.n	8004dee <__assert_func+0x12>
 8004e06:	bf00      	nop
 8004e08:	2000002c 	.word	0x2000002c
 8004e0c:	08005e92 	.word	0x08005e92
 8004e10:	08005e9f 	.word	0x08005e9f
 8004e14:	08005ecd 	.word	0x08005ecd

08004e18 <__sflush_r>:
 8004e18:	898a      	ldrh	r2, [r1, #12]
 8004e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1e:	4605      	mov	r5, r0
 8004e20:	0710      	lsls	r0, r2, #28
 8004e22:	460c      	mov	r4, r1
 8004e24:	d458      	bmi.n	8004ed8 <__sflush_r+0xc0>
 8004e26:	684b      	ldr	r3, [r1, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dc05      	bgt.n	8004e38 <__sflush_r+0x20>
 8004e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dc02      	bgt.n	8004e38 <__sflush_r+0x20>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	d0f9      	beq.n	8004e32 <__sflush_r+0x1a>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e44:	682f      	ldr	r7, [r5, #0]
 8004e46:	602b      	str	r3, [r5, #0]
 8004e48:	d032      	beq.n	8004eb0 <__sflush_r+0x98>
 8004e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	075a      	lsls	r2, r3, #29
 8004e50:	d505      	bpl.n	8004e5e <__sflush_r+0x46>
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	1ac0      	subs	r0, r0, r3
 8004e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e58:	b10b      	cbz	r3, 8004e5e <__sflush_r+0x46>
 8004e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e5c:	1ac0      	subs	r0, r0, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	4602      	mov	r2, r0
 8004e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b0      	blx	r6
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	d106      	bne.n	8004e7e <__sflush_r+0x66>
 8004e70:	6829      	ldr	r1, [r5, #0]
 8004e72:	291d      	cmp	r1, #29
 8004e74:	d82c      	bhi.n	8004ed0 <__sflush_r+0xb8>
 8004e76:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <__sflush_r+0x108>)
 8004e78:	40ca      	lsrs	r2, r1
 8004e7a:	07d6      	lsls	r6, r2, #31
 8004e7c:	d528      	bpl.n	8004ed0 <__sflush_r+0xb8>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	6062      	str	r2, [r4, #4]
 8004e82:	04d9      	lsls	r1, r3, #19
 8004e84:	6922      	ldr	r2, [r4, #16]
 8004e86:	6022      	str	r2, [r4, #0]
 8004e88:	d504      	bpl.n	8004e94 <__sflush_r+0x7c>
 8004e8a:	1c42      	adds	r2, r0, #1
 8004e8c:	d101      	bne.n	8004e92 <__sflush_r+0x7a>
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	b903      	cbnz	r3, 8004e94 <__sflush_r+0x7c>
 8004e92:	6560      	str	r0, [r4, #84]	; 0x54
 8004e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e96:	602f      	str	r7, [r5, #0]
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	d0ca      	beq.n	8004e32 <__sflush_r+0x1a>
 8004e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <__sflush_r+0x92>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff fd75 	bl	8004994 <_free_r>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	6360      	str	r0, [r4, #52]	; 0x34
 8004eae:	e7c1      	b.n	8004e34 <__sflush_r+0x1c>
 8004eb0:	6a21      	ldr	r1, [r4, #32]
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b0      	blx	r6
 8004eb8:	1c41      	adds	r1, r0, #1
 8004eba:	d1c7      	bne.n	8004e4c <__sflush_r+0x34>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0c4      	beq.n	8004e4c <__sflush_r+0x34>
 8004ec2:	2b1d      	cmp	r3, #29
 8004ec4:	d001      	beq.n	8004eca <__sflush_r+0xb2>
 8004ec6:	2b16      	cmp	r3, #22
 8004ec8:	d101      	bne.n	8004ece <__sflush_r+0xb6>
 8004eca:	602f      	str	r7, [r5, #0]
 8004ecc:	e7b1      	b.n	8004e32 <__sflush_r+0x1a>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	e7ad      	b.n	8004e34 <__sflush_r+0x1c>
 8004ed8:	690f      	ldr	r7, [r1, #16]
 8004eda:	2f00      	cmp	r7, #0
 8004edc:	d0a9      	beq.n	8004e32 <__sflush_r+0x1a>
 8004ede:	0793      	lsls	r3, r2, #30
 8004ee0:	680e      	ldr	r6, [r1, #0]
 8004ee2:	bf08      	it	eq
 8004ee4:	694b      	ldreq	r3, [r1, #20]
 8004ee6:	600f      	str	r7, [r1, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	2300      	movne	r3, #0
 8004eec:	eba6 0807 	sub.w	r8, r6, r7
 8004ef0:	608b      	str	r3, [r1, #8]
 8004ef2:	f1b8 0f00 	cmp.w	r8, #0
 8004ef6:	dd9c      	ble.n	8004e32 <__sflush_r+0x1a>
 8004ef8:	6a21      	ldr	r1, [r4, #32]
 8004efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004efc:	4643      	mov	r3, r8
 8004efe:	463a      	mov	r2, r7
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b0      	blx	r6
 8004f04:	2800      	cmp	r0, #0
 8004f06:	dc06      	bgt.n	8004f16 <__sflush_r+0xfe>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e78e      	b.n	8004e34 <__sflush_r+0x1c>
 8004f16:	4407      	add	r7, r0
 8004f18:	eba8 0800 	sub.w	r8, r8, r0
 8004f1c:	e7e9      	b.n	8004ef2 <__sflush_r+0xda>
 8004f1e:	bf00      	nop
 8004f20:	20400001 	.word	0x20400001

08004f24 <_fflush_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b913      	cbnz	r3, 8004f34 <_fflush_r+0x10>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	4628      	mov	r0, r5
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	b118      	cbz	r0, 8004f3e <_fflush_r+0x1a>
 8004f36:	6983      	ldr	r3, [r0, #24]
 8004f38:	b90b      	cbnz	r3, 8004f3e <_fflush_r+0x1a>
 8004f3a:	f000 f887 	bl	800504c <__sinit>
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <_fflush_r+0x6c>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d11b      	bne.n	8004f7c <_fflush_r+0x58>
 8004f44:	686c      	ldr	r4, [r5, #4]
 8004f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ef      	beq.n	8004f2e <_fflush_r+0xa>
 8004f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f50:	07d0      	lsls	r0, r2, #31
 8004f52:	d404      	bmi.n	8004f5e <_fflush_r+0x3a>
 8004f54:	0599      	lsls	r1, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_fflush_r+0x3a>
 8004f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5a:	f000 f927 	bl	80051ac <__retarget_lock_acquire_recursive>
 8004f5e:	4628      	mov	r0, r5
 8004f60:	4621      	mov	r1, r4
 8004f62:	f7ff ff59 	bl	8004e18 <__sflush_r>
 8004f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f68:	07da      	lsls	r2, r3, #31
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	d4e0      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	d4dd      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f76:	f000 f91a 	bl	80051ae <__retarget_lock_release_recursive>
 8004f7a:	e7d9      	b.n	8004f30 <_fflush_r+0xc>
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <_fflush_r+0x70>)
 8004f7e:	429c      	cmp	r4, r3
 8004f80:	d101      	bne.n	8004f86 <_fflush_r+0x62>
 8004f82:	68ac      	ldr	r4, [r5, #8]
 8004f84:	e7df      	b.n	8004f46 <_fflush_r+0x22>
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <_fflush_r+0x74>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	bf08      	it	eq
 8004f8c:	68ec      	ldreq	r4, [r5, #12]
 8004f8e:	e7da      	b.n	8004f46 <_fflush_r+0x22>
 8004f90:	08005ef0 	.word	0x08005ef0
 8004f94:	08005f10 	.word	0x08005f10
 8004f98:	08005ed0 	.word	0x08005ed0

08004f9c <std>:
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004faa:	6083      	str	r3, [r0, #8]
 8004fac:	8181      	strh	r1, [r0, #12]
 8004fae:	6643      	str	r3, [r0, #100]	; 0x64
 8004fb0:	81c2      	strh	r2, [r0, #14]
 8004fb2:	6183      	str	r3, [r0, #24]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	305c      	adds	r0, #92	; 0x5c
 8004fba:	f7ff fce3 	bl	8004984 <memset>
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <std+0x38>)
 8004fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <std+0x3c>)
 8004fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <std+0x40>)
 8004fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <std+0x44>)
 8004fcc:	6224      	str	r4, [r4, #32]
 8004fce:	6323      	str	r3, [r4, #48]	; 0x30
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	080058fd 	.word	0x080058fd
 8004fd8:	0800591f 	.word	0x0800591f
 8004fdc:	08005957 	.word	0x08005957
 8004fe0:	0800597b 	.word	0x0800597b

08004fe4 <_cleanup_r>:
 8004fe4:	4901      	ldr	r1, [pc, #4]	; (8004fec <_cleanup_r+0x8>)
 8004fe6:	f000 b8c1 	b.w	800516c <_fwalk_reent>
 8004fea:	bf00      	nop
 8004fec:	08004f25 	.word	0x08004f25

08004ff0 <__sfmoreglue>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	1e4a      	subs	r2, r1, #1
 8004ff4:	2568      	movs	r5, #104	; 0x68
 8004ff6:	4355      	muls	r5, r2
 8004ff8:	460e      	mov	r6, r1
 8004ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ffe:	f7ff fd19 	bl	8004a34 <_malloc_r>
 8005002:	4604      	mov	r4, r0
 8005004:	b140      	cbz	r0, 8005018 <__sfmoreglue+0x28>
 8005006:	2100      	movs	r1, #0
 8005008:	e9c0 1600 	strd	r1, r6, [r0]
 800500c:	300c      	adds	r0, #12
 800500e:	60a0      	str	r0, [r4, #8]
 8005010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005014:	f7ff fcb6 	bl	8004984 <memset>
 8005018:	4620      	mov	r0, r4
 800501a:	bd70      	pop	{r4, r5, r6, pc}

0800501c <__sfp_lock_acquire>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__sfp_lock_acquire+0x8>)
 800501e:	f000 b8c5 	b.w	80051ac <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	200001d4 	.word	0x200001d4

08005028 <__sfp_lock_release>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__sfp_lock_release+0x8>)
 800502a:	f000 b8c0 	b.w	80051ae <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	200001d4 	.word	0x200001d4

08005034 <__sinit_lock_acquire>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__sinit_lock_acquire+0x8>)
 8005036:	f000 b8b9 	b.w	80051ac <__retarget_lock_acquire_recursive>
 800503a:	bf00      	nop
 800503c:	200001cf 	.word	0x200001cf

08005040 <__sinit_lock_release>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__sinit_lock_release+0x8>)
 8005042:	f000 b8b4 	b.w	80051ae <__retarget_lock_release_recursive>
 8005046:	bf00      	nop
 8005048:	200001cf 	.word	0x200001cf

0800504c <__sinit>:
 800504c:	b510      	push	{r4, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	f7ff fff0 	bl	8005034 <__sinit_lock_acquire>
 8005054:	69a3      	ldr	r3, [r4, #24]
 8005056:	b11b      	cbz	r3, 8005060 <__sinit+0x14>
 8005058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505c:	f7ff bff0 	b.w	8005040 <__sinit_lock_release>
 8005060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005064:	6523      	str	r3, [r4, #80]	; 0x50
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <__sinit+0x68>)
 8005068:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <__sinit+0x6c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	62a2      	str	r2, [r4, #40]	; 0x28
 800506e:	42a3      	cmp	r3, r4
 8005070:	bf04      	itt	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	61a3      	streq	r3, [r4, #24]
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f820 	bl	80050bc <__sfp>
 800507c:	6060      	str	r0, [r4, #4]
 800507e:	4620      	mov	r0, r4
 8005080:	f000 f81c 	bl	80050bc <__sfp>
 8005084:	60a0      	str	r0, [r4, #8]
 8005086:	4620      	mov	r0, r4
 8005088:	f000 f818 	bl	80050bc <__sfp>
 800508c:	2200      	movs	r2, #0
 800508e:	60e0      	str	r0, [r4, #12]
 8005090:	2104      	movs	r1, #4
 8005092:	6860      	ldr	r0, [r4, #4]
 8005094:	f7ff ff82 	bl	8004f9c <std>
 8005098:	68a0      	ldr	r0, [r4, #8]
 800509a:	2201      	movs	r2, #1
 800509c:	2109      	movs	r1, #9
 800509e:	f7ff ff7d 	bl	8004f9c <std>
 80050a2:	68e0      	ldr	r0, [r4, #12]
 80050a4:	2202      	movs	r2, #2
 80050a6:	2112      	movs	r1, #18
 80050a8:	f7ff ff78 	bl	8004f9c <std>
 80050ac:	2301      	movs	r3, #1
 80050ae:	61a3      	str	r3, [r4, #24]
 80050b0:	e7d2      	b.n	8005058 <__sinit+0xc>
 80050b2:	bf00      	nop
 80050b4:	08005e18 	.word	0x08005e18
 80050b8:	08004fe5 	.word	0x08004fe5

080050bc <__sfp>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	f7ff ffac 	bl	800501c <__sfp_lock_acquire>
 80050c4:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <__sfp+0x84>)
 80050c6:	681e      	ldr	r6, [r3, #0]
 80050c8:	69b3      	ldr	r3, [r6, #24]
 80050ca:	b913      	cbnz	r3, 80050d2 <__sfp+0x16>
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff ffbd 	bl	800504c <__sinit>
 80050d2:	3648      	adds	r6, #72	; 0x48
 80050d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050d8:	3b01      	subs	r3, #1
 80050da:	d503      	bpl.n	80050e4 <__sfp+0x28>
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	b30b      	cbz	r3, 8005124 <__sfp+0x68>
 80050e0:	6836      	ldr	r6, [r6, #0]
 80050e2:	e7f7      	b.n	80050d4 <__sfp+0x18>
 80050e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050e8:	b9d5      	cbnz	r5, 8005120 <__sfp+0x64>
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <__sfp+0x88>)
 80050ec:	60e3      	str	r3, [r4, #12]
 80050ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050f2:	6665      	str	r5, [r4, #100]	; 0x64
 80050f4:	f000 f859 	bl	80051aa <__retarget_lock_init_recursive>
 80050f8:	f7ff ff96 	bl	8005028 <__sfp_lock_release>
 80050fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005104:	6025      	str	r5, [r4, #0]
 8005106:	61a5      	str	r5, [r4, #24]
 8005108:	2208      	movs	r2, #8
 800510a:	4629      	mov	r1, r5
 800510c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005110:	f7ff fc38 	bl	8004984 <memset>
 8005114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800511c:	4620      	mov	r0, r4
 800511e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005120:	3468      	adds	r4, #104	; 0x68
 8005122:	e7d9      	b.n	80050d8 <__sfp+0x1c>
 8005124:	2104      	movs	r1, #4
 8005126:	4638      	mov	r0, r7
 8005128:	f7ff ff62 	bl	8004ff0 <__sfmoreglue>
 800512c:	4604      	mov	r4, r0
 800512e:	6030      	str	r0, [r6, #0]
 8005130:	2800      	cmp	r0, #0
 8005132:	d1d5      	bne.n	80050e0 <__sfp+0x24>
 8005134:	f7ff ff78 	bl	8005028 <__sfp_lock_release>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	e7ee      	b.n	800511c <__sfp+0x60>
 800513e:	bf00      	nop
 8005140:	08005e18 	.word	0x08005e18
 8005144:	ffff0001 	.word	0xffff0001

08005148 <fiprintf>:
 8005148:	b40e      	push	{r1, r2, r3}
 800514a:	b503      	push	{r0, r1, lr}
 800514c:	4601      	mov	r1, r0
 800514e:	ab03      	add	r3, sp, #12
 8005150:	4805      	ldr	r0, [pc, #20]	; (8005168 <fiprintf+0x20>)
 8005152:	f853 2b04 	ldr.w	r2, [r3], #4
 8005156:	6800      	ldr	r0, [r0, #0]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	f000 f8c3 	bl	80052e4 <_vfiprintf_r>
 800515e:	b002      	add	sp, #8
 8005160:	f85d eb04 	ldr.w	lr, [sp], #4
 8005164:	b003      	add	sp, #12
 8005166:	4770      	bx	lr
 8005168:	2000002c 	.word	0x2000002c

0800516c <_fwalk_reent>:
 800516c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005170:	4606      	mov	r6, r0
 8005172:	4688      	mov	r8, r1
 8005174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005178:	2700      	movs	r7, #0
 800517a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800517e:	f1b9 0901 	subs.w	r9, r9, #1
 8005182:	d505      	bpl.n	8005190 <_fwalk_reent+0x24>
 8005184:	6824      	ldr	r4, [r4, #0]
 8005186:	2c00      	cmp	r4, #0
 8005188:	d1f7      	bne.n	800517a <_fwalk_reent+0xe>
 800518a:	4638      	mov	r0, r7
 800518c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005190:	89ab      	ldrh	r3, [r5, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d907      	bls.n	80051a6 <_fwalk_reent+0x3a>
 8005196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800519a:	3301      	adds	r3, #1
 800519c:	d003      	beq.n	80051a6 <_fwalk_reent+0x3a>
 800519e:	4629      	mov	r1, r5
 80051a0:	4630      	mov	r0, r6
 80051a2:	47c0      	blx	r8
 80051a4:	4307      	orrs	r7, r0
 80051a6:	3568      	adds	r5, #104	; 0x68
 80051a8:	e7e9      	b.n	800517e <_fwalk_reent+0x12>

080051aa <__retarget_lock_init_recursive>:
 80051aa:	4770      	bx	lr

080051ac <__retarget_lock_acquire_recursive>:
 80051ac:	4770      	bx	lr

080051ae <__retarget_lock_release_recursive>:
 80051ae:	4770      	bx	lr

080051b0 <__swhatbuf_r>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	460e      	mov	r6, r1
 80051b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b8:	2900      	cmp	r1, #0
 80051ba:	b096      	sub	sp, #88	; 0x58
 80051bc:	4614      	mov	r4, r2
 80051be:	461d      	mov	r5, r3
 80051c0:	da07      	bge.n	80051d2 <__swhatbuf_r+0x22>
 80051c2:	2300      	movs	r3, #0
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	89b3      	ldrh	r3, [r6, #12]
 80051c8:	061a      	lsls	r2, r3, #24
 80051ca:	d410      	bmi.n	80051ee <__swhatbuf_r+0x3e>
 80051cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d0:	e00e      	b.n	80051f0 <__swhatbuf_r+0x40>
 80051d2:	466a      	mov	r2, sp
 80051d4:	f000 fcae 	bl	8005b34 <_fstat_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	dbf2      	blt.n	80051c2 <__swhatbuf_r+0x12>
 80051dc:	9a01      	ldr	r2, [sp, #4]
 80051de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051e6:	425a      	negs	r2, r3
 80051e8:	415a      	adcs	r2, r3
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	e7ee      	b.n	80051cc <__swhatbuf_r+0x1c>
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	2000      	movs	r0, #0
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	b016      	add	sp, #88	; 0x58
 80051f6:	bd70      	pop	{r4, r5, r6, pc}

080051f8 <__smakebuf_r>:
 80051f8:	898b      	ldrh	r3, [r1, #12]
 80051fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051fc:	079d      	lsls	r5, r3, #30
 80051fe:	4606      	mov	r6, r0
 8005200:	460c      	mov	r4, r1
 8005202:	d507      	bpl.n	8005214 <__smakebuf_r+0x1c>
 8005204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	2301      	movs	r3, #1
 800520e:	6163      	str	r3, [r4, #20]
 8005210:	b002      	add	sp, #8
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	ab01      	add	r3, sp, #4
 8005216:	466a      	mov	r2, sp
 8005218:	f7ff ffca 	bl	80051b0 <__swhatbuf_r>
 800521c:	9900      	ldr	r1, [sp, #0]
 800521e:	4605      	mov	r5, r0
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff fc07 	bl	8004a34 <_malloc_r>
 8005226:	b948      	cbnz	r0, 800523c <__smakebuf_r+0x44>
 8005228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522c:	059a      	lsls	r2, r3, #22
 800522e:	d4ef      	bmi.n	8005210 <__smakebuf_r+0x18>
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	e7e3      	b.n	8005204 <__smakebuf_r+0xc>
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <__smakebuf_r+0x7c>)
 800523e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	6020      	str	r0, [r4, #0]
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	9b00      	ldr	r3, [sp, #0]
 800524c:	6163      	str	r3, [r4, #20]
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	6120      	str	r0, [r4, #16]
 8005252:	b15b      	cbz	r3, 800526c <__smakebuf_r+0x74>
 8005254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005258:	4630      	mov	r0, r6
 800525a:	f000 fc7d 	bl	8005b58 <_isatty_r>
 800525e:	b128      	cbz	r0, 800526c <__smakebuf_r+0x74>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	89a0      	ldrh	r0, [r4, #12]
 800526e:	4305      	orrs	r5, r0
 8005270:	81a5      	strh	r5, [r4, #12]
 8005272:	e7cd      	b.n	8005210 <__smakebuf_r+0x18>
 8005274:	08004fe5 	.word	0x08004fe5

08005278 <__malloc_lock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_lock+0x8>)
 800527a:	f7ff bf97 	b.w	80051ac <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	200001d0 	.word	0x200001d0

08005284 <__malloc_unlock>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__malloc_unlock+0x8>)
 8005286:	f7ff bf92 	b.w	80051ae <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	200001d0 	.word	0x200001d0

08005290 <__sfputc_r>:
 8005290:	6893      	ldr	r3, [r2, #8]
 8005292:	3b01      	subs	r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	b410      	push	{r4}
 8005298:	6093      	str	r3, [r2, #8]
 800529a:	da08      	bge.n	80052ae <__sfputc_r+0x1e>
 800529c:	6994      	ldr	r4, [r2, #24]
 800529e:	42a3      	cmp	r3, r4
 80052a0:	db01      	blt.n	80052a6 <__sfputc_r+0x16>
 80052a2:	290a      	cmp	r1, #10
 80052a4:	d103      	bne.n	80052ae <__sfputc_r+0x1e>
 80052a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052aa:	f000 bb6b 	b.w	8005984 <__swbuf_r>
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	1c58      	adds	r0, r3, #1
 80052b2:	6010      	str	r0, [r2, #0]
 80052b4:	7019      	strb	r1, [r3, #0]
 80052b6:	4608      	mov	r0, r1
 80052b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052bc:	4770      	bx	lr

080052be <__sfputs_r>:
 80052be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c0:	4606      	mov	r6, r0
 80052c2:	460f      	mov	r7, r1
 80052c4:	4614      	mov	r4, r2
 80052c6:	18d5      	adds	r5, r2, r3
 80052c8:	42ac      	cmp	r4, r5
 80052ca:	d101      	bne.n	80052d0 <__sfputs_r+0x12>
 80052cc:	2000      	movs	r0, #0
 80052ce:	e007      	b.n	80052e0 <__sfputs_r+0x22>
 80052d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d4:	463a      	mov	r2, r7
 80052d6:	4630      	mov	r0, r6
 80052d8:	f7ff ffda 	bl	8005290 <__sfputc_r>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d1f3      	bne.n	80052c8 <__sfputs_r+0xa>
 80052e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052e4 <_vfiprintf_r>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	460d      	mov	r5, r1
 80052ea:	b09d      	sub	sp, #116	; 0x74
 80052ec:	4614      	mov	r4, r2
 80052ee:	4698      	mov	r8, r3
 80052f0:	4606      	mov	r6, r0
 80052f2:	b118      	cbz	r0, 80052fc <_vfiprintf_r+0x18>
 80052f4:	6983      	ldr	r3, [r0, #24]
 80052f6:	b90b      	cbnz	r3, 80052fc <_vfiprintf_r+0x18>
 80052f8:	f7ff fea8 	bl	800504c <__sinit>
 80052fc:	4b89      	ldr	r3, [pc, #548]	; (8005524 <_vfiprintf_r+0x240>)
 80052fe:	429d      	cmp	r5, r3
 8005300:	d11b      	bne.n	800533a <_vfiprintf_r+0x56>
 8005302:	6875      	ldr	r5, [r6, #4]
 8005304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005306:	07d9      	lsls	r1, r3, #31
 8005308:	d405      	bmi.n	8005316 <_vfiprintf_r+0x32>
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	059a      	lsls	r2, r3, #22
 800530e:	d402      	bmi.n	8005316 <_vfiprintf_r+0x32>
 8005310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005312:	f7ff ff4b 	bl	80051ac <__retarget_lock_acquire_recursive>
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	d501      	bpl.n	8005320 <_vfiprintf_r+0x3c>
 800531c:	692b      	ldr	r3, [r5, #16]
 800531e:	b9eb      	cbnz	r3, 800535c <_vfiprintf_r+0x78>
 8005320:	4629      	mov	r1, r5
 8005322:	4630      	mov	r0, r6
 8005324:	f000 fb80 	bl	8005a28 <__swsetup_r>
 8005328:	b1c0      	cbz	r0, 800535c <_vfiprintf_r+0x78>
 800532a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800532c:	07dc      	lsls	r4, r3, #31
 800532e:	d50e      	bpl.n	800534e <_vfiprintf_r+0x6a>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	b01d      	add	sp, #116	; 0x74
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	4b7b      	ldr	r3, [pc, #492]	; (8005528 <_vfiprintf_r+0x244>)
 800533c:	429d      	cmp	r5, r3
 800533e:	d101      	bne.n	8005344 <_vfiprintf_r+0x60>
 8005340:	68b5      	ldr	r5, [r6, #8]
 8005342:	e7df      	b.n	8005304 <_vfiprintf_r+0x20>
 8005344:	4b79      	ldr	r3, [pc, #484]	; (800552c <_vfiprintf_r+0x248>)
 8005346:	429d      	cmp	r5, r3
 8005348:	bf08      	it	eq
 800534a:	68f5      	ldreq	r5, [r6, #12]
 800534c:	e7da      	b.n	8005304 <_vfiprintf_r+0x20>
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	0598      	lsls	r0, r3, #22
 8005352:	d4ed      	bmi.n	8005330 <_vfiprintf_r+0x4c>
 8005354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005356:	f7ff ff2a 	bl	80051ae <__retarget_lock_release_recursive>
 800535a:	e7e9      	b.n	8005330 <_vfiprintf_r+0x4c>
 800535c:	2300      	movs	r3, #0
 800535e:	9309      	str	r3, [sp, #36]	; 0x24
 8005360:	2320      	movs	r3, #32
 8005362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005366:	f8cd 800c 	str.w	r8, [sp, #12]
 800536a:	2330      	movs	r3, #48	; 0x30
 800536c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005530 <_vfiprintf_r+0x24c>
 8005370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005374:	f04f 0901 	mov.w	r9, #1
 8005378:	4623      	mov	r3, r4
 800537a:	469a      	mov	sl, r3
 800537c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005380:	b10a      	cbz	r2, 8005386 <_vfiprintf_r+0xa2>
 8005382:	2a25      	cmp	r2, #37	; 0x25
 8005384:	d1f9      	bne.n	800537a <_vfiprintf_r+0x96>
 8005386:	ebba 0b04 	subs.w	fp, sl, r4
 800538a:	d00b      	beq.n	80053a4 <_vfiprintf_r+0xc0>
 800538c:	465b      	mov	r3, fp
 800538e:	4622      	mov	r2, r4
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ff93 	bl	80052be <__sfputs_r>
 8005398:	3001      	adds	r0, #1
 800539a:	f000 80aa 	beq.w	80054f2 <_vfiprintf_r+0x20e>
 800539e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a0:	445a      	add	r2, fp
 80053a2:	9209      	str	r2, [sp, #36]	; 0x24
 80053a4:	f89a 3000 	ldrb.w	r3, [sl]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a2 	beq.w	80054f2 <_vfiprintf_r+0x20e>
 80053ae:	2300      	movs	r3, #0
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295
 80053b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b8:	f10a 0a01 	add.w	sl, sl, #1
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	9307      	str	r3, [sp, #28]
 80053c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053c4:	931a      	str	r3, [sp, #104]	; 0x68
 80053c6:	4654      	mov	r4, sl
 80053c8:	2205      	movs	r2, #5
 80053ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ce:	4858      	ldr	r0, [pc, #352]	; (8005530 <_vfiprintf_r+0x24c>)
 80053d0:	f7fa ff06 	bl	80001e0 <memchr>
 80053d4:	9a04      	ldr	r2, [sp, #16]
 80053d6:	b9d8      	cbnz	r0, 8005410 <_vfiprintf_r+0x12c>
 80053d8:	06d1      	lsls	r1, r2, #27
 80053da:	bf44      	itt	mi
 80053dc:	2320      	movmi	r3, #32
 80053de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053e2:	0713      	lsls	r3, r2, #28
 80053e4:	bf44      	itt	mi
 80053e6:	232b      	movmi	r3, #43	; 0x2b
 80053e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ec:	f89a 3000 	ldrb.w	r3, [sl]
 80053f0:	2b2a      	cmp	r3, #42	; 0x2a
 80053f2:	d015      	beq.n	8005420 <_vfiprintf_r+0x13c>
 80053f4:	9a07      	ldr	r2, [sp, #28]
 80053f6:	4654      	mov	r4, sl
 80053f8:	2000      	movs	r0, #0
 80053fa:	f04f 0c0a 	mov.w	ip, #10
 80053fe:	4621      	mov	r1, r4
 8005400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005404:	3b30      	subs	r3, #48	; 0x30
 8005406:	2b09      	cmp	r3, #9
 8005408:	d94e      	bls.n	80054a8 <_vfiprintf_r+0x1c4>
 800540a:	b1b0      	cbz	r0, 800543a <_vfiprintf_r+0x156>
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	e014      	b.n	800543a <_vfiprintf_r+0x156>
 8005410:	eba0 0308 	sub.w	r3, r0, r8
 8005414:	fa09 f303 	lsl.w	r3, r9, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	46a2      	mov	sl, r4
 800541e:	e7d2      	b.n	80053c6 <_vfiprintf_r+0xe2>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	1d19      	adds	r1, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9103      	str	r1, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfbb      	ittet	lt
 800542c:	425b      	neglt	r3, r3
 800542e:	f042 0202 	orrlt.w	r2, r2, #2
 8005432:	9307      	strge	r3, [sp, #28]
 8005434:	9307      	strlt	r3, [sp, #28]
 8005436:	bfb8      	it	lt
 8005438:	9204      	strlt	r2, [sp, #16]
 800543a:	7823      	ldrb	r3, [r4, #0]
 800543c:	2b2e      	cmp	r3, #46	; 0x2e
 800543e:	d10c      	bne.n	800545a <_vfiprintf_r+0x176>
 8005440:	7863      	ldrb	r3, [r4, #1]
 8005442:	2b2a      	cmp	r3, #42	; 0x2a
 8005444:	d135      	bne.n	80054b2 <_vfiprintf_r+0x1ce>
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	9203      	str	r2, [sp, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb8      	it	lt
 8005452:	f04f 33ff 	movlt.w	r3, #4294967295
 8005456:	3402      	adds	r4, #2
 8005458:	9305      	str	r3, [sp, #20]
 800545a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005540 <_vfiprintf_r+0x25c>
 800545e:	7821      	ldrb	r1, [r4, #0]
 8005460:	2203      	movs	r2, #3
 8005462:	4650      	mov	r0, sl
 8005464:	f7fa febc 	bl	80001e0 <memchr>
 8005468:	b140      	cbz	r0, 800547c <_vfiprintf_r+0x198>
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	eba0 000a 	sub.w	r0, r0, sl
 8005470:	fa03 f000 	lsl.w	r0, r3, r0
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	4303      	orrs	r3, r0
 8005478:	3401      	adds	r4, #1
 800547a:	9304      	str	r3, [sp, #16]
 800547c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005480:	482c      	ldr	r0, [pc, #176]	; (8005534 <_vfiprintf_r+0x250>)
 8005482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005486:	2206      	movs	r2, #6
 8005488:	f7fa feaa 	bl	80001e0 <memchr>
 800548c:	2800      	cmp	r0, #0
 800548e:	d03f      	beq.n	8005510 <_vfiprintf_r+0x22c>
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <_vfiprintf_r+0x254>)
 8005492:	bb1b      	cbnz	r3, 80054dc <_vfiprintf_r+0x1f8>
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	3307      	adds	r3, #7
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	3308      	adds	r3, #8
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a2:	443b      	add	r3, r7
 80054a4:	9309      	str	r3, [sp, #36]	; 0x24
 80054a6:	e767      	b.n	8005378 <_vfiprintf_r+0x94>
 80054a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ac:	460c      	mov	r4, r1
 80054ae:	2001      	movs	r0, #1
 80054b0:	e7a5      	b.n	80053fe <_vfiprintf_r+0x11a>
 80054b2:	2300      	movs	r3, #0
 80054b4:	3401      	adds	r4, #1
 80054b6:	9305      	str	r3, [sp, #20]
 80054b8:	4619      	mov	r1, r3
 80054ba:	f04f 0c0a 	mov.w	ip, #10
 80054be:	4620      	mov	r0, r4
 80054c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054c4:	3a30      	subs	r2, #48	; 0x30
 80054c6:	2a09      	cmp	r2, #9
 80054c8:	d903      	bls.n	80054d2 <_vfiprintf_r+0x1ee>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0c5      	beq.n	800545a <_vfiprintf_r+0x176>
 80054ce:	9105      	str	r1, [sp, #20]
 80054d0:	e7c3      	b.n	800545a <_vfiprintf_r+0x176>
 80054d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054d6:	4604      	mov	r4, r0
 80054d8:	2301      	movs	r3, #1
 80054da:	e7f0      	b.n	80054be <_vfiprintf_r+0x1da>
 80054dc:	ab03      	add	r3, sp, #12
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	462a      	mov	r2, r5
 80054e2:	4b16      	ldr	r3, [pc, #88]	; (800553c <_vfiprintf_r+0x258>)
 80054e4:	a904      	add	r1, sp, #16
 80054e6:	4630      	mov	r0, r6
 80054e8:	f3af 8000 	nop.w
 80054ec:	4607      	mov	r7, r0
 80054ee:	1c78      	adds	r0, r7, #1
 80054f0:	d1d6      	bne.n	80054a0 <_vfiprintf_r+0x1bc>
 80054f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f4:	07d9      	lsls	r1, r3, #31
 80054f6:	d405      	bmi.n	8005504 <_vfiprintf_r+0x220>
 80054f8:	89ab      	ldrh	r3, [r5, #12]
 80054fa:	059a      	lsls	r2, r3, #22
 80054fc:	d402      	bmi.n	8005504 <_vfiprintf_r+0x220>
 80054fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005500:	f7ff fe55 	bl	80051ae <__retarget_lock_release_recursive>
 8005504:	89ab      	ldrh	r3, [r5, #12]
 8005506:	065b      	lsls	r3, r3, #25
 8005508:	f53f af12 	bmi.w	8005330 <_vfiprintf_r+0x4c>
 800550c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550e:	e711      	b.n	8005334 <_vfiprintf_r+0x50>
 8005510:	ab03      	add	r3, sp, #12
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	462a      	mov	r2, r5
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <_vfiprintf_r+0x258>)
 8005518:	a904      	add	r1, sp, #16
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f880 	bl	8005620 <_printf_i>
 8005520:	e7e4      	b.n	80054ec <_vfiprintf_r+0x208>
 8005522:	bf00      	nop
 8005524:	08005ef0 	.word	0x08005ef0
 8005528:	08005f10 	.word	0x08005f10
 800552c:	08005ed0 	.word	0x08005ed0
 8005530:	08005f30 	.word	0x08005f30
 8005534:	08005f3a 	.word	0x08005f3a
 8005538:	00000000 	.word	0x00000000
 800553c:	080052bf 	.word	0x080052bf
 8005540:	08005f36 	.word	0x08005f36

08005544 <_printf_common>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	4616      	mov	r6, r2
 800554a:	4699      	mov	r9, r3
 800554c:	688a      	ldr	r2, [r1, #8]
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005554:	4293      	cmp	r3, r2
 8005556:	bfb8      	it	lt
 8005558:	4613      	movlt	r3, r2
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005560:	4607      	mov	r7, r0
 8005562:	460c      	mov	r4, r1
 8005564:	b10a      	cbz	r2, 800556a <_printf_common+0x26>
 8005566:	3301      	adds	r3, #1
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	0699      	lsls	r1, r3, #26
 800556e:	bf42      	ittt	mi
 8005570:	6833      	ldrmi	r3, [r6, #0]
 8005572:	3302      	addmi	r3, #2
 8005574:	6033      	strmi	r3, [r6, #0]
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	f015 0506 	ands.w	r5, r5, #6
 800557c:	d106      	bne.n	800558c <_printf_common+0x48>
 800557e:	f104 0a19 	add.w	sl, r4, #25
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	6832      	ldr	r2, [r6, #0]
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	42ab      	cmp	r3, r5
 800558a:	dc26      	bgt.n	80055da <_printf_common+0x96>
 800558c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005590:	1e13      	subs	r3, r2, #0
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	0692      	lsls	r2, r2, #26
 800559a:	d42b      	bmi.n	80055f4 <_printf_common+0xb0>
 800559c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a0:	4649      	mov	r1, r9
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	3001      	adds	r0, #1
 80055a8:	d01e      	beq.n	80055e8 <_printf_common+0xa4>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	68e5      	ldr	r5, [r4, #12]
 80055ae:	6832      	ldr	r2, [r6, #0]
 80055b0:	f003 0306 	and.w	r3, r3, #6
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	bf08      	it	eq
 80055b8:	1aad      	subeq	r5, r5, r2
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	6922      	ldr	r2, [r4, #16]
 80055be:	bf0c      	ite	eq
 80055c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c4:	2500      	movne	r5, #0
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bfc4      	itt	gt
 80055ca:	1a9b      	subgt	r3, r3, r2
 80055cc:	18ed      	addgt	r5, r5, r3
 80055ce:	2600      	movs	r6, #0
 80055d0:	341a      	adds	r4, #26
 80055d2:	42b5      	cmp	r5, r6
 80055d4:	d11a      	bne.n	800560c <_printf_common+0xc8>
 80055d6:	2000      	movs	r0, #0
 80055d8:	e008      	b.n	80055ec <_printf_common+0xa8>
 80055da:	2301      	movs	r3, #1
 80055dc:	4652      	mov	r2, sl
 80055de:	4649      	mov	r1, r9
 80055e0:	4638      	mov	r0, r7
 80055e2:	47c0      	blx	r8
 80055e4:	3001      	adds	r0, #1
 80055e6:	d103      	bne.n	80055f0 <_printf_common+0xac>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	3501      	adds	r5, #1
 80055f2:	e7c6      	b.n	8005582 <_printf_common+0x3e>
 80055f4:	18e1      	adds	r1, r4, r3
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	2030      	movs	r0, #48	; 0x30
 80055fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fe:	4422      	add	r2, r4
 8005600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005608:	3302      	adds	r3, #2
 800560a:	e7c7      	b.n	800559c <_printf_common+0x58>
 800560c:	2301      	movs	r3, #1
 800560e:	4622      	mov	r2, r4
 8005610:	4649      	mov	r1, r9
 8005612:	4638      	mov	r0, r7
 8005614:	47c0      	blx	r8
 8005616:	3001      	adds	r0, #1
 8005618:	d0e6      	beq.n	80055e8 <_printf_common+0xa4>
 800561a:	3601      	adds	r6, #1
 800561c:	e7d9      	b.n	80055d2 <_printf_common+0x8e>
	...

08005620 <_printf_i>:
 8005620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	4691      	mov	r9, r2
 8005628:	7e27      	ldrb	r7, [r4, #24]
 800562a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800562c:	2f78      	cmp	r7, #120	; 0x78
 800562e:	4680      	mov	r8, r0
 8005630:	469a      	mov	sl, r3
 8005632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005636:	d807      	bhi.n	8005648 <_printf_i+0x28>
 8005638:	2f62      	cmp	r7, #98	; 0x62
 800563a:	d80a      	bhi.n	8005652 <_printf_i+0x32>
 800563c:	2f00      	cmp	r7, #0
 800563e:	f000 80d8 	beq.w	80057f2 <_printf_i+0x1d2>
 8005642:	2f58      	cmp	r7, #88	; 0x58
 8005644:	f000 80a3 	beq.w	800578e <_printf_i+0x16e>
 8005648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800564c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005650:	e03a      	b.n	80056c8 <_printf_i+0xa8>
 8005652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005656:	2b15      	cmp	r3, #21
 8005658:	d8f6      	bhi.n	8005648 <_printf_i+0x28>
 800565a:	a001      	add	r0, pc, #4	; (adr r0, 8005660 <_printf_i+0x40>)
 800565c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005660:	080056b9 	.word	0x080056b9
 8005664:	080056cd 	.word	0x080056cd
 8005668:	08005649 	.word	0x08005649
 800566c:	08005649 	.word	0x08005649
 8005670:	08005649 	.word	0x08005649
 8005674:	08005649 	.word	0x08005649
 8005678:	080056cd 	.word	0x080056cd
 800567c:	08005649 	.word	0x08005649
 8005680:	08005649 	.word	0x08005649
 8005684:	08005649 	.word	0x08005649
 8005688:	08005649 	.word	0x08005649
 800568c:	080057d9 	.word	0x080057d9
 8005690:	080056fd 	.word	0x080056fd
 8005694:	080057bb 	.word	0x080057bb
 8005698:	08005649 	.word	0x08005649
 800569c:	08005649 	.word	0x08005649
 80056a0:	080057fb 	.word	0x080057fb
 80056a4:	08005649 	.word	0x08005649
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005649 	.word	0x08005649
 80056b0:	08005649 	.word	0x08005649
 80056b4:	080057c3 	.word	0x080057c3
 80056b8:	680b      	ldr	r3, [r1, #0]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	600a      	str	r2, [r1, #0]
 80056c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0a3      	b.n	8005814 <_printf_i+0x1f4>
 80056cc:	6825      	ldr	r5, [r4, #0]
 80056ce:	6808      	ldr	r0, [r1, #0]
 80056d0:	062e      	lsls	r6, r5, #24
 80056d2:	f100 0304 	add.w	r3, r0, #4
 80056d6:	d50a      	bpl.n	80056ee <_printf_i+0xce>
 80056d8:	6805      	ldr	r5, [r0, #0]
 80056da:	600b      	str	r3, [r1, #0]
 80056dc:	2d00      	cmp	r5, #0
 80056de:	da03      	bge.n	80056e8 <_printf_i+0xc8>
 80056e0:	232d      	movs	r3, #45	; 0x2d
 80056e2:	426d      	negs	r5, r5
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e8:	485e      	ldr	r0, [pc, #376]	; (8005864 <_printf_i+0x244>)
 80056ea:	230a      	movs	r3, #10
 80056ec:	e019      	b.n	8005722 <_printf_i+0x102>
 80056ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056f2:	6805      	ldr	r5, [r0, #0]
 80056f4:	600b      	str	r3, [r1, #0]
 80056f6:	bf18      	it	ne
 80056f8:	b22d      	sxthne	r5, r5
 80056fa:	e7ef      	b.n	80056dc <_printf_i+0xbc>
 80056fc:	680b      	ldr	r3, [r1, #0]
 80056fe:	6825      	ldr	r5, [r4, #0]
 8005700:	1d18      	adds	r0, r3, #4
 8005702:	6008      	str	r0, [r1, #0]
 8005704:	0628      	lsls	r0, r5, #24
 8005706:	d501      	bpl.n	800570c <_printf_i+0xec>
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	e002      	b.n	8005712 <_printf_i+0xf2>
 800570c:	0669      	lsls	r1, r5, #25
 800570e:	d5fb      	bpl.n	8005708 <_printf_i+0xe8>
 8005710:	881d      	ldrh	r5, [r3, #0]
 8005712:	4854      	ldr	r0, [pc, #336]	; (8005864 <_printf_i+0x244>)
 8005714:	2f6f      	cmp	r7, #111	; 0x6f
 8005716:	bf0c      	ite	eq
 8005718:	2308      	moveq	r3, #8
 800571a:	230a      	movne	r3, #10
 800571c:	2100      	movs	r1, #0
 800571e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005722:	6866      	ldr	r6, [r4, #4]
 8005724:	60a6      	str	r6, [r4, #8]
 8005726:	2e00      	cmp	r6, #0
 8005728:	bfa2      	ittt	ge
 800572a:	6821      	ldrge	r1, [r4, #0]
 800572c:	f021 0104 	bicge.w	r1, r1, #4
 8005730:	6021      	strge	r1, [r4, #0]
 8005732:	b90d      	cbnz	r5, 8005738 <_printf_i+0x118>
 8005734:	2e00      	cmp	r6, #0
 8005736:	d04d      	beq.n	80057d4 <_printf_i+0x1b4>
 8005738:	4616      	mov	r6, r2
 800573a:	fbb5 f1f3 	udiv	r1, r5, r3
 800573e:	fb03 5711 	mls	r7, r3, r1, r5
 8005742:	5dc7      	ldrb	r7, [r0, r7]
 8005744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005748:	462f      	mov	r7, r5
 800574a:	42bb      	cmp	r3, r7
 800574c:	460d      	mov	r5, r1
 800574e:	d9f4      	bls.n	800573a <_printf_i+0x11a>
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10b      	bne.n	800576c <_printf_i+0x14c>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07df      	lsls	r7, r3, #31
 8005758:	d508      	bpl.n	800576c <_printf_i+0x14c>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	6861      	ldr	r1, [r4, #4]
 800575e:	4299      	cmp	r1, r3
 8005760:	bfde      	ittt	le
 8005762:	2330      	movle	r3, #48	; 0x30
 8005764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800576c:	1b92      	subs	r2, r2, r6
 800576e:	6122      	str	r2, [r4, #16]
 8005770:	f8cd a000 	str.w	sl, [sp]
 8005774:	464b      	mov	r3, r9
 8005776:	aa03      	add	r2, sp, #12
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fee2 	bl	8005544 <_printf_common>
 8005780:	3001      	adds	r0, #1
 8005782:	d14c      	bne.n	800581e <_printf_i+0x1fe>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	b004      	add	sp, #16
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	4835      	ldr	r0, [pc, #212]	; (8005864 <_printf_i+0x244>)
 8005790:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	680e      	ldr	r6, [r1, #0]
 8005798:	061f      	lsls	r7, r3, #24
 800579a:	f856 5b04 	ldr.w	r5, [r6], #4
 800579e:	600e      	str	r6, [r1, #0]
 80057a0:	d514      	bpl.n	80057cc <_printf_i+0x1ac>
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	bf44      	itt	mi
 80057a6:	f043 0320 	orrmi.w	r3, r3, #32
 80057aa:	6023      	strmi	r3, [r4, #0]
 80057ac:	b91d      	cbnz	r5, 80057b6 <_printf_i+0x196>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	f023 0320 	bic.w	r3, r3, #32
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	2310      	movs	r3, #16
 80057b8:	e7b0      	b.n	800571c <_printf_i+0xfc>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	f043 0320 	orr.w	r3, r3, #32
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	2378      	movs	r3, #120	; 0x78
 80057c4:	4828      	ldr	r0, [pc, #160]	; (8005868 <_printf_i+0x248>)
 80057c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ca:	e7e3      	b.n	8005794 <_printf_i+0x174>
 80057cc:	065e      	lsls	r6, r3, #25
 80057ce:	bf48      	it	mi
 80057d0:	b2ad      	uxthmi	r5, r5
 80057d2:	e7e6      	b.n	80057a2 <_printf_i+0x182>
 80057d4:	4616      	mov	r6, r2
 80057d6:	e7bb      	b.n	8005750 <_printf_i+0x130>
 80057d8:	680b      	ldr	r3, [r1, #0]
 80057da:	6826      	ldr	r6, [r4, #0]
 80057dc:	6960      	ldr	r0, [r4, #20]
 80057de:	1d1d      	adds	r5, r3, #4
 80057e0:	600d      	str	r5, [r1, #0]
 80057e2:	0635      	lsls	r5, r6, #24
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	d501      	bpl.n	80057ec <_printf_i+0x1cc>
 80057e8:	6018      	str	r0, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <_printf_i+0x1d2>
 80057ec:	0671      	lsls	r1, r6, #25
 80057ee:	d5fb      	bpl.n	80057e8 <_printf_i+0x1c8>
 80057f0:	8018      	strh	r0, [r3, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	4616      	mov	r6, r2
 80057f8:	e7ba      	b.n	8005770 <_printf_i+0x150>
 80057fa:	680b      	ldr	r3, [r1, #0]
 80057fc:	1d1a      	adds	r2, r3, #4
 80057fe:	600a      	str	r2, [r1, #0]
 8005800:	681e      	ldr	r6, [r3, #0]
 8005802:	6862      	ldr	r2, [r4, #4]
 8005804:	2100      	movs	r1, #0
 8005806:	4630      	mov	r0, r6
 8005808:	f7fa fcea 	bl	80001e0 <memchr>
 800580c:	b108      	cbz	r0, 8005812 <_printf_i+0x1f2>
 800580e:	1b80      	subs	r0, r0, r6
 8005810:	6060      	str	r0, [r4, #4]
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	2300      	movs	r3, #0
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581c:	e7a8      	b.n	8005770 <_printf_i+0x150>
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d0ab      	beq.n	8005784 <_printf_i+0x164>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	079b      	lsls	r3, r3, #30
 8005830:	d413      	bmi.n	800585a <_printf_i+0x23a>
 8005832:	68e0      	ldr	r0, [r4, #12]
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	4298      	cmp	r0, r3
 8005838:	bfb8      	it	lt
 800583a:	4618      	movlt	r0, r3
 800583c:	e7a4      	b.n	8005788 <_printf_i+0x168>
 800583e:	2301      	movs	r3, #1
 8005840:	4632      	mov	r2, r6
 8005842:	4649      	mov	r1, r9
 8005844:	4640      	mov	r0, r8
 8005846:	47d0      	blx	sl
 8005848:	3001      	adds	r0, #1
 800584a:	d09b      	beq.n	8005784 <_printf_i+0x164>
 800584c:	3501      	adds	r5, #1
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	9903      	ldr	r1, [sp, #12]
 8005852:	1a5b      	subs	r3, r3, r1
 8005854:	42ab      	cmp	r3, r5
 8005856:	dcf2      	bgt.n	800583e <_printf_i+0x21e>
 8005858:	e7eb      	b.n	8005832 <_printf_i+0x212>
 800585a:	2500      	movs	r5, #0
 800585c:	f104 0619 	add.w	r6, r4, #25
 8005860:	e7f5      	b.n	800584e <_printf_i+0x22e>
 8005862:	bf00      	nop
 8005864:	08005f41 	.word	0x08005f41
 8005868:	08005f52 	.word	0x08005f52

0800586c <_putc_r>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	460d      	mov	r5, r1
 8005870:	4614      	mov	r4, r2
 8005872:	4606      	mov	r6, r0
 8005874:	b118      	cbz	r0, 800587e <_putc_r+0x12>
 8005876:	6983      	ldr	r3, [r0, #24]
 8005878:	b90b      	cbnz	r3, 800587e <_putc_r+0x12>
 800587a:	f7ff fbe7 	bl	800504c <__sinit>
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <_putc_r+0x84>)
 8005880:	429c      	cmp	r4, r3
 8005882:	d124      	bne.n	80058ce <_putc_r+0x62>
 8005884:	6874      	ldr	r4, [r6, #4]
 8005886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005888:	07d8      	lsls	r0, r3, #31
 800588a:	d405      	bmi.n	8005898 <_putc_r+0x2c>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	0599      	lsls	r1, r3, #22
 8005890:	d402      	bmi.n	8005898 <_putc_r+0x2c>
 8005892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005894:	f7ff fc8a 	bl	80051ac <__retarget_lock_acquire_recursive>
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	3b01      	subs	r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	da05      	bge.n	80058ae <_putc_r+0x42>
 80058a2:	69a2      	ldr	r2, [r4, #24]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	db1c      	blt.n	80058e2 <_putc_r+0x76>
 80058a8:	b2eb      	uxtb	r3, r5
 80058aa:	2b0a      	cmp	r3, #10
 80058ac:	d019      	beq.n	80058e2 <_putc_r+0x76>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	701d      	strb	r5, [r3, #0]
 80058b6:	b2ed      	uxtb	r5, r5
 80058b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d405      	bmi.n	80058ca <_putc_r+0x5e>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	059b      	lsls	r3, r3, #22
 80058c2:	d402      	bmi.n	80058ca <_putc_r+0x5e>
 80058c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c6:	f7ff fc72 	bl	80051ae <__retarget_lock_release_recursive>
 80058ca:	4628      	mov	r0, r5
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <_putc_r+0x88>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d101      	bne.n	80058d8 <_putc_r+0x6c>
 80058d4:	68b4      	ldr	r4, [r6, #8]
 80058d6:	e7d6      	b.n	8005886 <_putc_r+0x1a>
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <_putc_r+0x8c>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	bf08      	it	eq
 80058de:	68f4      	ldreq	r4, [r6, #12]
 80058e0:	e7d1      	b.n	8005886 <_putc_r+0x1a>
 80058e2:	4629      	mov	r1, r5
 80058e4:	4622      	mov	r2, r4
 80058e6:	4630      	mov	r0, r6
 80058e8:	f000 f84c 	bl	8005984 <__swbuf_r>
 80058ec:	4605      	mov	r5, r0
 80058ee:	e7e3      	b.n	80058b8 <_putc_r+0x4c>
 80058f0:	08005ef0 	.word	0x08005ef0
 80058f4:	08005f10 	.word	0x08005f10
 80058f8:	08005ed0 	.word	0x08005ed0

080058fc <__sread>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	460c      	mov	r4, r1
 8005900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005904:	f000 f94a 	bl	8005b9c <_read_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	bfab      	itete	ge
 800590c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800590e:	89a3      	ldrhlt	r3, [r4, #12]
 8005910:	181b      	addge	r3, r3, r0
 8005912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005916:	bfac      	ite	ge
 8005918:	6563      	strge	r3, [r4, #84]	; 0x54
 800591a:	81a3      	strhlt	r3, [r4, #12]
 800591c:	bd10      	pop	{r4, pc}

0800591e <__swrite>:
 800591e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005922:	461f      	mov	r7, r3
 8005924:	898b      	ldrh	r3, [r1, #12]
 8005926:	05db      	lsls	r3, r3, #23
 8005928:	4605      	mov	r5, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4616      	mov	r6, r2
 800592e:	d505      	bpl.n	800593c <__swrite+0x1e>
 8005930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005934:	2302      	movs	r3, #2
 8005936:	2200      	movs	r2, #0
 8005938:	f000 f91e 	bl	8005b78 <_lseek_r>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	4632      	mov	r2, r6
 800594a:	463b      	mov	r3, r7
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005952:	f7fb ba6f 	b.w	8000e34 <_write_r>

08005956 <__sseek>:
 8005956:	b510      	push	{r4, lr}
 8005958:	460c      	mov	r4, r1
 800595a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595e:	f000 f90b 	bl	8005b78 <_lseek_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	bf15      	itete	ne
 8005968:	6560      	strne	r0, [r4, #84]	; 0x54
 800596a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800596e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005972:	81a3      	strheq	r3, [r4, #12]
 8005974:	bf18      	it	ne
 8005976:	81a3      	strhne	r3, [r4, #12]
 8005978:	bd10      	pop	{r4, pc}

0800597a <__sclose>:
 800597a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597e:	f000 b8c9 	b.w	8005b14 <_close_r>
	...

08005984 <__swbuf_r>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	460e      	mov	r6, r1
 8005988:	4614      	mov	r4, r2
 800598a:	4605      	mov	r5, r0
 800598c:	b118      	cbz	r0, 8005996 <__swbuf_r+0x12>
 800598e:	6983      	ldr	r3, [r0, #24]
 8005990:	b90b      	cbnz	r3, 8005996 <__swbuf_r+0x12>
 8005992:	f7ff fb5b 	bl	800504c <__sinit>
 8005996:	4b21      	ldr	r3, [pc, #132]	; (8005a1c <__swbuf_r+0x98>)
 8005998:	429c      	cmp	r4, r3
 800599a:	d12b      	bne.n	80059f4 <__swbuf_r+0x70>
 800599c:	686c      	ldr	r4, [r5, #4]
 800599e:	69a3      	ldr	r3, [r4, #24]
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	071a      	lsls	r2, r3, #28
 80059a6:	d52f      	bpl.n	8005a08 <__swbuf_r+0x84>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	b36b      	cbz	r3, 8005a08 <__swbuf_r+0x84>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1ac0      	subs	r0, r0, r3
 80059b2:	6963      	ldr	r3, [r4, #20]
 80059b4:	b2f6      	uxtb	r6, r6
 80059b6:	4283      	cmp	r3, r0
 80059b8:	4637      	mov	r7, r6
 80059ba:	dc04      	bgt.n	80059c6 <__swbuf_r+0x42>
 80059bc:	4621      	mov	r1, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	f7ff fab0 	bl	8004f24 <_fflush_r>
 80059c4:	bb30      	cbnz	r0, 8005a14 <__swbuf_r+0x90>
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	701e      	strb	r6, [r3, #0]
 80059d4:	6963      	ldr	r3, [r4, #20]
 80059d6:	3001      	adds	r0, #1
 80059d8:	4283      	cmp	r3, r0
 80059da:	d004      	beq.n	80059e6 <__swbuf_r+0x62>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	07db      	lsls	r3, r3, #31
 80059e0:	d506      	bpl.n	80059f0 <__swbuf_r+0x6c>
 80059e2:	2e0a      	cmp	r6, #10
 80059e4:	d104      	bne.n	80059f0 <__swbuf_r+0x6c>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f7ff fa9b 	bl	8004f24 <_fflush_r>
 80059ee:	b988      	cbnz	r0, 8005a14 <__swbuf_r+0x90>
 80059f0:	4638      	mov	r0, r7
 80059f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <__swbuf_r+0x9c>)
 80059f6:	429c      	cmp	r4, r3
 80059f8:	d101      	bne.n	80059fe <__swbuf_r+0x7a>
 80059fa:	68ac      	ldr	r4, [r5, #8]
 80059fc:	e7cf      	b.n	800599e <__swbuf_r+0x1a>
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <__swbuf_r+0xa0>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	bf08      	it	eq
 8005a04:	68ec      	ldreq	r4, [r5, #12]
 8005a06:	e7ca      	b.n	800599e <__swbuf_r+0x1a>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f80c 	bl	8005a28 <__swsetup_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d0cb      	beq.n	80059ac <__swbuf_r+0x28>
 8005a14:	f04f 37ff 	mov.w	r7, #4294967295
 8005a18:	e7ea      	b.n	80059f0 <__swbuf_r+0x6c>
 8005a1a:	bf00      	nop
 8005a1c:	08005ef0 	.word	0x08005ef0
 8005a20:	08005f10 	.word	0x08005f10
 8005a24:	08005ed0 	.word	0x08005ed0

08005a28 <__swsetup_r>:
 8005a28:	4b32      	ldr	r3, [pc, #200]	; (8005af4 <__swsetup_r+0xcc>)
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	681d      	ldr	r5, [r3, #0]
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	b125      	cbz	r5, 8005a3e <__swsetup_r+0x16>
 8005a34:	69ab      	ldr	r3, [r5, #24]
 8005a36:	b913      	cbnz	r3, 8005a3e <__swsetup_r+0x16>
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fb07 	bl	800504c <__sinit>
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <__swsetup_r+0xd0>)
 8005a40:	429c      	cmp	r4, r3
 8005a42:	d10f      	bne.n	8005a64 <__swsetup_r+0x3c>
 8005a44:	686c      	ldr	r4, [r5, #4]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a4c:	0719      	lsls	r1, r3, #28
 8005a4e:	d42c      	bmi.n	8005aaa <__swsetup_r+0x82>
 8005a50:	06dd      	lsls	r5, r3, #27
 8005a52:	d411      	bmi.n	8005a78 <__swsetup_r+0x50>
 8005a54:	2309      	movs	r3, #9
 8005a56:	6033      	str	r3, [r6, #0]
 8005a58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	e03e      	b.n	8005ae2 <__swsetup_r+0xba>
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <__swsetup_r+0xd4>)
 8005a66:	429c      	cmp	r4, r3
 8005a68:	d101      	bne.n	8005a6e <__swsetup_r+0x46>
 8005a6a:	68ac      	ldr	r4, [r5, #8]
 8005a6c:	e7eb      	b.n	8005a46 <__swsetup_r+0x1e>
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <__swsetup_r+0xd8>)
 8005a70:	429c      	cmp	r4, r3
 8005a72:	bf08      	it	eq
 8005a74:	68ec      	ldreq	r4, [r5, #12]
 8005a76:	e7e6      	b.n	8005a46 <__swsetup_r+0x1e>
 8005a78:	0758      	lsls	r0, r3, #29
 8005a7a:	d512      	bpl.n	8005aa2 <__swsetup_r+0x7a>
 8005a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7e:	b141      	cbz	r1, 8005a92 <__swsetup_r+0x6a>
 8005a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a84:	4299      	cmp	r1, r3
 8005a86:	d002      	beq.n	8005a8e <__swsetup_r+0x66>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7fe ff83 	bl	8004994 <_free_r>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6363      	str	r3, [r4, #52]	; 0x34
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f043 0308 	orr.w	r3, r3, #8
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	b94b      	cbnz	r3, 8005ac2 <__swsetup_r+0x9a>
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab8:	d003      	beq.n	8005ac2 <__swsetup_r+0x9a>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7ff fb9b 	bl	80051f8 <__smakebuf_r>
 8005ac2:	89a0      	ldrh	r0, [r4, #12]
 8005ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac8:	f010 0301 	ands.w	r3, r0, #1
 8005acc:	d00a      	beq.n	8005ae4 <__swsetup_r+0xbc>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	6963      	ldr	r3, [r4, #20]
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	61a3      	str	r3, [r4, #24]
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	b943      	cbnz	r3, 8005aee <__swsetup_r+0xc6>
 8005adc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ae0:	d1ba      	bne.n	8005a58 <__swsetup_r+0x30>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	0781      	lsls	r1, r0, #30
 8005ae6:	bf58      	it	pl
 8005ae8:	6963      	ldrpl	r3, [r4, #20]
 8005aea:	60a3      	str	r3, [r4, #8]
 8005aec:	e7f4      	b.n	8005ad8 <__swsetup_r+0xb0>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e7f7      	b.n	8005ae2 <__swsetup_r+0xba>
 8005af2:	bf00      	nop
 8005af4:	2000002c 	.word	0x2000002c
 8005af8:	08005ef0 	.word	0x08005ef0
 8005afc:	08005f10 	.word	0x08005f10
 8005b00:	08005ed0 	.word	0x08005ed0

08005b04 <abort>:
 8005b04:	b508      	push	{r3, lr}
 8005b06:	2006      	movs	r0, #6
 8005b08:	f000 f882 	bl	8005c10 <raise>
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f7fe fdb9 	bl	8004684 <_exit>
	...

08005b14 <_close_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d06      	ldr	r5, [pc, #24]	; (8005b30 <_close_r+0x1c>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	f7fe fdd7 	bl	80046d2 <_close>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_close_r+0x1a>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_close_r+0x1a>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	200001d8 	.word	0x200001d8

08005b34 <_fstat_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	; (8005b54 <_fstat_r+0x20>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	f7fe fdd2 	bl	80046ea <_fstat>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d102      	bne.n	8005b50 <_fstat_r+0x1c>
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	b103      	cbz	r3, 8005b50 <_fstat_r+0x1c>
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	bf00      	nop
 8005b54:	200001d8 	.word	0x200001d8

08005b58 <_isatty_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <_isatty_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fe fdd1 	bl	800470a <_isatty>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_isatty_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_isatty_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200001d8 	.word	0x200001d8

08005b78 <_lseek_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d07      	ldr	r5, [pc, #28]	; (8005b98 <_lseek_r+0x20>)
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fe fdca 	bl	8004720 <_lseek>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_lseek_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_lseek_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200001d8 	.word	0x200001d8

08005b9c <_read_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_read_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fe fd74 	bl	8004698 <_read>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_read_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_read_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200001d8 	.word	0x200001d8

08005bc0 <_raise_r>:
 8005bc0:	291f      	cmp	r1, #31
 8005bc2:	b538      	push	{r3, r4, r5, lr}
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	d904      	bls.n	8005bd4 <_raise_r+0x14>
 8005bca:	2316      	movs	r3, #22
 8005bcc:	6003      	str	r3, [r0, #0]
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bd6:	b112      	cbz	r2, 8005bde <_raise_r+0x1e>
 8005bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bdc:	b94b      	cbnz	r3, 8005bf2 <_raise_r+0x32>
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 f830 	bl	8005c44 <_getpid_r>
 8005be4:	462a      	mov	r2, r5
 8005be6:	4601      	mov	r1, r0
 8005be8:	4620      	mov	r0, r4
 8005bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bee:	f000 b817 	b.w	8005c20 <_kill_r>
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d00a      	beq.n	8005c0c <_raise_r+0x4c>
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	d103      	bne.n	8005c02 <_raise_r+0x42>
 8005bfa:	2316      	movs	r3, #22
 8005bfc:	6003      	str	r3, [r0, #0]
 8005bfe:	2001      	movs	r0, #1
 8005c00:	e7e7      	b.n	8005bd2 <_raise_r+0x12>
 8005c02:	2400      	movs	r4, #0
 8005c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c08:	4628      	mov	r0, r5
 8005c0a:	4798      	blx	r3
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7e0      	b.n	8005bd2 <_raise_r+0x12>

08005c10 <raise>:
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <raise+0xc>)
 8005c12:	4601      	mov	r1, r0
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	f7ff bfd3 	b.w	8005bc0 <_raise_r>
 8005c1a:	bf00      	nop
 8005c1c:	2000002c 	.word	0x2000002c

08005c20 <_kill_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d07      	ldr	r5, [pc, #28]	; (8005c40 <_kill_r+0x20>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	f7fe fd19 	bl	8004664 <_kill>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d102      	bne.n	8005c3c <_kill_r+0x1c>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	b103      	cbz	r3, 8005c3c <_kill_r+0x1c>
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	200001d8 	.word	0x200001d8

08005c44 <_getpid_r>:
 8005c44:	f7fe bd06 	b.w	8004654 <_getpid>

08005c48 <_init>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr

08005c54 <_fini>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr
