
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080042f4  080042f4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f4  080042f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080042fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  0800438c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800438c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e367  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002441  00000000  00000000  0002e427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00030868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e0d  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b007  00000000  00000000  000366ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ac68  00000000  00000000  000416b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c31c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  0009c370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0009f17c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0009f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800400c 	.word	0x0800400c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800400c 	.word	0x0800400c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	460b      	mov	r3, r1
 800028c:	817b      	strh	r3, [r7, #10]
 800028e:	4613      	mov	r3, r2
 8000290:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <I2C_TransferHandling+0x54>)
 80002a0:	4013      	ands	r3, r2
 80002a2:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80002a4:	897b      	ldrh	r3, [r7, #10]
 80002a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80002aa:	7a7b      	ldrb	r3, [r7, #9]
 80002ac:	041b      	lsls	r3, r3, #16
 80002ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80002b2:	431a      	orrs	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	431a      	orrs	r2, r3
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	4313      	orrs	r3, r2
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	4313      	orrs	r3, r2
 80002c0:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	605a      	str	r2, [r3, #4]
}  
 80002c8:	bf00      	nop
 80002ca:	371c      	adds	r7, #28
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	fc009800 	.word	0xfc009800

080002d8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000302:	b2db      	uxtb	r3, r3
}  
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000328:	68ba      	ldr	r2, [r7, #8]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4013      	ands	r3, r2
 800032e:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d002      	beq.n	800033c <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000336:	2301      	movs	r3, #1
 8000338:	73fb      	strb	r3, [r7, #15]
 800033a:	e001      	b.n	8000340 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
}  
 8000342:	4618      	mov	r0, r3
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	61da      	str	r2, [r3, #28]
  }
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800036c:	b480      	push	{r7}
 800036e:	b08b      	sub	sp, #44	; 0x2c
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	623b      	str	r3, [r7, #32]
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000394:	4b91      	ldr	r3, [pc, #580]	; (80005dc <RCC_GetClocksFreq+0x270>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 030c 	and.w	r3, r3, #12
 800039c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800039e:	6a3b      	ldr	r3, [r7, #32]
 80003a0:	2b08      	cmp	r3, #8
 80003a2:	d011      	beq.n	80003c8 <RCC_GetClocksFreq+0x5c>
 80003a4:	6a3b      	ldr	r3, [r7, #32]
 80003a6:	2b08      	cmp	r3, #8
 80003a8:	d837      	bhi.n	800041a <RCC_GetClocksFreq+0xae>
 80003aa:	6a3b      	ldr	r3, [r7, #32]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <RCC_GetClocksFreq+0x4c>
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	d004      	beq.n	80003c0 <RCC_GetClocksFreq+0x54>
 80003b6:	e030      	b.n	800041a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a89      	ldr	r2, [pc, #548]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 80003bc:	601a      	str	r2, [r3, #0]
      break;
 80003be:	e030      	b.n	8000422 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a87      	ldr	r2, [pc, #540]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 80003c4:	601a      	str	r2, [r3, #0]
      break;
 80003c6:	e02c      	b.n	8000422 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003c8:	4b84      	ldr	r3, [pc, #528]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80003d0:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003d2:	4b82      	ldr	r3, [pc, #520]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003da:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80003dc:	69fb      	ldr	r3, [r7, #28]
 80003de:	0c9b      	lsrs	r3, r3, #18
 80003e0:	3302      	adds	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	4a7d      	ldr	r2, [pc, #500]	; (80005e4 <RCC_GetClocksFreq+0x278>)
 80003ee:	fb02 f303 	mul.w	r3, r2, r3
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
 80003f4:	e00d      	b.n	8000412 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80003f6:	4b79      	ldr	r3, [pc, #484]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80003f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	3301      	adds	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000402:	4a77      	ldr	r2, [pc, #476]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	fbb2 f2f3 	udiv	r2, r2, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	fb02 f303 	mul.w	r3, r2, r3
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000416:	601a      	str	r2, [r3, #0]
      break;
 8000418:	e003      	b.n	8000422 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a70      	ldr	r2, [pc, #448]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 800041e:	601a      	str	r2, [r3, #0]
      break;
 8000420:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000422:	4b6e      	ldr	r3, [pc, #440]	; (80005dc <RCC_GetClocksFreq+0x270>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800042a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	091b      	lsrs	r3, r3, #4
 8000430:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000432:	4a6d      	ldr	r2, [pc, #436]	; (80005e8 <RCC_GetClocksFreq+0x27c>)
 8000434:	6a3b      	ldr	r3, [r7, #32]
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	40da      	lsrs	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800044a:	4b64      	ldr	r3, [pc, #400]	; (80005dc <RCC_GetClocksFreq+0x270>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000452:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800045a:	4a63      	ldr	r2, [pc, #396]	; (80005e8 <RCC_GetClocksFreq+0x27c>)
 800045c:	6a3b      	ldr	r3, [r7, #32]
 800045e:	4413      	add	r3, r2
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	40da      	lsrs	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000472:	4b5a      	ldr	r3, [pc, #360]	; (80005dc <RCC_GetClocksFreq+0x270>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800047a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	0adb      	lsrs	r3, r3, #11
 8000480:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000482:	4a59      	ldr	r2, [pc, #356]	; (80005e8 <RCC_GetClocksFreq+0x27c>)
 8000484:	6a3b      	ldr	r3, [r7, #32]
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	40da      	lsrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800049a:	4b50      	ldr	r3, [pc, #320]	; (80005dc <RCC_GetClocksFreq+0x270>)
 800049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80004a2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	091b      	lsrs	r3, r3, #4
 80004a8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80004aa:	4a50      	ldr	r2, [pc, #320]	; (80005ec <RCC_GetClocksFreq+0x280>)
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d006      	beq.n	80004ce <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80004c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	e003      	b.n	80004d6 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80004d6:	4b41      	ldr	r3, [pc, #260]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80004de:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80004e0:	6a3b      	ldr	r3, [r7, #32]
 80004e2:	0a5b      	lsrs	r3, r3, #9
 80004e4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80004e6:	4a41      	ldr	r2, [pc, #260]	; (80005ec <RCC_GetClocksFreq+0x280>)
 80004e8:	6a3b      	ldr	r3, [r7, #32]
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	f003 0310 	and.w	r3, r3, #16
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80004fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	fbb2 f2f3 	udiv	r2, r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	e003      	b.n	8000512 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <RCC_GetClocksFreq+0x270>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0310 	and.w	r3, r3, #16
 800051a:	2b10      	cmp	r3, #16
 800051c:	d003      	beq.n	8000526 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a2f      	ldr	r2, [pc, #188]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	e003      	b.n	800052e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <RCC_GetClocksFreq+0x270>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0320 	and.w	r3, r3, #32
 8000536:	2b20      	cmp	r3, #32
 8000538:	d003      	beq.n	8000542 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <RCC_GetClocksFreq+0x274>)
 800053e:	61da      	str	r2, [r3, #28]
 8000540:	e003      	b.n	800054a <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <RCC_GetClocksFreq+0x270>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000556:	d10d      	bne.n	8000574 <RCC_GetClocksFreq+0x208>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800055e:	429a      	cmp	r2, r3
 8000560:	d108      	bne.n	8000574 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	429a      	cmp	r2, r3
 8000568:	d104      	bne.n	8000574 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	005a      	lsls	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	621a      	str	r2, [r3, #32]
 8000572:	e003      	b.n	800057c <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <RCC_GetClocksFreq+0x270>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000588:	d10d      	bne.n	80005a6 <RCC_GetClocksFreq+0x23a>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000590:	429a      	cmp	r2, r3
 8000592:	d108      	bne.n	80005a6 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	429a      	cmp	r2, r3
 800059a:	d104      	bne.n	80005a6 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	005a      	lsls	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
 80005a4:	e003      	b.n	80005ae <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68da      	ldr	r2, [r3, #12]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d104      	bne.n	80005c4 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
 80005c2:	e029      	b.n	8000618 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <RCC_GetClocksFreq+0x270>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10f      	bne.n	80005f0 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
 80005d8:	e01e      	b.n	8000618 <RCC_GetClocksFreq+0x2ac>
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	007a1200 	.word	0x007a1200
 80005e4:	003d0900 	.word	0x003d0900
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80005f0:	4b66      	ldr	r3, [pc, #408]	; (800078c <RCC_GetClocksFreq+0x420>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d104      	bne.n	8000606 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
 8000604:	e008      	b.n	8000618 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000606:	4b61      	ldr	r3, [pc, #388]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	2b03      	cmp	r3, #3
 8000610:	d102      	bne.n	8000618 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a5e      	ldr	r2, [pc, #376]	; (8000790 <RCC_GetClocksFreq+0x424>)
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000618:	4b5c      	ldr	r3, [pc, #368]	; (800078c <RCC_GetClocksFreq+0x420>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
 800062c:	e021      	b.n	8000672 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800062e:	4b57      	ldr	r3, [pc, #348]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063a:	d104      	bne.n	8000646 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
 8000644:	e015      	b.n	8000672 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000646:	4b51      	ldr	r3, [pc, #324]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800064e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000652:	d104      	bne.n	800065e <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
 800065c:	e009      	b.n	8000672 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800066a:	d102      	bne.n	8000672 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a48      	ldr	r2, [pc, #288]	; (8000790 <RCC_GetClocksFreq+0x424>)
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800067a:	2b00      	cmp	r3, #0
 800067c:	d104      	bne.n	8000688 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
 8000686:	e021      	b.n	80006cc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000688:	4b40      	ldr	r3, [pc, #256]	; (800078c <RCC_GetClocksFreq+0x420>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000694:	d104      	bne.n	80006a0 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
 800069e:	e015      	b.n	80006cc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <RCC_GetClocksFreq+0x420>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80006a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80006ac:	d104      	bne.n	80006b8 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
 80006b6:	e009      	b.n	80006cc <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <RCC_GetClocksFreq+0x420>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80006c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80006c4:	d102      	bne.n	80006cc <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a31      	ldr	r2, [pc, #196]	; (8000790 <RCC_GetClocksFreq+0x424>)
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <RCC_GetClocksFreq+0x420>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	635a      	str	r2, [r3, #52]	; 0x34
 80006e0:	e021      	b.n	8000726 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <RCC_GetClocksFreq+0x420>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80006ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ee:	d104      	bne.n	80006fa <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
 80006f8:	e015      	b.n	8000726 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <RCC_GetClocksFreq+0x420>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000706:	d104      	bne.n	8000712 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
 8000710:	e009      	b.n	8000726 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800071a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800071e:	d102      	bne.n	8000726 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <RCC_GetClocksFreq+0x424>)
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800073a:	e021      	b.n	8000780 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <RCC_GetClocksFreq+0x420>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000748:	d104      	bne.n	8000754 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000752:	e015      	b.n	8000780 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <RCC_GetClocksFreq+0x420>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800075c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000760:	d104      	bne.n	800076c <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000768:	639a      	str	r2, [r3, #56]	; 0x38
}
 800076a:	e009      	b.n	8000780 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <RCC_GetClocksFreq+0x420>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000774:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000778:	d102      	bne.n	8000780 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <RCC_GetClocksFreq+0x424>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000780:	bf00      	nop
 8000782:	372c      	adds	r7, #44	; 0x2c
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	007a1200 	.word	0x007a1200

08000794 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	4613      	mov	r3, r2
 80007c4:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80007ea:	2201      	movs	r2, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d103      	bne.n	8000802 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	e005      	b.n	800080e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d102      	bne.n	800080e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3308      	adds	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000820:	e006      	b.n	8000830 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	6819      	ldr	r1, [r3, #0]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	43da      	mvns	r2, r3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	400a      	ands	r2, r1
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3724      	adds	r7, #36	; 0x24
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	69da      	ldr	r2, [r3, #28]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	4013      	ands	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000856:	2301      	movs	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e001      	b.n	8000860 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800086e:	b480      	push	{r7}
 8000870:	b087      	sub	sp, #28
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b29b      	uxth	r3, r3
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000898:	2201      	movs	r2, #1
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d105      	bne.n	80008b4 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	4013      	ands	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e00d      	b.n	80008d0 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d105      	bne.n	80008c6 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4013      	ands	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e004      	b.n	80008d0 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4013      	ands	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	0c1b      	lsrs	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80008d6:	2201      	movs	r2, #1
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <USART_GetITStatus+0x8e>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80008f6:	2301      	movs	r3, #1
 80008f8:	74fb      	strb	r3, [r7, #19]
 80008fa:	e001      	b.n	8000900 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000900:	7cfb      	ldrb	r3, [r7, #19]
}
 8000902:	4618      	mov	r0, r3
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 031f 	and.w	r3, r3, #31
 8000920:	2201      	movs	r2, #1
 8000922:	fa02 f103 	lsl.w	r1, r2, r3
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <NVIC_EnableIRQ+0x30>)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100

08000944 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <uart_get_char+0x48>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d011      	beq.n	800097c <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <uart_get_char+0x4c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	b2d1      	uxtb	r1, r2
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <uart_get_char+0x4c>)
 8000964:	7011      	strb	r1, [r2, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <uart_get_char+0x50>)
 800096a:	5c9b      	ldrb	r3, [r3, r2]
 800096c:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <uart_get_char+0x48>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <uart_get_char+0x48>)
 800097a:	701a      	strb	r2, [r3, #0]
    }
    return val;
 800097c:	79fb      	ldrb	r3, [r7, #7]
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200001ae 	.word	0x200001ae
 8000990:	200001ad 	.word	0x200001ad
 8000994:	200000ac 	.word	0x200000ac

08000998 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <uart_put_char+0x30>)
 80009aa:	f7ff fef3 	bl	8000794 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80009ae:	bf00      	nop
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <uart_put_char+0x30>)
 80009b4:	f7ff ff42 	bl	800083c <USART_GetFlagStatus>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <uart_put_char+0x18>
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400

080009cc <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e012      	b.n	8000a06 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d102      	bne.n	80009f2 <_write_r+0x26>
            uart_put_char('\r');
 80009ec:	200d      	movs	r0, #13
 80009ee:	f7ff ffd3 	bl	8000998 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffcc 	bl	8000998 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbe8      	blt.n	80009e0 <_write_r+0x14>
    }

    return len;
 8000a0e:	683b      	ldr	r3, [r7, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <USART2_IRQHandler+0x5c>)
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <USART2_IRQHandler+0x60>)
 8000a20:	f7ff ff25 	bl	800086e <USART_GetITStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d021      	beq.n	8000a6e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <USART2_IRQHandler+0x60>)
 8000a2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <USART2_IRQHandler+0x64>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	b2d0      	uxtb	r0, r2
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <USART2_IRQHandler+0x64>)
 8000a3c:	7010      	strb	r0, [r2, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	b2c9      	uxtb	r1, r1
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <USART2_IRQHandler+0x68>)
 8000a44:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <USART2_IRQHandler+0x6c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2bff      	cmp	r3, #255	; 0xff
 8000a4e:	d107      	bne.n	8000a60 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <USART2_IRQHandler+0x70>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <USART2_IRQHandler+0x70>)
 8000a5c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000a5e:	e006      	b.n	8000a6e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <USART2_IRQHandler+0x6c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <USART2_IRQHandler+0x6c>)
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	00050105 	.word	0x00050105
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	200001ac 	.word	0x200001ac
 8000a80:	200000ac 	.word	0x200000ac
 8000a84:	200001ae 	.word	0x200001ae
 8000a88:	200001ad 	.word	0x200001ad

08000a8c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000a94:	4b86      	ldr	r3, [pc, #536]	; (8000cb0 <uart_init+0x224>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fa7d 	bl	8002f9c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000aa2:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <uart_init+0x224>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fa76 	bl	8002f9c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000ab0:	4b80      	ldr	r3, [pc, #512]	; (8000cb4 <uart_init+0x228>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a7f      	ldr	r2, [pc, #508]	; (8000cb4 <uart_init+0x228>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000abc:	4b7d      	ldr	r3, [pc, #500]	; (8000cb4 <uart_init+0x228>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	4a7c      	ldr	r2, [pc, #496]	; (8000cb4 <uart_init+0x228>)
 8000ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac6:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ad2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ad6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ad8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ae6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000af6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000af8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b02:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b06:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b16:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b22:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b26:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b2c:	889b      	ldrh	r3, [r3, #4]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b34:	f023 030c 	bic.w	r3, r3, #12
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000b3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b44:	8892      	ldrh	r2, [r2, #4]
 8000b46:	b292      	uxth	r2, r2
 8000b48:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b58:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b64:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b68:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b78:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b84:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b88:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <uart_init+0x22c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	; (8000cb8 <uart_init+0x22c>)
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000b96:	4b48      	ldr	r3, [pc, #288]	; (8000cb8 <uart_init+0x22c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a47      	ldr	r2, [pc, #284]	; (8000cb8 <uart_init+0x22c>)
 8000b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba0:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ba2:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <uart_init+0x22c>)
 8000ba4:	4a44      	ldr	r2, [pc, #272]	; (8000cb8 <uart_init+0x22c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <uart_init+0x22c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a42      	ldr	r2, [pc, #264]	; (8000cb8 <uart_init+0x22c>)
 8000bb0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bb4:	f023 030c 	bic.w	r3, r3, #12
 8000bb8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000bba:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <uart_init+0x22c>)
 8000bbc:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <uart_init+0x22c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <uart_init+0x22c>)
 8000bc4:	4a3c      	ldr	r2, [pc, #240]	; (8000cb8 <uart_init+0x22c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <uart_init+0x22c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <uart_init+0x22c>)
 8000bd0:	f043 030c 	orr.w	r3, r3, #12
 8000bd4:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <uart_init+0x22c>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <uart_init+0x22c>)
 8000bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <uart_init+0x22c>)
 8000be4:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <uart_init+0x22c>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bee:	2300      	movs	r3, #0
 8000bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fbb6 	bl	800036c <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <uart_init+0x22c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c12:	005a      	lsls	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	fb01 f202 	mul.w	r2, r1, r2
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c30:	e00d      	b.n	8000c4e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	fb01 f202 	mul.w	r2, r1, r2
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d302      	bcc.n	8000c5e <uart_init+0x1d2>
        divider++;
 8000c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <uart_init+0x22c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c6c:	085b      	lsrs	r3, r3, #1
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c76:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <uart_init+0x22c>)
 8000c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c86:	b292      	uxth	r2, r2
 8000c88:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <uart_init+0x22c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <uart_init+0x22c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4908      	ldr	r1, [pc, #32]	; (8000cbc <uart_init+0x230>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <uart_init+0x22c>)
 8000c9c:	f7ff fd8c 	bl	80007b8 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000ca0:	2026      	movs	r0, #38	; 0x26
 8000ca2:	f7ff fe35 	bl	8000910 <NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000002c 	.word	0x2000002c
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	00050105 	.word	0x00050105

08000cc0 <fgcolor>:
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000cca:	2316      	movs	r3, #22
 8000ccc:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d904      	bls.n	8000cde <fgcolor+0x1e>
	  type = 1;                // bold text
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	3b08      	subs	r3, #8
 8000cdc:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	331e      	adds	r3, #30
 8000ce4:	211b      	movs	r1, #27
 8000ce6:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <fgcolor+0x34>)
 8000ce8:	f002 f836 	bl	8002d58 <iprintf>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08004024 	.word	0x08004024

08000cf8 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 8000cfc:	211b      	movs	r1, #27
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <clrscr+0x18>)
 8000d00:	f002 f82a 	bl	8002d58 <iprintf>
    printf("%c[J", ESC);
 8000d04:	211b      	movs	r1, #27
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <clrscr+0x1c>)
 8000d08:	f002 f826 	bl	8002d58 <iprintf>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08004050 	.word	0x08004050
 8000d14:	08004058 	.word	0x08004058

08000d18 <gotoxy>:
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	211b      	movs	r1, #27
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <gotoxy+0x20>)
 8000d2a:	f002 f815 	bl	8002d58 <iprintf>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08004068 	.word	0x08004068

08000d3c <drawBox>:
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d15e      	bne.n	8000e0e <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
 8000d54:	e019      	b.n	8000d8a <drawBox+0x4e>
			 gotoxy(x1,y);
 8000d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff ffdd 	bl	8000d18 <gotoxy>
			 if (y==y1){
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d103      	bne.n	8000d6e <drawBox+0x32>
				printf("%c", 201);
 8000d66:	20c9      	movs	r0, #201	; 0xc9
 8000d68:	f002 f80e 	bl	8002d88 <putchar>
 8000d6c:	e00a      	b.n	8000d84 <drawBox+0x48>
			 }
			 else if(y==y2){
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d103      	bne.n	8000d7e <drawBox+0x42>
				printf("%c", 200);
 8000d76:	20c8      	movs	r0, #200	; 0xc8
 8000d78:	f002 f806 	bl	8002d88 <putchar>
 8000d7c:	e002      	b.n	8000d84 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8000d7e:	20ba      	movs	r0, #186	; 0xba
 8000d80:	f002 f802 	bl	8002d88 <putchar>
		 for(int y = y1; y <= y2; y++){
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3301      	adds	r3, #1
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dde1      	ble.n	8000d56 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	e014      	b.n	8000dc2 <drawBox+0x86>
   			 if(x!=x1){
 8000d98:	6a3a      	ldr	r2, [r7, #32]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d00d      	beq.n	8000dbc <drawBox+0x80>
				 gotoxy(x,y1);
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6a38      	ldr	r0, [r7, #32]
 8000da4:	f7ff ffb8 	bl	8000d18 <gotoxy>
				 printf("%c", 205);
 8000da8:	20cd      	movs	r0, #205	; 0xcd
 8000daa:	f001 ffed 	bl	8002d88 <putchar>
				 gotoxy(x,y2);
 8000dae:	6839      	ldr	r1, [r7, #0]
 8000db0:	6a38      	ldr	r0, [r7, #32]
 8000db2:	f7ff ffb1 	bl	8000d18 <gotoxy>
				 printf("%c", 205);
 8000db6:	20cd      	movs	r0, #205	; 0xcd
 8000db8:	f001 ffe6 	bl	8002d88 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dde6      	ble.n	8000d98 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e019      	b.n	8000e04 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8000dd0:	69f9      	ldr	r1, [r7, #28]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa0 	bl	8000d18 <gotoxy>
   			 if (y==y1){
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d103      	bne.n	8000de8 <drawBox+0xac>
				printf("%c", 187);
 8000de0:	20bb      	movs	r0, #187	; 0xbb
 8000de2:	f001 ffd1 	bl	8002d88 <putchar>
 8000de6:	e00a      	b.n	8000dfe <drawBox+0xc2>
			 }
			 else if(y==y2){
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d103      	bne.n	8000df8 <drawBox+0xbc>
				printf("%c", 188);
 8000df0:	20bc      	movs	r0, #188	; 0xbc
 8000df2:	f001 ffc9 	bl	8002d88 <putchar>
 8000df6:	e002      	b.n	8000dfe <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8000df8:	20ba      	movs	r0, #186	; 0xba
 8000dfa:	f001 ffc5 	bl	8002d88 <putchar>
   		 for(int y = y1; y <= y2; y++){
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dde1      	ble.n	8000dd0 <drawBox+0x94>
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
 8000e0c:	e05d      	b.n	8000eca <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	e019      	b.n	8000e48 <drawBox+0x10c>
			 gotoxy(x1,y);
 8000e14:	69b9      	ldr	r1, [r7, #24]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ff7e 	bl	8000d18 <gotoxy>
			 if (y==y1){
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d103      	bne.n	8000e2c <drawBox+0xf0>
				printf("%c", 218);
 8000e24:	20da      	movs	r0, #218	; 0xda
 8000e26:	f001 ffaf 	bl	8002d88 <putchar>
 8000e2a:	e00a      	b.n	8000e42 <drawBox+0x106>
			 else if(y==y2){
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d103      	bne.n	8000e3c <drawBox+0x100>
				printf("%c", 192);
 8000e34:	20c0      	movs	r0, #192	; 0xc0
 8000e36:	f001 ffa7 	bl	8002d88 <putchar>
 8000e3a:	e002      	b.n	8000e42 <drawBox+0x106>
				printf("%c", 179);
 8000e3c:	20b3      	movs	r0, #179	; 0xb3
 8000e3e:	f001 ffa3 	bl	8002d88 <putchar>
		for(int y = y1; y <= y2; y++){
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dde1      	ble.n	8000e14 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e014      	b.n	8000e80 <drawBox+0x144>
			if(x!=x1){
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d00d      	beq.n	8000e7a <drawBox+0x13e>
				 gotoxy(x,y1);
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ff59 	bl	8000d18 <gotoxy>
				 printf("%c", 196);
 8000e66:	20c4      	movs	r0, #196	; 0xc4
 8000e68:	f001 ff8e 	bl	8002d88 <putchar>
				 gotoxy(x,y2);
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff52 	bl	8000d18 <gotoxy>
				 printf("%c", 196);
 8000e74:	20c4      	movs	r0, #196	; 0xc4
 8000e76:	f001 ff87 	bl	8002d88 <putchar>
		for(int x = x1; x <= x2; x++){
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dde6      	ble.n	8000e56 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e019      	b.n	8000ec2 <drawBox+0x186>
			 gotoxy(x2,y);
 8000e8e:	6939      	ldr	r1, [r7, #16]
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff41 	bl	8000d18 <gotoxy>
			if (y==y1){
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d103      	bne.n	8000ea6 <drawBox+0x16a>
				printf("%c", 191);
 8000e9e:	20bf      	movs	r0, #191	; 0xbf
 8000ea0:	f001 ff72 	bl	8002d88 <putchar>
 8000ea4:	e00a      	b.n	8000ebc <drawBox+0x180>
			 else if(y==y2){
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d103      	bne.n	8000eb6 <drawBox+0x17a>
				printf("%c", 217);
 8000eae:	20d9      	movs	r0, #217	; 0xd9
 8000eb0:	f001 ff6a 	bl	8002d88 <putchar>
 8000eb4:	e002      	b.n	8000ebc <drawBox+0x180>
				printf("%c", 179);
 8000eb6:	20b3      	movs	r0, #179	; 0xb3
 8000eb8:	f001 ff66 	bl	8002d88 <putchar>
		for(int y = y1; y <= y2; y++){
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	dde1      	ble.n	8000e8e <drawBox+0x152>
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <updateBullets>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletHead;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000ee0:	e010      	b.n	8000f04 <updateBullets+0x32>
		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	441a      	add	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	441a      	add	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1eb      	bne.n	8000ee2 <updateBullets+0x10>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

	bulletNode_t* current = gameState->bulletHead;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000f26:	e00f      	b.n	8000f48 <detectBulletHit+0x30>


		if(fpToInt(current->bullet.nextPosition.y)<=1){ //TODO: add other boundaries
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fc11 	bl	8001754 <fpToInt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	dc04      	bgt.n	8000f42 <detectBulletHit+0x2a>
			deleteBulletNode(&(gameState->bulletHead), current);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 f80f 	bl	8001f60 <deleteBulletNode>
		}
		current = current->nextBulletAddress;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1ec      	bne.n	8000f28 <detectBulletHit+0x10>

	}
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <drawBullets>:

void drawBullets(gameState_t* gameState){
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletHead;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000f66:	e030      	b.n	8000fca <drawBullets+0x72>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fbf1 	bl	8001754 <fpToInt>
 8000f72:	4604      	mov	r4, r0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fbeb 	bl	8001754 <fpToInt>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fec8 	bl	8000d18 <gotoxy>
		printf(" ");
 8000f88:	2020      	movs	r0, #32
 8000f8a:	f001 fefd 	bl	8002d88 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y));
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fbde 	bl	8001754 <fpToInt>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fbd8 	bl	8001754 <fpToInt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff feb5 	bl	8000d18 <gotoxy>
		printf("O");
 8000fae:	204f      	movs	r0, #79	; 0x4f
 8000fb0:	f001 feea 	bl	8002d88 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1cb      	bne.n	8000f68 <drawBullets+0x10>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
	...

08000fdc <NVIC_EnableIRQ>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2201      	movs	r2, #1
 8000fee:	fa02 f103 	lsl.w	r1, r2, r3
 8000ff2:	4a06      	ldr	r2, [pc, #24]	; (800100c <NVIC_EnableIRQ+0x30>)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	095b      	lsrs	r3, r3, #5
 8000ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	da0b      	bge.n	800103c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <NVIC_SetPriority+0x4c>)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	3b04      	subs	r3, #4
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800103a:	e009      	b.n	8001050 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <NVIC_SetPriority+0x50>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	e000e100 	.word	0xe000e100

08001064 <initJoystick>:
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <initJoystick+0x120>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a45      	ldr	r2, [pc, #276]	; (8001184 <initJoystick+0x120>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <initJoystick+0x120>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4a42      	ldr	r2, [pc, #264]	; (8001184 <initJoystick+0x120>)
 800107a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <initJoystick+0x120>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <initJoystick+0x120>)
 8001086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800108a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 800108c:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <initJoystick+0x124>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3d      	ldr	r2, [pc, #244]	; (8001188 <initJoystick+0x124>)
 8001092:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001096:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <initJoystick+0x124>)
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <initJoystick+0x124>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <initJoystick+0x124>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a38      	ldr	r2, [pc, #224]	; (8001188 <initJoystick+0x124>)
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <initJoystick+0x124>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a35      	ldr	r2, [pc, #212]	; (8001188 <initJoystick+0x124>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	60d3      	str	r3, [r2, #12]
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80010b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80010c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80010d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80010e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <initJoystick+0x124>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <initJoystick+0x124>)
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <initJoystick+0x124>)
 8001102:	4a21      	ldr	r2, [pc, #132]	; (8001188 <initJoystick+0x124>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <initJoystick+0x124>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <initJoystick+0x124>)
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <initJoystick+0x124>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <initJoystick+0x124>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <initJoystick+0x128>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <initJoystick+0x128>)
 8001126:	f023 030c 	bic.w	r3, r3, #12
 800112a:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <initJoystick+0x128>)
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <initJoystick+0x128>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <initJoystick+0x128>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <initJoystick+0x128>)
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <initJoystick+0x128>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <initJoystick+0x128>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <initJoystick+0x128>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <initJoystick+0x128>)
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <initJoystick+0x128>)
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <initJoystick+0x128>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <initJoystick+0x128>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <initJoystick+0x128>)
 8001166:	f023 0303 	bic.w	r3, r3, #3
 800116a:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <initJoystick+0x128>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <initJoystick+0x128>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	60d3      	str	r3, [r2, #12]

}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800

08001190 <centerIsPressed>:



uint8_t centerIsPressed(){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <centerIsPressed+0x50>)
 8001196:	8a1b      	ldrh	r3, [r3, #16]
 8001198:	b29b      	uxth	r3, r3
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <centerIsPressed+0x2c>
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <centerIsPressed+0x54>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <centerIsPressed+0x58>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b1e      	cmp	r3, #30
 80011ae:	d905      	bls.n	80011bc <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <centerIsPressed+0x54>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <centerIsPressed+0x58>)
 80011b6:	6013      	str	r3, [r2, #0]
		 return 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00c      	b.n	80011d6 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <centerIsPressed+0x50>)
 80011be:	8a1b      	ldrh	r3, [r3, #16]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <centerIsPressed+0x54>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3b1e      	subs	r3, #30
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <centerIsPressed+0x58>)
 80011d2:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 80011d4:	2300      	movs	r3, #0
	 }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	48000400 	.word	0x48000400
 80011e4:	200001c8 	.word	0x200001c8
 80011e8:	200001b0 	.word	0x200001b0

080011ec <upIsPressed>:

uint8_t upIsPressed(){
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 80011f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f4:	8a1b      	ldrh	r3, [r3, #16]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <upIsPressed+0x2e>
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <upIsPressed+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <upIsPressed+0x58>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b1e      	cmp	r3, #30
 800120c:	d905      	bls.n	800121a <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <upIsPressed+0x54>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <upIsPressed+0x58>)
 8001214:	6013      	str	r3, [r2, #0]
			 return 1;
 8001216:	2301      	movs	r3, #1
 8001218:	e00d      	b.n	8001236 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800121a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800121e:	8a1b      	ldrh	r3, [r3, #16]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <upIsPressed+0x54>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3b1e      	subs	r3, #30
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <upIsPressed+0x58>)
 8001232:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001234:	2300      	movs	r3, #0
		 }
	 }
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	200001c8 	.word	0x200001c8
 8001244:	200001b4 	.word	0x200001b4

08001248 <downIsPressed>:

uint8_t downIsPressed(){
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <downIsPressed+0x50>)
 800124e:	8a1b      	ldrh	r3, [r3, #16]
 8001250:	b29b      	uxth	r3, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <downIsPressed+0x2c>
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <downIsPressed+0x54>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <downIsPressed+0x58>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b1e      	cmp	r3, #30
 8001266:	d905      	bls.n	8001274 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <downIsPressed+0x54>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <downIsPressed+0x58>)
 800126e:	6013      	str	r3, [r2, #0]
			 return 1;
 8001270:	2301      	movs	r3, #1
 8001272:	e00c      	b.n	800128e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <downIsPressed+0x50>)
 8001276:	8a1b      	ldrh	r3, [r3, #16]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <downIsPressed+0x54>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3b1e      	subs	r3, #30
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <downIsPressed+0x58>)
 800128a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 800128c:	2300      	movs	r3, #0
		 }
	 }
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	48000400 	.word	0x48000400
 800129c:	200001c8 	.word	0x200001c8
 80012a0:	200001b8 	.word	0x200001b8

080012a4 <initTimer>:
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <initTimer+0x60>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a15      	ldr	r2, [pc, #84]	; (8001304 <initTimer+0x60>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <initTimer+0x64>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <initTimer+0x64>)
 80012bc:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 80012c0:	f023 030f 	bic.w	r3, r3, #15
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <initTimer+0x64>)
 80012ca:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <initTimer+0x64>)
 80012d2:	2209      	movs	r2, #9
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <initTimer+0x64>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <initTimer+0x64>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <initTimer+0x64>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <initTimer+0x64>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80012f2:	2100      	movs	r1, #0
 80012f4:	2018      	movs	r0, #24
 80012f6:	f7ff fe8b 	bl	8001010 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80012fa:	2018      	movs	r0, #24
 80012fc:	f7ff fe6e 	bl	8000fdc <NVIC_EnableIRQ>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40014000 	.word	0x40014000

0800130c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	runtime++;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001318:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6113      	str	r3, [r2, #16]
 }
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	200001c8 	.word	0x200001c8
 8001334:	40014000 	.word	0x40014000

08001338 <I2C_Read>:

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
}


uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af02      	add	r7, sp, #8
 800133e:	603a      	str	r2, [r7, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
 8001346:	460b      	mov	r3, r1
 8001348:	717b      	strb	r3, [r7, #5]
 800134a:	4613      	mov	r3, r2
 800134c:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 8001352:	bf00      	nop
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4830      	ldr	r0, [pc, #192]	; (800141c <I2C_Read+0xe4>)
 800135a:	f7fe ffd9 	bl	8000310 <I2C_GetFlagStatus>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d0f7      	beq.n	8001354 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 8001364:	88f9      	ldrh	r1, [r7, #6]
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	2201      	movs	r2, #1
 8001370:	482a      	ldr	r0, [pc, #168]	; (800141c <I2C_Read+0xe4>)
 8001372:	f7fe ff85 	bl	8000280 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8001376:	bf00      	nop
 8001378:	2102      	movs	r1, #2
 800137a:	4828      	ldr	r0, [pc, #160]	; (800141c <I2C_Read+0xe4>)
 800137c:	f7fe ffc8 	bl	8000310 <I2C_GetFlagStatus>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f8      	beq.n	8001378 <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	4619      	mov	r1, r3
 800138a:	4824      	ldr	r0, [pc, #144]	; (800141c <I2C_Read+0xe4>)
 800138c:	f7fe ffa4 	bl	80002d8 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 8001390:	bf00      	nop
 8001392:	2140      	movs	r1, #64	; 0x40
 8001394:	4821      	ldr	r0, [pc, #132]	; (800141c <I2C_Read+0xe4>)
 8001396:	f7fe ffbb 	bl	8000310 <I2C_GetFlagStatus>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f8      	beq.n	8001392 <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 80013a0:	793a      	ldrb	r2, [r7, #4]
 80013a2:	88f9      	ldrh	r1, [r7, #6]
 80013a4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ae:	481b      	ldr	r0, [pc, #108]	; (800141c <I2C_Read+0xe4>)
 80013b0:	f7fe ff66 	bl	8000280 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	73bb      	strb	r3, [r7, #14]
 80013b8:	e01b      	b.n	80013f2 <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 80013ba:	bf00      	nop
 80013bc:	2104      	movs	r1, #4
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <I2C_Read+0xe4>)
 80013c0:	f7fe ffa6 	bl	8000310 <I2C_GetFlagStatus>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f8      	beq.n	80013bc <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 80013ca:	793b      	ldrb	r3, [r7, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d908      	bls.n	80013e2 <I2C_Read+0xaa>
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	18d4      	adds	r4, r2, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <I2C_Read+0xe4>)
 80013d8:	f7fe ff8d 	bl	80002f6 <I2C_ReceiveData>
 80013dc:	4603      	mov	r3, r0
 80013de:	7023      	strb	r3, [r4, #0]
 80013e0:	e004      	b.n	80013ec <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <I2C_Read+0xe4>)
 80013e4:	f7fe ff87 	bl	80002f6 <I2C_ReceiveData>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	3301      	adds	r3, #1
 80013f0:	73bb      	strb	r3, [r7, #14]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	793b      	ldrb	r3, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3df      	bcc.n	80013ba <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 80013fa:	bf00      	nop
 80013fc:	2120      	movs	r1, #32
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <I2C_Read+0xe4>)
 8001400:	f7fe ff86 	bl	8000310 <I2C_GetFlagStatus>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f8      	beq.n	80013fc <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800140a:	2120      	movs	r1, #32
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <I2C_Read+0xe4>)
 800140e:	f7fe ff9e 	bl	800034e <I2C_ClearFlag>

    return val;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	40005400 	.word	0x40005400

08001420 <I2C_init>:

void I2C_init()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <I2C_init+0x144>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <I2C_init+0x144>)
 800142a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142e:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <I2C_init+0x148>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <I2C_init+0x148>)
 8001436:	f023 030f 	bic.w	r3, r3, #15
 800143a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <I2C_init+0x148>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	4a49      	ldr	r2, [pc, #292]	; (8001568 <I2C_init+0x148>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <I2C_init+0x148>)
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <I2C_init+0x148>)
 800144e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001452:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 8001454:	4b44      	ldr	r3, [pc, #272]	; (8001568 <I2C_init+0x148>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	4a43      	ldr	r2, [pc, #268]	; (8001568 <I2C_init+0x148>)
 800145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145e:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <I2C_init+0x148>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a40      	ldr	r2, [pc, #256]	; (8001568 <I2C_init+0x148>)
 8001466:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800146a:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800146c:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <I2C_init+0x148>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a3d      	ldr	r2, [pc, #244]	; (8001568 <I2C_init+0x148>)
 8001472:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001476:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <I2C_init+0x148>)
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <I2C_init+0x148>)
 8001480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001484:	b29b      	uxth	r3, r3
 8001486:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <I2C_init+0x148>)
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <I2C_init+0x148>)
 8001490:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001494:	b29b      	uxth	r3, r3
 8001496:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <I2C_init+0x148>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a32      	ldr	r2, [pc, #200]	; (8001568 <I2C_init+0x148>)
 800149e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80014a2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <I2C_init+0x148>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <I2C_init+0x148>)
 80014aa:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80014ae:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <I2C_init+0x148>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a2c      	ldr	r2, [pc, #176]	; (8001568 <I2C_init+0x148>)
 80014b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80014ba:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <I2C_init+0x148>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <I2C_init+0x148>)
 80014c2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80014c6:	60d3      	str	r3, [r2, #12]

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <I2C_init+0x144>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <I2C_init+0x144>)
 80014ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d2:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <I2C_init+0x14c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <I2C_init+0x14c>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <I2C_init+0x14c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4921      	ldr	r1, [pc, #132]	; (800156c <I2C_init+0x14c>)
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <I2C_init+0x150>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <I2C_init+0x14c>)
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <I2C_init+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <I2C_init+0x14c>)
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <I2C_init+0x14c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <I2C_init+0x14c>)
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <I2C_init+0x154>)
 8001500:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <I2C_init+0x14c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a19      	ldr	r2, [pc, #100]	; (800156c <I2C_init+0x14c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <I2C_init+0x14c>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <I2C_init+0x14c>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <I2C_init+0x14c>)
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <I2C_init+0x14c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <I2C_init+0x14c>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <I2C_init+0x14c>)
 8001528:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 800152c:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <I2C_init+0x14c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <I2C_init+0x14c>)
 8001534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001538:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <I2C_init+0x14c>)
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <I2C_init+0x14c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <I2C_init+0x14c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <I2C_init+0x14c>)
 8001548:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800154c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001550:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <I2C_init+0x14c>)
 8001554:	4a05      	ldr	r2, [pc, #20]	; (800156c <I2C_init+0x14c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	6053      	str	r3, [r2, #4]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	40005400 	.word	0x40005400
 8001570:	00cfe0ff 	.word	0x00cfe0ff
 8001574:	10805e89 	.word	0x10805e89

08001578 <spawnEnemy>:
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
void spawnEnemy(gameState_t* gameState){
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int shouldGenEnemy = rand() % 33;      // Returns a pseudo-random integer [0:32].
 8001580:	f001 fcbc 	bl	8002efc <rand>
 8001584:	4602      	mov	r2, r0
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <spawnEnemy+0xdc>)
 8001588:	fb83 1302 	smull	r1, r3, r3, r2
 800158c:	10d9      	asrs	r1, r3, #3
 800158e:	17d3      	asrs	r3, r2, #31
 8001590:	1ac9      	subs	r1, r1, r3
 8001592:	460b      	mov	r3, r1
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	440b      	add	r3, r1
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	61fb      	str	r3, [r7, #28]
	if(shouldGenEnemy == 0){
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d154      	bne.n	800164c <spawnEnemy+0xd4>
		int8_t enemyPos = rand() % 156;
 80015a2:	f001 fcab 	bl	8002efc <rand>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <spawnEnemy+0xe0>)
 80015aa:	fb82 1203 	smull	r1, r2, r2, r3
 80015ae:	441a      	add	r2, r3
 80015b0:	11d1      	asrs	r1, r2, #7
 80015b2:	17da      	asrs	r2, r3, #31
 80015b4:	1a8a      	subs	r2, r1, r2
 80015b6:	219c      	movs	r1, #156	; 0x9c
 80015b8:	fb01 f202 	mul.w	r2, r1, r2
 80015bc:	1a9a      	subs	r2, r3, r2
 80015be:	4613      	mov	r3, r2
 80015c0:	76fb      	strb	r3, [r7, #27]

		enemy_t* enemy = malloc(sizeof(enemy_t));
 80015c2:	2010      	movs	r0, #16
 80015c4:	f001 fb06 	bl	8002bd4 <malloc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	617b      	str	r3, [r7, #20]
		enemy->firingRate = 2;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2202      	movs	r2, #2
 80015d0:	731a      	strb	r2, [r3, #12]
		position_t* pos = malloc(sizeof(position_t));
 80015d2:	2008      	movs	r0, #8
 80015d4:	f001 fafe 	bl	8002bd4 <malloc>
 80015d8:	4603      	mov	r3, r0
 80015da:	613b      	str	r3, [r7, #16]
		pos->x = intToFp(enemyPos);
 80015dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8a1 	bl	800172a <intToFp>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(2);
 80015ee:	2002      	movs	r0, #2
 80015f0:	f000 f89b 	bl	800172a <intToFp>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8001600:	2008      	movs	r0, #8
 8001602:	f001 fae7 	bl	8002bd4 <malloc>
 8001606:	4603      	mov	r3, r0
 8001608:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f88d 	bl	800172a <intToFp>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00008000;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161c:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8001624:	2008      	movs	r0, #8
 8001626:	f001 fad5 	bl	8002bd4 <malloc>
 800162a:	4603      	mov	r3, r0
 800162c:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	605a      	str	r2, [r3, #4]

		appendEnemy(gameState, enemy);
 8001644:	6979      	ldr	r1, [r7, #20]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fc09 	bl	8001e5e <appendEnemy>
	}
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	3e0f83e1 	.word	0x3e0f83e1
 8001658:	d20d20d3 	.word	0xd20d20d3

0800165c <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0){
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <updateEnemy+0x4e>
			thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	440a      	add	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
			thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	440a      	add	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <updateEnemy+0x5e>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 80016b8:	e7d7      	b.n	800166a <updateEnemy+0xe>
			break;
 80016ba:	bf00      	nop
	}
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <detectCityHit>:

void shootEnemy(gameState_t* gameState){

}

void detectCityHit(gameState_t* gameState){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
	while(1){
		if(thisNode->enemy->position->x != 0 && fpToInt(thisNode->enemy->position->y) >= 40){
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d016      	beq.n	8001710 <detectCityHit+0x48>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f832 	bl	8001754 <fpToInt>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b27      	cmp	r3, #39	; 0x27
 80016f4:	dd0c      	ble.n	8001710 <detectCityHit+0x48>
			gameState->cityLives--;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			deleteEnemyNode(gameState, thisNode);
 8001706:	68f9      	ldr	r1, [r7, #12]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fbd5 	bl	8001eb8 <deleteEnemyNode>
			break;
 800170e:	e008      	b.n	8001722 <detectCityHit+0x5a>
		}
		if(thisNode->nextEnemyNode == 0){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <detectCityHit+0x58>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0 && fpToInt(thisNode->enemy->position->y) >= 40){
 800171e:	e7da      	b.n	80016d6 <detectCityHit+0xe>
			break;
 8001720:	bf00      	nop
	}
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <intToFp>:
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
	output+=n;
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	60fb      	str	r3, [r7, #12]
	return output;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60bb      	str	r3, [r7, #8]
	int output=0;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800176a:	607b      	str	r3, [r7, #4]
	fp>>=16;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	607b      	str	r3, [r7, #4]
	output+=fp;
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da03      	bge.n	8001788 <fpToInt+0x34>
		output-=65536;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001786:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8001788:	68fb      	ldr	r3, [r7, #12]

}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <drawbackground>:
 */
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"

void drawbackground(){
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 800179a:	2123      	movs	r1, #35	; 0x23
 800179c:	2037      	movs	r0, #55	; 0x37
 800179e:	f7ff fabb 	bl	8000d18 <gotoxy>
	printf("*");
 80017a2:	202a      	movs	r0, #42	; 0x2a
 80017a4:	f001 faf0 	bl	8002d88 <putchar>
	gotoxy(63,27);
 80017a8:	211b      	movs	r1, #27
 80017aa:	203f      	movs	r0, #63	; 0x3f
 80017ac:	f7ff fab4 	bl	8000d18 <gotoxy>
	printf("*");
 80017b0:	202a      	movs	r0, #42	; 0x2a
 80017b2:	f001 fae9 	bl	8002d88 <putchar>
	gotoxy(10,15);
 80017b6:	210f      	movs	r1, #15
 80017b8:	200a      	movs	r0, #10
 80017ba:	f7ff faad 	bl	8000d18 <gotoxy>
	printf("*");
 80017be:	202a      	movs	r0, #42	; 0x2a
 80017c0:	f001 fae2 	bl	8002d88 <putchar>
	gotoxy(20,40);
 80017c4:	2128      	movs	r1, #40	; 0x28
 80017c6:	2014      	movs	r0, #20
 80017c8:	f7ff faa6 	bl	8000d18 <gotoxy>
	printf("%c",43);
 80017cc:	202b      	movs	r0, #43	; 0x2b
 80017ce:	f001 fadb 	bl	8002d88 <putchar>

	gotoxy(155,37);
 80017d2:	2125      	movs	r1, #37	; 0x25
 80017d4:	209b      	movs	r0, #155	; 0x9b
 80017d6:	f7ff fa9f 	bl	8000d18 <gotoxy>
	printf("*");
 80017da:	202a      	movs	r0, #42	; 0x2a
 80017dc:	f001 fad4 	bl	8002d88 <putchar>
	gotoxy(110,28);
 80017e0:	211c      	movs	r1, #28
 80017e2:	206e      	movs	r0, #110	; 0x6e
 80017e4:	f7ff fa98 	bl	8000d18 <gotoxy>
	printf("*");
 80017e8:	202a      	movs	r0, #42	; 0x2a
 80017ea:	f001 facd 	bl	8002d88 <putchar>
	gotoxy(95,13);
 80017ee:	210d      	movs	r1, #13
 80017f0:	205f      	movs	r0, #95	; 0x5f
 80017f2:	f7ff fa91 	bl	8000d18 <gotoxy>
	printf("*");
 80017f6:	202a      	movs	r0, #42	; 0x2a
 80017f8:	f001 fac6 	bl	8002d88 <putchar>
	gotoxy(130,19);
 80017fc:	2113      	movs	r1, #19
 80017fe:	2082      	movs	r0, #130	; 0x82
 8001800:	f7ff fa8a 	bl	8000d18 <gotoxy>
	printf("%c",43);
 8001804:	202b      	movs	r0, #43	; 0x2b
 8001806:	f001 fabf 	bl	8002d88 <putchar>

	gotoxy(5,27);
 800180a:	211b      	movs	r1, #27
 800180c:	2005      	movs	r0, #5
 800180e:	f7ff fa83 	bl	8000d18 <gotoxy>
	printf("*");
 8001812:	202a      	movs	r0, #42	; 0x2a
 8001814:	f001 fab8 	bl	8002d88 <putchar>
	gotoxy(6,5);
 8001818:	2105      	movs	r1, #5
 800181a:	2006      	movs	r0, #6
 800181c:	f7ff fa7c 	bl	8000d18 <gotoxy>
	printf("*");
 8001820:	202a      	movs	r0, #42	; 0x2a
 8001822:	f001 fab1 	bl	8002d88 <putchar>
	gotoxy(13,13);
 8001826:	210d      	movs	r1, #13
 8001828:	200d      	movs	r0, #13
 800182a:	f7ff fa75 	bl	8000d18 <gotoxy>
	printf("*");
 800182e:	202a      	movs	r0, #42	; 0x2a
 8001830:	f001 faaa 	bl	8002d88 <putchar>
	gotoxy(60,7);
 8001834:	2107      	movs	r1, #7
 8001836:	203c      	movs	r0, #60	; 0x3c
 8001838:	f7ff fa6e 	bl	8000d18 <gotoxy>
	printf("%c",43);
 800183c:	202b      	movs	r0, #43	; 0x2b
 800183e:	f001 faa3 	bl	8002d88 <putchar>

	gotoxy(140,3);
 8001842:	2103      	movs	r1, #3
 8001844:	208c      	movs	r0, #140	; 0x8c
 8001846:	f7ff fa67 	bl	8000d18 <gotoxy>
	printf("*");
 800184a:	202a      	movs	r0, #42	; 0x2a
 800184c:	f001 fa9c 	bl	8002d88 <putchar>
	gotoxy(120,5);
 8001850:	2105      	movs	r1, #5
 8001852:	2078      	movs	r0, #120	; 0x78
 8001854:	f7ff fa60 	bl	8000d18 <gotoxy>
	printf("*");
 8001858:	202a      	movs	r0, #42	; 0x2a
 800185a:	f001 fa95 	bl	8002d88 <putchar>
	gotoxy(110,7);
 800185e:	2107      	movs	r1, #7
 8001860:	206e      	movs	r0, #110	; 0x6e
 8001862:	f7ff fa59 	bl	8000d18 <gotoxy>
	printf("*");
 8001866:	202a      	movs	r0, #42	; 0x2a
 8001868:	f001 fa8e 	bl	8002d88 <putchar>
	gotoxy(70,30);
 800186c:	211e      	movs	r1, #30
 800186e:	2046      	movs	r0, #70	; 0x46
 8001870:	f7ff fa52 	bl	8000d18 <gotoxy>
	printf("%c",43);
 8001874:	202b      	movs	r0, #43	; 0x2b
 8001876:	f001 fa87 	bl	8002d88 <putchar>

	gotoxy(135,33);
 800187a:	2121      	movs	r1, #33	; 0x21
 800187c:	2087      	movs	r0, #135	; 0x87
 800187e:	f7ff fa4b 	bl	8000d18 <gotoxy>
	printf("*");
 8001882:	202a      	movs	r0, #42	; 0x2a
 8001884:	f001 fa80 	bl	8002d88 <putchar>
	gotoxy(123,36);
 8001888:	2124      	movs	r1, #36	; 0x24
 800188a:	207b      	movs	r0, #123	; 0x7b
 800188c:	f7ff fa44 	bl	8000d18 <gotoxy>
	printf("*");
 8001890:	202a      	movs	r0, #42	; 0x2a
 8001892:	f001 fa79 	bl	8002d88 <putchar>
	gotoxy(138,40);
 8001896:	2128      	movs	r1, #40	; 0x28
 8001898:	208a      	movs	r0, #138	; 0x8a
 800189a:	f7ff fa3d 	bl	8000d18 <gotoxy>
	printf("*");
 800189e:	202a      	movs	r0, #42	; 0x2a
 80018a0:	f001 fa72 	bl	8002d88 <putchar>
	gotoxy(127,25);
 80018a4:	2119      	movs	r1, #25
 80018a6:	207f      	movs	r0, #127	; 0x7f
 80018a8:	f7ff fa36 	bl	8000d18 <gotoxy>
	printf("%c",43);
 80018ac:	202b      	movs	r0, #43	; 0x2b
 80018ae:	f001 fa6b 	bl	8002d88 <putchar>

	gotoxy(105,32);
 80018b2:	2120      	movs	r1, #32
 80018b4:	2069      	movs	r0, #105	; 0x69
 80018b6:	f7ff fa2f 	bl	8000d18 <gotoxy>
	printf("%c",42);
 80018ba:	202a      	movs	r0, #42	; 0x2a
 80018bc:	f001 fa64 	bl	8002d88 <putchar>
	gotoxy(106,33);
 80018c0:	2121      	movs	r1, #33	; 0x21
 80018c2:	206a      	movs	r0, #106	; 0x6a
 80018c4:	f7ff fa28 	bl	8000d18 <gotoxy>
	printf("%c",92);
 80018c8:	205c      	movs	r0, #92	; 0x5c
 80018ca:	f001 fa5d 	bl	8002d88 <putchar>
	gotoxy(107,34);
 80018ce:	2122      	movs	r1, #34	; 0x22
 80018d0:	206b      	movs	r0, #107	; 0x6b
 80018d2:	f7ff fa21 	bl	8000d18 <gotoxy>
	printf("%c",92);
 80018d6:	205c      	movs	r0, #92	; 0x5c
 80018d8:	f001 fa56 	bl	8002d88 <putchar>

	gotoxy(23,15);
 80018dc:	210f      	movs	r1, #15
 80018de:	2017      	movs	r0, #23
 80018e0:	f7ff fa1a 	bl	8000d18 <gotoxy>
	printf("*");
 80018e4:	202a      	movs	r0, #42	; 0x2a
 80018e6:	f001 fa4f 	bl	8002d88 <putchar>
	gotoxy(37,21);
 80018ea:	2115      	movs	r1, #21
 80018ec:	2025      	movs	r0, #37	; 0x25
 80018ee:	f7ff fa13 	bl	8000d18 <gotoxy>
	printf("*");
 80018f2:	202a      	movs	r0, #42	; 0x2a
 80018f4:	f001 fa48 	bl	8002d88 <putchar>
	gotoxy(26,24);
 80018f8:	2118      	movs	r1, #24
 80018fa:	201a      	movs	r0, #26
 80018fc:	f7ff fa0c 	bl	8000d18 <gotoxy>
	printf("*");
 8001900:	202a      	movs	r0, #42	; 0x2a
 8001902:	f001 fa41 	bl	8002d88 <putchar>
	gotoxy(30,29);
 8001906:	211d      	movs	r1, #29
 8001908:	201e      	movs	r0, #30
 800190a:	f7ff fa05 	bl	8000d18 <gotoxy>
	printf("%c",43);
 800190e:	202b      	movs	r0, #43	; 0x2b
 8001910:	f001 fa3a 	bl	8002d88 <putchar>

	gotoxy(25,6);
 8001914:	2106      	movs	r1, #6
 8001916:	2019      	movs	r0, #25
 8001918:	f7ff f9fe 	bl	8000d18 <gotoxy>
	printf("*");
 800191c:	202a      	movs	r0, #42	; 0x2a
 800191e:	f001 fa33 	bl	8002d88 <putchar>
	gotoxy(39,7);
 8001922:	2107      	movs	r1, #7
 8001924:	2027      	movs	r0, #39	; 0x27
 8001926:	f7ff f9f7 	bl	8000d18 <gotoxy>
	printf("*");
 800192a:	202a      	movs	r0, #42	; 0x2a
 800192c:	f001 fa2c 	bl	8002d88 <putchar>
	gotoxy(41,3);
 8001930:	2103      	movs	r1, #3
 8001932:	2029      	movs	r0, #41	; 0x29
 8001934:	f7ff f9f0 	bl	8000d18 <gotoxy>
	printf("*");
 8001938:	202a      	movs	r0, #42	; 0x2a
 800193a:	f001 fa25 	bl	8002d88 <putchar>
	gotoxy(75,10);
 800193e:	210a      	movs	r1, #10
 8001940:	204b      	movs	r0, #75	; 0x4b
 8001942:	f7ff f9e9 	bl	8000d18 <gotoxy>
	printf("%c",43);
 8001946:	202b      	movs	r0, #43	; 0x2b
 8001948:	f001 fa1e 	bl	8002d88 <putchar>

	gotoxy(100,20);
 800194c:	2114      	movs	r1, #20
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f7ff f9e2 	bl	8000d18 <gotoxy>
	printf("%c",197);
 8001954:	20c5      	movs	r0, #197	; 0xc5
 8001956:	f001 fa17 	bl	8002d88 <putchar>
	gotoxy(135,12);
 800195a:	210c      	movs	r1, #12
 800195c:	2087      	movs	r0, #135	; 0x87
 800195e:	f7ff f9db 	bl	8000d18 <gotoxy>
	printf("%c",197);
 8001962:	20c5      	movs	r0, #197	; 0xc5
 8001964:	f001 fa10 	bl	8002d88 <putchar>
	gotoxy(30,5);
 8001968:	2105      	movs	r1, #5
 800196a:	201e      	movs	r0, #30
 800196c:	f7ff f9d4 	bl	8000d18 <gotoxy>
	printf("%c",197);
 8001970:	20c5      	movs	r0, #197	; 0xc5
 8001972:	f001 fa09 	bl	8002d88 <putchar>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	460a      	mov	r2, r1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	4613      	mov	r3, r2
 8001988:	71bb      	strb	r3, [r7, #6]
	// FX (51,17)
	gotoxy(X-1,Y+3);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	3303      	adds	r3, #3
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7ff f9bf 	bl	8000d18 <gotoxy>
	printf("_");
 800199a:	205f      	movs	r0, #95	; 0x5f
 800199c:	f001 f9f4 	bl	8002d88 <putchar>
	gotoxy(X,Y+3);
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	3303      	adds	r3, #3
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f7ff f9b5 	bl	8000d18 <gotoxy>
	printf("_");
 80019ae:	205f      	movs	r0, #95	; 0x5f
 80019b0:	f001 f9ea 	bl	8002d88 <putchar>
	gotoxy(X+1,Y+3);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	3303      	adds	r3, #3
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff f9aa 	bl	8000d18 <gotoxy>
	printf("_");
 80019c4:	205f      	movs	r0, #95	; 0x5f
 80019c6:	f001 f9df 	bl	8002d88 <putchar>
	gotoxy(X-2,Y+3);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	1e9a      	subs	r2, r3, #2
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	3303      	adds	r3, #3
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff f99f 	bl	8000d18 <gotoxy>
	printf("(");
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f001 f9d4 	bl	8002d88 <putchar>
	gotoxy(X+2,Y+3);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	1c9a      	adds	r2, r3, #2
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	3303      	adds	r3, #3
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff f994 	bl	8000d18 <gotoxy>
	printf(")");
 80019f0:	2029      	movs	r0, #41	; 0x29
 80019f2:	f001 f9c9 	bl	8002d88 <putchar>

	gotoxy(X+3,Y+2);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	1cda      	adds	r2, r3, #3
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	3302      	adds	r3, #2
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff f989 	bl	8000d18 <gotoxy>
	printf("_");
 8001a06:	205f      	movs	r0, #95	; 0x5f
 8001a08:	f001 f9be 	bl	8002d88 <putchar>
	gotoxy(X-3,Y+2);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	1eda      	subs	r2, r3, #3
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	3302      	adds	r3, #2
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f7ff f97e 	bl	8000d18 <gotoxy>
	printf("_");
 8001a1c:	205f      	movs	r0, #95	; 0x5f
 8001a1e:	f001 f9b3 	bl	8002d88 <putchar>
	gotoxy(X+4,Y+2);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	1d1a      	adds	r2, r3, #4
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7ff f973 	bl	8000d18 <gotoxy>
	printf("(");
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f001 f9a8 	bl	8002d88 <putchar>
	gotoxy(X-4,Y+2);
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	1f1a      	subs	r2, r3, #4
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff f968 	bl	8000d18 <gotoxy>
	printf(")");
 8001a48:	2029      	movs	r0, #41	; 0x29
 8001a4a:	f001 f99d 	bl	8002d88 <putchar>

	gotoxy(X-5,Y+1);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	1f5a      	subs	r2, r3, #5
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff f95d 	bl	8000d18 <gotoxy>
	printf("(");
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f001 f992 	bl	8002d88 <putchar>
	gotoxy(X+5,Y+1);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	1d5a      	adds	r2, r3, #5
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff f952 	bl	8000d18 <gotoxy>
	printf("(");
 8001a74:	2028      	movs	r0, #40	; 0x28
 8001a76:	f001 f987 	bl	8002d88 <putchar>
	gotoxy(X-6,Y);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	3b06      	subs	r3, #6
 8001a7e:	79ba      	ldrb	r2, [r7, #6]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f948 	bl	8000d18 <gotoxy>
	printf("(");
 8001a88:	2028      	movs	r0, #40	; 0x28
 8001a8a:	f001 f97d 	bl	8002d88 <putchar>
	gotoxy(X+6,Y);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	3306      	adds	r3, #6
 8001a92:	79ba      	ldrb	r2, [r7, #6]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f93e 	bl	8000d18 <gotoxy>
	printf(")");
 8001a9c:	2029      	movs	r0, #41	; 0x29
 8001a9e:	f001 f973 	bl	8002d88 <putchar>

	gotoxy(X-5,Y-1);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	1f5a      	subs	r2, r3, #5
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f7ff f933 	bl	8000d18 <gotoxy>
	printf("(");
 8001ab2:	2028      	movs	r0, #40	; 0x28
 8001ab4:	f001 f968 	bl	8002d88 <putchar>
	gotoxy(X+5,Y-1);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	1d5a      	adds	r2, r3, #5
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f7ff f928 	bl	8000d18 <gotoxy>
	printf(")");
 8001ac8:	2029      	movs	r0, #41	; 0x29
 8001aca:	f001 f95d 	bl	8002d88 <putchar>
	gotoxy(X-4,Y-2);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	1f1a      	subs	r2, r3, #4
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	3b02      	subs	r3, #2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff f91d 	bl	8000d18 <gotoxy>
	printf("(");
 8001ade:	2028      	movs	r0, #40	; 0x28
 8001ae0:	f001 f952 	bl	8002d88 <putchar>
	gotoxy(X+4,Y-2);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	1d1a      	adds	r2, r3, #4
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	3b02      	subs	r3, #2
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff f912 	bl	8000d18 <gotoxy>
	printf(")");
 8001af4:	2029      	movs	r0, #41	; 0x29
 8001af6:	f001 f947 	bl	8002d88 <putchar>

	gotoxy(X-3,Y-3);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	1eda      	subs	r2, r3, #3
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f907 	bl	8000d18 <gotoxy>
	printf("_");
 8001b0a:	205f      	movs	r0, #95	; 0x5f
 8001b0c:	f001 f93c 	bl	8002d88 <putchar>
	gotoxy(X+3,Y-3);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	1cda      	adds	r2, r3, #3
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	3b03      	subs	r3, #3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff f8fc 	bl	8000d18 <gotoxy>
	printf("_");
 8001b20:	205f      	movs	r0, #95	; 0x5f
 8001b22:	f001 f931 	bl	8002d88 <putchar>
	gotoxy(X-2,Y-3);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	1e9a      	subs	r2, r3, #2
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff f8f1 	bl	8000d18 <gotoxy>
	printf("(");
 8001b36:	2028      	movs	r0, #40	; 0x28
 8001b38:	f001 f926 	bl	8002d88 <putchar>
	gotoxy(X+2,Y-3);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	1c9a      	adds	r2, r3, #2
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	3b03      	subs	r3, #3
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff f8e6 	bl	8000d18 <gotoxy>
	printf(")");
 8001b4c:	2029      	movs	r0, #41	; 0x29
 8001b4e:	f001 f91b 	bl	8002d88 <putchar>

	gotoxy(X-1,Y-4);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	3b04      	subs	r3, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff f8db 	bl	8000d18 <gotoxy>
	printf("_");
 8001b62:	205f      	movs	r0, #95	; 0x5f
 8001b64:	f001 f910 	bl	8002d88 <putchar>
	gotoxy(X,Y-4);
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	3b04      	subs	r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff f8d1 	bl	8000d18 <gotoxy>
	printf("_");
 8001b76:	205f      	movs	r0, #95	; 0x5f
 8001b78:	f001 f906 	bl	8002d88 <putchar>
	gotoxy(X+1,Y-4);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	3b04      	subs	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7ff f8c6 	bl	8000d18 <gotoxy>
	printf("_");
 8001b8c:	205f      	movs	r0, #95	; 0x5f
 8001b8e:	f001 f8fb 	bl	8002d88 <putchar>

	gotoxy(X-2,Y);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	3b02      	subs	r3, #2
 8001b96:	79ba      	ldrb	r2, [r7, #6]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f8bc 	bl	8000d18 <gotoxy>
	printf("O");
 8001ba0:	204f      	movs	r0, #79	; 0x4f
 8001ba2:	f001 f8f1 	bl	8002d88 <putchar>
	gotoxy(X+1,Y+2);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	3302      	adds	r3, #2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff f8b1 	bl	8000d18 <gotoxy>
	printf("o");
 8001bb6:	206f      	movs	r0, #111	; 0x6f
 8001bb8:	f001 f8e6 	bl	8002d88 <putchar>
	gotoxy(X+3,Y-1);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	1cda      	adds	r2, r3, #3
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff f8a6 	bl	8000d18 <gotoxy>
	printf("O");
 8001bcc:	204f      	movs	r0, #79	; 0x4f
 8001bce:	f001 f8db 	bl	8002d88 <putchar>


	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <drawhearth>:


void drawhearth(gameState_t* gameState){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	fgcolor(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff f86b 	bl	8000cc0 <fgcolor>
	gotoxy(15,1);
 8001bea:	2101      	movs	r1, #1
 8001bec:	200f      	movs	r0, #15
 8001bee:	f7ff f893 	bl	8000d18 <gotoxy>
	printf("           ");
 8001bf2:	483a      	ldr	r0, [pc, #232]	; (8001cdc <drawhearth+0x100>)
 8001bf4:	f001 f8b0 	bl	8002d58 <iprintf>
	gotoxy(15,2);
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f7ff f88c 	bl	8000d18 <gotoxy>
	printf("           ");
 8001c00:	4836      	ldr	r0, [pc, #216]	; (8001cdc <drawhearth+0x100>)
 8001c02:	f001 f8a9 	bl	8002d58 <iprintf>

	if(gameState->cityLives >= 1){
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <drawhearth+0x6c>
		gotoxy(15,1);
 8001c10:	2101      	movs	r1, #1
 8001c12:	200f      	movs	r0, #15
 8001c14:	f7ff f880 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001c18:	20db      	movs	r0, #219	; 0xdb
 8001c1a:	f001 f8b5 	bl	8002d88 <putchar>
		gotoxy(17,1);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2011      	movs	r0, #17
 8001c22:	f7ff f879 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001c26:	20db      	movs	r0, #219	; 0xdb
 8001c28:	f001 f8ae 	bl	8002d88 <putchar>
		gotoxy(16,2);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2010      	movs	r0, #16
 8001c30:	f7ff f872 	bl	8000d18 <gotoxy>
		printf("%c",223);
 8001c34:	20df      	movs	r0, #223	; 0xdf
 8001c36:	f001 f8a7 	bl	8002d88 <putchar>
		gotoxy(16,1);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2010      	movs	r0, #16
 8001c3e:	f7ff f86b 	bl	8000d18 <gotoxy>
		printf("%c",220);
 8001c42:	20dc      	movs	r0, #220	; 0xdc
 8001c44:	f001 f8a0 	bl	8002d88 <putchar>
	}
	if(gameState->cityLives >= 2){
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d91b      	bls.n	8001c8a <drawhearth+0xae>
		gotoxy(19,1);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2013      	movs	r0, #19
 8001c56:	f7ff f85f 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001c5a:	20db      	movs	r0, #219	; 0xdb
 8001c5c:	f001 f894 	bl	8002d88 <putchar>
		gotoxy(21,1);
 8001c60:	2101      	movs	r1, #1
 8001c62:	2015      	movs	r0, #21
 8001c64:	f7ff f858 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001c68:	20db      	movs	r0, #219	; 0xdb
 8001c6a:	f001 f88d 	bl	8002d88 <putchar>
		gotoxy(20,2);
 8001c6e:	2102      	movs	r1, #2
 8001c70:	2014      	movs	r0, #20
 8001c72:	f7ff f851 	bl	8000d18 <gotoxy>
		printf("%c",223);
 8001c76:	20df      	movs	r0, #223	; 0xdf
 8001c78:	f001 f886 	bl	8002d88 <putchar>
		gotoxy(20,1);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2014      	movs	r0, #20
 8001c80:	f7ff f84a 	bl	8000d18 <gotoxy>
		printf("%c",220);
 8001c84:	20dc      	movs	r0, #220	; 0xdc
 8001c86:	f001 f87f 	bl	8002d88 <putchar>

	}
	if(gameState->cityLives >= 3){
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d91b      	bls.n	8001ccc <drawhearth+0xf0>
		gotoxy(23,1);
 8001c94:	2101      	movs	r1, #1
 8001c96:	2017      	movs	r0, #23
 8001c98:	f7ff f83e 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001c9c:	20db      	movs	r0, #219	; 0xdb
 8001c9e:	f001 f873 	bl	8002d88 <putchar>
		gotoxy(25,1);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2019      	movs	r0, #25
 8001ca6:	f7ff f837 	bl	8000d18 <gotoxy>
		printf("%c",219);
 8001caa:	20db      	movs	r0, #219	; 0xdb
 8001cac:	f001 f86c 	bl	8002d88 <putchar>
		gotoxy(24,2);
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	2018      	movs	r0, #24
 8001cb4:	f7ff f830 	bl	8000d18 <gotoxy>
		printf("%c",223);
 8001cb8:	20df      	movs	r0, #223	; 0xdf
 8001cba:	f001 f865 	bl	8002d88 <putchar>
		gotoxy(24,1);
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2018      	movs	r0, #24
 8001cc2:	f7ff f829 	bl	8000d18 <gotoxy>
		printf("%c",220);
 8001cc6:	20dc      	movs	r0, #220	; 0xdc
 8001cc8:	f001 f85e 	bl	8002d88 <putchar>
	}
	fgcolor(15);
 8001ccc:	200f      	movs	r0, #15
 8001cce:	f7fe fff7 	bl	8000cc0 <fgcolor>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	080040a4 	.word	0x080040a4

08001ce0 <drawEnemy>:


void drawEnemy(gameState_t* gameState){
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	int isLastElement = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
	enemyNode_t* thisNode = gameState->enemyLL;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

	while(1){
		if(thisNode->enemy->position->x != 0){
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03d      	beq.n	8001d7a <drawEnemy+0x9a>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd24 	bl	8001754 <fpToInt>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fd1c 	bl	8001754 <fpToInt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7fe fff9 	bl	8000d18 <gotoxy>
			//printf("%d %d", fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
			printf("  ");
 8001d26:	481b      	ldr	r0, [pc, #108]	; (8001d94 <drawEnemy+0xb4>)
 8001d28:	f001 f816 	bl	8002d58 <iprintf>
			gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fd0d 	bl	8001754 <fpToInt>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fd05 	bl	8001754 <fpToInt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7fe ffe2 	bl	8000d18 <gotoxy>
			printf(":E");
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <drawEnemy+0xb8>)
 8001d56:	f000 ffff 	bl	8002d58 <iprintf>
			thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	601a      	str	r2, [r3, #0]
			thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6852      	ldr	r2, [r2, #4]
 8001d78:	605a      	str	r2, [r3, #4]
		}
		if(thisNode->nextEnemyNode == 0){
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <drawEnemy+0xaa>
			break;
		}
		thisNode = thisNode->nextEnemyNode;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
		if(thisNode->enemy->position->x != 0){
 8001d88:	e7b3      	b.n	8001cf2 <drawEnemy+0x12>
			break;
 8001d8a:	bf00      	nop
	}
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	080040b0 	.word	0x080040b0
 8001d98:	080040b4 	.word	0x080040b4

08001d9c <createBulletNode>:

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	b5b0      	push	{r4, r5, r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	f107 0418 	add.w	r4, r7, #24
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8001dac:	201c      	movs	r0, #28
 8001dae:	f000 ff11 	bl	8002bd4 <malloc>
 8001db2:	4603      	mov	r3, r0
 8001db4:	607b      	str	r3, [r7, #4]
    if (newNode == NULL) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <createBulletNode+0x2c>
        printf("Memory allocation failed\n");
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <createBulletNode+0x58>)
 8001dbe:	f001 f867 	bl	8002e90 <puts>
        exit(EXIT_FAILURE);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 fece 	bl	8002b64 <exit>
    }
    newNode->bullet = bullet;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	461d      	mov	r5, r3
 8001dcc:	f107 0418 	add.w	r4, r7, #24
 8001dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd8:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
    return newNode;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001dee:	b004      	add	sp, #16
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	080040b8 	.word	0x080040b8

08001df8 <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8001df8:	b084      	sub	sp, #16
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af02      	add	r7, sp, #8
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	f107 001c 	add.w	r0, r7, #28
 8001e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8001e0a:	466a      	mov	r2, sp
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e14:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1e:	f7ff ffbd 	bl	8001d9c <createBulletNode>
 8001e22:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <appendBullet+0x3c>
        // If the list is empty, make the new node the head
        *head = newNode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	601a      	str	r2, [r3, #0]
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
 8001e32:	e00d      	b.n	8001e50 <appendBullet+0x58>
        bulletNode_t* current = *head;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8001e3a:	e002      	b.n	8001e42 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f8      	bne.n	8001e3c <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	619a      	str	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e5a:	b004      	add	sp, #16
 8001e5c:	4770      	bx	lr

08001e5e <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8001e68:	2008      	movs	r0, #8
 8001e6a:	f000 feb3 	bl	8002bd4 <malloc>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60fb      	str	r3, [r7, #12]
	newEnemy->enemy = enemy;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	617b      	str	r3, [r7, #20]
	int8_t isEndOfList = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	74fb      	strb	r3, [r7, #19]
	while(isEndOfList == 0){
 8001e88:	e00c      	b.n	8001ea4 <appendEnemy+0x46>
		if(thisNode->nextEnemyNode == 0){
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <appendEnemy+0x40>
			isEndOfList = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	74fb      	strb	r3, [r7, #19]
			thisNode->nextEnemyNode = newEnemy;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e002      	b.n	8001ea4 <appendEnemy+0x46>
		}else{
			thisNode = thisNode->nextEnemyNode;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	617b      	str	r3, [r7, #20]
	while(isEndOfList == 0){
 8001ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <appendEnemy+0x2c>
		}
	}
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = gameState->enemyLL;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL->nextEnemyNode;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60bb      	str	r3, [r7, #8]

	while(1){
		if(thisNode == enemy){
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d132      	bne.n	8001f3e <deleteEnemyNode+0x86>
			gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y));
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc37 	bl	8001754 <fpToInt>
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fc2f 	bl	8001754 <fpToInt>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7fe ff0c 	bl	8000d18 <gotoxy>
			printf("  ");
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <deleteEnemyNode+0xa4>)
 8001f02:	f000 ff29 	bl	8002d58 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fe65 	bl	8002be4 <free>
			free(thisNode->enemy->position);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fe5f 	bl	8002be4 <free>
			free(thisNode->enemy->velocity);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fe59 	bl	8002be4 <free>
			free(thisNode->enemy);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fe54 	bl	8002be4 <free>
			break;
 8001f3c:	e00a      	b.n	8001f54 <deleteEnemyNode+0x9c>
		}
		if(thisNode->nextEnemyNode == 0){
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <deleteEnemyNode+0x9a>
			break;
		}
		preNode = thisNode;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60bb      	str	r3, [r7, #8]
		if(thisNode == enemy){
 8001f50:	e7be      	b.n	8001ed0 <deleteEnemyNode+0x18>
			break;
 8001f52:	bf00      	nop
	}
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	080040d4 	.word	0x080040d4

08001f60 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03c      	beq.n	8001fec <deleteBulletNode+0x8c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d039      	beq.n	8001fec <deleteBulletNode+0x8c>
        // If the list is empty or the node to be deleted is NULL, do nothing
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fbe9 	bl	8001754 <fpToInt>
 8001f82:	4604      	mov	r4, r0
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fbe3 	bl	8001754 <fpToInt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fec0 	bl	8000d18 <gotoxy>
    printf(" ");
 8001f98:	2020      	movs	r0, #32
 8001f9a:	f000 fef5 	bl	8002d88 <putchar>

    // If the node to be deleted is the head of the list
    if (*head == nodeToDelete) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d107      	bne.n	8001fb8 <deleteBulletNode+0x58>
        *head = nodeToDelete->nextBulletAddress;  // Update the head to the next node
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);  // Free the memory of the deleted node
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f000 fe17 	bl	8002be4 <free>
        return;
 8001fb6:	e01c      	b.n	8001ff2 <deleteBulletNode+0x92>
    }

    // If the node to be deleted is not the head, traverse the list to find the previous node
    bulletNode_t* current = *head;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8001fbe:	e002      	b.n	8001fc6 <deleteBulletNode+0x66>
        current = current->nextBulletAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <deleteBulletNode+0x76>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d1f4      	bne.n	8001fc0 <deleteBulletNode+0x60>
    }

    if (current == NULL) {
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <deleteBulletNode+0x90>
        // Node to be deleted is not found in the list
        return;
    }

    // Update the next pointer of the previous node to skip the node to be deleted
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	619a      	str	r2, [r3, #24]

    // Free the memory of the deleted node

    free(nodeToDelete);
 8001fe4:	6838      	ldr	r0, [r7, #0]
 8001fe6:	f000 fdfd 	bl	8002be4 <free>
 8001fea:	e002      	b.n	8001ff2 <deleteBulletNode+0x92>
        return;
 8001fec:	bf00      	nop
 8001fee:	e000      	b.n	8001ff2 <deleteBulletNode+0x92>
        return;
 8001ff0:	bf00      	nop
}
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42)}, {intToFp(2), intToFp(42)}, 1, 20, 0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	2002      	movs	r0, #2
 8002014:	f7ff fb89 	bl	800172a <intToFp>
 8002018:	4603      	mov	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	202a      	movs	r0, #42	; 0x2a
 800201e:	f7ff fb84 	bl	800172a <intToFp>
 8002022:	4603      	mov	r3, r0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	2002      	movs	r0, #2
 8002028:	f7ff fb7f 	bl	800172a <intToFp>
 800202c:	4603      	mov	r3, r0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	202a      	movs	r0, #42	; 0x2a
 8002032:	f7ff fb7a 	bl	800172a <intToFp>
 8002036:	4603      	mov	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	2301      	movs	r3, #1
 800203c:	773b      	strb	r3, [r7, #28]
 800203e:	2314      	movs	r3, #20
 8002040:	777b      	strb	r3, [r7, #29]

	enemyNode_t* node = malloc(sizeof(enemyNode_t));
 8002042:	2008      	movs	r0, #8
 8002044:	f000 fdc6 	bl	8002bd4 <malloc>
 8002048:	4603      	mov	r3, r0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
	enemy_t* enemy = malloc(sizeof(enemy_t));
 800204c:	2010      	movs	r0, #16
 800204e:	f000 fdc1 	bl	8002bd4 <malloc>
 8002052:	4603      	mov	r3, r0
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
	position_t* pos = malloc(sizeof(position_t));
 8002056:	2008      	movs	r0, #8
 8002058:	f000 fdbc 	bl	8002bd4 <malloc>
 800205c:	4603      	mov	r3, r0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24

	node->enemy = enemy;
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002064:	601a      	str	r2, [r3, #0]
	pos->x = 0;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
	enemy->position = pos;
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	601a      	str	r2, [r3, #0]
	node->enemy = enemy;
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002076:	601a      	str	r2, [r3, #0]
	node->nextEnemyNode = 0;
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
	gameState->enemyLL = node;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002082:	605a      	str	r2, [r3, #4]

	gameState->bulletHead = NULL;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

	gameState->activeScreen=0; //menu screen
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->btnSelected=0; //start game
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gameState->isDead=0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	gameState->score=0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26
	gameState->cityLives=3;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gameState->spaceship= initSpaceship;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 040c 	add.w	r4, r3, #12
 80020be:	f107 050c 	add.w	r5, r7, #12
 80020c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ca:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//TODO: continue to initialize everything
}
 80020d6:	bf00      	nop
 80020d8:	3730      	adds	r7, #48	; 0x30
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdb0      	pop	{r4, r5, r7, pc}

080020de <drawScreen>:


void drawScreen(gameState_t* gameState) {
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb32 	bl	8001754 <fpToInt>
 80020f0:	4604      	mov	r4, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fb2c 	bl	8001754 <fpToInt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	4620      	mov	r0, r4
 8002102:	f7fe fe09 	bl	8000d18 <gotoxy>
	printf(" ");
 8002106:	2020      	movs	r0, #32
 8002108:	f000 fe3e 	bl	8002d88 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fb1f 	bl	8001754 <fpToInt>
 8002116:	4604      	mov	r4, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb19 	bl	8001754 <fpToInt>
 8002122:	4603      	mov	r3, r0
 8002124:	4619      	mov	r1, r3
 8002126:	4620      	mov	r0, r4
 8002128:	f7fe fdf6 	bl	8000d18 <gotoxy>
	printf("A");
 800212c:	2041      	movs	r0, #65	; 0x41
 800212e:	f000 fe2b 	bl	8002d88 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	330c      	adds	r3, #12
 8002138:	3214      	adds	r2, #20
 800213a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800213e:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fdcc 	bl	8001ce0 <drawEnemy>
	drawBullets(gameState);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe ff05 	bl	8000f58 <drawBullets>

	drawhearth(gameState);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fd44 	bl	8001bdc <drawhearth>
	drawMoon(51,17); // moon graphics
 8002154:	2111      	movs	r1, #17
 8002156:	2033      	movs	r0, #51	; 0x33
 8002158:	f7ff fc0f 	bl	800197a <drawMoon>
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <bossKey>:

int8_t bossKey(gameState_t* gameState){
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 800216c:	f7fe fbea 	bl	8000944 <uart_get_char>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b66      	cmp	r3, #102	; 0x66
 8002178:	d111      	bne.n	800219e <bossKey+0x3a>
		if(gameState->bossMode == 0){
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <bossKey+0x2e>
			clrscr();
 8002184:	f7fe fdb8 	bl	8000cf8 <clrscr>
			gameState->bossMode = 1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002190:	e005      	b.n	800219e <bossKey+0x3a>
		}else{
			gameState->bossMode = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			return 2;
 800219a:	2302      	movs	r3, #2
 800219c:	e00e      	b.n	80021bc <bossKey+0x58>
		}
	}

	if(gameState->bossMode == 1){
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <bossKey+0x56>
		gotoxy(0,0);
 80021a8:	2100      	movs	r1, #0
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe fdb4 	bl	8000d18 <gotoxy>
		printf("Noget meget vigtigt!");
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <bossKey+0x60>)
 80021b2:	f000 fdd1 	bl	8002d58 <iprintf>
		return 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <bossKey+0x58>
	}
	return 0;
 80021ba:	2300      	movs	r3, #0
	uart_clear();
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	080040d8 	.word	0x080040d8

080021c8 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if(gameState->cityLives == 0){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <checkIfDead+0x1a>
		gameState->activeScreen = 3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <main>:

int main(void) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09c      	sub	sp, #112	; 0x70
 80021f4:	af02      	add	r7, sp, #8
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
 80021f6:	4ad4      	ldr	r2, [pc, #848]	; (8002548 <main+0x358>)
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002200:	e883 0003 	stmia.w	r3, {r0, r1}
 8002204:	4ad1      	ldr	r2, [pc, #836]	; (800254c <main+0x35c>)
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002212:	4acf      	ldr	r2, [pc, #828]	; (8002550 <main+0x360>)
 8002214:	f107 0318 	add.w	r3, r7, #24
 8002218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800221c:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(256000);
 8002220:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8002224:	f7fe fc32 	bl	8000a8c <uart_init>
	initVariables(&gameState);
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fee3 	bl	8001ff8 <initVariables>
	initTimer();
 8002232:	f7ff f837 	bl	80012a4 <initTimer>
	initJoystick();
 8002236:	f7fe ff15 	bl	8001064 <initJoystick>
	I2C_init();
 800223a:	f7ff f8f1 	bl	8001420 <I2C_init>
	srand(time(NULL));   //RNG
 800223e:	2000      	movs	r0, #0
 8002240:	f000 ff7a 	bl	8003138 <time>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4613      	mov	r3, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fe28 	bl	8002ea0 <srand>



	while(1){
		switch(gameState.activeScreen){
 8002250:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002254:	2b03      	cmp	r3, #3
 8002256:	d8fb      	bhi.n	8002250 <main+0x60>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <main+0x70>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	0800244f 	.word	0x0800244f
 8002268:	08002511 	.word	0x08002511
 800226c:	080025ad 	.word	0x080025ad
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8002270:	f7fe fd42 	bl	8000cf8 <clrscr>
			drawWindow();
 8002274:	f000 fa74 	bl	8002760 <drawWindow>
			drawBox(1,1,156,43,0);//window
 8002278:	2300      	movs	r3, #0
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	232b      	movs	r3, #43	; 0x2b
 800227e:	229c      	movs	r2, #156	; 0x9c
 8002280:	2101      	movs	r1, #1
 8002282:	2001      	movs	r0, #1
 8002284:	f7fe fd5a 	bl	8000d3c <drawBox>
			drawbackground(); // stars in background
 8002288:	f7ff fa85 	bl	8001796 <drawbackground>
			drawMenuScreen(btnList, &gameState);
 800228c:	f107 0220 	add.w	r2, r7, #32
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fa28 	bl	80026ec <drawMenuScreen>


			while(gameState.activeScreen==0){
 800229c:	e0d1      	b.n	8002442 <main+0x252>
				gotoxy(20,20);
 800229e:	2114      	movs	r1, #20
 80022a0:	2014      	movs	r0, #20
 80022a2:	f7fe fd39 	bl	8000d18 <gotoxy>
				uint8_t x = I2C_Read(0x98, 0x98, NULL, 1);
 80022a6:	2301      	movs	r3, #1
 80022a8:	2200      	movs	r2, #0
 80022aa:	2198      	movs	r1, #152	; 0x98
 80022ac:	2098      	movs	r0, #152	; 0x98
 80022ae:	f7ff f843 	bl	8001338 <I2C_Read>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				printf("%d\n", x);
 80022b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022bc:	4619      	mov	r1, r3
 80022be:	48a5      	ldr	r0, [pc, #660]	; (8002554 <main+0x364>)
 80022c0:	f000 fd4a 	bl	8002d58 <iprintf>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff4b 	bl	8002164 <bossKey>
 80022ce:	4603      	mov	r3, r0
 80022d0:	653b      	str	r3, [r7, #80]	; 0x50
				if(bossKeyChange == 1) continue;
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d100      	bne.n	80022da <main+0xea>
 80022d8:	e0b3      	b.n	8002442 <main+0x252>
				else if(bossKeyChange == 2){
 80022da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d113      	bne.n	8002308 <main+0x118>
					//Initialize window agian
					clrscr();
 80022e0:	f7fe fd0a 	bl	8000cf8 <clrscr>
					drawBox(1,1,156,43,0);//window
 80022e4:	2300      	movs	r3, #0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	232b      	movs	r3, #43	; 0x2b
 80022ea:	229c      	movs	r2, #156	; 0x9c
 80022ec:	2101      	movs	r1, #1
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7fe fd24 	bl	8000d3c <drawBox>
					drawbackground(); // stars in background
 80022f4:	f7ff fa4f 	bl	8001796 <drawbackground>
					drawMenuScreen(btnList, &gameState);
 80022f8:	f107 0220 	add.w	r2, r7, #32
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f9f2 	bl	80026ec <drawMenuScreen>
				}

				if(downIsPressed()){
 8002308:	f7fe ff9e 	bl	8001248 <downIsPressed>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d025      	beq.n	800235e <main+0x16e>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002312:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800231c:	4413      	add	r3, r2
 800231e:	3b60      	subs	r3, #96	; 0x60
 8002320:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002324:	f000 f9c2 	bl	80026ac <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8002328:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	4b8a      	ldr	r3, [pc, #552]	; (8002558 <main+0x368>)
 8002330:	fb83 3102 	smull	r3, r1, r3, r2
 8002334:	17d3      	asrs	r3, r2, #31
 8002336:	1ac9      	subs	r1, r1, r3
 8002338:	460b      	mov	r3, r1
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	440b      	add	r3, r1
 800233e:	1ad1      	subs	r1, r2, r3
 8002340:	b2cb      	uxtb	r3, r1
 8002342:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8002346:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002350:	4413      	add	r3, r2
 8002352:	3b60      	subs	r3, #96	; 0x60
 8002354:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002358:	f000 f988 	bl	800266c <drawBtnAsSelected>
 800235c:	e028      	b.n	80023b0 <main+0x1c0>
				}
				else if(upIsPressed()){
 800235e:	f7fe ff45 	bl	80011ec <upIsPressed>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <main+0x1c0>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8002368:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002372:	4413      	add	r3, r2
 8002374:	3b60      	subs	r3, #96	; 0x60
 8002376:	e893 0003 	ldmia.w	r3, {r0, r1}
 800237a:	f000 f997 	bl	80026ac <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 800237e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <main+0x19e>
 8002386:	2302      	movs	r3, #2
 8002388:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800238c:	e005      	b.n	800239a <main+0x1aa>
					else gameState.btnSelected=gameState.btnSelected-1;
 800238e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002392:	3b01      	subs	r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 800239a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023a4:	4413      	add	r3, r2
 80023a6:	3b60      	subs	r3, #96	; 0x60
 80023a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ac:	f000 f95e 	bl	800266c <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 80023b0:	f7fe feee 	bl	8001190 <centerIsPressed>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d043      	beq.n	8002442 <main+0x252>
					if(gameState.btnSelected==0){ //START BUTTON
 80023ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <main+0x1da>
						gameState.activeScreen=1; //Game screen
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80023c8:	e03b      	b.n	8002442 <main+0x252>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 80023ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d130      	bne.n	8002434 <main+0x244>
						gameState.difficulty=(gameState.difficulty+1)%3;
 80023d2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <main+0x368>)
 80023da:	fb83 3102 	smull	r3, r1, r3, r2
 80023de:	17d3      	asrs	r3, r2, #31
 80023e0:	1ac9      	subs	r1, r1, r3
 80023e2:	460b      	mov	r3, r1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	440b      	add	r3, r1
 80023e8:	1ad1      	subs	r1, r2, r3
 80023ea:	b2cb      	uxtb	r3, r1
 80023ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 80023f0:	4b56      	ldr	r3, [pc, #344]	; (800254c <main+0x35c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	330f      	adds	r3, #15
 80023f6:	4a55      	ldr	r2, [pc, #340]	; (800254c <main+0x35c>)
 80023f8:	7852      	ldrb	r2, [r2, #1]
 80023fa:	3201      	adds	r2, #1
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fc8a 	bl	8000d18 <gotoxy>
						if(gameState.difficulty==0){
 8002404:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <main+0x224>
							printf("EASY  ");
 800240c:	4853      	ldr	r0, [pc, #332]	; (800255c <main+0x36c>)
 800240e:	f000 fca3 	bl	8002d58 <iprintf>
 8002412:	e016      	b.n	8002442 <main+0x252>
						} else if(gameState.difficulty==1){
 8002414:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d103      	bne.n	8002424 <main+0x234>
							printf("MEDIUM");
 800241c:	4850      	ldr	r0, [pc, #320]	; (8002560 <main+0x370>)
 800241e:	f000 fc9b 	bl	8002d58 <iprintf>
 8002422:	e00e      	b.n	8002442 <main+0x252>
						} else if(gameState.difficulty==2){
 8002424:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002428:	2b02      	cmp	r3, #2
 800242a:	d10a      	bne.n	8002442 <main+0x252>
							printf("HARD  ");
 800242c:	484d      	ldr	r0, [pc, #308]	; (8002564 <main+0x374>)
 800242e:	f000 fc93 	bl	8002d58 <iprintf>
 8002432:	e006      	b.n	8002442 <main+0x252>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8002434:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002438:	2b02      	cmp	r3, #2
 800243a:	d102      	bne.n	8002442 <main+0x252>
						gameState.activeScreen=2;// help screen
 800243c:	2302      	movs	r3, #2
 800243e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==0){
 8002442:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002446:	2b00      	cmp	r3, #0
 8002448:	f43f af29 	beq.w	800229e <main+0xae>
					}
				}
			}
			break;
 800244c:	e0df      	b.n	800260e <main+0x41e>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 800244e:	f7fe fc53 	bl	8000cf8 <clrscr>
			printf("GAME SCREEN");
 8002452:	4845      	ldr	r0, [pc, #276]	; (8002568 <main+0x378>)
 8002454:	f000 fc80 	bl	8002d58 <iprintf>
			uint32_t frameLastUpdated=0;
 8002458:	2300      	movs	r3, #0
 800245a:	667b      	str	r3, [r7, #100]	; 0x64
			uint8_t dir = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	71fb      	strb	r3, [r7, #7]
			gameState.spaceship.lastShotTime=runtime;
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <main+0x37c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	643b      	str	r3, [r7, #64]	; 0x40
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			while(gameState.activeScreen==1){
 8002466:	e04e      	b.n	8002506 <main+0x316>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002468:	f107 0320 	add.w	r3, r7, #32
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe79 	bl	8002164 <bossKey>
 8002472:	4603      	mov	r3, r0
 8002474:	65bb      	str	r3, [r7, #88]	; 0x58
				if(bossKeyChange == 1) continue;
 8002476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002478:	2b01      	cmp	r3, #1
 800247a:	d100      	bne.n	800247e <main+0x28e>
 800247c:	e043      	b.n	8002506 <main+0x316>
				else if(bossKeyChange == 2){
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	2b02      	cmp	r3, #2
 8002482:	d108      	bne.n	8002496 <main+0x2a6>
					//Initialize window agian
					clrscr();
 8002484:	f7fe fc38 	bl	8000cf8 <clrscr>
					gotoxy(0,0);
 8002488:	2100      	movs	r1, #0
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fc44 	bl	8000d18 <gotoxy>
					printf("GAME SCREEN");
 8002490:	4835      	ldr	r0, [pc, #212]	; (8002568 <main+0x378>)
 8002492:	f000 fc61 	bl	8002d58 <iprintf>
				}

				if(runtime-frameLastUpdated>=framePeriod){//
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <main+0x37c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d931      	bls.n	8002506 <main+0x316>
					updateSpaceship(&gameState, &dir);
 80024a2:	1dfa      	adds	r2, r7, #7
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f966 	bl	800277c <updateSpaceship>
					spawnEnemy(&gameState);
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f85f 	bl	8001578 <spawnEnemy>
					updateEnemy(&gameState);
 80024ba:	f107 0320 	add.w	r3, r7, #32
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f8cc 	bl	800165c <updateEnemy>
					shootSpaceship(&gameState);
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f98f 	bl	80027ec <shootSpaceship>
//					shootEnemy(&gameState);
					updateBullets(&gameState);
 80024ce:	f107 0320 	add.w	r3, r7, #32
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fcfd 	bl	8000ed2 <updateBullets>
					detectBulletHit(&gameState);
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fd1b 	bl	8000f18 <detectBulletHit>
					detectCityHit(&gameState);
 80024e2:	f107 0320 	add.w	r3, r7, #32
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f8ee 	bl	80016c8 <detectCityHit>
//					powerUp(&gameState);
//					nukeUpdate(&gameState);
					checkIfDead(&gameState);
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fe69 	bl	80021c8 <checkIfDead>
					drawScreen(&gameState);
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fdef 	bl	80020de <drawScreen>
					frameLastUpdated=runtime;
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <main+0x37c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
			while(gameState.activeScreen==1){
 8002506:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800250a:	2b01      	cmp	r3, #1
 800250c:	d0ac      	beq.n	8002468 <main+0x278>
				}
		}
			break;
 800250e:	e07e      	b.n	800260e <main+0x41e>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8002510:	f7fe fbf2 	bl	8000cf8 <clrscr>
			drawWindow();
 8002514:	f000 f924 	bl	8002760 <drawWindow>
			drawBox(1,1,156,43,0);//window
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	232b      	movs	r3, #43	; 0x2b
 800251e:	229c      	movs	r2, #156	; 0x9c
 8002520:	2101      	movs	r1, #1
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe fc0a 	bl	8000d3c <drawBox>
			drawbackground(); // stars in background
 8002528:	f7ff f935 	bl	8001796 <drawbackground>
			drawHelpScreen();
 800252c:	f000 f902 	bl	8002734 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8002530:	e037      	b.n	80025a2 <main+0x3b2>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 8002532:	f107 0320 	add.w	r3, r7, #32
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fe14 	bl	8002164 <bossKey>
 800253c:	4603      	mov	r3, r0
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if(bossKeyChange == 1) continue;
 8002540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d114      	bne.n	8002570 <main+0x380>
 8002546:	e02c      	b.n	80025a2 <main+0x3b2>
 8002548:	08004190 	.word	0x08004190
 800254c:	08004198 	.word	0x08004198
 8002550:	080041a0 	.word	0x080041a0
 8002554:	080040f0 	.word	0x080040f0
 8002558:	55555556 	.word	0x55555556
 800255c:	080040f4 	.word	0x080040f4
 8002560:	080040fc 	.word	0x080040fc
 8002564:	08004104 	.word	0x08004104
 8002568:	0800410c 	.word	0x0800410c
 800256c:	200001c8 	.word	0x200001c8
				else if(bossKeyChange == 2){
 8002570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002572:	2b02      	cmp	r3, #2
 8002574:	d10d      	bne.n	8002592 <main+0x3a2>
					//Initialize window agian
					clrscr();
 8002576:	f7fe fbbf 	bl	8000cf8 <clrscr>
					drawBox(1,1,156,43,0);//window
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	232b      	movs	r3, #43	; 0x2b
 8002580:	229c      	movs	r2, #156	; 0x9c
 8002582:	2101      	movs	r1, #1
 8002584:	2001      	movs	r0, #1
 8002586:	f7fe fbd9 	bl	8000d3c <drawBox>
					drawbackground(); // stars in background
 800258a:	f7ff f904 	bl	8001796 <drawbackground>
					drawHelpScreen();
 800258e:	f000 f8d1 	bl	8002734 <drawHelpScreen>
				}

				if(centerIsPressed()){
 8002592:	f7fe fdfd 	bl	8001190 <centerIsPressed>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <main+0x3b2>
					gameState.activeScreen=0;//MENU SCREEN
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==2){
 80025a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d0c3      	beq.n	8002532 <main+0x342>
				}
			}
			break;
 80025aa:	e030      	b.n	800260e <main+0x41e>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 80025ac:	f7fe fba4 	bl	8000cf8 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 80025b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025b4:	4619      	mov	r1, r3
 80025b6:	4816      	ldr	r0, [pc, #88]	; (8002610 <main+0x420>)
 80025b8:	f000 fbce 	bl	8002d58 <iprintf>
			while(gameState.activeScreen==3){
 80025bc:	e022      	b.n	8002604 <main+0x414>
				//Bosskey test
				int bossKeyChange = bossKey(&gameState);
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdce 	bl	8002164 <bossKey>
 80025c8:	4603      	mov	r3, r0
 80025ca:	663b      	str	r3, [r7, #96]	; 0x60
				if(bossKeyChange == 1) continue;
 80025cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d100      	bne.n	80025d4 <main+0x3e4>
 80025d2:	e017      	b.n	8002604 <main+0x414>
				else if(bossKeyChange == 2){
 80025d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <main+0x3fa>
					//Initialize window agian
					clrscr();
 80025da:	f7fe fb8d 	bl	8000cf8 <clrscr>
					printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d", gameState.score);
 80025de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025e2:	4619      	mov	r1, r3
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <main+0x420>)
 80025e6:	f000 fbb7 	bl	8002d58 <iprintf>
				}
				if(centerIsPressed()){
 80025ea:	f7fe fdd1 	bl	8001190 <centerIsPressed>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <main+0x414>
					initVariables(&gameState);
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fcfd 	bl	8001ff8 <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			while(gameState.activeScreen==3){
 8002604:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002608:	2b03      	cmp	r3, #3
 800260a:	d0d8      	beq.n	80025be <main+0x3ce>
				}
			}
			break;
 800260c:	bf00      	nop
		switch(gameState.activeScreen){
 800260e:	e61f      	b.n	8002250 <main+0x60>
 8002610:	08004118 	.word	0x08004118

08002614 <drawButton>:
#include "menu.h"




void drawButton(button_t btn){
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b087      	sub	sp, #28
 8002618:	af02      	add	r7, sp, #8
 800261a:	463b      	mov	r3, r7
 800261c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fdd4 	bl	80001d0 <strlen>
 8002628:	4603      	mov	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 800262c:	783b      	ldrb	r3, [r7, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	461c      	mov	r4, r3
 8002634:	783b      	ldrb	r3, [r7, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	1d5a      	adds	r2, r3, #5
 800263e:	787b      	ldrb	r3, [r7, #1]
 8002640:	3302      	adds	r3, #2
 8002642:	2100      	movs	r1, #0
 8002644:	9100      	str	r1, [sp, #0]
 8002646:	4621      	mov	r1, r4
 8002648:	f7fe fb78 	bl	8000d3c <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 800264c:	783b      	ldrb	r3, [r7, #0]
 800264e:	3303      	adds	r3, #3
 8002650:	787a      	ldrb	r2, [r7, #1]
 8002652:	3201      	adds	r2, #1
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fb5e 	bl	8000d18 <gotoxy>
	printf(btn.text);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fb7a 	bl	8002d58 <iprintf>
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b087      	sub	sp, #28
 8002670:	af02      	add	r7, sp, #8
 8002672:	463b      	mov	r3, r7
 8002674:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd fda8 	bl	80001d0 <strlen>
 8002680:	4603      	mov	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8002684:	783b      	ldrb	r3, [r7, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	461c      	mov	r4, r3
 800268c:	783b      	ldrb	r3, [r7, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	1d5a      	adds	r2, r3, #5
 8002696:	787b      	ldrb	r3, [r7, #1]
 8002698:	3302      	adds	r3, #2
 800269a:	2101      	movs	r1, #1
 800269c:	9100      	str	r1, [sp, #0]
 800269e:	4621      	mov	r1, r4
 80026a0:	f7fe fb4c 	bl	8000d3c <drawBox>
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	463b      	mov	r3, r7
 80026b4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fd88 	bl	80001d0 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80026c4:	783b      	ldrb	r3, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	461c      	mov	r4, r3
 80026cc:	783b      	ldrb	r3, [r7, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	1d5a      	adds	r2, r3, #5
 80026d6:	787b      	ldrb	r3, [r7, #1]
 80026d8:	3302      	adds	r3, #2
 80026da:	2100      	movs	r1, #0
 80026dc:	9100      	str	r1, [sp, #0]
 80026de:	4621      	mov	r1, r4
 80026e0:	f7fe fb2c 	bl	8000d3c <drawBox>
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026fc:	f7ff ff8a 	bl	8002614 <drawButton>
	drawButton(btnList[1]);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3308      	adds	r3, #8
 8002704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002708:	f7ff ff84 	bl	8002614 <drawButton>
	drawButton(btnList[2]);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3310      	adds	r3, #16
 8002710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002714:	f7ff ff7e 	bl	8002614 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002728:	f7ff ffa0 	bl	800266c <drawBtnAsSelected>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <drawHelpScreen>:


void drawHelpScreen(){
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8002738:	2105      	movs	r1, #5
 800273a:	2046      	movs	r0, #70	; 0x46
 800273c:	f7fe faec 	bl	8000d18 <gotoxy>
	printf("HELP SCREEN");
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <drawHelpScreen+0x24>)
 8002742:	f000 fb09 	bl	8002d58 <iprintf>
	gotoxy(60,7);
 8002746:	2107      	movs	r1, #7
 8002748:	203c      	movs	r0, #60	; 0x3c
 800274a:	f7fe fae5 	bl	8000d18 <gotoxy>
	printf("Tag dig dog sammen mand!");
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <drawHelpScreen+0x28>)
 8002750:	f000 fb02 	bl	8002d58 <iprintf>

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	08004168 	.word	0x08004168
 800275c:	08004174 	.word	0x08004174

08002760 <drawWindow>:

void drawWindow(){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	232b      	movs	r3, #43	; 0x2b
 800276c:	229c      	movs	r2, #156	; 0x9c
 800276e:	2101      	movs	r1, #1
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe fae3 	bl	8000d3c <drawBox>
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <updateSpaceship>:
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState, uint8_t* dir){
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]

	if(fpToInt(gameState->spaceship.position.x)>=screenWidth-1){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe ffe2 	bl	8001754 <fpToInt>
 8002790:	4603      	mov	r3, r0
 8002792:	2b9a      	cmp	r3, #154	; 0x9a
 8002794:	dd03      	ble.n	800279e <updateSpaceship+0x22>
		*dir =1;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e00a      	b.n	80027b4 <updateSpaceship+0x38>
	} else if(fpToInt(gameState->spaceship.position.x)<=2){
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe ffd6 	bl	8001754 <fpToInt>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	dc02      	bgt.n	80027b4 <updateSpaceship+0x38>
		*dir =0;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	}
	if(*dir==0){
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <updateSpaceship+0x54>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x+intToFp(2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68dc      	ldr	r4, [r3, #12]
 80027c0:	2002      	movs	r0, #2
 80027c2:	f7fe ffb2 	bl	800172a <intToFp>
 80027c6:	4603      	mov	r3, r0
 80027c8:	18e2      	adds	r2, r4, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	615a      	str	r2, [r3, #20]
	} else {
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
	}
}
 80027ce:	e008      	b.n	80027e2 <updateSpaceship+0x66>
		gameState->spaceship.nextPosition.x=gameState->spaceship.position.x-intToFp(2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68dc      	ldr	r4, [r3, #12]
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7fe ffa8 	bl	800172a <intToFp>
 80027da:	4603      	mov	r3, r0
 80027dc:	1ae2      	subs	r2, r4, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	615a      	str	r2, [r3, #20]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
	...

080027ec <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 80027ec:	b5b0      	push	{r4, r5, r7, lr}
 80027ee:	b092      	sub	sp, #72	; 0x48
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	6078      	str	r0, [r7, #4]
	uint8_t firingPeriod = gameState->spaceship.firingPeriod;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7f5b      	ldrb	r3, [r3, #29]
 80027f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	if(runtime-gameState->spaceship.lastShotTime>=firingPeriod){//
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <shootSpaceship+0xac>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	1ad2      	subs	r2, r2, r3
 8002806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800280a:	429a      	cmp	r2, r3
 800280c:	d33f      	bcc.n	800288e <shootSpaceship+0xa2>
		gameState->spaceship.lastShotTime = runtime;
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <shootSpaceship+0xac>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]


		vector_t bulletVelocity = {intToFp(0),intToFp(-3)};
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe ff87 	bl	800172a <intToFp>
 800281c:	4603      	mov	r3, r0
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002820:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8002824:	f7fe ff81 	bl	800172a <intToFp>
 8002828:	4603      	mov	r3, r0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691c      	ldr	r4, [r3, #16]
 8002836:	2001      	movs	r0, #1
 8002838:	f7fe ff77 	bl	800172a <intToFp>
 800283c:	4603      	mov	r3, r0
 800283e:	1ae3      	subs	r3, r4, r3
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800284a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800284e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800285a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800285e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800286a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800286e:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletHead), bullet);
 8002872:	687d      	ldr	r5, [r7, #4]
 8002874:	466c      	mov	r4, sp
 8002876:	f107 0318 	add.w	r3, r7, #24
 800287a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800287e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fab5 	bl	8001df8 <appendBullet>
	}
}
 800288e:	bf00      	nop
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bdb0      	pop	{r4, r5, r7, pc}
 8002896:	bf00      	nop
 8002898:	200001c8 	.word	0x200001c8

0800289c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_kill>:

int _kill(int pid, int sig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b6:	f000 f94f 	bl	8002b58 <__errno>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2216      	movs	r2, #22
 80028be:	601a      	str	r2, [r3, #0]
	return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_exit>:

void _exit (int status)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffe7 	bl	80028ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80028de:	e7fe      	b.n	80028de <_exit+0x12>

080028e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e00a      	b.n	8002908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f2:	f3af 8000 	nop.w
 80028f6:	4601      	mov	r1, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf0      	blt.n	80028f2 <_read+0x12>
	}

return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_close>:
	}
	return len;
}

int _close(int file)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	return -1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002942:	605a      	str	r2, [r3, #4]
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_isatty>:

int _isatty(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	return 1;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
	return 0;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_sbrk+0x50>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x16>
		heap_end = &end;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <_sbrk+0x50>)
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <_sbrk+0x54>)
 8002998:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <_sbrk+0x50>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <_sbrk+0x50>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	466a      	mov	r2, sp
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d907      	bls.n	80029be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029ae:	f000 f8d3 	bl	8002b58 <__errno>
 80029b2:	4603      	mov	r3, r0
 80029b4:	220c      	movs	r2, #12
 80029b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029bc:	e006      	b.n	80029cc <_sbrk+0x48>
	}

	heap_end += incr;
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <_sbrk+0x50>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <_sbrk+0x50>)
 80029c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200001bc 	.word	0x200001bc
 80029d8:	200001e0 	.word	0x200001e0

080029dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <SystemInit+0x84>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <SystemInit+0x84>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <SystemInit+0x88>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <SystemInit+0x88>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <SystemInit+0x88>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4918      	ldr	r1, [pc, #96]	; (8002a64 <SystemInit+0x88>)
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <SystemInit+0x8c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <SystemInit+0x88>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <SystemInit+0x88>)
 8002a0e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <SystemInit+0x88>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <SystemInit+0x88>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <SystemInit+0x88>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <SystemInit+0x88>)
 8002a2a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a2e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <SystemInit+0x88>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <SystemInit+0x88>)
 8002a36:	f023 030f 	bic.w	r3, r3, #15
 8002a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <SystemInit+0x88>)
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	4908      	ldr	r1, [pc, #32]	; (8002a64 <SystemInit+0x88>)
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <SystemInit+0x90>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <SystemInit+0x88>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002a4e:	f000 f80f 	bl	8002a70 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a52:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <SystemInit+0x84>)
 8002a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a58:	609a      	str	r2, [r3, #8]
#endif  
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	f87fc00c 	.word	0xf87fc00c
 8002a6c:	ff00fccc 	.word	0xff00fccc

08002a70 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <SetSysClock+0x8c>)
 8002a76:	2212      	movs	r2, #18
 8002a78:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <SetSysClock+0x90>)
 8002a7c:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <SetSysClock+0x90>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <SetSysClock+0x90>)
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <SetSysClock+0x90>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <SetSysClock+0x90>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <SetSysClock+0x90>)
 8002a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a94:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <SetSysClock+0x90>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <SetSysClock+0x90>)
 8002a9c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002aa0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002aa2:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <SetSysClock+0x90>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <SetSysClock+0x90>)
 8002aa8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002aac:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <SetSysClock+0x90>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <SetSysClock+0x90>)
 8002ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002aba:	bf00      	nop
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <SetSysClock+0x90>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f9      	beq.n	8002abc <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <SetSysClock+0x90>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <SetSysClock+0x90>)
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <SetSysClock+0x90>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <SetSysClock+0x90>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002ae0:	bf00      	nop
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <SetSysClock+0x90>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d1f9      	bne.n	8002ae2 <SetSysClock+0x72>
  {
  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40021000 	.word	0x40021000

08002b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b0a:	490e      	ldr	r1, [pc, #56]	; (8002b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <LoopForever+0xe>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b20:	4c0b      	ldr	r4, [pc, #44]	; (8002b50 <LoopForever+0x16>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b2e:	f7ff ff55 	bl	80029dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b32:	f000 f82b 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b36:	f7ff fb5b 	bl	80021f0 <main>

08002b3a <LoopForever>:

LoopForever:
    b LoopForever
 8002b3a:	e7fe      	b.n	8002b3a <LoopForever>
  ldr   r0, =_estack
 8002b3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002b48:	080042fc 	.word	0x080042fc
  ldr r2, =_sbss
 8002b4c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002b50:	200001dc 	.word	0x200001dc

08002b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC1_2_IRQHandler>
	...

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000002c 	.word	0x2000002c

08002b64 <exit>:
 8002b64:	b508      	push	{r3, lr}
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <exit+0x20>)
 8002b68:	4604      	mov	r4, r0
 8002b6a:	b113      	cbz	r3, 8002b72 <exit+0xe>
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f3af 8000 	nop.w
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <exit+0x24>)
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b78:	b103      	cbz	r3, 8002b7c <exit+0x18>
 8002b7a:	4798      	blx	r3
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff fea5 	bl	80028cc <_exit>
 8002b82:	bf00      	nop
 8002b84:	00000000 	.word	0x00000000
 8002b88:	080041a8 	.word	0x080041a8

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	; (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	; (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f001 fa34 	bl	800400c <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	080042f4 	.word	0x080042f4
 8002bc8:	080042f4 	.word	0x080042f4
 8002bcc:	080042f4 	.word	0x080042f4
 8002bd0:	080042f8 	.word	0x080042f8

08002bd4 <malloc>:
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <malloc+0xc>)
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f000 b863 	b.w	8002ca4 <_malloc_r>
 8002bde:	bf00      	nop
 8002be0:	2000002c 	.word	0x2000002c

08002be4 <free>:
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <free+0xc>)
 8002be6:	4601      	mov	r1, r0
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	f000 b80b 	b.w	8002c04 <_free_r>
 8002bee:	bf00      	nop
 8002bf0:	2000002c 	.word	0x2000002c

08002bf4 <memset>:
 8002bf4:	4402      	add	r2, r0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <_free_r>:
 8002c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c06:	2900      	cmp	r1, #0
 8002c08:	d048      	beq.n	8002c9c <_free_r+0x98>
 8002c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c0e:	9001      	str	r0, [sp, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f1a1 0404 	sub.w	r4, r1, #4
 8002c16:	bfb8      	it	lt
 8002c18:	18e4      	addlt	r4, r4, r3
 8002c1a:	f000 fdc9 	bl	80037b0 <__malloc_lock>
 8002c1e:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <_free_r+0x9c>)
 8002c20:	9801      	ldr	r0, [sp, #4]
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	4615      	mov	r5, r2
 8002c26:	b933      	cbnz	r3, 8002c36 <_free_r+0x32>
 8002c28:	6063      	str	r3, [r4, #4]
 8002c2a:	6014      	str	r4, [r2, #0]
 8002c2c:	b003      	add	sp, #12
 8002c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c32:	f000 bdc3 	b.w	80037bc <__malloc_unlock>
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	d90b      	bls.n	8002c52 <_free_r+0x4e>
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	1862      	adds	r2, r4, r1
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	bf04      	itt	eq
 8002c42:	681a      	ldreq	r2, [r3, #0]
 8002c44:	685b      	ldreq	r3, [r3, #4]
 8002c46:	6063      	str	r3, [r4, #4]
 8002c48:	bf04      	itt	eq
 8002c4a:	1852      	addeq	r2, r2, r1
 8002c4c:	6022      	streq	r2, [r4, #0]
 8002c4e:	602c      	str	r4, [r5, #0]
 8002c50:	e7ec      	b.n	8002c2c <_free_r+0x28>
 8002c52:	461a      	mov	r2, r3
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b10b      	cbz	r3, 8002c5c <_free_r+0x58>
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	d9fa      	bls.n	8002c52 <_free_r+0x4e>
 8002c5c:	6811      	ldr	r1, [r2, #0]
 8002c5e:	1855      	adds	r5, r2, r1
 8002c60:	42a5      	cmp	r5, r4
 8002c62:	d10b      	bne.n	8002c7c <_free_r+0x78>
 8002c64:	6824      	ldr	r4, [r4, #0]
 8002c66:	4421      	add	r1, r4
 8002c68:	1854      	adds	r4, r2, r1
 8002c6a:	42a3      	cmp	r3, r4
 8002c6c:	6011      	str	r1, [r2, #0]
 8002c6e:	d1dd      	bne.n	8002c2c <_free_r+0x28>
 8002c70:	681c      	ldr	r4, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	6053      	str	r3, [r2, #4]
 8002c76:	4421      	add	r1, r4
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	e7d7      	b.n	8002c2c <_free_r+0x28>
 8002c7c:	d902      	bls.n	8002c84 <_free_r+0x80>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	6003      	str	r3, [r0, #0]
 8002c82:	e7d3      	b.n	8002c2c <_free_r+0x28>
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	1961      	adds	r1, r4, r5
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	bf04      	itt	eq
 8002c8c:	6819      	ldreq	r1, [r3, #0]
 8002c8e:	685b      	ldreq	r3, [r3, #4]
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	bf04      	itt	eq
 8002c94:	1949      	addeq	r1, r1, r5
 8002c96:	6021      	streq	r1, [r4, #0]
 8002c98:	6054      	str	r4, [r2, #4]
 8002c9a:	e7c7      	b.n	8002c2c <_free_r+0x28>
 8002c9c:	b003      	add	sp, #12
 8002c9e:	bd30      	pop	{r4, r5, pc}
 8002ca0:	200001c0 	.word	0x200001c0

08002ca4 <_malloc_r>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	1ccd      	adds	r5, r1, #3
 8002ca8:	f025 0503 	bic.w	r5, r5, #3
 8002cac:	3508      	adds	r5, #8
 8002cae:	2d0c      	cmp	r5, #12
 8002cb0:	bf38      	it	cc
 8002cb2:	250c      	movcc	r5, #12
 8002cb4:	2d00      	cmp	r5, #0
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	db01      	blt.n	8002cbe <_malloc_r+0x1a>
 8002cba:	42a9      	cmp	r1, r5
 8002cbc:	d903      	bls.n	8002cc6 <_malloc_r+0x22>
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	6033      	str	r3, [r6, #0]
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc6:	f000 fd73 	bl	80037b0 <__malloc_lock>
 8002cca:	4921      	ldr	r1, [pc, #132]	; (8002d50 <_malloc_r+0xac>)
 8002ccc:	680a      	ldr	r2, [r1, #0]
 8002cce:	4614      	mov	r4, r2
 8002cd0:	b99c      	cbnz	r4, 8002cfa <_malloc_r+0x56>
 8002cd2:	4f20      	ldr	r7, [pc, #128]	; (8002d54 <_malloc_r+0xb0>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b923      	cbnz	r3, 8002ce2 <_malloc_r+0x3e>
 8002cd8:	4621      	mov	r1, r4
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f000 f94e 	bl	8002f7c <_sbrk_r>
 8002ce0:	6038      	str	r0, [r7, #0]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f000 f949 	bl	8002f7c <_sbrk_r>
 8002cea:	1c43      	adds	r3, r0, #1
 8002cec:	d123      	bne.n	8002d36 <_malloc_r+0x92>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	6033      	str	r3, [r6, #0]
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f000 fd62 	bl	80037bc <__malloc_unlock>
 8002cf8:	e7e3      	b.n	8002cc2 <_malloc_r+0x1e>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	1b5b      	subs	r3, r3, r5
 8002cfe:	d417      	bmi.n	8002d30 <_malloc_r+0x8c>
 8002d00:	2b0b      	cmp	r3, #11
 8002d02:	d903      	bls.n	8002d0c <_malloc_r+0x68>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	441c      	add	r4, r3
 8002d08:	6025      	str	r5, [r4, #0]
 8002d0a:	e004      	b.n	8002d16 <_malloc_r+0x72>
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	42a2      	cmp	r2, r4
 8002d10:	bf0c      	ite	eq
 8002d12:	600b      	streq	r3, [r1, #0]
 8002d14:	6053      	strne	r3, [r2, #4]
 8002d16:	4630      	mov	r0, r6
 8002d18:	f000 fd50 	bl	80037bc <__malloc_unlock>
 8002d1c:	f104 000b 	add.w	r0, r4, #11
 8002d20:	1d23      	adds	r3, r4, #4
 8002d22:	f020 0007 	bic.w	r0, r0, #7
 8002d26:	1ac2      	subs	r2, r0, r3
 8002d28:	d0cc      	beq.n	8002cc4 <_malloc_r+0x20>
 8002d2a:	1a1b      	subs	r3, r3, r0
 8002d2c:	50a3      	str	r3, [r4, r2]
 8002d2e:	e7c9      	b.n	8002cc4 <_malloc_r+0x20>
 8002d30:	4622      	mov	r2, r4
 8002d32:	6864      	ldr	r4, [r4, #4]
 8002d34:	e7cc      	b.n	8002cd0 <_malloc_r+0x2c>
 8002d36:	1cc4      	adds	r4, r0, #3
 8002d38:	f024 0403 	bic.w	r4, r4, #3
 8002d3c:	42a0      	cmp	r0, r4
 8002d3e:	d0e3      	beq.n	8002d08 <_malloc_r+0x64>
 8002d40:	1a21      	subs	r1, r4, r0
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 f91a 	bl	8002f7c <_sbrk_r>
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d1dd      	bne.n	8002d08 <_malloc_r+0x64>
 8002d4c:	e7cf      	b.n	8002cee <_malloc_r+0x4a>
 8002d4e:	bf00      	nop
 8002d50:	200001c0 	.word	0x200001c0
 8002d54:	200001c4 	.word	0x200001c4

08002d58 <iprintf>:
 8002d58:	b40f      	push	{r0, r1, r2, r3}
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <iprintf+0x2c>)
 8002d5c:	b513      	push	{r0, r1, r4, lr}
 8002d5e:	681c      	ldr	r4, [r3, #0]
 8002d60:	b124      	cbz	r4, 8002d6c <iprintf+0x14>
 8002d62:	69a3      	ldr	r3, [r4, #24]
 8002d64:	b913      	cbnz	r3, 8002d6c <iprintf+0x14>
 8002d66:	4620      	mov	r0, r4
 8002d68:	f000 fbf8 	bl	800355c <__sinit>
 8002d6c:	ab05      	add	r3, sp, #20
 8002d6e:	9a04      	ldr	r2, [sp, #16]
 8002d70:	68a1      	ldr	r1, [r4, #8]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	4620      	mov	r0, r4
 8002d76:	f000 fd51 	bl	800381c <_vfiprintf_r>
 8002d7a:	b002      	add	sp, #8
 8002d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d80:	b004      	add	sp, #16
 8002d82:	4770      	bx	lr
 8002d84:	2000002c 	.word	0x2000002c

08002d88 <putchar>:
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <putchar+0x28>)
 8002d8a:	b513      	push	{r0, r1, r4, lr}
 8002d8c:	681c      	ldr	r4, [r3, #0]
 8002d8e:	4601      	mov	r1, r0
 8002d90:	b134      	cbz	r4, 8002da0 <putchar+0x18>
 8002d92:	69a3      	ldr	r3, [r4, #24]
 8002d94:	b923      	cbnz	r3, 8002da0 <putchar+0x18>
 8002d96:	9001      	str	r0, [sp, #4]
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 fbdf 	bl	800355c <__sinit>
 8002d9e:	9901      	ldr	r1, [sp, #4]
 8002da0:	68a2      	ldr	r2, [r4, #8]
 8002da2:	4620      	mov	r0, r4
 8002da4:	b002      	add	sp, #8
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002daa:	f000 bffb 	b.w	8003da4 <_putc_r>
 8002dae:	bf00      	nop
 8002db0:	2000002c 	.word	0x2000002c

08002db4 <_puts_r>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	460e      	mov	r6, r1
 8002db8:	4605      	mov	r5, r0
 8002dba:	b118      	cbz	r0, 8002dc4 <_puts_r+0x10>
 8002dbc:	6983      	ldr	r3, [r0, #24]
 8002dbe:	b90b      	cbnz	r3, 8002dc4 <_puts_r+0x10>
 8002dc0:	f000 fbcc 	bl	800355c <__sinit>
 8002dc4:	69ab      	ldr	r3, [r5, #24]
 8002dc6:	68ac      	ldr	r4, [r5, #8]
 8002dc8:	b913      	cbnz	r3, 8002dd0 <_puts_r+0x1c>
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f000 fbc6 	bl	800355c <__sinit>
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <_puts_r+0xd0>)
 8002dd2:	429c      	cmp	r4, r3
 8002dd4:	d120      	bne.n	8002e18 <_puts_r+0x64>
 8002dd6:	686c      	ldr	r4, [r5, #4]
 8002dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dda:	07db      	lsls	r3, r3, #31
 8002ddc:	d405      	bmi.n	8002dea <_puts_r+0x36>
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	0598      	lsls	r0, r3, #22
 8002de2:	d402      	bmi.n	8002dea <_puts_r+0x36>
 8002de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de6:	f000 fc7c 	bl	80036e2 <__retarget_lock_acquire_recursive>
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	0719      	lsls	r1, r3, #28
 8002dee:	d51d      	bpl.n	8002e2c <_puts_r+0x78>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	b1db      	cbz	r3, 8002e2c <_puts_r+0x78>
 8002df4:	3e01      	subs	r6, #1
 8002df6:	68a3      	ldr	r3, [r4, #8]
 8002df8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	bb39      	cbnz	r1, 8002e52 <_puts_r+0x9e>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da38      	bge.n	8002e78 <_puts_r+0xc4>
 8002e06:	4622      	mov	r2, r4
 8002e08:	210a      	movs	r1, #10
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 f9ae 	bl	800316c <__swbuf_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d011      	beq.n	8002e38 <_puts_r+0x84>
 8002e14:	250a      	movs	r5, #10
 8002e16:	e011      	b.n	8002e3c <_puts_r+0x88>
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <_puts_r+0xd4>)
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	d101      	bne.n	8002e22 <_puts_r+0x6e>
 8002e1e:	68ac      	ldr	r4, [r5, #8]
 8002e20:	e7da      	b.n	8002dd8 <_puts_r+0x24>
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <_puts_r+0xd8>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	bf08      	it	eq
 8002e28:	68ec      	ldreq	r4, [r5, #12]
 8002e2a:	e7d5      	b.n	8002dd8 <_puts_r+0x24>
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 f9ee 	bl	8003210 <__swsetup_r>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d0dd      	beq.n	8002df4 <_puts_r+0x40>
 8002e38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e3e:	07da      	lsls	r2, r3, #31
 8002e40:	d405      	bmi.n	8002e4e <_puts_r+0x9a>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	059b      	lsls	r3, r3, #22
 8002e46:	d402      	bmi.n	8002e4e <_puts_r+0x9a>
 8002e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e4a:	f000 fc4b 	bl	80036e4 <__retarget_lock_release_recursive>
 8002e4e:	4628      	mov	r0, r5
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da04      	bge.n	8002e60 <_puts_r+0xac>
 8002e56:	69a2      	ldr	r2, [r4, #24]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dc06      	bgt.n	8002e6a <_puts_r+0xb6>
 8002e5c:	290a      	cmp	r1, #10
 8002e5e:	d004      	beq.n	8002e6a <_puts_r+0xb6>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	6022      	str	r2, [r4, #0]
 8002e66:	7019      	strb	r1, [r3, #0]
 8002e68:	e7c5      	b.n	8002df6 <_puts_r+0x42>
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f97d 	bl	800316c <__swbuf_r>
 8002e72:	3001      	adds	r0, #1
 8002e74:	d1bf      	bne.n	8002df6 <_puts_r+0x42>
 8002e76:	e7df      	b.n	8002e38 <_puts_r+0x84>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	250a      	movs	r5, #10
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	6022      	str	r2, [r4, #0]
 8002e80:	701d      	strb	r5, [r3, #0]
 8002e82:	e7db      	b.n	8002e3c <_puts_r+0x88>
 8002e84:	08004280 	.word	0x08004280
 8002e88:	080042a0 	.word	0x080042a0
 8002e8c:	08004260 	.word	0x08004260

08002e90 <puts>:
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <puts+0xc>)
 8002e92:	4601      	mov	r1, r0
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f7ff bf8d 	b.w	8002db4 <_puts_r>
 8002e9a:	bf00      	nop
 8002e9c:	2000002c 	.word	0x2000002c

08002ea0 <srand>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <srand+0x44>)
 8002ea4:	681d      	ldr	r5, [r3, #0]
 8002ea6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	b9b3      	cbnz	r3, 8002eda <srand+0x3a>
 8002eac:	2018      	movs	r0, #24
 8002eae:	f7ff fe91 	bl	8002bd4 <malloc>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	63a8      	str	r0, [r5, #56]	; 0x38
 8002eb6:	b920      	cbnz	r0, 8002ec2 <srand+0x22>
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <srand+0x48>)
 8002eba:	480c      	ldr	r0, [pc, #48]	; (8002eec <srand+0x4c>)
 8002ebc:	2142      	movs	r1, #66	; 0x42
 8002ebe:	f000 fa15 	bl	80032ec <__assert_func>
 8002ec2:	490b      	ldr	r1, [pc, #44]	; (8002ef0 <srand+0x50>)
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <srand+0x54>)
 8002ec6:	e9c0 1300 	strd	r1, r3, [r0]
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <srand+0x58>)
 8002ecc:	6083      	str	r3, [r0, #8]
 8002ece:	230b      	movs	r3, #11
 8002ed0:	8183      	strh	r3, [r0, #12]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002eda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002edc:	2200      	movs	r2, #0
 8002ede:	611c      	str	r4, [r3, #16]
 8002ee0:	615a      	str	r2, [r3, #20]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	2000002c 	.word	0x2000002c
 8002ee8:	080041ac 	.word	0x080041ac
 8002eec:	080041c3 	.word	0x080041c3
 8002ef0:	abcd330e 	.word	0xabcd330e
 8002ef4:	e66d1234 	.word	0xe66d1234
 8002ef8:	0005deec 	.word	0x0005deec

08002efc <rand>:
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <rand+0x60>)
 8002efe:	b510      	push	{r4, lr}
 8002f00:	681c      	ldr	r4, [r3, #0]
 8002f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f04:	b9b3      	cbnz	r3, 8002f34 <rand+0x38>
 8002f06:	2018      	movs	r0, #24
 8002f08:	f7ff fe64 	bl	8002bd4 <malloc>
 8002f0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8002f0e:	b928      	cbnz	r0, 8002f1c <rand+0x20>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <rand+0x64>)
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <rand+0x68>)
 8002f16:	214e      	movs	r1, #78	; 0x4e
 8002f18:	f000 f9e8 	bl	80032ec <__assert_func>
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <rand+0x6c>)
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <rand+0x70>)
 8002f20:	e9c0 2300 	strd	r2, r3, [r0]
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <rand+0x74>)
 8002f26:	6083      	str	r3, [r0, #8]
 8002f28:	230b      	movs	r3, #11
 8002f2a:	8183      	strh	r3, [r0, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002f34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f36:	480f      	ldr	r0, [pc, #60]	; (8002f74 <rand+0x78>)
 8002f38:	690a      	ldr	r2, [r1, #16]
 8002f3a:	694b      	ldr	r3, [r1, #20]
 8002f3c:	4c0e      	ldr	r4, [pc, #56]	; (8002f78 <rand+0x7c>)
 8002f3e:	4350      	muls	r0, r2
 8002f40:	fb04 0003 	mla	r0, r4, r3, r0
 8002f44:	fba2 3404 	umull	r3, r4, r2, r4
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	4404      	add	r4, r0
 8002f4c:	f144 0000 	adc.w	r0, r4, #0
 8002f50:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002f54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000002c 	.word	0x2000002c
 8002f60:	080041ac 	.word	0x080041ac
 8002f64:	080041c3 	.word	0x080041c3
 8002f68:	abcd330e 	.word	0xabcd330e
 8002f6c:	e66d1234 	.word	0xe66d1234
 8002f70:	0005deec 	.word	0x0005deec
 8002f74:	5851f42d 	.word	0x5851f42d
 8002f78:	4c957f2d 	.word	0x4c957f2d

08002f7c <_sbrk_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	4d06      	ldr	r5, [pc, #24]	; (8002f98 <_sbrk_r+0x1c>)
 8002f80:	2300      	movs	r3, #0
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	f7ff fcfc 	bl	8002984 <_sbrk>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d102      	bne.n	8002f96 <_sbrk_r+0x1a>
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	b103      	cbz	r3, 8002f96 <_sbrk_r+0x1a>
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	200001d8 	.word	0x200001d8

08002f9c <setbuf>:
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2202      	moveq	r2, #2
 8002fa6:	2200      	movne	r2, #0
 8002fa8:	f000 b800 	b.w	8002fac <setvbuf>

08002fac <setvbuf>:
 8002fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <setvbuf+0x17c>)
 8002fb4:	681f      	ldr	r7, [r3, #0]
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	460e      	mov	r6, r1
 8002fba:	4690      	mov	r8, r2
 8002fbc:	b127      	cbz	r7, 8002fc8 <setvbuf+0x1c>
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	b913      	cbnz	r3, 8002fc8 <setvbuf+0x1c>
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f000 faca 	bl	800355c <__sinit>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <setvbuf+0x180>)
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d167      	bne.n	800309e <setvbuf+0xf2>
 8002fce:	687c      	ldr	r4, [r7, #4]
 8002fd0:	f1b8 0f02 	cmp.w	r8, #2
 8002fd4:	d006      	beq.n	8002fe4 <setvbuf+0x38>
 8002fd6:	f1b8 0f01 	cmp.w	r8, #1
 8002fda:	f200 809f 	bhi.w	800311c <setvbuf+0x170>
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	f2c0 809c 	blt.w	800311c <setvbuf+0x170>
 8002fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fe6:	07db      	lsls	r3, r3, #31
 8002fe8:	d405      	bmi.n	8002ff6 <setvbuf+0x4a>
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	0598      	lsls	r0, r3, #22
 8002fee:	d402      	bmi.n	8002ff6 <setvbuf+0x4a>
 8002ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ff2:	f000 fb76 	bl	80036e2 <__retarget_lock_acquire_recursive>
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	f000 fa1b 	bl	8003434 <_fflush_r>
 8002ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003000:	b141      	cbz	r1, 8003014 <setvbuf+0x68>
 8003002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003006:	4299      	cmp	r1, r3
 8003008:	d002      	beq.n	8003010 <setvbuf+0x64>
 800300a:	4638      	mov	r0, r7
 800300c:	f7ff fdfa 	bl	8002c04 <_free_r>
 8003010:	2300      	movs	r3, #0
 8003012:	6363      	str	r3, [r4, #52]	; 0x34
 8003014:	2300      	movs	r3, #0
 8003016:	61a3      	str	r3, [r4, #24]
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	0619      	lsls	r1, r3, #24
 800301e:	d503      	bpl.n	8003028 <setvbuf+0x7c>
 8003020:	6921      	ldr	r1, [r4, #16]
 8003022:	4638      	mov	r0, r7
 8003024:	f7ff fdee 	bl	8002c04 <_free_r>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	f1b8 0f02 	cmp.w	r8, #2
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	d06c      	beq.n	8003114 <setvbuf+0x168>
 800303a:	ab01      	add	r3, sp, #4
 800303c:	466a      	mov	r2, sp
 800303e:	4621      	mov	r1, r4
 8003040:	4638      	mov	r0, r7
 8003042:	f000 fb50 	bl	80036e6 <__swhatbuf_r>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	4318      	orrs	r0, r3
 800304a:	81a0      	strh	r0, [r4, #12]
 800304c:	2d00      	cmp	r5, #0
 800304e:	d130      	bne.n	80030b2 <setvbuf+0x106>
 8003050:	9d00      	ldr	r5, [sp, #0]
 8003052:	4628      	mov	r0, r5
 8003054:	f7ff fdbe 	bl	8002bd4 <malloc>
 8003058:	4606      	mov	r6, r0
 800305a:	2800      	cmp	r0, #0
 800305c:	d155      	bne.n	800310a <setvbuf+0x15e>
 800305e:	f8dd 9000 	ldr.w	r9, [sp]
 8003062:	45a9      	cmp	r9, r5
 8003064:	d14a      	bne.n	80030fc <setvbuf+0x150>
 8003066:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800306a:	2200      	movs	r2, #0
 800306c:	60a2      	str	r2, [r4, #8]
 800306e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003072:	6022      	str	r2, [r4, #0]
 8003074:	6122      	str	r2, [r4, #16]
 8003076:	2201      	movs	r2, #1
 8003078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800307c:	6162      	str	r2, [r4, #20]
 800307e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	07d2      	lsls	r2, r2, #31
 8003086:	81a3      	strh	r3, [r4, #12]
 8003088:	d405      	bmi.n	8003096 <setvbuf+0xea>
 800308a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800308e:	d102      	bne.n	8003096 <setvbuf+0xea>
 8003090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003092:	f000 fb27 	bl	80036e4 <__retarget_lock_release_recursive>
 8003096:	4628      	mov	r0, r5
 8003098:	b003      	add	sp, #12
 800309a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <setvbuf+0x184>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d101      	bne.n	80030a8 <setvbuf+0xfc>
 80030a4:	68bc      	ldr	r4, [r7, #8]
 80030a6:	e793      	b.n	8002fd0 <setvbuf+0x24>
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <setvbuf+0x188>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	bf08      	it	eq
 80030ae:	68fc      	ldreq	r4, [r7, #12]
 80030b0:	e78e      	b.n	8002fd0 <setvbuf+0x24>
 80030b2:	2e00      	cmp	r6, #0
 80030b4:	d0cd      	beq.n	8003052 <setvbuf+0xa6>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	b913      	cbnz	r3, 80030c0 <setvbuf+0x114>
 80030ba:	4638      	mov	r0, r7
 80030bc:	f000 fa4e 	bl	800355c <__sinit>
 80030c0:	f1b8 0f01 	cmp.w	r8, #1
 80030c4:	bf08      	it	eq
 80030c6:	89a3      	ldrheq	r3, [r4, #12]
 80030c8:	6026      	str	r6, [r4, #0]
 80030ca:	bf04      	itt	eq
 80030cc:	f043 0301 	orreq.w	r3, r3, #1
 80030d0:	81a3      	strheq	r3, [r4, #12]
 80030d2:	89a2      	ldrh	r2, [r4, #12]
 80030d4:	f012 0308 	ands.w	r3, r2, #8
 80030d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80030dc:	d01c      	beq.n	8003118 <setvbuf+0x16c>
 80030de:	07d3      	lsls	r3, r2, #31
 80030e0:	bf41      	itttt	mi
 80030e2:	2300      	movmi	r3, #0
 80030e4:	426d      	negmi	r5, r5
 80030e6:	60a3      	strmi	r3, [r4, #8]
 80030e8:	61a5      	strmi	r5, [r4, #24]
 80030ea:	bf58      	it	pl
 80030ec:	60a5      	strpl	r5, [r4, #8]
 80030ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80030f0:	f015 0501 	ands.w	r5, r5, #1
 80030f4:	d115      	bne.n	8003122 <setvbuf+0x176>
 80030f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80030fa:	e7c8      	b.n	800308e <setvbuf+0xe2>
 80030fc:	4648      	mov	r0, r9
 80030fe:	f7ff fd69 	bl	8002bd4 <malloc>
 8003102:	4606      	mov	r6, r0
 8003104:	2800      	cmp	r0, #0
 8003106:	d0ae      	beq.n	8003066 <setvbuf+0xba>
 8003108:	464d      	mov	r5, r9
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	e7d0      	b.n	80030b6 <setvbuf+0x10a>
 8003114:	2500      	movs	r5, #0
 8003116:	e7a8      	b.n	800306a <setvbuf+0xbe>
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	e7e8      	b.n	80030ee <setvbuf+0x142>
 800311c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003120:	e7b9      	b.n	8003096 <setvbuf+0xea>
 8003122:	2500      	movs	r5, #0
 8003124:	e7b7      	b.n	8003096 <setvbuf+0xea>
 8003126:	bf00      	nop
 8003128:	2000002c 	.word	0x2000002c
 800312c:	08004280 	.word	0x08004280
 8003130:	080042a0 	.word	0x080042a0
 8003134:	08004260 	.word	0x08004260

08003138 <time>:
 8003138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <time+0x30>)
 800313c:	2200      	movs	r2, #0
 800313e:	4669      	mov	r1, sp
 8003140:	4604      	mov	r4, r0
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f000 faba 	bl	80036bc <_gettimeofday_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	bfbe      	ittt	lt
 800314c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8003150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003154:	e9cd 2300 	strdlt	r2, r3, [sp]
 8003158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800315c:	b10c      	cbz	r4, 8003162 <time+0x2a>
 800315e:	e9c4 0100 	strd	r0, r1, [r4]
 8003162:	b004      	add	sp, #16
 8003164:	bd10      	pop	{r4, pc}
 8003166:	bf00      	nop
 8003168:	2000002c 	.word	0x2000002c

0800316c <__swbuf_r>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	460e      	mov	r6, r1
 8003170:	4614      	mov	r4, r2
 8003172:	4605      	mov	r5, r0
 8003174:	b118      	cbz	r0, 800317e <__swbuf_r+0x12>
 8003176:	6983      	ldr	r3, [r0, #24]
 8003178:	b90b      	cbnz	r3, 800317e <__swbuf_r+0x12>
 800317a:	f000 f9ef 	bl	800355c <__sinit>
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <__swbuf_r+0x98>)
 8003180:	429c      	cmp	r4, r3
 8003182:	d12b      	bne.n	80031dc <__swbuf_r+0x70>
 8003184:	686c      	ldr	r4, [r5, #4]
 8003186:	69a3      	ldr	r3, [r4, #24]
 8003188:	60a3      	str	r3, [r4, #8]
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	071a      	lsls	r2, r3, #28
 800318e:	d52f      	bpl.n	80031f0 <__swbuf_r+0x84>
 8003190:	6923      	ldr	r3, [r4, #16]
 8003192:	b36b      	cbz	r3, 80031f0 <__swbuf_r+0x84>
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	6820      	ldr	r0, [r4, #0]
 8003198:	1ac0      	subs	r0, r0, r3
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	b2f6      	uxtb	r6, r6
 800319e:	4283      	cmp	r3, r0
 80031a0:	4637      	mov	r7, r6
 80031a2:	dc04      	bgt.n	80031ae <__swbuf_r+0x42>
 80031a4:	4621      	mov	r1, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 f944 	bl	8003434 <_fflush_r>
 80031ac:	bb30      	cbnz	r0, 80031fc <__swbuf_r+0x90>
 80031ae:	68a3      	ldr	r3, [r4, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60a3      	str	r3, [r4, #8]
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	6022      	str	r2, [r4, #0]
 80031ba:	701e      	strb	r6, [r3, #0]
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	3001      	adds	r0, #1
 80031c0:	4283      	cmp	r3, r0
 80031c2:	d004      	beq.n	80031ce <__swbuf_r+0x62>
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	07db      	lsls	r3, r3, #31
 80031c8:	d506      	bpl.n	80031d8 <__swbuf_r+0x6c>
 80031ca:	2e0a      	cmp	r6, #10
 80031cc:	d104      	bne.n	80031d8 <__swbuf_r+0x6c>
 80031ce:	4621      	mov	r1, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 f92f 	bl	8003434 <_fflush_r>
 80031d6:	b988      	cbnz	r0, 80031fc <__swbuf_r+0x90>
 80031d8:	4638      	mov	r0, r7
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <__swbuf_r+0x9c>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	d101      	bne.n	80031e6 <__swbuf_r+0x7a>
 80031e2:	68ac      	ldr	r4, [r5, #8]
 80031e4:	e7cf      	b.n	8003186 <__swbuf_r+0x1a>
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <__swbuf_r+0xa0>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	bf08      	it	eq
 80031ec:	68ec      	ldreq	r4, [r5, #12]
 80031ee:	e7ca      	b.n	8003186 <__swbuf_r+0x1a>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 f80c 	bl	8003210 <__swsetup_r>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d0cb      	beq.n	8003194 <__swbuf_r+0x28>
 80031fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003200:	e7ea      	b.n	80031d8 <__swbuf_r+0x6c>
 8003202:	bf00      	nop
 8003204:	08004280 	.word	0x08004280
 8003208:	080042a0 	.word	0x080042a0
 800320c:	08004260 	.word	0x08004260

08003210 <__swsetup_r>:
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <__swsetup_r+0xcc>)
 8003212:	b570      	push	{r4, r5, r6, lr}
 8003214:	681d      	ldr	r5, [r3, #0]
 8003216:	4606      	mov	r6, r0
 8003218:	460c      	mov	r4, r1
 800321a:	b125      	cbz	r5, 8003226 <__swsetup_r+0x16>
 800321c:	69ab      	ldr	r3, [r5, #24]
 800321e:	b913      	cbnz	r3, 8003226 <__swsetup_r+0x16>
 8003220:	4628      	mov	r0, r5
 8003222:	f000 f99b 	bl	800355c <__sinit>
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <__swsetup_r+0xd0>)
 8003228:	429c      	cmp	r4, r3
 800322a:	d10f      	bne.n	800324c <__swsetup_r+0x3c>
 800322c:	686c      	ldr	r4, [r5, #4]
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003234:	0719      	lsls	r1, r3, #28
 8003236:	d42c      	bmi.n	8003292 <__swsetup_r+0x82>
 8003238:	06dd      	lsls	r5, r3, #27
 800323a:	d411      	bmi.n	8003260 <__swsetup_r+0x50>
 800323c:	2309      	movs	r3, #9
 800323e:	6033      	str	r3, [r6, #0]
 8003240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800324a:	e03e      	b.n	80032ca <__swsetup_r+0xba>
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <__swsetup_r+0xd4>)
 800324e:	429c      	cmp	r4, r3
 8003250:	d101      	bne.n	8003256 <__swsetup_r+0x46>
 8003252:	68ac      	ldr	r4, [r5, #8]
 8003254:	e7eb      	b.n	800322e <__swsetup_r+0x1e>
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <__swsetup_r+0xd8>)
 8003258:	429c      	cmp	r4, r3
 800325a:	bf08      	it	eq
 800325c:	68ec      	ldreq	r4, [r5, #12]
 800325e:	e7e6      	b.n	800322e <__swsetup_r+0x1e>
 8003260:	0758      	lsls	r0, r3, #29
 8003262:	d512      	bpl.n	800328a <__swsetup_r+0x7a>
 8003264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003266:	b141      	cbz	r1, 800327a <__swsetup_r+0x6a>
 8003268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800326c:	4299      	cmp	r1, r3
 800326e:	d002      	beq.n	8003276 <__swsetup_r+0x66>
 8003270:	4630      	mov	r0, r6
 8003272:	f7ff fcc7 	bl	8002c04 <_free_r>
 8003276:	2300      	movs	r3, #0
 8003278:	6363      	str	r3, [r4, #52]	; 0x34
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	2300      	movs	r3, #0
 8003284:	6063      	str	r3, [r4, #4]
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	6923      	ldr	r3, [r4, #16]
 8003294:	b94b      	cbnz	r3, 80032aa <__swsetup_r+0x9a>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800329c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a0:	d003      	beq.n	80032aa <__swsetup_r+0x9a>
 80032a2:	4621      	mov	r1, r4
 80032a4:	4630      	mov	r0, r6
 80032a6:	f000 fa43 	bl	8003730 <__smakebuf_r>
 80032aa:	89a0      	ldrh	r0, [r4, #12]
 80032ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b0:	f010 0301 	ands.w	r3, r0, #1
 80032b4:	d00a      	beq.n	80032cc <__swsetup_r+0xbc>
 80032b6:	2300      	movs	r3, #0
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	6963      	ldr	r3, [r4, #20]
 80032bc:	425b      	negs	r3, r3
 80032be:	61a3      	str	r3, [r4, #24]
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	b943      	cbnz	r3, 80032d6 <__swsetup_r+0xc6>
 80032c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032c8:	d1ba      	bne.n	8003240 <__swsetup_r+0x30>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	0781      	lsls	r1, r0, #30
 80032ce:	bf58      	it	pl
 80032d0:	6963      	ldrpl	r3, [r4, #20]
 80032d2:	60a3      	str	r3, [r4, #8]
 80032d4:	e7f4      	b.n	80032c0 <__swsetup_r+0xb0>
 80032d6:	2000      	movs	r0, #0
 80032d8:	e7f7      	b.n	80032ca <__swsetup_r+0xba>
 80032da:	bf00      	nop
 80032dc:	2000002c 	.word	0x2000002c
 80032e0:	08004280 	.word	0x08004280
 80032e4:	080042a0 	.word	0x080042a0
 80032e8:	08004260 	.word	0x08004260

080032ec <__assert_func>:
 80032ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032ee:	4614      	mov	r4, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <__assert_func+0x2c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4605      	mov	r5, r0
 80032f8:	68d8      	ldr	r0, [r3, #12]
 80032fa:	b14c      	cbz	r4, 8003310 <__assert_func+0x24>
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <__assert_func+0x30>)
 80032fe:	9100      	str	r1, [sp, #0]
 8003300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003304:	4906      	ldr	r1, [pc, #24]	; (8003320 <__assert_func+0x34>)
 8003306:	462b      	mov	r3, r5
 8003308:	f000 f9a6 	bl	8003658 <fiprintf>
 800330c:	f000 fdd5 	bl	8003eba <abort>
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__assert_func+0x38>)
 8003312:	461c      	mov	r4, r3
 8003314:	e7f3      	b.n	80032fe <__assert_func+0x12>
 8003316:	bf00      	nop
 8003318:	2000002c 	.word	0x2000002c
 800331c:	08004222 	.word	0x08004222
 8003320:	0800422f 	.word	0x0800422f
 8003324:	0800425d 	.word	0x0800425d

08003328 <__sflush_r>:
 8003328:	898a      	ldrh	r2, [r1, #12]
 800332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332e:	4605      	mov	r5, r0
 8003330:	0710      	lsls	r0, r2, #28
 8003332:	460c      	mov	r4, r1
 8003334:	d458      	bmi.n	80033e8 <__sflush_r+0xc0>
 8003336:	684b      	ldr	r3, [r1, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dc05      	bgt.n	8003348 <__sflush_r+0x20>
 800333c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	dc02      	bgt.n	8003348 <__sflush_r+0x20>
 8003342:	2000      	movs	r0, #0
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334a:	2e00      	cmp	r6, #0
 800334c:	d0f9      	beq.n	8003342 <__sflush_r+0x1a>
 800334e:	2300      	movs	r3, #0
 8003350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003354:	682f      	ldr	r7, [r5, #0]
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	d032      	beq.n	80033c0 <__sflush_r+0x98>
 800335a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	075a      	lsls	r2, r3, #29
 8003360:	d505      	bpl.n	800336e <__sflush_r+0x46>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	1ac0      	subs	r0, r0, r3
 8003366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003368:	b10b      	cbz	r3, 800336e <__sflush_r+0x46>
 800336a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	2300      	movs	r3, #0
 8003370:	4602      	mov	r2, r0
 8003372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003374:	6a21      	ldr	r1, [r4, #32]
 8003376:	4628      	mov	r0, r5
 8003378:	47b0      	blx	r6
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	d106      	bne.n	800338e <__sflush_r+0x66>
 8003380:	6829      	ldr	r1, [r5, #0]
 8003382:	291d      	cmp	r1, #29
 8003384:	d82c      	bhi.n	80033e0 <__sflush_r+0xb8>
 8003386:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <__sflush_r+0x108>)
 8003388:	40ca      	lsrs	r2, r1
 800338a:	07d6      	lsls	r6, r2, #31
 800338c:	d528      	bpl.n	80033e0 <__sflush_r+0xb8>
 800338e:	2200      	movs	r2, #0
 8003390:	6062      	str	r2, [r4, #4]
 8003392:	04d9      	lsls	r1, r3, #19
 8003394:	6922      	ldr	r2, [r4, #16]
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	d504      	bpl.n	80033a4 <__sflush_r+0x7c>
 800339a:	1c42      	adds	r2, r0, #1
 800339c:	d101      	bne.n	80033a2 <__sflush_r+0x7a>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	b903      	cbnz	r3, 80033a4 <__sflush_r+0x7c>
 80033a2:	6560      	str	r0, [r4, #84]	; 0x54
 80033a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a6:	602f      	str	r7, [r5, #0]
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d0ca      	beq.n	8003342 <__sflush_r+0x1a>
 80033ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b0:	4299      	cmp	r1, r3
 80033b2:	d002      	beq.n	80033ba <__sflush_r+0x92>
 80033b4:	4628      	mov	r0, r5
 80033b6:	f7ff fc25 	bl	8002c04 <_free_r>
 80033ba:	2000      	movs	r0, #0
 80033bc:	6360      	str	r0, [r4, #52]	; 0x34
 80033be:	e7c1      	b.n	8003344 <__sflush_r+0x1c>
 80033c0:	6a21      	ldr	r1, [r4, #32]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b0      	blx	r6
 80033c8:	1c41      	adds	r1, r0, #1
 80033ca:	d1c7      	bne.n	800335c <__sflush_r+0x34>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c4      	beq.n	800335c <__sflush_r+0x34>
 80033d2:	2b1d      	cmp	r3, #29
 80033d4:	d001      	beq.n	80033da <__sflush_r+0xb2>
 80033d6:	2b16      	cmp	r3, #22
 80033d8:	d101      	bne.n	80033de <__sflush_r+0xb6>
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	e7b1      	b.n	8003342 <__sflush_r+0x1a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	e7ad      	b.n	8003344 <__sflush_r+0x1c>
 80033e8:	690f      	ldr	r7, [r1, #16]
 80033ea:	2f00      	cmp	r7, #0
 80033ec:	d0a9      	beq.n	8003342 <__sflush_r+0x1a>
 80033ee:	0793      	lsls	r3, r2, #30
 80033f0:	680e      	ldr	r6, [r1, #0]
 80033f2:	bf08      	it	eq
 80033f4:	694b      	ldreq	r3, [r1, #20]
 80033f6:	600f      	str	r7, [r1, #0]
 80033f8:	bf18      	it	ne
 80033fa:	2300      	movne	r3, #0
 80033fc:	eba6 0807 	sub.w	r8, r6, r7
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	f1b8 0f00 	cmp.w	r8, #0
 8003406:	dd9c      	ble.n	8003342 <__sflush_r+0x1a>
 8003408:	6a21      	ldr	r1, [r4, #32]
 800340a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800340c:	4643      	mov	r3, r8
 800340e:	463a      	mov	r2, r7
 8003410:	4628      	mov	r0, r5
 8003412:	47b0      	blx	r6
 8003414:	2800      	cmp	r0, #0
 8003416:	dc06      	bgt.n	8003426 <__sflush_r+0xfe>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003424:	e78e      	b.n	8003344 <__sflush_r+0x1c>
 8003426:	4407      	add	r7, r0
 8003428:	eba8 0800 	sub.w	r8, r8, r0
 800342c:	e7e9      	b.n	8003402 <__sflush_r+0xda>
 800342e:	bf00      	nop
 8003430:	20400001 	.word	0x20400001

08003434 <_fflush_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	4605      	mov	r5, r0
 800343a:	460c      	mov	r4, r1
 800343c:	b913      	cbnz	r3, 8003444 <_fflush_r+0x10>
 800343e:	2500      	movs	r5, #0
 8003440:	4628      	mov	r0, r5
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	b118      	cbz	r0, 800344e <_fflush_r+0x1a>
 8003446:	6983      	ldr	r3, [r0, #24]
 8003448:	b90b      	cbnz	r3, 800344e <_fflush_r+0x1a>
 800344a:	f000 f887 	bl	800355c <__sinit>
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <_fflush_r+0x6c>)
 8003450:	429c      	cmp	r4, r3
 8003452:	d11b      	bne.n	800348c <_fflush_r+0x58>
 8003454:	686c      	ldr	r4, [r5, #4]
 8003456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <_fflush_r+0xa>
 800345e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003460:	07d0      	lsls	r0, r2, #31
 8003462:	d404      	bmi.n	800346e <_fflush_r+0x3a>
 8003464:	0599      	lsls	r1, r3, #22
 8003466:	d402      	bmi.n	800346e <_fflush_r+0x3a>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 f93a 	bl	80036e2 <__retarget_lock_acquire_recursive>
 800346e:	4628      	mov	r0, r5
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff ff59 	bl	8003328 <__sflush_r>
 8003476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003478:	07da      	lsls	r2, r3, #31
 800347a:	4605      	mov	r5, r0
 800347c:	d4e0      	bmi.n	8003440 <_fflush_r+0xc>
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	059b      	lsls	r3, r3, #22
 8003482:	d4dd      	bmi.n	8003440 <_fflush_r+0xc>
 8003484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003486:	f000 f92d 	bl	80036e4 <__retarget_lock_release_recursive>
 800348a:	e7d9      	b.n	8003440 <_fflush_r+0xc>
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <_fflush_r+0x70>)
 800348e:	429c      	cmp	r4, r3
 8003490:	d101      	bne.n	8003496 <_fflush_r+0x62>
 8003492:	68ac      	ldr	r4, [r5, #8]
 8003494:	e7df      	b.n	8003456 <_fflush_r+0x22>
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <_fflush_r+0x74>)
 8003498:	429c      	cmp	r4, r3
 800349a:	bf08      	it	eq
 800349c:	68ec      	ldreq	r4, [r5, #12]
 800349e:	e7da      	b.n	8003456 <_fflush_r+0x22>
 80034a0:	08004280 	.word	0x08004280
 80034a4:	080042a0 	.word	0x080042a0
 80034a8:	08004260 	.word	0x08004260

080034ac <std>:
 80034ac:	2300      	movs	r3, #0
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
 80034b2:	e9c0 3300 	strd	r3, r3, [r0]
 80034b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ba:	6083      	str	r3, [r0, #8]
 80034bc:	8181      	strh	r1, [r0, #12]
 80034be:	6643      	str	r3, [r0, #100]	; 0x64
 80034c0:	81c2      	strh	r2, [r0, #14]
 80034c2:	6183      	str	r3, [r0, #24]
 80034c4:	4619      	mov	r1, r3
 80034c6:	2208      	movs	r2, #8
 80034c8:	305c      	adds	r0, #92	; 0x5c
 80034ca:	f7ff fb93 	bl	8002bf4 <memset>
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <std+0x38>)
 80034d0:	6263      	str	r3, [r4, #36]	; 0x24
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <std+0x3c>)
 80034d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <std+0x40>)
 80034d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <std+0x44>)
 80034dc:	6224      	str	r4, [r4, #32]
 80034de:	6323      	str	r3, [r4, #48]	; 0x30
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	08003e35 	.word	0x08003e35
 80034e8:	08003e57 	.word	0x08003e57
 80034ec:	08003e8f 	.word	0x08003e8f
 80034f0:	08003eb3 	.word	0x08003eb3

080034f4 <_cleanup_r>:
 80034f4:	4901      	ldr	r1, [pc, #4]	; (80034fc <_cleanup_r+0x8>)
 80034f6:	f000 b8c1 	b.w	800367c <_fwalk_reent>
 80034fa:	bf00      	nop
 80034fc:	08003435 	.word	0x08003435

08003500 <__sfmoreglue>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	1e4a      	subs	r2, r1, #1
 8003504:	2568      	movs	r5, #104	; 0x68
 8003506:	4355      	muls	r5, r2
 8003508:	460e      	mov	r6, r1
 800350a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800350e:	f7ff fbc9 	bl	8002ca4 <_malloc_r>
 8003512:	4604      	mov	r4, r0
 8003514:	b140      	cbz	r0, 8003528 <__sfmoreglue+0x28>
 8003516:	2100      	movs	r1, #0
 8003518:	e9c0 1600 	strd	r1, r6, [r0]
 800351c:	300c      	adds	r0, #12
 800351e:	60a0      	str	r0, [r4, #8]
 8003520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003524:	f7ff fb66 	bl	8002bf4 <memset>
 8003528:	4620      	mov	r0, r4
 800352a:	bd70      	pop	{r4, r5, r6, pc}

0800352c <__sfp_lock_acquire>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__sfp_lock_acquire+0x8>)
 800352e:	f000 b8d8 	b.w	80036e2 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	200001d4 	.word	0x200001d4

08003538 <__sfp_lock_release>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__sfp_lock_release+0x8>)
 800353a:	f000 b8d3 	b.w	80036e4 <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	200001d4 	.word	0x200001d4

08003544 <__sinit_lock_acquire>:
 8003544:	4801      	ldr	r0, [pc, #4]	; (800354c <__sinit_lock_acquire+0x8>)
 8003546:	f000 b8cc 	b.w	80036e2 <__retarget_lock_acquire_recursive>
 800354a:	bf00      	nop
 800354c:	200001cf 	.word	0x200001cf

08003550 <__sinit_lock_release>:
 8003550:	4801      	ldr	r0, [pc, #4]	; (8003558 <__sinit_lock_release+0x8>)
 8003552:	f000 b8c7 	b.w	80036e4 <__retarget_lock_release_recursive>
 8003556:	bf00      	nop
 8003558:	200001cf 	.word	0x200001cf

0800355c <__sinit>:
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
 8003560:	f7ff fff0 	bl	8003544 <__sinit_lock_acquire>
 8003564:	69a3      	ldr	r3, [r4, #24]
 8003566:	b11b      	cbz	r3, 8003570 <__sinit+0x14>
 8003568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356c:	f7ff bff0 	b.w	8003550 <__sinit_lock_release>
 8003570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003574:	6523      	str	r3, [r4, #80]	; 0x50
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <__sinit+0x68>)
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <__sinit+0x6c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	62a2      	str	r2, [r4, #40]	; 0x28
 800357e:	42a3      	cmp	r3, r4
 8003580:	bf04      	itt	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	61a3      	streq	r3, [r4, #24]
 8003586:	4620      	mov	r0, r4
 8003588:	f000 f820 	bl	80035cc <__sfp>
 800358c:	6060      	str	r0, [r4, #4]
 800358e:	4620      	mov	r0, r4
 8003590:	f000 f81c 	bl	80035cc <__sfp>
 8003594:	60a0      	str	r0, [r4, #8]
 8003596:	4620      	mov	r0, r4
 8003598:	f000 f818 	bl	80035cc <__sfp>
 800359c:	2200      	movs	r2, #0
 800359e:	60e0      	str	r0, [r4, #12]
 80035a0:	2104      	movs	r1, #4
 80035a2:	6860      	ldr	r0, [r4, #4]
 80035a4:	f7ff ff82 	bl	80034ac <std>
 80035a8:	68a0      	ldr	r0, [r4, #8]
 80035aa:	2201      	movs	r2, #1
 80035ac:	2109      	movs	r1, #9
 80035ae:	f7ff ff7d 	bl	80034ac <std>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	2202      	movs	r2, #2
 80035b6:	2112      	movs	r1, #18
 80035b8:	f7ff ff78 	bl	80034ac <std>
 80035bc:	2301      	movs	r3, #1
 80035be:	61a3      	str	r3, [r4, #24]
 80035c0:	e7d2      	b.n	8003568 <__sinit+0xc>
 80035c2:	bf00      	nop
 80035c4:	080041a8 	.word	0x080041a8
 80035c8:	080034f5 	.word	0x080034f5

080035cc <__sfp>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	4607      	mov	r7, r0
 80035d0:	f7ff ffac 	bl	800352c <__sfp_lock_acquire>
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <__sfp+0x84>)
 80035d6:	681e      	ldr	r6, [r3, #0]
 80035d8:	69b3      	ldr	r3, [r6, #24]
 80035da:	b913      	cbnz	r3, 80035e2 <__sfp+0x16>
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff ffbd 	bl	800355c <__sinit>
 80035e2:	3648      	adds	r6, #72	; 0x48
 80035e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	d503      	bpl.n	80035f4 <__sfp+0x28>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	b30b      	cbz	r3, 8003634 <__sfp+0x68>
 80035f0:	6836      	ldr	r6, [r6, #0]
 80035f2:	e7f7      	b.n	80035e4 <__sfp+0x18>
 80035f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035f8:	b9d5      	cbnz	r5, 8003630 <__sfp+0x64>
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <__sfp+0x88>)
 80035fc:	60e3      	str	r3, [r4, #12]
 80035fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003602:	6665      	str	r5, [r4, #100]	; 0x64
 8003604:	f000 f86c 	bl	80036e0 <__retarget_lock_init_recursive>
 8003608:	f7ff ff96 	bl	8003538 <__sfp_lock_release>
 800360c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003614:	6025      	str	r5, [r4, #0]
 8003616:	61a5      	str	r5, [r4, #24]
 8003618:	2208      	movs	r2, #8
 800361a:	4629      	mov	r1, r5
 800361c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003620:	f7ff fae8 	bl	8002bf4 <memset>
 8003624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800362c:	4620      	mov	r0, r4
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	3468      	adds	r4, #104	; 0x68
 8003632:	e7d9      	b.n	80035e8 <__sfp+0x1c>
 8003634:	2104      	movs	r1, #4
 8003636:	4638      	mov	r0, r7
 8003638:	f7ff ff62 	bl	8003500 <__sfmoreglue>
 800363c:	4604      	mov	r4, r0
 800363e:	6030      	str	r0, [r6, #0]
 8003640:	2800      	cmp	r0, #0
 8003642:	d1d5      	bne.n	80035f0 <__sfp+0x24>
 8003644:	f7ff ff78 	bl	8003538 <__sfp_lock_release>
 8003648:	230c      	movs	r3, #12
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	e7ee      	b.n	800362c <__sfp+0x60>
 800364e:	bf00      	nop
 8003650:	080041a8 	.word	0x080041a8
 8003654:	ffff0001 	.word	0xffff0001

08003658 <fiprintf>:
 8003658:	b40e      	push	{r1, r2, r3}
 800365a:	b503      	push	{r0, r1, lr}
 800365c:	4601      	mov	r1, r0
 800365e:	ab03      	add	r3, sp, #12
 8003660:	4805      	ldr	r0, [pc, #20]	; (8003678 <fiprintf+0x20>)
 8003662:	f853 2b04 	ldr.w	r2, [r3], #4
 8003666:	6800      	ldr	r0, [r0, #0]
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	f000 f8d7 	bl	800381c <_vfiprintf_r>
 800366e:	b002      	add	sp, #8
 8003670:	f85d eb04 	ldr.w	lr, [sp], #4
 8003674:	b003      	add	sp, #12
 8003676:	4770      	bx	lr
 8003678:	2000002c 	.word	0x2000002c

0800367c <_fwalk_reent>:
 800367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003680:	4606      	mov	r6, r0
 8003682:	4688      	mov	r8, r1
 8003684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003688:	2700      	movs	r7, #0
 800368a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368e:	f1b9 0901 	subs.w	r9, r9, #1
 8003692:	d505      	bpl.n	80036a0 <_fwalk_reent+0x24>
 8003694:	6824      	ldr	r4, [r4, #0]
 8003696:	2c00      	cmp	r4, #0
 8003698:	d1f7      	bne.n	800368a <_fwalk_reent+0xe>
 800369a:	4638      	mov	r0, r7
 800369c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a0:	89ab      	ldrh	r3, [r5, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d907      	bls.n	80036b6 <_fwalk_reent+0x3a>
 80036a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036aa:	3301      	adds	r3, #1
 80036ac:	d003      	beq.n	80036b6 <_fwalk_reent+0x3a>
 80036ae:	4629      	mov	r1, r5
 80036b0:	4630      	mov	r0, r6
 80036b2:	47c0      	blx	r8
 80036b4:	4307      	orrs	r7, r0
 80036b6:	3568      	adds	r5, #104	; 0x68
 80036b8:	e7e9      	b.n	800368e <_fwalk_reent+0x12>
	...

080036bc <_gettimeofday_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d07      	ldr	r5, [pc, #28]	; (80036dc <_gettimeofday_r+0x20>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	f000 fc97 	bl	8003ffc <_gettimeofday>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	d102      	bne.n	80036d8 <_gettimeofday_r+0x1c>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	b103      	cbz	r3, 80036d8 <_gettimeofday_r+0x1c>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	200001d8 	.word	0x200001d8

080036e0 <__retarget_lock_init_recursive>:
 80036e0:	4770      	bx	lr

080036e2 <__retarget_lock_acquire_recursive>:
 80036e2:	4770      	bx	lr

080036e4 <__retarget_lock_release_recursive>:
 80036e4:	4770      	bx	lr

080036e6 <__swhatbuf_r>:
 80036e6:	b570      	push	{r4, r5, r6, lr}
 80036e8:	460e      	mov	r6, r1
 80036ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ee:	2900      	cmp	r1, #0
 80036f0:	b096      	sub	sp, #88	; 0x58
 80036f2:	4614      	mov	r4, r2
 80036f4:	461d      	mov	r5, r3
 80036f6:	da07      	bge.n	8003708 <__swhatbuf_r+0x22>
 80036f8:	2300      	movs	r3, #0
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	89b3      	ldrh	r3, [r6, #12]
 80036fe:	061a      	lsls	r2, r3, #24
 8003700:	d410      	bmi.n	8003724 <__swhatbuf_r+0x3e>
 8003702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003706:	e00e      	b.n	8003726 <__swhatbuf_r+0x40>
 8003708:	466a      	mov	r2, sp
 800370a:	f000 fbed 	bl	8003ee8 <_fstat_r>
 800370e:	2800      	cmp	r0, #0
 8003710:	dbf2      	blt.n	80036f8 <__swhatbuf_r+0x12>
 8003712:	9a01      	ldr	r2, [sp, #4]
 8003714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800371c:	425a      	negs	r2, r3
 800371e:	415a      	adcs	r2, r3
 8003720:	602a      	str	r2, [r5, #0]
 8003722:	e7ee      	b.n	8003702 <__swhatbuf_r+0x1c>
 8003724:	2340      	movs	r3, #64	; 0x40
 8003726:	2000      	movs	r0, #0
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	b016      	add	sp, #88	; 0x58
 800372c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003730 <__smakebuf_r>:
 8003730:	898b      	ldrh	r3, [r1, #12]
 8003732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003734:	079d      	lsls	r5, r3, #30
 8003736:	4606      	mov	r6, r0
 8003738:	460c      	mov	r4, r1
 800373a:	d507      	bpl.n	800374c <__smakebuf_r+0x1c>
 800373c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	2301      	movs	r3, #1
 8003746:	6163      	str	r3, [r4, #20]
 8003748:	b002      	add	sp, #8
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	ab01      	add	r3, sp, #4
 800374e:	466a      	mov	r2, sp
 8003750:	f7ff ffc9 	bl	80036e6 <__swhatbuf_r>
 8003754:	9900      	ldr	r1, [sp, #0]
 8003756:	4605      	mov	r5, r0
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff faa3 	bl	8002ca4 <_malloc_r>
 800375e:	b948      	cbnz	r0, 8003774 <__smakebuf_r+0x44>
 8003760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003764:	059a      	lsls	r2, r3, #22
 8003766:	d4ef      	bmi.n	8003748 <__smakebuf_r+0x18>
 8003768:	f023 0303 	bic.w	r3, r3, #3
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	e7e3      	b.n	800373c <__smakebuf_r+0xc>
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <__smakebuf_r+0x7c>)
 8003776:	62b3      	str	r3, [r6, #40]	; 0x28
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	6020      	str	r0, [r4, #0]
 800377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	9b00      	ldr	r3, [sp, #0]
 8003784:	6163      	str	r3, [r4, #20]
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	6120      	str	r0, [r4, #16]
 800378a:	b15b      	cbz	r3, 80037a4 <__smakebuf_r+0x74>
 800378c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003790:	4630      	mov	r0, r6
 8003792:	f000 fbbb 	bl	8003f0c <_isatty_r>
 8003796:	b128      	cbz	r0, 80037a4 <__smakebuf_r+0x74>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	89a0      	ldrh	r0, [r4, #12]
 80037a6:	4305      	orrs	r5, r0
 80037a8:	81a5      	strh	r5, [r4, #12]
 80037aa:	e7cd      	b.n	8003748 <__smakebuf_r+0x18>
 80037ac:	080034f5 	.word	0x080034f5

080037b0 <__malloc_lock>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__malloc_lock+0x8>)
 80037b2:	f7ff bf96 	b.w	80036e2 <__retarget_lock_acquire_recursive>
 80037b6:	bf00      	nop
 80037b8:	200001d0 	.word	0x200001d0

080037bc <__malloc_unlock>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__malloc_unlock+0x8>)
 80037be:	f7ff bf91 	b.w	80036e4 <__retarget_lock_release_recursive>
 80037c2:	bf00      	nop
 80037c4:	200001d0 	.word	0x200001d0

080037c8 <__sfputc_r>:
 80037c8:	6893      	ldr	r3, [r2, #8]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	b410      	push	{r4}
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	da08      	bge.n	80037e6 <__sfputc_r+0x1e>
 80037d4:	6994      	ldr	r4, [r2, #24]
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	db01      	blt.n	80037de <__sfputc_r+0x16>
 80037da:	290a      	cmp	r1, #10
 80037dc:	d103      	bne.n	80037e6 <__sfputc_r+0x1e>
 80037de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e2:	f7ff bcc3 	b.w	800316c <__swbuf_r>
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	1c58      	adds	r0, r3, #1
 80037ea:	6010      	str	r0, [r2, #0]
 80037ec:	7019      	strb	r1, [r3, #0]
 80037ee:	4608      	mov	r0, r1
 80037f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <__sfputs_r>:
 80037f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f8:	4606      	mov	r6, r0
 80037fa:	460f      	mov	r7, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	18d5      	adds	r5, r2, r3
 8003800:	42ac      	cmp	r4, r5
 8003802:	d101      	bne.n	8003808 <__sfputs_r+0x12>
 8003804:	2000      	movs	r0, #0
 8003806:	e007      	b.n	8003818 <__sfputs_r+0x22>
 8003808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800380c:	463a      	mov	r2, r7
 800380e:	4630      	mov	r0, r6
 8003810:	f7ff ffda 	bl	80037c8 <__sfputc_r>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d1f3      	bne.n	8003800 <__sfputs_r+0xa>
 8003818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800381c <_vfiprintf_r>:
 800381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003820:	460d      	mov	r5, r1
 8003822:	b09d      	sub	sp, #116	; 0x74
 8003824:	4614      	mov	r4, r2
 8003826:	4698      	mov	r8, r3
 8003828:	4606      	mov	r6, r0
 800382a:	b118      	cbz	r0, 8003834 <_vfiprintf_r+0x18>
 800382c:	6983      	ldr	r3, [r0, #24]
 800382e:	b90b      	cbnz	r3, 8003834 <_vfiprintf_r+0x18>
 8003830:	f7ff fe94 	bl	800355c <__sinit>
 8003834:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <_vfiprintf_r+0x240>)
 8003836:	429d      	cmp	r5, r3
 8003838:	d11b      	bne.n	8003872 <_vfiprintf_r+0x56>
 800383a:	6875      	ldr	r5, [r6, #4]
 800383c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800383e:	07d9      	lsls	r1, r3, #31
 8003840:	d405      	bmi.n	800384e <_vfiprintf_r+0x32>
 8003842:	89ab      	ldrh	r3, [r5, #12]
 8003844:	059a      	lsls	r2, r3, #22
 8003846:	d402      	bmi.n	800384e <_vfiprintf_r+0x32>
 8003848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800384a:	f7ff ff4a 	bl	80036e2 <__retarget_lock_acquire_recursive>
 800384e:	89ab      	ldrh	r3, [r5, #12]
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	d501      	bpl.n	8003858 <_vfiprintf_r+0x3c>
 8003854:	692b      	ldr	r3, [r5, #16]
 8003856:	b9eb      	cbnz	r3, 8003894 <_vfiprintf_r+0x78>
 8003858:	4629      	mov	r1, r5
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff fcd8 	bl	8003210 <__swsetup_r>
 8003860:	b1c0      	cbz	r0, 8003894 <_vfiprintf_r+0x78>
 8003862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003864:	07dc      	lsls	r4, r3, #31
 8003866:	d50e      	bpl.n	8003886 <_vfiprintf_r+0x6a>
 8003868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800386c:	b01d      	add	sp, #116	; 0x74
 800386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003872:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <_vfiprintf_r+0x244>)
 8003874:	429d      	cmp	r5, r3
 8003876:	d101      	bne.n	800387c <_vfiprintf_r+0x60>
 8003878:	68b5      	ldr	r5, [r6, #8]
 800387a:	e7df      	b.n	800383c <_vfiprintf_r+0x20>
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <_vfiprintf_r+0x248>)
 800387e:	429d      	cmp	r5, r3
 8003880:	bf08      	it	eq
 8003882:	68f5      	ldreq	r5, [r6, #12]
 8003884:	e7da      	b.n	800383c <_vfiprintf_r+0x20>
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	0598      	lsls	r0, r3, #22
 800388a:	d4ed      	bmi.n	8003868 <_vfiprintf_r+0x4c>
 800388c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800388e:	f7ff ff29 	bl	80036e4 <__retarget_lock_release_recursive>
 8003892:	e7e9      	b.n	8003868 <_vfiprintf_r+0x4c>
 8003894:	2300      	movs	r3, #0
 8003896:	9309      	str	r3, [sp, #36]	; 0x24
 8003898:	2320      	movs	r3, #32
 800389a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800389e:	f8cd 800c 	str.w	r8, [sp, #12]
 80038a2:	2330      	movs	r3, #48	; 0x30
 80038a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a68 <_vfiprintf_r+0x24c>
 80038a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ac:	f04f 0901 	mov.w	r9, #1
 80038b0:	4623      	mov	r3, r4
 80038b2:	469a      	mov	sl, r3
 80038b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038b8:	b10a      	cbz	r2, 80038be <_vfiprintf_r+0xa2>
 80038ba:	2a25      	cmp	r2, #37	; 0x25
 80038bc:	d1f9      	bne.n	80038b2 <_vfiprintf_r+0x96>
 80038be:	ebba 0b04 	subs.w	fp, sl, r4
 80038c2:	d00b      	beq.n	80038dc <_vfiprintf_r+0xc0>
 80038c4:	465b      	mov	r3, fp
 80038c6:	4622      	mov	r2, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	4630      	mov	r0, r6
 80038cc:	f7ff ff93 	bl	80037f6 <__sfputs_r>
 80038d0:	3001      	adds	r0, #1
 80038d2:	f000 80aa 	beq.w	8003a2a <_vfiprintf_r+0x20e>
 80038d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d8:	445a      	add	r2, fp
 80038da:	9209      	str	r2, [sp, #36]	; 0x24
 80038dc:	f89a 3000 	ldrb.w	r3, [sl]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a2 	beq.w	8003a2a <_vfiprintf_r+0x20e>
 80038e6:	2300      	movs	r3, #0
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038f0:	f10a 0a01 	add.w	sl, sl, #1
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	9307      	str	r3, [sp, #28]
 80038f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038fc:	931a      	str	r3, [sp, #104]	; 0x68
 80038fe:	4654      	mov	r4, sl
 8003900:	2205      	movs	r2, #5
 8003902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003906:	4858      	ldr	r0, [pc, #352]	; (8003a68 <_vfiprintf_r+0x24c>)
 8003908:	f7fc fc6a 	bl	80001e0 <memchr>
 800390c:	9a04      	ldr	r2, [sp, #16]
 800390e:	b9d8      	cbnz	r0, 8003948 <_vfiprintf_r+0x12c>
 8003910:	06d1      	lsls	r1, r2, #27
 8003912:	bf44      	itt	mi
 8003914:	2320      	movmi	r3, #32
 8003916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391a:	0713      	lsls	r3, r2, #28
 800391c:	bf44      	itt	mi
 800391e:	232b      	movmi	r3, #43	; 0x2b
 8003920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003924:	f89a 3000 	ldrb.w	r3, [sl]
 8003928:	2b2a      	cmp	r3, #42	; 0x2a
 800392a:	d015      	beq.n	8003958 <_vfiprintf_r+0x13c>
 800392c:	9a07      	ldr	r2, [sp, #28]
 800392e:	4654      	mov	r4, sl
 8003930:	2000      	movs	r0, #0
 8003932:	f04f 0c0a 	mov.w	ip, #10
 8003936:	4621      	mov	r1, r4
 8003938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800393c:	3b30      	subs	r3, #48	; 0x30
 800393e:	2b09      	cmp	r3, #9
 8003940:	d94e      	bls.n	80039e0 <_vfiprintf_r+0x1c4>
 8003942:	b1b0      	cbz	r0, 8003972 <_vfiprintf_r+0x156>
 8003944:	9207      	str	r2, [sp, #28]
 8003946:	e014      	b.n	8003972 <_vfiprintf_r+0x156>
 8003948:	eba0 0308 	sub.w	r3, r0, r8
 800394c:	fa09 f303 	lsl.w	r3, r9, r3
 8003950:	4313      	orrs	r3, r2
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	46a2      	mov	sl, r4
 8003956:	e7d2      	b.n	80038fe <_vfiprintf_r+0xe2>
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	1d19      	adds	r1, r3, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	9103      	str	r1, [sp, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfbb      	ittet	lt
 8003964:	425b      	neglt	r3, r3
 8003966:	f042 0202 	orrlt.w	r2, r2, #2
 800396a:	9307      	strge	r3, [sp, #28]
 800396c:	9307      	strlt	r3, [sp, #28]
 800396e:	bfb8      	it	lt
 8003970:	9204      	strlt	r2, [sp, #16]
 8003972:	7823      	ldrb	r3, [r4, #0]
 8003974:	2b2e      	cmp	r3, #46	; 0x2e
 8003976:	d10c      	bne.n	8003992 <_vfiprintf_r+0x176>
 8003978:	7863      	ldrb	r3, [r4, #1]
 800397a:	2b2a      	cmp	r3, #42	; 0x2a
 800397c:	d135      	bne.n	80039ea <_vfiprintf_r+0x1ce>
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	9203      	str	r2, [sp, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfb8      	it	lt
 800398a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800398e:	3402      	adds	r4, #2
 8003990:	9305      	str	r3, [sp, #20]
 8003992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a78 <_vfiprintf_r+0x25c>
 8003996:	7821      	ldrb	r1, [r4, #0]
 8003998:	2203      	movs	r2, #3
 800399a:	4650      	mov	r0, sl
 800399c:	f7fc fc20 	bl	80001e0 <memchr>
 80039a0:	b140      	cbz	r0, 80039b4 <_vfiprintf_r+0x198>
 80039a2:	2340      	movs	r3, #64	; 0x40
 80039a4:	eba0 000a 	sub.w	r0, r0, sl
 80039a8:	fa03 f000 	lsl.w	r0, r3, r0
 80039ac:	9b04      	ldr	r3, [sp, #16]
 80039ae:	4303      	orrs	r3, r0
 80039b0:	3401      	adds	r4, #1
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b8:	482c      	ldr	r0, [pc, #176]	; (8003a6c <_vfiprintf_r+0x250>)
 80039ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039be:	2206      	movs	r2, #6
 80039c0:	f7fc fc0e 	bl	80001e0 <memchr>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d03f      	beq.n	8003a48 <_vfiprintf_r+0x22c>
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <_vfiprintf_r+0x254>)
 80039ca:	bb1b      	cbnz	r3, 8003a14 <_vfiprintf_r+0x1f8>
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	3307      	adds	r3, #7
 80039d0:	f023 0307 	bic.w	r3, r3, #7
 80039d4:	3308      	adds	r3, #8
 80039d6:	9303      	str	r3, [sp, #12]
 80039d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039da:	443b      	add	r3, r7
 80039dc:	9309      	str	r3, [sp, #36]	; 0x24
 80039de:	e767      	b.n	80038b0 <_vfiprintf_r+0x94>
 80039e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80039e4:	460c      	mov	r4, r1
 80039e6:	2001      	movs	r0, #1
 80039e8:	e7a5      	b.n	8003936 <_vfiprintf_r+0x11a>
 80039ea:	2300      	movs	r3, #0
 80039ec:	3401      	adds	r4, #1
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0c0a 	mov.w	ip, #10
 80039f6:	4620      	mov	r0, r4
 80039f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039fc:	3a30      	subs	r2, #48	; 0x30
 80039fe:	2a09      	cmp	r2, #9
 8003a00:	d903      	bls.n	8003a0a <_vfiprintf_r+0x1ee>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0c5      	beq.n	8003992 <_vfiprintf_r+0x176>
 8003a06:	9105      	str	r1, [sp, #20]
 8003a08:	e7c3      	b.n	8003992 <_vfiprintf_r+0x176>
 8003a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a0e:	4604      	mov	r4, r0
 8003a10:	2301      	movs	r3, #1
 8003a12:	e7f0      	b.n	80039f6 <_vfiprintf_r+0x1da>
 8003a14:	ab03      	add	r3, sp, #12
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <_vfiprintf_r+0x258>)
 8003a1c:	a904      	add	r1, sp, #16
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f3af 8000 	nop.w
 8003a24:	4607      	mov	r7, r0
 8003a26:	1c78      	adds	r0, r7, #1
 8003a28:	d1d6      	bne.n	80039d8 <_vfiprintf_r+0x1bc>
 8003a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a2c:	07d9      	lsls	r1, r3, #31
 8003a2e:	d405      	bmi.n	8003a3c <_vfiprintf_r+0x220>
 8003a30:	89ab      	ldrh	r3, [r5, #12]
 8003a32:	059a      	lsls	r2, r3, #22
 8003a34:	d402      	bmi.n	8003a3c <_vfiprintf_r+0x220>
 8003a36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a38:	f7ff fe54 	bl	80036e4 <__retarget_lock_release_recursive>
 8003a3c:	89ab      	ldrh	r3, [r5, #12]
 8003a3e:	065b      	lsls	r3, r3, #25
 8003a40:	f53f af12 	bmi.w	8003868 <_vfiprintf_r+0x4c>
 8003a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a46:	e711      	b.n	800386c <_vfiprintf_r+0x50>
 8003a48:	ab03      	add	r3, sp, #12
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <_vfiprintf_r+0x258>)
 8003a50:	a904      	add	r1, sp, #16
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f880 	bl	8003b58 <_printf_i>
 8003a58:	e7e4      	b.n	8003a24 <_vfiprintf_r+0x208>
 8003a5a:	bf00      	nop
 8003a5c:	08004280 	.word	0x08004280
 8003a60:	080042a0 	.word	0x080042a0
 8003a64:	08004260 	.word	0x08004260
 8003a68:	080042c0 	.word	0x080042c0
 8003a6c:	080042ca 	.word	0x080042ca
 8003a70:	00000000 	.word	0x00000000
 8003a74:	080037f7 	.word	0x080037f7
 8003a78:	080042c6 	.word	0x080042c6

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4616      	mov	r6, r2
 8003a82:	4699      	mov	r9, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bfb8      	it	lt
 8003a90:	4613      	movlt	r3, r2
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b10a      	cbz	r2, 8003aa2 <_printf_common+0x26>
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	6833      	ldrmi	r3, [r6, #0]
 8003aaa:	3302      	addmi	r3, #2
 8003aac:	6033      	strmi	r3, [r6, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d106      	bne.n	8003ac4 <_printf_common+0x48>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dc26      	bgt.n	8003b12 <_printf_common+0x96>
 8003ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ac8:	1e13      	subs	r3, r2, #0
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	0692      	lsls	r2, r2, #26
 8003ad2:	d42b      	bmi.n	8003b2c <_printf_common+0xb0>
 8003ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d01e      	beq.n	8003b20 <_printf_common+0xa4>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	68e5      	ldr	r5, [r4, #12]
 8003ae6:	6832      	ldr	r2, [r6, #0]
 8003ae8:	f003 0306 	and.w	r3, r3, #6
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	bf08      	it	eq
 8003af0:	1aad      	subeq	r5, r5, r2
 8003af2:	68a3      	ldr	r3, [r4, #8]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	bf0c      	ite	eq
 8003af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003afc:	2500      	movne	r5, #0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bfc4      	itt	gt
 8003b02:	1a9b      	subgt	r3, r3, r2
 8003b04:	18ed      	addgt	r5, r5, r3
 8003b06:	2600      	movs	r6, #0
 8003b08:	341a      	adds	r4, #26
 8003b0a:	42b5      	cmp	r5, r6
 8003b0c:	d11a      	bne.n	8003b44 <_printf_common+0xc8>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e008      	b.n	8003b24 <_printf_common+0xa8>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4652      	mov	r2, sl
 8003b16:	4649      	mov	r1, r9
 8003b18:	4638      	mov	r0, r7
 8003b1a:	47c0      	blx	r8
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d103      	bne.n	8003b28 <_printf_common+0xac>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	3501      	adds	r5, #1
 8003b2a:	e7c6      	b.n	8003aba <_printf_common+0x3e>
 8003b2c:	18e1      	adds	r1, r4, r3
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	2030      	movs	r0, #48	; 0x30
 8003b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b36:	4422      	add	r2, r4
 8003b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b40:	3302      	adds	r3, #2
 8003b42:	e7c7      	b.n	8003ad4 <_printf_common+0x58>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4622      	mov	r2, r4
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d0e6      	beq.n	8003b20 <_printf_common+0xa4>
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7d9      	b.n	8003b0a <_printf_common+0x8e>
	...

08003b58 <_printf_i>:
 8003b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	4691      	mov	r9, r2
 8003b60:	7e27      	ldrb	r7, [r4, #24]
 8003b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b64:	2f78      	cmp	r7, #120	; 0x78
 8003b66:	4680      	mov	r8, r0
 8003b68:	469a      	mov	sl, r3
 8003b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b6e:	d807      	bhi.n	8003b80 <_printf_i+0x28>
 8003b70:	2f62      	cmp	r7, #98	; 0x62
 8003b72:	d80a      	bhi.n	8003b8a <_printf_i+0x32>
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	f000 80d8 	beq.w	8003d2a <_printf_i+0x1d2>
 8003b7a:	2f58      	cmp	r7, #88	; 0x58
 8003b7c:	f000 80a3 	beq.w	8003cc6 <_printf_i+0x16e>
 8003b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b88:	e03a      	b.n	8003c00 <_printf_i+0xa8>
 8003b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b8e:	2b15      	cmp	r3, #21
 8003b90:	d8f6      	bhi.n	8003b80 <_printf_i+0x28>
 8003b92:	a001      	add	r0, pc, #4	; (adr r0, 8003b98 <_printf_i+0x40>)
 8003b94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003b81 	.word	0x08003b81
 8003ba4:	08003b81 	.word	0x08003b81
 8003ba8:	08003b81 	.word	0x08003b81
 8003bac:	08003b81 	.word	0x08003b81
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b81 	.word	0x08003b81
 8003bb8:	08003b81 	.word	0x08003b81
 8003bbc:	08003b81 	.word	0x08003b81
 8003bc0:	08003b81 	.word	0x08003b81
 8003bc4:	08003d11 	.word	0x08003d11
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003cf3 	.word	0x08003cf3
 8003bd0:	08003b81 	.word	0x08003b81
 8003bd4:	08003b81 	.word	0x08003b81
 8003bd8:	08003d33 	.word	0x08003d33
 8003bdc:	08003b81 	.word	0x08003b81
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003b81 	.word	0x08003b81
 8003be8:	08003b81 	.word	0x08003b81
 8003bec:	08003cfb 	.word	0x08003cfb
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	600a      	str	r2, [r1, #0]
 8003bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0a3      	b.n	8003d4c <_printf_i+0x1f4>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	6808      	ldr	r0, [r1, #0]
 8003c08:	062e      	lsls	r6, r5, #24
 8003c0a:	f100 0304 	add.w	r3, r0, #4
 8003c0e:	d50a      	bpl.n	8003c26 <_printf_i+0xce>
 8003c10:	6805      	ldr	r5, [r0, #0]
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	da03      	bge.n	8003c20 <_printf_i+0xc8>
 8003c18:	232d      	movs	r3, #45	; 0x2d
 8003c1a:	426d      	negs	r5, r5
 8003c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c20:	485e      	ldr	r0, [pc, #376]	; (8003d9c <_printf_i+0x244>)
 8003c22:	230a      	movs	r3, #10
 8003c24:	e019      	b.n	8003c5a <_printf_i+0x102>
 8003c26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c2a:	6805      	ldr	r5, [r0, #0]
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	bf18      	it	ne
 8003c30:	b22d      	sxthne	r5, r5
 8003c32:	e7ef      	b.n	8003c14 <_printf_i+0xbc>
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	6825      	ldr	r5, [r4, #0]
 8003c38:	1d18      	adds	r0, r3, #4
 8003c3a:	6008      	str	r0, [r1, #0]
 8003c3c:	0628      	lsls	r0, r5, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0xec>
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0xf2>
 8003c44:	0669      	lsls	r1, r5, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0xe8>
 8003c48:	881d      	ldrh	r5, [r3, #0]
 8003c4a:	4854      	ldr	r0, [pc, #336]	; (8003d9c <_printf_i+0x244>)
 8003c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c4e:	bf0c      	ite	eq
 8003c50:	2308      	moveq	r3, #8
 8003c52:	230a      	movne	r3, #10
 8003c54:	2100      	movs	r1, #0
 8003c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5a:	6866      	ldr	r6, [r4, #4]
 8003c5c:	60a6      	str	r6, [r4, #8]
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	bfa2      	ittt	ge
 8003c62:	6821      	ldrge	r1, [r4, #0]
 8003c64:	f021 0104 	bicge.w	r1, r1, #4
 8003c68:	6021      	strge	r1, [r4, #0]
 8003c6a:	b90d      	cbnz	r5, 8003c70 <_printf_i+0x118>
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	d04d      	beq.n	8003d0c <_printf_i+0x1b4>
 8003c70:	4616      	mov	r6, r2
 8003c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c76:	fb03 5711 	mls	r7, r3, r1, r5
 8003c7a:	5dc7      	ldrb	r7, [r0, r7]
 8003c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c80:	462f      	mov	r7, r5
 8003c82:	42bb      	cmp	r3, r7
 8003c84:	460d      	mov	r5, r1
 8003c86:	d9f4      	bls.n	8003c72 <_printf_i+0x11a>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10b      	bne.n	8003ca4 <_printf_i+0x14c>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	07df      	lsls	r7, r3, #31
 8003c90:	d508      	bpl.n	8003ca4 <_printf_i+0x14c>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	6861      	ldr	r1, [r4, #4]
 8003c96:	4299      	cmp	r1, r3
 8003c98:	bfde      	ittt	le
 8003c9a:	2330      	movle	r3, #48	; 0x30
 8003c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ca0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003ca4:	1b92      	subs	r2, r2, r6
 8003ca6:	6122      	str	r2, [r4, #16]
 8003ca8:	f8cd a000 	str.w	sl, [sp]
 8003cac:	464b      	mov	r3, r9
 8003cae:	aa03      	add	r2, sp, #12
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f7ff fee2 	bl	8003a7c <_printf_common>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d14c      	bne.n	8003d56 <_printf_i+0x1fe>
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc0:	b004      	add	sp, #16
 8003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc6:	4835      	ldr	r0, [pc, #212]	; (8003d9c <_printf_i+0x244>)
 8003cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	680e      	ldr	r6, [r1, #0]
 8003cd0:	061f      	lsls	r7, r3, #24
 8003cd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cd6:	600e      	str	r6, [r1, #0]
 8003cd8:	d514      	bpl.n	8003d04 <_printf_i+0x1ac>
 8003cda:	07d9      	lsls	r1, r3, #31
 8003cdc:	bf44      	itt	mi
 8003cde:	f043 0320 	orrmi.w	r3, r3, #32
 8003ce2:	6023      	strmi	r3, [r4, #0]
 8003ce4:	b91d      	cbnz	r5, 8003cee <_printf_i+0x196>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	2310      	movs	r3, #16
 8003cf0:	e7b0      	b.n	8003c54 <_printf_i+0xfc>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	2378      	movs	r3, #120	; 0x78
 8003cfc:	4828      	ldr	r0, [pc, #160]	; (8003da0 <_printf_i+0x248>)
 8003cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d02:	e7e3      	b.n	8003ccc <_printf_i+0x174>
 8003d04:	065e      	lsls	r6, r3, #25
 8003d06:	bf48      	it	mi
 8003d08:	b2ad      	uxthmi	r5, r5
 8003d0a:	e7e6      	b.n	8003cda <_printf_i+0x182>
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	e7bb      	b.n	8003c88 <_printf_i+0x130>
 8003d10:	680b      	ldr	r3, [r1, #0]
 8003d12:	6826      	ldr	r6, [r4, #0]
 8003d14:	6960      	ldr	r0, [r4, #20]
 8003d16:	1d1d      	adds	r5, r3, #4
 8003d18:	600d      	str	r5, [r1, #0]
 8003d1a:	0635      	lsls	r5, r6, #24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	d501      	bpl.n	8003d24 <_printf_i+0x1cc>
 8003d20:	6018      	str	r0, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <_printf_i+0x1d2>
 8003d24:	0671      	lsls	r1, r6, #25
 8003d26:	d5fb      	bpl.n	8003d20 <_printf_i+0x1c8>
 8003d28:	8018      	strh	r0, [r3, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	4616      	mov	r6, r2
 8003d30:	e7ba      	b.n	8003ca8 <_printf_i+0x150>
 8003d32:	680b      	ldr	r3, [r1, #0]
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	600a      	str	r2, [r1, #0]
 8003d38:	681e      	ldr	r6, [r3, #0]
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7fc fa4e 	bl	80001e0 <memchr>
 8003d44:	b108      	cbz	r0, 8003d4a <_printf_i+0x1f2>
 8003d46:	1b80      	subs	r0, r0, r6
 8003d48:	6060      	str	r0, [r4, #4]
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d54:	e7a8      	b.n	8003ca8 <_printf_i+0x150>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	47d0      	blx	sl
 8003d60:	3001      	adds	r0, #1
 8003d62:	d0ab      	beq.n	8003cbc <_printf_i+0x164>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	079b      	lsls	r3, r3, #30
 8003d68:	d413      	bmi.n	8003d92 <_printf_i+0x23a>
 8003d6a:	68e0      	ldr	r0, [r4, #12]
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	bfb8      	it	lt
 8003d72:	4618      	movlt	r0, r3
 8003d74:	e7a4      	b.n	8003cc0 <_printf_i+0x168>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	47d0      	blx	sl
 8003d80:	3001      	adds	r0, #1
 8003d82:	d09b      	beq.n	8003cbc <_printf_i+0x164>
 8003d84:	3501      	adds	r5, #1
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	9903      	ldr	r1, [sp, #12]
 8003d8a:	1a5b      	subs	r3, r3, r1
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	dcf2      	bgt.n	8003d76 <_printf_i+0x21e>
 8003d90:	e7eb      	b.n	8003d6a <_printf_i+0x212>
 8003d92:	2500      	movs	r5, #0
 8003d94:	f104 0619 	add.w	r6, r4, #25
 8003d98:	e7f5      	b.n	8003d86 <_printf_i+0x22e>
 8003d9a:	bf00      	nop
 8003d9c:	080042d1 	.word	0x080042d1
 8003da0:	080042e2 	.word	0x080042e2

08003da4 <_putc_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	460d      	mov	r5, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	4606      	mov	r6, r0
 8003dac:	b118      	cbz	r0, 8003db6 <_putc_r+0x12>
 8003dae:	6983      	ldr	r3, [r0, #24]
 8003db0:	b90b      	cbnz	r3, 8003db6 <_putc_r+0x12>
 8003db2:	f7ff fbd3 	bl	800355c <__sinit>
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <_putc_r+0x84>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d124      	bne.n	8003e06 <_putc_r+0x62>
 8003dbc:	6874      	ldr	r4, [r6, #4]
 8003dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dc0:	07d8      	lsls	r0, r3, #31
 8003dc2:	d405      	bmi.n	8003dd0 <_putc_r+0x2c>
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	0599      	lsls	r1, r3, #22
 8003dc8:	d402      	bmi.n	8003dd0 <_putc_r+0x2c>
 8003dca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dcc:	f7ff fc89 	bl	80036e2 <__retarget_lock_acquire_recursive>
 8003dd0:	68a3      	ldr	r3, [r4, #8]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	da05      	bge.n	8003de6 <_putc_r+0x42>
 8003dda:	69a2      	ldr	r2, [r4, #24]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	db1c      	blt.n	8003e1a <_putc_r+0x76>
 8003de0:	b2eb      	uxtb	r3, r5
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d019      	beq.n	8003e1a <_putc_r+0x76>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	6022      	str	r2, [r4, #0]
 8003dec:	701d      	strb	r5, [r3, #0]
 8003dee:	b2ed      	uxtb	r5, r5
 8003df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003df2:	07da      	lsls	r2, r3, #31
 8003df4:	d405      	bmi.n	8003e02 <_putc_r+0x5e>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	059b      	lsls	r3, r3, #22
 8003dfa:	d402      	bmi.n	8003e02 <_putc_r+0x5e>
 8003dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfe:	f7ff fc71 	bl	80036e4 <__retarget_lock_release_recursive>
 8003e02:	4628      	mov	r0, r5
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <_putc_r+0x88>)
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d101      	bne.n	8003e10 <_putc_r+0x6c>
 8003e0c:	68b4      	ldr	r4, [r6, #8]
 8003e0e:	e7d6      	b.n	8003dbe <_putc_r+0x1a>
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <_putc_r+0x8c>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	bf08      	it	eq
 8003e16:	68f4      	ldreq	r4, [r6, #12]
 8003e18:	e7d1      	b.n	8003dbe <_putc_r+0x1a>
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f7ff f9a4 	bl	800316c <__swbuf_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	e7e3      	b.n	8003df0 <_putc_r+0x4c>
 8003e28:	08004280 	.word	0x08004280
 8003e2c:	080042a0 	.word	0x080042a0
 8003e30:	08004260 	.word	0x08004260

08003e34 <__sread>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	460c      	mov	r4, r1
 8003e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3c:	f000 f888 	bl	8003f50 <_read_r>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	bfab      	itete	ge
 8003e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e46:	89a3      	ldrhlt	r3, [r4, #12]
 8003e48:	181b      	addge	r3, r3, r0
 8003e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e4e:	bfac      	ite	ge
 8003e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e52:	81a3      	strhlt	r3, [r4, #12]
 8003e54:	bd10      	pop	{r4, pc}

08003e56 <__swrite>:
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	461f      	mov	r7, r3
 8003e5c:	898b      	ldrh	r3, [r1, #12]
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	4605      	mov	r5, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	4616      	mov	r6, r2
 8003e66:	d505      	bpl.n	8003e74 <__swrite+0x1e>
 8003e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f000 f85c 	bl	8003f2c <_lseek_r>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	4632      	mov	r2, r6
 8003e82:	463b      	mov	r3, r7
 8003e84:	4628      	mov	r0, r5
 8003e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	f7fc bd9f 	b.w	80009cc <_write_r>

08003e8e <__sseek>:
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	460c      	mov	r4, r1
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 f849 	bl	8003f2c <_lseek_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	bf15      	itete	ne
 8003ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eaa:	81a3      	strheq	r3, [r4, #12]
 8003eac:	bf18      	it	ne
 8003eae:	81a3      	strhne	r3, [r4, #12]
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <__sclose>:
 8003eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb6:	f000 b807 	b.w	8003ec8 <_close_r>

08003eba <abort>:
 8003eba:	b508      	push	{r3, lr}
 8003ebc:	2006      	movs	r0, #6
 8003ebe:	f000 f881 	bl	8003fc4 <raise>
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f7fe fd02 	bl	80028cc <_exit>

08003ec8 <_close_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d06      	ldr	r5, [pc, #24]	; (8003ee4 <_close_r+0x1c>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fe fd21 	bl	800291a <_close>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_close_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_close_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200001d8 	.word	0x200001d8

08003ee8 <_fstat_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d07      	ldr	r5, [pc, #28]	; (8003f08 <_fstat_r+0x20>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	f7fe fd1c 	bl	8002932 <_fstat>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d102      	bne.n	8003f04 <_fstat_r+0x1c>
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	b103      	cbz	r3, 8003f04 <_fstat_r+0x1c>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd38      	pop	{r3, r4, r5, pc}
 8003f06:	bf00      	nop
 8003f08:	200001d8 	.word	0x200001d8

08003f0c <_isatty_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d06      	ldr	r5, [pc, #24]	; (8003f28 <_isatty_r+0x1c>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fe fd1b 	bl	8002952 <_isatty>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_isatty_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_isatty_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200001d8 	.word	0x200001d8

08003f2c <_lseek_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4d07      	ldr	r5, [pc, #28]	; (8003f4c <_lseek_r+0x20>)
 8003f30:	4604      	mov	r4, r0
 8003f32:	4608      	mov	r0, r1
 8003f34:	4611      	mov	r1, r2
 8003f36:	2200      	movs	r2, #0
 8003f38:	602a      	str	r2, [r5, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7fe fd14 	bl	8002968 <_lseek>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_lseek_r+0x1e>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_lseek_r+0x1e>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	200001d8 	.word	0x200001d8

08003f50 <_read_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d07      	ldr	r5, [pc, #28]	; (8003f70 <_read_r+0x20>)
 8003f54:	4604      	mov	r4, r0
 8003f56:	4608      	mov	r0, r1
 8003f58:	4611      	mov	r1, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	602a      	str	r2, [r5, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7fe fcbe 	bl	80028e0 <_read>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_read_r+0x1e>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_read_r+0x1e>
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	200001d8 	.word	0x200001d8

08003f74 <_raise_r>:
 8003f74:	291f      	cmp	r1, #31
 8003f76:	b538      	push	{r3, r4, r5, lr}
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	d904      	bls.n	8003f88 <_raise_r+0x14>
 8003f7e:	2316      	movs	r3, #22
 8003f80:	6003      	str	r3, [r0, #0]
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f8a:	b112      	cbz	r2, 8003f92 <_raise_r+0x1e>
 8003f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f90:	b94b      	cbnz	r3, 8003fa6 <_raise_r+0x32>
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 f830 	bl	8003ff8 <_getpid_r>
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa2:	f000 b817 	b.w	8003fd4 <_kill_r>
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d00a      	beq.n	8003fc0 <_raise_r+0x4c>
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	d103      	bne.n	8003fb6 <_raise_r+0x42>
 8003fae:	2316      	movs	r3, #22
 8003fb0:	6003      	str	r3, [r0, #0]
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7e7      	b.n	8003f86 <_raise_r+0x12>
 8003fb6:	2400      	movs	r4, #0
 8003fb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	4798      	blx	r3
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e7e0      	b.n	8003f86 <_raise_r+0x12>

08003fc4 <raise>:
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <raise+0xc>)
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	f7ff bfd3 	b.w	8003f74 <_raise_r>
 8003fce:	bf00      	nop
 8003fd0:	2000002c 	.word	0x2000002c

08003fd4 <_kill_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d07      	ldr	r5, [pc, #28]	; (8003ff4 <_kill_r+0x20>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	f7fe fc63 	bl	80028ac <_kill>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d102      	bne.n	8003ff0 <_kill_r+0x1c>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	b103      	cbz	r3, 8003ff0 <_kill_r+0x1c>
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200001d8 	.word	0x200001d8

08003ff8 <_getpid_r>:
 8003ff8:	f7fe bc50 	b.w	800289c <_getpid>

08003ffc <_gettimeofday>:
 8003ffc:	4b02      	ldr	r3, [pc, #8]	; (8004008 <_gettimeofday+0xc>)
 8003ffe:	2258      	movs	r2, #88	; 0x58
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004006:	4770      	bx	lr
 8004008:	200001d8 	.word	0x200001d8

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
