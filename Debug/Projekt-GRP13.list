
Projekt-GRP13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  1 .text         00006ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000094  08007448  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08007448  000201e0  2**0
=======
  1 .text         00006bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e4  080074e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ec  080074ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080074f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08007584  00020090  2**2
=======
  1 .text         0000760c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f10  08007f10  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f18  08007f18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08007fb0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08007fb0  000201dc  2**0
>>>>>>> Stashed changes
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08007584  000201dc  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 12 .debug_info   00011c79  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8c  00000000  00000000  00031d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012233  00000000  00000000  000360b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ab  00000000  00000000  000482eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c468  00000000  00000000  00056896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b2cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  000b2d54  2**2
=======
 12 .debug_info   000136bc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  0003377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000366e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00037458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001298d  00000000  00000000  00038060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff50  00000000  00000000  0004a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c7e7  00000000  00000000  0005a93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000b7178  2**2
>>>>>>> Stashed changes
=======
 12 .debug_info   000145fa  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313c  00000000  00000000  000346ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cba  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010982  00000000  00000000  0004be5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c858  00000000  00000000  0005c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  000b9088  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80001b0:	08006c2c 	.word	0x08006c2c
=======
 80001b0:	08006d50 	.word	0x08006d50
>>>>>>> Stashed changes
=======
 80001b0:	08007784 	.word	0x08007784
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08006c2c 	.word	0x08006c2c
=======
 80001c8:	20000094 	.word	0x20000094
<<<<<<< Updated upstream
 80001cc:	08006d50 	.word	0x08006d50
>>>>>>> Stashed changes
=======
 80001cc:	08007784 	.word	0x08007784
>>>>>>> Stashed changes

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

<<<<<<< Updated upstream
08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADC_RegularChannelConfig>:
=======
08000578 <ADC_RegularChannelConfig>:
>>>>>>> Stashed changes
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
<<<<<<< Updated upstream
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	70fb      	strb	r3, [r7, #3]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	70bb      	strb	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
=======
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	4608      	mov	r0, r1
 8000582:	4611      	mov	r1, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4603      	mov	r3, r0
 8000588:	70fb      	strb	r3, [r7, #3]
 800058a:	460b      	mov	r3, r1
 800058c:	70bb      	strb	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
<<<<<<< Updated upstream
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d821      	bhi.n	8000f0c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000ece:	78ba      	ldrb	r2, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	4093      	lsls	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000eea:	78f9      	ldrb	r1, [r7, #3]
 8000eec:	78ba      	ldrb	r2, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0a:	e074      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d823      	bhi.n	8000f5a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	1f5a      	subs	r2, r3, #5
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	461a      	mov	r2, r3
 8000f26:	231f      	movs	r3, #31
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4013      	ands	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	1f5a      	subs	r2, r3, #5
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	e04d      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000f5a:	78bb      	ldrb	r3, [r7, #2]
 8000f5c:	2b0e      	cmp	r3, #14
 8000f5e:	d825      	bhi.n	8000fac <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	f1a3 020a 	sub.w	r2, r3, #10
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	231f      	movs	r3, #31
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000f86:	78f9      	ldrb	r1, [r7, #3]
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000faa:	e024      	b.n	8000ff6 <ADC_RegularChannelConfig+0x156>
=======
 800059a:	78bb      	ldrb	r3, [r7, #2]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d821      	bhi.n	80005e4 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80005a6:	78ba      	ldrb	r2, [r7, #2]
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	461a      	mov	r2, r3
 80005b2:	231f      	movs	r3, #31
 80005b4:	4093      	lsls	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	43db      	mvns	r3, r3
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80005c2:	78f9      	ldrb	r1, [r7, #3]
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	e074      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d823      	bhi.n	8000632 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80005f0:	78bb      	ldrb	r3, [r7, #2]
 80005f2:	1f5a      	subs	r2, r3, #5
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	461a      	mov	r2, r3
 80005fe:	231f      	movs	r3, #31
 8000600:	4093      	lsls	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1f5a      	subs	r2, r3, #5
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	e04d      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000632:	78bb      	ldrb	r3, [r7, #2]
 8000634:	2b0e      	cmp	r3, #14
 8000636:	d825      	bhi.n	8000684 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 800063e:	78bb      	ldrb	r3, [r7, #2]
 8000640:	f1a3 020a 	sub.w	r2, r3, #10
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	461a      	mov	r2, r3
 800064e:	231f      	movs	r3, #31
 8000650:	4093      	lsls	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	43db      	mvns	r3, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 800065e:	78f9      	ldrb	r1, [r7, #3]
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	f1a3 020a 	sub.w	r2, r3, #10
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4313      	orrs	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
 8000682:	e024      	b.n	80006ce <ADC_RegularChannelConfig+0x156>
>>>>>>> Stashed changes
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
<<<<<<< Updated upstream
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000fb2:	78bb      	ldrb	r3, [r7, #2]
 8000fb4:	f1a3 020f 	sub.w	r2, r3, #15
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000fd2:	78f9      	ldrb	r1, [r7, #3]
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	f1a3 020f 	sub.w	r2, r3, #15
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000688:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	f1a3 020f 	sub.w	r2, r3, #15
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	461a      	mov	r2, r3
 800069a:	231f      	movs	r3, #31
 800069c:	4093      	lsls	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	43db      	mvns	r3, r3
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80006aa:	78f9      	ldrb	r1, [r7, #3]
 80006ac:	78bb      	ldrb	r3, [r7, #2]
 80006ae:	f1a3 020f 	sub.w	r2, r3, #15
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
<<<<<<< Updated upstream
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d923      	bls.n	8001044 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	f1a3 020a 	sub.w	r2, r3, #10
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6999      	ldr	r1, [r3, #24]
 8001028:	7878      	ldrb	r0, [r7, #1]
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	f1a3 020a 	sub.w	r2, r3, #10
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	fa00 f303 	lsl.w	r3, r0, r3
 800103a:	ea41 0203 	orr.w	r2, r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
=======
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d923      	bls.n	800071c <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f1a3 020a 	sub.w	r2, r3, #10
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	401a      	ands	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6999      	ldr	r1, [r3, #24]
 8000700:	7878      	ldrb	r0, [r7, #1]
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	f1a3 020a 	sub.w	r2, r3, #10
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	fa00 f303 	lsl.w	r3, r0, r3
 8000712:	ea41 0203 	orr.w	r2, r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
<<<<<<< Updated upstream
 8001042:	e01f      	b.n	8001084 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6959      	ldr	r1, [r3, #20]
 800106e:	7878      	ldrb	r0, [r7, #1]
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	fa00 f303 	lsl.w	r3, r0, r3
 800107c:	ea41 0203 	orr.w	r2, r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <ADC_StartConversion>:
=======
 800071a:	e01f      	b.n	800075c <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	43db      	mvns	r3, r3
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6959      	ldr	r1, [r3, #20]
 8000746:	7878      	ldrb	r0, [r7, #1]
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	fa00 f303 	lsl.w	r3, r0, r3
 8000754:	ea41 0203 	orr.w	r2, r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <ADC_StartConversion>:
>>>>>>> Stashed changes
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
<<<<<<< Updated upstream
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
=======
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
<<<<<<< Updated upstream
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f043 0204 	orr.w	r2, r3, #4
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ADC_GetConversionValue>:
=======
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f043 0204 	orr.w	r2, r3, #4
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	609a      	str	r2, [r3, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <ADC_GetConversionValue>:
>>>>>>> Stashed changes
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
<<<<<<< Updated upstream
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
=======
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
<<<<<<< Updated upstream
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	b29b      	uxth	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <ADC_GetFlagStatus>:
=======
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	b29b      	uxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <ADC_GetFlagStatus>:
>>>>>>> Stashed changes
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
<<<<<<< Updated upstream
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
=======
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
<<<<<<< Updated upstream
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <ADC_GetFlagStatus+0x24>
=======
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e001      	b.n	80007c6 <ADC_GetFlagStatus+0x24>
>>>>>>> Stashed changes
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
<<<<<<< Updated upstream
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
=======
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <FLASH_Unlock+0x28>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d005      	beq.n	80007f0 <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <FLASH_Unlock+0x28>)
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <FLASH_Unlock+0x2c>)
 80007e8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <FLASH_Unlock+0x28>)
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <FLASH_Unlock+0x30>)
 80007ee:	605a      	str	r2, [r3, #4]
  }  
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000
 8000800:	45670123 	.word	0x45670123
 8000804:	cdef89ab 	.word	0xcdef89ab

08000808 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <FLASH_Lock+0x1c>)
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <FLASH_Lock+0x1c>)
 8000812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000816:	6113      	str	r3, [r2, #16]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000830:	2304      	movs	r3, #4
 8000832:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000834:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000838:	f000 f892 	bl	8000960 <FLASH_WaitForLastOperation>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d11a      	bne.n	800087c <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <FLASH_ErasePage+0x60>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <FLASH_ErasePage+0x60>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 8000852:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <FLASH_ErasePage+0x60>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <FLASH_ErasePage+0x60>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <FLASH_ErasePage+0x60>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000864:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000868:	f000 f87a 	bl	8000960 <FLASH_WaitForLastOperation>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <FLASH_ErasePage+0x60>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <FLASH_ErasePage+0x60>)
 8000876:	f023 0302 	bic.w	r3, r3, #2
 800087a:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8000898:	2304      	movs	r3, #4
 800089a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800089c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80008a0:	f000 f85e 	bl	8000960 <FLASH_WaitForLastOperation>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d114      	bne.n	80008d8 <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	887a      	ldrh	r2, [r7, #2]
 80008be:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80008c0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80008c4:	f000 f84c 	bl	8000960 <FLASH_WaitForLastOperation>
 80008c8:	4603      	mov	r3, r0
 80008ca:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <FLASH_ProgramHalfWord+0x58>)
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <FLASH_ClearFlag+0x1c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60d3      	str	r3, [r2, #12]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 800090e:	2304      	movs	r3, #4
 8000910:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <FLASH_GetStatus+0x54>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 800091e:	2301      	movs	r3, #1
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e013      	b.n	800094c <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <FLASH_GetStatus+0x54>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8000930:	2302      	movs	r3, #2
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	e00a      	b.n	800094c <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <FLASH_GetStatus+0x54>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 8000942:	2303      	movs	r3, #3
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e001      	b.n	800094c <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8000948:	2304      	movs	r3, #4
 800094a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000968:	2304      	movs	r3, #4
 800096a:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800096c:	f7ff ffcc 	bl	8000908 <FLASH_GetStatus>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000974:	e006      	b.n	8000984 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 8000976:	f7ff ffc7 	bl	8000908 <FLASH_GetStatus>
 800097a:	4603      	mov	r3, r0
 800097c:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d102      	bne.n	8000990 <FLASH_WaitForLastOperation+0x30>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f2      	bne.n	8000976 <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8000996:	2305      	movs	r3, #5
 8000998:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
>>>>>>> Stashed changes
  * @retval None
  */
void FLASH_Unlock(void)
{
<<<<<<< Updated upstream
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <FLASH_Unlock+0x28>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <FLASH_Unlock+0x28>)
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <FLASH_Unlock+0x2c>)
 8001110:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <FLASH_Unlock+0x28>)
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <FLASH_Unlock+0x30>)
 8001116:	605a      	str	r2, [r3, #4]
  }  
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40022000 	.word	0x40022000
 8001128:	45670123 	.word	0x45670123
 800112c:	cdef89ab 	.word	0xcdef89ab

08001130 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <FLASH_Lock+0x1c>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <FLASH_Lock+0x1c>)
 800113a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113e:	6113      	str	r3, [r2, #16]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40022000 	.word	0x40022000

08001150 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001158:	2304      	movs	r3, #4
 800115a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800115c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001160:	f000 f892 	bl	8001288 <FLASH_WaitForLastOperation>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d11a      	bne.n	80011a4 <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <FLASH_ErasePage+0x60>)
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <FLASH_ErasePage+0x60>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <FLASH_ErasePage+0x60>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <FLASH_ErasePage+0x60>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <FLASH_ErasePage+0x60>)
 8001186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800118c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001190:	f000 f87a 	bl	8001288 <FLASH_WaitForLastOperation>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <FLASH_ErasePage+0x60>)
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <FLASH_ErasePage+0x60>)
 800119e:	f023 0302 	bic.w	r3, r3, #2
 80011a2:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80011c0:	2304      	movs	r3, #4
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80011c4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80011c8:	f000 f85e 	bl	8001288 <FLASH_WaitForLastOperation>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d114      	bne.n	8001200 <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <FLASH_ProgramHalfWord+0x58>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <FLASH_ProgramHalfWord+0x58>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80011e8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80011ec:	f000 f84c 	bl	8001288 <FLASH_WaitForLastOperation>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <FLASH_ProgramHalfWord+0x58>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <FLASH_ProgramHalfWord+0x58>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <FLASH_ClearFlag+0x1c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60d3      	str	r3, [r2, #12]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 8001236:	2304      	movs	r3, #4
 8001238:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <FLASH_GetStatus+0x54>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e013      	b.n	8001274 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <FLASH_GetStatus+0x54>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8001258:	2302      	movs	r3, #2
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	e00a      	b.n	8001274 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <FLASH_GetStatus+0x54>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 800126a:	2303      	movs	r3, #3
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e001      	b.n	8001274 <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8001270:	2304      	movs	r3, #4
 8001272:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 8001274:	79fb      	ldrb	r3, [r7, #7]
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000

08001288 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001290:	2304      	movs	r3, #4
 8001292:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8001294:	f7ff ffcc 	bl	8001230 <FLASH_GetStatus>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800129c:	e006      	b.n	80012ac <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 800129e:	f7ff ffc7 	bl	8001230 <FLASH_GetStatus>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <FLASH_WaitForLastOperation+0x30>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f2      	bne.n	800129e <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 80012be:	2305      	movs	r3, #5
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	4613      	mov	r3, r2
 80012dc:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <I2C_TransferHandling+0x54>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80012f0:	897b      	ldrh	r3, [r7, #10]
 80012f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012f6:	7a7b      	ldrb	r3, [r7, #9]
 80012f8:	041b      	lsls	r3, r3, #16
 80012fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	431a      	orrs	r2, r3
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	4313      	orrs	r3, r2
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4313      	orrs	r3, r2
 800130c:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	605a      	str	r2, [r3, #4]
}  
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	fc009800 	.word	0xfc009800

08001324 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	b2db      	uxtb	r3, r3
}  
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e001      	b.n	800138c <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}  
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	61da      	str	r2, [r3, #28]
  }
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <RCC_GetClocksFreq>:
=======
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
 80009b0:	4613      	mov	r3, r2
 80009b2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80009bc:	787a      	ldrb	r2, [r7, #1]
 80009be:	887b      	ldrh	r3, [r7, #2]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009dc:	887b      	ldrh	r3, [r7, #2]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	210f      	movs	r1, #15
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	8879      	ldrh	r1, [r7, #2]
 80009ee:	08c9      	lsrs	r1, r1, #3
 80009f0:	b289      	uxth	r1, r1
 80009f2:	4608      	mov	r0, r1
 80009f4:	ea02 0103 	and.w	r1, r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f100 0208 	add.w	r2, r0, #8
 80009fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3208      	adds	r2, #8
 8000a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3208      	adds	r2, #8
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	817b      	strh	r3, [r7, #10]
 8000a46:	4613      	mov	r3, r2
 8000a48:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <I2C_TransferHandling+0x54>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8000a5c:	897b      	ldrh	r3, [r7, #10]
 8000a5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000a62:	7a7b      	ldrb	r3, [r7, #9]
 8000a64:	041b      	lsls	r3, r3, #16
 8000a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	605a      	str	r2, [r3, #4]
}  
 8000a80:	bf00      	nop
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	fc009800 	.word	0xfc009800

08000a90 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8000a9c:	78fa      	ldrb	r2, [r7, #3]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	b2db      	uxtb	r3, r3
}  
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e001      	b.n	8000af8 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}  
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	61da      	str	r2, [r3, #28]
  }
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <RCC_GetClocksFreq>:
>>>>>>> Stashed changes
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
<<<<<<< Updated upstream
 80013b8:	b480      	push	{r7}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80013e0:	4b91      	ldr	r3, [pc, #580]	; (8001628 <RCC_GetClocksFreq+0x270>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d011      	beq.n	8001414 <RCC_GetClocksFreq+0x5c>
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d837      	bhi.n	8001466 <RCC_GetClocksFreq+0xae>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <RCC_GetClocksFreq+0x4c>
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d004      	beq.n	800140c <RCC_GetClocksFreq+0x54>
 8001402:	e030      	b.n	8001466 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a89      	ldr	r2, [pc, #548]	; (800162c <RCC_GetClocksFreq+0x274>)
 8001408:	601a      	str	r2, [r3, #0]
      break;
 800140a:	e030      	b.n	800146e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a87      	ldr	r2, [pc, #540]	; (800162c <RCC_GetClocksFreq+0x274>)
 8001410:	601a      	str	r2, [r3, #0]
      break;
 8001412:	e02c      	b.n	800146e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800141c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	3302      	adds	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4a7d      	ldr	r2, [pc, #500]	; (8001630 <RCC_GetClocksFreq+0x278>)
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e00d      	b.n	800145e <RCC_GetClocksFreq+0xa6>
=======
 8000b24:	b480      	push	{r7}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b4c:	4b91      	ldr	r3, [pc, #580]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d011      	beq.n	8000b80 <RCC_GetClocksFreq+0x5c>
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d837      	bhi.n	8000bd2 <RCC_GetClocksFreq+0xae>
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <RCC_GetClocksFreq+0x4c>
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d004      	beq.n	8000b78 <RCC_GetClocksFreq+0x54>
 8000b6e:	e030      	b.n	8000bd2 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a89      	ldr	r2, [pc, #548]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000b74:	601a      	str	r2, [r3, #0]
      break;
 8000b76:	e030      	b.n	8000bda <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a87      	ldr	r2, [pc, #540]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000b7c:	601a      	str	r2, [r3, #0]
      break;
 8000b7e:	e02c      	b.n	8000bda <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b80:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b88:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b8a:	4b82      	ldr	r3, [pc, #520]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b92:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3302      	adds	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4a7d      	ldr	r2, [pc, #500]	; (8000d9c <RCC_GetClocksFreq+0x278>)
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bac:	e00d      	b.n	8000bca <RCC_GetClocksFreq+0xa6>
>>>>>>> Stashed changes
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
<<<<<<< Updated upstream
 8001442:	4b79      	ldr	r3, [pc, #484]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800144e:	4a77      	ldr	r2, [pc, #476]	; (800162c <RCC_GetClocksFreq+0x274>)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fbb2 f2f3 	udiv	r2, r2, r3
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	601a      	str	r2, [r3, #0]
      break;
 8001464:	e003      	b.n	800146e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a70      	ldr	r2, [pc, #448]	; (800162c <RCC_GetClocksFreq+0x274>)
 800146a:	601a      	str	r2, [r3, #0]
      break;
 800146c:	bf00      	nop
=======
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000bba:	4a77      	ldr	r2, [pc, #476]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bce:	601a      	str	r2, [r3, #0]
      break;
 8000bd0:	e003      	b.n	8000bda <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a70      	ldr	r2, [pc, #448]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000bd6:	601a      	str	r2, [r3, #0]
      break;
 8000bd8:	bf00      	nop
>>>>>>> Stashed changes
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
<<<<<<< Updated upstream
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001476:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800147e:	4a6d      	ldr	r2, [pc, #436]	; (8001634 <RCC_GetClocksFreq+0x27c>)
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	40da      	lsrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001496:	4b64      	ldr	r3, [pc, #400]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800149e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80014a6:	4a63      	ldr	r2, [pc, #396]	; (8001634 <RCC_GetClocksFreq+0x27c>)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	40da      	lsrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80014be:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <RCC_GetClocksFreq+0x270>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014c6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	0adb      	lsrs	r3, r3, #11
 80014cc:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80014ce:	4a59      	ldr	r2, [pc, #356]	; (8001634 <RCC_GetClocksFreq+0x27c>)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	40da      	lsrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <RCC_GetClocksFreq+0x270>)
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80014ee:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80014f6:	4a50      	ldr	r2, [pc, #320]	; (8001638 <RCC_GetClocksFreq+0x280>)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fbb2 f2f3 	udiv	r2, r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	e003      	b.n	8001522 <RCC_GetClocksFreq+0x16a>
=======
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000be2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000bea:	4a6d      	ldr	r2, [pc, #436]	; (8000da0 <RCC_GetClocksFreq+0x27c>)
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	40da      	lsrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c02:	4b64      	ldr	r3, [pc, #400]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c0a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <RCC_GetClocksFreq+0x27c>)
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	40da      	lsrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000c2a:	4b5a      	ldr	r3, [pc, #360]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c32:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	0adb      	lsrs	r3, r3, #11
 8000c38:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000c3a:	4a59      	ldr	r2, [pc, #356]	; (8000da0 <RCC_GetClocksFreq+0x27c>)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	40da      	lsrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000c52:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c5a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <RCC_GetClocksFreq+0x280>)
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	e003      	b.n	8000c8e <RCC_GetClocksFreq+0x16a>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	611a      	str	r2, [r3, #16]
=======
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
<<<<<<< Updated upstream
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800152a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	0a5b      	lsrs	r3, r3, #9
 8001530:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001532:	4a41      	ldr	r2, [pc, #260]	; (8001638 <RCC_GetClocksFreq+0x280>)
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153a:	b29b      	uxth	r3, r3
 800153c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	e003      	b.n	800155e <RCC_GetClocksFreq+0x1a6>
=======
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c96:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c9e:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <RCC_GetClocksFreq+0x280>)
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	e003      	b.n	8000cca <RCC_GetClocksFreq+0x1a6>
>>>>>>> Stashed changes
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	615a      	str	r2, [r3, #20]
=======
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
<<<<<<< Updated upstream
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b10      	cmp	r3, #16
 8001568:	d003      	beq.n	8001572 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a2f      	ldr	r2, [pc, #188]	; (800162c <RCC_GetClocksFreq+0x274>)
 800156e:	619a      	str	r2, [r3, #24]
 8001570:	e003      	b.n	800157a <RCC_GetClocksFreq+0x1c2>
=======
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	2b10      	cmp	r3, #16
 8000cd4:	d003      	beq.n	8000cde <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	e003      	b.n	8000ce6 <RCC_GetClocksFreq+0x1c2>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
=======
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
<<<<<<< Updated upstream
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <RCC_GetClocksFreq+0x270>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b20      	cmp	r3, #32
 8001584:	d003      	beq.n	800158e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a28      	ldr	r2, [pc, #160]	; (800162c <RCC_GetClocksFreq+0x274>)
 800158a:	61da      	str	r2, [r3, #28]
 800158c:	e003      	b.n	8001596 <RCC_GetClocksFreq+0x1de>
=======
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	2b20      	cmp	r3, #32
 8000cf0:	d003      	beq.n	8000cfa <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a28      	ldr	r2, [pc, #160]	; (8000d98 <RCC_GetClocksFreq+0x274>)
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	e003      	b.n	8000d02 <RCC_GetClocksFreq+0x1de>
>>>>>>> Stashed changes
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
<<<<<<< Updated upstream
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	61da      	str	r2, [r3, #28]
=======
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a2:	d10d      	bne.n	80015c0 <RCC_GetClocksFreq+0x208>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d108      	bne.n	80015c0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d104      	bne.n	80015c0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	005a      	lsls	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	621a      	str	r2, [r3, #32]
 80015be:	e003      	b.n	80015c8 <RCC_GetClocksFreq+0x210>
=======
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0e:	d10d      	bne.n	8000d2c <RCC_GetClocksFreq+0x208>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d108      	bne.n	8000d2c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d104      	bne.n	8000d2c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	005a      	lsls	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	621a      	str	r2, [r3, #32]
 8000d2a:	e003      	b.n	8000d34 <RCC_GetClocksFreq+0x210>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	621a      	str	r2, [r3, #32]
=======
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
<<<<<<< Updated upstream
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <RCC_GetClocksFreq+0x270>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d4:	d10d      	bne.n	80015f2 <RCC_GetClocksFreq+0x23a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	429a      	cmp	r2, r3
 80015de:	d108      	bne.n	80015f2 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d104      	bne.n	80015f2 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	005a      	lsls	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24
 80015f0:	e003      	b.n	80015fa <RCC_GetClocksFreq+0x242>
=======
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d40:	d10d      	bne.n	8000d5e <RCC_GetClocksFreq+0x23a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d108      	bne.n	8000d5e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d104      	bne.n	8000d5e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	005a      	lsls	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d5c:	e003      	b.n	8000d66 <RCC_GetClocksFreq+0x242>
>>>>>>> Stashed changes
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
<<<<<<< Updated upstream
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
<<<<<<< Updated upstream
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <RCC_GetClocksFreq+0x270>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
 800160e:	e029      	b.n	8001664 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <RCC_GetClocksFreq+0x270>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10f      	bne.n	800163c <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
 8001624:	e01e      	b.n	8001664 <RCC_GetClocksFreq+0x2ac>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	007a1200 	.word	0x007a1200
 8001630:	003d0900 	.word	0x003d0900
 8001634:	20000000 	.word	0x20000000
 8001638:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d104      	bne.n	8001652 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
 8001650:	e008      	b.n	8001664 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001652:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b03      	cmp	r3, #3
 800165c:	d102      	bne.n	8001664 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a5e      	ldr	r2, [pc, #376]	; (80017dc <RCC_GetClocksFreq+0x424>)
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
 8000d7a:	e029      	b.n	8000dd0 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <RCC_GetClocksFreq+0x270>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10f      	bne.n	8000da8 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d90:	e01e      	b.n	8000dd0 <RCC_GetClocksFreq+0x2ac>
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	007a1200 	.word	0x007a1200
 8000d9c:	003d0900 	.word	0x003d0900
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000da8:	4b66      	ldr	r3, [pc, #408]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d104      	bne.n	8000dbe <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
 8000dbc:	e008      	b.n	8000dd0 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000dbe:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d102      	bne.n	8000dd0 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a5e      	ldr	r2, [pc, #376]	; (8000f48 <RCC_GetClocksFreq+0x424>)
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
<<<<<<< Updated upstream
 8001664:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
 8001678:	e021      	b.n	80016be <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800167a:	4b57      	ldr	r3, [pc, #348]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d104      	bne.n	8001692 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001690:	e015      	b.n	80016be <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800169e:	d104      	bne.n	80016aa <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a8:	e009      	b.n	80016be <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80016aa:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80016b6:	d102      	bne.n	80016be <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a48      	ldr	r2, [pc, #288]	; (80017dc <RCC_GetClocksFreq+0x424>)
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8000dd0:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d104      	bne.n	8000de6 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de4:	e021      	b.n	8000e2a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d104      	bne.n	8000dfe <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfc:	e015      	b.n	8000e2a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000dfe:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e0a:	d104      	bne.n	8000e16 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e14:	e009      	b.n	8000e2a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000e16:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000e22:	d102      	bne.n	8000e2a <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <RCC_GetClocksFreq+0x424>)
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
<<<<<<< Updated upstream
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
 80016d2:	e021      	b.n	8001718 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80016d4:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80016dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016e0:	d104      	bne.n	80016ec <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ea:	e015      	b.n	8001718 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80016ec:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80016f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016f8:	d104      	bne.n	8001704 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
 8001702:	e009      	b.n	8001718 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800170c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001710:	d102      	bne.n	8001718 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a31      	ldr	r2, [pc, #196]	; (80017dc <RCC_GetClocksFreq+0x424>)
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8000e2a:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3e:	e021      	b.n	8000e84 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e4c:	d104      	bne.n	8000e58 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
 8000e56:	e015      	b.n	8000e84 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e64:	d104      	bne.n	8000e70 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6e:	e009      	b.n	8000e84 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e7c:	d102      	bne.n	8000e84 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <RCC_GetClocksFreq+0x424>)
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
<<<<<<< Updated upstream
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
 800172c:	e021      	b.n	8001772 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173a:	d104      	bne.n	8001746 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
 8001744:	e015      	b.n	8001772 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800174e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001752:	d104      	bne.n	800175e <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
 800175c:	e009      	b.n	8001772 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800176a:	d102      	bne.n	8001772 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <RCC_GetClocksFreq+0x424>)
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d104      	bne.n	8000e9a <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
 8000e98:	e021      	b.n	8000ede <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ea6:	d104      	bne.n	8000eb2 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb0:	e015      	b.n	8000ede <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ebe:	d104      	bne.n	8000eca <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec8:	e009      	b.n	8000ede <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000ed6:	d102      	bne.n	8000ede <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <RCC_GetClocksFreq+0x424>)
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
<<<<<<< Updated upstream
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
<<<<<<< Updated upstream
 8001786:	e021      	b.n	80017cc <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001794:	d104      	bne.n	80017a0 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800179e:	e015      	b.n	80017cc <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017ac:	d104      	bne.n	80017b8 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017b6:	e009      	b.n	80017cc <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <RCC_GetClocksFreq+0x420>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80017c4:	d102      	bne.n	80017cc <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <RCC_GetClocksFreq+0x424>)
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017cc:	bf00      	nop
 80017ce:	372c      	adds	r7, #44	; 0x2c
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <USART_SendData>:
=======
 8000ef2:	e021      	b.n	8000f38 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f00:	d104      	bne.n	8000f0c <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f0a:	e015      	b.n	8000f38 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000f18:	d104      	bne.n	8000f24 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f22:	e009      	b.n	8000f38 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <RCC_GetClocksFreq+0x420>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000f30:	d102      	bne.n	8000f38 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <RCC_GetClocksFreq+0x424>)
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f38:	bf00      	nop
 8000f3a:	372c      	adds	r7, #44	; 0x2c
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	007a1200 	.word	0x007a1200

08000f4c <USART_SendData>:
>>>>>>> Stashed changes
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
<<<<<<< Updated upstream
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
=======
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
<<<<<<< Updated upstream
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <USART_ITConfig>:
=======
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <USART_ITConfig>:
>>>>>>> Stashed changes
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
<<<<<<< Updated upstream
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
=======
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
<<<<<<< Updated upstream
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	b29b      	uxth	r3, r3
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29b      	uxth	r3, r3
 800182e:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001836:	2201      	movs	r2, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d103      	bne.n	800184e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	e005      	b.n	800185a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d102      	bne.n	800185a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3308      	adds	r3, #8
 8001858:	61fb      	str	r3, [r7, #28]
=======
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d103      	bne.n	8000fba <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	e005      	b.n	8000fc6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d102      	bne.n	8000fc6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
<<<<<<< Updated upstream
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
=======
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
<<<<<<< Updated upstream
 800186c:	e006      	b.n	800187c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43da      	mvns	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	3724      	adds	r7, #36	; 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <USART_GetFlagStatus>:
=======
 8000fd8:	e006      	b.n	8000fe8 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	3724      	adds	r7, #36	; 0x24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <USART_GetFlagStatus>:
>>>>>>> Stashed changes
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
<<<<<<< Updated upstream
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
=======
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
<<<<<<< Updated upstream
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e001      	b.n	80018ac <USART_GetFlagStatus+0x24>
=======
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e001      	b.n	8001018 <USART_GetFlagStatus+0x24>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <USART_GetITStatus>:
=======
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <USART_GetITStatus>:
>>>>>>> Stashed changes
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
<<<<<<< Updated upstream
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	74fb      	strb	r3, [r7, #19]
=======
 8001026:	b480      	push	{r7}
 8001028:	b087      	sub	sp, #28
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	74fb      	strb	r3, [r7, #19]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
<<<<<<< Updated upstream
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80018e4:	2201      	movs	r2, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4013      	ands	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e00d      	b.n	800191c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d105      	bne.n	8001912 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e004      	b.n	800191c <USART_GetITStatus+0x62>
=======
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001050:	2201      	movs	r2, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4013      	ands	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e00d      	b.n	8001088 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d105      	bne.n	800107e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e004      	b.n	8001088 <USART_GetITStatus+0x62>
>>>>>>> Stashed changes
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
<<<<<<< Updated upstream
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001922:	2201      	movs	r2, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <USART_GetITStatus+0x8e>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	74fb      	strb	r3, [r7, #19]
 8001946:	e001      	b.n	800194c <USART_GetITStatus+0x92>
=======
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	0c1b      	lsrs	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800108e:	2201      	movs	r2, #1
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <USART_GetITStatus+0x8e>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80010ae:	2301      	movs	r3, #1
 80010b0:	74fb      	strb	r3, [r7, #19]
 80010b2:	e001      	b.n	80010b8 <USART_GetITStatus+0x92>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = RESET;
<<<<<<< Updated upstream
 8001948:	2300      	movs	r3, #0
 800194a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800194c:	7cfb      	ldrb	r3, [r7, #19]
}
 800194e:	4618      	mov	r0, r3
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <NVIC_EnableIRQ>:
=======
 80010b4:	2300      	movs	r3, #0
 80010b6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <NVIC_EnableIRQ>:
>>>>>>> Stashed changes
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f103 	lsl.w	r1, r2, r3
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <NVIC_EnableIRQ+0x30>)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <uart_get_char>:
=======
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	2201      	movs	r2, #1
 80010da:	fa02 f103 	lsl.w	r1, r2, r3
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <NVIC_EnableIRQ+0x30>)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <uart_get_char>:
>>>>>>> Stashed changes
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
<<<<<<< Updated upstream
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <uart_get_char+0x48>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d011      	beq.n	80019c8 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <uart_get_char+0x4c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	b2d1      	uxtb	r1, r2
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <uart_get_char+0x4c>)
 80019b0:	7011      	strb	r1, [r2, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <uart_get_char+0x50>)
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <uart_get_char+0x48>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <uart_get_char+0x48>)
 80019c6:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200001b2 	.word	0x200001b2
 80019dc:	200001b1 	.word	0x200001b1
 80019e0:	200000b0 	.word	0x200000b0

080019e4 <uart_put_char>:

void uart_put_char(uint8_t c) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <uart_put_char+0x30>)
 80019f6:	f7ff fef3 	bl	80017e0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80019fa:	bf00      	nop
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <uart_put_char+0x30>)
 8001a00:	f7ff ff42 	bl	8001888 <USART_GetFlagStatus>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f8      	beq.n	80019fc <uart_put_char+0x18>
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40004400 	.word	0x40004400

08001a18 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e012      	b.n	8001a52 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b0a      	cmp	r3, #10
 8001a36:	d102      	bne.n	8001a3e <_write_r+0x26>
            uart_put_char('\r');
 8001a38:	200d      	movs	r0, #13
 8001a3a:	f7ff ffd3 	bl	80019e4 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffcc 	bl	80019e4 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbe8      	blt.n	8001a2c <_write_r+0x14>
    }

    return len;
 8001a5a:	683b      	ldr	r3, [r7, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001a68:	4915      	ldr	r1, [pc, #84]	; (8001ac0 <USART2_IRQHandler+0x5c>)
 8001a6a:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <USART2_IRQHandler+0x60>)
 8001a6c:	f7ff ff25 	bl	80018ba <USART_GetITStatus>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d021      	beq.n	8001aba <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <USART2_IRQHandler+0x60>)
 8001a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <USART2_IRQHandler+0x64>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	b2d0      	uxtb	r0, r2
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <USART2_IRQHandler+0x64>)
 8001a88:	7010      	strb	r0, [r2, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	b2c9      	uxtb	r1, r1
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <USART2_IRQHandler+0x68>)
 8001a90:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <USART2_IRQHandler+0x6c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d107      	bne.n	8001aac <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <USART2_IRQHandler+0x70>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <USART2_IRQHandler+0x70>)
 8001aa8:	701a      	strb	r2, [r3, #0]
=======
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <uart_get_char+0x48>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d011      	beq.n	8001134 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <uart_get_char+0x4c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	b2d1      	uxtb	r1, r2
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <uart_get_char+0x4c>)
 800111c:	7011      	strb	r1, [r2, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <uart_get_char+0x50>)
 8001122:	5c9b      	ldrb	r3, [r3, r2]
 8001124:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <uart_get_char+0x48>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	3b01      	subs	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <uart_get_char+0x48>)
 8001132:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001134:	79fb      	ldrb	r3, [r7, #7]
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200001ae 	.word	0x200001ae
 8001148:	200001ad 	.word	0x200001ad
 800114c:	200000ac 	.word	0x200000ac

08001150 <uart_put_char>:

void uart_put_char(uint8_t c) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <uart_put_char+0x30>)
 8001162:	f7ff fef3 	bl	8000f4c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001166:	bf00      	nop
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <uart_put_char+0x30>)
 800116c:	f7ff ff42 	bl	8000ff4 <USART_GetFlagStatus>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f8      	beq.n	8001168 <uart_put_char+0x18>
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40004400 	.word	0x40004400

08001184 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e012      	b.n	80011be <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d102      	bne.n	80011aa <_write_r+0x26>
            uart_put_char('\r');
 80011a4:	200d      	movs	r0, #13
 80011a6:	f7ff ffd3 	bl	8001150 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffcc 	bl	8001150 <uart_put_char>
    for (n = 0; n < len; n++) {
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbe8      	blt.n	8001198 <_write_r+0x14>
    }

    return len;
 80011c6:	683b      	ldr	r3, [r7, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <USART2_IRQHandler+0x5c>)
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <USART2_IRQHandler+0x60>)
 80011d8:	f7ff ff25 	bl	8001026 <USART_GetITStatus>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d021      	beq.n	8001226 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <USART2_IRQHandler+0x60>)
 80011e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011e6:	b299      	uxth	r1, r3
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <USART2_IRQHandler+0x64>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	b2d0      	uxtb	r0, r2
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <USART2_IRQHandler+0x64>)
 80011f4:	7010      	strb	r0, [r2, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <USART2_IRQHandler+0x68>)
 80011fc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <USART2_IRQHandler+0x6c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d107      	bne.n	8001218 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <USART2_IRQHandler+0x70>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3301      	adds	r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <USART2_IRQHandler+0x70>)
 8001214:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        } else {
            UART_COUNT++;
        }
    }
}
<<<<<<< Updated upstream
 8001aaa:	e006      	b.n	8001aba <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <USART2_IRQHandler+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <USART2_IRQHandler+0x6c>)
 8001ab8:	701a      	strb	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	00050105 	.word	0x00050105
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	200001b0 	.word	0x200001b0
 8001acc:	200000b0 	.word	0x200000b0
 8001ad0:	200001b2 	.word	0x200001b2
 8001ad4:	200001b1 	.word	0x200001b1

08001ad8 <uart_init>:
=======
 8001216:	e006      	b.n	8001226 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <USART2_IRQHandler+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <USART2_IRQHandler+0x6c>)
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	00050105 	.word	0x00050105
 8001230:	40004400 	.word	0x40004400
 8001234:	200001ac 	.word	0x200001ac
 8001238:	200000ac 	.word	0x200000ac
 800123c:	200001ae 	.word	0x200001ae
 8001240:	200001ad 	.word	0x200001ad

08001244 <uart_init>:
>>>>>>> Stashed changes

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
<<<<<<< Updated upstream
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	; 0x50
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
<<<<<<< Updated upstream
 8001ae0:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <uart_init+0x224>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 ffb5 	bl	8005a58 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <uart_init+0x224>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 ffae 	bl	8005a58 <setbuf>
=======
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <uart_init+0x224>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fea5 	bl	8006780 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <uart_init+0x224>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fe9e 	bl	8006780 <setbuf>
>>>>>>> Stashed changes

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <uart_init+0x228>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <uart_init+0x228>)
 8001b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b06:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001b08:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <uart_init+0x228>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a7c      	ldr	r2, [pc, #496]	; (8001d00 <uart_init+0x228>)
 8001b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b12:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001b14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b22:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001b24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b32:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b42:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b4e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001b52:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b62:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b6e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001b72:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b78:	889b      	ldrh	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b80:	f023 030c 	bic.w	r3, r3, #12
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001b88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b90:	8892      	ldrh	r2, [r2, #4]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001b96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bb0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001bb4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bd0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001bd4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <uart_init+0x22c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <uart_init+0x22c>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <uart_init+0x22c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <uart_init+0x22c>)
 8001be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bec:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <uart_init+0x22c>)
 8001bf0:	4a44      	ldr	r2, [pc, #272]	; (8001d04 <uart_init+0x22c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <uart_init+0x22c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <uart_init+0x22c>)
 8001bfc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c00:	f023 030c 	bic.w	r3, r3, #12
 8001c04:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <uart_init+0x22c>)
 8001c08:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <uart_init+0x22c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <uart_init+0x22c>)
 8001c10:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <uart_init+0x22c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <uart_init+0x22c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <uart_init+0x22c>)
 8001c1c:	f043 030c 	orr.w	r3, r3, #12
 8001c20:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <uart_init+0x22c>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <uart_init+0x22c>)
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001c2e:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <uart_init+0x22c>)
 8001c30:	4a34      	ldr	r2, [pc, #208]	; (8001d04 <uart_init+0x22c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbb6 	bl	80013b8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <uart_init+0x22c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	005a      	lsls	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	fb01 f202 	mul.w	r2, r1, r2
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c7c:	e00d      	b.n	8001c9a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	fb01 f202 	mul.w	r2, r1, r2
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <uart_init+0x1d2>
        divider++;
 8001ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <uart_init+0x22c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cc2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <uart_init+0x22c>)
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <uart_init+0x22c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <uart_init+0x22c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4908      	ldr	r1, [pc, #32]	; (8001d08 <uart_init+0x230>)
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <uart_init+0x22c>)
 8001ce8:	f7ff fd8c 	bl	8001804 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001cec:	2026      	movs	r0, #38	; 0x26
 8001cee:	f7ff fe35 	bl	800195c <NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3750      	adds	r7, #80	; 0x50
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000002c 	.word	0x2000002c
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40004400 	.word	0x40004400
 8001d08:	00050105 	.word	0x00050105

08001d0c <fgcolor>:
=======
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800124c:	4b86      	ldr	r3, [pc, #536]	; (8001468 <uart_init+0x224>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fd79 	bl	8005d4c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800125a:	4b83      	ldr	r3, [pc, #524]	; (8001468 <uart_init+0x224>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fd72 	bl	8005d4c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <uart_init+0x228>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a7f      	ldr	r2, [pc, #508]	; (800146c <uart_init+0x228>)
 800126e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001272:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001274:	4b7d      	ldr	r3, [pc, #500]	; (800146c <uart_init+0x228>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a7c      	ldr	r2, [pc, #496]	; (800146c <uart_init+0x228>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800128a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800128e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80012a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80012ae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80012b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ba:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80012be:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80012c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ce:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80012d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012da:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012de:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80012e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ec:	f023 030c 	bic.w	r3, r3, #12
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012fc:	8892      	ldrh	r2, [r2, #4]
 80012fe:	b292      	uxth	r2, r2
 8001300:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800130c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001310:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800131c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001320:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001322:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800132c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001330:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001340:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001342:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <uart_init+0x22c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <uart_init+0x22c>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <uart_init+0x22c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a47      	ldr	r2, [pc, #284]	; (8001470 <uart_init+0x22c>)
 8001354:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001358:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <uart_init+0x22c>)
 800135c:	4a44      	ldr	r2, [pc, #272]	; (8001470 <uart_init+0x22c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <uart_init+0x22c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a42      	ldr	r2, [pc, #264]	; (8001470 <uart_init+0x22c>)
 8001368:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800136c:	f023 030c 	bic.w	r3, r3, #12
 8001370:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <uart_init+0x22c>)
 8001374:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <uart_init+0x22c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <uart_init+0x22c>)
 800137c:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <uart_init+0x22c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <uart_init+0x22c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a3a      	ldr	r2, [pc, #232]	; (8001470 <uart_init+0x22c>)
 8001388:	f043 030c 	orr.w	r3, r3, #12
 800138c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <uart_init+0x22c>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a37      	ldr	r2, [pc, #220]	; (8001470 <uart_init+0x22c>)
 8001394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001398:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <uart_init+0x22c>)
 800139c:	4a34      	ldr	r2, [pc, #208]	; (8001470 <uart_init+0x22c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013a6:	2300      	movs	r3, #0
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
 80013aa:	2300      	movs	r3, #0
 80013ac:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fbb6 	bl	8000b24 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <uart_init+0x22c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d010      	beq.n	80013ea <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	005a      	lsls	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80013d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	fbb3 f2f2 	udiv	r2, r3, r2
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fb01 f202 	mul.w	r2, r1, r2
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80013e8:	e00d      	b.n	8001406 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80013ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80013f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800140c:	429a      	cmp	r2, r3
 800140e:	d302      	bcc.n	8001416 <uart_init+0x1d2>
        divider++;
 8001410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001412:	3301      	adds	r3, #1
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <uart_init+0x22c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800142c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800142e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001432:	4013      	ands	r3, r2
 8001434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001436:	4313      	orrs	r3, r2
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <uart_init+0x22c>)
 800143c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800143e:	b292      	uxth	r2, r2
 8001440:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <uart_init+0x22c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <uart_init+0x22c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800144e:	2201      	movs	r2, #1
 8001450:	4908      	ldr	r1, [pc, #32]	; (8001474 <uart_init+0x230>)
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <uart_init+0x22c>)
 8001454:	f7ff fd8c 	bl	8000f70 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001458:	2026      	movs	r0, #38	; 0x26
 800145a:	f7ff fe35 	bl	80010c8 <NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3750      	adds	r7, #80	; 0x50
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000002c 	.word	0x2000002c
 800146c:	40021000 	.word	0x40021000
 8001470:	40004400 	.word	0x40004400
 8001474:	00050105 	.word	0x00050105

08001478 <fgcolor>:
>>>>>>> Stashed changes
 */

#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
<<<<<<< Updated upstream
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
=======
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
<<<<<<< Updated upstream
 8001d16:	2316      	movs	r3, #22
 8001d18:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b07      	cmp	r3, #7
 8001d1e:	d904      	bls.n	8001d2a <fgcolor+0x1e>
	  type = 1;                // bold text
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	3b08      	subs	r3, #8
 8001d28:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
<<<<<<< Updated upstream
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	331e      	adds	r3, #30
 8001d30:	211b      	movs	r1, #27
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <fgcolor+0x34>)
 8001d34:	f003 fd6e 	bl	8005814 <iprintf>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08006c44 	.word	0x08006c44
=======
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	331e      	adds	r3, #30
 8001c78:	211b      	movs	r1, #27
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <fgcolor+0x34>)
 8001c7c:	f004 fc5e 	bl	800653c <iprintf>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0800779c 	.word	0x0800779c
>>>>>>> Stashed changes

08001d44 <clrscr>:
=======
 8001482:	2316      	movs	r3, #22
 8001484:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d904      	bls.n	8001496 <fgcolor+0x1e>
	  type = 1;                // bold text
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	3b08      	subs	r3, #8
 8001494:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	331e      	adds	r3, #30
 800149c:	211b      	movs	r1, #27
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <fgcolor+0x34>)
 80014a0:	f004 fb32 	bl	8005b08 <iprintf>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08006d68 	.word	0x08006d68

080014b0 <clrscr>:
>>>>>>> Stashed changes
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){ //clears screen
<<<<<<< Updated upstream
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
<<<<<<< Updated upstream
 8001d48:	211b      	movs	r1, #27
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <clrscr+0x18>)
 8001d4c:	f003 fd62 	bl	8005814 <iprintf>
    printf("%c[J", ESC);
 8001d50:	211b      	movs	r1, #27
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <clrscr+0x1c>)
 8001d54:	f003 fd5e 	bl	8005814 <iprintf>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08006c70 	.word	0x08006c70
 8001d60:	08006c78 	.word	0x08006c78
=======
 8001c90:	211b      	movs	r1, #27
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <clrscr+0x18>)
 8001c94:	f004 fc52 	bl	800653c <iprintf>
    printf("%c[J", ESC);
 8001c98:	211b      	movs	r1, #27
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <clrscr+0x1c>)
 8001c9c:	f004 fc4e 	bl	800653c <iprintf>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	080077c8 	.word	0x080077c8
 8001ca8:	080077d0 	.word	0x080077d0
>>>>>>> Stashed changes

08001d64 <gotoxy>:
=======
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    printf("%c[H", ESC);
 80014b4:	211b      	movs	r1, #27
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <clrscr+0x18>)
 80014b8:	f004 fb26 	bl	8005b08 <iprintf>
    printf("%c[J", ESC);
 80014bc:	211b      	movs	r1, #27
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <clrscr+0x1c>)
 80014c0:	f004 fb22 	bl	8005b08 <iprintf>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08006d94 	.word	0x08006d94
 80014cc:	08006d9c 	.word	0x08006d9c

080014d0 <gotoxy>:
>>>>>>> Stashed changes
//    printf("%c[1F", ESC); //move to start of line
    printf("%c[2K", ESC); //Clears line
}

//Sends cursor to the given coordinate
void gotoxy(int x, int y){
<<<<<<< Updated upstream
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
<<<<<<< Updated upstream
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	211b      	movs	r1, #27
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <gotoxy+0x20>)
 8001d76:	f003 fd4d 	bl	8005814 <iprintf>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08006c88 	.word	0x08006c88
=======
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	211b      	movs	r1, #27
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <gotoxy+0x20>)
 8001cbe:	f004 fc3d 	bl	800653c <iprintf>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	080077e0 	.word	0x080077e0
>>>>>>> Stashed changes

08001d88 <drawBox>:
=======
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    printf("%c[%d;%dH", ESC, y, x);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	211b      	movs	r1, #27
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <gotoxy+0x20>)
 80014e2:	f004 fb11 	bl	8005b08 <iprintf>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08006dac 	.word	0x08006dac

080014f4 <drawBox>:
>>>>>>> Stashed changes
    }
}



void drawBox(int x1, int y1, int x2, int y2, int style) { //style: 0=thin, 1=bold
<<<<<<< Updated upstream
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d15e      	bne.n	8001e5a <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001da0:	e019      	b.n	8001dd6 <drawBox+0x4e>
			 gotoxy(x1,y);
 8001da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff ffdd 	bl	8001d64 <gotoxy>
			 if (y==y1){
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d103      	bne.n	8001dba <drawBox+0x32>
				printf("%c", 201);
<<<<<<< Updated upstream
 8001db2:	20c9      	movs	r0, #201	; 0xc9
 8001db4:	f003 fd46 	bl	8005844 <putchar>
 8001db8:	e00a      	b.n	8001dd0 <drawBox+0x48>
=======
 8001cfa:	20c9      	movs	r0, #201	; 0xc9
 8001cfc:	f004 fc36 	bl	800656c <putchar>
 8001d00:	e00a      	b.n	8001d18 <drawBox+0x48>
>>>>>>> Stashed changes
			 }
			 else if(y==y2){
 8001dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d103      	bne.n	8001dca <drawBox+0x42>
				printf("%c", 200);
<<<<<<< Updated upstream
 8001dc2:	20c8      	movs	r0, #200	; 0xc8
 8001dc4:	f003 fd3e 	bl	8005844 <putchar>
 8001dc8:	e002      	b.n	8001dd0 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001dca:	20ba      	movs	r0, #186	; 0xba
 8001dcc:	f003 fd3a 	bl	8005844 <putchar>
=======
 8001d0a:	20c8      	movs	r0, #200	; 0xc8
 8001d0c:	f004 fc2e 	bl	800656c <putchar>
 8001d10:	e002      	b.n	8001d18 <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001d12:	20ba      	movs	r0, #186	; 0xba
 8001d14:	f004 fc2a 	bl	800656c <putchar>
>>>>>>> Stashed changes
		 for(int y = y1; y <= y2; y++){
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dde1      	ble.n	8001da2 <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	e014      	b.n	8001e0e <drawBox+0x86>
   			 if(x!=x1){
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d00d      	beq.n	8001e08 <drawBox+0x80>
				 gotoxy(x,y1);
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6a38      	ldr	r0, [r7, #32]
 8001df0:	f7ff ffb8 	bl	8001d64 <gotoxy>
				 printf("%c", 205);
<<<<<<< Updated upstream
 8001df4:	20cd      	movs	r0, #205	; 0xcd
 8001df6:	f003 fd25 	bl	8005844 <putchar>
=======
 8001d3c:	20cd      	movs	r0, #205	; 0xcd
 8001d3e:	f004 fc15 	bl	800656c <putchar>
>>>>>>> Stashed changes
				 gotoxy(x,y2);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f7ff ffb1 	bl	8001d64 <gotoxy>
				 printf("%c", 205);
<<<<<<< Updated upstream
 8001e02:	20cd      	movs	r0, #205	; 0xcd
 8001e04:	f003 fd1e 	bl	8005844 <putchar>
=======
 8001d4a:	20cd      	movs	r0, #205	; 0xcd
 8001d4c:	f004 fc0e 	bl	800656c <putchar>
>>>>>>> Stashed changes
   		 for(int x = x1; x <= x2; x++){
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6a3a      	ldr	r2, [r7, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dde6      	ble.n	8001de4 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e019      	b.n	8001e50 <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001e1c:	69f9      	ldr	r1, [r7, #28]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa0 	bl	8001d64 <gotoxy>
   			 if (y==y1){
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d103      	bne.n	8001e34 <drawBox+0xac>
				printf("%c", 187);
<<<<<<< Updated upstream
 8001e2c:	20bb      	movs	r0, #187	; 0xbb
 8001e2e:	f003 fd09 	bl	8005844 <putchar>
 8001e32:	e00a      	b.n	8001e4a <drawBox+0xc2>
=======
 8001d74:	20bb      	movs	r0, #187	; 0xbb
 8001d76:	f004 fbf9 	bl	800656c <putchar>
 8001d7a:	e00a      	b.n	8001d92 <drawBox+0xc2>
>>>>>>> Stashed changes
			 }
			 else if(y==y2){
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d103      	bne.n	8001e44 <drawBox+0xbc>
				printf("%c", 188);
<<<<<<< Updated upstream
 8001e3c:	20bc      	movs	r0, #188	; 0xbc
 8001e3e:	f003 fd01 	bl	8005844 <putchar>
 8001e42:	e002      	b.n	8001e4a <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001e44:	20ba      	movs	r0, #186	; 0xba
 8001e46:	f003 fcfd 	bl	8005844 <putchar>
=======
 8001d84:	20bc      	movs	r0, #188	; 0xbc
 8001d86:	f004 fbf1 	bl	800656c <putchar>
 8001d8a:	e002      	b.n	8001d92 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 8001d8c:	20ba      	movs	r0, #186	; 0xba
 8001d8e:	f004 fbed 	bl	800656c <putchar>
>>>>>>> Stashed changes
   		 for(int y = y1; y <= y2; y++){
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dde1      	ble.n	8001e1c <drawBox+0x94>
=======
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
	if(style == 1) {
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	2b01      	cmp	r3, #1
 8001506:	d15e      	bne.n	80015c6 <drawBox+0xd2>
		 for(int y = y1; y <= y2; y++){
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
 800150c:	e019      	b.n	8001542 <drawBox+0x4e>
			 gotoxy(x1,y);
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ffdd 	bl	80014d0 <gotoxy>
			 if (y==y1){
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	429a      	cmp	r2, r3
 800151c:	d103      	bne.n	8001526 <drawBox+0x32>
				printf("%c", 201);
 800151e:	20c9      	movs	r0, #201	; 0xc9
 8001520:	f004 fb0a 	bl	8005b38 <putchar>
 8001524:	e00a      	b.n	800153c <drawBox+0x48>
			 }
			 else if(y==y2){
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d103      	bne.n	8001536 <drawBox+0x42>
				printf("%c", 200);
 800152e:	20c8      	movs	r0, #200	; 0xc8
 8001530:	f004 fb02 	bl	8005b38 <putchar>
 8001534:	e002      	b.n	800153c <drawBox+0x48>
			 }
			 else {
				printf("%c", 186);
 8001536:	20ba      	movs	r0, #186	; 0xba
 8001538:	f004 fafe 	bl	8005b38 <putchar>
		 for(int y = y1; y <= y2; y++){
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	3301      	adds	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	dde1      	ble.n	800150e <drawBox+0x1a>
			 }
		   		 }
   		 for(int x = x1; x <= x2; x++){
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	e014      	b.n	800157a <drawBox+0x86>
   			 if(x!=x1){
 8001550:	6a3a      	ldr	r2, [r7, #32]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d00d      	beq.n	8001574 <drawBox+0x80>
				 gotoxy(x,y1);
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6a38      	ldr	r0, [r7, #32]
 800155c:	f7ff ffb8 	bl	80014d0 <gotoxy>
				 printf("%c", 205);
 8001560:	20cd      	movs	r0, #205	; 0xcd
 8001562:	f004 fae9 	bl	8005b38 <putchar>
				 gotoxy(x,y2);
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff ffb1 	bl	80014d0 <gotoxy>
				 printf("%c", 205);
 800156e:	20cd      	movs	r0, #205	; 0xcd
 8001570:	f004 fae2 	bl	8005b38 <putchar>
   		 for(int x = x1; x <= x2; x++){
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	3301      	adds	r3, #1
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dde6      	ble.n	8001550 <drawBox+0x5c>
   			 }
   		 }
   		 for(int y = y1; y <= y2; y++){
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e019      	b.n	80015bc <drawBox+0xc8>
   			 gotoxy(x2,y);
 8001588:	69f9      	ldr	r1, [r7, #28]
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffa0 	bl	80014d0 <gotoxy>
   			 if (y==y1){
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	429a      	cmp	r2, r3
 8001596:	d103      	bne.n	80015a0 <drawBox+0xac>
				printf("%c", 187);
 8001598:	20bb      	movs	r0, #187	; 0xbb
 800159a:	f004 facd 	bl	8005b38 <putchar>
 800159e:	e00a      	b.n	80015b6 <drawBox+0xc2>
			 }
			 else if(y==y2){
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d103      	bne.n	80015b0 <drawBox+0xbc>
				printf("%c", 188);
 80015a8:	20bc      	movs	r0, #188	; 0xbc
 80015aa:	f004 fac5 	bl	8005b38 <putchar>
 80015ae:	e002      	b.n	80015b6 <drawBox+0xc2>
			 }
			 else {
				printf("%c", 186);
 80015b0:	20ba      	movs	r0, #186	; 0xba
 80015b2:	f004 fac1 	bl	8005b38 <putchar>
   		 for(int y = y1; y <= y2; y++){
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dde1      	ble.n	8001588 <drawBox+0x94>
>>>>>>> Stashed changes
			 else {
				printf("%c", 179);
			 }
		 }
	}
}
<<<<<<< Updated upstream
 8001e58:	e05d      	b.n	8001f16 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e019      	b.n	8001e94 <drawBox+0x10c>
			 gotoxy(x1,y);
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff ff7e 	bl	8001d64 <gotoxy>
			 if (y==y1){
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d103      	bne.n	8001e78 <drawBox+0xf0>
				printf("%c", 218);
<<<<<<< Updated upstream
 8001e70:	20da      	movs	r0, #218	; 0xda
 8001e72:	f003 fce7 	bl	8005844 <putchar>
 8001e76:	e00a      	b.n	8001e8e <drawBox+0x106>
=======
 8001db8:	20da      	movs	r0, #218	; 0xda
 8001dba:	f004 fbd7 	bl	800656c <putchar>
 8001dbe:	e00a      	b.n	8001dd6 <drawBox+0x106>
>>>>>>> Stashed changes
			 else if(y==y2){
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d103      	bne.n	8001e88 <drawBox+0x100>
				printf("%c", 192);
<<<<<<< Updated upstream
 8001e80:	20c0      	movs	r0, #192	; 0xc0
 8001e82:	f003 fcdf 	bl	8005844 <putchar>
 8001e86:	e002      	b.n	8001e8e <drawBox+0x106>
				printf("%c", 179);
 8001e88:	20b3      	movs	r0, #179	; 0xb3
 8001e8a:	f003 fcdb 	bl	8005844 <putchar>
=======
 8001dc8:	20c0      	movs	r0, #192	; 0xc0
 8001dca:	f004 fbcf 	bl	800656c <putchar>
 8001dce:	e002      	b.n	8001dd6 <drawBox+0x106>
				printf("%c", 179);
 8001dd0:	20b3      	movs	r0, #179	; 0xb3
 8001dd2:	f004 fbcb 	bl	800656c <putchar>
>>>>>>> Stashed changes
		for(int y = y1; y <= y2; y++){
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dde1      	ble.n	8001e60 <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e014      	b.n	8001ecc <drawBox+0x144>
			if(x!=x1){
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d00d      	beq.n	8001ec6 <drawBox+0x13e>
				 gotoxy(x,y1);
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f7ff ff59 	bl	8001d64 <gotoxy>
				 printf("%c", 196);
<<<<<<< Updated upstream
 8001eb2:	20c4      	movs	r0, #196	; 0xc4
 8001eb4:	f003 fcc6 	bl	8005844 <putchar>
=======
 8001dfa:	20c4      	movs	r0, #196	; 0xc4
 8001dfc:	f004 fbb6 	bl	800656c <putchar>
>>>>>>> Stashed changes
				 gotoxy(x,y2);
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff52 	bl	8001d64 <gotoxy>
				 printf("%c", 196);
<<<<<<< Updated upstream
 8001ec0:	20c4      	movs	r0, #196	; 0xc4
 8001ec2:	f003 fcbf 	bl	8005844 <putchar>
=======
 8001e08:	20c4      	movs	r0, #196	; 0xc4
 8001e0a:	f004 fbaf 	bl	800656c <putchar>
>>>>>>> Stashed changes
		for(int x = x1; x <= x2; x++){
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dde6      	ble.n	8001ea2 <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e019      	b.n	8001f0e <drawBox+0x186>
			 gotoxy(x2,y);
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff41 	bl	8001d64 <gotoxy>
			if (y==y1){
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d103      	bne.n	8001ef2 <drawBox+0x16a>
				printf("%c", 191);
<<<<<<< Updated upstream
 8001eea:	20bf      	movs	r0, #191	; 0xbf
 8001eec:	f003 fcaa 	bl	8005844 <putchar>
 8001ef0:	e00a      	b.n	8001f08 <drawBox+0x180>
=======
 8001e32:	20bf      	movs	r0, #191	; 0xbf
 8001e34:	f004 fb9a 	bl	800656c <putchar>
 8001e38:	e00a      	b.n	8001e50 <drawBox+0x180>
>>>>>>> Stashed changes
			 else if(y==y2){
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d103      	bne.n	8001f02 <drawBox+0x17a>
				printf("%c", 217);
<<<<<<< Updated upstream
 8001efa:	20d9      	movs	r0, #217	; 0xd9
 8001efc:	f003 fca2 	bl	8005844 <putchar>
 8001f00:	e002      	b.n	8001f08 <drawBox+0x180>
				printf("%c", 179);
 8001f02:	20b3      	movs	r0, #179	; 0xb3
 8001f04:	f003 fc9e 	bl	8005844 <putchar>
=======
 8001e42:	20d9      	movs	r0, #217	; 0xd9
 8001e44:	f004 fb92 	bl	800656c <putchar>
 8001e48:	e002      	b.n	8001e50 <drawBox+0x180>
				printf("%c", 179);
 8001e4a:	20b3      	movs	r0, #179	; 0xb3
 8001e4c:	f004 fb8e 	bl	800656c <putchar>
>>>>>>> Stashed changes
		for(int y = y1; y <= y2; y++){
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dde1      	ble.n	8001eda <drawBox+0x152>
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <updateBullets>:
=======
 80015c4:	e05d      	b.n	8001682 <drawBox+0x18e>
		for(int y = y1; y <= y2; y++){
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	e019      	b.n	8001600 <drawBox+0x10c>
			 gotoxy(x1,y);
 80015cc:	69b9      	ldr	r1, [r7, #24]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff ff7e 	bl	80014d0 <gotoxy>
			 if (y==y1){
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d103      	bne.n	80015e4 <drawBox+0xf0>
				printf("%c", 218);
 80015dc:	20da      	movs	r0, #218	; 0xda
 80015de:	f004 faab 	bl	8005b38 <putchar>
 80015e2:	e00a      	b.n	80015fa <drawBox+0x106>
			 else if(y==y2){
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d103      	bne.n	80015f4 <drawBox+0x100>
				printf("%c", 192);
 80015ec:	20c0      	movs	r0, #192	; 0xc0
 80015ee:	f004 faa3 	bl	8005b38 <putchar>
 80015f2:	e002      	b.n	80015fa <drawBox+0x106>
				printf("%c", 179);
 80015f4:	20b3      	movs	r0, #179	; 0xb3
 80015f6:	f004 fa9f 	bl	8005b38 <putchar>
		for(int y = y1; y <= y2; y++){
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	dde1      	ble.n	80015cc <drawBox+0xd8>
		for(int x = x1; x <= x2; x++){
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e014      	b.n	8001638 <drawBox+0x144>
			if(x!=x1){
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	429a      	cmp	r2, r3
 8001614:	d00d      	beq.n	8001632 <drawBox+0x13e>
				 gotoxy(x,y1);
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f7ff ff59 	bl	80014d0 <gotoxy>
				 printf("%c", 196);
 800161e:	20c4      	movs	r0, #196	; 0xc4
 8001620:	f004 fa8a 	bl	8005b38 <putchar>
				 gotoxy(x,y2);
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff52 	bl	80014d0 <gotoxy>
				 printf("%c", 196);
 800162c:	20c4      	movs	r0, #196	; 0xc4
 800162e:	f004 fa83 	bl	8005b38 <putchar>
		for(int x = x1; x <= x2; x++){
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dde6      	ble.n	800160e <drawBox+0x11a>
		for(int y = y1; y <= y2; y++){
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	e019      	b.n	800167a <drawBox+0x186>
			 gotoxy(x2,y);
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff41 	bl	80014d0 <gotoxy>
			if (y==y1){
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d103      	bne.n	800165e <drawBox+0x16a>
				printf("%c", 191);
 8001656:	20bf      	movs	r0, #191	; 0xbf
 8001658:	f004 fa6e 	bl	8005b38 <putchar>
 800165c:	e00a      	b.n	8001674 <drawBox+0x180>
			 else if(y==y2){
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d103      	bne.n	800166e <drawBox+0x17a>
				printf("%c", 217);
 8001666:	20d9      	movs	r0, #217	; 0xd9
 8001668:	f004 fa66 	bl	8005b38 <putchar>
 800166c:	e002      	b.n	8001674 <drawBox+0x180>
				printf("%c", 179);
 800166e:	20b3      	movs	r0, #179	; 0xb3
 8001670:	f004 fa62 	bl	8005b38 <putchar>
		for(int y = y1; y <= y2; y++){
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	3301      	adds	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	dde1      	ble.n	8001646 <drawBox+0x152>
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <updateBullets>:
>>>>>>> Stashed changes
 *
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "bullet.h"
void updateBullets(gameState_t* gameState){
<<<<<<< Updated upstream
 8001f1e:	b590      	push	{r4, r7, lr}
 8001f20:	b089      	sub	sp, #36	; 0x24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001f2c:	e06b      	b.n	8002006 <updateBullets+0xe8>
//		v = scaleVector(v, fpDivide(intToFp(1),vLength));
//		//v har nu længde 1
//		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
<<<<<<< Updated upstream
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7a1b      	ldrb	r3, [r3, #8]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 f837 	bl	8002fa8 <intToFp>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7a5b      	ldrb	r3, [r3, #9]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f82c 	bl	8002fa8 <intToFp>
 8001f50:	4602      	mov	r2, r0
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
		uint32_t vLength = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f8c4 	bl	80030ea <fpAbs>
 8001f62:	4604      	mov	r4, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 f8bf 	bl	80030ea <fpAbs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4423      	add	r3, r4
 8001f70:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 f84d 	bl	8003014 <fpMultiply>
 8001f7a:	61b8      	str	r0, [r7, #24]
		v = scaleVector(v, fpDivide(intToFp(1),vLength));
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f001 f813 	bl	8002fa8 <intToFp>
 8001f82:	4603      	mov	r3, r0
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f865 	bl	8003056 <fpDivide>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f107 0010 	add.w	r0, r7, #16
 8001f92:	f107 0210 	add.w	r2, r7, #16
 8001f96:	ca06      	ldmia	r2, {r1, r2}
 8001f98:	f001 f885 	bl	80030a6 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(vLength, vLength)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 f800 	bl	8002fa8 <intToFp>
 8001fa8:	4604      	mov	r4, r0
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	69b8      	ldr	r0, [r7, #24]
 8001fae:	f001 f831 	bl	8003014 <fpMultiply>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f001 f84d 	bl	8003056 <fpDivide>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f107 0008 	add.w	r0, r7, #8
 8001fc2:	f107 0210 	add.w	r2, r7, #16
 8001fc6:	ca06      	ldmia	r2, {r1, r2}
 8001fc8:	f001 f86d 	bl	80030a6 <scaleVector>
=======
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7a1b      	ldrb	r3, [r3, #8]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fa6c 	bl	800335a <intToFp>
 8001e82:	4602      	mov	r2, r0
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7a5b      	ldrb	r3, [r3, #9]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fa61 	bl	800335a <intToFp>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 faf9 	bl	800349c <fpAbs>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 faf4 	bl	800349c <fpAbs>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4423      	add	r3, r4
 8001eb8:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fa82 	bl	80033c6 <fpMultiply>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f001 fa46 	bl	800335a <intToFp>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f001 fa96 	bl	8003408 <fpDivide>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f107 0014 	add.w	r0, r7, #20
 8001ee2:	f107 0214 	add.w	r2, r7, #20
 8001ee6:	ca06      	ldmia	r2, {r1, r2}
 8001ee8:	f001 fab6 	bl	8003458 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7a9b      	ldrb	r3, [r3, #10]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fa31 	bl	800335a <intToFp>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f001 fa5e 	bl	80033c6 <fpMultiply>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f001 fa7a 	bl	8003408 <fpDivide>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f107 000c 	add.w	r0, r7, #12
 8001f1a:	f107 0214 	add.w	r2, r7, #20
 8001f1e:	ca06      	ldmia	r2, {r1, r2}
 8001f20:	f001 fa9a 	bl	8003458 <scaleVector>
>>>>>>> Stashed changes


		current->bullet.velocity.x+=accVec.x;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	441a      	add	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	441a      	add	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d190      	bne.n	8001f2e <updateBullets+0x10>
	}

}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}

08002016 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8002016:	b5b0      	push	{r4, r5, r7, lr}
 8002018:	b088      	sub	sp, #32
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
<<<<<<< Updated upstream
 8002024:	e0e7      	b.n	80021f6 <detectBulletHit+0x1e0>
		//Check if bullet hit a wall or the moon
		vector_t v = {intToFp(gameState->moon.x-fpToInt(current->bullet.position.x)), intToFp(gameState->moon.y-fpToInt(current->bullet.position.y))};
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7a1b      	ldrb	r3, [r3, #8]
 800202a:	b29c      	uxth	r4, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 ffce 	bl	8002fd2 <fpToInt>
 8002036:	4603      	mov	r3, r0
 8002038:	b29b      	uxth	r3, r3
 800203a:	1ae3      	subs	r3, r4, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 ffb2 	bl	8002fa8 <intToFp>
 8002044:	4603      	mov	r3, r0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7a5b      	ldrb	r3, [r3, #9]
 800204c:	b29c      	uxth	r4, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 ffbd 	bl	8002fd2 <fpToInt>
 8002058:	4603      	mov	r3, r0
 800205a:	b29b      	uxth	r3, r3
 800205c:	1ae3      	subs	r3, r4, r3
 800205e:	b29b      	uxth	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f000 ffa1 	bl	8002fa8 <intToFp>
 8002066:	4603      	mov	r3, r0
 8002068:	60fb      	str	r3, [r7, #12]
		int distToMoon = (int)sqrt(fpToInt(v.x)*fpToInt(v.x)+fpToInt(v.y)*fpToInt(v.y));
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 ffb0 	bl	8002fd2 <fpToInt>
 8002072:	4604      	mov	r4, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 ffab 	bl	8002fd2 <fpToInt>
 800207c:	4603      	mov	r3, r0
 800207e:	fb03 f404 	mul.w	r4, r3, r4
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 ffa4 	bl	8002fd2 <fpToInt>
 800208a:	4605      	mov	r5, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff9f 	bl	8002fd2 <fpToInt>
 8002094:	4603      	mov	r3, r0
 8002096:	fb03 f305 	mul.w	r3, r3, r5
 800209a:	4423      	add	r3, r4
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa41 	bl	8000524 <__aeabi_i2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ec43 2b10 	vmov	d0, r2, r3
 80020aa:	f004 fcd7 	bl	8006a5c <sqrt>
 80020ae:	ec53 2b10 	vmov	r2, r3, d0
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd4f 	bl	8000b58 <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	617b      	str	r3, [r7, #20]
		//TODO: afstandsberegning herover kan optimeres. Den beregnes allerede i updateBullet();

		int8_t hitInertObject = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	74fb      	strb	r3, [r7, #19]
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff83 	bl	8002fd2 <fpToInt>
 80020cc:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	dd1a      	ble.n	8002108 <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 ff7b 	bl	8002fd2 <fpToInt>
 80020dc:	4603      	mov	r3, r0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80020de:	2b55      	cmp	r3, #85	; 0x55
 80020e0:	dc12      	bgt.n	8002108 <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 ff73 	bl	8002fd2 <fpToInt>
 80020ec:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	dd0a      	ble.n	8002108 <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 ff6b 	bl	8002fd2 <fpToInt>
 80020fc:	4603      	mov	r3, r0
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 80020fe:	2b9b      	cmp	r3, #155	; 0x9b
 8002100:	dc02      	bgt.n	8002108 <detectBulletHit+0xf2>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b06      	cmp	r3, #6
 8002106:	dc01      	bgt.n	800210c <detectBulletHit+0xf6>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <detectBulletHit+0xf8>
 800210c:	2300      	movs	r3, #0
		hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 800210e:	74fb      	strb	r3, [r7, #19]
				distToMoon<=6;

		if(hitInertObject){ //TODO: add other boundaries
 8002110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <detectBulletHit+0x10c>
			deleteBulletNode(&(gameState->bulletLL), current);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69f9      	ldr	r1, [r7, #28]
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fac3 	bl	80046a8 <deleteBulletNode>
		}

		//Check if the bullet hit an enemy
		enemyNode_t* currentEnemy = gameState->enemyLL;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 8002128:	e05f      	b.n	80021ea <detectBulletHit+0x1d4>
			uint8_t hitEnemy = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	74bb      	strb	r3, [r7, #18]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ff4d 	bl	8002fd2 <fpToInt>
 8002138:	4604      	mov	r4, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 ff45 	bl	8002fd2 <fpToInt>
 8002148:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 800214a:	429c      	cmp	r4, r3
 800214c:	db33      	blt.n	80021b6 <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 ff3d 	bl	8002fd2 <fpToInt>
 8002158:	4604      	mov	r4, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 ff35 	bl	8002fd2 <fpToInt>
 8002168:	4603      	mov	r3, r0
 800216a:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800216c:	429c      	cmp	r4, r3
 800216e:	dc22      	bgt.n	80021b6 <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 ff2c 	bl	8002fd2 <fpToInt>
 800217a:	4604      	mov	r4, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 ff24 	bl	8002fd2 <fpToInt>
 800218a:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 800218c:	429c      	cmp	r4, r3
 800218e:	db12      	blt.n	80021b6 <detectBulletHit+0x1a0>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ff1c 	bl	8002fd2 <fpToInt>
 800219a:	4604      	mov	r4, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ff14 	bl	8002fd2 <fpToInt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 80021ae:	429c      	cmp	r4, r3
 80021b0:	dc01      	bgt.n	80021b6 <detectBulletHit+0x1a0>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <detectBulletHit+0x1a2>
 80021b6:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80021b8:	74bb      	strb	r3, [r7, #18]
			if(hitEnemy == 1){
 80021ba:	7cbb      	ldrb	r3, [r7, #18]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d111      	bne.n	80021e4 <detectBulletHit+0x1ce>
				gameState->score += 10;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	330a      	adds	r3, #10
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f001 fdd1 	bl	8003d74 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69f9      	ldr	r1, [r7, #28]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 fa66 	bl	80046a8 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f002 f9ae 	bl	8004540 <deleteEnemyNode>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	61bb      	str	r3, [r7, #24]
		while(currentEnemy != NULL){
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d19c      	bne.n	800212a <detectBulletHit+0x114>
		}
		current = current->nextBulletAddress;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f af14 	bne.w	8002026 <detectBulletHit+0x10>
	}
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bdb0      	pop	{r4, r5, r7, pc}

08002208 <drawBullets>:

void drawBullets(gameState_t* gameState){
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8002216:	e036      	b.n	8002286 <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fed8 	bl	8002fd2 <fpToInt>
 8002222:	4604      	mov	r4, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fed2 	bl	8002fd2 <fpToInt>
 800222e:	4603      	mov	r3, r0
 8002230:	0fda      	lsrs	r2, r3, #31
 8002232:	4413      	add	r3, r2
 8002234:	105b      	asrs	r3, r3, #1
 8002236:	4619      	mov	r1, r3
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff fd93 	bl	8001d64 <gotoxy>
		printf(" ");
 800223e:	2020      	movs	r0, #32
 8002240:	f003 fb00 	bl	8005844 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fec2 	bl	8002fd2 <fpToInt>
 800224e:	4604      	mov	r4, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 febc 	bl	8002fd2 <fpToInt>
 800225a:	4603      	mov	r3, r0
 800225c:	0fda      	lsrs	r2, r3, #31
 800225e:	4413      	add	r3, r2
 8002260:	105b      	asrs	r3, r3, #1
 8002262:	4619      	mov	r1, r3
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff fd7d 	bl	8001d64 <gotoxy>
		printf("O");
 800226a:	204f      	movs	r0, #79	; 0x4f
 800226c:	f003 faea 	bl	8005844 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1c5      	bne.n	8002218 <drawBullets+0x10>
	}
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
	...

08002298 <NVIC_EnableIRQ>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2201      	movs	r2, #1
 80022aa:	fa02 f103 	lsl.w	r1, r2, r3
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <NVIC_EnableIRQ+0x30>)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <NVIC_SetPriority>:
=======
 800168a:	b590      	push	{r4, r7, lr}
 800168c:	b089      	sub	sp, #36	; 0x24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001698:	e073      	b.n	8001782 <updateBullets+0xf8>

		//UDEN BRUG AF FLOATING POINT (vLength er et estimat)
		vector_t v = {intToFp(gameState->moon.x)-current->bullet.position.x, intToFp(gameState->moon.y)-current->bullet.position.y};
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 f9d6 	bl	8002a52 <intToFp>
 80016a6:	4602      	mov	r2, r0
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7a5b      	ldrb	r3, [r3, #9]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 f9cb 	bl	8002a52 <intToFp>
 80016bc:	4602      	mov	r2, r0
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	61bb      	str	r3, [r7, #24]
		current->bullet.distanceToMoon = fpMultiply(fpAbs(v.x)+fpAbs(v.y), 0x0000b400); // 0x0000b400 er ca. sqrt(2)/2
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 fa63 	bl	8002b94 <fpAbs>
 80016ce:	4604      	mov	r4, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fa5e 	bl	8002b94 <fpAbs>
 80016d8:	4603      	mov	r3, r0
 80016da:	4423      	add	r3, r4
 80016dc:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 f9ec 	bl	8002abe <fpMultiply>
 80016e6:	4602      	mov	r2, r0
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	619a      	str	r2, [r3, #24]
		v = scaleVector(v, fpDivide(intToFp(1),current->bullet.distanceToMoon));
 80016ec:	2001      	movs	r0, #1
 80016ee:	f001 f9b0 	bl	8002a52 <intToFp>
 80016f2:	4602      	mov	r2, r0
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f001 fa00 	bl	8002b00 <fpDivide>
 8001700:	4603      	mov	r3, r0
 8001702:	f107 0014 	add.w	r0, r7, #20
 8001706:	f107 0214 	add.w	r2, r7, #20
 800170a:	ca06      	ldmia	r2, {r1, r2}
 800170c:	f001 fa20 	bl	8002b50 <scaleVector>
		//v er nu ca. 1 lang
		vector_t accVec = scaleVector(v, fpDivide(intToFp(gameState->moon.mass),fpMultiply(current->bullet.distanceToMoon, current->bullet.distanceToMoon)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7a9b      	ldrb	r3, [r3, #10]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f001 f99b 	bl	8002a52 <intToFp>
 800171c:	4604      	mov	r4, r0
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f001 f9c8 	bl	8002abe <fpMultiply>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	4620      	mov	r0, r4
 8001734:	f001 f9e4 	bl	8002b00 <fpDivide>
 8001738:	4603      	mov	r3, r0
 800173a:	f107 000c 	add.w	r0, r7, #12
 800173e:	f107 0214 	add.w	r2, r7, #20
 8001742:	ca06      	ldmia	r2, {r1, r2}
 8001744:	f001 fa04 	bl	8002b50 <scaleVector>


		current->bullet.velocity.x+=accVec.x;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	441a      	add	r2, r3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	611a      	str	r2, [r3, #16]
		current->bullet.velocity.y+=accVec.y;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	441a      	add	r2, r3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	615a      	str	r2, [r3, #20]

		current->bullet.nextPosition.x=current->bullet.position.x+current->bullet.velocity.x;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	441a      	add	r2, r3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	609a      	str	r2, [r3, #8]
		current->bullet.nextPosition.y=current->bullet.position.y+current->bullet.velocity.y;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	441a      	add	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	60da      	str	r2, [r3, #12]
		current = current->nextBulletAddress;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	61fb      	str	r3, [r7, #28]
	while (current != NULL) {
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d188      	bne.n	800169a <updateBullets+0x10>
	}

}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}

08001792 <detectBulletHit>:

void detectBulletHit(gameState_t* gameState){
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 80017a0:	e194      	b.n	8001acc <detectBulletHit+0x33a>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f968 	bl	8002a7c <fpToInt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	72fb      	strb	r3, [r7, #11]


		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 f961 	bl	8002a7c <fpToInt>
 80017ba:	4603      	mov	r3, r0
=======
 8001f7c:	e19d      	b.n	80022ba <detectBulletHit+0x34c>

		uint8_t distToMoon = fpToInt(current->bullet.distanceToMoon);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 f9fe 	bl	8003384 <fpToInt>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	72fb      	strb	r3, [r7, #11]


		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f9f7 	bl	8003384 <fpToInt>
 8001f96:	4603      	mov	r3, r0
>>>>>>> Stashed changes
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
				fpToInt(current->bullet.nextPosition.x)<=1 ||
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80017bc:	2b04      	cmp	r3, #4
 80017be:	dd1a      	ble.n	80017f6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
<<<<<<< Updated upstream
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f959 	bl	8002a7c <fpToInt>
 80017ca:	4603      	mov	r3, r0
=======
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 f9ef 	bl	8003384 <fpToInt>
 8001fa6:	4603      	mov	r3, r0
>>>>>>> Stashed changes
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80017cc:	2b55      	cmp	r3, #85	; 0x55
 80017ce:	dc12      	bgt.n	80017f6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)<=1 ||
<<<<<<< Updated upstream
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 f951 	bl	8002a7c <fpToInt>
 80017da:	4603      	mov	r3, r0
=======
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f9e7 	bl	8003384 <fpToInt>
 8001fb6:	4603      	mov	r3, r0
>>>>>>> Stashed changes
				fpToInt(current->bullet.nextPosition.y)>=43*yScale ||
 80017dc:	2b01      	cmp	r3, #1
 80017de:	dd0a      	ble.n	80017f6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
<<<<<<< Updated upstream
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 f949 	bl	8002a7c <fpToInt>
 80017ea:	4603      	mov	r3, r0
=======
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f9df 	bl	8003384 <fpToInt>
 8001fc6:	4603      	mov	r3, r0
>>>>>>> Stashed changes
				fpToInt(current->bullet.nextPosition.x)<=1 ||
 80017ec:	2b9b      	cmp	r3, #155	; 0x9b
 80017ee:	dc02      	bgt.n	80017f6 <detectBulletHit+0x64>
				fpToInt(current->bullet.nextPosition.x)>=156 ||
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d801      	bhi.n	80017fa <detectBulletHit+0x68>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <detectBulletHit+0x6a>
 80017fa:	2300      	movs	r3, #0
		uint8_t hitInertObject = fpToInt(current->bullet.nextPosition.y)<=2*yScale ||
 80017fc:	72bb      	strb	r3, [r7, #10]
				distToMoon<=6;

		if(hitInertObject){
 80017fe:	7abb      	ldrb	r3, [r7, #10]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <detectBulletHit+0x84>
			deleteBulletNode(&(gameState->bulletLL), current);
<<<<<<< Updated upstream
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6979      	ldr	r1, [r7, #20]
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fdc5 	bl	8004398 <deleteBulletNode>
=======
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fe6f 	bl	8004cc8 <deleteBulletNode>
>>>>>>> Stashed changes
			current = current->nextBulletAddress;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	617b      	str	r3, [r7, #20]
			continue;
<<<<<<< Updated upstream
 8001814:	e15a      	b.n	8001acc <detectBulletHit+0x33a>
=======
 8001ff0:	e163      	b.n	80022ba <detectBulletHit+0x34c>
>>>>>>> Stashed changes
		}

		uint8_t hitSpaceship;

		if(gameState->spaceship.numberOfParts==1){
<<<<<<< Updated upstream
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7f1b      	ldrb	r3, [r3, #28]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d131      	bne.n	8001882 <detectBulletHit+0xf0>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f92a 	bl	8002a7c <fpToInt>
 8001828:	4604      	mov	r4, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f924 	bl	8002a7c <fpToInt>
 8001834:	4603      	mov	r3, r0
 8001836:	3b01      	subs	r3, #1
 8001838:	429c      	cmp	r4, r3
 800183a:	db1f      	blt.n	800187c <detectBulletHit+0xea>
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4618      	mov	r0, r3
 8001842:	f001 f91b 	bl	8002a7c <fpToInt>
 8001846:	4604      	mov	r4, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 f915 	bl	8002a7c <fpToInt>
 8001852:	4603      	mov	r3, r0
 8001854:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001856:	429c      	cmp	r4, r3
 8001858:	db10      	blt.n	800187c <detectBulletHit+0xea>
						fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+1);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f001 f90c 	bl	8002a7c <fpToInt>
 8001864:	4604      	mov	r4, r0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f906 	bl	8002a7c <fpToInt>
 8001870:	4603      	mov	r3, r0
 8001872:	3301      	adds	r3, #1
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8001874:	429c      	cmp	r4, r3
 8001876:	dc01      	bgt.n	800187c <detectBulletHit+0xea>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <detectBulletHit+0xec>
 800187c:	2300      	movs	r3, #0
 800187e:	74fb      	strb	r3, [r7, #19]
 8001880:	e06a      	b.n	8001958 <detectBulletHit+0x1c6>
		}
		else if(gameState->spaceship.numberOfParts==2){
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7f1b      	ldrb	r3, [r3, #28]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d131      	bne.n	80018ee <detectBulletHit+0x15c>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f8f4 	bl	8002a7c <fpToInt>
 8001894:	4604      	mov	r4, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f8ee 	bl	8002a7c <fpToInt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	3b01      	subs	r3, #1
 80018a4:	429c      	cmp	r4, r3
 80018a6:	db1f      	blt.n	80018e8 <detectBulletHit+0x156>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 f8e5 	bl	8002a7c <fpToInt>
 80018b2:	4604      	mov	r4, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f8df 	bl	8002a7c <fpToInt>
 80018be:	4603      	mov	r3, r0
 80018c0:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80018c2:	429c      	cmp	r4, r3
 80018c4:	db10      	blt.n	80018e8 <detectBulletHit+0x156>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f8d6 	bl	8002a7c <fpToInt>
 80018d0:	4604      	mov	r4, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 f8d0 	bl	8002a7c <fpToInt>
 80018dc:	4603      	mov	r3, r0
 80018de:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 80018e0:	429c      	cmp	r4, r3
 80018e2:	dc01      	bgt.n	80018e8 <detectBulletHit+0x156>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <detectBulletHit+0x158>
 80018e8:	2300      	movs	r3, #0
 80018ea:	74fb      	strb	r3, [r7, #19]
 80018ec:	e034      	b.n	8001958 <detectBulletHit+0x1c6>
		}
		else if(gameState->spaceship.numberOfParts==3){
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d130      	bne.n	8001958 <detectBulletHit+0x1c6>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 f8be 	bl	8002a7c <fpToInt>
 8001900:	4604      	mov	r4, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f8b8 	bl	8002a7c <fpToInt>
 800190c:	4603      	mov	r3, r0
 800190e:	3b01      	subs	r3, #1
 8001910:	429c      	cmp	r4, r3
 8001912:	db1f      	blt.n	8001954 <detectBulletHit+0x1c2>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f001 f8af 	bl	8002a7c <fpToInt>
 800191e:	4604      	mov	r4, r0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f001 f8a9 	bl	8002a7c <fpToInt>
 800192a:	4603      	mov	r3, r0
 800192c:	3b09      	subs	r3, #9
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800192e:	429c      	cmp	r4, r3
 8001930:	db10      	blt.n	8001954 <detectBulletHit+0x1c2>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4618      	mov	r0, r3
 8001938:	f001 f8a0 	bl	8002a7c <fpToInt>
 800193c:	4604      	mov	r4, r0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f001 f89a 	bl	8002a7c <fpToInt>
 8001948:	4603      	mov	r3, r0
 800194a:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 800194c:	429c      	cmp	r4, r3
 800194e:	dc01      	bgt.n	8001954 <detectBulletHit+0x1c2>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <detectBulletHit+0x1c4>
 8001954:	2300      	movs	r3, #0
 8001956:	74fb      	strb	r3, [r7, #19]
		}

		if(hitSpaceship){
 8001958:	7cfb      	ldrb	r3, [r7, #19]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d04b      	beq.n	80019f6 <detectBulletHit+0x264>

			if(gameState->spaceship.numberOfParts==3){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7f1b      	ldrb	r3, [r3, #28]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d11d      	bne.n	80019a2 <detectBulletHit+0x210>
				deleteMe(fpToInt(gameState->spaceship.position.x)-7, fpToInt(gameState->spaceship.position.y)/yScale);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4618      	mov	r0, r3
 800196c:	f001 f886 	bl	8002a7c <fpToInt>
 8001970:	4603      	mov	r3, r0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	3b07      	subs	r3, #7
 8001976:	b2dc      	uxtb	r4, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4618      	mov	r0, r3
 800197e:	f001 f87d 	bl	8002a7c <fpToInt>
 8001982:	4603      	mov	r3, r0
 8001984:	0fda      	lsrs	r2, r3, #31
 8001986:	4413      	add	r3, r2
 8001988:	105b      	asrs	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	4620      	mov	r0, r4
 8001990:	f001 ffa1 	bl	80038d6 <deleteMe>
				gameState->spaceship.numberOfParts--;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7f1b      	ldrb	r3, [r3, #28]
 8001998:	3b01      	subs	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	771a      	strb	r2, [r3, #28]
 80019a0:	e020      	b.n	80019e4 <detectBulletHit+0x252>
			} else if(gameState->spaceship.numberOfParts==2){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7f1b      	ldrb	r3, [r3, #28]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d11c      	bne.n	80019e4 <detectBulletHit+0x252>
				//gotoxy(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y));
				deleteMe(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y)/yScale);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 f864 	bl	8002a7c <fpToInt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	3307      	adds	r3, #7
 80019ba:	b2dc      	uxtb	r4, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 f85b 	bl	8002a7c <fpToInt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0fda      	lsrs	r2, r3, #31
 80019ca:	4413      	add	r3, r2
 80019cc:	105b      	asrs	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	4620      	mov	r0, r4
 80019d4:	f001 ff7f 	bl	80038d6 <deleteMe>
				gameState->spaceship.numberOfParts--;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7f1b      	ldrb	r3, [r3, #28]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	771a      	strb	r2, [r3, #28]
=======
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d131      	bne.n	8002060 <detectBulletHit+0xf2>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f001 f9bf 	bl	8003384 <fpToInt>
 8002006:	4604      	mov	r4, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4618      	mov	r0, r3
 800200e:	f001 f9b9 	bl	8003384 <fpToInt>
 8002012:	4603      	mov	r3, r0
 8002014:	3b01      	subs	r3, #1
 8002016:	429c      	cmp	r4, r3
 8002018:	db1f      	blt.n	800205a <detectBulletHit+0xec>
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f001 f9b0 	bl	8003384 <fpToInt>
 8002024:	4604      	mov	r4, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f9aa 	bl	8003384 <fpToInt>
 8002030:	4603      	mov	r3, r0
 8002032:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002034:	429c      	cmp	r4, r3
 8002036:	db10      	blt.n	800205a <detectBulletHit+0xec>
						fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+1);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f9a1 	bl	8003384 <fpToInt>
 8002042:	4604      	mov	r4, r0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f99b 	bl	8003384 <fpToInt>
 800204e:	4603      	mov	r3, r0
 8002050:	3301      	adds	r3, #1
						(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8002052:	429c      	cmp	r4, r3
 8002054:	dc01      	bgt.n	800205a <detectBulletHit+0xec>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <detectBulletHit+0xee>
 800205a:	2300      	movs	r3, #0
 800205c:	74fb      	strb	r3, [r7, #19]
 800205e:	e06c      	b.n	800213a <detectBulletHit+0x1cc>
		}
		else if(gameState->spaceship.numberOfParts==2){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002066:	2b02      	cmp	r3, #2
 8002068:	d131      	bne.n	80020ce <detectBulletHit+0x160>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f001 f988 	bl	8003384 <fpToInt>
 8002074:	4604      	mov	r4, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f982 	bl	8003384 <fpToInt>
 8002080:	4603      	mov	r3, r0
 8002082:	3b01      	subs	r3, #1
 8002084:	429c      	cmp	r4, r3
 8002086:	db1f      	blt.n	80020c8 <detectBulletHit+0x15a>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f001 f979 	bl	8003384 <fpToInt>
 8002092:	4604      	mov	r4, r0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f973 	bl	8003384 <fpToInt>
 800209e:	4603      	mov	r3, r0
 80020a0:	3b01      	subs	r3, #1
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020a2:	429c      	cmp	r4, r3
 80020a4:	db10      	blt.n	80020c8 <detectBulletHit+0x15a>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 f96a 	bl	8003384 <fpToInt>
 80020b0:	4604      	mov	r4, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 f964 	bl	8003384 <fpToInt>
 80020bc:	4603      	mov	r3, r0
 80020be:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-1 &&
 80020c0:	429c      	cmp	r4, r3
 80020c2:	dc01      	bgt.n	80020c8 <detectBulletHit+0x15a>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <detectBulletHit+0x15c>
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
 80020cc:	e035      	b.n	800213a <detectBulletHit+0x1cc>
		}
		else if(gameState->spaceship.numberOfParts==3){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d130      	bne.n	800213a <detectBulletHit+0x1cc>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f951 	bl	8003384 <fpToInt>
 80020e2:	4604      	mov	r4, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f94b 	bl	8003384 <fpToInt>
 80020ee:	4603      	mov	r3, r0
 80020f0:	3b01      	subs	r3, #1
 80020f2:	429c      	cmp	r4, r3
 80020f4:	db1f      	blt.n	8002136 <detectBulletHit+0x1c8>
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 f942 	bl	8003384 <fpToInt>
 8002100:	4604      	mov	r4, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4618      	mov	r0, r3
 8002108:	f001 f93c 	bl	8003384 <fpToInt>
 800210c:	4603      	mov	r3, r0
 800210e:	3b09      	subs	r3, #9
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002110:	429c      	cmp	r4, r3
 8002112:	db10      	blt.n	8002136 <detectBulletHit+0x1c8>
							fpToInt(current->bullet.nextPosition.x)<=fpToInt(gameState->spaceship.position.x)+9);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f001 f933 	bl	8003384 <fpToInt>
 800211e:	4604      	mov	r4, r0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 f92d 	bl	8003384 <fpToInt>
 800212a:	4603      	mov	r3, r0
 800212c:	3309      	adds	r3, #9
							(fpToInt(current->bullet.nextPosition.x)>=fpToInt(gameState->spaceship.position.x)-9 &&
 800212e:	429c      	cmp	r4, r3
 8002130:	dc01      	bgt.n	8002136 <detectBulletHit+0x1c8>
			hitSpaceship = fpToInt(current->bullet.nextPosition.y)>=fpToInt(gameState->spaceship.position.y)-1 &&
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <detectBulletHit+0x1ca>
 8002136:	2300      	movs	r3, #0
 8002138:	74fb      	strb	r3, [r7, #19]
		}

		if(hitSpaceship){
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d051      	beq.n	80021e4 <detectBulletHit+0x276>

			if(gameState->spaceship.numberOfParts==3){
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002146:	2b03      	cmp	r3, #3
 8002148:	d11f      	bne.n	800218a <detectBulletHit+0x21c>
				deleteMe(fpToInt(gameState->spaceship.position.x)-7, fpToInt(gameState->spaceship.position.y)/yScale);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4618      	mov	r0, r3
 8002150:	f001 f918 	bl	8003384 <fpToInt>
 8002154:	4603      	mov	r3, r0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3b07      	subs	r3, #7
 800215a:	b2dc      	uxtb	r4, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f90f 	bl	8003384 <fpToInt>
 8002166:	4603      	mov	r3, r0
 8002168:	0fda      	lsrs	r2, r3, #31
 800216a:	4413      	add	r3, r2
 800216c:	105b      	asrs	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4619      	mov	r1, r3
 8002172:	4620      	mov	r0, r4
 8002174:	f002 f847 	bl	8004206 <deleteMe>
				gameState->spaceship.numberOfParts--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217e:	3b01      	subs	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002188:	e023      	b.n	80021d2 <detectBulletHit+0x264>
			} else if(gameState->spaceship.numberOfParts==2){
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002190:	2b02      	cmp	r3, #2
 8002192:	d11e      	bne.n	80021d2 <detectBulletHit+0x264>
				//gotoxy(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y));
				deleteMe(fpToInt(gameState->spaceship.position.x)+7, fpToInt(gameState->spaceship.position.y)/yScale);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4618      	mov	r0, r3
 800219a:	f001 f8f3 	bl	8003384 <fpToInt>
 800219e:	4603      	mov	r3, r0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3307      	adds	r3, #7
 80021a4:	b2dc      	uxtb	r4, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 f8ea 	bl	8003384 <fpToInt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	0fda      	lsrs	r2, r3, #31
 80021b4:	4413      	add	r3, r2
 80021b6:	105b      	asrs	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	4620      	mov	r0, r4
 80021be:	f002 f822 	bl	8004206 <deleteMe>
				gameState->spaceship.numberOfParts--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
			}


			deleteBulletNode(&(gameState->bulletLL), current);
<<<<<<< Updated upstream
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6979      	ldr	r1, [r7, #20]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fcd5 	bl	8004398 <deleteBulletNode>
			current = current->nextBulletAddress;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	617b      	str	r3, [r7, #20]
			continue;
 80019f4:	e06a      	b.n	8001acc <detectBulletHit+0x33a>
=======
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 fd76 	bl	8004cc8 <deleteBulletNode>
			current = current->nextBulletAddress;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	617b      	str	r3, [r7, #20]
			continue;
 80021e2:	e06a      	b.n	80022ba <detectBulletHit+0x34c>
>>>>>>> Stashed changes
		}


		//Check if the bullet hit an enemy
		enemyNode_t* currentEnemy = gameState->enemyLL;
<<<<<<< Updated upstream
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80019fc:	e060      	b.n	8001ac0 <detectBulletHit+0x32e>
			uint8_t hitEnemy = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	727b      	strb	r3, [r7, #9]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 f838 	bl	8002a7c <fpToInt>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f830 	bl	8002a7c <fpToInt>
 8001a1c:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	db33      	blt.n	8001a8a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 f828 	bl	8002a7c <fpToInt>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f820 	bl	8002a7c <fpToInt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001a40:	429c      	cmp	r4, r3
 8001a42:	dc22      	bgt.n	8001a8a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 f817 	bl	8002a7c <fpToInt>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f80f 	bl	8002a7c <fpToInt>
 8001a5e:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8001a60:	429c      	cmp	r4, r3
 8001a62:	db12      	blt.n	8001a8a <detectBulletHit+0x2f8>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 f807 	bl	8002a7c <fpToInt>
 8001a6e:	4604      	mov	r4, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 ffff 	bl	8002a7c <fpToInt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8001a82:	429c      	cmp	r4, r3
 8001a84:	dc01      	bgt.n	8001a8a <detectBulletHit+0x2f8>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <detectBulletHit+0x2fa>
 8001a8a:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 8001a8c:	727b      	strb	r3, [r7, #9]
			if(hitEnemy == 1){
 8001a8e:	7a7b      	ldrb	r3, [r7, #9]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d112      	bne.n	8001aba <detectBulletHit+0x328>
				gameState->score += 10;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	330a      	adds	r3, #10
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
				drawScore(gameState);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f001 febb 	bl	800381c <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6979      	ldr	r1, [r7, #20]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fc74 	bl	8004398 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f002 fbbc 	bl	8004230 <deleteEnemyNode>
				break;
 8001ab8:	e005      	b.n	8001ac6 <detectBulletHit+0x334>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d19b      	bne.n	80019fe <detectBulletHit+0x26c>
		}
		current = current->nextBulletAddress;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f ae67 	bne.w	80017a2 <detectBulletHit+0x10>
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}

08001ade <drawBullets>:

void drawBullets(gameState_t* gameState){
 8001ade:	b590      	push	{r4, r7, lr}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 8001aec:	e036      	b.n	8001b5c <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 ffc2 	bl	8002a7c <fpToInt>
 8001af8:	4604      	mov	r4, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 ffbc 	bl	8002a7c <fpToInt>
 8001b04:	4603      	mov	r3, r0
 8001b06:	0fda      	lsrs	r2, r3, #31
 8001b08:	4413      	add	r3, r2
 8001b0a:	105b      	asrs	r3, r3, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fcde 	bl	80014d0 <gotoxy>
		printf(" ");
 8001b14:	2020      	movs	r0, #32
 8001b16:	f004 f80f 	bl	8005b38 <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 ffac 	bl	8002a7c <fpToInt>
 8001b24:	4604      	mov	r4, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 ffa6 	bl	8002a7c <fpToInt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	0fda      	lsrs	r2, r3, #31
 8001b34:	4413      	add	r3, r2
 8001b36:	105b      	asrs	r3, r3, #1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fcc8 	bl	80014d0 <gotoxy>
		printf("O");
 8001b40:	204f      	movs	r0, #79	; 0x4f
 8001b42:	f003 fff9 	bl	8005b38 <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1c5      	bne.n	8001aee <drawBullets+0x10>
	}
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <NVIC_EnableIRQ>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	fa02 f103 	lsl.w	r1, r2, r3
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <NVIC_EnableIRQ+0x30>)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <NVIC_SetPriority>:
>>>>>>> Stashed changes
=======
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80021ea:	e060      	b.n	80022ae <detectBulletHit+0x340>
			uint8_t hitEnemy = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	727b      	strb	r3, [r7, #9]
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 f8c5 	bl	8003384 <fpToInt>
 80021fa:	4604      	mov	r4, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f001 f8bd 	bl	8003384 <fpToInt>
 800220a:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 800220c:	429c      	cmp	r4, r3
 800220e:	db33      	blt.n	8002278 <detectBulletHit+0x30a>
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f8b5 	bl	8003384 <fpToInt>
 800221a:	4604      	mov	r4, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f8ad 	bl	8003384 <fpToInt>
 800222a:	4603      	mov	r3, r0
 800222c:	3307      	adds	r3, #7
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800222e:	429c      	cmp	r4, r3
 8002230:	dc22      	bgt.n	8002278 <detectBulletHit+0x30a>
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f001 f8a4 	bl	8003384 <fpToInt>
 800223c:	4604      	mov	r4, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f001 f89c 	bl	8003384 <fpToInt>
 800224c:	4603      	mov	r3, r0
					fpToInt(current->bullet.position.x) <= fpToInt(currentEnemy->enemy->position->x) + 7 &&
 800224e:	429c      	cmp	r4, r3
 8002250:	db12      	blt.n	8002278 <detectBulletHit+0x30a>
					fpToInt(current->bullet.position.y) <= fpToInt(currentEnemy->enemy->position->y) + 1 * yScale);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f001 f894 	bl	8003384 <fpToInt>
 800225c:	4604      	mov	r4, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f001 f88c 	bl	8003384 <fpToInt>
 800226c:	4603      	mov	r3, r0
 800226e:	3302      	adds	r3, #2
					fpToInt(current->bullet.position.y) >= fpToInt(currentEnemy->enemy->position->y) &&
 8002270:	429c      	cmp	r4, r3
 8002272:	dc01      	bgt.n	8002278 <detectBulletHit+0x30a>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <detectBulletHit+0x30c>
 8002278:	2300      	movs	r3, #0
			hitEnemy = (fpToInt(current->bullet.position.x) >= fpToInt(currentEnemy->enemy->position->x) &&
 800227a:	727b      	strb	r3, [r7, #9]
			if(hitEnemy == 1){
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d112      	bne.n	80022a8 <detectBulletHit+0x33a>
				gameState->score += 10;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002286:	330a      	adds	r3, #10
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	85da      	strh	r2, [r3, #46]	; 0x2e
				drawScore(gameState);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 ff48 	bl	8004124 <drawScore>
				deleteBulletNode(&(gameState->bulletLL), current);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6979      	ldr	r1, [r7, #20]
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fd15 	bl	8004cc8 <deleteBulletNode>
				deleteEnemyNode(gameState, currentEnemy);
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f002 fc5d 	bl	8004b60 <deleteEnemyNode>
				break;
 80022a6:	e005      	b.n	80022b4 <detectBulletHit+0x346>
			}
			currentEnemy = currentEnemy->nextEnemyNode;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
		while(currentEnemy != NULL){
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d19b      	bne.n	80021ec <detectBulletHit+0x27e>
		}
		current = current->nextBulletAddress;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	617b      	str	r3, [r7, #20]
	while (current != NULL) {
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f ae5e 	bne.w	8001f7e <detectBulletHit+0x10>
	}
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}

080022cc <drawBullets>:

void drawBullets(gameState_t* gameState){
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	bulletNode_t* current = gameState->bulletLL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

	while (current != NULL) {
 80022da:	e036      	b.n	800234a <drawBullets+0x7e>
		gotoxy(fpToInt(current->bullet.position.x), fpToInt(current->bullet.position.y)/yScale); //TODO:
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f84f 	bl	8003384 <fpToInt>
 80022e6:	4604      	mov	r4, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 f849 	bl	8003384 <fpToInt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	0fda      	lsrs	r2, r3, #31
 80022f6:	4413      	add	r3, r2
 80022f8:	105b      	asrs	r3, r3, #1
 80022fa:	4619      	mov	r1, r3
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7ff fcd5 	bl	8001cac <gotoxy>
		printf(" ");
 8002302:	2020      	movs	r0, #32
 8002304:	f004 f932 	bl	800656c <putchar>
		gotoxy(fpToInt(current->bullet.nextPosition.x), fpToInt(current->bullet.nextPosition.y)/yScale);//TODO:
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f001 f839 	bl	8003384 <fpToInt>
 8002312:	4604      	mov	r4, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4618      	mov	r0, r3
 800231a:	f001 f833 	bl	8003384 <fpToInt>
 800231e:	4603      	mov	r3, r0
 8002320:	0fda      	lsrs	r2, r3, #31
 8002322:	4413      	add	r3, r2
 8002324:	105b      	asrs	r3, r3, #1
 8002326:	4619      	mov	r1, r3
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff fcbf 	bl	8001cac <gotoxy>
		printf("O");
 800232e:	204f      	movs	r0, #79	; 0x4f
 8002330:	f004 f91c 	bl	800656c <putchar>

		current->bullet.position.x=current->bullet.nextPosition.x;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]
		current->bullet.position.y=current->bullet.nextPosition.y;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]

		current = current->nextBulletAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	60fb      	str	r3, [r7, #12]
	while (current != NULL) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1c5      	bne.n	80022dc <drawBullets+0x10>
	}
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bd90      	pop	{r4, r7, pc}
	...

0800235c <NVIC_EnableIRQ>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f103 	lsl.w	r1, r2, r3
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <NVIC_EnableIRQ+0x30>)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <NVIC_SetPriority>:
>>>>>>> Stashed changes

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da0b      	bge.n	80022f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <NVIC_SetPriority+0x4c>)
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	3b04      	subs	r3, #4
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80022f6:	e009      	b.n	800230c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <NVIC_SetPriority+0x50>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	e000e100 	.word	0xe000e100

08002320 <initJoystick>:
=======
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da0b      	bge.n	8001bcc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <NVIC_SetPriority+0x4c>)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	3b04      	subs	r3, #4
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001bca:	e009      	b.n	8001be0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <NVIC_SetPriority+0x50>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <initJoystick>:
>>>>>>> Stashed changes
=======
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0b      	bge.n	80023bc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <NVIC_SetPriority+0x4c>)
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	3b04      	subs	r3, #4
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80023ba:	e009      	b.n	80023d0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <NVIC_SetPriority+0x50>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <initJoystick>:
>>>>>>> Stashed changes
uint32_t upPrevPressed = 0;
uint32_t downPrevPressed = 0;
uint32_t leftPrevPressed = 0;
uint32_t rightPrevPressed = 0;

void initJoystick(){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <initJoystick+0x120>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	4a45      	ldr	r2, [pc, #276]	; (8002440 <initJoystick+0x120>)
 800232a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <initJoystick+0x120>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	4a42      	ldr	r2, [pc, #264]	; (8002440 <initJoystick+0x120>)
 8002336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233a:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <initJoystick+0x120>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <initJoystick+0x120>)
 8002342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002346:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8002348:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <initJoystick+0x124>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <initJoystick+0x124>)
 800234e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002352:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <initJoystick+0x124>)
 8002356:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <initJoystick+0x124>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <initJoystick+0x124>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <initJoystick+0x124>)
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <initJoystick+0x124>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a35      	ldr	r2, [pc, #212]	; (8002444 <initJoystick+0x124>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	60d3      	str	r3, [r2, #12]
=======
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001bf8:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <initJoystick+0x120>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	4a45      	ldr	r2, [pc, #276]	; (8001d14 <initJoystick+0x120>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c02:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <initJoystick+0x120>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <initJoystick+0x120>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <initJoystick+0x120>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <initJoystick+0x120>)
 8001c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c1a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <initJoystick+0x124>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a3d      	ldr	r2, [pc, #244]	; (8001d18 <initJoystick+0x124>)
 8001c22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c26:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <initJoystick+0x124>)
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <initJoystick+0x124>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001c30:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <initJoystick+0x124>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <initJoystick+0x124>)
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <initJoystick+0x124>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a35      	ldr	r2, [pc, #212]	; (8001d18 <initJoystick+0x124>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
=======
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port A, B, C
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <initJoystick+0x120>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4a45      	ldr	r2, [pc, #276]	; (8002504 <initJoystick+0x120>)
 80023ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f2:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <initJoystick+0x120>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <initJoystick+0x120>)
 80023fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fe:	6153      	str	r3, [r2, #20]
	 RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8002400:	4b40      	ldr	r3, [pc, #256]	; (8002504 <initJoystick+0x120>)
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <initJoystick+0x120>)
 8002406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800240a:	6153      	str	r3, [r2, #20]

	//CENTER
	 GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <initJoystick+0x124>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <initJoystick+0x124>)
 8002412:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002416:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <initJoystick+0x124>)
 800241a:	4a3b      	ldr	r2, [pc, #236]	; (8002508 <initJoystick+0x124>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6013      	str	r3, [r2, #0]
	 //Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <initJoystick+0x124>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a38      	ldr	r2, [pc, #224]	; (8002508 <initJoystick+0x124>)
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <initJoystick+0x124>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a35      	ldr	r2, [pc, #212]	; (8002508 <initJoystick+0x124>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
	 //	 No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	 //UP
	 GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002388:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80023a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <initJoystick+0x124>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <initJoystick+0x124>)
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <initJoystick+0x124>)
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <initJoystick+0x124>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <initJoystick+0x124>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <initJoystick+0x124>)
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <initJoystick+0x124>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <initJoystick+0x124>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <initJoystick+0x128>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <initJoystick+0x128>)
 80023e2:	f023 030c 	bic.w	r3, r3, #12
 80023e6:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <initJoystick+0x128>)
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <initJoystick+0x128>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <initJoystick+0x128>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <initJoystick+0x128>)
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <initJoystick+0x128>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <initJoystick+0x128>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <initJoystick+0x128>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <initJoystick+0x128>)
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <initJoystick+0x128>)
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <initJoystick+0x128>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <initJoystick+0x128>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a09      	ldr	r2, [pc, #36]	; (8002448 <initJoystick+0x128>)
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <initJoystick+0x128>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <initJoystick+0x128>)
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60d3      	str	r3, [r2, #12]

}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800

0800244c <centerIsPressed>:

uint8_t centerIsPressed(){
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <centerIsPressed+0x50>)
 8002452:	8a1b      	ldrh	r3, [r3, #16]
 8002454:	b29b      	uxth	r3, r3
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00c      	beq.n	8002478 <centerIsPressed+0x2c>
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <centerIsPressed+0x54>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <centerIsPressed+0x58>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b1e      	cmp	r3, #30
 800246a:	d905      	bls.n	8002478 <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <centerIsPressed+0x54>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <centerIsPressed+0x58>)
 8002472:	6013      	str	r3, [r2, #0]
		 return 1;
 8002474:	2301      	movs	r3, #1
 8002476:	e00c      	b.n	8002492 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <centerIsPressed+0x50>)
 800247a:	8a1b      	ldrh	r3, [r3, #16]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <centerIsPressed+0x54>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3b1e      	subs	r3, #30
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <centerIsPressed+0x58>)
 800248e:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8002490:	2300      	movs	r3, #0
	 }
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	48000400 	.word	0x48000400
 80024a0:	200001cc 	.word	0x200001cc
 80024a4:	200001b4 	.word	0x200001b4

080024a8 <upIsPressed>:

uint8_t upIsPressed(){
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 80024ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024b0:	8a1b      	ldrh	r3, [r3, #16]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <upIsPressed+0x2e>
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <upIsPressed+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <upIsPressed+0x58>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b1e      	cmp	r3, #30
 80024c8:	d905      	bls.n	80024d6 <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <upIsPressed+0x54>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <upIsPressed+0x58>)
 80024d0:	6013      	str	r3, [r2, #0]
			 return 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00d      	b.n	80024f2 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 80024d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024da:	8a1b      	ldrh	r3, [r3, #16]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <upIsPressed+0x54>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <upIsPressed+0x58>)
 80024ee:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80024f0:	2300      	movs	r3, #0
		 }
	 }
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	200001cc 	.word	0x200001cc
 8002500:	200001b8 	.word	0x200001b8

08002504 <downIsPressed>:

uint8_t downIsPressed(){
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <downIsPressed+0x50>)
 800250a:	8a1b      	ldrh	r3, [r3, #16]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <downIsPressed+0x2c>
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <downIsPressed+0x54>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <downIsPressed+0x58>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b1e      	cmp	r3, #30
 8002522:	d905      	bls.n	8002530 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <downIsPressed+0x54>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <downIsPressed+0x58>)
 800252a:	6013      	str	r3, [r2, #0]
			 return 1;
 800252c:	2301      	movs	r3, #1
 800252e:	e00c      	b.n	800254a <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <downIsPressed+0x50>)
 8002532:	8a1b      	ldrh	r3, [r3, #16]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <downIsPressed+0x54>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3b1e      	subs	r3, #30
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <downIsPressed+0x58>)
 8002546:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8002548:	2300      	movs	r3, #0
		 }
	 }
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	48000400 	.word	0x48000400
 8002558:	200001cc 	.word	0x200001cc
 800255c:	200001bc 	.word	0x200001bc

08002560 <initTimer>:
=======
 8001c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c56:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <initJoystick+0x124>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <initJoystick+0x124>)
 8001c8a:	f023 0303 	bic.w	r3, r3, #3
 8001c8e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <initJoystick+0x124>)
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <initJoystick+0x124>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <initJoystick+0x124>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <initJoystick+0x124>)
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <initJoystick+0x124>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <initJoystick+0x124>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <initJoystick+0x128>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <initJoystick+0x128>)
 8001cb6:	f023 030c 	bic.w	r3, r3, #12
 8001cba:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <initJoystick+0x128>)
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <initJoystick+0x128>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <initJoystick+0x128>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <initJoystick+0x128>)
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <initJoystick+0x128>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <initJoystick+0x128>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <initJoystick+0x128>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <initJoystick+0x128>)
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <initJoystick+0x128>)
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <initJoystick+0x128>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <initJoystick+0x128>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <initJoystick+0x128>)
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <initJoystick+0x128>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <initJoystick+0x128>)
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	60d3      	str	r3, [r2, #12]

}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800

08001d20 <centerIsPressed>:

uint8_t centerIsPressed(){
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <centerIsPressed+0x50>)
 8001d26:	8a1b      	ldrh	r3, [r3, #16]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <centerIsPressed+0x2c>
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <centerIsPressed+0x54>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <centerIsPressed+0x58>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b1e      	cmp	r3, #30
 8001d3e:	d905      	bls.n	8001d4c <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <centerIsPressed+0x54>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <centerIsPressed+0x58>)
 8001d46:	6013      	str	r3, [r2, #0]
		 return 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00c      	b.n	8001d66 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <centerIsPressed+0x50>)
 8001d4e:	8a1b      	ldrh	r3, [r3, #16]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <centerIsPressed+0x54>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <centerIsPressed+0x58>)
 8001d62:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8001d64:	2300      	movs	r3, #0
	 }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	48000400 	.word	0x48000400
 8001d74:	200001c8 	.word	0x200001c8
 8001d78:	200001b0 	.word	0x200001b0

08001d7c <upIsPressed>:

uint8_t upIsPressed(){
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8001d80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d84:	8a1b      	ldrh	r3, [r3, #16]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00c      	beq.n	8001daa <upIsPressed+0x2e>
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <upIsPressed+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <upIsPressed+0x58>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b1e      	cmp	r3, #30
 8001d9c:	d905      	bls.n	8001daa <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <upIsPressed+0x54>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <upIsPressed+0x58>)
 8001da4:	6013      	str	r3, [r2, #0]
			 return 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00d      	b.n	8001dc6 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 8001daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dae:	8a1b      	ldrh	r3, [r3, #16]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <upIsPressed+0x54>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3b1e      	subs	r3, #30
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <upIsPressed+0x58>)
 8001dc2:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001dc4:	2300      	movs	r3, #0
		 }
	 }
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	200001c8 	.word	0x200001c8
 8001dd4:	200001b4 	.word	0x200001b4

08001dd8 <downIsPressed>:

uint8_t downIsPressed(){
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <downIsPressed+0x50>)
 8001dde:	8a1b      	ldrh	r3, [r3, #16]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <downIsPressed+0x2c>
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <downIsPressed+0x54>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <downIsPressed+0x58>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b1e      	cmp	r3, #30
 8001df6:	d905      	bls.n	8001e04 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <downIsPressed+0x54>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <downIsPressed+0x58>)
 8001dfe:	6013      	str	r3, [r2, #0]
			 return 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e00c      	b.n	8001e1e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <downIsPressed+0x50>)
 8001e06:	8a1b      	ldrh	r3, [r3, #16]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <downIsPressed+0x54>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3b1e      	subs	r3, #30
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <downIsPressed+0x58>)
 8001e1a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 8001e1c:	2300      	movs	r3, #0
		 }
	 }
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	200001c8 	.word	0x200001c8
 8001e30:	200001b8 	.word	0x200001b8

08001e34 <initTimer>:
>>>>>>> Stashed changes
=======
 8002438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002446:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800244c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6013      	str	r3, [r2, #0]
	 GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	60d3      	str	r3, [r2, #12]
	 GPIOA->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]

	 //down
	 GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <initJoystick+0x124>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <initJoystick+0x124>)
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	6013      	str	r3, [r2, #0]
	 GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <initJoystick+0x124>)
 8002482:	4a21      	ldr	r2, [pc, #132]	; (8002508 <initJoystick+0x124>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6013      	str	r3, [r2, #0]
	 GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <initJoystick+0x124>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <initJoystick+0x124>)
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	60d3      	str	r3, [r2, #12]
	 GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <initJoystick+0x124>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <initJoystick+0x124>)
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60d3      	str	r3, [r2, #12]

	 //left
	 GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <initJoystick+0x128>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <initJoystick+0x128>)
 80024a6:	f023 030c 	bic.w	r3, r3, #12
 80024aa:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <initJoystick+0x128>)
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <initJoystick+0x128>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <initJoystick+0x128>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <initJoystick+0x128>)
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <initJoystick+0x128>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a11      	ldr	r2, [pc, #68]	; (800250c <initJoystick+0x128>)
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]

	 //right
	 GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <initJoystick+0x128>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <initJoystick+0x128>)
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	6013      	str	r3, [r2, #0]
	 GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <initJoystick+0x128>)
 80024da:	4a0c      	ldr	r2, [pc, #48]	; (800250c <initJoystick+0x128>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <initJoystick+0x128>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <initJoystick+0x128>)
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	60d3      	str	r3, [r2, #12]
	 GPIOC->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 -
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <initJoystick+0x128>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <initJoystick+0x128>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	60d3      	str	r3, [r2, #12]

}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800

08002510 <centerIsPressed>:

uint8_t centerIsPressed(){
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	 if(((GPIOB->IDR & (0x0001 << 5))!=0 )&& (runtime-centerPrevPressed>btnDelay)){
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <centerIsPressed+0x50>)
 8002516:	8a1b      	ldrh	r3, [r3, #16]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <centerIsPressed+0x2c>
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <centerIsPressed+0x54>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <centerIsPressed+0x58>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b1e      	cmp	r3, #30
 800252e:	d905      	bls.n	800253c <centerIsPressed+0x2c>
		 centerPrevPressed=runtime;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <centerIsPressed+0x54>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <centerIsPressed+0x58>)
 8002536:	6013      	str	r3, [r2, #0]
		 return 1;
 8002538:	2301      	movs	r3, #1
 800253a:	e00c      	b.n	8002556 <centerIsPressed+0x46>
	 } else {
		 if((GPIOB->IDR & (0x0001 << 5))==0){
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <centerIsPressed+0x50>)
 800253e:	8a1b      	ldrh	r3, [r3, #16]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <centerIsPressed+0x44>
			 centerPrevPressed=runtime-btnDelay;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <centerIsPressed+0x54>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3b1e      	subs	r3, #30
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <centerIsPressed+0x58>)
 8002552:	6013      	str	r3, [r2, #0]
		 }
		 return 0;
 8002554:	2300      	movs	r3, #0
	 }
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	48000400 	.word	0x48000400
 8002564:	200001c8 	.word	0x200001c8
 8002568:	200001b0 	.word	0x200001b0

0800256c <upIsPressed>:

uint8_t upIsPressed(){
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
		 if(((GPIOA->IDR & (0x0001 << 4))!=0) && (runtime-upPrevPressed>btnDelay)){
 8002570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002574:	8a1b      	ldrh	r3, [r3, #16]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <upIsPressed+0x2e>
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <upIsPressed+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <upIsPressed+0x58>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b1e      	cmp	r3, #30
 800258c:	d905      	bls.n	800259a <upIsPressed+0x2e>
			 upPrevPressed = runtime;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <upIsPressed+0x54>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <upIsPressed+0x58>)
 8002594:	6013      	str	r3, [r2, #0]
			 return 1;
 8002596:	2301      	movs	r3, #1
 8002598:	e00d      	b.n	80025b6 <upIsPressed+0x4a>
		 } else {
			 if((GPIOA->IDR & (0x0001 << 4))==0){
 800259a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800259e:	8a1b      	ldrh	r3, [r3, #16]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d104      	bne.n	80025b4 <upIsPressed+0x48>
				 upPrevPressed=runtime-btnDelay;
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <upIsPressed+0x54>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3b1e      	subs	r3, #30
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <upIsPressed+0x58>)
 80025b2:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 80025b4:	2300      	movs	r3, #0
		 }
	 }
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	200001c8 	.word	0x200001c8
 80025c4:	200001b4 	.word	0x200001b4

080025c8 <downIsPressed>:

uint8_t downIsPressed(){
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
		 if(((GPIOB->IDR & (0x0001 << 0))!=0)&& (runtime-downPrevPressed>btnDelay)){
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <downIsPressed+0x50>)
 80025ce:	8a1b      	ldrh	r3, [r3, #16]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <downIsPressed+0x2c>
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <downIsPressed+0x54>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <downIsPressed+0x58>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b1e      	cmp	r3, #30
 80025e6:	d905      	bls.n	80025f4 <downIsPressed+0x2c>
			 downPrevPressed = runtime;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <downIsPressed+0x54>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <downIsPressed+0x58>)
 80025ee:	6013      	str	r3, [r2, #0]
			 return 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e00c      	b.n	800260e <downIsPressed+0x46>
		 } else {
			 if((GPIOB->IDR & (0x0001 << 0))==0){
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <downIsPressed+0x50>)
 80025f6:	8a1b      	ldrh	r3, [r3, #16]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <downIsPressed+0x44>
				 downPrevPressed=runtime-btnDelay;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <downIsPressed+0x54>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3b1e      	subs	r3, #30
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <downIsPressed+0x58>)
 800260a:	6013      	str	r3, [r2, #0]
			 }
			 return 0;
 800260c:	2300      	movs	r3, #0
		 }
	 }
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	48000400 	.word	0x48000400
 800261c:	200001c8 	.word	0x200001c8
 8002620:	200001b8 	.word	0x200001b8

08002624 <initTimer>:
>>>>>>> Stashed changes
	 }

// JOYSTICK ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// TIMER vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void initTimer(){ //period = 0,01 sec
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <initTimer+0x60>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <initTimer+0x60>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <initTimer+0x64>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <initTimer+0x64>)
 8002578:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 800257c:	f023 030f 	bic.w	r3, r3, #15
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <initTimer+0x64>)
 8002586:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <initTimer+0x64>)
 800258e:	2209      	movs	r2, #9
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <initTimer+0x64>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <initTimer+0x64>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <initTimer+0x64>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <initTimer+0x64>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80025ae:	2100      	movs	r1, #0
 80025b0:	2018      	movs	r0, #24
 80025b2:	f7ff fe8b 	bl	80022cc <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80025b6:	2018      	movs	r0, #24
 80025b8:	f7ff fe6e 	bl	8002298 <NVIC_EnableIRQ>
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40014000 	.word	0x40014000

080025c8 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	runtime++;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a06      	ldr	r2, [pc, #24]	; (80025ec <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80025d4:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6113      	str	r3, [r2, #16]
 }
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	200001cc 	.word	0x200001cc
 80025f0:	40014000 	.word	0x40014000

080025f4 <I2C_Write>:

// TIMER ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


//I2C shit TODO: ret kommentar
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	717b      	strb	r3, [r7, #5]
 8002602:	4613      	mov	r3, r2
 8002604:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 8002606:	bf00      	nop
 8002608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260c:	4825      	ldr	r0, [pc, #148]	; (80026a4 <I2C_Write+0xb0>)
 800260e:	f7fe fea5 	bl	800135c <I2C_GetFlagStatus>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d0f7      	beq.n	8002608 <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 8002618:	88f9      	ldrh	r1, [r7, #6]
 800261a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002624:	2201      	movs	r2, #1
 8002626:	481f      	ldr	r0, [pc, #124]	; (80026a4 <I2C_Write+0xb0>)
 8002628:	f7fe fe50 	bl	80012cc <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 800262c:	bf00      	nop
 800262e:	2102      	movs	r1, #2
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <I2C_Write+0xb0>)
 8002632:	f7fe fe93 	bl	800135c <I2C_GetFlagStatus>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f8      	beq.n	800262e <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 800263c:	797b      	ldrb	r3, [r7, #5]
 800263e:	4619      	mov	r1, r3
 8002640:	4818      	ldr	r0, [pc, #96]	; (80026a4 <I2C_Write+0xb0>)
 8002642:	f7fe fe6f 	bl	8001324 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 8002646:	bf00      	nop
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	4816      	ldr	r0, [pc, #88]	; (80026a4 <I2C_Write+0xb0>)
 800264c:	f7fe fe86 	bl	800135c <I2C_GetFlagStatus>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f8      	beq.n	8002648 <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 8002656:	88f9      	ldrh	r1, [r7, #6]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002660:	2201      	movs	r2, #1
 8002662:	4810      	ldr	r0, [pc, #64]	; (80026a4 <I2C_Write+0xb0>)
 8002664:	f7fe fe32 	bl	80012cc <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8002668:	bf00      	nop
 800266a:	2102      	movs	r1, #2
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <I2C_Write+0xb0>)
 800266e:	f7fe fe75 	bl	800135c <I2C_GetFlagStatus>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f8      	beq.n	800266a <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 8002678:	793b      	ldrb	r3, [r7, #4]
 800267a:	4619      	mov	r1, r3
 800267c:	4809      	ldr	r0, [pc, #36]	; (80026a4 <I2C_Write+0xb0>)
 800267e:	f7fe fe51 	bl	8001324 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8002682:	bf00      	nop
 8002684:	2120      	movs	r1, #32
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <I2C_Write+0xb0>)
 8002688:	f7fe fe68 	bl	800135c <I2C_GetFlagStatus>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f8      	beq.n	8002684 <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8002692:	2120      	movs	r1, #32
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <I2C_Write+0xb0>)
 8002696:	f7fe fe80 	bl	800139a <I2C_ClearFlag>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40005400 	.word	0x40005400

080026a8 <I2C_Read>:


uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	603a      	str	r2, [r7, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
 80026b6:	460b      	mov	r3, r1
 80026b8:	717b      	strb	r3, [r7, #5]
 80026ba:	4613      	mov	r3, r2
 80026bc:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80026c2:	bf00      	nop
 80026c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c8:	4830      	ldr	r0, [pc, #192]	; (800278c <I2C_Read+0xe4>)
 80026ca:	f7fe fe47 	bl	800135c <I2C_GetFlagStatus>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d0f7      	beq.n	80026c4 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80026d4:	88f9      	ldrh	r1, [r7, #6]
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	2201      	movs	r2, #1
 80026e0:	482a      	ldr	r0, [pc, #168]	; (800278c <I2C_Read+0xe4>)
 80026e2:	f7fe fdf3 	bl	80012cc <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80026e6:	bf00      	nop
 80026e8:	2102      	movs	r1, #2
 80026ea:	4828      	ldr	r0, [pc, #160]	; (800278c <I2C_Read+0xe4>)
 80026ec:	f7fe fe36 	bl	800135c <I2C_GetFlagStatus>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f8      	beq.n	80026e8 <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4824      	ldr	r0, [pc, #144]	; (800278c <I2C_Read+0xe4>)
 80026fc:	f7fe fe12 	bl	8001324 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 8002700:	bf00      	nop
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	4821      	ldr	r0, [pc, #132]	; (800278c <I2C_Read+0xe4>)
 8002706:	f7fe fe29 	bl	800135c <I2C_GetFlagStatus>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f8      	beq.n	8002702 <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 8002710:	793a      	ldrb	r2, [r7, #4]
 8002712:	88f9      	ldrh	r1, [r7, #6]
 8002714:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271e:	481b      	ldr	r0, [pc, #108]	; (800278c <I2C_Read+0xe4>)
 8002720:	f7fe fdd4 	bl	80012cc <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 8002724:	2300      	movs	r3, #0
 8002726:	73bb      	strb	r3, [r7, #14]
 8002728:	e01b      	b.n	8002762 <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 800272a:	bf00      	nop
 800272c:	2104      	movs	r1, #4
 800272e:	4817      	ldr	r0, [pc, #92]	; (800278c <I2C_Read+0xe4>)
 8002730:	f7fe fe14 	bl	800135c <I2C_GetFlagStatus>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f8      	beq.n	800272c <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 800273a:	793b      	ldrb	r3, [r7, #4]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d908      	bls.n	8002752 <I2C_Read+0xaa>
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	18d4      	adds	r4, r2, r3
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <I2C_Read+0xe4>)
 8002748:	f7fe fdfb 	bl	8001342 <I2C_ReceiveData>
 800274c:	4603      	mov	r3, r0
 800274e:	7023      	strb	r3, [r4, #0]
 8002750:	e004      	b.n	800275c <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 8002752:	480e      	ldr	r0, [pc, #56]	; (800278c <I2C_Read+0xe4>)
 8002754:	f7fe fdf5 	bl	8001342 <I2C_ReceiveData>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	3301      	adds	r3, #1
 8002760:	73bb      	strb	r3, [r7, #14]
 8002762:	7bba      	ldrb	r2, [r7, #14]
 8002764:	793b      	ldrb	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3df      	bcc.n	800272a <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 800276a:	bf00      	nop
 800276c:	2120      	movs	r1, #32
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <I2C_Read+0xe4>)
 8002770:	f7fe fdf4 	bl	800135c <I2C_GetFlagStatus>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f8      	beq.n	800276c <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800277a:	2120      	movs	r1, #32
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <I2C_Read+0xe4>)
 800277e:	f7fe fe0c 	bl	800139a <I2C_ClearFlag>

    return val;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}
 800278c:	40005400 	.word	0x40005400

08002790 <I2C_init>:

void I2C_init()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
=======
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <initTimer+0x110>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <initTimer+0x110>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <initTimer+0x114>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4a3f      	ldr	r2, [pc, #252]	; (8001f48 <initTimer+0x114>)
 8001e4c:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8001e50:	f023 030f 	bic.w	r3, r3, #15
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <initTimer+0x114>)
 8001e5a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <initTimer+0x114>)
 8001e62:	2209      	movs	r2, #9
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <initTimer+0x114>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <initTimer+0x114>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <initTimer+0x114>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <initTimer+0x114>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8001e82:	2100      	movs	r1, #0
 8001e84:	2018      	movs	r0, #24
 8001e86:	f7ff fe8b 	bl	8001ba0 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8001e8a:	2018      	movs	r0, #24
 8001e8c:	f7ff fe6e 	bl	8001b6c <NVIC_EnableIRQ>
=======
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

	 RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002628:	4b42      	ldr	r3, [pc, #264]	; (8002734 <initTimer+0x110>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a41      	ldr	r2, [pc, #260]	; (8002734 <initTimer+0x110>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6193      	str	r3, [r2, #24]
	 TIM15->CR1 &= 0xF470; // Configure timer 15
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <initTimer+0x114>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <initTimer+0x114>)
 800263c:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8002640:	f023 030f 	bic.w	r3, r3, #15
 8002644:	b29b      	uxth	r3, r3
 8002646:	8013      	strh	r3, [r2, #0]
	 TIM15->ARR = 63999; // Set reload value
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <initTimer+0x114>)
 800264a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM15->PSC = 0x09; // Set prescale value
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <initTimer+0x114>)
 8002652:	2209      	movs	r2, #9
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28

	 TIM15->CR1 |= 0x0001; //counter enable
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <initTimer+0x114>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4a36      	ldr	r2, [pc, #216]	; (8002738 <initTimer+0x114>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]

	 TIM15->DIER |= 0x0001; // Enable timer 15 interrupts
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <initTimer+0x114>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a33      	ldr	r2, [pc, #204]	; (8002738 <initTimer+0x114>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	60d3      	str	r3, [r2, #12]
	 NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8002672:	2100      	movs	r1, #0
 8002674:	2018      	movs	r0, #24
 8002676:	f7ff fe8b 	bl	8002390 <NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800267a:	2018      	movs	r0, #24
 800267c:	f7ff fe6e 	bl	800235c <NVIC_EnableIRQ>
>>>>>>> Stashed changes



	 //BUZZER timer (TIM2)vvvvvvvvvvvvvvvv

	 RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
<<<<<<< Updated upstream
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <initTimer+0x110>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <initTimer+0x110>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	61d3      	str	r3, [r2, #28]
	 TIM2->CR1 &= 0xF400; // Configure timer 2
 8001e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea8:	f423 633f 	bic.w	r3, r3, #3056	; 0xbf0
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8013      	strh	r3, [r2, #0]
	 //TIM2->CR1 = 0x0000; // Configure timer 2
	 TIM2->ARR = 63999; // Set reload value //63999
 8001eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM2->PSC = 0x0009; // Set prescale value
 8001ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec2:	2209      	movs	r2, #9
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28

	 //TIM2->CR1 |= 0x0001; //counter enable

	  TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ed4:	6213      	str	r3, [r2, #32]
	  TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6213      	str	r3, [r2, #32]
	  TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef4:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f14:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f20:	f023 0308 	bic.w	r3, r3, #8
 8001f24:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	61d3      	str	r3, [r2, #28]
	  TIM2->CCR3 = 63999 / 2; // Set duty cycle to 50 %
 8001f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40014000 	.word	0x40014000

08001f4c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	runtime++;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001f58:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6113      	str	r3, [r2, #16]
 }
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	200001c8 	.word	0x200001c8
 8001f74:	40014000 	.word	0x40014000

08001f78 <initBuzzerPin>:
=======
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <initTimer+0x110>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <initTimer+0x110>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	61d3      	str	r3, [r2, #28]
	 TIM2->CR1 &= 0xF400; // Configure timer 2
 800268c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002698:	f423 633f 	bic.w	r3, r3, #3056	; 0xbf0
 800269c:	f023 030f 	bic.w	r3, r3, #15
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	8013      	strh	r3, [r2, #0]
	 //TIM2->CR1 = 0x0000; // Configure timer 2
	 TIM2->ARR = 63999; // Set reload value //63999
 80026a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM2->PSC = 0x0009; // Set prescale value
 80026ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b2:	2209      	movs	r2, #9
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28

	  TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 80026b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c4:	6213      	str	r3, [r2, #32]
	  TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 80026c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6213      	str	r3, [r2, #32]
	  TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 80026d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e4:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 80026e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f0:	f023 0303 	bic.w	r3, r3, #3
 80026f4:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 80026f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002700:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002704:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8002706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002710:	f023 0308 	bic.w	r3, r3, #8
 8002714:	61d3      	str	r3, [r2, #28]
	  TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8002716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	61d3      	str	r3, [r2, #28]
	  TIM2->CCR3 = 63999 / 2; // Set duty cycle to 50 %
 8002726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800272a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40014000 	.word	0x40014000

0800273c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void) {
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	runtime++;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002748:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6113      	str	r3, [r2, #16]
 }
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	200001c8 	.word	0x200001c8
 8002764:	40014000 	.word	0x40014000

08002768 <initBuzzerPin>:
>>>>>>> Stashed changes

// TIMER ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

void initBuzzerPin(){
<<<<<<< Updated upstream
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

  	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <initBuzzerPin+0x68>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <initBuzzerPin+0x68>)
 8001f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f86:	6153      	str	r3, [r2, #20]

	GPIOB->OSPEEDR &= ~(0x00000003 << (2*10));
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001f8e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f92:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*10));
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9e:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (10));
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= 0x0000 << (10);
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fb4:	8892      	ldrh	r2, [r2, #4]
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*10));
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001fc4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000002 << (2*10);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd0:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <initBuzzerPin+0x6c>)
 8001fd8:	f7fe fce4 	bl	80009a4 <GPIO_PinAFConfig>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48000400 	.word	0x48000400

08001fe8 <I2C_Write>:

//I2C shit TODO: ret kommentar
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	717b      	strb	r3, [r7, #5]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 8001ffa:	bf00      	nop
 8001ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002000:	4825      	ldr	r0, [pc, #148]	; (8002098 <I2C_Write+0xb0>)
 8002002:	f7fe fd61 	bl	8000ac8 <I2C_GetFlagStatus>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d0f7      	beq.n	8001ffc <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 800200c:	88f9      	ldrh	r1, [r7, #6]
 800200e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002018:	2201      	movs	r2, #1
 800201a:	481f      	ldr	r0, [pc, #124]	; (8002098 <I2C_Write+0xb0>)
 800201c:	f7fe fd0c 	bl	8000a38 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8002020:	bf00      	nop
 8002022:	2102      	movs	r1, #2
 8002024:	481c      	ldr	r0, [pc, #112]	; (8002098 <I2C_Write+0xb0>)
 8002026:	f7fe fd4f 	bl	8000ac8 <I2C_GetFlagStatus>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f8      	beq.n	8002022 <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 8002030:	797b      	ldrb	r3, [r7, #5]
 8002032:	4619      	mov	r1, r3
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <I2C_Write+0xb0>)
 8002036:	f7fe fd2b 	bl	8000a90 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 800203a:	bf00      	nop
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <I2C_Write+0xb0>)
 8002040:	f7fe fd42 	bl	8000ac8 <I2C_GetFlagStatus>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f8      	beq.n	800203c <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 800204a:	88f9      	ldrh	r1, [r7, #6]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002054:	2201      	movs	r2, #1
 8002056:	4810      	ldr	r0, [pc, #64]	; (8002098 <I2C_Write+0xb0>)
 8002058:	f7fe fcee 	bl	8000a38 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 800205c:	bf00      	nop
 800205e:	2102      	movs	r1, #2
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <I2C_Write+0xb0>)
 8002062:	f7fe fd31 	bl	8000ac8 <I2C_GetFlagStatus>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f8      	beq.n	800205e <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <I2C_Write+0xb0>)
 8002072:	f7fe fd0d 	bl	8000a90 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8002076:	bf00      	nop
 8002078:	2120      	movs	r1, #32
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <I2C_Write+0xb0>)
 800207c:	f7fe fd24 	bl	8000ac8 <I2C_GetFlagStatus>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f8      	beq.n	8002078 <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8002086:	2120      	movs	r1, #32
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <I2C_Write+0xb0>)
 800208a:	f7fe fd3c 	bl	8000b06 <I2C_ClearFlag>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40005400 	.word	0x40005400

0800209c <I2C_Read>:


uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	603a      	str	r2, [r7, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
 80020aa:	460b      	mov	r3, r1
 80020ac:	717b      	strb	r3, [r7, #5]
 80020ae:	4613      	mov	r3, r2
 80020b0:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80020b6:	bf00      	nop
 80020b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020bc:	4830      	ldr	r0, [pc, #192]	; (8002180 <I2C_Read+0xe4>)
 80020be:	f7fe fd03 	bl	8000ac8 <I2C_GetFlagStatus>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d0f7      	beq.n	80020b8 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80020c8:	88f9      	ldrh	r1, [r7, #6]
 80020ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	2201      	movs	r2, #1
 80020d4:	482a      	ldr	r0, [pc, #168]	; (8002180 <I2C_Read+0xe4>)
 80020d6:	f7fe fcaf 	bl	8000a38 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80020da:	bf00      	nop
 80020dc:	2102      	movs	r1, #2
 80020de:	4828      	ldr	r0, [pc, #160]	; (8002180 <I2C_Read+0xe4>)
 80020e0:	f7fe fcf2 	bl	8000ac8 <I2C_GetFlagStatus>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f8      	beq.n	80020dc <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4824      	ldr	r0, [pc, #144]	; (8002180 <I2C_Read+0xe4>)
 80020f0:	f7fe fcce 	bl	8000a90 <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 80020f4:	bf00      	nop
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	4821      	ldr	r0, [pc, #132]	; (8002180 <I2C_Read+0xe4>)
 80020fa:	f7fe fce5 	bl	8000ac8 <I2C_GetFlagStatus>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f8      	beq.n	80020f6 <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 8002104:	793a      	ldrb	r2, [r7, #4]
 8002106:	88f9      	ldrh	r1, [r7, #6]
 8002108:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002112:	481b      	ldr	r0, [pc, #108]	; (8002180 <I2C_Read+0xe4>)
 8002114:	f7fe fc90 	bl	8000a38 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 8002118:	2300      	movs	r3, #0
 800211a:	73bb      	strb	r3, [r7, #14]
 800211c:	e01b      	b.n	8002156 <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 800211e:	bf00      	nop
 8002120:	2104      	movs	r1, #4
 8002122:	4817      	ldr	r0, [pc, #92]	; (8002180 <I2C_Read+0xe4>)
 8002124:	f7fe fcd0 	bl	8000ac8 <I2C_GetFlagStatus>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f8      	beq.n	8002120 <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 800212e:	793b      	ldrb	r3, [r7, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d908      	bls.n	8002146 <I2C_Read+0xaa>
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	18d4      	adds	r4, r2, r3
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <I2C_Read+0xe4>)
 800213c:	f7fe fcb7 	bl	8000aae <I2C_ReceiveData>
 8002140:	4603      	mov	r3, r0
 8002142:	7023      	strb	r3, [r4, #0]
 8002144:	e004      	b.n	8002150 <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <I2C_Read+0xe4>)
 8002148:	f7fe fcb1 	bl	8000aae <I2C_ReceiveData>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	3301      	adds	r3, #1
 8002154:	73bb      	strb	r3, [r7, #14]
 8002156:	7bba      	ldrb	r2, [r7, #14]
 8002158:	793b      	ldrb	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3df      	bcc.n	800211e <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 800215e:	bf00      	nop
 8002160:	2120      	movs	r1, #32
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <I2C_Read+0xe4>)
 8002164:	f7fe fcb0 	bl	8000ac8 <I2C_GetFlagStatus>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f8      	beq.n	8002160 <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800216e:	2120      	movs	r1, #32
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <I2C_Read+0xe4>)
 8002172:	f7fe fcc8 	bl	8000b06 <I2C_ClearFlag>

    return val;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	40005400 	.word	0x40005400

08002184 <I2C_init>:

void I2C_init()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <initBuzzerPin+0x68>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <initBuzzerPin+0x68>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6153      	str	r3, [r2, #20]

	GPIOB->OSPEEDR &= ~(0x00000003 << (2*10));
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <initBuzzerPin+0x6c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <initBuzzerPin+0x6c>)
 800277e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002782:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (2*10));
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <initBuzzerPin+0x6c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <initBuzzerPin+0x6c>)
 800278a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278e:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~(0x0001 << (10));
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <initBuzzerPin+0x6c>)
 8002792:	889b      	ldrh	r3, [r3, #4]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <initBuzzerPin+0x6c>)
 8002798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279c:	b29b      	uxth	r3, r3
 800279e:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= 0x0000 << (10);
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <initBuzzerPin+0x6c>)
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <initBuzzerPin+0x6c>)
 80027a4:	8892      	ldrh	r2, [r2, #4]
 80027a6:	b292      	uxth	r2, r2
 80027a8:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0x00000003 << (2*10));
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <initBuzzerPin+0x6c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <initBuzzerPin+0x6c>)
 80027b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027b4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000002 << (2*10);
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <initBuzzerPin+0x6c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <initBuzzerPin+0x6c>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c0:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 80027c2:	2201      	movs	r2, #1
 80027c4:	210a      	movs	r1, #10
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <initBuzzerPin+0x6c>)
 80027c8:	f7fe fcda 	bl	8001180 <GPIO_PinAFConfig>
}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	48000400 	.word	0x48000400

080027d8 <I2C_Write>:

//I2C shit TODO: ret kommentar
void I2C_Write(uint16_t address, uint8_t reg, uint8_t val) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af02      	add	r7, sp, #8
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	460b      	mov	r3, r1
 80027e4:	717b      	strb	r3, [r7, #5]
 80027e6:	4613      	mov	r3, r2
 80027e8:	713b      	strb	r3, [r7, #4]
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80027ea:	bf00      	nop
 80027ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f0:	4825      	ldr	r0, [pc, #148]	; (8002888 <I2C_Write+0xb0>)
 80027f2:	f7fe fd57 	bl	80012a4 <I2C_GetFlagStatus>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d0f7      	beq.n	80027ec <I2C_Write+0x14>

    I2C_TransferHandling(I2C1, address, 1, I2C_Reload_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80027fc:	88f9      	ldrh	r1, [r7, #6]
 80027fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002808:	2201      	movs	r2, #1
 800280a:	481f      	ldr	r0, [pc, #124]	; (8002888 <I2C_Write+0xb0>)
 800280c:	f7fe fd02 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 8002810:	bf00      	nop
 8002812:	2102      	movs	r1, #2
 8002814:	481c      	ldr	r0, [pc, #112]	; (8002888 <I2C_Write+0xb0>)
 8002816:	f7fe fd45 	bl	80012a4 <I2C_GetFlagStatus>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f8      	beq.n	8002812 <I2C_Write+0x3a>

    I2C_SendData(I2C1, reg); // Send register address
 8002820:	797b      	ldrb	r3, [r7, #5]
 8002822:	4619      	mov	r1, r3
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <I2C_Write+0xb0>)
 8002826:	f7fe fd21 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET); // Wait until free
 800282a:	bf00      	nop
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	4816      	ldr	r0, [pc, #88]	; (8002888 <I2C_Write+0xb0>)
 8002830:	f7fe fd38 	bl	80012a4 <I2C_GetFlagStatus>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f8      	beq.n	800282c <I2C_Write+0x54>

    I2C_TransferHandling(I2C1, address, 1, I2C_AutoEnd_Mode, I2C_No_StartStop); // Resend address
 800283a:	88f9      	ldrh	r1, [r7, #6]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	2201      	movs	r2, #1
 8002846:	4810      	ldr	r0, [pc, #64]	; (8002888 <I2C_Write+0xb0>)
 8002848:	f7fe fce4 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 800284c:	bf00      	nop
 800284e:	2102      	movs	r1, #2
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <I2C_Write+0xb0>)
 8002852:	f7fe fd27 	bl	80012a4 <I2C_GetFlagStatus>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f8      	beq.n	800284e <I2C_Write+0x76>

    I2C_SendData(I2C1, val); // Transfer data
 800285c:	793b      	ldrb	r3, [r7, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	4809      	ldr	r0, [pc, #36]	; (8002888 <I2C_Write+0xb0>)
 8002862:	f7fe fd03 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 8002866:	bf00      	nop
 8002868:	2120      	movs	r1, #32
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <I2C_Write+0xb0>)
 800286c:	f7fe fd1a 	bl	80012a4 <I2C_GetFlagStatus>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f8      	beq.n	8002868 <I2C_Write+0x90>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 8002876:	2120      	movs	r1, #32
 8002878:	4803      	ldr	r0, [pc, #12]	; (8002888 <I2C_Write+0xb0>)
 800287a:	f7fe fd32 	bl	80012e2 <I2C_ClearFlag>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40005400 	.word	0x40005400

0800288c <I2C_Read>:


uint8_t I2C_Read(uint16_t address, uint8_t reg, uint8_t* vals, uint8_t n) {
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	af02      	add	r7, sp, #8
 8002892:	603a      	str	r2, [r7, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	460b      	mov	r3, r1
 800289c:	717b      	strb	r3, [r7, #5]
 800289e:	4613      	mov	r3, r2
 80028a0:	713b      	strb	r3, [r7, #4]
    uint8_t val = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET); // Wait until free
 80028a6:	bf00      	nop
 80028a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ac:	4830      	ldr	r0, [pc, #192]	; (8002970 <I2C_Read+0xe4>)
 80028ae:	f7fe fcf9 	bl	80012a4 <I2C_GetFlagStatus>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d0f7      	beq.n	80028a8 <I2C_Read+0x1c>

    I2C_TransferHandling(I2C1, address, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); // Initiate transfer
 80028b8:	88f9      	ldrh	r1, [r7, #6]
 80028ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2300      	movs	r3, #0
 80028c2:	2201      	movs	r2, #1
 80028c4:	482a      	ldr	r0, [pc, #168]	; (8002970 <I2C_Read+0xe4>)
 80028c6:	f7fe fca5 	bl	8001214 <I2C_TransferHandling>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET); // Wait until free
 80028ca:	bf00      	nop
 80028cc:	2102      	movs	r1, #2
 80028ce:	4828      	ldr	r0, [pc, #160]	; (8002970 <I2C_Read+0xe4>)
 80028d0:	f7fe fce8 	bl	80012a4 <I2C_GetFlagStatus>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f8      	beq.n	80028cc <I2C_Read+0x40>

    I2C_SendData(I2C1, reg); // Send register address
 80028da:	797b      	ldrb	r3, [r7, #5]
 80028dc:	4619      	mov	r1, r3
 80028de:	4824      	ldr	r0, [pc, #144]	; (8002970 <I2C_Read+0xe4>)
 80028e0:	f7fe fcc4 	bl	800126c <I2C_SendData>

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_TC) == RESET); // Wait until free
 80028e4:	bf00      	nop
 80028e6:	2140      	movs	r1, #64	; 0x40
 80028e8:	4821      	ldr	r0, [pc, #132]	; (8002970 <I2C_Read+0xe4>)
 80028ea:	f7fe fcdb 	bl	80012a4 <I2C_GetFlagStatus>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f8      	beq.n	80028e6 <I2C_Read+0x5a>

    I2C_TransferHandling(I2C1, address, n, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); // Resend address
 80028f4:	793a      	ldrb	r2, [r7, #4]
 80028f6:	88f9      	ldrh	r1, [r7, #6]
 80028f8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002902:	481b      	ldr	r0, [pc, #108]	; (8002970 <I2C_Read+0xe4>)
 8002904:	f7fe fc86 	bl	8001214 <I2C_TransferHandling>

    for (uint8_t i = 0 ; i < n ; i++) {
 8002908:	2300      	movs	r3, #0
 800290a:	73bb      	strb	r3, [r7, #14]
 800290c:	e01b      	b.n	8002946 <I2C_Read+0xba>
        while (I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET); // Wait until free
 800290e:	bf00      	nop
 8002910:	2104      	movs	r1, #4
 8002912:	4817      	ldr	r0, [pc, #92]	; (8002970 <I2C_Read+0xe4>)
 8002914:	f7fe fcc6 	bl	80012a4 <I2C_GetFlagStatus>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f8      	beq.n	8002910 <I2C_Read+0x84>

        if (n > 1) { vals[i] = I2C_ReceiveData(I2C1); }
 800291e:	793b      	ldrb	r3, [r7, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d908      	bls.n	8002936 <I2C_Read+0xaa>
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	18d4      	adds	r4, r2, r3
 800292a:	4811      	ldr	r0, [pc, #68]	; (8002970 <I2C_Read+0xe4>)
 800292c:	f7fe fcad 	bl	800128a <I2C_ReceiveData>
 8002930:	4603      	mov	r3, r0
 8002932:	7023      	strb	r3, [r4, #0]
 8002934:	e004      	b.n	8002940 <I2C_Read+0xb4>
        else { val = I2C_ReceiveData(I2C1); } // Transfer data
 8002936:	480e      	ldr	r0, [pc, #56]	; (8002970 <I2C_Read+0xe4>)
 8002938:	f7fe fca7 	bl	800128a <I2C_ReceiveData>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0 ; i < n ; i++) {
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	3301      	adds	r3, #1
 8002944:	73bb      	strb	r3, [r7, #14]
 8002946:	7bba      	ldrb	r2, [r7, #14]
 8002948:	793b      	ldrb	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3df      	bcc.n	800290e <I2C_Read+0x82>
    }

    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET); // Wait for stop flag
 800294e:	bf00      	nop
 8002950:	2120      	movs	r1, #32
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <I2C_Read+0xe4>)
 8002954:	f7fe fca6 	bl	80012a4 <I2C_GetFlagStatus>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f8      	beq.n	8002950 <I2C_Read+0xc4>

    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); // Clear stop flag
 800295e:	2120      	movs	r1, #32
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <I2C_Read+0xe4>)
 8002962:	f7fe fcbe 	bl	80012e2 <I2C_ClearFlag>

    return val;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	40005400 	.word	0x40005400

08002974 <I2C_init>:

void I2C_init()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

    /**************/
    /**** GPIO ****/
    /**************/
    RCC->AHBENR |= 0x00040000; // Enable clock for GPIO Bank B
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <I2C_init+0x15c>)
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4a54      	ldr	r2, [pc, #336]	; (80028ec <I2C_init+0x15c>)
 800279a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279e:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <I2C_init+0x160>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <I2C_init+0x160>)
 80027a6:	f023 030f 	bic.w	r3, r3, #15
 80027aa:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <I2C_init+0x160>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <I2C_init+0x160>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <I2C_init+0x160>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <I2C_init+0x160>)
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80027c4:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <I2C_init+0x160>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <I2C_init+0x160>)
 80027ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ce:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80027d0:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <I2C_init+0x160>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a46      	ldr	r2, [pc, #280]	; (80028f0 <I2C_init+0x160>)
 80027d6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80027da:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80027dc:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <I2C_init+0x160>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a43      	ldr	r2, [pc, #268]	; (80028f0 <I2C_init+0x160>)
 80027e2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80027e6:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <I2C_init+0x160>)
 80027ea:	889b      	ldrh	r3, [r3, #4]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <I2C_init+0x160>)
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <I2C_init+0x160>)
 80027fa:	889b      	ldrh	r3, [r3, #4]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4a3c      	ldr	r2, [pc, #240]	; (80028f0 <I2C_init+0x160>)
 8002800:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002804:	b29b      	uxth	r3, r3
 8002806:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <I2C_init+0x160>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <I2C_init+0x160>)
 800280e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002812:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <I2C_init+0x160>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <I2C_init+0x160>)
 800281a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800281e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <I2C_init+0x160>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <I2C_init+0x160>)
 8002826:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800282a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <I2C_init+0x160>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <I2C_init+0x160>)
 8002832:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002836:	60d3      	str	r3, [r2, #12]
=======
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <I2C_init+0x15c>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <I2C_init+0x15c>)
 800218e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002192:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <I2C_init+0x160>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <I2C_init+0x160>)
 800219a:	f023 030f 	bic.w	r3, r3, #15
 800219e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <I2C_init+0x160>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <I2C_init+0x160>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <I2C_init+0x160>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <I2C_init+0x160>)
 80021b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80021b8:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <I2C_init+0x160>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <I2C_init+0x160>)
 80021be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <I2C_init+0x160>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <I2C_init+0x160>)
 80021ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80021ce:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <I2C_init+0x160>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <I2C_init+0x160>)
 80021d6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80021da:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80021dc:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <I2C_init+0x160>)
 80021de:	889b      	ldrh	r3, [r3, #4]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <I2C_init+0x160>)
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <I2C_init+0x160>)
 80021ee:	889b      	ldrh	r3, [r3, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <I2C_init+0x160>)
 80021f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <I2C_init+0x160>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <I2C_init+0x160>)
 8002202:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002206:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <I2C_init+0x160>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <I2C_init+0x160>)
 800220e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8002212:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <I2C_init+0x160>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <I2C_init+0x160>)
 800221a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800221e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <I2C_init+0x160>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <I2C_init+0x160>)
 8002226:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800222a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
=======
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <I2C_init+0x15c>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <I2C_init+0x15c>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002982:	6153      	str	r3, [r2, #20]

    GPIOB->AFR[8 >> 0x03] &= ~(0x0000000F << ((8 & 0x00000007) * 4)); // Clear alternate function for PB8
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <I2C_init+0x160>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <I2C_init+0x160>)
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[8 >> 0x03] |=  (0x00000004 << ((8 & 0x00000007) * 4)); // Set alternate 4 function for PB8
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <I2C_init+0x160>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <I2C_init+0x160>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] &= ~(0x0000000F << ((9 & 0x00000007) * 4)); // Clear alternate function for PB9
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <I2C_init+0x160>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4a4c      	ldr	r2, [pc, #304]	; (8002ad4 <I2C_init+0x160>)
 80029a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[9 >> 0x03] |=  (0x00000004 << ((9 & 0x00000007) * 4)); // Set alternate 4 function for PB9
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <I2C_init+0x160>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	4a49      	ldr	r2, [pc, #292]	; (8002ad4 <I2C_init+0x160>)
 80029ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB8 and PB9 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear speed register
 80029b4:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <I2C_init+0x160>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <I2C_init+0x160>)
 80029ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80029be:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80029c0:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <I2C_init+0x160>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <I2C_init+0x160>)
 80029c6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80029ca:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (8)     | 0x0001     << (9));        // Clear output type register
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <I2C_init+0x160>)
 80029ce:	889b      	ldrh	r3, [r3, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <I2C_init+0x160>)
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0001     << (8)     | 0x0001     << (9));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <I2C_init+0x160>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4a3c      	ldr	r2, [pc, #240]	; (8002ad4 <I2C_init+0x160>)
 80029e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	8093      	strh	r3, [r2, #4]
    GPIOB->MODER   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear mode register
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <I2C_init+0x160>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <I2C_init+0x160>)
 80029f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80029f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (8 * 2) | 0x00000002 << (9 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <I2C_init+0x160>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <I2C_init+0x160>)
 80029fe:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8002a02:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (8 * 2) | 0x00000003 << (9 * 2));    // Clear push/pull register
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <I2C_init+0x160>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <I2C_init+0x160>)
 8002a0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002a0e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000001 << (8 * 2) | 0x00000001 << (9 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <I2C_init+0x160>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <I2C_init+0x160>)
 8002a16:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002a1a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

    /*************/
    /**** I2C ****/
    /*************/
    RCC->APB1ENR |=  0x00200000; // Enable clock for I2C1
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <I2C_init+0x15c>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <I2C_init+0x15c>)
 800283e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002842:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <I2C_init+0x164>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <I2C_init+0x164>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <I2C_init+0x164>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4927      	ldr	r1, [pc, #156]	; (80028f4 <I2C_init+0x164>)
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <I2C_init+0x168>)
 8002858:	4013      	ands	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <I2C_init+0x164>)
 800285e:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <I2C_init+0x164>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <I2C_init+0x164>)
 8002866:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <I2C_init+0x164>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <I2C_init+0x164>)
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <I2C_init+0x16c>)
 8002870:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <I2C_init+0x164>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <I2C_init+0x164>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <I2C_init+0x164>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <I2C_init+0x164>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <I2C_init+0x164>)
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <I2C_init+0x164>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <I2C_init+0x164>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <I2C_init+0x164>)
 8002898:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 800289c:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <I2C_init+0x164>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <I2C_init+0x164>)
 80028a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a8:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <I2C_init+0x164>)
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <I2C_init+0x164>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <I2C_init+0x164>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <I2C_init+0x164>)
 80028b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028c0:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <I2C_init+0x164>)
 80028c4:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <I2C_init+0x164>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 80028ca:	2201      	movs	r2, #1
 80028cc:	2107      	movs	r1, #7
 80028ce:	2098      	movs	r0, #152	; 0x98
 80028d0:	f7ff fe90 	bl	80025f4 <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 80028d4:	2200      	movs	r2, #0
 80028d6:	210a      	movs	r1, #10
 80028d8:	2098      	movs	r0, #152	; 0x98
 80028da:	f7ff fe8b 	bl	80025f4 <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 80028de:	221f      	movs	r2, #31
 80028e0:	2109      	movs	r1, #9
 80028e2:	2098      	movs	r0, #152	; 0x98
 80028e4:	f7ff fe86 	bl	80025f4 <I2C_Write>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	40005400 	.word	0x40005400
 80028f8:	00cfe0ff 	.word	0x00cfe0ff
 80028fc:	10805e89 	.word	0x10805e89

08002900 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <analogConfigPorts+0x140>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <analogConfigPorts+0x140>)
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	0052      	lsls	r2, r2, #1
 8002920:	2103      	movs	r1, #3
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	43d2      	mvns	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800292e:	400b      	ands	r3, r1
 8002930:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8002932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002936:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 800293e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	0052      	lsls	r2, r2, #1
 8002948:	2103      	movs	r1, #3
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	43d2      	mvns	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002956:	400b      	ands	r3, r1
 8002958:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 800295a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	2103      	movs	r1, #3
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	4611      	mov	r1, r2
 800296c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002970:	430b      	orrs	r3, r1
 8002972:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <analogConfigPorts+0x140>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <analogConfigPorts+0x140>)
 800297a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <analogConfigPorts+0x140>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <analogConfigPorts+0x140>)
 8002986:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <analogConfigPorts+0x140>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <analogConfigPorts+0x140>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 80029a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <analogConfigPorts+0x144>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 80029b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029ba:	f023 030f 	bic.w	r3, r3, #15
 80029be:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 80029c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e002      	b.n	80029dc <analogConfigPorts+0xdc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e2:	dbf8      	blt.n	80029d6 <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 80029e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f2:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 80029f4:	bf00      	nop
 80029f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dafa      	bge.n	80029f6 <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	e002      	b.n	8002a0c <analogConfigPorts+0x10c>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b63      	cmp	r3, #99	; 0x63
 8002a10:	ddf9      	ble.n	8002a06 <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8002a22:	bf00      	nop
 8002a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f8      	beq.n	8002a24 <analogConfigPorts+0x124>
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000
 8002a44:	fdffc007 	.word	0xfdffc007

08002a48 <readPotentiometer>:

uint16_t readPotentiometer(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2201      	movs	r2, #1
 8002a52:	2101      	movs	r1, #1
 8002a54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a58:	f7fe fa22 	bl	8000ea0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002a5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a60:	f7fe fb16 	bl	8001090 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002a64:	bf00      	nop
 8002a66:	2104      	movs	r1, #4
 8002a68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a6c:	f7fe fb2d 	bl	80010ca <ADC_GetFlagStatus>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f7      	beq.n	8002a66 <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8002a76:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a7a:	f7fe fb19 	bl	80010b0 <ADC_GetConversionValue>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002a82:	88fb      	ldrh	r3, [r7, #6]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8002a92:	2309      	movs	r3, #9
 8002a94:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	79fa      	ldrb	r2, [r7, #7]
 8002a9e:	0052      	lsls	r2, r2, #1
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	43d2      	mvns	r2, r2
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8002ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	79fa      	ldrb	r2, [r7, #7]
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	2102      	movs	r1, #2
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 8002acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ad0:	889b      	ldrh	r3, [r3, #4]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002aec:	b292      	uxth	r2, r2
 8002aee:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 8002af0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002af8:	8892      	ldrh	r2, [r2, #4]
 8002afa:	b292      	uxth	r2, r2
 8002afc:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	79fa      	ldrb	r2, [r7, #7]
 8002b06:	0052      	lsls	r2, r2, #1
 8002b08:	2103      	movs	r1, #3
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	43d2      	mvns	r2, r2
 8002b10:	4611      	mov	r1, r2
 8002b12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b16:	400b      	ands	r3, r1
 8002b18:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 8002b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	0052      	lsls	r2, r2, #1
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8002b34:	2307      	movs	r3, #7
 8002b36:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <initRGB+0x1c8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	79fa      	ldrb	r2, [r7, #7]
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	2103      	movs	r1, #3
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	43d2      	mvns	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <initRGB+0x1c8>)
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8002b50:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <initRGB+0x1c8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	0052      	lsls	r2, r2, #1
 8002b58:	2102      	movs	r1, #2
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <initRGB+0x1c8>)
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <initRGB+0x1c8>)
 8002b68:	889b      	ldrh	r3, [r3, #4]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b21a      	sxth	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <initRGB+0x1c8>)
 8002b82:	b292      	uxth	r2, r2
 8002b84:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 8002b86:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <initRGB+0x1c8>)
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <initRGB+0x1c8>)
 8002b8a:	8892      	ldrh	r2, [r2, #4]
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <initRGB+0x1c8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	43d2      	mvns	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <initRGB+0x1c8>)
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <initRGB+0x1c8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <initRGB+0x1c8>)
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <initRGB+0x1cc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	0052      	lsls	r2, r2, #1
 8002bca:	2103      	movs	r1, #3
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	43d2      	mvns	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <initRGB+0x1cc>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <initRGB+0x1cc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	0052      	lsls	r2, r2, #1
 8002be2:	2102      	movs	r1, #2
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <initRGB+0x1cc>)
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <initRGB+0x1cc>)
 8002bf2:	889b      	ldrh	r3, [r3, #4]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	4013      	ands	r3, r2
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <initRGB+0x1cc>)
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 8002c10:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <initRGB+0x1cc>)
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <initRGB+0x1cc>)
 8002c14:	8892      	ldrh	r2, [r2, #4]
 8002c16:	b292      	uxth	r2, r2
 8002c18:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <initRGB+0x1cc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	2103      	movs	r1, #3
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <initRGB+0x1cc>)
 8002c2e:	400b      	ands	r3, r1
 8002c30:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <initRGB+0x1cc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	79fa      	ldrb	r2, [r7, #7]
 8002c38:	0052      	lsls	r2, r2, #1
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <initRGB+0x1cc>)
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	48000800 	.word	0x48000800
 8002c58:	48000400 	.word	0x48000400

08002c5c <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <RGBColor+0x88>)
 8002c66:	8a9b      	ldrh	r3, [r3, #20]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <RGBColor+0x88>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <RGBColor+0x8c>)
 8002c76:	8a9b      	ldrh	r3, [r3, #20]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <RGBColor+0x8c>)
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002c84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c88:	8a9b      	ldrh	r3, [r3, #20]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d104      	bne.n	8002caa <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <RGBColor+0x88>)
 8002ca2:	8a9b      	ldrh	r3, [r3, #20]
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <RGBColor+0x88>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3301      	adds	r3, #1
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d104      	bne.n	8002cbe <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <RGBColor+0x8c>)
 8002cb6:	8a9b      	ldrh	r3, [r3, #20]
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <RGBColor+0x8c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ccc:	8a9b      	ldrh	r3, [r3, #20]
 8002cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	829a      	strh	r2, [r3, #20]
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800

08002cec <writeToFlash>:

//Flash memory
void writeToFlash(uint16_t data, uint32_t address){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8002cf8:	f7fe fa00 	bl	80010fc <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8002cfc:	2034      	movs	r0, #52	; 0x34
 8002cfe:	f7fe fa87 	bl	8001210 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 8002d02:	6838      	ldr	r0, [r7, #0]
 8002d04:	f7fe fa24 	bl	8001150 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6838      	ldr	r0, [r7, #0]
 8002d0e:	f7fe fa51 	bl	80011b4 <FLASH_ProgramHalfWord>
	FLASH_Lock();
 8002d12:	f7fe fa0d 	bl	8001130 <FLASH_Lock>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <readFromFlash>:

uint16_t readFromFlash(uint32_t address){
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	881b      	ldrh	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <spawnEnemy>:
 *
=======
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <I2C_init+0x15c>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <I2C_init+0x15c>)
 8002232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002236:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <I2C_init+0x164>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <I2C_init+0x164>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <I2C_init+0x164>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4927      	ldr	r1, [pc, #156]	; (80022e8 <I2C_init+0x164>)
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <I2C_init+0x168>)
 800224c:	4013      	ands	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <I2C_init+0x164>)
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <I2C_init+0x164>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <I2C_init+0x164>)
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <I2C_init+0x164>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <I2C_init+0x164>)
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <I2C_init+0x16c>)
 8002264:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <I2C_init+0x164>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <I2C_init+0x164>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <I2C_init+0x164>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <I2C_init+0x164>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <I2C_init+0x164>)
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <I2C_init+0x164>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <I2C_init+0x164>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <I2C_init+0x164>)
 800228c:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002290:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <I2C_init+0x164>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <I2C_init+0x164>)
 8002298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229c:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <I2C_init+0x164>)
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <I2C_init+0x164>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <I2C_init+0x164>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <I2C_init+0x164>)
 80022ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022b4:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <I2C_init+0x164>)
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <I2C_init+0x164>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 80022be:	2201      	movs	r2, #1
 80022c0:	2107      	movs	r1, #7
 80022c2:	2098      	movs	r0, #152	; 0x98
 80022c4:	f7ff fe90 	bl	8001fe8 <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 80022c8:	2200      	movs	r2, #0
 80022ca:	210a      	movs	r1, #10
 80022cc:	2098      	movs	r0, #152	; 0x98
 80022ce:	f7ff fe8b 	bl	8001fe8 <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 80022d2:	221f      	movs	r2, #31
 80022d4:	2109      	movs	r1, #9
 80022d6:	2098      	movs	r0, #152	; 0x98
 80022d8:	f7ff fe86 	bl	8001fe8 <I2C_Write>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000400 	.word	0x48000400
 80022e8:	40005400 	.word	0x40005400
 80022ec:	00cfe0ff 	.word	0x00cfe0ff
 80022f0:	10805e89 	.word	0x10805e89

080022f4 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <analogConfigPorts+0x140>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <analogConfigPorts+0x140>)
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 800230a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0052      	lsls	r2, r2, #1
 8002314:	2103      	movs	r1, #3
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	43d2      	mvns	r2, r2
 800231c:	4611      	mov	r1, r2
 800231e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002322:	400b      	ands	r3, r1
 8002324:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8002326:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800232a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8002332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0052      	lsls	r2, r2, #1
 800233c:	2103      	movs	r1, #3
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	43d2      	mvns	r2, r2
 8002344:	4611      	mov	r1, r2
 8002346:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800234a:	400b      	ands	r3, r1
 800234c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 800234e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	0052      	lsls	r2, r2, #1
 8002358:	2103      	movs	r1, #3
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4611      	mov	r1, r2
 8002360:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002364:	430b      	orrs	r3, r1
 8002366:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <analogConfigPorts+0x140>)
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	4a31      	ldr	r2, [pc, #196]	; (8002434 <analogConfigPorts+0x140>)
 800236e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002372:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <analogConfigPorts+0x140>)
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <analogConfigPorts+0x140>)
 800237a:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 800237e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <analogConfigPorts+0x140>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <analogConfigPorts+0x140>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 800238c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <analogConfigPorts+0x144>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 80023a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023ae:	f023 030f 	bic.w	r3, r3, #15
 80023b2:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 80023b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e002      	b.n	80023d0 <analogConfigPorts+0xdc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d6:	dbf8      	blt.n	80023ca <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 80023d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e6:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 80023e8:	bf00      	nop
 80023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	dafa      	bge.n	80023ea <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	e002      	b.n	8002400 <analogConfigPorts+0x10c>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b63      	cmp	r3, #99	; 0x63
 8002404:	ddf9      	ble.n	80023fa <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002406:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8002416:	bf00      	nop
 8002418:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f8      	beq.n	8002418 <analogConfigPorts+0x124>
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000
 8002438:	fdffc007 	.word	0xfdffc007

0800243c <readPotentiometer>:

uint16_t readPotentiometer(){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8002442:	2300      	movs	r3, #0
 8002444:	2201      	movs	r2, #1
 8002446:	2101      	movs	r1, #1
 8002448:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800244c:	f7fe f894 	bl	8000578 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002454:	f7fe f988 	bl	8000768 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002458:	bf00      	nop
 800245a:	2104      	movs	r1, #4
 800245c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002460:	f7fe f99f 	bl	80007a2 <ADC_GetFlagStatus>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f7      	beq.n	800245a <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 800246a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800246e:	f7fe f98b 	bl	8000788 <ADC_GetConversionValue>
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002476:	88fb      	ldrh	r3, [r7, #6]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8002486:	2309      	movs	r3, #9
 8002488:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 800248a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	2103      	movs	r1, #3
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	43d2      	mvns	r2, r2
 800249c:	4611      	mov	r1, r2
 800249e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024a2:	400b      	ands	r3, r1
 80024a4:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 80024a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	0052      	lsls	r2, r2, #1
 80024b0:	2102      	movs	r1, #2
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 80024c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c4:	889b      	ldrh	r3, [r3, #4]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	b21a      	sxth	r2, r3
 80024dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024e0:	b292      	uxth	r2, r2
 80024e2:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 80024e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ec:	8892      	ldrh	r2, [r2, #4]
 80024ee:	b292      	uxth	r2, r2
 80024f0:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 80024f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	0052      	lsls	r2, r2, #1
 80024fc:	2103      	movs	r1, #3
 80024fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002502:	43d2      	mvns	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800250a:	400b      	ands	r3, r1
 800250c:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 800250e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4611      	mov	r1, r2
 8002520:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002524:	430b      	orrs	r3, r1
 8002526:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8002528:	2307      	movs	r3, #7
 800252a:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <initRGB+0x1c8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	0052      	lsls	r2, r2, #1
 8002534:	2103      	movs	r1, #3
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	43d2      	mvns	r2, r2
 800253c:	4611      	mov	r1, r2
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <initRGB+0x1c8>)
 8002540:	400b      	ands	r3, r1
 8002542:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <initRGB+0x1c8>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	0052      	lsls	r2, r2, #1
 800254c:	2102      	movs	r1, #2
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <initRGB+0x1c8>)
 8002556:	430b      	orrs	r3, r1
 8002558:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <initRGB+0x1c8>)
 800255c:	889b      	ldrh	r3, [r3, #4]
 800255e:	b29b      	uxth	r3, r3
 8002560:	b21a      	sxth	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	b21b      	sxth	r3, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	b21b      	sxth	r3, r3
 8002570:	4013      	ands	r3, r2
 8002572:	b21a      	sxth	r2, r3
 8002574:	4b34      	ldr	r3, [pc, #208]	; (8002648 <initRGB+0x1c8>)
 8002576:	b292      	uxth	r2, r2
 8002578:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <initRGB+0x1c8>)
 800257c:	4b32      	ldr	r3, [pc, #200]	; (8002648 <initRGB+0x1c8>)
 800257e:	8892      	ldrh	r2, [r2, #4]
 8002580:	b292      	uxth	r2, r2
 8002582:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <initRGB+0x1c8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	0052      	lsls	r2, r2, #1
 800258c:	2103      	movs	r1, #3
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	43d2      	mvns	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <initRGB+0x1c8>)
 8002598:	400b      	ands	r3, r1
 800259a:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <initRGB+0x1c8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	0052      	lsls	r2, r2, #1
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <initRGB+0x1c8>)
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 80025b2:	2304      	movs	r3, #4
 80025b4:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <initRGB+0x1cc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	0052      	lsls	r2, r2, #1
 80025be:	2103      	movs	r1, #3
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	43d2      	mvns	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <initRGB+0x1cc>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <initRGB+0x1cc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	2102      	movs	r1, #2
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <initRGB+0x1cc>)
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <initRGB+0x1cc>)
 80025e6:	889b      	ldrh	r3, [r3, #4]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4013      	ands	r3, r2
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <initRGB+0x1cc>)
 8002600:	b292      	uxth	r2, r2
 8002602:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <initRGB+0x1cc>)
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <initRGB+0x1cc>)
 8002608:	8892      	ldrh	r2, [r2, #4]
 800260a:	b292      	uxth	r2, r2
 800260c:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <initRGB+0x1cc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	0052      	lsls	r2, r2, #1
 8002616:	2103      	movs	r1, #3
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	43d2      	mvns	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <initRGB+0x1cc>)
 8002622:	400b      	ands	r3, r1
 8002624:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <initRGB+0x1cc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	0052      	lsls	r2, r2, #1
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <initRGB+0x1cc>)
 8002638:	430b      	orrs	r3, r1
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	48000800 	.word	0x48000800
 800264c:	48000400 	.word	0x48000400

08002650 <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <RGBColor+0x88>)
 800265a:	8a9b      	ldrh	r3, [r3, #20]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <RGBColor+0x88>)
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	b29b      	uxth	r3, r3
 8002666:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <RGBColor+0x8c>)
 800266a:	8a9b      	ldrh	r3, [r3, #20]
 800266c:	b29b      	uxth	r3, r3
 800266e:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <RGBColor+0x8c>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	b29b      	uxth	r3, r3
 8002676:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800267c:	8a9b      	ldrh	r3, [r3, #20]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002688:	b29b      	uxth	r3, r3
 800268a:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d104      	bne.n	800269e <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <RGBColor+0x88>)
 8002696:	8a9b      	ldrh	r3, [r3, #20]
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <RGBColor+0x88>)
 800269a:	2200      	movs	r2, #0
 800269c:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3301      	adds	r3, #1
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d104      	bne.n	80026b2 <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <RGBColor+0x8c>)
 80026aa:	8a9b      	ldrh	r3, [r3, #20]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <RGBColor+0x8c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3302      	adds	r3, #2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 80026bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026c0:	8a9b      	ldrh	r3, [r3, #20]
 80026c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026c6:	2200      	movs	r2, #0
 80026c8:	829a      	strh	r2, [r3, #20]
	}
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	48000400 	.word	0x48000400
 80026dc:	48000800 	.word	0x48000800

080026e0 <writeToFlash>:

//Flash memory
void writeToFlash(uint16_t data, uint32_t address){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 80026ec:	f7fe f872 	bl	80007d4 <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 80026f0:	2034      	movs	r0, #52	; 0x34
 80026f2:	f7fe f8f9 	bl	80008e8 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7fe f896 	bl	8000828 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4619      	mov	r1, r3
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f7fe f8c3 	bl	800088c <FLASH_ProgramHalfWord>
	FLASH_Lock();
 8002706:	f7fe f87f 	bl	8000808 <FLASH_Lock>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <readFromFlash>:

uint16_t readFromFlash(uint32_t address){
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	881b      	ldrh	r3, [r3, #0]
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <xValIsValid>:
>>>>>>> Stashed changes
=======
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <I2C_init+0x15c>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <I2C_init+0x15c>)
 8002a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a26:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 &= ~0x00000001;  // Disable I2C1 peripheral during config
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <I2C_init+0x164>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <I2C_init+0x164>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= 0x00CFE0FF;   // Clear config
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <I2C_init+0x164>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4927      	ldr	r1, [pc, #156]	; (8002ad8 <I2C_init+0x164>)
 8002a3a:	4b28      	ldr	r3, [pc, #160]	; (8002adc <I2C_init+0x168>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
    I2C1->CR1 |= 0x00000000;   // Set Analog filter (0x00000000 - Enabled, 0x00001000 - Disabled)
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <I2C_init+0x164>)
 8002a42:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <I2C_init+0x164>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= 0x00 << 8;    // Set digital filter (0x00 - 0x0F)
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <I2C_init+0x164>)
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <I2C_init+0x164>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6013      	str	r3, [r2, #0]
    I2C1->TIMINGR = 0x10805E89 & 0xF0FFFFFF; // Set timing register to 0x10805E89. See reference manual for more
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <I2C_init+0x164>)
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <I2C_init+0x16c>)
 8002a54:	611a      	str	r2, [r3, #16]
    I2C1->CR1  |= 0x00000001;  // Enable I2C1 peripheral
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <I2C_init+0x164>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <I2C_init+0x164>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]
    I2C1->OAR1  = 0x00000000;  // Clear own address register 1
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <I2C_init+0x164>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    I2C1->OAR2  = 0x00000000;  // Clear own address register 2
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <I2C_init+0x164>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 |= 0x00000000;  // Configure for 7-bit address (0x00000000 - 7-bit, 0x00000400 - 10-bit)
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <I2C_init+0x164>)
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <I2C_init+0x164>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0xAB;        // Set own address to 0xAB
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <I2C_init+0x164>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <I2C_init+0x164>)
 8002a7c:	f043 03ab 	orr.w	r3, r3, #171	; 0xab
 8002a80:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x00008000;  // Enable own address acknowledgment
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <I2C_init+0x164>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <I2C_init+0x164>)
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8c:	6093      	str	r3, [r2, #8]
    I2C1->CR1  |= 0x00000000;  // Set mode (0x00000000 - I2C, 0x00200000 - SMBus Device, 0x00100000 - SMBus Host)
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <I2C_init+0x164>)
 8002a90:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <I2C_init+0x164>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6013      	str	r3, [r2, #0]
    I2C1->CR2  &= 0x07FF7FFF;  // Clear config 2
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <I2C_init+0x164>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <I2C_init+0x164>)
 8002a9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aa4:	6053      	str	r3, [r2, #4]
    I2C1->CR2  |= 0x00000000;  // Configure acknowledgment (0x00000000 - Enabled, 0x00008000 - Disabled)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <I2C_init+0x164>)
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <I2C_init+0x164>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	6053      	str	r3, [r2, #4]

	I2C_Write(0x98, 0x07, 0x01); //Turn on acc
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2107      	movs	r1, #7
 8002ab2:	2098      	movs	r0, #152	; 0x98
 8002ab4:	f7ff fe90 	bl	80027d8 <I2C_Write>
	I2C_Write(0x98, 0x0A, 0x00); //Enable all tab axis
 8002ab8:	2200      	movs	r2, #0
 8002aba:	210a      	movs	r1, #10
 8002abc:	2098      	movs	r0, #152	; 0x98
 8002abe:	f7ff fe8b 	bl	80027d8 <I2C_Write>
	I2C_Write(0x98, 0x09, 0x1F); //Set tabthreshold to max value 11111
 8002ac2:	221f      	movs	r2, #31
 8002ac4:	2109      	movs	r1, #9
 8002ac6:	2098      	movs	r0, #152	; 0x98
 8002ac8:	f7ff fe86 	bl	80027d8 <I2C_Write>
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	00cfe0ff 	.word	0x00cfe0ff
 8002ae0:	10805e89 	.word	0x10805e89

08002ae4 <analogConfigPorts>:

//Potentiometers  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void analogConfigPorts(){
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <analogConfigPorts+0x140>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <analogConfigPorts+0x140>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	6153      	str	r3, [r2, #20]

	int pin = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	0052      	lsls	r2, r2, #1
 8002b04:	2103      	movs	r1, #3
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	43d2      	mvns	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b12:	400b      	ands	r3, r1
 8002b14:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000000 << (2*pin);
 8002b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (2*pin));
 8002b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	0052      	lsls	r2, r2, #1
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	43d2      	mvns	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000003 << (2*pin);
 8002b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	2103      	movs	r1, #3
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]

	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <analogConfigPorts+0x140>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <analogConfigPorts+0x140>)
 8002b5e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <analogConfigPorts+0x140>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <analogConfigPorts+0x140>)
 8002b6a:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8002b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <analogConfigPorts+0x140>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <analogConfigPorts+0x140>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6153      	str	r3, [r2, #20]


	ADC1->CR = 0x00000000; // Clear CR register
 8002b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <analogConfigPorts+0x144>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b9e:	f023 030f 	bic.w	r3, r3, #15
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002ba4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <analogConfigPorts+0xdc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	dbf8      	blt.n	8002bba <analogConfigPorts+0xd6>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8002bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd6:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8002bd8:	bf00      	nop
 8002bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	dafa      	bge.n	8002bda <analogConfigPorts+0xf6>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e002      	b.n	8002bf0 <analogConfigPorts+0x10c>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b63      	cmp	r3, #99	; 0x63
 8002bf4:	ddf9      	ble.n	8002bea <analogConfigPorts+0x106>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8002c06:	bf00      	nop
 8002c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f8      	beq.n	8002c08 <analogConfigPorts+0x124>
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	fdffc007 	.word	0xfdffc007

08002c2c <readPotentiometer>:

uint16_t readPotentiometer(){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8002c32:	2300      	movs	r3, #0
 8002c34:	2201      	movs	r2, #1
 8002c36:	2101      	movs	r1, #1
 8002c38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c3c:	f7fe f88a 	bl	8000d54 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002c40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c44:	f7fe f97e 	bl	8000f44 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002c48:	bf00      	nop
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c50:	f7fe f995 	bl	8000f7e <ADC_GetFlagStatus>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f7      	beq.n	8002c4a <readPotentiometer+0x1e>
	uint16_t potVal = ADC_GetConversionValue(ADC1);
 8002c5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c5e:	f7fe f981 	bl	8000f64 <ADC_GetConversionValue>
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
	return potVal;
 8002c66:	88fb      	ldrh	r3, [r7, #6]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <initRGB>:

//LED vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
void initRGB(){
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
	//setup PA9 (Blue)
		uint8_t pin = 9;
 8002c76:	2309      	movs	r3, #9
 8002c78:	71fb      	strb	r3, [r7, #7]
		GPIOA->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	0052      	lsls	r2, r2, #1
 8002c84:	2103      	movs	r1, #3
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	43d2      	mvns	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c92:	400b      	ands	r3, r1
 8002c94:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0x00000002 << (2*pin));
 8002c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	0052      	lsls	r2, r2, #1
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]
		GPIOA->OTYPER &= ~(0x0001 << (pin));
 8002cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb4:	889b      	ldrh	r3, [r3, #4]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b21a      	sxth	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	809a      	strh	r2, [r3, #4]
		GPIOA->OTYPER |= 0x0000 << (pin);
 8002cd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cdc:	8892      	ldrh	r2, [r2, #4]
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	809a      	strh	r2, [r3, #4]
		GPIOA->MODER &= ~(0x00000003 << (2*pin));
 8002ce2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	79fa      	ldrb	r2, [r7, #7]
 8002cea:	0052      	lsls	r2, r2, #1
 8002cec:	2103      	movs	r1, #3
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	43d2      	mvns	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00000001 << (2*pin);
 8002cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	0052      	lsls	r2, r2, #1
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6013      	str	r3, [r2, #0]

		//setup PC7 (Green)
		pin = 7;
 8002d18:	2307      	movs	r3, #7
 8002d1a:	71fb      	strb	r3, [r7, #7]
		GPIOC->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <initRGB+0x1c8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	0052      	lsls	r2, r2, #1
 8002d24:	2103      	movs	r1, #3
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	43d2      	mvns	r2, r2
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <initRGB+0x1c8>)
 8002d30:	400b      	ands	r3, r1
 8002d32:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (0x00000002 << (2*pin));
 8002d34:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <initRGB+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	0052      	lsls	r2, r2, #1
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4611      	mov	r1, r2
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <initRGB+0x1c8>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6093      	str	r3, [r2, #8]
		GPIOC->OTYPER &= ~(0x0001 << (pin));
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <initRGB+0x1c8>)
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	4013      	ands	r3, r2
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <initRGB+0x1c8>)
 8002d66:	b292      	uxth	r2, r2
 8002d68:	809a      	strh	r2, [r3, #4]
		GPIOC->OTYPER |= 0x0000 << (pin);
 8002d6a:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <initRGB+0x1c8>)
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <initRGB+0x1c8>)
 8002d6e:	8892      	ldrh	r2, [r2, #4]
 8002d70:	b292      	uxth	r2, r2
 8002d72:	809a      	strh	r2, [r3, #4]
		GPIOC->MODER &= ~(0x00000003 << (2*pin));
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <initRGB+0x1c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	0052      	lsls	r2, r2, #1
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	43d2      	mvns	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <initRGB+0x1c8>)
 8002d88:	400b      	ands	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x00000001 << (2*pin);
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <initRGB+0x1c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	0052      	lsls	r2, r2, #1
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <initRGB+0x1c8>)
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6013      	str	r3, [r2, #0]

		//setup PB4 (Red)
		pin = 4;
 8002da2:	2304      	movs	r3, #4
 8002da4:	71fb      	strb	r3, [r7, #7]
		GPIOB->OSPEEDR &= ~(0x00000003 << (2*pin));
 8002da6:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <initRGB+0x1cc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	0052      	lsls	r2, r2, #1
 8002dae:	2103      	movs	r1, #3
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	43d2      	mvns	r2, r2
 8002db6:	4611      	mov	r1, r2
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <initRGB+0x1cc>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (0x00000002 << (2*pin));
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <initRGB+0x1cc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	0052      	lsls	r2, r2, #1
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <initRGB+0x1cc>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]
		GPIOB->OTYPER &= ~(0x0001 << (pin));
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <initRGB+0x1cc>)
 8002dd6:	889b      	ldrh	r3, [r3, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4013      	ands	r3, r2
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <initRGB+0x1cc>)
 8002df0:	b292      	uxth	r2, r2
 8002df2:	809a      	strh	r2, [r3, #4]
		GPIOB->OTYPER |= 0x0000 << (pin);
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <initRGB+0x1cc>)
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <initRGB+0x1cc>)
 8002df8:	8892      	ldrh	r2, [r2, #4]
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	809a      	strh	r2, [r3, #4]
		GPIOB->MODER &= ~(0x00000003 << (2*pin));
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <initRGB+0x1cc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	0052      	lsls	r2, r2, #1
 8002e06:	2103      	movs	r1, #3
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	43d2      	mvns	r2, r2
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <initRGB+0x1cc>)
 8002e12:	400b      	ands	r3, r1
 8002e14:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= 0x00000001 << (2*pin);
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <initRGB+0x1cc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	0052      	lsls	r2, r2, #1
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <initRGB+0x1cc>)
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	48000400 	.word	0x48000400

08002e40 <RGBColor>:

//Sets the color of the LED based on an array [R, G, B]
void RGBColor(uint8_t color[]){
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	//Resets LED
	GPIOB->ODR |= (0x0001 << 4);
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <RGBColor+0x88>)
 8002e4a:	8a9b      	ldrh	r3, [r3, #20]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <RGBColor+0x88>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8293      	strh	r3, [r2, #20]
	GPIOC->ODR |= (0x0001 << 7);
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <RGBColor+0x8c>)
 8002e5a:	8a9b      	ldrh	r3, [r3, #20]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <RGBColor+0x8c>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8293      	strh	r3, [r2, #20]
	GPIOA->ODR |= (0x0001 << 9);
 8002e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e6c:	8a9b      	ldrh	r3, [r3, #20]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8293      	strh	r3, [r2, #20]

	if(color[0] == 1){ //Red PB4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d104      	bne.n	8002e8e <RGBColor+0x4e>
		GPIOB->ODR &= (0x0000 << 4);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <RGBColor+0x88>)
 8002e86:	8a9b      	ldrh	r3, [r3, #20]
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <RGBColor+0x88>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	829a      	strh	r2, [r3, #20]
	}
	if(color[1] == 1){ //Green C7
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3301      	adds	r3, #1
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d104      	bne.n	8002ea2 <RGBColor+0x62>
		GPIOC->ODR &= (0x0000 << 7);
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <RGBColor+0x8c>)
 8002e9a:	8a9b      	ldrh	r3, [r3, #20]
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <RGBColor+0x8c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	829a      	strh	r2, [r3, #20]
	}
	if(color[2] == 1){ //Blue A9
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <RGBColor+0x7a>
		GPIOA->ODR &= (0x000 << 9);
 8002eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eb0:	8a9b      	ldrh	r3, [r3, #20]
 8002eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	829a      	strh	r2, [r3, #20]
	}
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	48000800 	.word	0x48000800

08002ed0 <writeToFlash>:

//Flash memory
void writeToFlash(uint16_t data, uint32_t address){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8002edc:	f7fe f868 	bl	8000fb0 <FLASH_Unlock>
	FLASH_ClearFlag( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8002ee0:	2034      	movs	r0, #52	; 0x34
 8002ee2:	f7fe f8ef 	bl	80010c4 <FLASH_ClearFlag>
	FLASH_ErasePage(address);
 8002ee6:	6838      	ldr	r0, [r7, #0]
 8002ee8:	f7fe f88c 	bl	8001004 <FLASH_ErasePage>
	FLASH_ProgramHalfWord(address, data);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f7fe f8b9 	bl	8001068 <FLASH_ProgramHalfWord>
	FLASH_Lock();
 8002ef6:	f7fe f875 	bl	8000fe4 <FLASH_Lock>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <readFromFlash>:

uint16_t readFromFlash(uint32_t address){
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return *(uint16_t *)address;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	0000      	movs	r0, r0
 8002f1c:	0000      	movs	r0, r0
	...

08002f20 <setFreq>:

void setFreq(uint16_t freq) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
	uint32_t reload = 64e6 / freq / (9 + 1) - 1;
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd faf9 	bl	8000524 <__aeabi_i2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	a11c      	add	r1, pc, #112	; (adr r1, 8002fa8 <setFreq+0x88>)
 8002f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f3c:	f7fd fc86 	bl	800084c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <setFreq+0x80>)
 8002f4e:	f7fd fc7d 	bl	800084c <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <setFreq+0x84>)
 8002f60:	f7fd f992 	bl	8000288 <__aeabi_dsub>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fd56 	bl	8000a1c <__aeabi_d2uiz>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
	TIM2->ARR = reload; // Set auto reload value
 8002f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR3 = reload/2; // Set compare register
 8002f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->EGR |= 0x01;
 8002f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6153      	str	r3, [r2, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40240000 	.word	0x40240000
 8002fa4:	3ff00000 	.word	0x3ff00000
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	418e8480 	.word	0x418e8480

08002fb0 <toggleBuzzer>:

void toggleBuzzer(uint8_t on){
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	if(on == 1){
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10a      	bne.n	8002fd6 <toggleBuzzer+0x26>
		TIM2->CR1 |= 0x0001; //enable
 8002fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]
	}else{
		TIM2->CR1 &= ~(0x0001); //disable
	}
}
 8002fd4:	e009      	b.n	8002fea <toggleBuzzer+0x3a>
		TIM2->CR1 &= ~(0x0001); //disable
 8002fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <xValIsValid>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"enemy.h"
<<<<<<< Updated upstream
void spawnEnemy(gameState_t* gameState){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 8002d40:	f002 fe3a 	bl	80059b8 <rand>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <spawnEnemy+0xe4>)
 8002d48:	fb82 1203 	smull	r1, r2, r2, r3
 8002d4c:	1151      	asrs	r1, r2, #5
 8002d4e:	17da      	asrs	r2, r3, #31
 8002d50:	1a8a      	subs	r2, r1, r2
 8002d52:	2164      	movs	r1, #100	; 0x64
 8002d54:	fb01 f202 	mul.w	r2, r1, r2
 8002d58:	1a9a      	subs	r2, r3, r2
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	77fb      	strb	r3, [r7, #31]
	if(shouldGenEnemy == 0){
 8002d5e:	7ffb      	ldrb	r3, [r7, #31]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d156      	bne.n	8002e12 <spawnEnemy+0xda>
		//TODO: Fix tilfældighedsgenerator
		uint16_t enemyPos = (rand() % 149) + 1;
 8002d64:	f002 fe28 	bl	80059b8 <rand>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	; (8002e20 <spawnEnemy+0xe8>)
 8002d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d70:	10d1      	asrs	r1, r2, #3
 8002d72:	17da      	asrs	r2, r3, #31
 8002d74:	1a8a      	subs	r2, r1, r2
 8002d76:	2195      	movs	r1, #149	; 0x95
 8002d78:	fb01 f202 	mul.w	r2, r1, r2
 8002d7c:	1a9a      	subs	r2, r3, r2
 8002d7e:	b293      	uxth	r3, r2
 8002d80:	3301      	adds	r3, #1
 8002d82:	83bb      	strh	r3, [r7, #28]

<<<<<<< Updated upstream
		enemy_t* enemy = malloc(sizeof(enemy_t));
 8002d84:	2014      	movs	r0, #20
 8002d86:	f002 fc83 	bl	8005690 <malloc>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 8002d8e:	2008      	movs	r0, #8
 8002d90:	f002 fc7e 	bl	8005690 <malloc>
 8002d94:	4603      	mov	r3, r0
 8002d96:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 8002d98:	8bbb      	ldrh	r3, [r7, #28]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f904 	bl	8002fa8 <intToFp>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 8002da6:	2006      	movs	r0, #6
 8002da8:	f000 f8fe 	bl	8002fa8 <intToFp>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8002db8:	2008      	movs	r0, #8
 8002dba:	f002 fc69 	bl	8005690 <malloc>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f8f0 	bl	8002fa8 <intToFp>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dd4:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8002ddc:	2008      	movs	r0, #8
 8002dde:	f002 fc57 	bl	8005690 <malloc>
 8002de2:	4603      	mov	r3, r0
 8002de4:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <spawnEnemy+0xec>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2264      	movs	r2, #100	; 0x64
 8002e08:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 fb68 	bl	80044e2 <appendEnemy>
	}
}
 8002e12:	bf00      	nop
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	51eb851f 	.word	0x51eb851f
 8002e20:	0dbeb61f 	.word	0x0dbeb61f
 8002e24:	200001cc 	.word	0x200001cc

08002e28 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002e36:	e01c      	b.n	8002e72 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	440a      	add	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	440a      	add	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1df      	bne.n	8002e38 <updateEnemy+0x10>
	}
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b092      	sub	sp, #72	; 0x48
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002e96:	e051      	b.n	8002f3c <shootEnemy+0xb4>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	7b12      	ldrb	r2, [r2, #12]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <shootEnemy+0xc4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d243      	bcs.n	8002f36 <shootEnemy+0xae>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 f87a 	bl	8002fa8 <intToFp>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f000 f875 	bl	8002fa8 <intToFp>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685c      	ldr	r4, [r3, #4]
 8002ed4:	2004      	movs	r0, #4
 8002ed6:	f000 f867 	bl	8002fa8 <intToFp>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4423      	add	r3, r4
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eec:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002efc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f0c:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 8002f10:	687d      	ldr	r5, [r7, #4]
 8002f12:	466c      	mov	r4, sp
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f26:	4628      	mov	r0, r5
 8002f28:	f001 faa8 	bl	800447c <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <shootEnemy+0xc4>)
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1aa      	bne.n	8002e98 <shootEnemy+0x10>
	}
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3738      	adds	r7, #56	; 0x38
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4c:	200001cc 	.word	0x200001cc

08002f50 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002f5e:	e01b      	b.n	8002f98 <detectCityHit+0x48>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f832 	bl	8002fd2 <fpToInt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b4f      	cmp	r3, #79	; 0x4f
 8002f72:	dd0e      	ble.n	8002f92 <detectCityHit+0x42>
			gameState->cityLives--;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			deleteEnemyNode(gameState, thisNode);
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 fada 	bl	8004540 <deleteEnemyNode>
			drawhearth(gameState);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fae5 	bl	800355c <drawhearth>
		}
		thisNode = thisNode->nextEnemyNode;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e0      	bne.n	8002f60 <detectCityHit+0x10>
	}
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <intToFp>:
=======

uint8_t xValIsValid(uint8_t xVal, uint8_t objectWidth){ //ensure powerups and enemies dont spawn over the moon
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	460a      	mov	r2, r1
 8002734:	71fb      	strb	r3, [r7, #7]
 8002736:	4613      	mov	r3, r2
 8002738:	71bb      	strb	r3, [r7, #6]
	if ((xVal>=2 && xVal<=63-objectWidth) || (xVal>=77 && xVal<=screenWidth)){
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d905      	bls.n	800274c <xValIsValid+0x22>
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	79bb      	ldrb	r3, [r7, #6]
 8002744:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002748:	429a      	cmp	r2, r3
 800274a:	dd05      	ble.n	8002758 <xValIsValid+0x2e>
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b4c      	cmp	r3, #76	; 0x4c
 8002750:	d904      	bls.n	800275c <xValIsValid+0x32>
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b9c      	cmp	r3, #156	; 0x9c
 8002756:	d801      	bhi.n	800275c <xValIsValid+0x32>
		return 1;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <xValIsValid+0x34>
	} else {
		return 0;
 800275c:	2300      	movs	r3, #0
	}
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <spawnEnemy>:
void spawnEnemy(gameState_t* gameState){
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 100;      // Returns a pseudo-random integer [0:32].
 8002774:	f003 fa9a 	bl	8005cac <rand>
 8002778:	4603      	mov	r3, r0
 800277a:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <spawnEnemy+0xf8>)
 800277c:	fb82 1203 	smull	r1, r2, r2, r3
 8002780:	1151      	asrs	r1, r2, #5
 8002782:	17da      	asrs	r2, r3, #31
 8002784:	1a8a      	subs	r2, r1, r2
 8002786:	2164      	movs	r1, #100	; 0x64
 8002788:	fb01 f202 	mul.w	r2, r1, r2
 800278c:	1a9a      	subs	r2, r3, r2
 800278e:	4613      	mov	r3, r2
 8002790:	77bb      	strb	r3, [r7, #30]
	if(shouldGenEnemy == 0){
 8002792:	7fbb      	ldrb	r3, [r7, #30]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d160      	bne.n	800285a <spawnEnemy+0xee>
		uint8_t enemyPos;

		while(!xValIsValid(enemyPos, 7)){
 8002798:	e00f      	b.n	80027ba <spawnEnemy+0x4e>
			enemyPos  = (rand() % 149) + 1;
 800279a:	f003 fa87 	bl	8005cac <rand>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <spawnEnemy+0xfc>)
 80027a2:	fb82 1203 	smull	r1, r2, r2, r3
 80027a6:	10d1      	asrs	r1, r2, #3
 80027a8:	17da      	asrs	r2, r3, #31
 80027aa:	1a8a      	subs	r2, r1, r2
 80027ac:	2195      	movs	r1, #149	; 0x95
 80027ae:	fb01 f202 	mul.w	r2, r1, r2
 80027b2:	1a9a      	subs	r2, r3, r2
 80027b4:	b2d3      	uxtb	r3, r2
 80027b6:	3301      	adds	r3, #1
 80027b8:	77fb      	strb	r3, [r7, #31]
		while(!xValIsValid(enemyPos, 7)){
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
 80027bc:	2107      	movs	r1, #7
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ffb3 	bl	800272a <xValIsValid>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0e7      	beq.n	800279a <spawnEnemy+0x2e>
=======
uint8_t xValIsValid(uint8_t xVal, uint8_t objectWidth){ //ensure powerups and enemies dont spawn over the moon
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460a      	mov	r2, r1
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	4613      	mov	r3, r2
 8003004:	71bb      	strb	r3, [r7, #6]
	if ((xVal>=2 && xVal<=63-objectWidth) || (xVal>=77 && xVal<=screenWidth)){
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d905      	bls.n	8003018 <xValIsValid+0x22>
 800300c:	79fa      	ldrb	r2, [r7, #7]
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003014:	429a      	cmp	r2, r3
 8003016:	dd05      	ble.n	8003024 <xValIsValid+0x2e>
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b4c      	cmp	r3, #76	; 0x4c
 800301c:	d904      	bls.n	8003028 <xValIsValid+0x32>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b9c      	cmp	r3, #156	; 0x9c
 8003022:	d801      	bhi.n	8003028 <xValIsValid+0x32>
		return 1;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <xValIsValid+0x34>
	} else {
		return 0;
 8003028:	2300      	movs	r3, #0
	}
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <spawnEnemy>:
void spawnEnemy(gameState_t* gameState){
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	uint8_t shouldGenEnemy = rand() % 33;      // Returns a pseudo-random integer [0:32].
 8003040:	f003 fb4e 	bl	80066e0 <rand>
 8003044:	4602      	mov	r2, r0
 8003046:	4b48      	ldr	r3, [pc, #288]	; (8003168 <spawnEnemy+0x130>)
 8003048:	fb83 1302 	smull	r1, r3, r3, r2
 800304c:	10d9      	asrs	r1, r3, #3
 800304e:	17d3      	asrs	r3, r2, #31
 8003050:	1ac9      	subs	r1, r1, r3
 8003052:	460b      	mov	r3, r1
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	440b      	add	r3, r1
 8003058:	1ad1      	subs	r1, r2, r3
 800305a:	460b      	mov	r3, r1
 800305c:	77bb      	strb	r3, [r7, #30]
	if(shouldGenEnemy == 0){
 800305e:	7fbb      	ldrb	r3, [r7, #30]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d17d      	bne.n	8003160 <spawnEnemy+0x128>
		uint8_t enemyPos = -1;
 8003064:	23ff      	movs	r3, #255	; 0xff
 8003066:	77fb      	strb	r3, [r7, #31]

		while(!xValIsValid(enemyPos, 7)){
 8003068:	e00f      	b.n	800308a <spawnEnemy+0x52>
			enemyPos  = (rand() % 149) + 1;
 800306a:	f003 fb39 	bl	80066e0 <rand>
 800306e:	4603      	mov	r3, r0
 8003070:	4a3e      	ldr	r2, [pc, #248]	; (800316c <spawnEnemy+0x134>)
 8003072:	fb82 1203 	smull	r1, r2, r2, r3
 8003076:	10d1      	asrs	r1, r2, #3
 8003078:	17da      	asrs	r2, r3, #31
 800307a:	1a8a      	subs	r2, r1, r2
 800307c:	2195      	movs	r1, #149	; 0x95
 800307e:	fb01 f202 	mul.w	r2, r1, r2
 8003082:	1a9a      	subs	r2, r3, r2
 8003084:	b2d3      	uxtb	r3, r2
 8003086:	3301      	adds	r3, #1
 8003088:	77fb      	strb	r3, [r7, #31]
		while(!xValIsValid(enemyPos, 7)){
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	2107      	movs	r1, #7
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ffb1 	bl	8002ff6 <xValIsValid>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0e7      	beq.n	800306a <spawnEnemy+0x32>
>>>>>>> Stashed changes
		}


		enemy_t* enemy = malloc(sizeof(enemy_t));
<<<<<<< Updated upstream
 80027ca:	2014      	movs	r0, #20
 80027cc:	f003 f8da 	bl	8005984 <malloc>
 80027d0:	4603      	mov	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 80027d4:	2008      	movs	r0, #8
 80027d6:	f003 f8d5 	bl	8005984 <malloc>
 80027da:	4603      	mov	r3, r0
 80027dc:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 80027de:	7ffb      	ldrb	r3, [r7, #31]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f935 	bl	8002a52 <intToFp>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 80027ee:	2006      	movs	r0, #6
 80027f0:	f000 f92f 	bl	8002a52 <intToFp>
 80027f4:	4602      	mov	r2, r0
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]


		vector_t* vEnemy = malloc(sizeof(vector_t));
 8002800:	2008      	movs	r0, #8
 8002802:	f003 f8bf 	bl	8005984 <malloc>
 8002806:	4603      	mov	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
		vEnemy->x = intToFp(0);
 800280a:	2000      	movs	r0, #0
 800280c:	f000 f921 	bl	8002a52 <intToFp>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	601a      	str	r2, [r3, #0]
		vEnemy->y = 0x00004000 * yScale;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800281c:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 8002824:	2008      	movs	r0, #8
 8002826:	f003 f8ad 	bl	8005984 <malloc>
 800282a:	4603      	mov	r3, r0
 800282c:	60fb      	str	r3, [r7, #12]
		newPos->x = pos->x;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <spawnEnemy+0x100>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2264      	movs	r2, #100	; 0x64
 8002850:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f001 fcbc 	bl	80041d2 <appendEnemy>
	}
}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	51eb851f 	.word	0x51eb851f
 8002868:	0dbeb61f 	.word	0x0dbeb61f
 800286c:	200001c8 	.word	0x200001c8

08002870 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800287e:	e01c      	b.n	80028ba <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	440a      	add	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	440a      	add	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1df      	bne.n	8002880 <updateEnemy+0x10>
	}
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80028de:	e05a      	b.n	8002996 <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	7b12      	ldrb	r2, [r2, #12]
 80028ec:	441a      	add	r2, r3
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <shootEnemy+0xd8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d24c      	bcs.n	8002990 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f8ab 	bl	8002a52 <intToFp>
 80028fc:	4603      	mov	r3, r0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002900:	2002      	movs	r0, #2
 8002902:	f000 f8a6 	bl	8002a52 <intToFp>
 8002906:	4603      	mov	r3, r0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685c      	ldr	r4, [r3, #4]
 800291c:	2004      	movs	r0, #4
 800291e:	f000 f898 	bl	8002a52 <intToFp>
 8002922:	4603      	mov	r3, r0
 8002924:	4423      	add	r3, r4
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	f107 0308 	add.w	r3, r7, #8
 8002940:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002948:	e883 0003 	stmia.w	r3, {r0, r1}
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002958:	e883 0003 	stmia.w	r3, {r0, r1}
 800295c:	f107 0318 	add.w	r3, r7, #24
 8002960:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002968:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 800296c:	687d      	ldr	r5, [r7, #4]
 800296e:	466c      	mov	r4, sp
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	4628      	mov	r0, r5
 8002982:	f001 fbf3 	bl	800416c <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <shootEnemy+0xd8>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1a1      	bne.n	80028e0 <shootEnemy+0x10>
	}
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdb0      	pop	{r4, r5, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200001c8 	.word	0x200001c8

080029ac <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 80029ba:	e042      	b.n	8002a42 <detectCityHit+0x96>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f859 	bl	8002a7c <fpToInt>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b4f      	cmp	r3, #79	; 0x4f
 80029ce:	dd35      	ble.n	8002a3c <detectCityHit+0x90>
			gameState->cityLives--;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			if(gameState->cityLives == 2){
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d10f      	bne.n	8002a0a <detectCityHit+0x5e>
				gotoxy(1, 42);
 80029ea:	212a      	movs	r1, #42	; 0x2a
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe fd6f 	bl	80014d0 <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e005      	b.n	8002a04 <detectCityHit+0x58>
					printf(" ");
 80029f8:	2020      	movs	r0, #32
 80029fa:	f003 f89d 	bl	8005b38 <putchar>
				for(int i = 0; i<screenWidth;i++){
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3301      	adds	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b9b      	cmp	r3, #155	; 0x9b
 8002a08:	ddf6      	ble.n	80029f8 <detectCityHit+0x4c>
				}
			}
			if(gameState->cityLives == 1){
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10f      	bne.n	8002a34 <detectCityHit+0x88>
				gotoxy(1, 43);
 8002a14:	212b      	movs	r1, #43	; 0x2b
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7fe fd5a 	bl	80014d0 <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e005      	b.n	8002a2e <detectCityHit+0x82>
					printf(" ");
 8002a22:	2020      	movs	r0, #32
 8002a24:	f003 f888 	bl	8005b38 <putchar>
				for(int i = 0; i<screenWidth;i++){
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b9b      	cmp	r3, #155	; 0x9b
 8002a32:	ddf6      	ble.n	8002a22 <detectCityHit+0x76>
				}
			}
			deleteEnemyNode(gameState, thisNode);
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f001 fbfa 	bl	8004230 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1b9      	bne.n	80029bc <detectCityHit+0x10>
	}
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <intToFp>:
>>>>>>> Stashed changes
=======
 800309a:	2014      	movs	r0, #20
 800309c:	f003 f98c 	bl	80063b8 <malloc>
 80030a0:	4603      	mov	r3, r0
 80030a2:	61bb      	str	r3, [r7, #24]
		position_t* pos = malloc(sizeof(position_t));
 80030a4:	2008      	movs	r0, #8
 80030a6:	f003 f987 	bl	80063b8 <malloc>
 80030aa:	4603      	mov	r3, r0
 80030ac:	617b      	str	r3, [r7, #20]
		pos->x = intToFp(enemyPos);
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f951 	bl	800335a <intToFp>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	601a      	str	r2, [r3, #0]
		pos->y = intToFp(3*yScale);
 80030be:	2006      	movs	r0, #6
 80030c0:	f000 f94b 	bl	800335a <intToFp>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	605a      	str	r2, [r3, #4]
		enemy->position = pos;
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]


		uint32_t levelMultiplier = fpMultiply(intToFp(gameState->score/100), 0x00004000) + intToFp(1); //level * 0.25 + 1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <spawnEnemy+0x138>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f93b 	bl	800335a <intToFp>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f96b 	bl	80033c6 <fpMultiply>
 80030f0:	4604      	mov	r4, r0
 80030f2:	2001      	movs	r0, #1
 80030f4:	f000 f931 	bl	800335a <intToFp>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4423      	add	r3, r4
 80030fc:	613b      	str	r3, [r7, #16]
		vector_t* vEnemy = malloc(sizeof(vector_t));
 80030fe:	2008      	movs	r0, #8
 8003100:	f003 f95a 	bl	80063b8 <malloc>
 8003104:	4603      	mov	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]
		vEnemy->x = intToFp(0);
 8003108:	2000      	movs	r0, #0
 800310a:	f000 f926 	bl	800335a <intToFp>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	601a      	str	r2, [r3, #0]
		vEnemy->y = fpMultiply((0x00004000 * yScale), levelMultiplier);
 8003114:	6939      	ldr	r1, [r7, #16]
 8003116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800311a:	f000 f954 	bl	80033c6 <fpMultiply>
 800311e:	4602      	mov	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	605a      	str	r2, [r3, #4]
		enemy->velocity  = vEnemy;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	609a      	str	r2, [r3, #8]

		position_t* newPos = malloc(sizeof(position_t));
 800312a:	2008      	movs	r0, #8
 800312c:	f003 f944 	bl	80063b8 <malloc>
 8003130:	4603      	mov	r3, r0
 8003132:	60bb      	str	r3, [r7, #8]
		newPos->x = pos->x;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	601a      	str	r2, [r3, #0]
		newPos->y = pos->y;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	605a      	str	r2, [r3, #4]
		enemy->nextPosition = newPos;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	605a      	str	r2, [r3, #4]

		enemy->lastShotTime = runtime;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <spawnEnemy+0x13c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	611a      	str	r2, [r3, #16]
		enemy->firingRate = 100;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2264      	movs	r2, #100	; 0x64
 8003156:	731a      	strb	r2, [r3, #12]
		appendEnemy(gameState, enemy);
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 fcd1 	bl	8004b02 <appendEnemy>
	}
}
 8003160:	bf00      	nop
 8003162:	3724      	adds	r7, #36	; 0x24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	3e0f83e1 	.word	0x3e0f83e1
 800316c:	0dbeb61f 	.word	0x0dbeb61f
 8003170:	51eb851f 	.word	0x51eb851f
 8003174:	200001c8 	.word	0x200001c8

08003178 <updateEnemy>:

void updateEnemy(gameState_t* gameState){
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003186:	e01c      	b.n	80031c2 <updateEnemy+0x4a>
		thisNode->enemy->nextPosition->x = thisNode->enemy->position->x + thisNode->enemy->velocity->x;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	440a      	add	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
		thisNode->enemy->nextPosition->y = thisNode->enemy->position->y + thisNode->enemy->velocity->y;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	440a      	add	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1df      	bne.n	8003188 <updateEnemy+0x10>
	}
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <shootEnemy>:

void shootEnemy(gameState_t* gameState){
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b092      	sub	sp, #72	; 0x48
 80031dc:	af04      	add	r7, sp, #16
 80031de:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 80031e6:	e05a      	b.n	800329e <shootEnemy+0xc6>
		if(thisNode->enemy->lastShotTime + thisNode->enemy->firingRate < runtime){
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	7b12      	ldrb	r2, [r2, #12]
 80031f4:	441a      	add	r2, r3
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <shootEnemy+0xd8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d24c      	bcs.n	8003298 <shootEnemy+0xc0>
			vector_t bulletVector = {intToFp(0), intToFp(2)};
 80031fe:	2000      	movs	r0, #0
 8003200:	f000 f8ab 	bl	800335a <intToFp>
 8003204:	4603      	mov	r3, r0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	2002      	movs	r0, #2
 800320a:	f000 f8a6 	bl	800335a <intToFp>
 800320e:	4603      	mov	r3, r0
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
			position_t bulletPos = {thisNode->enemy->position->x, thisNode->enemy->position->y + intToFp(2 * yScale)};
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685c      	ldr	r4, [r3, #4]
 8003224:	2004      	movs	r0, #4
 8003226:	f000 f898 	bl	800335a <intToFp>
 800322a:	4603      	mov	r3, r0
 800322c:	4423      	add	r3, r4
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
			bullet_t bullet = {bulletPos, bulletPos, bulletVector};
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
 8003240:	615a      	str	r2, [r3, #20]
 8003242:	619a      	str	r2, [r3, #24]
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800324c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003250:	e883 0003 	stmia.w	r3, {r0, r1}
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800325c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003260:	e883 0003 	stmia.w	r3, {r0, r1}
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800326c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003270:	e883 0003 	stmia.w	r3, {r0, r1}
			appendBullet(&(gameState->bulletLL), bullet);
 8003274:	687d      	ldr	r5, [r7, #4]
 8003276:	466c      	mov	r4, sp
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800327e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003288:	4628      	mov	r0, r5
 800328a:	f001 fc07 	bl	8004a9c <appendBullet>
			thisNode->enemy->lastShotTime = runtime;
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <shootEnemy+0xd8>)
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	611a      	str	r2, [r3, #16]
		}
		thisNode = thisNode->nextEnemyNode;
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
	while(thisNode != NULL){
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1a1      	bne.n	80031e8 <shootEnemy+0x10>
	}
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3738      	adds	r7, #56	; 0x38
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bdb0      	pop	{r4, r5, r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200001c8 	.word	0x200001c8

080032b4 <detectCityHit>:

void detectCityHit(gameState_t* gameState){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 80032c2:	e042      	b.n	800334a <detectCityHit+0x96>
		if(fpToInt(thisNode->enemy->position->y) >= 40 * yScale){
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f859 	bl	8003384 <fpToInt>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b4f      	cmp	r3, #79	; 0x4f
 80032d6:	dd35      	ble.n	8003344 <detectCityHit+0x90>
			gameState->cityLives--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032de:	3b01      	subs	r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

			if(gameState->cityLives == 2){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d10f      	bne.n	8003312 <detectCityHit+0x5e>
				gotoxy(1, 42);
 80032f2:	212a      	movs	r1, #42	; 0x2a
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fe fcd9 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e005      	b.n	800330c <detectCityHit+0x58>
					printf(" ");
 8003300:	2020      	movs	r0, #32
 8003302:	f003 f933 	bl	800656c <putchar>
				for(int i = 0; i<screenWidth;i++){
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b9b      	cmp	r3, #155	; 0x9b
 8003310:	ddf6      	ble.n	8003300 <detectCityHit+0x4c>
				}
			}
			if(gameState->cityLives == 1){
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10f      	bne.n	800333c <detectCityHit+0x88>
				gotoxy(1, 43);
 800331c:	212b      	movs	r1, #43	; 0x2b
 800331e:	2001      	movs	r0, #1
 8003320:	f7fe fcc4 	bl	8001cac <gotoxy>
				for(int i = 0; i<screenWidth;i++){
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e005      	b.n	8003336 <detectCityHit+0x82>
					printf(" ");
 800332a:	2020      	movs	r0, #32
 800332c:	f003 f91e 	bl	800656c <putchar>
				for(int i = 0; i<screenWidth;i++){
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b9b      	cmp	r3, #155	; 0x9b
 800333a:	ddf6      	ble.n	800332a <detectCityHit+0x76>
				}
			}
			deleteEnemyNode(gameState, thisNode);
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f001 fc0e 	bl	8004b60 <deleteEnemyNode>
			//drawhearth(gameState);
		}
		thisNode = thisNode->nextEnemyNode;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]
	while(thisNode != NULL){
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1b9      	bne.n	80032c4 <detectCityHit+0x10>
	}
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <intToFp>:
>>>>>>> Stashed changes
 */

#include "fixedPoint.h"

//Converts uint_t to fixed point 16.16 format type uint32_t
uint32_t intToFp(uint16_t n){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	60fb      	str	r3, [r7, #12]
	return output;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	60bb      	str	r3, [r7, #8]
	int output=0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fe8:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	607b      	str	r3, [r7, #4]
	output+=fp;
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da03      	bge.n	8003006 <fpToInt+0x34>
		output-=65536;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003004:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8003006:	68fb      	ldr	r3, [r7, #12]

}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	n>>=8;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	607b      	str	r3, [r7, #4]
	m>>=8;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	60fb      	str	r3, [r7, #12]

//	if(((n ^ m) & 0x80) != 0){
////		output=(~output)+1;
//		output|=0x80;
//	}
	return output;
 8003048:	68fb      	ldr	r3, [r7, #12]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8003056:	b5b0      	push	{r4, r5, r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
    // Shift numerator to avoid overflow during multiplication
    uint64_t numerator = (long long)n << 16;
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4608      	mov	r0, r1
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0c03      	lsrs	r3, r0, #16
 800306a:	0402      	lsls	r2, r0, #16
 800306c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Perform the division and round to the nearest integer
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800307e:	1884      	adds	r4, r0, r2
 8003080:	eb41 0503 	adc.w	r5, r1, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	4620      	mov	r0, r4
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd fd8a 	bl	8000ba8 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    return result;
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}

080030a6 <scaleVector>:

=======
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
	output+=n;
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	60fb      	str	r3, [r7, #12]
	return output;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60bb      	str	r3, [r7, #8]
	int output=0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a92:	607b      	str	r3, [r7, #4]
	fp>>=16;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	607b      	str	r3, [r7, #4]
	output+=fp;
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da03      	bge.n	8002ab0 <fpToInt+0x34>
		output-=65536;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002aae:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002ab0:	68fb      	ldr	r3, [r7, #12]

}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	n>>=8;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	607b      	str	r3, [r7, #4]
	m>>=8;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8002b00:	b5b0      	push	{r4, r5, r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
    uint64_t numerator = (long long)n << 16;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0c03      	lsrs	r3, r0, #16
 8002b14:	0402      	lsls	r2, r0, #16
 8002b16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b28:	1884      	adds	r4, r0, r2
 8002b2a:	eb41 0503 	adc.w	r5, r1, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	4620      	mov	r0, r4
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f7fd fba1 	bl	8000280 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4613      	mov	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
    return result;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}

08002b50 <scaleVector>:
>>>>>>> Stashed changes
=======
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	80fb      	strh	r3, [r7, #6]
	uint32_t output = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
	output+=n;
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
	output<<=16;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	60fb      	str	r3, [r7, #12]
	return output;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <fpToInt>:

//Converts fixed point 16.16 format to normal integer and rounds correctly
int fpToInt(uint32_t fp){
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	uint32_t in = fp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	60bb      	str	r3, [r7, #8]
	int output=0;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
	fp+=32768; //32768 in 16.16 format is 0,5
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800339a:	607b      	str	r3, [r7, #4]
	fp>>=16;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	607b      	str	r3, [r7, #4]
	output+=fp;
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
	if((in & 0x80000000)!=0) {
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da03      	bge.n	80033b8 <fpToInt+0x34>
		output-=65536;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80033b6:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80033b8:	68fb      	ldr	r3, [r7, #12]

}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <fpMultiply>:

uint32_t fpMultiply(uint32_t n, uint32_t m){  //32 32 32
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
	n>>=8;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	607b      	str	r3, [r7, #4]
	m>>=8;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	603b      	str	r3, [r7, #0]
	uint32_t output = n*m;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	60fb      	str	r3, [r7, #12]

	if ((n & 0x00800000) != 0) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <fpMultiply+0x34>
		output-=(2*0x00800000*m);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	061b      	lsls	r3, r3, #24
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	60fb      	str	r3, [r7, #12]
	}
	return output;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <fpDivide>:

uint32_t fpDivide(uint32_t n, uint32_t m){
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    uint64_t numerator = (long long)n << 16;
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4608      	mov	r0, r1
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0c03      	lsrs	r3, r0, #16
 800341c:	0402      	lsls	r2, r0, #16
 800341e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t result = (uint32_t)((numerator + (m / 2)) / m);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003430:	1884      	adds	r4, r0, r2
 8003432:	eb41 0503 	adc.w	r5, r1, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	4620      	mov	r0, r4
 8003440:	4629      	mov	r1, r5
 8003442:	f7fd fb0b 	bl	8000a5c <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4613      	mov	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
    return result;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bdb0      	pop	{r4, r5, r7, pc}

08003458 <scaleVector>:
>>>>>>> Stashed changes

vector_t scaleVector(vector_t vectorIn, uint32_t fpScalar){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	1d38      	adds	r0, r7, #4
 80030b0:	e880 0006 	stmia.w	r0, {r1, r2}
 80030b4:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffaa 	bl	8003014 <fpMultiply>
 80030c0:	4603      	mov	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ffa3 	bl	8003014 <fpMultiply>
 80030ce:	4603      	mov	r3, r0
 80030d0:	617b      	str	r3, [r7, #20]
	return vectorOut;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <fpAbs>:


uint32_t fpAbs(uint32_t n){
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da02      	bge.n	8003102 <fpAbs+0x18>
			output=(~output)+1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	425b      	negs	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
		}
	return output;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <drawbackground>:
=======
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	1d38      	adds	r0, r7, #4
 8002b5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b5e:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ffaa 	bl	8002abe <fpMultiply>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffa3 	bl	8002abe <fpMultiply>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	617b      	str	r3, [r7, #20]
	return vectorOut;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b88:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <fpAbs>:


uint32_t fpAbs(uint32_t n){
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da02      	bge.n	8002bac <fpAbs+0x18>
			output=(~output)+1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	425b      	negs	r3, r3
 8002baa:	60fb      	str	r3, [r7, #12]
		}
	return output;
 8002bac:	68fb      	ldr	r3, [r7, #12]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <drawbackground>:
>>>>>>> Stashed changes
=======
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	1d38      	adds	r0, r7, #4
 8003462:	e880 0006 	stmia.w	r0, {r1, r2}
 8003466:	603b      	str	r3, [r7, #0]
	vector_t vectorOut;
	vectorOut.x=fpMultiply(vectorIn.x,fpScalar);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ffaa 	bl	80033c6 <fpMultiply>
 8003472:	4603      	mov	r3, r0
 8003474:	613b      	str	r3, [r7, #16]
	vectorOut.y=fpMultiply(vectorIn.y,fpScalar);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ffa3 	bl	80033c6 <fpMultiply>
 8003480:	4603      	mov	r3, r0
 8003482:	617b      	str	r3, [r7, #20]
	return vectorOut;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003490:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <fpAbs>:


uint32_t fpAbs(uint32_t n){
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	uint32_t output = n;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
	if ((n & 0x80000000) != 0) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da02      	bge.n	80034b4 <fpAbs+0x18>
			output=(~output)+1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	425b      	negs	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]
		}
	return output;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <drawbackground>:
>>>>>>> Stashed changes
#include "stdint.h"
#include "stdio.h"
#include "ansi.h"
#include "graphics.h"

void drawbackground(){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8003114:	2123      	movs	r1, #35	; 0x23
 8003116:	2037      	movs	r0, #55	; 0x37
 8003118:	f7fe fe24 	bl	8001d64 <gotoxy>
	printf("*");
 800311c:	202a      	movs	r0, #42	; 0x2a
 800311e:	f002 fb91 	bl	8005844 <putchar>
	gotoxy(63,27);
 8003122:	211b      	movs	r1, #27
 8003124:	203f      	movs	r0, #63	; 0x3f
 8003126:	f7fe fe1d 	bl	8001d64 <gotoxy>
	printf("*");
 800312a:	202a      	movs	r0, #42	; 0x2a
 800312c:	f002 fb8a 	bl	8005844 <putchar>
	gotoxy(10,15);
 8003130:	210f      	movs	r1, #15
 8003132:	200a      	movs	r0, #10
 8003134:	f7fe fe16 	bl	8001d64 <gotoxy>
	printf("*");
 8003138:	202a      	movs	r0, #42	; 0x2a
 800313a:	f002 fb83 	bl	8005844 <putchar>
	gotoxy(20,40);
 800313e:	2128      	movs	r1, #40	; 0x28
 8003140:	2014      	movs	r0, #20
 8003142:	f7fe fe0f 	bl	8001d64 <gotoxy>
	printf("%c",43);
 8003146:	202b      	movs	r0, #43	; 0x2b
 8003148:	f002 fb7c 	bl	8005844 <putchar>

	gotoxy(155,37);
 800314c:	2125      	movs	r1, #37	; 0x25
 800314e:	209b      	movs	r0, #155	; 0x9b
 8003150:	f7fe fe08 	bl	8001d64 <gotoxy>
	printf("*");
 8003154:	202a      	movs	r0, #42	; 0x2a
 8003156:	f002 fb75 	bl	8005844 <putchar>
	gotoxy(110,28);
 800315a:	211c      	movs	r1, #28
 800315c:	206e      	movs	r0, #110	; 0x6e
 800315e:	f7fe fe01 	bl	8001d64 <gotoxy>
	printf("*");
 8003162:	202a      	movs	r0, #42	; 0x2a
 8003164:	f002 fb6e 	bl	8005844 <putchar>
	gotoxy(95,13);
 8003168:	210d      	movs	r1, #13
 800316a:	205f      	movs	r0, #95	; 0x5f
 800316c:	f7fe fdfa 	bl	8001d64 <gotoxy>
	printf("*");
 8003170:	202a      	movs	r0, #42	; 0x2a
 8003172:	f002 fb67 	bl	8005844 <putchar>
	gotoxy(130,19);
 8003176:	2113      	movs	r1, #19
 8003178:	2082      	movs	r0, #130	; 0x82
 800317a:	f7fe fdf3 	bl	8001d64 <gotoxy>
	printf("%c",43);
 800317e:	202b      	movs	r0, #43	; 0x2b
 8003180:	f002 fb60 	bl	8005844 <putchar>

	gotoxy(5,27);
 8003184:	211b      	movs	r1, #27
 8003186:	2005      	movs	r0, #5
 8003188:	f7fe fdec 	bl	8001d64 <gotoxy>
	printf("*");
 800318c:	202a      	movs	r0, #42	; 0x2a
 800318e:	f002 fb59 	bl	8005844 <putchar>
	gotoxy(6,5);
 8003192:	2105      	movs	r1, #5
 8003194:	2006      	movs	r0, #6
 8003196:	f7fe fde5 	bl	8001d64 <gotoxy>
	printf("*");
 800319a:	202a      	movs	r0, #42	; 0x2a
 800319c:	f002 fb52 	bl	8005844 <putchar>
	gotoxy(13,13);
 80031a0:	210d      	movs	r1, #13
 80031a2:	200d      	movs	r0, #13
 80031a4:	f7fe fdde 	bl	8001d64 <gotoxy>
	printf("*");
 80031a8:	202a      	movs	r0, #42	; 0x2a
 80031aa:	f002 fb4b 	bl	8005844 <putchar>
	gotoxy(60,7);
 80031ae:	2107      	movs	r1, #7
 80031b0:	203c      	movs	r0, #60	; 0x3c
 80031b2:	f7fe fdd7 	bl	8001d64 <gotoxy>
	printf("%c",43);
 80031b6:	202b      	movs	r0, #43	; 0x2b
 80031b8:	f002 fb44 	bl	8005844 <putchar>

	gotoxy(140,3);
 80031bc:	2103      	movs	r1, #3
 80031be:	208c      	movs	r0, #140	; 0x8c
 80031c0:	f7fe fdd0 	bl	8001d64 <gotoxy>
	printf("*");
 80031c4:	202a      	movs	r0, #42	; 0x2a
 80031c6:	f002 fb3d 	bl	8005844 <putchar>
	gotoxy(120,5);
 80031ca:	2105      	movs	r1, #5
 80031cc:	2078      	movs	r0, #120	; 0x78
 80031ce:	f7fe fdc9 	bl	8001d64 <gotoxy>
	printf("*");
 80031d2:	202a      	movs	r0, #42	; 0x2a
 80031d4:	f002 fb36 	bl	8005844 <putchar>
	gotoxy(110,7);
 80031d8:	2107      	movs	r1, #7
 80031da:	206e      	movs	r0, #110	; 0x6e
 80031dc:	f7fe fdc2 	bl	8001d64 <gotoxy>
	printf("*");
 80031e0:	202a      	movs	r0, #42	; 0x2a
 80031e2:	f002 fb2f 	bl	8005844 <putchar>
	gotoxy(70,30);
 80031e6:	211e      	movs	r1, #30
 80031e8:	2046      	movs	r0, #70	; 0x46
 80031ea:	f7fe fdbb 	bl	8001d64 <gotoxy>
	printf("%c",43);
 80031ee:	202b      	movs	r0, #43	; 0x2b
 80031f0:	f002 fb28 	bl	8005844 <putchar>

	gotoxy(135,33);
 80031f4:	2121      	movs	r1, #33	; 0x21
 80031f6:	2087      	movs	r0, #135	; 0x87
 80031f8:	f7fe fdb4 	bl	8001d64 <gotoxy>
	printf("*");
 80031fc:	202a      	movs	r0, #42	; 0x2a
 80031fe:	f002 fb21 	bl	8005844 <putchar>
	gotoxy(123,36);
 8003202:	2124      	movs	r1, #36	; 0x24
 8003204:	207b      	movs	r0, #123	; 0x7b
 8003206:	f7fe fdad 	bl	8001d64 <gotoxy>
	printf("*");
 800320a:	202a      	movs	r0, #42	; 0x2a
 800320c:	f002 fb1a 	bl	8005844 <putchar>
	gotoxy(138,40);
 8003210:	2128      	movs	r1, #40	; 0x28
 8003212:	208a      	movs	r0, #138	; 0x8a
 8003214:	f7fe fda6 	bl	8001d64 <gotoxy>
	printf("*");
 8003218:	202a      	movs	r0, #42	; 0x2a
 800321a:	f002 fb13 	bl	8005844 <putchar>
	gotoxy(127,25);
 800321e:	2119      	movs	r1, #25
 8003220:	207f      	movs	r0, #127	; 0x7f
 8003222:	f7fe fd9f 	bl	8001d64 <gotoxy>
	printf("%c",43);
 8003226:	202b      	movs	r0, #43	; 0x2b
 8003228:	f002 fb0c 	bl	8005844 <putchar>

	gotoxy(105,32);
 800322c:	2120      	movs	r1, #32
 800322e:	2069      	movs	r0, #105	; 0x69
 8003230:	f7fe fd98 	bl	8001d64 <gotoxy>
	printf("%c",42);
 8003234:	202a      	movs	r0, #42	; 0x2a
 8003236:	f002 fb05 	bl	8005844 <putchar>
	gotoxy(106,33);
 800323a:	2121      	movs	r1, #33	; 0x21
 800323c:	206a      	movs	r0, #106	; 0x6a
 800323e:	f7fe fd91 	bl	8001d64 <gotoxy>
	printf("%c",92);
 8003242:	205c      	movs	r0, #92	; 0x5c
 8003244:	f002 fafe 	bl	8005844 <putchar>
	gotoxy(107,34);
 8003248:	2122      	movs	r1, #34	; 0x22
 800324a:	206b      	movs	r0, #107	; 0x6b
 800324c:	f7fe fd8a 	bl	8001d64 <gotoxy>
	printf("%c",92);
 8003250:	205c      	movs	r0, #92	; 0x5c
 8003252:	f002 faf7 	bl	8005844 <putchar>

	gotoxy(23,15);
 8003256:	210f      	movs	r1, #15
 8003258:	2017      	movs	r0, #23
 800325a:	f7fe fd83 	bl	8001d64 <gotoxy>
	printf("*");
 800325e:	202a      	movs	r0, #42	; 0x2a
 8003260:	f002 faf0 	bl	8005844 <putchar>
	gotoxy(37,21);
 8003264:	2115      	movs	r1, #21
 8003266:	2025      	movs	r0, #37	; 0x25
 8003268:	f7fe fd7c 	bl	8001d64 <gotoxy>
	printf("*");
 800326c:	202a      	movs	r0, #42	; 0x2a
 800326e:	f002 fae9 	bl	8005844 <putchar>
	gotoxy(26,24);
 8003272:	2118      	movs	r1, #24
 8003274:	201a      	movs	r0, #26
 8003276:	f7fe fd75 	bl	8001d64 <gotoxy>
	printf("*");
 800327a:	202a      	movs	r0, #42	; 0x2a
 800327c:	f002 fae2 	bl	8005844 <putchar>
	gotoxy(30,29);
 8003280:	211d      	movs	r1, #29
 8003282:	201e      	movs	r0, #30
 8003284:	f7fe fd6e 	bl	8001d64 <gotoxy>
	printf("%c",43);
 8003288:	202b      	movs	r0, #43	; 0x2b
 800328a:	f002 fadb 	bl	8005844 <putchar>

	gotoxy(25,6);
 800328e:	2106      	movs	r1, #6
 8003290:	2019      	movs	r0, #25
 8003292:	f7fe fd67 	bl	8001d64 <gotoxy>
	printf("*");
 8003296:	202a      	movs	r0, #42	; 0x2a
 8003298:	f002 fad4 	bl	8005844 <putchar>
	gotoxy(39,7);
 800329c:	2107      	movs	r1, #7
 800329e:	2027      	movs	r0, #39	; 0x27
 80032a0:	f7fe fd60 	bl	8001d64 <gotoxy>
	printf("*");
 80032a4:	202a      	movs	r0, #42	; 0x2a
 80032a6:	f002 facd 	bl	8005844 <putchar>
	gotoxy(41,3);
 80032aa:	2103      	movs	r1, #3
 80032ac:	2029      	movs	r0, #41	; 0x29
 80032ae:	f7fe fd59 	bl	8001d64 <gotoxy>
	printf("*");
 80032b2:	202a      	movs	r0, #42	; 0x2a
 80032b4:	f002 fac6 	bl	8005844 <putchar>
	gotoxy(75,10);
 80032b8:	210a      	movs	r1, #10
 80032ba:	204b      	movs	r0, #75	; 0x4b
 80032bc:	f7fe fd52 	bl	8001d64 <gotoxy>
	printf("%c",43);
 80032c0:	202b      	movs	r0, #43	; 0x2b
 80032c2:	f002 fabf 	bl	8005844 <putchar>

	gotoxy(100,20);
 80032c6:	2114      	movs	r1, #20
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	f7fe fd4b 	bl	8001d64 <gotoxy>
	printf("%c",197);
 80032ce:	20c5      	movs	r0, #197	; 0xc5
 80032d0:	f002 fab8 	bl	8005844 <putchar>
	gotoxy(135,12);
 80032d4:	210c      	movs	r1, #12
 80032d6:	2087      	movs	r0, #135	; 0x87
 80032d8:	f7fe fd44 	bl	8001d64 <gotoxy>
	printf("%c",197);
 80032dc:	20c5      	movs	r0, #197	; 0xc5
 80032de:	f002 fab1 	bl	8005844 <putchar>
	gotoxy(30,5);
 80032e2:	2105      	movs	r1, #5
 80032e4:	201e      	movs	r0, #30
 80032e6:	f7fe fd3d 	bl	8001d64 <gotoxy>
	printf("%c",197);
 80032ea:	20c5      	movs	r0, #197	; 0xc5
 80032ec:	f002 faaa 	bl	8005844 <putchar>
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	460a      	mov	r2, r1
 80032fe:	71fb      	strb	r3, [r7, #7]
 8003300:	4613      	mov	r3, r2
 8003302:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8003304:	79bb      	ldrb	r3, [r7, #6]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	71bb      	strb	r3, [r7, #6]
=======
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 8002bbe:	2123      	movs	r1, #35	; 0x23
 8002bc0:	2037      	movs	r0, #55	; 0x37
 8002bc2:	f7fe fc85 	bl	80014d0 <gotoxy>
	printf("*");
 8002bc6:	202a      	movs	r0, #42	; 0x2a
 8002bc8:	f002 ffb6 	bl	8005b38 <putchar>
	gotoxy(63,27);
 8002bcc:	211b      	movs	r1, #27
 8002bce:	203f      	movs	r0, #63	; 0x3f
 8002bd0:	f7fe fc7e 	bl	80014d0 <gotoxy>
	printf("*");
 8002bd4:	202a      	movs	r0, #42	; 0x2a
 8002bd6:	f002 ffaf 	bl	8005b38 <putchar>
	gotoxy(10,15);
 8002bda:	210f      	movs	r1, #15
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f7fe fc77 	bl	80014d0 <gotoxy>
	printf("*");
 8002be2:	202a      	movs	r0, #42	; 0x2a
 8002be4:	f002 ffa8 	bl	8005b38 <putchar>
	gotoxy(20,40);
 8002be8:	2128      	movs	r1, #40	; 0x28
 8002bea:	2014      	movs	r0, #20
 8002bec:	f7fe fc70 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002bf0:	202b      	movs	r0, #43	; 0x2b
 8002bf2:	f002 ffa1 	bl	8005b38 <putchar>

	gotoxy(155,37);
 8002bf6:	2125      	movs	r1, #37	; 0x25
 8002bf8:	209b      	movs	r0, #155	; 0x9b
 8002bfa:	f7fe fc69 	bl	80014d0 <gotoxy>
	printf("*");
 8002bfe:	202a      	movs	r0, #42	; 0x2a
 8002c00:	f002 ff9a 	bl	8005b38 <putchar>
	gotoxy(110,28);
 8002c04:	211c      	movs	r1, #28
 8002c06:	206e      	movs	r0, #110	; 0x6e
 8002c08:	f7fe fc62 	bl	80014d0 <gotoxy>
	printf("*");
 8002c0c:	202a      	movs	r0, #42	; 0x2a
 8002c0e:	f002 ff93 	bl	8005b38 <putchar>
	gotoxy(95,13);
 8002c12:	210d      	movs	r1, #13
 8002c14:	205f      	movs	r0, #95	; 0x5f
 8002c16:	f7fe fc5b 	bl	80014d0 <gotoxy>
	printf("*");
 8002c1a:	202a      	movs	r0, #42	; 0x2a
 8002c1c:	f002 ff8c 	bl	8005b38 <putchar>
	gotoxy(130,19);
 8002c20:	2113      	movs	r1, #19
 8002c22:	2082      	movs	r0, #130	; 0x82
 8002c24:	f7fe fc54 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002c28:	202b      	movs	r0, #43	; 0x2b
 8002c2a:	f002 ff85 	bl	8005b38 <putchar>

	gotoxy(5,27);
 8002c2e:	211b      	movs	r1, #27
 8002c30:	2005      	movs	r0, #5
 8002c32:	f7fe fc4d 	bl	80014d0 <gotoxy>
	printf("*");
 8002c36:	202a      	movs	r0, #42	; 0x2a
 8002c38:	f002 ff7e 	bl	8005b38 <putchar>
	gotoxy(6,5);
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	2006      	movs	r0, #6
 8002c40:	f7fe fc46 	bl	80014d0 <gotoxy>
	printf("*");
 8002c44:	202a      	movs	r0, #42	; 0x2a
 8002c46:	f002 ff77 	bl	8005b38 <putchar>
	gotoxy(13,13);
 8002c4a:	210d      	movs	r1, #13
 8002c4c:	200d      	movs	r0, #13
 8002c4e:	f7fe fc3f 	bl	80014d0 <gotoxy>
	printf("*");
 8002c52:	202a      	movs	r0, #42	; 0x2a
 8002c54:	f002 ff70 	bl	8005b38 <putchar>
	gotoxy(60,7);
 8002c58:	2107      	movs	r1, #7
 8002c5a:	203c      	movs	r0, #60	; 0x3c
 8002c5c:	f7fe fc38 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002c60:	202b      	movs	r0, #43	; 0x2b
 8002c62:	f002 ff69 	bl	8005b38 <putchar>

	gotoxy(140,3);
 8002c66:	2103      	movs	r1, #3
 8002c68:	208c      	movs	r0, #140	; 0x8c
 8002c6a:	f7fe fc31 	bl	80014d0 <gotoxy>
	printf("*");
 8002c6e:	202a      	movs	r0, #42	; 0x2a
 8002c70:	f002 ff62 	bl	8005b38 <putchar>
	gotoxy(120,5);
 8002c74:	2105      	movs	r1, #5
 8002c76:	2078      	movs	r0, #120	; 0x78
 8002c78:	f7fe fc2a 	bl	80014d0 <gotoxy>
	printf("*");
 8002c7c:	202a      	movs	r0, #42	; 0x2a
 8002c7e:	f002 ff5b 	bl	8005b38 <putchar>
	gotoxy(110,7);
 8002c82:	2107      	movs	r1, #7
 8002c84:	206e      	movs	r0, #110	; 0x6e
 8002c86:	f7fe fc23 	bl	80014d0 <gotoxy>
	printf("*");
 8002c8a:	202a      	movs	r0, #42	; 0x2a
 8002c8c:	f002 ff54 	bl	8005b38 <putchar>
	gotoxy(70,30);
 8002c90:	211e      	movs	r1, #30
 8002c92:	2046      	movs	r0, #70	; 0x46
 8002c94:	f7fe fc1c 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002c98:	202b      	movs	r0, #43	; 0x2b
 8002c9a:	f002 ff4d 	bl	8005b38 <putchar>

	gotoxy(135,33);
 8002c9e:	2121      	movs	r1, #33	; 0x21
 8002ca0:	2087      	movs	r0, #135	; 0x87
 8002ca2:	f7fe fc15 	bl	80014d0 <gotoxy>
	printf("*");
 8002ca6:	202a      	movs	r0, #42	; 0x2a
 8002ca8:	f002 ff46 	bl	8005b38 <putchar>
	gotoxy(123,36);
 8002cac:	2124      	movs	r1, #36	; 0x24
 8002cae:	207b      	movs	r0, #123	; 0x7b
 8002cb0:	f7fe fc0e 	bl	80014d0 <gotoxy>
	printf("*");
 8002cb4:	202a      	movs	r0, #42	; 0x2a
 8002cb6:	f002 ff3f 	bl	8005b38 <putchar>
	gotoxy(138,40);
 8002cba:	2128      	movs	r1, #40	; 0x28
 8002cbc:	208a      	movs	r0, #138	; 0x8a
 8002cbe:	f7fe fc07 	bl	80014d0 <gotoxy>
	printf("*");
 8002cc2:	202a      	movs	r0, #42	; 0x2a
 8002cc4:	f002 ff38 	bl	8005b38 <putchar>
	gotoxy(127,25);
 8002cc8:	2119      	movs	r1, #25
 8002cca:	207f      	movs	r0, #127	; 0x7f
 8002ccc:	f7fe fc00 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002cd0:	202b      	movs	r0, #43	; 0x2b
 8002cd2:	f002 ff31 	bl	8005b38 <putchar>

	gotoxy(105,32);
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	2069      	movs	r0, #105	; 0x69
 8002cda:	f7fe fbf9 	bl	80014d0 <gotoxy>
	printf("%c",42);
 8002cde:	202a      	movs	r0, #42	; 0x2a
 8002ce0:	f002 ff2a 	bl	8005b38 <putchar>
	gotoxy(106,33);
 8002ce4:	2121      	movs	r1, #33	; 0x21
 8002ce6:	206a      	movs	r0, #106	; 0x6a
 8002ce8:	f7fe fbf2 	bl	80014d0 <gotoxy>
	printf("%c",92);
 8002cec:	205c      	movs	r0, #92	; 0x5c
 8002cee:	f002 ff23 	bl	8005b38 <putchar>
	gotoxy(107,34);
 8002cf2:	2122      	movs	r1, #34	; 0x22
 8002cf4:	206b      	movs	r0, #107	; 0x6b
 8002cf6:	f7fe fbeb 	bl	80014d0 <gotoxy>
	printf("%c",92);
 8002cfa:	205c      	movs	r0, #92	; 0x5c
 8002cfc:	f002 ff1c 	bl	8005b38 <putchar>

	gotoxy(23,15);
 8002d00:	210f      	movs	r1, #15
 8002d02:	2017      	movs	r0, #23
 8002d04:	f7fe fbe4 	bl	80014d0 <gotoxy>
	printf("*");
 8002d08:	202a      	movs	r0, #42	; 0x2a
 8002d0a:	f002 ff15 	bl	8005b38 <putchar>
	gotoxy(37,21);
 8002d0e:	2115      	movs	r1, #21
 8002d10:	2025      	movs	r0, #37	; 0x25
 8002d12:	f7fe fbdd 	bl	80014d0 <gotoxy>
	printf("*");
 8002d16:	202a      	movs	r0, #42	; 0x2a
 8002d18:	f002 ff0e 	bl	8005b38 <putchar>
	gotoxy(26,24);
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	201a      	movs	r0, #26
 8002d20:	f7fe fbd6 	bl	80014d0 <gotoxy>
	printf("*");
 8002d24:	202a      	movs	r0, #42	; 0x2a
 8002d26:	f002 ff07 	bl	8005b38 <putchar>
	gotoxy(30,29);
 8002d2a:	211d      	movs	r1, #29
 8002d2c:	201e      	movs	r0, #30
 8002d2e:	f7fe fbcf 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002d32:	202b      	movs	r0, #43	; 0x2b
 8002d34:	f002 ff00 	bl	8005b38 <putchar>

	gotoxy(25,6);
 8002d38:	2106      	movs	r1, #6
 8002d3a:	2019      	movs	r0, #25
 8002d3c:	f7fe fbc8 	bl	80014d0 <gotoxy>
	printf("*");
 8002d40:	202a      	movs	r0, #42	; 0x2a
 8002d42:	f002 fef9 	bl	8005b38 <putchar>
	gotoxy(39,7);
 8002d46:	2107      	movs	r1, #7
 8002d48:	2027      	movs	r0, #39	; 0x27
 8002d4a:	f7fe fbc1 	bl	80014d0 <gotoxy>
	printf("*");
 8002d4e:	202a      	movs	r0, #42	; 0x2a
 8002d50:	f002 fef2 	bl	8005b38 <putchar>
	gotoxy(41,3);
 8002d54:	2103      	movs	r1, #3
 8002d56:	2029      	movs	r0, #41	; 0x29
 8002d58:	f7fe fbba 	bl	80014d0 <gotoxy>
	printf("*");
 8002d5c:	202a      	movs	r0, #42	; 0x2a
 8002d5e:	f002 feeb 	bl	8005b38 <putchar>
	gotoxy(75,10);
 8002d62:	210a      	movs	r1, #10
 8002d64:	204b      	movs	r0, #75	; 0x4b
 8002d66:	f7fe fbb3 	bl	80014d0 <gotoxy>
	printf("%c",43);
 8002d6a:	202b      	movs	r0, #43	; 0x2b
 8002d6c:	f002 fee4 	bl	8005b38 <putchar>

	gotoxy(100,20);
 8002d70:	2114      	movs	r1, #20
 8002d72:	2064      	movs	r0, #100	; 0x64
 8002d74:	f7fe fbac 	bl	80014d0 <gotoxy>
	printf("%c",197);
 8002d78:	20c5      	movs	r0, #197	; 0xc5
 8002d7a:	f002 fedd 	bl	8005b38 <putchar>
	gotoxy(135,12);
 8002d7e:	210c      	movs	r1, #12
 8002d80:	2087      	movs	r0, #135	; 0x87
 8002d82:	f7fe fba5 	bl	80014d0 <gotoxy>
	printf("%c",197);
 8002d86:	20c5      	movs	r0, #197	; 0xc5
 8002d88:	f002 fed6 	bl	8005b38 <putchar>
	gotoxy(30,5);
 8002d8c:	2105      	movs	r1, #5
 8002d8e:	201e      	movs	r0, #30
 8002d90:	f7fe fb9e 	bl	80014d0 <gotoxy>
	printf("%c",197);
 8002d94:	20c5      	movs	r0, #197	; 0xc5
 8002d96:	f002 fecf 	bl	8005b38 <putchar>
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	460a      	mov	r2, r1
 8002da8:	71fb      	strb	r3, [r7, #7]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	71bb      	strb	r3, [r7, #6]
>>>>>>> Stashed changes
=======
 80034c2:	b580      	push	{r7, lr}
 80034c4:	af00      	add	r7, sp, #0
	gotoxy(55,35);
 80034c6:	2123      	movs	r1, #35	; 0x23
 80034c8:	2037      	movs	r0, #55	; 0x37
 80034ca:	f7fe fbef 	bl	8001cac <gotoxy>
	printf("*");
 80034ce:	202a      	movs	r0, #42	; 0x2a
 80034d0:	f003 f84c 	bl	800656c <putchar>
	gotoxy(63,27);
 80034d4:	211b      	movs	r1, #27
 80034d6:	203f      	movs	r0, #63	; 0x3f
 80034d8:	f7fe fbe8 	bl	8001cac <gotoxy>
	printf("*");
 80034dc:	202a      	movs	r0, #42	; 0x2a
 80034de:	f003 f845 	bl	800656c <putchar>
	gotoxy(10,15);
 80034e2:	210f      	movs	r1, #15
 80034e4:	200a      	movs	r0, #10
 80034e6:	f7fe fbe1 	bl	8001cac <gotoxy>
	printf("*");
 80034ea:	202a      	movs	r0, #42	; 0x2a
 80034ec:	f003 f83e 	bl	800656c <putchar>
	gotoxy(20,40);
 80034f0:	2128      	movs	r1, #40	; 0x28
 80034f2:	2014      	movs	r0, #20
 80034f4:	f7fe fbda 	bl	8001cac <gotoxy>
	printf("%c",43);
 80034f8:	202b      	movs	r0, #43	; 0x2b
 80034fa:	f003 f837 	bl	800656c <putchar>

	gotoxy(155,37);
 80034fe:	2125      	movs	r1, #37	; 0x25
 8003500:	209b      	movs	r0, #155	; 0x9b
 8003502:	f7fe fbd3 	bl	8001cac <gotoxy>
	printf("*");
 8003506:	202a      	movs	r0, #42	; 0x2a
 8003508:	f003 f830 	bl	800656c <putchar>
	gotoxy(110,28);
 800350c:	211c      	movs	r1, #28
 800350e:	206e      	movs	r0, #110	; 0x6e
 8003510:	f7fe fbcc 	bl	8001cac <gotoxy>
	printf("*");
 8003514:	202a      	movs	r0, #42	; 0x2a
 8003516:	f003 f829 	bl	800656c <putchar>
	gotoxy(95,13);
 800351a:	210d      	movs	r1, #13
 800351c:	205f      	movs	r0, #95	; 0x5f
 800351e:	f7fe fbc5 	bl	8001cac <gotoxy>
	printf("*");
 8003522:	202a      	movs	r0, #42	; 0x2a
 8003524:	f003 f822 	bl	800656c <putchar>
	gotoxy(130,19);
 8003528:	2113      	movs	r1, #19
 800352a:	2082      	movs	r0, #130	; 0x82
 800352c:	f7fe fbbe 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003530:	202b      	movs	r0, #43	; 0x2b
 8003532:	f003 f81b 	bl	800656c <putchar>

	gotoxy(5,27);
 8003536:	211b      	movs	r1, #27
 8003538:	2005      	movs	r0, #5
 800353a:	f7fe fbb7 	bl	8001cac <gotoxy>
	printf("*");
 800353e:	202a      	movs	r0, #42	; 0x2a
 8003540:	f003 f814 	bl	800656c <putchar>
	gotoxy(6,5);
 8003544:	2105      	movs	r1, #5
 8003546:	2006      	movs	r0, #6
 8003548:	f7fe fbb0 	bl	8001cac <gotoxy>
	printf("*");
 800354c:	202a      	movs	r0, #42	; 0x2a
 800354e:	f003 f80d 	bl	800656c <putchar>
	gotoxy(13,13);
 8003552:	210d      	movs	r1, #13
 8003554:	200d      	movs	r0, #13
 8003556:	f7fe fba9 	bl	8001cac <gotoxy>
	printf("*");
 800355a:	202a      	movs	r0, #42	; 0x2a
 800355c:	f003 f806 	bl	800656c <putchar>
	gotoxy(60,7);
 8003560:	2107      	movs	r1, #7
 8003562:	203c      	movs	r0, #60	; 0x3c
 8003564:	f7fe fba2 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003568:	202b      	movs	r0, #43	; 0x2b
 800356a:	f002 ffff 	bl	800656c <putchar>

	gotoxy(140,3);
 800356e:	2103      	movs	r1, #3
 8003570:	208c      	movs	r0, #140	; 0x8c
 8003572:	f7fe fb9b 	bl	8001cac <gotoxy>
	printf("*");
 8003576:	202a      	movs	r0, #42	; 0x2a
 8003578:	f002 fff8 	bl	800656c <putchar>
	gotoxy(120,5);
 800357c:	2105      	movs	r1, #5
 800357e:	2078      	movs	r0, #120	; 0x78
 8003580:	f7fe fb94 	bl	8001cac <gotoxy>
	printf("*");
 8003584:	202a      	movs	r0, #42	; 0x2a
 8003586:	f002 fff1 	bl	800656c <putchar>
	gotoxy(110,7);
 800358a:	2107      	movs	r1, #7
 800358c:	206e      	movs	r0, #110	; 0x6e
 800358e:	f7fe fb8d 	bl	8001cac <gotoxy>
	printf("*");
 8003592:	202a      	movs	r0, #42	; 0x2a
 8003594:	f002 ffea 	bl	800656c <putchar>
	gotoxy(70,30);
 8003598:	211e      	movs	r1, #30
 800359a:	2046      	movs	r0, #70	; 0x46
 800359c:	f7fe fb86 	bl	8001cac <gotoxy>
	printf("%c",43);
 80035a0:	202b      	movs	r0, #43	; 0x2b
 80035a2:	f002 ffe3 	bl	800656c <putchar>

	gotoxy(135,33);
 80035a6:	2121      	movs	r1, #33	; 0x21
 80035a8:	2087      	movs	r0, #135	; 0x87
 80035aa:	f7fe fb7f 	bl	8001cac <gotoxy>
	printf("*");
 80035ae:	202a      	movs	r0, #42	; 0x2a
 80035b0:	f002 ffdc 	bl	800656c <putchar>
	gotoxy(123,36);
 80035b4:	2124      	movs	r1, #36	; 0x24
 80035b6:	207b      	movs	r0, #123	; 0x7b
 80035b8:	f7fe fb78 	bl	8001cac <gotoxy>
	printf("*");
 80035bc:	202a      	movs	r0, #42	; 0x2a
 80035be:	f002 ffd5 	bl	800656c <putchar>
	gotoxy(138,40);
 80035c2:	2128      	movs	r1, #40	; 0x28
 80035c4:	208a      	movs	r0, #138	; 0x8a
 80035c6:	f7fe fb71 	bl	8001cac <gotoxy>
	printf("*");
 80035ca:	202a      	movs	r0, #42	; 0x2a
 80035cc:	f002 ffce 	bl	800656c <putchar>
	gotoxy(127,25);
 80035d0:	2119      	movs	r1, #25
 80035d2:	207f      	movs	r0, #127	; 0x7f
 80035d4:	f7fe fb6a 	bl	8001cac <gotoxy>
	printf("%c",43);
 80035d8:	202b      	movs	r0, #43	; 0x2b
 80035da:	f002 ffc7 	bl	800656c <putchar>

	gotoxy(105,32);
 80035de:	2120      	movs	r1, #32
 80035e0:	2069      	movs	r0, #105	; 0x69
 80035e2:	f7fe fb63 	bl	8001cac <gotoxy>
	printf("%c",42);
 80035e6:	202a      	movs	r0, #42	; 0x2a
 80035e8:	f002 ffc0 	bl	800656c <putchar>
	gotoxy(106,33);
 80035ec:	2121      	movs	r1, #33	; 0x21
 80035ee:	206a      	movs	r0, #106	; 0x6a
 80035f0:	f7fe fb5c 	bl	8001cac <gotoxy>
	printf("%c",92);
 80035f4:	205c      	movs	r0, #92	; 0x5c
 80035f6:	f002 ffb9 	bl	800656c <putchar>
	gotoxy(107,34);
 80035fa:	2122      	movs	r1, #34	; 0x22
 80035fc:	206b      	movs	r0, #107	; 0x6b
 80035fe:	f7fe fb55 	bl	8001cac <gotoxy>
	printf("%c",92);
 8003602:	205c      	movs	r0, #92	; 0x5c
 8003604:	f002 ffb2 	bl	800656c <putchar>

	gotoxy(23,15);
 8003608:	210f      	movs	r1, #15
 800360a:	2017      	movs	r0, #23
 800360c:	f7fe fb4e 	bl	8001cac <gotoxy>
	printf("*");
 8003610:	202a      	movs	r0, #42	; 0x2a
 8003612:	f002 ffab 	bl	800656c <putchar>
	gotoxy(37,21);
 8003616:	2115      	movs	r1, #21
 8003618:	2025      	movs	r0, #37	; 0x25
 800361a:	f7fe fb47 	bl	8001cac <gotoxy>
	printf("*");
 800361e:	202a      	movs	r0, #42	; 0x2a
 8003620:	f002 ffa4 	bl	800656c <putchar>
	gotoxy(26,24);
 8003624:	2118      	movs	r1, #24
 8003626:	201a      	movs	r0, #26
 8003628:	f7fe fb40 	bl	8001cac <gotoxy>
	printf("*");
 800362c:	202a      	movs	r0, #42	; 0x2a
 800362e:	f002 ff9d 	bl	800656c <putchar>
	gotoxy(30,29);
 8003632:	211d      	movs	r1, #29
 8003634:	201e      	movs	r0, #30
 8003636:	f7fe fb39 	bl	8001cac <gotoxy>
	printf("%c",43);
 800363a:	202b      	movs	r0, #43	; 0x2b
 800363c:	f002 ff96 	bl	800656c <putchar>

	gotoxy(25,6);
 8003640:	2106      	movs	r1, #6
 8003642:	2019      	movs	r0, #25
 8003644:	f7fe fb32 	bl	8001cac <gotoxy>
	printf("*");
 8003648:	202a      	movs	r0, #42	; 0x2a
 800364a:	f002 ff8f 	bl	800656c <putchar>
	gotoxy(39,7);
 800364e:	2107      	movs	r1, #7
 8003650:	2027      	movs	r0, #39	; 0x27
 8003652:	f7fe fb2b 	bl	8001cac <gotoxy>
	printf("*");
 8003656:	202a      	movs	r0, #42	; 0x2a
 8003658:	f002 ff88 	bl	800656c <putchar>
	gotoxy(41,3);
 800365c:	2103      	movs	r1, #3
 800365e:	2029      	movs	r0, #41	; 0x29
 8003660:	f7fe fb24 	bl	8001cac <gotoxy>
	printf("*");
 8003664:	202a      	movs	r0, #42	; 0x2a
 8003666:	f002 ff81 	bl	800656c <putchar>
	gotoxy(75,10);
 800366a:	210a      	movs	r1, #10
 800366c:	204b      	movs	r0, #75	; 0x4b
 800366e:	f7fe fb1d 	bl	8001cac <gotoxy>
	printf("%c",43);
 8003672:	202b      	movs	r0, #43	; 0x2b
 8003674:	f002 ff7a 	bl	800656c <putchar>

	gotoxy(100,20);
 8003678:	2114      	movs	r1, #20
 800367a:	2064      	movs	r0, #100	; 0x64
 800367c:	f7fe fb16 	bl	8001cac <gotoxy>
	printf("%c",197);
 8003680:	20c5      	movs	r0, #197	; 0xc5
 8003682:	f002 ff73 	bl	800656c <putchar>
	gotoxy(135,12);
 8003686:	210c      	movs	r1, #12
 8003688:	2087      	movs	r0, #135	; 0x87
 800368a:	f7fe fb0f 	bl	8001cac <gotoxy>
	printf("%c",197);
 800368e:	20c5      	movs	r0, #197	; 0xc5
 8003690:	f002 ff6c 	bl	800656c <putchar>
	gotoxy(30,5);
 8003694:	2105      	movs	r1, #5
 8003696:	201e      	movs	r0, #30
 8003698:	f7fe fb08 	bl	8001cac <gotoxy>
	printf("%c",197);
 800369c:	20c5      	movs	r0, #197	; 0xc5
 800369e:	f002 ff65 	bl	800656c <putchar>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <drawMoon>:


void drawMoon(uint8_t X, uint8_t Y){
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	460a      	mov	r2, r1
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	4613      	mov	r3, r2
 80036b4:	71bb      	strb	r3, [r7, #6]
	Y /= yScale;
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	71bb      	strb	r3, [r7, #6]
>>>>>>> Stashed changes
//	gotoxy(X,Y);
//	printf("X");
	// FX (51,17)
	gotoxy(X-1,Y+3);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	1e5a      	subs	r2, r3, #1
 800330e:	79bb      	ldrb	r3, [r7, #6]
 8003310:	3303      	adds	r3, #3
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7fe fd25 	bl	8001d64 <gotoxy>
	printf("_");
 800331a:	205f      	movs	r0, #95	; 0x5f
 800331c:	f002 fa92 	bl	8005844 <putchar>
	gotoxy(X,Y+3);
 8003320:	79fa      	ldrb	r2, [r7, #7]
 8003322:	79bb      	ldrb	r3, [r7, #6]
 8003324:	3303      	adds	r3, #3
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fd1b 	bl	8001d64 <gotoxy>
	printf("_");
 800332e:	205f      	movs	r0, #95	; 0x5f
 8003330:	f002 fa88 	bl	8005844 <putchar>
	gotoxy(X+1,Y+3);
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	79bb      	ldrb	r3, [r7, #6]
 800333a:	3303      	adds	r3, #3
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fe fd10 	bl	8001d64 <gotoxy>
	printf("_");
 8003344:	205f      	movs	r0, #95	; 0x5f
 8003346:	f002 fa7d 	bl	8005844 <putchar>
	gotoxy(X-2,Y+3);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	1e9a      	subs	r2, r3, #2
 800334e:	79bb      	ldrb	r3, [r7, #6]
 8003350:	3303      	adds	r3, #3
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f7fe fd05 	bl	8001d64 <gotoxy>
	printf("(");
 800335a:	2028      	movs	r0, #40	; 0x28
 800335c:	f002 fa72 	bl	8005844 <putchar>
	gotoxy(X+2,Y+3);
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	3303      	adds	r3, #3
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7fe fcfa 	bl	8001d64 <gotoxy>
	printf(")");
 8003370:	2029      	movs	r0, #41	; 0x29
 8003372:	f002 fa67 	bl	8005844 <putchar>

	gotoxy(X+3,Y+2);
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	1cda      	adds	r2, r3, #3
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	3302      	adds	r3, #2
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fe fcef 	bl	8001d64 <gotoxy>
	printf("_");
 8003386:	205f      	movs	r0, #95	; 0x5f
 8003388:	f002 fa5c 	bl	8005844 <putchar>
	gotoxy(X-3,Y+2);
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	1eda      	subs	r2, r3, #3
 8003390:	79bb      	ldrb	r3, [r7, #6]
 8003392:	3302      	adds	r3, #2
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fce4 	bl	8001d64 <gotoxy>
	printf("_");
 800339c:	205f      	movs	r0, #95	; 0x5f
 800339e:	f002 fa51 	bl	8005844 <putchar>
	gotoxy(X+4,Y+2);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	79bb      	ldrb	r3, [r7, #6]
 80033a8:	3302      	adds	r3, #2
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fcd9 	bl	8001d64 <gotoxy>
	printf("(");
 80033b2:	2028      	movs	r0, #40	; 0x28
 80033b4:	f002 fa46 	bl	8005844 <putchar>
	gotoxy(X-4,Y+2);
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	1f1a      	subs	r2, r3, #4
 80033bc:	79bb      	ldrb	r3, [r7, #6]
 80033be:	3302      	adds	r3, #2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f7fe fcce 	bl	8001d64 <gotoxy>
	printf(")");
 80033c8:	2029      	movs	r0, #41	; 0x29
 80033ca:	f002 fa3b 	bl	8005844 <putchar>

	gotoxy(X-5,Y+1);
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	1f5a      	subs	r2, r3, #5
 80033d2:	79bb      	ldrb	r3, [r7, #6]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f7fe fcc3 	bl	8001d64 <gotoxy>
	printf("(");
 80033de:	2028      	movs	r0, #40	; 0x28
 80033e0:	f002 fa30 	bl	8005844 <putchar>
	gotoxy(X+5,Y+1);
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	1d5a      	adds	r2, r3, #5
 80033e8:	79bb      	ldrb	r3, [r7, #6]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fe fcb8 	bl	8001d64 <gotoxy>
	printf("(");
 80033f4:	2028      	movs	r0, #40	; 0x28
 80033f6:	f002 fa25 	bl	8005844 <putchar>
	gotoxy(X-6,Y);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	3b06      	subs	r3, #6
 80033fe:	79ba      	ldrb	r2, [r7, #6]
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fcae 	bl	8001d64 <gotoxy>
	printf("(");
 8003408:	2028      	movs	r0, #40	; 0x28
 800340a:	f002 fa1b 	bl	8005844 <putchar>
	gotoxy(X+6,Y);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	3306      	adds	r3, #6
 8003412:	79ba      	ldrb	r2, [r7, #6]
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fca4 	bl	8001d64 <gotoxy>
	printf(")");
 800341c:	2029      	movs	r0, #41	; 0x29
 800341e:	f002 fa11 	bl	8005844 <putchar>

	gotoxy(X-5,Y-1);
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	1f5a      	subs	r2, r3, #5
 8003426:	79bb      	ldrb	r3, [r7, #6]
 8003428:	3b01      	subs	r3, #1
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fe fc99 	bl	8001d64 <gotoxy>
	printf("(");
 8003432:	2028      	movs	r0, #40	; 0x28
 8003434:	f002 fa06 	bl	8005844 <putchar>
	gotoxy(X+5,Y-1);
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	1d5a      	adds	r2, r3, #5
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	3b01      	subs	r3, #1
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7fe fc8e 	bl	8001d64 <gotoxy>
	printf(")");
 8003448:	2029      	movs	r0, #41	; 0x29
 800344a:	f002 f9fb 	bl	8005844 <putchar>
	gotoxy(X-4,Y-2);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	1f1a      	subs	r2, r3, #4
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	3b02      	subs	r3, #2
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fc83 	bl	8001d64 <gotoxy>
	printf("(");
 800345e:	2028      	movs	r0, #40	; 0x28
 8003460:	f002 f9f0 	bl	8005844 <putchar>
	gotoxy(X+4,Y-2);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	3b02      	subs	r3, #2
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7fe fc78 	bl	8001d64 <gotoxy>
	printf(")");
 8003474:	2029      	movs	r0, #41	; 0x29
 8003476:	f002 f9e5 	bl	8005844 <putchar>

	gotoxy(X-3,Y-3);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	1eda      	subs	r2, r3, #3
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	3b03      	subs	r3, #3
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7fe fc6d 	bl	8001d64 <gotoxy>
	printf("_");
 800348a:	205f      	movs	r0, #95	; 0x5f
 800348c:	f002 f9da 	bl	8005844 <putchar>
	gotoxy(X+3,Y-3);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	1cda      	adds	r2, r3, #3
 8003494:	79bb      	ldrb	r3, [r7, #6]
 8003496:	3b03      	subs	r3, #3
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f7fe fc62 	bl	8001d64 <gotoxy>
	printf("_");
 80034a0:	205f      	movs	r0, #95	; 0x5f
 80034a2:	f002 f9cf 	bl	8005844 <putchar>
	gotoxy(X-2,Y-3);
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	1e9a      	subs	r2, r3, #2
 80034aa:	79bb      	ldrb	r3, [r7, #6]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7fe fc57 	bl	8001d64 <gotoxy>
	printf("(");
 80034b6:	2028      	movs	r0, #40	; 0x28
 80034b8:	f002 f9c4 	bl	8005844 <putchar>
	gotoxy(X+2,Y-3);
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	79bb      	ldrb	r3, [r7, #6]
 80034c2:	3b03      	subs	r3, #3
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7fe fc4c 	bl	8001d64 <gotoxy>
	printf(")");
 80034cc:	2029      	movs	r0, #41	; 0x29
 80034ce:	f002 f9b9 	bl	8005844 <putchar>

	gotoxy(X-1,Y-4);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	79bb      	ldrb	r3, [r7, #6]
 80034d8:	3b04      	subs	r3, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f7fe fc41 	bl	8001d64 <gotoxy>
	printf("_");
 80034e2:	205f      	movs	r0, #95	; 0x5f
 80034e4:	f002 f9ae 	bl	8005844 <putchar>
	gotoxy(X,Y-4);
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	79bb      	ldrb	r3, [r7, #6]
 80034ec:	3b04      	subs	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe fc37 	bl	8001d64 <gotoxy>
	printf("_");
 80034f6:	205f      	movs	r0, #95	; 0x5f
 80034f8:	f002 f9a4 	bl	8005844 <putchar>
	gotoxy(X+1,Y-4);
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	79bb      	ldrb	r3, [r7, #6]
 8003502:	3b04      	subs	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7fe fc2c 	bl	8001d64 <gotoxy>
	printf("_");
 800350c:	205f      	movs	r0, #95	; 0x5f
 800350e:	f002 f999 	bl	8005844 <putchar>

	gotoxy(X-2,Y);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	3b02      	subs	r3, #2
 8003516:	79ba      	ldrb	r2, [r7, #6]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fc22 	bl	8001d64 <gotoxy>
	printf("O");
 8003520:	204f      	movs	r0, #79	; 0x4f
 8003522:	f002 f98f 	bl	8005844 <putchar>
	gotoxy(X+1,Y+2);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	79bb      	ldrb	r3, [r7, #6]
 800352c:	3302      	adds	r3, #2
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7fe fc17 	bl	8001d64 <gotoxy>
	printf("o");
 8003536:	206f      	movs	r0, #111	; 0x6f
 8003538:	f002 f984 	bl	8005844 <putchar>
	gotoxy(X+3,Y-1);
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	1cda      	adds	r2, r3, #3
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	3b01      	subs	r3, #1
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7fe fc0c 	bl	8001d64 <gotoxy>
	printf("O");
 800354c:	204f      	movs	r0, #79	; 0x4f
 800354e:	f002 f979 	bl	8005844 <putchar>
=======
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	1e5a      	subs	r2, r3, #1
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	3303      	adds	r3, #3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7fe fb86 	bl	80014d0 <gotoxy>
	printf("_");
 8002dc4:	205f      	movs	r0, #95	; 0x5f
 8002dc6:	f002 feb7 	bl	8005b38 <putchar>
	gotoxy(X,Y+3);
 8002dca:	79fa      	ldrb	r2, [r7, #7]
 8002dcc:	79bb      	ldrb	r3, [r7, #6]
 8002dce:	3303      	adds	r3, #3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f7fe fb7c 	bl	80014d0 <gotoxy>
	printf("_");
 8002dd8:	205f      	movs	r0, #95	; 0x5f
 8002dda:	f002 fead 	bl	8005b38 <putchar>
	gotoxy(X+1,Y+3);
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	79bb      	ldrb	r3, [r7, #6]
 8002de4:	3303      	adds	r3, #3
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f7fe fb71 	bl	80014d0 <gotoxy>
	printf("_");
 8002dee:	205f      	movs	r0, #95	; 0x5f
 8002df0:	f002 fea2 	bl	8005b38 <putchar>
	gotoxy(X-2,Y+3);
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	1e9a      	subs	r2, r3, #2
 8002df8:	79bb      	ldrb	r3, [r7, #6]
 8002dfa:	3303      	adds	r3, #3
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fe fb66 	bl	80014d0 <gotoxy>
	printf("(");
 8002e04:	2028      	movs	r0, #40	; 0x28
 8002e06:	f002 fe97 	bl	8005b38 <putchar>
	gotoxy(X+2,Y+3);
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	1c9a      	adds	r2, r3, #2
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	3303      	adds	r3, #3
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fe fb5b 	bl	80014d0 <gotoxy>
	printf(")");
 8002e1a:	2029      	movs	r0, #41	; 0x29
 8002e1c:	f002 fe8c 	bl	8005b38 <putchar>

	gotoxy(X+3,Y+2);
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	1cda      	adds	r2, r3, #3
 8002e24:	79bb      	ldrb	r3, [r7, #6]
 8002e26:	3302      	adds	r3, #2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7fe fb50 	bl	80014d0 <gotoxy>
	printf("_");
 8002e30:	205f      	movs	r0, #95	; 0x5f
 8002e32:	f002 fe81 	bl	8005b38 <putchar>
	gotoxy(X-3,Y+2);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	1eda      	subs	r2, r3, #3
 8002e3a:	79bb      	ldrb	r3, [r7, #6]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7fe fb45 	bl	80014d0 <gotoxy>
	printf("_");
 8002e46:	205f      	movs	r0, #95	; 0x5f
 8002e48:	f002 fe76 	bl	8005b38 <putchar>
	gotoxy(X+4,Y+2);
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	79bb      	ldrb	r3, [r7, #6]
 8002e52:	3302      	adds	r3, #2
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7fe fb3a 	bl	80014d0 <gotoxy>
	printf("(");
 8002e5c:	2028      	movs	r0, #40	; 0x28
 8002e5e:	f002 fe6b 	bl	8005b38 <putchar>
	gotoxy(X-4,Y+2);
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	1f1a      	subs	r2, r3, #4
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fe fb2f 	bl	80014d0 <gotoxy>
	printf(")");
 8002e72:	2029      	movs	r0, #41	; 0x29
 8002e74:	f002 fe60 	bl	8005b38 <putchar>

	gotoxy(X-5,Y+1);
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	1f5a      	subs	r2, r3, #5
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f7fe fb24 	bl	80014d0 <gotoxy>
	printf("(");
 8002e88:	2028      	movs	r0, #40	; 0x28
 8002e8a:	f002 fe55 	bl	8005b38 <putchar>
	gotoxy(X+5,Y+1);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	1d5a      	adds	r2, r3, #5
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	3301      	adds	r3, #1
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7fe fb19 	bl	80014d0 <gotoxy>
	printf("(");
 8002e9e:	2028      	movs	r0, #40	; 0x28
 8002ea0:	f002 fe4a 	bl	8005b38 <putchar>
	gotoxy(X-6,Y);
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	3b06      	subs	r3, #6
 8002ea8:	79ba      	ldrb	r2, [r7, #6]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fb0f 	bl	80014d0 <gotoxy>
	printf("(");
 8002eb2:	2028      	movs	r0, #40	; 0x28
 8002eb4:	f002 fe40 	bl	8005b38 <putchar>
	gotoxy(X+6,Y);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	3306      	adds	r3, #6
 8002ebc:	79ba      	ldrb	r2, [r7, #6]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fb05 	bl	80014d0 <gotoxy>
	printf(")");
 8002ec6:	2029      	movs	r0, #41	; 0x29
 8002ec8:	f002 fe36 	bl	8005b38 <putchar>

	gotoxy(X-5,Y-1);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	1f5a      	subs	r2, r3, #5
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f7fe fafa 	bl	80014d0 <gotoxy>
	printf("(");
 8002edc:	2028      	movs	r0, #40	; 0x28
 8002ede:	f002 fe2b 	bl	8005b38 <putchar>
	gotoxy(X+5,Y-1);
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	1d5a      	adds	r2, r3, #5
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7fe faef 	bl	80014d0 <gotoxy>
	printf(")");
 8002ef2:	2029      	movs	r0, #41	; 0x29
 8002ef4:	f002 fe20 	bl	8005b38 <putchar>
	gotoxy(X-4,Y-2);
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	1f1a      	subs	r2, r3, #4
 8002efc:	79bb      	ldrb	r3, [r7, #6]
 8002efe:	3b02      	subs	r3, #2
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fe fae4 	bl	80014d0 <gotoxy>
	printf("(");
 8002f08:	2028      	movs	r0, #40	; 0x28
 8002f0a:	f002 fe15 	bl	8005b38 <putchar>
	gotoxy(X+4,Y-2);
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	1d1a      	adds	r2, r3, #4
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	3b02      	subs	r3, #2
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7fe fad9 	bl	80014d0 <gotoxy>
	printf(")");
 8002f1e:	2029      	movs	r0, #41	; 0x29
 8002f20:	f002 fe0a 	bl	8005b38 <putchar>

	gotoxy(X-3,Y-3);
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	1eda      	subs	r2, r3, #3
 8002f28:	79bb      	ldrb	r3, [r7, #6]
 8002f2a:	3b03      	subs	r3, #3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f7fe face 	bl	80014d0 <gotoxy>
	printf("_");
 8002f34:	205f      	movs	r0, #95	; 0x5f
 8002f36:	f002 fdff 	bl	8005b38 <putchar>
	gotoxy(X+3,Y-3);
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	1cda      	adds	r2, r3, #3
 8002f3e:	79bb      	ldrb	r3, [r7, #6]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7fe fac3 	bl	80014d0 <gotoxy>
	printf("_");
 8002f4a:	205f      	movs	r0, #95	; 0x5f
 8002f4c:	f002 fdf4 	bl	8005b38 <putchar>
	gotoxy(X-2,Y-3);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	1e9a      	subs	r2, r3, #2
 8002f54:	79bb      	ldrb	r3, [r7, #6]
 8002f56:	3b03      	subs	r3, #3
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7fe fab8 	bl	80014d0 <gotoxy>
	printf("(");
 8002f60:	2028      	movs	r0, #40	; 0x28
 8002f62:	f002 fde9 	bl	8005b38 <putchar>
	gotoxy(X+2,Y-3);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	79bb      	ldrb	r3, [r7, #6]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f7fe faad 	bl	80014d0 <gotoxy>
	printf(")");
 8002f76:	2029      	movs	r0, #41	; 0x29
 8002f78:	f002 fdde 	bl	8005b38 <putchar>

	gotoxy(X-1,Y-4);
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	3b04      	subs	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7fe faa2 	bl	80014d0 <gotoxy>
	printf("_");
 8002f8c:	205f      	movs	r0, #95	; 0x5f
 8002f8e:	f002 fdd3 	bl	8005b38 <putchar>
	gotoxy(X,Y-4);
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	3b04      	subs	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7fe fa98 	bl	80014d0 <gotoxy>
	printf("_");
 8002fa0:	205f      	movs	r0, #95	; 0x5f
 8002fa2:	f002 fdc9 	bl	8005b38 <putchar>
	gotoxy(X+1,Y-4);
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	79bb      	ldrb	r3, [r7, #6]
 8002fac:	3b04      	subs	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fe fa8d 	bl	80014d0 <gotoxy>
	printf("_");
 8002fb6:	205f      	movs	r0, #95	; 0x5f
 8002fb8:	f002 fdbe 	bl	8005b38 <putchar>

	gotoxy(X-2,Y);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	79ba      	ldrb	r2, [r7, #6]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fa83 	bl	80014d0 <gotoxy>
	printf("O");
 8002fca:	204f      	movs	r0, #79	; 0x4f
 8002fcc:	f002 fdb4 	bl	8005b38 <putchar>
	gotoxy(X+1,Y+2);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	79bb      	ldrb	r3, [r7, #6]
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fe fa78 	bl	80014d0 <gotoxy>
	printf("o");
 8002fe0:	206f      	movs	r0, #111	; 0x6f
 8002fe2:	f002 fda9 	bl	8005b38 <putchar>
	gotoxy(X+3,Y-1);
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	1cda      	adds	r2, r3, #3
 8002fea:	79bb      	ldrb	r3, [r7, #6]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7fe fa6d 	bl	80014d0 <gotoxy>
	printf("O");
 8002ff6:	204f      	movs	r0, #79	; 0x4f
 8002ff8:	f002 fd9e 	bl	8005b38 <putchar>
>>>>>>> Stashed changes
=======
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	1e5a      	subs	r2, r3, #1
 80036c0:	79bb      	ldrb	r3, [r7, #6]
 80036c2:	3303      	adds	r3, #3
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7fe faf0 	bl	8001cac <gotoxy>
	printf("_");
 80036cc:	205f      	movs	r0, #95	; 0x5f
 80036ce:	f002 ff4d 	bl	800656c <putchar>
	gotoxy(X,Y+3);
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	79bb      	ldrb	r3, [r7, #6]
 80036d6:	3303      	adds	r3, #3
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7fe fae6 	bl	8001cac <gotoxy>
	printf("_");
 80036e0:	205f      	movs	r0, #95	; 0x5f
 80036e2:	f002 ff43 	bl	800656c <putchar>
	gotoxy(X+1,Y+3);
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	79bb      	ldrb	r3, [r7, #6]
 80036ec:	3303      	adds	r3, #3
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f7fe fadb 	bl	8001cac <gotoxy>
	printf("_");
 80036f6:	205f      	movs	r0, #95	; 0x5f
 80036f8:	f002 ff38 	bl	800656c <putchar>
	gotoxy(X-2,Y+3);
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	1e9a      	subs	r2, r3, #2
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	3303      	adds	r3, #3
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7fe fad0 	bl	8001cac <gotoxy>
	printf("(");
 800370c:	2028      	movs	r0, #40	; 0x28
 800370e:	f002 ff2d 	bl	800656c <putchar>
	gotoxy(X+2,Y+3);
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	79bb      	ldrb	r3, [r7, #6]
 8003718:	3303      	adds	r3, #3
 800371a:	4619      	mov	r1, r3
 800371c:	4610      	mov	r0, r2
 800371e:	f7fe fac5 	bl	8001cac <gotoxy>
	printf(")");
 8003722:	2029      	movs	r0, #41	; 0x29
 8003724:	f002 ff22 	bl	800656c <putchar>

	gotoxy(X+3,Y+2);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	1cda      	adds	r2, r3, #3
 800372c:	79bb      	ldrb	r3, [r7, #6]
 800372e:	3302      	adds	r3, #2
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe faba 	bl	8001cac <gotoxy>
	printf("_");
 8003738:	205f      	movs	r0, #95	; 0x5f
 800373a:	f002 ff17 	bl	800656c <putchar>
	gotoxy(X-3,Y+2);
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	1eda      	subs	r2, r3, #3
 8003742:	79bb      	ldrb	r3, [r7, #6]
 8003744:	3302      	adds	r3, #2
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fe faaf 	bl	8001cac <gotoxy>
	printf("_");
 800374e:	205f      	movs	r0, #95	; 0x5f
 8003750:	f002 ff0c 	bl	800656c <putchar>
	gotoxy(X+4,Y+2);
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	1d1a      	adds	r2, r3, #4
 8003758:	79bb      	ldrb	r3, [r7, #6]
 800375a:	3302      	adds	r3, #2
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fe faa4 	bl	8001cac <gotoxy>
	printf("(");
 8003764:	2028      	movs	r0, #40	; 0x28
 8003766:	f002 ff01 	bl	800656c <putchar>
	gotoxy(X-4,Y+2);
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	1f1a      	subs	r2, r3, #4
 800376e:	79bb      	ldrb	r3, [r7, #6]
 8003770:	3302      	adds	r3, #2
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7fe fa99 	bl	8001cac <gotoxy>
	printf(")");
 800377a:	2029      	movs	r0, #41	; 0x29
 800377c:	f002 fef6 	bl	800656c <putchar>

	gotoxy(X-5,Y+1);
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	1f5a      	subs	r2, r3, #5
 8003784:	79bb      	ldrb	r3, [r7, #6]
 8003786:	3301      	adds	r3, #1
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe fa8e 	bl	8001cac <gotoxy>
	printf("(");
 8003790:	2028      	movs	r0, #40	; 0x28
 8003792:	f002 feeb 	bl	800656c <putchar>
	gotoxy(X+5,Y+1);
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	1d5a      	adds	r2, r3, #5
 800379a:	79bb      	ldrb	r3, [r7, #6]
 800379c:	3301      	adds	r3, #1
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7fe fa83 	bl	8001cac <gotoxy>
	printf("(");
 80037a6:	2028      	movs	r0, #40	; 0x28
 80037a8:	f002 fee0 	bl	800656c <putchar>
	gotoxy(X-6,Y);
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	3b06      	subs	r3, #6
 80037b0:	79ba      	ldrb	r2, [r7, #6]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fa79 	bl	8001cac <gotoxy>
	printf("(");
 80037ba:	2028      	movs	r0, #40	; 0x28
 80037bc:	f002 fed6 	bl	800656c <putchar>
	gotoxy(X+6,Y);
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	3306      	adds	r3, #6
 80037c4:	79ba      	ldrb	r2, [r7, #6]
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fa6f 	bl	8001cac <gotoxy>
	printf(")");
 80037ce:	2029      	movs	r0, #41	; 0x29
 80037d0:	f002 fecc 	bl	800656c <putchar>

	gotoxy(X-5,Y-1);
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	1f5a      	subs	r2, r3, #5
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	3b01      	subs	r3, #1
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe fa64 	bl	8001cac <gotoxy>
	printf("(");
 80037e4:	2028      	movs	r0, #40	; 0x28
 80037e6:	f002 fec1 	bl	800656c <putchar>
	gotoxy(X+5,Y-1);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	1d5a      	adds	r2, r3, #5
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7fe fa59 	bl	8001cac <gotoxy>
	printf(")");
 80037fa:	2029      	movs	r0, #41	; 0x29
 80037fc:	f002 feb6 	bl	800656c <putchar>
	gotoxy(X-4,Y-2);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	1f1a      	subs	r2, r3, #4
 8003804:	79bb      	ldrb	r3, [r7, #6]
 8003806:	3b02      	subs	r3, #2
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7fe fa4e 	bl	8001cac <gotoxy>
	printf("(");
 8003810:	2028      	movs	r0, #40	; 0x28
 8003812:	f002 feab 	bl	800656c <putchar>
	gotoxy(X+4,Y-2);
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	1d1a      	adds	r2, r3, #4
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	3b02      	subs	r3, #2
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7fe fa43 	bl	8001cac <gotoxy>
	printf(")");
 8003826:	2029      	movs	r0, #41	; 0x29
 8003828:	f002 fea0 	bl	800656c <putchar>

	gotoxy(X-3,Y-3);
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	1eda      	subs	r2, r3, #3
 8003830:	79bb      	ldrb	r3, [r7, #6]
 8003832:	3b03      	subs	r3, #3
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7fe fa38 	bl	8001cac <gotoxy>
	printf("_");
 800383c:	205f      	movs	r0, #95	; 0x5f
 800383e:	f002 fe95 	bl	800656c <putchar>
	gotoxy(X+3,Y-3);
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	1cda      	adds	r2, r3, #3
 8003846:	79bb      	ldrb	r3, [r7, #6]
 8003848:	3b03      	subs	r3, #3
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe fa2d 	bl	8001cac <gotoxy>
	printf("_");
 8003852:	205f      	movs	r0, #95	; 0x5f
 8003854:	f002 fe8a 	bl	800656c <putchar>
	gotoxy(X-2,Y-3);
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	1e9a      	subs	r2, r3, #2
 800385c:	79bb      	ldrb	r3, [r7, #6]
 800385e:	3b03      	subs	r3, #3
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f7fe fa22 	bl	8001cac <gotoxy>
	printf("(");
 8003868:	2028      	movs	r0, #40	; 0x28
 800386a:	f002 fe7f 	bl	800656c <putchar>
	gotoxy(X+2,Y-3);
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	79bb      	ldrb	r3, [r7, #6]
 8003874:	3b03      	subs	r3, #3
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7fe fa17 	bl	8001cac <gotoxy>
	printf(")");
 800387e:	2029      	movs	r0, #41	; 0x29
 8003880:	f002 fe74 	bl	800656c <putchar>

	gotoxy(X-1,Y-4);
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	79bb      	ldrb	r3, [r7, #6]
 800388a:	3b04      	subs	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f7fe fa0c 	bl	8001cac <gotoxy>
	printf("_");
 8003894:	205f      	movs	r0, #95	; 0x5f
 8003896:	f002 fe69 	bl	800656c <putchar>
	gotoxy(X,Y-4);
 800389a:	79fa      	ldrb	r2, [r7, #7]
 800389c:	79bb      	ldrb	r3, [r7, #6]
 800389e:	3b04      	subs	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe fa02 	bl	8001cac <gotoxy>
	printf("_");
 80038a8:	205f      	movs	r0, #95	; 0x5f
 80038aa:	f002 fe5f 	bl	800656c <putchar>
	gotoxy(X+1,Y-4);
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	79bb      	ldrb	r3, [r7, #6]
 80038b4:	3b04      	subs	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe f9f7 	bl	8001cac <gotoxy>
	printf("_");
 80038be:	205f      	movs	r0, #95	; 0x5f
 80038c0:	f002 fe54 	bl	800656c <putchar>

	gotoxy(X-2,Y);
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	3b02      	subs	r3, #2
 80038c8:	79ba      	ldrb	r2, [r7, #6]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe f9ed 	bl	8001cac <gotoxy>
	printf("O");
 80038d2:	204f      	movs	r0, #79	; 0x4f
 80038d4:	f002 fe4a 	bl	800656c <putchar>
	gotoxy(X+1,Y+2);
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	79bb      	ldrb	r3, [r7, #6]
 80038de:	3302      	adds	r3, #2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f7fe f9e2 	bl	8001cac <gotoxy>
	printf("o");
 80038e8:	206f      	movs	r0, #111	; 0x6f
 80038ea:	f002 fe3f 	bl	800656c <putchar>
	gotoxy(X+3,Y-1);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	1cda      	adds	r2, r3, #3
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fe f9d7 	bl	8001cac <gotoxy>
	printf("O");
 80038fe:	204f      	movs	r0, #79	; 0x4f
 8003900:	f002 fe34 	bl	800656c <putchar>
>>>>>>> Stashed changes

	//middle of the Moon
	//gotoxy(51,17);
	//printf("O");
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <drawhearth>:


void drawhearth(gameState_t* gameState){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8003564:	2101      	movs	r1, #1
 8003566:	200f      	movs	r0, #15
 8003568:	f7fe fbfc 	bl	8001d64 <gotoxy>
	printf("           ");
 800356c:	483b      	ldr	r0, [pc, #236]	; (800365c <drawhearth+0x100>)
 800356e:	f002 f951 	bl	8005814 <iprintf>
	gotoxy(15,2);
 8003572:	2102      	movs	r1, #2
 8003574:	200f      	movs	r0, #15
 8003576:	f7fe fbf5 	bl	8001d64 <gotoxy>
	printf("           ");
 800357a:	4838      	ldr	r0, [pc, #224]	; (800365c <drawhearth+0x100>)
 800357c:	f002 f94a 	bl	8005814 <iprintf>
	fgcolor(1);
 8003580:	2001      	movs	r0, #1
 8003582:	f7fe fbc3 	bl	8001d0c <fgcolor>

	if(gameState->cityLives >= 1){
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <drawhearth+0x6c>
		gotoxy(15,1);
 8003590:	2101      	movs	r1, #1
 8003592:	200f      	movs	r0, #15
 8003594:	f7fe fbe6 	bl	8001d64 <gotoxy>
		printf("%c",219);
 8003598:	20db      	movs	r0, #219	; 0xdb
 800359a:	f002 f953 	bl	8005844 <putchar>
		gotoxy(17,1);
 800359e:	2101      	movs	r1, #1
 80035a0:	2011      	movs	r0, #17
 80035a2:	f7fe fbdf 	bl	8001d64 <gotoxy>
		printf("%c",219);
 80035a6:	20db      	movs	r0, #219	; 0xdb
 80035a8:	f002 f94c 	bl	8005844 <putchar>
		gotoxy(16,2);
 80035ac:	2102      	movs	r1, #2
 80035ae:	2010      	movs	r0, #16
 80035b0:	f7fe fbd8 	bl	8001d64 <gotoxy>
		printf("%c",223);
 80035b4:	20df      	movs	r0, #223	; 0xdf
 80035b6:	f002 f945 	bl	8005844 <putchar>
		gotoxy(16,1);
 80035ba:	2101      	movs	r1, #1
 80035bc:	2010      	movs	r0, #16
 80035be:	f7fe fbd1 	bl	8001d64 <gotoxy>
		printf("%c",220);
 80035c2:	20dc      	movs	r0, #220	; 0xdc
 80035c4:	f002 f93e 	bl	8005844 <putchar>
	}
	if(gameState->cityLives >= 2){
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d91b      	bls.n	800360a <drawhearth+0xae>
		gotoxy(19,1);
 80035d2:	2101      	movs	r1, #1
 80035d4:	2013      	movs	r0, #19
 80035d6:	f7fe fbc5 	bl	8001d64 <gotoxy>
		printf("%c",219);
 80035da:	20db      	movs	r0, #219	; 0xdb
 80035dc:	f002 f932 	bl	8005844 <putchar>
		gotoxy(21,1);
 80035e0:	2101      	movs	r1, #1
 80035e2:	2015      	movs	r0, #21
 80035e4:	f7fe fbbe 	bl	8001d64 <gotoxy>
		printf("%c",219);
 80035e8:	20db      	movs	r0, #219	; 0xdb
 80035ea:	f002 f92b 	bl	8005844 <putchar>
		gotoxy(20,2);
 80035ee:	2102      	movs	r1, #2
 80035f0:	2014      	movs	r0, #20
 80035f2:	f7fe fbb7 	bl	8001d64 <gotoxy>
		printf("%c",223);
 80035f6:	20df      	movs	r0, #223	; 0xdf
 80035f8:	f002 f924 	bl	8005844 <putchar>
		gotoxy(20,1);
 80035fc:	2101      	movs	r1, #1
 80035fe:	2014      	movs	r0, #20
 8003600:	f7fe fbb0 	bl	8001d64 <gotoxy>
		printf("%c",220);
 8003604:	20dc      	movs	r0, #220	; 0xdc
 8003606:	f002 f91d 	bl	8005844 <putchar>

	}
	if(gameState->cityLives >= 3){
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003610:	2b02      	cmp	r3, #2
 8003612:	d91b      	bls.n	800364c <drawhearth+0xf0>
		gotoxy(23,1);
 8003614:	2101      	movs	r1, #1
 8003616:	2017      	movs	r0, #23
 8003618:	f7fe fba4 	bl	8001d64 <gotoxy>
		printf("%c",219);
 800361c:	20db      	movs	r0, #219	; 0xdb
 800361e:	f002 f911 	bl	8005844 <putchar>
		gotoxy(25,1);
 8003622:	2101      	movs	r1, #1
 8003624:	2019      	movs	r0, #25
 8003626:	f7fe fb9d 	bl	8001d64 <gotoxy>
		printf("%c",219);
 800362a:	20db      	movs	r0, #219	; 0xdb
 800362c:	f002 f90a 	bl	8005844 <putchar>
		gotoxy(24,2);
 8003630:	2102      	movs	r1, #2
 8003632:	2018      	movs	r0, #24
 8003634:	f7fe fb96 	bl	8001d64 <gotoxy>
		printf("%c",223);
 8003638:	20df      	movs	r0, #223	; 0xdf
 800363a:	f002 f903 	bl	8005844 <putchar>
		gotoxy(24,1);
 800363e:	2101      	movs	r1, #1
 8003640:	2018      	movs	r0, #24
 8003642:	f7fe fb8f 	bl	8001d64 <gotoxy>
		printf("%c",220);
 8003646:	20dc      	movs	r0, #220	; 0xdc
 8003648:	f002 f8fc 	bl	8005844 <putchar>
	}
	fgcolor(15);
 800364c:	200f      	movs	r0, #15
 800364e:	f7fe fb5d 	bl	8001d0c <fgcolor>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08006cc4 	.word	0x08006cc4

08003660 <drawEnemy>:
=======
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <drawhearth>:


void drawhearth(gameState_t* gameState){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 800300c:	2101      	movs	r1, #1
 800300e:	200f      	movs	r0, #15
 8003010:	f7fe fa5e 	bl	80014d0 <gotoxy>
	printf("           ");
 8003014:	483b      	ldr	r0, [pc, #236]	; (8003104 <drawhearth+0x100>)
 8003016:	f002 fd77 	bl	8005b08 <iprintf>
	gotoxy(15,2);
 800301a:	2102      	movs	r1, #2
 800301c:	200f      	movs	r0, #15
 800301e:	f7fe fa57 	bl	80014d0 <gotoxy>
	printf("           ");
 8003022:	4838      	ldr	r0, [pc, #224]	; (8003104 <drawhearth+0x100>)
 8003024:	f002 fd70 	bl	8005b08 <iprintf>
	fgcolor(1);
 8003028:	2001      	movs	r0, #1
 800302a:	f7fe fa25 	bl	8001478 <fgcolor>

	if(gameState->cityLives >= 1){
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <drawhearth+0x6c>
		gotoxy(15,1);
 8003038:	2101      	movs	r1, #1
 800303a:	200f      	movs	r0, #15
 800303c:	f7fe fa48 	bl	80014d0 <gotoxy>
		printf("%c",219);
 8003040:	20db      	movs	r0, #219	; 0xdb
 8003042:	f002 fd79 	bl	8005b38 <putchar>
		gotoxy(17,1);
 8003046:	2101      	movs	r1, #1
 8003048:	2011      	movs	r0, #17
 800304a:	f7fe fa41 	bl	80014d0 <gotoxy>
		printf("%c",219);
 800304e:	20db      	movs	r0, #219	; 0xdb
 8003050:	f002 fd72 	bl	8005b38 <putchar>
		gotoxy(16,2);
 8003054:	2102      	movs	r1, #2
 8003056:	2010      	movs	r0, #16
 8003058:	f7fe fa3a 	bl	80014d0 <gotoxy>
		printf("%c",223);
 800305c:	20df      	movs	r0, #223	; 0xdf
 800305e:	f002 fd6b 	bl	8005b38 <putchar>
		gotoxy(16,1);
 8003062:	2101      	movs	r1, #1
 8003064:	2010      	movs	r0, #16
 8003066:	f7fe fa33 	bl	80014d0 <gotoxy>
		printf("%c",220);
 800306a:	20dc      	movs	r0, #220	; 0xdc
 800306c:	f002 fd64 	bl	8005b38 <putchar>
	}
	if(gameState->cityLives >= 2){
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003076:	2b01      	cmp	r3, #1
 8003078:	d91b      	bls.n	80030b2 <drawhearth+0xae>
		gotoxy(19,1);
 800307a:	2101      	movs	r1, #1
 800307c:	2013      	movs	r0, #19
 800307e:	f7fe fa27 	bl	80014d0 <gotoxy>
		printf("%c",219);
 8003082:	20db      	movs	r0, #219	; 0xdb
 8003084:	f002 fd58 	bl	8005b38 <putchar>
		gotoxy(21,1);
 8003088:	2101      	movs	r1, #1
 800308a:	2015      	movs	r0, #21
 800308c:	f7fe fa20 	bl	80014d0 <gotoxy>
		printf("%c",219);
 8003090:	20db      	movs	r0, #219	; 0xdb
 8003092:	f002 fd51 	bl	8005b38 <putchar>
		gotoxy(20,2);
 8003096:	2102      	movs	r1, #2
 8003098:	2014      	movs	r0, #20
 800309a:	f7fe fa19 	bl	80014d0 <gotoxy>
		printf("%c",223);
 800309e:	20df      	movs	r0, #223	; 0xdf
 80030a0:	f002 fd4a 	bl	8005b38 <putchar>
		gotoxy(20,1);
 80030a4:	2101      	movs	r1, #1
 80030a6:	2014      	movs	r0, #20
 80030a8:	f7fe fa12 	bl	80014d0 <gotoxy>
		printf("%c",220);
 80030ac:	20dc      	movs	r0, #220	; 0xdc
 80030ae:	f002 fd43 	bl	8005b38 <putchar>

	}
	if(gameState->cityLives >= 3){
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d91b      	bls.n	80030f4 <drawhearth+0xf0>
		gotoxy(23,1);
 80030bc:	2101      	movs	r1, #1
 80030be:	2017      	movs	r0, #23
 80030c0:	f7fe fa06 	bl	80014d0 <gotoxy>
		printf("%c",219);
 80030c4:	20db      	movs	r0, #219	; 0xdb
 80030c6:	f002 fd37 	bl	8005b38 <putchar>
		gotoxy(25,1);
 80030ca:	2101      	movs	r1, #1
 80030cc:	2019      	movs	r0, #25
 80030ce:	f7fe f9ff 	bl	80014d0 <gotoxy>
		printf("%c",219);
 80030d2:	20db      	movs	r0, #219	; 0xdb
 80030d4:	f002 fd30 	bl	8005b38 <putchar>
		gotoxy(24,2);
 80030d8:	2102      	movs	r1, #2
 80030da:	2018      	movs	r0, #24
 80030dc:	f7fe f9f8 	bl	80014d0 <gotoxy>
		printf("%c",223);
 80030e0:	20df      	movs	r0, #223	; 0xdf
 80030e2:	f002 fd29 	bl	8005b38 <putchar>
		gotoxy(24,1);
 80030e6:	2101      	movs	r1, #1
 80030e8:	2018      	movs	r0, #24
 80030ea:	f7fe f9f1 	bl	80014d0 <gotoxy>
		printf("%c",220);
 80030ee:	20dc      	movs	r0, #220	; 0xdc
 80030f0:	f002 fd22 	bl	8005b38 <putchar>
	}
	fgcolor(15);
 80030f4:	200f      	movs	r0, #15
 80030f6:	f7fe f9bf 	bl	8001478 <fgcolor>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	08006de8 	.word	0x08006de8

08003108 <drawEnemy>:
>>>>>>> Stashed changes
=======
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <drawhearth>:


void drawhearth(gameState_t* gameState){
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	gotoxy(15,1);
 8003914:	2101      	movs	r1, #1
 8003916:	200f      	movs	r0, #15
 8003918:	f7fe f9c8 	bl	8001cac <gotoxy>
	printf("           ");
 800391c:	483b      	ldr	r0, [pc, #236]	; (8003a0c <drawhearth+0x100>)
 800391e:	f002 fe0d 	bl	800653c <iprintf>
	gotoxy(15,2);
 8003922:	2102      	movs	r1, #2
 8003924:	200f      	movs	r0, #15
 8003926:	f7fe f9c1 	bl	8001cac <gotoxy>
	printf("           ");
 800392a:	4838      	ldr	r0, [pc, #224]	; (8003a0c <drawhearth+0x100>)
 800392c:	f002 fe06 	bl	800653c <iprintf>
	fgcolor(1);
 8003930:	2001      	movs	r0, #1
 8003932:	f7fe f98f 	bl	8001c54 <fgcolor>

	if(gameState->cityLives >= 1){
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <drawhearth+0x6c>
		gotoxy(15,1);
 8003940:	2101      	movs	r1, #1
 8003942:	200f      	movs	r0, #15
 8003944:	f7fe f9b2 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003948:	20db      	movs	r0, #219	; 0xdb
 800394a:	f002 fe0f 	bl	800656c <putchar>
		gotoxy(17,1);
 800394e:	2101      	movs	r1, #1
 8003950:	2011      	movs	r0, #17
 8003952:	f7fe f9ab 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003956:	20db      	movs	r0, #219	; 0xdb
 8003958:	f002 fe08 	bl	800656c <putchar>
		gotoxy(16,2);
 800395c:	2102      	movs	r1, #2
 800395e:	2010      	movs	r0, #16
 8003960:	f7fe f9a4 	bl	8001cac <gotoxy>
		printf("%c",223);
 8003964:	20df      	movs	r0, #223	; 0xdf
 8003966:	f002 fe01 	bl	800656c <putchar>
		gotoxy(16,1);
 800396a:	2101      	movs	r1, #1
 800396c:	2010      	movs	r0, #16
 800396e:	f7fe f99d 	bl	8001cac <gotoxy>
		printf("%c",220);
 8003972:	20dc      	movs	r0, #220	; 0xdc
 8003974:	f002 fdfa 	bl	800656c <putchar>
	}
	if(gameState->cityLives >= 2){
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d91b      	bls.n	80039ba <drawhearth+0xae>
		gotoxy(19,1);
 8003982:	2101      	movs	r1, #1
 8003984:	2013      	movs	r0, #19
 8003986:	f7fe f991 	bl	8001cac <gotoxy>
		printf("%c",219);
 800398a:	20db      	movs	r0, #219	; 0xdb
 800398c:	f002 fdee 	bl	800656c <putchar>
		gotoxy(21,1);
 8003990:	2101      	movs	r1, #1
 8003992:	2015      	movs	r0, #21
 8003994:	f7fe f98a 	bl	8001cac <gotoxy>
		printf("%c",219);
 8003998:	20db      	movs	r0, #219	; 0xdb
 800399a:	f002 fde7 	bl	800656c <putchar>
		gotoxy(20,2);
 800399e:	2102      	movs	r1, #2
 80039a0:	2014      	movs	r0, #20
 80039a2:	f7fe f983 	bl	8001cac <gotoxy>
		printf("%c",223);
 80039a6:	20df      	movs	r0, #223	; 0xdf
 80039a8:	f002 fde0 	bl	800656c <putchar>
		gotoxy(20,1);
 80039ac:	2101      	movs	r1, #1
 80039ae:	2014      	movs	r0, #20
 80039b0:	f7fe f97c 	bl	8001cac <gotoxy>
		printf("%c",220);
 80039b4:	20dc      	movs	r0, #220	; 0xdc
 80039b6:	f002 fdd9 	bl	800656c <putchar>

	}
	if(gameState->cityLives >= 3){
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d91b      	bls.n	80039fc <drawhearth+0xf0>
		gotoxy(23,1);
 80039c4:	2101      	movs	r1, #1
 80039c6:	2017      	movs	r0, #23
 80039c8:	f7fe f970 	bl	8001cac <gotoxy>
		printf("%c",219);
 80039cc:	20db      	movs	r0, #219	; 0xdb
 80039ce:	f002 fdcd 	bl	800656c <putchar>
		gotoxy(25,1);
 80039d2:	2101      	movs	r1, #1
 80039d4:	2019      	movs	r0, #25
 80039d6:	f7fe f969 	bl	8001cac <gotoxy>
		printf("%c",219);
 80039da:	20db      	movs	r0, #219	; 0xdb
 80039dc:	f002 fdc6 	bl	800656c <putchar>
		gotoxy(24,2);
 80039e0:	2102      	movs	r1, #2
 80039e2:	2018      	movs	r0, #24
 80039e4:	f7fe f962 	bl	8001cac <gotoxy>
		printf("%c",223);
 80039e8:	20df      	movs	r0, #223	; 0xdf
 80039ea:	f002 fdbf 	bl	800656c <putchar>
		gotoxy(24,1);
 80039ee:	2101      	movs	r1, #1
 80039f0:	2018      	movs	r0, #24
 80039f2:	f7fe f95b 	bl	8001cac <gotoxy>
		printf("%c",220);
 80039f6:	20dc      	movs	r0, #220	; 0xdc
 80039f8:	f002 fdb8 	bl	800656c <putchar>
	}
	fgcolor(15);
 80039fc:	200f      	movs	r0, #15
 80039fe:	f7fe f929 	bl	8001c54 <fgcolor>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	0800781c 	.word	0x0800781c

08003a10 <drawEnemy>:
>>>>>>> Stashed changes
	//const double dt=0.01; //time step (s)
	//const double deg_to_rad = 3.14159265359 / 180; // conversion factor from degrees to radians



void drawEnemy(gameState_t* gameState){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af04      	add	r7, sp, #16
 8003666:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 800366e:	e087      	b.n	8003780 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fcaa 	bl	8002fd2 <fpToInt>
 800367e:	4604      	mov	r4, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fca2 	bl	8002fd2 <fpToInt>
 800368e:	4603      	mov	r3, r0
 8003690:	0fda      	lsrs	r2, r3, #31
 8003692:	4413      	add	r3, r2
 8003694:	105b      	asrs	r3, r3, #1
 8003696:	4619      	mov	r1, r3
 8003698:	4620      	mov	r0, r4
 800369a:	f7fe fb63 	bl	8001d64 <gotoxy>
		printf("       ");
 800369e:	483d      	ldr	r0, [pc, #244]	; (8003794 <drawEnemy+0x134>)
 80036a0:	f002 f8b8 	bl	8005814 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fc90 	bl	8002fd2 <fpToInt>
 80036b2:	4604      	mov	r4, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fc88 	bl	8002fd2 <fpToInt>
 80036c2:	4603      	mov	r3, r0
 80036c4:	3302      	adds	r3, #2
 80036c6:	0fda      	lsrs	r2, r3, #31
 80036c8:	4413      	add	r3, r2
 80036ca:	105b      	asrs	r3, r3, #1
 80036cc:	4619      	mov	r1, r3
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7fe fb48 	bl	8001d64 <gotoxy>
		printf("       ");
 80036d4:	482f      	ldr	r0, [pc, #188]	; (8003794 <drawEnemy+0x134>)
 80036d6:	f002 f89d 	bl	8005814 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fc75 	bl	8002fd2 <fpToInt>
 80036e8:	4604      	mov	r4, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fc6d 	bl	8002fd2 <fpToInt>
 80036f8:	4603      	mov	r3, r0
 80036fa:	0fda      	lsrs	r2, r3, #31
 80036fc:	4413      	add	r3, r2
 80036fe:	105b      	asrs	r3, r3, #1
 8003700:	4619      	mov	r1, r3
 8003702:	4620      	mov	r0, r4
 8003704:	f7fe fb2e 	bl	8001d64 <gotoxy>
		printf("  o o  ");
 8003708:	4823      	ldr	r0, [pc, #140]	; (8003798 <drawEnemy+0x138>)
 800370a:	f002 f883 	bl	8005814 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fc5b 	bl	8002fd2 <fpToInt>
 800371c:	4604      	mov	r4, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fc53 	bl	8002fd2 <fpToInt>
 800372c:	4603      	mov	r3, r0
 800372e:	3302      	adds	r3, #2
 8003730:	0fda      	lsrs	r2, r3, #31
 8003732:	4413      	add	r3, r2
 8003734:	105b      	asrs	r3, r3, #1
 8003736:	4619      	mov	r1, r3
 8003738:	4620      	mov	r0, r4
 800373a:	f7fe fb13 	bl	8001d64 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 800373e:	23bb      	movs	r3, #187	; 0xbb
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	23cd      	movs	r3, #205	; 0xcd
 8003744:	9302      	str	r3, [sp, #8]
 8003746:	23cd      	movs	r3, #205	; 0xcd
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	23cd      	movs	r3, #205	; 0xcd
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	23cd      	movs	r3, #205	; 0xcd
 8003750:	22cd      	movs	r2, #205	; 0xcd
 8003752:	21c9      	movs	r1, #201	; 0xc9
 8003754:	4811      	ldr	r0, [pc, #68]	; (800379c <drawEnemy+0x13c>)
 8003756:	f002 f85d 	bl	8005814 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6852      	ldr	r2, [r2, #4]
 8003778:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f47f af74 	bne.w	8003670 <drawEnemy+0x10>
	}
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	08006cd0 	.word	0x08006cd0
 8003798:	08006cd8 	.word	0x08006cd8
 800379c:	08006ce0 	.word	0x08006ce0

080037a0 <drawCity>:
//47 92


=======
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af04      	add	r7, sp, #16
 800310e:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8003116:	e087      	b.n	8003228 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fcab 	bl	8002a7c <fpToInt>
 8003126:	4604      	mov	r4, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fca3 	bl	8002a7c <fpToInt>
 8003136:	4603      	mov	r3, r0
 8003138:	0fda      	lsrs	r2, r3, #31
 800313a:	4413      	add	r3, r2
 800313c:	105b      	asrs	r3, r3, #1
 800313e:	4619      	mov	r1, r3
 8003140:	4620      	mov	r0, r4
 8003142:	f7fe f9c5 	bl	80014d0 <gotoxy>
		printf("       ");
 8003146:	483d      	ldr	r0, [pc, #244]	; (800323c <drawEnemy+0x134>)
 8003148:	f002 fcde 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fc91 	bl	8002a7c <fpToInt>
 800315a:	4604      	mov	r4, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fc89 	bl	8002a7c <fpToInt>
 800316a:	4603      	mov	r3, r0
 800316c:	3302      	adds	r3, #2
 800316e:	0fda      	lsrs	r2, r3, #31
 8003170:	4413      	add	r3, r2
 8003172:	105b      	asrs	r3, r3, #1
 8003174:	4619      	mov	r1, r3
 8003176:	4620      	mov	r0, r4
 8003178:	f7fe f9aa 	bl	80014d0 <gotoxy>
		printf("       ");
 800317c:	482f      	ldr	r0, [pc, #188]	; (800323c <drawEnemy+0x134>)
 800317e:	f002 fcc3 	bl	8005b08 <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fc76 	bl	8002a7c <fpToInt>
 8003190:	4604      	mov	r4, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fc6e 	bl	8002a7c <fpToInt>
 80031a0:	4603      	mov	r3, r0
 80031a2:	0fda      	lsrs	r2, r3, #31
 80031a4:	4413      	add	r3, r2
 80031a6:	105b      	asrs	r3, r3, #1
 80031a8:	4619      	mov	r1, r3
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7fe f990 	bl	80014d0 <gotoxy>
		printf("  o o  ");
 80031b0:	4823      	ldr	r0, [pc, #140]	; (8003240 <drawEnemy+0x138>)
 80031b2:	f002 fca9 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc5c 	bl	8002a7c <fpToInt>
 80031c4:	4604      	mov	r4, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fc54 	bl	8002a7c <fpToInt>
 80031d4:	4603      	mov	r3, r0
 80031d6:	3302      	adds	r3, #2
 80031d8:	0fda      	lsrs	r2, r3, #31
 80031da:	4413      	add	r3, r2
 80031dc:	105b      	asrs	r3, r3, #1
 80031de:	4619      	mov	r1, r3
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7fe f975 	bl	80014d0 <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 80031e6:	23bb      	movs	r3, #187	; 0xbb
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	23cd      	movs	r3, #205	; 0xcd
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	23cd      	movs	r3, #205	; 0xcd
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	23cd      	movs	r3, #205	; 0xcd
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	23cd      	movs	r3, #205	; 0xcd
 80031f8:	22cd      	movs	r2, #205	; 0xcd
 80031fa:	21c9      	movs	r1, #201	; 0xc9
 80031fc:	4811      	ldr	r0, [pc, #68]	; (8003244 <drawEnemy+0x13c>)
 80031fe:	f002 fc83 	bl	8005b08 <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f af74 	bne.w	8003118 <drawEnemy+0x10>
	}
=======
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	6078      	str	r0, [r7, #4]
	enemyNode_t* thisNode = gameState->enemyLL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

	while(thisNode != NULL){
 8003a1e:	e087      	b.n	8003b30 <drawEnemy+0x120>
		gotoxy(fpToInt(thisNode->enemy->position->x), fpToInt(thisNode->enemy->position->y)/yScale);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fcab 	bl	8003384 <fpToInt>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fca3 	bl	8003384 <fpToInt>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	0fda      	lsrs	r2, r3, #31
 8003a42:	4413      	add	r3, r2
 8003a44:	105b      	asrs	r3, r3, #1
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7fe f92f 	bl	8001cac <gotoxy>
		printf("       ");
 8003a4e:	483d      	ldr	r0, [pc, #244]	; (8003b44 <drawEnemy+0x134>)
 8003a50:	f002 fd74 	bl	800653c <iprintf>
		gotoxy(fpToInt(thisNode->enemy->position->x), (fpToInt(thisNode->enemy->position->y) + 1 * yScale)/yScale);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fc91 	bl	8003384 <fpToInt>
 8003a62:	4604      	mov	r4, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fc89 	bl	8003384 <fpToInt>
 8003a72:	4603      	mov	r3, r0
 8003a74:	3302      	adds	r3, #2
 8003a76:	0fda      	lsrs	r2, r3, #31
 8003a78:	4413      	add	r3, r2
 8003a7a:	105b      	asrs	r3, r3, #1
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7fe f914 	bl	8001cac <gotoxy>
		printf("       ");
 8003a84:	482f      	ldr	r0, [pc, #188]	; (8003b44 <drawEnemy+0x134>)
 8003a86:	f002 fd59 	bl	800653c <iprintf>

		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), fpToInt(thisNode->enemy->nextPosition->y)/yScale);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fc76 	bl	8003384 <fpToInt>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fc6e 	bl	8003384 <fpToInt>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	0fda      	lsrs	r2, r3, #31
 8003aac:	4413      	add	r3, r2
 8003aae:	105b      	asrs	r3, r3, #1
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7fe f8fa 	bl	8001cac <gotoxy>
		printf("  o o  ");
 8003ab8:	4823      	ldr	r0, [pc, #140]	; (8003b48 <drawEnemy+0x138>)
 8003aba:	f002 fd3f 	bl	800653c <iprintf>
		gotoxy(fpToInt(thisNode->enemy->nextPosition->x), (fpToInt(thisNode->enemy->nextPosition->y) + 1 * yScale)/yScale);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fc5c 	bl	8003384 <fpToInt>
 8003acc:	4604      	mov	r4, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fc54 	bl	8003384 <fpToInt>
 8003adc:	4603      	mov	r3, r0
 8003ade:	3302      	adds	r3, #2
 8003ae0:	0fda      	lsrs	r2, r3, #31
 8003ae2:	4413      	add	r3, r2
 8003ae4:	105b      	asrs	r3, r3, #1
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7fe f8df 	bl	8001cac <gotoxy>
		printf("%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 187);
 8003aee:	23bb      	movs	r3, #187	; 0xbb
 8003af0:	9303      	str	r3, [sp, #12]
 8003af2:	23cd      	movs	r3, #205	; 0xcd
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	23cd      	movs	r3, #205	; 0xcd
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	23cd      	movs	r3, #205	; 0xcd
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	23cd      	movs	r3, #205	; 0xcd
 8003b00:	22cd      	movs	r2, #205	; 0xcd
 8003b02:	21c9      	movs	r1, #201	; 0xc9
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <drawEnemy+0x13c>)
 8003b06:	f002 fd19 	bl	800653c <iprintf>

		thisNode->enemy->position->x = thisNode->enemy->nextPosition->x;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	601a      	str	r2, [r3, #0]
		thisNode->enemy->position->y = thisNode->enemy->nextPosition->y;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	605a      	str	r2, [r3, #4]
		thisNode = thisNode->nextEnemyNode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f af74 	bne.w	8003a20 <drawEnemy+0x10>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	08007828 	.word	0x08007828
 8003b48:	08007830 	.word	0x08007830
 8003b4c:	08007838 	.word	0x08007838

08003b50 <drawCity>:
	printf("%c",127);
>>>>>>> Stashed changes
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	bf00      	nop
 800323c:	08006df4 	.word	0x08006df4
 8003240:	08006dfc 	.word	0x08006dfc
 8003244:	08006e04 	.word	0x08006e04

08003248 <drawCity>:
	printf("%c",127);
>>>>>>> Stashed changes
}

void drawCity(){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	200e      	movs	r0, #14
 80037a8:	f7fe fadc 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80037ac:	20db      	movs	r0, #219	; 0xdb
 80037ae:	f002 f849 	bl	8005844 <putchar>

	gotoxy(16,44);
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	2010      	movs	r0, #16
 80037b6:	f7fe fad5 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80037ba:	20db      	movs	r0, #219	; 0xdb
 80037bc:	f002 f842 	bl	8005844 <putchar>

	gotoxy(17,44);
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	2011      	movs	r0, #17
 80037c4:	f7fe face 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80037c8:	20db      	movs	r0, #219	; 0xdb
 80037ca:	f002 f83b 	bl	8005844 <putchar>
	gotoxy(17,43);
 80037ce:	212b      	movs	r1, #43	; 0x2b
 80037d0:	2011      	movs	r0, #17
 80037d2:	f7fe fac7 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80037d6:	20db      	movs	r0, #219	; 0xdb
 80037d8:	f002 f834 	bl	8005844 <putchar>

	gotoxy(19,44);
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	2013      	movs	r0, #19
 80037e0:	f7fe fac0 	bl	8001d64 <gotoxy>
	printf("%c",220);
 80037e4:	20dc      	movs	r0, #220	; 0xdc
 80037e6:	f002 f82d 	bl	8005844 <putchar>

	gotoxy(21,44);
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	2015      	movs	r0, #21
 80037ee:	f7fe fab9 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80037f2:	20db      	movs	r0, #219	; 0xdb
 80037f4:	f002 f826 	bl	8005844 <putchar>

	gotoxy(23,44);
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	2017      	movs	r0, #23
 80037fc:	f7fe fab2 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003800:	20db      	movs	r0, #219	; 0xdb
 8003802:	f002 f81f 	bl	8005844 <putchar>
	gotoxy(23,43);
 8003806:	212b      	movs	r1, #43	; 0x2b
 8003808:	2017      	movs	r0, #23
 800380a:	f7fe faab 	bl	8001d64 <gotoxy>
	printf("%c",220);
 800380e:	20dc      	movs	r0, #220	; 0xdc
 8003810:	f002 f818 	bl	8005844 <putchar>

	gotoxy(25,44);
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	2019      	movs	r0, #25
 8003818:	f7fe faa4 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800381c:	20db      	movs	r0, #219	; 0xdb
 800381e:	f002 f811 	bl	8005844 <putchar>
	gotoxy(25,43);
 8003822:	212b      	movs	r1, #43	; 0x2b
 8003824:	2019      	movs	r0, #25
 8003826:	f7fe fa9d 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800382a:	20db      	movs	r0, #219	; 0xdb
 800382c:	f002 f80a 	bl	8005844 <putchar>
	gotoxy(25,42);
 8003830:	212a      	movs	r1, #42	; 0x2a
 8003832:	2019      	movs	r0, #25
 8003834:	f7fe fa96 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003838:	20db      	movs	r0, #219	; 0xdb
 800383a:	f002 f803 	bl	8005844 <putchar>

	gotoxy(27,44);
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	201b      	movs	r0, #27
 8003842:	f7fe fa8f 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003846:	20db      	movs	r0, #219	; 0xdb
 8003848:	f001 fffc 	bl	8005844 <putchar>
	gotoxy(27,43);
 800384c:	212b      	movs	r1, #43	; 0x2b
 800384e:	201b      	movs	r0, #27
 8003850:	f7fe fa88 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003854:	20dc      	movs	r0, #220	; 0xdc
 8003856:	f001 fff5 	bl	8005844 <putchar>

	gotoxy(28,44);
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	201c      	movs	r0, #28
 800385e:	f7fe fa81 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003862:	20db      	movs	r0, #219	; 0xdb
 8003864:	f001 ffee 	bl	8005844 <putchar>

	gotoxy(36,44);
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	2024      	movs	r0, #36	; 0x24
 800386c:	f7fe fa7a 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003870:	20db      	movs	r0, #219	; 0xdb
 8003872:	f001 ffe7 	bl	8005844 <putchar>
	gotoxy(36,43);
 8003876:	212b      	movs	r1, #43	; 0x2b
 8003878:	2024      	movs	r0, #36	; 0x24
 800387a:	f7fe fa73 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800387e:	20db      	movs	r0, #219	; 0xdb
 8003880:	f001 ffe0 	bl	8005844 <putchar>

	gotoxy(37,44);
 8003884:	212c      	movs	r1, #44	; 0x2c
 8003886:	2025      	movs	r0, #37	; 0x25
 8003888:	f7fe fa6c 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800388c:	20db      	movs	r0, #219	; 0xdb
 800388e:	f001 ffd9 	bl	8005844 <putchar>

	gotoxy(38,44);
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	2026      	movs	r0, #38	; 0x26
 8003896:	f7fe fa65 	bl	8001d64 <gotoxy>
	printf("%c",220);
 800389a:	20dc      	movs	r0, #220	; 0xdc
 800389c:	f001 ffd2 	bl	8005844 <putchar>

	gotoxy(40,44);
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	2028      	movs	r0, #40	; 0x28
 80038a4:	f7fe fa5e 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80038a8:	20db      	movs	r0, #219	; 0xdb
 80038aa:	f001 ffcb 	bl	8005844 <putchar>
	gotoxy(40,43);
 80038ae:	212b      	movs	r1, #43	; 0x2b
 80038b0:	2028      	movs	r0, #40	; 0x28
 80038b2:	f7fe fa57 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80038b6:	20db      	movs	r0, #219	; 0xdb
 80038b8:	f001 ffc4 	bl	8005844 <putchar>

	gotoxy(41,43);
 80038bc:	212b      	movs	r1, #43	; 0x2b
 80038be:	2029      	movs	r0, #41	; 0x29
 80038c0:	f7fe fa50 	bl	8001d64 <gotoxy>
	printf("%c",205);
 80038c4:	20cd      	movs	r0, #205	; 0xcd
 80038c6:	f001 ffbd 	bl	8005844 <putchar>

	gotoxy(42,44);
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	202a      	movs	r0, #42	; 0x2a
 80038ce:	f7fe fa49 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80038d2:	20db      	movs	r0, #219	; 0xdb
 80038d4:	f001 ffb6 	bl	8005844 <putchar>
	gotoxy(42,43);
 80038d8:	212b      	movs	r1, #43	; 0x2b
 80038da:	202a      	movs	r0, #42	; 0x2a
 80038dc:	f7fe fa42 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80038e0:	20db      	movs	r0, #219	; 0xdb
 80038e2:	f001 ffaf 	bl	8005844 <putchar>

	gotoxy(45,44);
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	202d      	movs	r0, #45	; 0x2d
 80038ea:	f7fe fa3b 	bl	8001d64 <gotoxy>
	printf("%c",186);
 80038ee:	20ba      	movs	r0, #186	; 0xba
 80038f0:	f001 ffa8 	bl	8005844 <putchar>

	gotoxy(47,44);
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	202f      	movs	r0, #47	; 0x2f
 80038f8:	f7fe fa34 	bl	8001d64 <gotoxy>
	printf("%c",220);
 80038fc:	20dc      	movs	r0, #220	; 0xdc
 80038fe:	f001 ffa1 	bl	8005844 <putchar>

	gotoxy(55,44);
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	2037      	movs	r0, #55	; 0x37
 8003906:	f7fe fa2d 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800390a:	20db      	movs	r0, #219	; 0xdb
 800390c:	f001 ff9a 	bl	8005844 <putchar>
	gotoxy(55,43);
 8003910:	212b      	movs	r1, #43	; 0x2b
 8003912:	2037      	movs	r0, #55	; 0x37
 8003914:	f7fe fa26 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003918:	20dc      	movs	r0, #220	; 0xdc
 800391a:	f001 ff93 	bl	8005844 <putchar>

	gotoxy(58,44);
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	203a      	movs	r0, #58	; 0x3a
 8003922:	f7fe fa1f 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003926:	20db      	movs	r0, #219	; 0xdb
 8003928:	f001 ff8c 	bl	8005844 <putchar>
	gotoxy(58,43);
 800392c:	212b      	movs	r1, #43	; 0x2b
 800392e:	203a      	movs	r0, #58	; 0x3a
 8003930:	f7fe fa18 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003934:	20db      	movs	r0, #219	; 0xdb
 8003936:	f001 ff85 	bl	8005844 <putchar>
	gotoxy(58,42);
 800393a:	212a      	movs	r1, #42	; 0x2a
 800393c:	203a      	movs	r0, #58	; 0x3a
 800393e:	f7fe fa11 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003942:	20dc      	movs	r0, #220	; 0xdc
 8003944:	f001 ff7e 	bl	8005844 <putchar>

	gotoxy(59,44);
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	203b      	movs	r0, #59	; 0x3b
 800394c:	f7fe fa0a 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003950:	20db      	movs	r0, #219	; 0xdb
 8003952:	f001 ff77 	bl	8005844 <putchar>
	gotoxy(59,43);
 8003956:	212b      	movs	r1, #43	; 0x2b
 8003958:	203b      	movs	r0, #59	; 0x3b
 800395a:	f7fe fa03 	bl	8001d64 <gotoxy>
	printf("%c",220);
 800395e:	20dc      	movs	r0, #220	; 0xdc
 8003960:	f001 ff70 	bl	8005844 <putchar>

	gotoxy(60,44);
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	203c      	movs	r0, #60	; 0x3c
 8003968:	f7fe f9fc 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800396c:	20db      	movs	r0, #219	; 0xdb
 800396e:	f001 ff69 	bl	8005844 <putchar>

	gotoxy(61,44);
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	203d      	movs	r0, #61	; 0x3d
 8003976:	f7fe f9f5 	bl	8001d64 <gotoxy>
	printf("%c",219);
 800397a:	20db      	movs	r0, #219	; 0xdb
 800397c:	f001 ff62 	bl	8005844 <putchar>
	gotoxy(61,43);
 8003980:	212b      	movs	r1, #43	; 0x2b
 8003982:	203d      	movs	r0, #61	; 0x3d
 8003984:	f7fe f9ee 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003988:	20db      	movs	r0, #219	; 0xdb
 800398a:	f001 ff5b 	bl	8005844 <putchar>

	gotoxy(63,44);
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	203f      	movs	r0, #63	; 0x3f
 8003992:	f7fe f9e7 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003996:	20db      	movs	r0, #219	; 0xdb
 8003998:	f001 ff54 	bl	8005844 <putchar>

	gotoxy(64,44);
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	2040      	movs	r0, #64	; 0x40
 80039a0:	f7fe f9e0 	bl	8001d64 <gotoxy>
	printf("%c",220);
 80039a4:	20dc      	movs	r0, #220	; 0xdc
 80039a6:	f001 ff4d 	bl	8005844 <putchar>

	gotoxy(65,44);
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	2041      	movs	r0, #65	; 0x41
 80039ae:	f7fe f9d9 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039b2:	20db      	movs	r0, #219	; 0xdb
 80039b4:	f001 ff46 	bl	8005844 <putchar>

	gotoxy(67,44);
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	2043      	movs	r0, #67	; 0x43
 80039bc:	f7fe f9d2 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039c0:	20db      	movs	r0, #219	; 0xdb
 80039c2:	f001 ff3f 	bl	8005844 <putchar>
	gotoxy(67,43);
 80039c6:	212b      	movs	r1, #43	; 0x2b
 80039c8:	2043      	movs	r0, #67	; 0x43
 80039ca:	f7fe f9cb 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039ce:	20db      	movs	r0, #219	; 0xdb
 80039d0:	f001 ff38 	bl	8005844 <putchar>
	gotoxy(67,42);
 80039d4:	212a      	movs	r1, #42	; 0x2a
 80039d6:	2043      	movs	r0, #67	; 0x43
 80039d8:	f7fe f9c4 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039dc:	20db      	movs	r0, #219	; 0xdb
 80039de:	f001 ff31 	bl	8005844 <putchar>

	gotoxy(69,44);
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	2045      	movs	r0, #69	; 0x45
 80039e6:	f7fe f9bd 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039ea:	20db      	movs	r0, #219	; 0xdb
 80039ec:	f001 ff2a 	bl	8005844 <putchar>
	gotoxy(69,43);
 80039f0:	212b      	movs	r1, #43	; 0x2b
 80039f2:	2045      	movs	r0, #69	; 0x45
 80039f4:	f7fe f9b6 	bl	8001d64 <gotoxy>
	printf("%c",219);
 80039f8:	20db      	movs	r0, #219	; 0xdb
 80039fa:	f001 ff23 	bl	8005844 <putchar>
	gotoxy(69,42);
 80039fe:	212a      	movs	r1, #42	; 0x2a
 8003a00:	2045      	movs	r0, #69	; 0x45
 8003a02:	f7fe f9af 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a06:	20db      	movs	r0, #219	; 0xdb
 8003a08:	f001 ff1c 	bl	8005844 <putchar>

	gotoxy(71,44);
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	2047      	movs	r0, #71	; 0x47
 8003a10:	f7fe f9a8 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a14:	20db      	movs	r0, #219	; 0xdb
 8003a16:	f001 ff15 	bl	8005844 <putchar>
	gotoxy(71,43);
 8003a1a:	212b      	movs	r1, #43	; 0x2b
 8003a1c:	2047      	movs	r0, #71	; 0x47
 8003a1e:	f7fe f9a1 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a22:	20db      	movs	r0, #219	; 0xdb
 8003a24:	f001 ff0e 	bl	8005844 <putchar>
	gotoxy(71,42);
 8003a28:	212a      	movs	r1, #42	; 0x2a
 8003a2a:	2047      	movs	r0, #71	; 0x47
 8003a2c:	f7fe f99a 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a30:	20db      	movs	r0, #219	; 0xdb
 8003a32:	f001 ff07 	bl	8005844 <putchar>

	gotoxy(73,44);
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	2049      	movs	r0, #73	; 0x49
 8003a3a:	f7fe f993 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a3e:	20db      	movs	r0, #219	; 0xdb
 8003a40:	f001 ff00 	bl	8005844 <putchar>
	gotoxy(73,43);
 8003a44:	212b      	movs	r1, #43	; 0x2b
 8003a46:	2049      	movs	r0, #73	; 0x49
 8003a48:	f7fe f98c 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a4c:	20db      	movs	r0, #219	; 0xdb
 8003a4e:	f001 fef9 	bl	8005844 <putchar>

	gotoxy(74,44);
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	204a      	movs	r0, #74	; 0x4a
 8003a56:	f7fe f985 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a5a:	20db      	movs	r0, #219	; 0xdb
 8003a5c:	f001 fef2 	bl	8005844 <putchar>

	gotoxy(76,44);
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	204c      	movs	r0, #76	; 0x4c
 8003a64:	f7fe f97e 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a68:	20db      	movs	r0, #219	; 0xdb
 8003a6a:	f001 feeb 	bl	8005844 <putchar>

	gotoxy(77,44);
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	204d      	movs	r0, #77	; 0x4d
 8003a72:	f7fe f977 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a76:	20db      	movs	r0, #219	; 0xdb
 8003a78:	f001 fee4 	bl	8005844 <putchar>
	gotoxy(77,43);
 8003a7c:	212b      	movs	r1, #43	; 0x2b
 8003a7e:	204d      	movs	r0, #77	; 0x4d
 8003a80:	f7fe f970 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a84:	20db      	movs	r0, #219	; 0xdb
 8003a86:	f001 fedd 	bl	8005844 <putchar>

	gotoxy(79,44);
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	204f      	movs	r0, #79	; 0x4f
 8003a8e:	f7fe f969 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003a92:	20db      	movs	r0, #219	; 0xdb
 8003a94:	f001 fed6 	bl	8005844 <putchar>
	gotoxy(79,44);
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	204f      	movs	r0, #79	; 0x4f
 8003a9c:	f7fe f962 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003aa0:	20dc      	movs	r0, #220	; 0xdc
 8003aa2:	f001 fecf 	bl	8005844 <putchar>

	gotoxy(81,44);
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	2051      	movs	r0, #81	; 0x51
 8003aaa:	f7fe f95b 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003aae:	20db      	movs	r0, #219	; 0xdb
 8003ab0:	f001 fec8 	bl	8005844 <putchar>
	gotoxy(81,43);
 8003ab4:	212b      	movs	r1, #43	; 0x2b
 8003ab6:	2051      	movs	r0, #81	; 0x51
 8003ab8:	f7fe f954 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003abc:	20db      	movs	r0, #219	; 0xdb
 8003abe:	f001 fec1 	bl	8005844 <putchar>

	gotoxy(82,44);
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	2052      	movs	r0, #82	; 0x52
 8003ac6:	f7fe f94d 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003aca:	20db      	movs	r0, #219	; 0xdb
 8003acc:	f001 feba 	bl	8005844 <putchar>

	gotoxy(85,44);
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	2055      	movs	r0, #85	; 0x55
 8003ad4:	f7fe f946 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003ad8:	20db      	movs	r0, #219	; 0xdb
 8003ada:	f001 feb3 	bl	8005844 <putchar>
	gotoxy(85,43);
 8003ade:	212b      	movs	r1, #43	; 0x2b
 8003ae0:	2055      	movs	r0, #85	; 0x55
 8003ae2:	f7fe f93f 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003ae6:	20db      	movs	r0, #219	; 0xdb
 8003ae8:	f001 feac 	bl	8005844 <putchar>
	gotoxy(85,42);
 8003aec:	212a      	movs	r1, #42	; 0x2a
 8003aee:	2055      	movs	r0, #85	; 0x55
 8003af0:	f7fe f938 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003af4:	20dc      	movs	r0, #220	; 0xdc
 8003af6:	f001 fea5 	bl	8005844 <putchar>

	gotoxy(86,44);
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	2056      	movs	r0, #86	; 0x56
 8003afe:	f7fe f931 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b02:	20db      	movs	r0, #219	; 0xdb
 8003b04:	f001 fe9e 	bl	8005844 <putchar>

	gotoxy(87,44);
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	2057      	movs	r0, #87	; 0x57
 8003b0c:	f7fe f92a 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003b10:	20dc      	movs	r0, #220	; 0xdc
 8003b12:	f001 fe97 	bl	8005844 <putchar>

	gotoxy(88,44);
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	2058      	movs	r0, #88	; 0x58
 8003b1a:	f7fe f923 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b1e:	20db      	movs	r0, #219	; 0xdb
 8003b20:	f001 fe90 	bl	8005844 <putchar>
	gotoxy(88,43);
 8003b24:	212b      	movs	r1, #43	; 0x2b
 8003b26:	2058      	movs	r0, #88	; 0x58
 8003b28:	f7fe f91c 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003b2c:	20dc      	movs	r0, #220	; 0xdc
 8003b2e:	f001 fe89 	bl	8005844 <putchar>

	gotoxy(93,44);
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	205d      	movs	r0, #93	; 0x5d
 8003b36:	f7fe f915 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b3a:	20db      	movs	r0, #219	; 0xdb
 8003b3c:	f001 fe82 	bl	8005844 <putchar>

	gotoxy(94,44);
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	205e      	movs	r0, #94	; 0x5e
 8003b44:	f7fe f90e 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b48:	20db      	movs	r0, #219	; 0xdb
 8003b4a:	f001 fe7b 	bl	8005844 <putchar>
	gotoxy(94,43);
 8003b4e:	212b      	movs	r1, #43	; 0x2b
 8003b50:	205e      	movs	r0, #94	; 0x5e
 8003b52:	f7fe f907 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003b56:	20dc      	movs	r0, #220	; 0xdc
 8003b58:	f001 fe74 	bl	8005844 <putchar>

	gotoxy(95,44);
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	205f      	movs	r0, #95	; 0x5f
 8003b60:	f7fe f900 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003b64:	20dc      	movs	r0, #220	; 0xdc
 8003b66:	f001 fe6d 	bl	8005844 <putchar>

	gotoxy(96,44);
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	2060      	movs	r0, #96	; 0x60
 8003b6e:	f7fe f8f9 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b72:	20db      	movs	r0, #219	; 0xdb
 8003b74:	f001 fe66 	bl	8005844 <putchar>

	gotoxy(98,44);
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	2062      	movs	r0, #98	; 0x62
 8003b7c:	f7fe f8f2 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b80:	20db      	movs	r0, #219	; 0xdb
 8003b82:	f001 fe5f 	bl	8005844 <putchar>
	gotoxy(98,43);
 8003b86:	212b      	movs	r1, #43	; 0x2b
 8003b88:	2062      	movs	r0, #98	; 0x62
 8003b8a:	f7fe f8eb 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003b8e:	20dc      	movs	r0, #220	; 0xdc
 8003b90:	f001 fe58 	bl	8005844 <putchar>

	gotoxy(99,44);
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	2063      	movs	r0, #99	; 0x63
 8003b98:	f7fe f8e4 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003b9c:	20db      	movs	r0, #219	; 0xdb
 8003b9e:	f001 fe51 	bl	8005844 <putchar>

	gotoxy(103,44);
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	2067      	movs	r0, #103	; 0x67
 8003ba6:	f7fe f8dd 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003baa:	20db      	movs	r0, #219	; 0xdb
 8003bac:	f001 fe4a 	bl	8005844 <putchar>

	gotoxy(104,44);
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	2068      	movs	r0, #104	; 0x68
 8003bb4:	f7fe f8d6 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003bb8:	20dc      	movs	r0, #220	; 0xdc
 8003bba:	f001 fe43 	bl	8005844 <putchar>

	gotoxy(107,44);
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	206b      	movs	r0, #107	; 0x6b
 8003bc2:	f7fe f8cf 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003bc6:	20db      	movs	r0, #219	; 0xdb
 8003bc8:	f001 fe3c 	bl	8005844 <putchar>

	gotoxy(108,44);
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	206c      	movs	r0, #108	; 0x6c
 8003bd0:	f7fe f8c8 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003bd4:	20db      	movs	r0, #219	; 0xdb
 8003bd6:	f001 fe35 	bl	8005844 <putchar>
	gotoxy(108,43);
 8003bda:	212b      	movs	r1, #43	; 0x2b
 8003bdc:	206c      	movs	r0, #108	; 0x6c
 8003bde:	f7fe f8c1 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003be2:	20db      	movs	r0, #219	; 0xdb
 8003be4:	f001 fe2e 	bl	8005844 <putchar>

	gotoxy(109,44);
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	206d      	movs	r0, #109	; 0x6d
 8003bec:	f7fe f8ba 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003bf0:	20dc      	movs	r0, #220	; 0xdc
 8003bf2:	f001 fe27 	bl	8005844 <putchar>

	gotoxy(112,44);
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	2070      	movs	r0, #112	; 0x70
 8003bfa:	f7fe f8b3 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003bfe:	20db      	movs	r0, #219	; 0xdb
 8003c00:	f001 fe20 	bl	8005844 <putchar>

	gotoxy(113,44);
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	2071      	movs	r0, #113	; 0x71
 8003c08:	f7fe f8ac 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003c0c:	20dc      	movs	r0, #220	; 0xdc
 8003c0e:	f001 fe19 	bl	8005844 <putchar>

	gotoxy(114,44);
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	2072      	movs	r0, #114	; 0x72
 8003c16:	f7fe f8a5 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003c1a:	20db      	movs	r0, #219	; 0xdb
 8003c1c:	f001 fe12 	bl	8005844 <putchar>
	gotoxy(114,43);
 8003c20:	212b      	movs	r1, #43	; 0x2b
 8003c22:	2072      	movs	r0, #114	; 0x72
 8003c24:	f7fe f89e 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003c28:	20db      	movs	r0, #219	; 0xdb
 8003c2a:	f001 fe0b 	bl	8005844 <putchar>

	gotoxy(115,44);
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	2073      	movs	r0, #115	; 0x73
 8003c32:	f7fe f897 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003c36:	20db      	movs	r0, #219	; 0xdb
 8003c38:	f001 fe04 	bl	8005844 <putchar>

	gotoxy(120,44);
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	2078      	movs	r0, #120	; 0x78
 8003c40:	f7fe f890 	bl	8001d64 <gotoxy>
	printf("%c",47);
 8003c44:	202f      	movs	r0, #47	; 0x2f
 8003c46:	f001 fdfd 	bl	8005844 <putchar>
	gotoxy(121,43);
 8003c4a:	212b      	movs	r1, #43	; 0x2b
 8003c4c:	2079      	movs	r0, #121	; 0x79
 8003c4e:	f7fe f889 	bl	8001d64 <gotoxy>
	printf("%c",47);
 8003c52:	202f      	movs	r0, #47	; 0x2f
 8003c54:	f001 fdf6 	bl	8005844 <putchar>
	gotoxy(122,43);
 8003c58:	212b      	movs	r1, #43	; 0x2b
 8003c5a:	207a      	movs	r0, #122	; 0x7a
 8003c5c:	f7fe f882 	bl	8001d64 <gotoxy>
	printf("%c",223);
 8003c60:	20df      	movs	r0, #223	; 0xdf
 8003c62:	f001 fdef 	bl	8005844 <putchar>
	gotoxy(122,42);
 8003c66:	212a      	movs	r1, #42	; 0x2a
 8003c68:	207a      	movs	r0, #122	; 0x7a
 8003c6a:	f7fe f87b 	bl	8001d64 <gotoxy>
	printf("%c",168);
 8003c6e:	20a8      	movs	r0, #168	; 0xa8
 8003c70:	f001 fde8 	bl	8005844 <putchar>
	gotoxy(123,43);
 8003c74:	212b      	movs	r1, #43	; 0x2b
 8003c76:	207b      	movs	r0, #123	; 0x7b
 8003c78:	f7fe f874 	bl	8001d64 <gotoxy>
	printf("%c",92);
 8003c7c:	205c      	movs	r0, #92	; 0x5c
 8003c7e:	f001 fde1 	bl	8005844 <putchar>
	gotoxy(124,44);
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	207c      	movs	r0, #124	; 0x7c
 8003c86:	f7fe f86d 	bl	8001d64 <gotoxy>
	printf("%c",92);
 8003c8a:	205c      	movs	r0, #92	; 0x5c
 8003c8c:	f001 fdda 	bl	8005844 <putchar>

	gotoxy(127,44);
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	207f      	movs	r0, #127	; 0x7f
 8003c94:	f7fe f866 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003c98:	20db      	movs	r0, #219	; 0xdb
 8003c9a:	f001 fdd3 	bl	8005844 <putchar>
	gotoxy(127,43);
 8003c9e:	212b      	movs	r1, #43	; 0x2b
 8003ca0:	207f      	movs	r0, #127	; 0x7f
 8003ca2:	f7fe f85f 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003ca6:	20db      	movs	r0, #219	; 0xdb
 8003ca8:	f001 fdcc 	bl	8005844 <putchar>
	gotoxy(127,42);
 8003cac:	212a      	movs	r1, #42	; 0x2a
 8003cae:	207f      	movs	r0, #127	; 0x7f
 8003cb0:	f7fe f858 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003cb4:	20db      	movs	r0, #219	; 0xdb
 8003cb6:	f001 fdc5 	bl	8005844 <putchar>

	gotoxy(129,44);
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	2081      	movs	r0, #129	; 0x81
 8003cbe:	f7fe f851 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003cc2:	20db      	movs	r0, #219	; 0xdb
 8003cc4:	f001 fdbe 	bl	8005844 <putchar>
	gotoxy(129,43);
 8003cc8:	212b      	movs	r1, #43	; 0x2b
 8003cca:	2081      	movs	r0, #129	; 0x81
 8003ccc:	f7fe f84a 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003cd0:	20dc      	movs	r0, #220	; 0xdc
 8003cd2:	f001 fdb7 	bl	8005844 <putchar>

	gotoxy(130,44);
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	2082      	movs	r0, #130	; 0x82
 8003cda:	f7fe f843 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003cde:	20db      	movs	r0, #219	; 0xdb
 8003ce0:	f001 fdb0 	bl	8005844 <putchar>

	gotoxy(131,44);
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	2083      	movs	r0, #131	; 0x83
 8003ce8:	f7fe f83c 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003cec:	20dc      	movs	r0, #220	; 0xdc
 8003cee:	f001 fda9 	bl	8005844 <putchar>

	gotoxy(132,44);
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	2084      	movs	r0, #132	; 0x84
 8003cf6:	f7fe f835 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003cfa:	20db      	movs	r0, #219	; 0xdb
 8003cfc:	f001 fda2 	bl	8005844 <putchar>

	gotoxy(133,44);
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	2085      	movs	r0, #133	; 0x85
 8003d04:	f7fe f82e 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003d08:	20db      	movs	r0, #219	; 0xdb
 8003d0a:	f001 fd9b 	bl	8005844 <putchar>
	gotoxy(133,43);
 8003d0e:	212b      	movs	r1, #43	; 0x2b
 8003d10:	2085      	movs	r0, #133	; 0x85
 8003d12:	f7fe f827 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003d16:	20db      	movs	r0, #219	; 0xdb
 8003d18:	f001 fd94 	bl	8005844 <putchar>

	gotoxy(134,44);
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	2086      	movs	r0, #134	; 0x86
 8003d20:	f7fe f820 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003d24:	20db      	movs	r0, #219	; 0xdb
 8003d26:	f001 fd8d 	bl	8005844 <putchar>

	gotoxy(135,44);
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	2087      	movs	r0, #135	; 0x87
 8003d2e:	f7fe f819 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003d32:	20dc      	movs	r0, #220	; 0xdc
 8003d34:	f001 fd86 	bl	8005844 <putchar>

	gotoxy(137,44);
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	2089      	movs	r0, #137	; 0x89
 8003d3c:	f7fe f812 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003d40:	20dc      	movs	r0, #220	; 0xdc
 8003d42:	f001 fd7f 	bl	8005844 <putchar>

	gotoxy(139,44);
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	208b      	movs	r0, #139	; 0x8b
 8003d4a:	f7fe f80b 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003d4e:	20dc      	movs	r0, #220	; 0xdc
 8003d50:	f001 fd78 	bl	8005844 <putchar>

	gotoxy(141,44);
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	208d      	movs	r0, #141	; 0x8d
 8003d58:	f7fe f804 	bl	8001d64 <gotoxy>
	printf("%c",219);
 8003d5c:	20db      	movs	r0, #219	; 0xdb
 8003d5e:	f001 fd71 	bl	8005844 <putchar>

	gotoxy(142,44);
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	208e      	movs	r0, #142	; 0x8e
 8003d66:	f7fd fffd 	bl	8001d64 <gotoxy>
	printf("%c",220);
 8003d6a:	20dc      	movs	r0, #220	; 0xdc
 8003d6c:	f001 fd6a 	bl	8005844 <putchar>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <drawScore>:

void drawScore(gameState_t* gameState){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	208c      	movs	r0, #140	; 0x8c
 8003d80:	f7fd fff0 	bl	8001d64 <gotoxy>
	printf("Your score is: %d", gameState->score);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4803      	ldr	r0, [pc, #12]	; (8003d98 <drawScore+0x24>)
 8003d8c:	f001 fd42 	bl	8005814 <iprintf>
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08006cf0 	.word	0x08006cf0

08003d9c <drawNuke>:
 drawBox(x, y, x+4, y+2, 1);
 gotoxy(x+2, y+1);
 printf("$");
}

void drawNuke(gameState_t* gameState){
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	7e1b      	ldrb	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f040 809e 	bne.w	8003eec <drawNuke+0x150>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f90b 	bl	8002fd2 <fpToInt>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f904 	bl	8002fd2 <fpToInt>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	0fda      	lsrs	r2, r3, #31
 8003dce:	4413      	add	r3, r2
 8003dd0:	105b      	asrs	r3, r3, #1
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f7fd ffc5 	bl	8001d64 <gotoxy>
		printf("     ");
 8003dda:	4846      	ldr	r0, [pc, #280]	; (8003ef4 <drawNuke+0x158>)
 8003ddc:	f001 fd1a 	bl	8005814 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f8f3 	bl	8002fd2 <fpToInt>
 8003dec:	4604      	mov	r4, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff f8ec 	bl	8002fd2 <fpToInt>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	0fda      	lsrs	r2, r3, #31
 8003e00:	4413      	add	r3, r2
 8003e02:	105b      	asrs	r3, r3, #1
 8003e04:	4619      	mov	r1, r3
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7fd ffac 	bl	8001d64 <gotoxy>
		printf("     ");
 8003e0c:	4839      	ldr	r0, [pc, #228]	; (8003ef4 <drawNuke+0x158>)
 8003e0e:	f001 fd01 	bl	8005814 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f8da 	bl	8002fd2 <fpToInt>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff f8d3 	bl	8002fd2 <fpToInt>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	3304      	adds	r3, #4
 8003e30:	0fda      	lsrs	r2, r3, #31
 8003e32:	4413      	add	r3, r2
 8003e34:	105b      	asrs	r3, r3, #1
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7fd ff93 	bl	8001d64 <gotoxy>
		printf("     ");
 8003e3e:	482d      	ldr	r0, [pc, #180]	; (8003ef4 <drawNuke+0x158>)
 8003e40:	f001 fce8 	bl	8005814 <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f8c1 	bl	8002fd2 <fpToInt>
 8003e50:	4604      	mov	r4, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff f8ba 	bl	8002fd2 <fpToInt>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	0fda      	lsrs	r2, r3, #31
 8003e62:	4413      	add	r3, r2
 8003e64:	105b      	asrs	r3, r3, #1
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fd ff7b 	bl	8001d64 <gotoxy>
		printf("  |  ");
 8003e6e:	4822      	ldr	r0, [pc, #136]	; (8003ef8 <drawNuke+0x15c>)
 8003e70:	f001 fcd0 	bl	8005814 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f8a9 	bl	8002fd2 <fpToInt>
 8003e80:	4604      	mov	r4, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff f8a2 	bl	8002fd2 <fpToInt>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	3302      	adds	r3, #2
 8003e92:	0fda      	lsrs	r2, r3, #31
 8003e94:	4413      	add	r3, r2
 8003e96:	105b      	asrs	r3, r3, #1
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7fd ff62 	bl	8001d64 <gotoxy>
		printf("- o -");
 8003ea0:	4816      	ldr	r0, [pc, #88]	; (8003efc <drawNuke+0x160>)
 8003ea2:	f001 fcb7 	bl	8005814 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff f890 	bl	8002fd2 <fpToInt>
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff f889 	bl	8002fd2 <fpToInt>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	0fda      	lsrs	r2, r3, #31
 8003ec6:	4413      	add	r3, r2
 8003ec8:	105b      	asrs	r3, r3, #1
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fd ff49 	bl	8001d64 <gotoxy>
		printf(" / %c ", 92);
 8003ed2:	215c      	movs	r1, #92	; 0x5c
 8003ed4:	480a      	ldr	r0, [pc, #40]	; (8003f00 <drawNuke+0x164>)
 8003ed6:	f001 fc9d 	bl	8005814 <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ee8:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	08006d14 	.word	0x08006d14
 8003ef8:	08006d1c 	.word	0x08006d1c
 8003efc:	08006d24 	.word	0x08006d24
 8003f00:	08006d2c 	.word	0x08006d2c

08003f04 <drawNukeCircle>:

void drawNukeCircle(gameState_t* gameState){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f85d 	bl	8002fd2 <fpToInt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f855 	bl	8002fd2 <fpToInt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	0fda      	lsrs	r2, r3, #31
 8003f2c:	4413      	add	r3, r2
 8003f2e:	105b      	asrs	r3, r3, #1
 8003f30:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3b0f      	subs	r3, #15
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3b07      	subs	r3, #7
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fd ff10 	bl	8001d64 <gotoxy>
	printf("              ___-------___               \n");
 8003f44:	4874      	ldr	r0, [pc, #464]	; (8004118 <drawNukeCircle+0x214>)
 8003f46:	f001 fd01 	bl	800594c <puts>
	gotoxy(x-15, y-6);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3b0f      	subs	r3, #15
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3b06      	subs	r3, #6
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fd ff04 	bl	8001d64 <gotoxy>
	printf("           __-             -__            \n");
 8003f5c:	486f      	ldr	r0, [pc, #444]	; (800411c <drawNukeCircle+0x218>)
 8003f5e:	f001 fcf5 	bl	800594c <puts>
	gotoxy(x-15, y-5);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3b0f      	subs	r3, #15
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3b05      	subs	r3, #5
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7fd fef8 	bl	8001d64 <gotoxy>
	printf("         _-                   -_          \n");
 8003f74:	486a      	ldr	r0, [pc, #424]	; (8004120 <drawNukeCircle+0x21c>)
 8003f76:	f001 fce9 	bl	800594c <puts>
	gotoxy(x-15, y-4);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b0f      	subs	r3, #15
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3b04      	subs	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f7fd feec 	bl	8001d64 <gotoxy>
	printf("       _-                       -_        \n");
 8003f8c:	4865      	ldr	r0, [pc, #404]	; (8004124 <drawNukeCircle+0x220>)
 8003f8e:	f001 fcdd 	bl	800594c <puts>
	gotoxy(x-15, y-3);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b0f      	subs	r3, #15
 8003f96:	461a      	mov	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3b03      	subs	r3, #3
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f7fd fee0 	bl	8001d64 <gotoxy>
	printf("     _-                            -_     \n");
 8003fa4:	4860      	ldr	r0, [pc, #384]	; (8004128 <drawNukeCircle+0x224>)
 8003fa6:	f001 fcd1 	bl	800594c <puts>
	gotoxy(x-15, y-2);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b0f      	subs	r3, #15
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3b02      	subs	r3, #2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fd fed4 	bl	8001d64 <gotoxy>
	printf("   _-                                -_   \n");
 8003fbc:	485b      	ldr	r0, [pc, #364]	; (800412c <drawNukeCircle+0x228>)
 8003fbe:	f001 fcc5 	bl	800594c <puts>
	gotoxy(x-15, y-1);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3b0f      	subs	r3, #15
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f7fd fec8 	bl	8001d64 <gotoxy>
	printf("  =                                    =  \n");
 8003fd4:	4856      	ldr	r0, [pc, #344]	; (8004130 <drawNukeCircle+0x22c>)
 8003fd6:	f001 fcb9 	bl	800594c <puts>
	gotoxy(x-15, y);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3b0f      	subs	r3, #15
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fd febd 	bl	8001d64 <gotoxy>
	printf("_-                                      -_\n");
 8003fea:	4852      	ldr	r0, [pc, #328]	; (8004134 <drawNukeCircle+0x230>)
 8003fec:	f001 fcae 	bl	800594c <puts>
	gotoxy(x-15, y+1);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3b0f      	subs	r3, #15
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fd feb1 	bl	8001d64 <gotoxy>
	printf("=                                        =\n");
 8004002:	484d      	ldr	r0, [pc, #308]	; (8004138 <drawNukeCircle+0x234>)
 8004004:	f001 fca2 	bl	800594c <puts>
	gotoxy(x-15, y+2);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b0f      	subs	r3, #15
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3302      	adds	r3, #2
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fd fea5 	bl	8001d64 <gotoxy>
	printf("=                                        =\n");
 800401a:	4847      	ldr	r0, [pc, #284]	; (8004138 <drawNukeCircle+0x234>)
 800401c:	f001 fc96 	bl	800594c <puts>
	gotoxy(x-15, y+3);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b0f      	subs	r3, #15
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3303      	adds	r3, #3
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7fd fe99 	bl	8001d64 <gotoxy>
	printf("=                                        =\n");
 8004032:	4841      	ldr	r0, [pc, #260]	; (8004138 <drawNukeCircle+0x234>)
 8004034:	f001 fc8a 	bl	800594c <puts>
	gotoxy(x-15, y+4);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3b0f      	subs	r3, #15
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fd fe8d 	bl	8001d64 <gotoxy>
	printf("=                                        =\n");
 800404a:	483b      	ldr	r0, [pc, #236]	; (8004138 <drawNukeCircle+0x234>)
 800404c:	f001 fc7e 	bl	800594c <puts>
	gotoxy(x-15, y+5);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b0f      	subs	r3, #15
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3305      	adds	r3, #5
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fd fe81 	bl	8001d64 <gotoxy>
	printf("-_                                      _-\n");
 8004062:	4836      	ldr	r0, [pc, #216]	; (800413c <drawNukeCircle+0x238>)
 8004064:	f001 fc72 	bl	800594c <puts>
	gotoxy(x-15, y+6);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b0f      	subs	r3, #15
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	3306      	adds	r3, #6
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7fd fe75 	bl	8001d64 <gotoxy>
	printf("  =                                    =  \n");
 800407a:	482d      	ldr	r0, [pc, #180]	; (8004130 <drawNukeCircle+0x22c>)
 800407c:	f001 fc66 	bl	800594c <puts>
	gotoxy(x-15, y+7);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b0f      	subs	r3, #15
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3307      	adds	r3, #7
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fd fe69 	bl	8001d64 <gotoxy>
	printf("   -_                                _-   \n");
 8004092:	482b      	ldr	r0, [pc, #172]	; (8004140 <drawNukeCircle+0x23c>)
 8004094:	f001 fc5a 	bl	800594c <puts>
	gotoxy(x-15, y+8);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3b0f      	subs	r3, #15
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3308      	adds	r3, #8
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fd fe5d 	bl	8001d64 <gotoxy>
	printf("     -_                            _-     \n");
 80040aa:	4826      	ldr	r0, [pc, #152]	; (8004144 <drawNukeCircle+0x240>)
 80040ac:	f001 fc4e 	bl	800594c <puts>
	gotoxy(x-15, y+9);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3b0f      	subs	r3, #15
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3309      	adds	r3, #9
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fd fe51 	bl	8001d64 <gotoxy>
	printf("       -_                       _-        \n");
 80040c2:	4821      	ldr	r0, [pc, #132]	; (8004148 <drawNukeCircle+0x244>)
 80040c4:	f001 fc42 	bl	800594c <puts>
	gotoxy(x-15, y+10);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b0f      	subs	r3, #15
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	330a      	adds	r3, #10
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7fd fe45 	bl	8001d64 <gotoxy>
	printf("         -_                   _-          \n");
 80040da:	481c      	ldr	r0, [pc, #112]	; (800414c <drawNukeCircle+0x248>)
 80040dc:	f001 fc36 	bl	800594c <puts>
	gotoxy(x-15, y+11);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b0f      	subs	r3, #15
 80040e4:	461a      	mov	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	330b      	adds	r3, #11
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fd fe39 	bl	8001d64 <gotoxy>
	printf("           -__             _--            \n");
 80040f2:	4817      	ldr	r0, [pc, #92]	; (8004150 <drawNukeCircle+0x24c>)
 80040f4:	f001 fc2a 	bl	800594c <puts>
	gotoxy(x-15, y+12);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b0f      	subs	r3, #15
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	330c      	adds	r3, #12
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7fd fe2d 	bl	8001d64 <gotoxy>
	printf("              ---_______---               \n");
 800410a:	4812      	ldr	r0, [pc, #72]	; (8004154 <drawNukeCircle+0x250>)
 800410c:	f001 fc1e 	bl	800594c <puts>
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	08006d34 	.word	0x08006d34
 800411c:	08006d60 	.word	0x08006d60
 8004120:	08006d8c 	.word	0x08006d8c
 8004124:	08006db8 	.word	0x08006db8
 8004128:	08006de4 	.word	0x08006de4
 800412c:	08006e10 	.word	0x08006e10
 8004130:	08006e3c 	.word	0x08006e3c
 8004134:	08006e68 	.word	0x08006e68
 8004138:	08006e94 	.word	0x08006e94
 800413c:	08006ec0 	.word	0x08006ec0
 8004140:	08006eec 	.word	0x08006eec
 8004144:	08006f18 	.word	0x08006f18
 8004148:	08006f44 	.word	0x08006f44
 800414c:	08006f70 	.word	0x08006f70
 8004150:	08006f9c 	.word	0x08006f9c
 8004154:	08006fc8 	.word	0x08006fc8

08004158 <clearNukeCircle>:

void clearNukeCircle(gameState_t* gameState){
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe ff33 	bl	8002fd2 <fpToInt>
 800416c:	4603      	mov	r3, r0
 800416e:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe ff2b 	bl	8002fd2 <fpToInt>
 800417c:	4603      	mov	r3, r0
 800417e:	0fda      	lsrs	r2, r3, #31
 8004180:	4413      	add	r3, r2
 8004182:	105b      	asrs	r3, r3, #1
 8004184:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b0f      	subs	r3, #15
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3b07      	subs	r3, #7
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fd fde6 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004198:	4874      	ldr	r0, [pc, #464]	; (800436c <clearNukeCircle+0x214>)
 800419a:	f001 fbd7 	bl	800594c <puts>
	gotoxy(x-15, y-6);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b0f      	subs	r3, #15
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3b06      	subs	r3, #6
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7fd fdda 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80041b0:	486e      	ldr	r0, [pc, #440]	; (800436c <clearNukeCircle+0x214>)
 80041b2:	f001 fbcb 	bl	800594c <puts>
	gotoxy(x-15, y-5);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b0f      	subs	r3, #15
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3b05      	subs	r3, #5
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fd fdce 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80041c8:	4868      	ldr	r0, [pc, #416]	; (800436c <clearNukeCircle+0x214>)
 80041ca:	f001 fbbf 	bl	800594c <puts>
	gotoxy(x-15, y-4);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b0f      	subs	r3, #15
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	3b04      	subs	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f7fd fdc2 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80041e0:	4862      	ldr	r0, [pc, #392]	; (800436c <clearNukeCircle+0x214>)
 80041e2:	f001 fbb3 	bl	800594c <puts>
	gotoxy(x-15, y-3);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b0f      	subs	r3, #15
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3b03      	subs	r3, #3
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f7fd fdb6 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80041f8:	485c      	ldr	r0, [pc, #368]	; (800436c <clearNukeCircle+0x214>)
 80041fa:	f001 fba7 	bl	800594c <puts>
	gotoxy(x-15, y-2);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b0f      	subs	r3, #15
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	3b02      	subs	r3, #2
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fd fdaa 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004210:	4856      	ldr	r0, [pc, #344]	; (800436c <clearNukeCircle+0x214>)
 8004212:	f001 fb9b 	bl	800594c <puts>
	gotoxy(x-15, y-1);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b0f      	subs	r3, #15
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fd fd9e 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004228:	4850      	ldr	r0, [pc, #320]	; (800436c <clearNukeCircle+0x214>)
 800422a:	f001 fb8f 	bl	800594c <puts>
	gotoxy(x-15, y);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b0f      	subs	r3, #15
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7fd fd93 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 800423e:	484b      	ldr	r0, [pc, #300]	; (800436c <clearNukeCircle+0x214>)
 8004240:	f001 fb84 	bl	800594c <puts>
	gotoxy(x-15, y+1);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b0f      	subs	r3, #15
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	3301      	adds	r3, #1
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f7fd fd87 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004256:	4845      	ldr	r0, [pc, #276]	; (800436c <clearNukeCircle+0x214>)
 8004258:	f001 fb78 	bl	800594c <puts>
	gotoxy(x-15, y+2);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b0f      	subs	r3, #15
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3302      	adds	r3, #2
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7fd fd7b 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 800426e:	483f      	ldr	r0, [pc, #252]	; (800436c <clearNukeCircle+0x214>)
 8004270:	f001 fb6c 	bl	800594c <puts>
	gotoxy(x-15, y+3);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b0f      	subs	r3, #15
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3303      	adds	r3, #3
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fd fd6f 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004286:	4839      	ldr	r0, [pc, #228]	; (800436c <clearNukeCircle+0x214>)
 8004288:	f001 fb60 	bl	800594c <puts>
	gotoxy(x-15, y+4);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b0f      	subs	r3, #15
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7fd fd63 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 800429e:	4833      	ldr	r0, [pc, #204]	; (800436c <clearNukeCircle+0x214>)
 80042a0:	f001 fb54 	bl	800594c <puts>
	gotoxy(x-15, y+5);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b0f      	subs	r3, #15
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3305      	adds	r3, #5
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fd fd57 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80042b6:	482d      	ldr	r0, [pc, #180]	; (800436c <clearNukeCircle+0x214>)
 80042b8:	f001 fb48 	bl	800594c <puts>
	gotoxy(x-15, y+6);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3b0f      	subs	r3, #15
 80042c0:	461a      	mov	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3306      	adds	r3, #6
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fd fd4b 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80042ce:	4827      	ldr	r0, [pc, #156]	; (800436c <clearNukeCircle+0x214>)
 80042d0:	f001 fb3c 	bl	800594c <puts>
	gotoxy(x-15, y+7);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b0f      	subs	r3, #15
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3307      	adds	r3, #7
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fd fd3f 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80042e6:	4821      	ldr	r0, [pc, #132]	; (800436c <clearNukeCircle+0x214>)
 80042e8:	f001 fb30 	bl	800594c <puts>
	gotoxy(x-15, y+8);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b0f      	subs	r3, #15
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3308      	adds	r3, #8
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7fd fd33 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 80042fe:	481b      	ldr	r0, [pc, #108]	; (800436c <clearNukeCircle+0x214>)
 8004300:	f001 fb24 	bl	800594c <puts>
	gotoxy(x-15, y+9);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b0f      	subs	r3, #15
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3309      	adds	r3, #9
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fd fd27 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004316:	4815      	ldr	r0, [pc, #84]	; (800436c <clearNukeCircle+0x214>)
 8004318:	f001 fb18 	bl	800594c <puts>
	gotoxy(x-15, y+10);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b0f      	subs	r3, #15
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	330a      	adds	r3, #10
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7fd fd1b 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 800432e:	480f      	ldr	r0, [pc, #60]	; (800436c <clearNukeCircle+0x214>)
 8004330:	f001 fb0c 	bl	800594c <puts>
	gotoxy(x-15, y+11);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3b0f      	subs	r3, #15
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	330b      	adds	r3, #11
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7fd fd0f 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 8004346:	4809      	ldr	r0, [pc, #36]	; (800436c <clearNukeCircle+0x214>)
 8004348:	f001 fb00 	bl	800594c <puts>
	gotoxy(x-15, y+12);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3b0f      	subs	r3, #15
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	330c      	adds	r3, #12
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fd fd03 	bl	8001d64 <gotoxy>
	printf("                                          \n");
 800435e:	4803      	ldr	r0, [pc, #12]	; (800436c <clearNukeCircle+0x214>)
 8004360:	f001 faf4 	bl	800594c <puts>
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08006ff4 	.word	0x08006ff4

08004370 <drawBossKey>:

void drawBossKey(){
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 8004374:	481e      	ldr	r0, [pc, #120]	; (80043f0 <drawBossKey+0x80>)
 8004376:	f001 fae9 	bl	800594c <puts>
	printf("	char c = uart_get_char();\n");
 800437a:	481e      	ldr	r0, [pc, #120]	; (80043f4 <drawBossKey+0x84>)
 800437c:	f001 fae6 	bl	800594c <puts>
	printf("	if(c == 'f'){\n");
 8004380:	481d      	ldr	r0, [pc, #116]	; (80043f8 <drawBossKey+0x88>)
 8004382:	f001 fae3 	bl	800594c <puts>
	printf("		if(gameState->bossMode == 0){\n");
 8004386:	481d      	ldr	r0, [pc, #116]	; (80043fc <drawBossKey+0x8c>)
 8004388:	f001 fae0 	bl	800594c <puts>
	printf("			clrscr();\n");
 800438c:	481c      	ldr	r0, [pc, #112]	; (8004400 <drawBossKey+0x90>)
 800438e:	f001 fadd 	bl	800594c <puts>
	printf("			gameState->bossMode = 1;\n");
 8004392:	481c      	ldr	r0, [pc, #112]	; (8004404 <drawBossKey+0x94>)
 8004394:	f001 fada 	bl	800594c <puts>
	printf("		}else{\n");
 8004398:	481b      	ldr	r0, [pc, #108]	; (8004408 <drawBossKey+0x98>)
 800439a:	f001 fad7 	bl	800594c <puts>
	printf("			gameState->bossMode = 0;\n");
 800439e:	481b      	ldr	r0, [pc, #108]	; (800440c <drawBossKey+0x9c>)
 80043a0:	f001 fad4 	bl	800594c <puts>
	printf("			return 2;\n");
 80043a4:	481a      	ldr	r0, [pc, #104]	; (8004410 <drawBossKey+0xa0>)
 80043a6:	f001 fad1 	bl	800594c <puts>
	printf("		}\n");
 80043aa:	481a      	ldr	r0, [pc, #104]	; (8004414 <drawBossKey+0xa4>)
 80043ac:	f001 face 	bl	800594c <puts>
	printf("	}\n");
 80043b0:	4819      	ldr	r0, [pc, #100]	; (8004418 <drawBossKey+0xa8>)
 80043b2:	f001 facb 	bl	800594c <puts>
	printf("\n");
 80043b6:	200a      	movs	r0, #10
 80043b8:	f001 fa44 	bl	8005844 <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 80043bc:	4817      	ldr	r0, [pc, #92]	; (800441c <drawBossKey+0xac>)
 80043be:	f001 fac5 	bl	800594c <puts>
	printf("		gotoxy(0,0);\n");
 80043c2:	4817      	ldr	r0, [pc, #92]	; (8004420 <drawBossKey+0xb0>)
 80043c4:	f001 fac2 	bl	800594c <puts>
	printf("		drawBossKey();\n");
 80043c8:	4816      	ldr	r0, [pc, #88]	; (8004424 <drawBossKey+0xb4>)
 80043ca:	f001 fabf 	bl	800594c <puts>
	printf("		return 1;\n");
 80043ce:	4816      	ldr	r0, [pc, #88]	; (8004428 <drawBossKey+0xb8>)
 80043d0:	f001 fabc 	bl	800594c <puts>
	printf("	}\n");
 80043d4:	4810      	ldr	r0, [pc, #64]	; (8004418 <drawBossKey+0xa8>)
 80043d6:	f001 fab9 	bl	800594c <puts>
	printf("	return 0;\n");
 80043da:	4814      	ldr	r0, [pc, #80]	; (800442c <drawBossKey+0xbc>)
 80043dc:	f001 fab6 	bl	800594c <puts>
	printf("	uart_clear();\n");
 80043e0:	4813      	ldr	r0, [pc, #76]	; (8004430 <drawBossKey+0xc0>)
 80043e2:	f001 fab3 	bl	800594c <puts>
	printf("}\n");
 80043e6:	4813      	ldr	r0, [pc, #76]	; (8004434 <drawBossKey+0xc4>)
 80043e8:	f001 fab0 	bl	800594c <puts>
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	08007020 	.word	0x08007020
 80043f4:	08007048 	.word	0x08007048
 80043f8:	08007064 	.word	0x08007064
 80043fc:	08007074 	.word	0x08007074
 8004400:	08007094 	.word	0x08007094
 8004404:	080070a4 	.word	0x080070a4
 8004408:	080070c0 	.word	0x080070c0
 800440c:	080070cc 	.word	0x080070cc
 8004410:	080070e8 	.word	0x080070e8
 8004414:	080070f8 	.word	0x080070f8
 8004418:	080070fc 	.word	0x080070fc
 800441c:	08007100 	.word	0x08007100
 8004420:	08007120 	.word	0x08007120
 8004424:	08007130 	.word	0x08007130
 8004428:	08007144 	.word	0x08007144
 800442c:	08007150 	.word	0x08007150
 8004430:	0800715c 	.word	0x0800715c
 8004434:	0800716c 	.word	0x0800716c

08004438 <createBulletNode>:
=======
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	200e      	movs	r0, #14
 8003250:	f7fe f93e 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003254:	20db      	movs	r0, #219	; 0xdb
 8003256:	f002 fc6f 	bl	8005b38 <putchar>

	gotoxy(16,44);
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	2010      	movs	r0, #16
 800325e:	f7fe f937 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003262:	20db      	movs	r0, #219	; 0xdb
 8003264:	f002 fc68 	bl	8005b38 <putchar>

	gotoxy(17,44);
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	2011      	movs	r0, #17
 800326c:	f7fe f930 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003270:	20db      	movs	r0, #219	; 0xdb
 8003272:	f002 fc61 	bl	8005b38 <putchar>
	gotoxy(17,43);
 8003276:	212b      	movs	r1, #43	; 0x2b
 8003278:	2011      	movs	r0, #17
 800327a:	f7fe f929 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800327e:	20db      	movs	r0, #219	; 0xdb
 8003280:	f002 fc5a 	bl	8005b38 <putchar>

	gotoxy(19,44);
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	2013      	movs	r0, #19
 8003288:	f7fe f922 	bl	80014d0 <gotoxy>
	printf("%c",220);
 800328c:	20dc      	movs	r0, #220	; 0xdc
 800328e:	f002 fc53 	bl	8005b38 <putchar>

	gotoxy(21,44);
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	2015      	movs	r0, #21
 8003296:	f7fe f91b 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800329a:	20db      	movs	r0, #219	; 0xdb
 800329c:	f002 fc4c 	bl	8005b38 <putchar>

	gotoxy(23,44);
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	2017      	movs	r0, #23
 80032a4:	f7fe f914 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80032a8:	20db      	movs	r0, #219	; 0xdb
 80032aa:	f002 fc45 	bl	8005b38 <putchar>
	gotoxy(23,43);
 80032ae:	212b      	movs	r1, #43	; 0x2b
 80032b0:	2017      	movs	r0, #23
 80032b2:	f7fe f90d 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80032b6:	20dc      	movs	r0, #220	; 0xdc
 80032b8:	f002 fc3e 	bl	8005b38 <putchar>

	gotoxy(25,44);
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	2019      	movs	r0, #25
 80032c0:	f7fe f906 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80032c4:	20db      	movs	r0, #219	; 0xdb
 80032c6:	f002 fc37 	bl	8005b38 <putchar>
	gotoxy(25,43);
 80032ca:	212b      	movs	r1, #43	; 0x2b
 80032cc:	2019      	movs	r0, #25
 80032ce:	f7fe f8ff 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80032d2:	20db      	movs	r0, #219	; 0xdb
 80032d4:	f002 fc30 	bl	8005b38 <putchar>
	gotoxy(25,42);
 80032d8:	212a      	movs	r1, #42	; 0x2a
 80032da:	2019      	movs	r0, #25
 80032dc:	f7fe f8f8 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80032e0:	20db      	movs	r0, #219	; 0xdb
 80032e2:	f002 fc29 	bl	8005b38 <putchar>

	gotoxy(27,44);
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	201b      	movs	r0, #27
 80032ea:	f7fe f8f1 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80032ee:	20db      	movs	r0, #219	; 0xdb
 80032f0:	f002 fc22 	bl	8005b38 <putchar>
	gotoxy(27,43);
 80032f4:	212b      	movs	r1, #43	; 0x2b
 80032f6:	201b      	movs	r0, #27
 80032f8:	f7fe f8ea 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80032fc:	20dc      	movs	r0, #220	; 0xdc
 80032fe:	f002 fc1b 	bl	8005b38 <putchar>

	gotoxy(28,44);
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	201c      	movs	r0, #28
 8003306:	f7fe f8e3 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800330a:	20db      	movs	r0, #219	; 0xdb
 800330c:	f002 fc14 	bl	8005b38 <putchar>

	gotoxy(36,44);
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	2024      	movs	r0, #36	; 0x24
 8003314:	f7fe f8dc 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003318:	20db      	movs	r0, #219	; 0xdb
 800331a:	f002 fc0d 	bl	8005b38 <putchar>
	gotoxy(36,43);
 800331e:	212b      	movs	r1, #43	; 0x2b
 8003320:	2024      	movs	r0, #36	; 0x24
 8003322:	f7fe f8d5 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003326:	20db      	movs	r0, #219	; 0xdb
 8003328:	f002 fc06 	bl	8005b38 <putchar>

	gotoxy(37,44);
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	2025      	movs	r0, #37	; 0x25
 8003330:	f7fe f8ce 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003334:	20db      	movs	r0, #219	; 0xdb
 8003336:	f002 fbff 	bl	8005b38 <putchar>

	gotoxy(38,44);
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	2026      	movs	r0, #38	; 0x26
 800333e:	f7fe f8c7 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003342:	20dc      	movs	r0, #220	; 0xdc
 8003344:	f002 fbf8 	bl	8005b38 <putchar>

	gotoxy(40,44);
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	2028      	movs	r0, #40	; 0x28
 800334c:	f7fe f8c0 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003350:	20db      	movs	r0, #219	; 0xdb
 8003352:	f002 fbf1 	bl	8005b38 <putchar>
	gotoxy(40,43);
 8003356:	212b      	movs	r1, #43	; 0x2b
 8003358:	2028      	movs	r0, #40	; 0x28
 800335a:	f7fe f8b9 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800335e:	20db      	movs	r0, #219	; 0xdb
 8003360:	f002 fbea 	bl	8005b38 <putchar>

	gotoxy(41,43);
 8003364:	212b      	movs	r1, #43	; 0x2b
 8003366:	2029      	movs	r0, #41	; 0x29
 8003368:	f7fe f8b2 	bl	80014d0 <gotoxy>
	printf("%c",205);
 800336c:	20cd      	movs	r0, #205	; 0xcd
 800336e:	f002 fbe3 	bl	8005b38 <putchar>

	gotoxy(42,44);
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	202a      	movs	r0, #42	; 0x2a
 8003376:	f7fe f8ab 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800337a:	20db      	movs	r0, #219	; 0xdb
 800337c:	f002 fbdc 	bl	8005b38 <putchar>
	gotoxy(42,43);
 8003380:	212b      	movs	r1, #43	; 0x2b
 8003382:	202a      	movs	r0, #42	; 0x2a
 8003384:	f7fe f8a4 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003388:	20db      	movs	r0, #219	; 0xdb
 800338a:	f002 fbd5 	bl	8005b38 <putchar>

	gotoxy(45,44);
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	202d      	movs	r0, #45	; 0x2d
 8003392:	f7fe f89d 	bl	80014d0 <gotoxy>
	printf("%c",186);
 8003396:	20ba      	movs	r0, #186	; 0xba
 8003398:	f002 fbce 	bl	8005b38 <putchar>

	gotoxy(47,44);
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	202f      	movs	r0, #47	; 0x2f
 80033a0:	f7fe f896 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80033a4:	20dc      	movs	r0, #220	; 0xdc
 80033a6:	f002 fbc7 	bl	8005b38 <putchar>

	gotoxy(55,44);
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	2037      	movs	r0, #55	; 0x37
 80033ae:	f7fe f88f 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80033b2:	20db      	movs	r0, #219	; 0xdb
 80033b4:	f002 fbc0 	bl	8005b38 <putchar>
	gotoxy(55,43);
 80033b8:	212b      	movs	r1, #43	; 0x2b
 80033ba:	2037      	movs	r0, #55	; 0x37
 80033bc:	f7fe f888 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80033c0:	20dc      	movs	r0, #220	; 0xdc
 80033c2:	f002 fbb9 	bl	8005b38 <putchar>

	gotoxy(58,44);
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	203a      	movs	r0, #58	; 0x3a
 80033ca:	f7fe f881 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80033ce:	20db      	movs	r0, #219	; 0xdb
 80033d0:	f002 fbb2 	bl	8005b38 <putchar>
	gotoxy(58,43);
 80033d4:	212b      	movs	r1, #43	; 0x2b
 80033d6:	203a      	movs	r0, #58	; 0x3a
 80033d8:	f7fe f87a 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80033dc:	20db      	movs	r0, #219	; 0xdb
 80033de:	f002 fbab 	bl	8005b38 <putchar>
	gotoxy(58,42);
 80033e2:	212a      	movs	r1, #42	; 0x2a
 80033e4:	203a      	movs	r0, #58	; 0x3a
 80033e6:	f7fe f873 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80033ea:	20dc      	movs	r0, #220	; 0xdc
 80033ec:	f002 fba4 	bl	8005b38 <putchar>

	gotoxy(59,44);
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	203b      	movs	r0, #59	; 0x3b
 80033f4:	f7fe f86c 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80033f8:	20db      	movs	r0, #219	; 0xdb
 80033fa:	f002 fb9d 	bl	8005b38 <putchar>
	gotoxy(59,43);
 80033fe:	212b      	movs	r1, #43	; 0x2b
 8003400:	203b      	movs	r0, #59	; 0x3b
 8003402:	f7fe f865 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003406:	20dc      	movs	r0, #220	; 0xdc
 8003408:	f002 fb96 	bl	8005b38 <putchar>

	gotoxy(60,44);
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	203c      	movs	r0, #60	; 0x3c
 8003410:	f7fe f85e 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003414:	20db      	movs	r0, #219	; 0xdb
 8003416:	f002 fb8f 	bl	8005b38 <putchar>

	gotoxy(61,44);
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	203d      	movs	r0, #61	; 0x3d
 800341e:	f7fe f857 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003422:	20db      	movs	r0, #219	; 0xdb
 8003424:	f002 fb88 	bl	8005b38 <putchar>
	gotoxy(61,43);
 8003428:	212b      	movs	r1, #43	; 0x2b
 800342a:	203d      	movs	r0, #61	; 0x3d
 800342c:	f7fe f850 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003430:	20db      	movs	r0, #219	; 0xdb
 8003432:	f002 fb81 	bl	8005b38 <putchar>

	gotoxy(63,44);
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	203f      	movs	r0, #63	; 0x3f
 800343a:	f7fe f849 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800343e:	20db      	movs	r0, #219	; 0xdb
 8003440:	f002 fb7a 	bl	8005b38 <putchar>

	gotoxy(64,44);
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	2040      	movs	r0, #64	; 0x40
 8003448:	f7fe f842 	bl	80014d0 <gotoxy>
	printf("%c",220);
 800344c:	20dc      	movs	r0, #220	; 0xdc
 800344e:	f002 fb73 	bl	8005b38 <putchar>

	gotoxy(65,44);
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	2041      	movs	r0, #65	; 0x41
 8003456:	f7fe f83b 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800345a:	20db      	movs	r0, #219	; 0xdb
 800345c:	f002 fb6c 	bl	8005b38 <putchar>

	gotoxy(67,44);
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	2043      	movs	r0, #67	; 0x43
 8003464:	f7fe f834 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003468:	20db      	movs	r0, #219	; 0xdb
 800346a:	f002 fb65 	bl	8005b38 <putchar>
	gotoxy(67,43);
 800346e:	212b      	movs	r1, #43	; 0x2b
 8003470:	2043      	movs	r0, #67	; 0x43
 8003472:	f7fe f82d 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003476:	20db      	movs	r0, #219	; 0xdb
 8003478:	f002 fb5e 	bl	8005b38 <putchar>
	gotoxy(67,42);
 800347c:	212a      	movs	r1, #42	; 0x2a
 800347e:	2043      	movs	r0, #67	; 0x43
 8003480:	f7fe f826 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003484:	20db      	movs	r0, #219	; 0xdb
 8003486:	f002 fb57 	bl	8005b38 <putchar>

	gotoxy(69,44);
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	2045      	movs	r0, #69	; 0x45
 800348e:	f7fe f81f 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003492:	20db      	movs	r0, #219	; 0xdb
 8003494:	f002 fb50 	bl	8005b38 <putchar>
	gotoxy(69,43);
 8003498:	212b      	movs	r1, #43	; 0x2b
 800349a:	2045      	movs	r0, #69	; 0x45
 800349c:	f7fe f818 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034a0:	20db      	movs	r0, #219	; 0xdb
 80034a2:	f002 fb49 	bl	8005b38 <putchar>
	gotoxy(69,42);
 80034a6:	212a      	movs	r1, #42	; 0x2a
 80034a8:	2045      	movs	r0, #69	; 0x45
 80034aa:	f7fe f811 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034ae:	20db      	movs	r0, #219	; 0xdb
 80034b0:	f002 fb42 	bl	8005b38 <putchar>

	gotoxy(71,44);
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	2047      	movs	r0, #71	; 0x47
 80034b8:	f7fe f80a 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034bc:	20db      	movs	r0, #219	; 0xdb
 80034be:	f002 fb3b 	bl	8005b38 <putchar>
	gotoxy(71,43);
 80034c2:	212b      	movs	r1, #43	; 0x2b
 80034c4:	2047      	movs	r0, #71	; 0x47
 80034c6:	f7fe f803 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034ca:	20db      	movs	r0, #219	; 0xdb
 80034cc:	f002 fb34 	bl	8005b38 <putchar>
	gotoxy(71,42);
 80034d0:	212a      	movs	r1, #42	; 0x2a
 80034d2:	2047      	movs	r0, #71	; 0x47
 80034d4:	f7fd fffc 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034d8:	20db      	movs	r0, #219	; 0xdb
 80034da:	f002 fb2d 	bl	8005b38 <putchar>

	gotoxy(73,44);
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	2049      	movs	r0, #73	; 0x49
 80034e2:	f7fd fff5 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034e6:	20db      	movs	r0, #219	; 0xdb
 80034e8:	f002 fb26 	bl	8005b38 <putchar>
	gotoxy(73,43);
 80034ec:	212b      	movs	r1, #43	; 0x2b
 80034ee:	2049      	movs	r0, #73	; 0x49
 80034f0:	f7fd ffee 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80034f4:	20db      	movs	r0, #219	; 0xdb
 80034f6:	f002 fb1f 	bl	8005b38 <putchar>

	gotoxy(74,44);
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	204a      	movs	r0, #74	; 0x4a
 80034fe:	f7fd ffe7 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003502:	20db      	movs	r0, #219	; 0xdb
 8003504:	f002 fb18 	bl	8005b38 <putchar>

	gotoxy(76,44);
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	204c      	movs	r0, #76	; 0x4c
 800350c:	f7fd ffe0 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003510:	20db      	movs	r0, #219	; 0xdb
 8003512:	f002 fb11 	bl	8005b38 <putchar>

	gotoxy(77,44);
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	204d      	movs	r0, #77	; 0x4d
 800351a:	f7fd ffd9 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800351e:	20db      	movs	r0, #219	; 0xdb
 8003520:	f002 fb0a 	bl	8005b38 <putchar>
	gotoxy(77,43);
 8003524:	212b      	movs	r1, #43	; 0x2b
 8003526:	204d      	movs	r0, #77	; 0x4d
 8003528:	f7fd ffd2 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800352c:	20db      	movs	r0, #219	; 0xdb
 800352e:	f002 fb03 	bl	8005b38 <putchar>

	gotoxy(79,44);
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	204f      	movs	r0, #79	; 0x4f
 8003536:	f7fd ffcb 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800353a:	20db      	movs	r0, #219	; 0xdb
 800353c:	f002 fafc 	bl	8005b38 <putchar>
	gotoxy(79,44);
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	204f      	movs	r0, #79	; 0x4f
 8003544:	f7fd ffc4 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003548:	20dc      	movs	r0, #220	; 0xdc
 800354a:	f002 faf5 	bl	8005b38 <putchar>

	gotoxy(81,44);
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	2051      	movs	r0, #81	; 0x51
 8003552:	f7fd ffbd 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003556:	20db      	movs	r0, #219	; 0xdb
 8003558:	f002 faee 	bl	8005b38 <putchar>
	gotoxy(81,43);
 800355c:	212b      	movs	r1, #43	; 0x2b
 800355e:	2051      	movs	r0, #81	; 0x51
 8003560:	f7fd ffb6 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003564:	20db      	movs	r0, #219	; 0xdb
 8003566:	f002 fae7 	bl	8005b38 <putchar>

	gotoxy(82,44);
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	2052      	movs	r0, #82	; 0x52
 800356e:	f7fd ffaf 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003572:	20db      	movs	r0, #219	; 0xdb
 8003574:	f002 fae0 	bl	8005b38 <putchar>

	gotoxy(85,44);
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	2055      	movs	r0, #85	; 0x55
 800357c:	f7fd ffa8 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003580:	20db      	movs	r0, #219	; 0xdb
 8003582:	f002 fad9 	bl	8005b38 <putchar>
	gotoxy(85,43);
 8003586:	212b      	movs	r1, #43	; 0x2b
 8003588:	2055      	movs	r0, #85	; 0x55
 800358a:	f7fd ffa1 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800358e:	20db      	movs	r0, #219	; 0xdb
 8003590:	f002 fad2 	bl	8005b38 <putchar>
	gotoxy(85,42);
 8003594:	212a      	movs	r1, #42	; 0x2a
 8003596:	2055      	movs	r0, #85	; 0x55
 8003598:	f7fd ff9a 	bl	80014d0 <gotoxy>
	printf("%c",220);
 800359c:	20dc      	movs	r0, #220	; 0xdc
 800359e:	f002 facb 	bl	8005b38 <putchar>

	gotoxy(86,44);
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	2056      	movs	r0, #86	; 0x56
 80035a6:	f7fd ff93 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80035aa:	20db      	movs	r0, #219	; 0xdb
 80035ac:	f002 fac4 	bl	8005b38 <putchar>

	gotoxy(87,44);
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	2057      	movs	r0, #87	; 0x57
 80035b4:	f7fd ff8c 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80035b8:	20dc      	movs	r0, #220	; 0xdc
 80035ba:	f002 fabd 	bl	8005b38 <putchar>

	gotoxy(88,44);
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	2058      	movs	r0, #88	; 0x58
 80035c2:	f7fd ff85 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80035c6:	20db      	movs	r0, #219	; 0xdb
 80035c8:	f002 fab6 	bl	8005b38 <putchar>
	gotoxy(88,43);
 80035cc:	212b      	movs	r1, #43	; 0x2b
 80035ce:	2058      	movs	r0, #88	; 0x58
 80035d0:	f7fd ff7e 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80035d4:	20dc      	movs	r0, #220	; 0xdc
 80035d6:	f002 faaf 	bl	8005b38 <putchar>

	gotoxy(93,44);
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	205d      	movs	r0, #93	; 0x5d
 80035de:	f7fd ff77 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80035e2:	20db      	movs	r0, #219	; 0xdb
 80035e4:	f002 faa8 	bl	8005b38 <putchar>

	gotoxy(94,44);
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	205e      	movs	r0, #94	; 0x5e
 80035ec:	f7fd ff70 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80035f0:	20db      	movs	r0, #219	; 0xdb
 80035f2:	f002 faa1 	bl	8005b38 <putchar>
	gotoxy(94,43);
 80035f6:	212b      	movs	r1, #43	; 0x2b
 80035f8:	205e      	movs	r0, #94	; 0x5e
 80035fa:	f7fd ff69 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80035fe:	20dc      	movs	r0, #220	; 0xdc
 8003600:	f002 fa9a 	bl	8005b38 <putchar>

	gotoxy(95,44);
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	205f      	movs	r0, #95	; 0x5f
 8003608:	f7fd ff62 	bl	80014d0 <gotoxy>
	printf("%c",220);
 800360c:	20dc      	movs	r0, #220	; 0xdc
 800360e:	f002 fa93 	bl	8005b38 <putchar>

	gotoxy(96,44);
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	2060      	movs	r0, #96	; 0x60
 8003616:	f7fd ff5b 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800361a:	20db      	movs	r0, #219	; 0xdb
 800361c:	f002 fa8c 	bl	8005b38 <putchar>

	gotoxy(98,44);
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	2062      	movs	r0, #98	; 0x62
 8003624:	f7fd ff54 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003628:	20db      	movs	r0, #219	; 0xdb
 800362a:	f002 fa85 	bl	8005b38 <putchar>
	gotoxy(98,43);
 800362e:	212b      	movs	r1, #43	; 0x2b
 8003630:	2062      	movs	r0, #98	; 0x62
 8003632:	f7fd ff4d 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003636:	20dc      	movs	r0, #220	; 0xdc
 8003638:	f002 fa7e 	bl	8005b38 <putchar>

	gotoxy(99,44);
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	2063      	movs	r0, #99	; 0x63
 8003640:	f7fd ff46 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003644:	20db      	movs	r0, #219	; 0xdb
 8003646:	f002 fa77 	bl	8005b38 <putchar>

	gotoxy(103,44);
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	2067      	movs	r0, #103	; 0x67
 800364e:	f7fd ff3f 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003652:	20db      	movs	r0, #219	; 0xdb
 8003654:	f002 fa70 	bl	8005b38 <putchar>

	gotoxy(104,44);
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	2068      	movs	r0, #104	; 0x68
 800365c:	f7fd ff38 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003660:	20dc      	movs	r0, #220	; 0xdc
 8003662:	f002 fa69 	bl	8005b38 <putchar>

	gotoxy(107,44);
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	206b      	movs	r0, #107	; 0x6b
 800366a:	f7fd ff31 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800366e:	20db      	movs	r0, #219	; 0xdb
 8003670:	f002 fa62 	bl	8005b38 <putchar>

	gotoxy(108,44);
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	206c      	movs	r0, #108	; 0x6c
 8003678:	f7fd ff2a 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800367c:	20db      	movs	r0, #219	; 0xdb
 800367e:	f002 fa5b 	bl	8005b38 <putchar>
	gotoxy(108,43);
 8003682:	212b      	movs	r1, #43	; 0x2b
 8003684:	206c      	movs	r0, #108	; 0x6c
 8003686:	f7fd ff23 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800368a:	20db      	movs	r0, #219	; 0xdb
 800368c:	f002 fa54 	bl	8005b38 <putchar>

	gotoxy(109,44);
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	206d      	movs	r0, #109	; 0x6d
 8003694:	f7fd ff1c 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003698:	20dc      	movs	r0, #220	; 0xdc
 800369a:	f002 fa4d 	bl	8005b38 <putchar>

	gotoxy(112,44);
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	2070      	movs	r0, #112	; 0x70
 80036a2:	f7fd ff15 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80036a6:	20db      	movs	r0, #219	; 0xdb
 80036a8:	f002 fa46 	bl	8005b38 <putchar>

	gotoxy(113,44);
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	2071      	movs	r0, #113	; 0x71
 80036b0:	f7fd ff0e 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80036b4:	20dc      	movs	r0, #220	; 0xdc
 80036b6:	f002 fa3f 	bl	8005b38 <putchar>

	gotoxy(114,44);
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	2072      	movs	r0, #114	; 0x72
 80036be:	f7fd ff07 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80036c2:	20db      	movs	r0, #219	; 0xdb
 80036c4:	f002 fa38 	bl	8005b38 <putchar>
	gotoxy(114,43);
 80036c8:	212b      	movs	r1, #43	; 0x2b
 80036ca:	2072      	movs	r0, #114	; 0x72
 80036cc:	f7fd ff00 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80036d0:	20db      	movs	r0, #219	; 0xdb
 80036d2:	f002 fa31 	bl	8005b38 <putchar>

	gotoxy(115,44);
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	2073      	movs	r0, #115	; 0x73
 80036da:	f7fd fef9 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80036de:	20db      	movs	r0, #219	; 0xdb
 80036e0:	f002 fa2a 	bl	8005b38 <putchar>

	gotoxy(120,44);
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	2078      	movs	r0, #120	; 0x78
 80036e8:	f7fd fef2 	bl	80014d0 <gotoxy>
	printf("%c",47);
 80036ec:	202f      	movs	r0, #47	; 0x2f
 80036ee:	f002 fa23 	bl	8005b38 <putchar>
	gotoxy(121,43);
 80036f2:	212b      	movs	r1, #43	; 0x2b
 80036f4:	2079      	movs	r0, #121	; 0x79
 80036f6:	f7fd feeb 	bl	80014d0 <gotoxy>
	printf("%c",47);
 80036fa:	202f      	movs	r0, #47	; 0x2f
 80036fc:	f002 fa1c 	bl	8005b38 <putchar>
	gotoxy(122,43);
 8003700:	212b      	movs	r1, #43	; 0x2b
 8003702:	207a      	movs	r0, #122	; 0x7a
 8003704:	f7fd fee4 	bl	80014d0 <gotoxy>
	printf("%c",223);
 8003708:	20df      	movs	r0, #223	; 0xdf
 800370a:	f002 fa15 	bl	8005b38 <putchar>
	gotoxy(122,42);
 800370e:	212a      	movs	r1, #42	; 0x2a
 8003710:	207a      	movs	r0, #122	; 0x7a
 8003712:	f7fd fedd 	bl	80014d0 <gotoxy>
	printf("%c",168);
 8003716:	20a8      	movs	r0, #168	; 0xa8
 8003718:	f002 fa0e 	bl	8005b38 <putchar>
	gotoxy(123,43);
 800371c:	212b      	movs	r1, #43	; 0x2b
 800371e:	207b      	movs	r0, #123	; 0x7b
 8003720:	f7fd fed6 	bl	80014d0 <gotoxy>
	printf("%c",92);
 8003724:	205c      	movs	r0, #92	; 0x5c
 8003726:	f002 fa07 	bl	8005b38 <putchar>
	gotoxy(124,44);
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	207c      	movs	r0, #124	; 0x7c
 800372e:	f7fd fecf 	bl	80014d0 <gotoxy>
	printf("%c",92);
 8003732:	205c      	movs	r0, #92	; 0x5c
 8003734:	f002 fa00 	bl	8005b38 <putchar>

	gotoxy(127,44);
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	207f      	movs	r0, #127	; 0x7f
 800373c:	f7fd fec8 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003740:	20db      	movs	r0, #219	; 0xdb
 8003742:	f002 f9f9 	bl	8005b38 <putchar>
	gotoxy(127,43);
 8003746:	212b      	movs	r1, #43	; 0x2b
 8003748:	207f      	movs	r0, #127	; 0x7f
 800374a:	f7fd fec1 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800374e:	20db      	movs	r0, #219	; 0xdb
 8003750:	f002 f9f2 	bl	8005b38 <putchar>
	gotoxy(127,42);
 8003754:	212a      	movs	r1, #42	; 0x2a
 8003756:	207f      	movs	r0, #127	; 0x7f
 8003758:	f7fd feba 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800375c:	20db      	movs	r0, #219	; 0xdb
 800375e:	f002 f9eb 	bl	8005b38 <putchar>

	gotoxy(129,44);
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	2081      	movs	r0, #129	; 0x81
 8003766:	f7fd feb3 	bl	80014d0 <gotoxy>
	printf("%c",219);
 800376a:	20db      	movs	r0, #219	; 0xdb
 800376c:	f002 f9e4 	bl	8005b38 <putchar>
	gotoxy(129,43);
 8003770:	212b      	movs	r1, #43	; 0x2b
 8003772:	2081      	movs	r0, #129	; 0x81
 8003774:	f7fd feac 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003778:	20dc      	movs	r0, #220	; 0xdc
 800377a:	f002 f9dd 	bl	8005b38 <putchar>

	gotoxy(130,44);
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	2082      	movs	r0, #130	; 0x82
 8003782:	f7fd fea5 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003786:	20db      	movs	r0, #219	; 0xdb
 8003788:	f002 f9d6 	bl	8005b38 <putchar>

	gotoxy(131,44);
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	2083      	movs	r0, #131	; 0x83
 8003790:	f7fd fe9e 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003794:	20dc      	movs	r0, #220	; 0xdc
 8003796:	f002 f9cf 	bl	8005b38 <putchar>

	gotoxy(132,44);
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	2084      	movs	r0, #132	; 0x84
 800379e:	f7fd fe97 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80037a2:	20db      	movs	r0, #219	; 0xdb
 80037a4:	f002 f9c8 	bl	8005b38 <putchar>

	gotoxy(133,44);
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	2085      	movs	r0, #133	; 0x85
 80037ac:	f7fd fe90 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80037b0:	20db      	movs	r0, #219	; 0xdb
 80037b2:	f002 f9c1 	bl	8005b38 <putchar>
	gotoxy(133,43);
 80037b6:	212b      	movs	r1, #43	; 0x2b
 80037b8:	2085      	movs	r0, #133	; 0x85
 80037ba:	f7fd fe89 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80037be:	20db      	movs	r0, #219	; 0xdb
 80037c0:	f002 f9ba 	bl	8005b38 <putchar>

	gotoxy(134,44);
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	2086      	movs	r0, #134	; 0x86
 80037c8:	f7fd fe82 	bl	80014d0 <gotoxy>
	printf("%c",219);
 80037cc:	20db      	movs	r0, #219	; 0xdb
 80037ce:	f002 f9b3 	bl	8005b38 <putchar>

	gotoxy(135,44);
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	2087      	movs	r0, #135	; 0x87
 80037d6:	f7fd fe7b 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80037da:	20dc      	movs	r0, #220	; 0xdc
 80037dc:	f002 f9ac 	bl	8005b38 <putchar>

	gotoxy(137,44);
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	2089      	movs	r0, #137	; 0x89
 80037e4:	f7fd fe74 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80037e8:	20dc      	movs	r0, #220	; 0xdc
 80037ea:	f002 f9a5 	bl	8005b38 <putchar>

	gotoxy(139,44);
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	208b      	movs	r0, #139	; 0x8b
 80037f2:	f7fd fe6d 	bl	80014d0 <gotoxy>
	printf("%c",220);
 80037f6:	20dc      	movs	r0, #220	; 0xdc
 80037f8:	f002 f99e 	bl	8005b38 <putchar>

	gotoxy(141,44);
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	208d      	movs	r0, #141	; 0x8d
 8003800:	f7fd fe66 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003804:	20db      	movs	r0, #219	; 0xdb
 8003806:	f002 f997 	bl	8005b38 <putchar>

	gotoxy(142,44);
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	208e      	movs	r0, #142	; 0x8e
 800380e:	f7fd fe5f 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003812:	20dc      	movs	r0, #220	; 0xdc
 8003814:	f002 f990 	bl	8005b38 <putchar>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <drawScore>:

void drawScore(gameState_t* gameState){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 8003824:	2100      	movs	r1, #0
 8003826:	208c      	movs	r0, #140	; 0x8c
 8003828:	f7fd fe52 	bl	80014d0 <gotoxy>
	printf("Your score is: %d", gameState->score);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	4619      	mov	r1, r3
 8003832:	4803      	ldr	r0, [pc, #12]	; (8003840 <drawScore+0x24>)
 8003834:	f002 f968 	bl	8005b08 <iprintf>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08006e14 	.word	0x08006e14

08003844 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	460a      	mov	r2, r1
 800384e:	71fb      	strb	r3, [r7, #7]
 8003850:	4613      	mov	r3, r2
 8003852:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	79ba      	ldrb	r2, [r7, #6]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fe38 	bl	80014d0 <gotoxy>
	printf("%c",219);
 8003860:	20db      	movs	r0, #219	; 0xdb
 8003862:	f002 f969 	bl	8005b38 <putchar>
	gotoxy(X-1,Y);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	3b01      	subs	r3, #1
 800386a:	79ba      	ldrb	r2, [r7, #6]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fe2e 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003874:	20dc      	movs	r0, #220	; 0xdc
 8003876:	f002 f95f 	bl	8005b38 <putchar>
	gotoxy(X+1,Y);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	3301      	adds	r3, #1
 800387e:	79ba      	ldrb	r2, [r7, #6]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fe24 	bl	80014d0 <gotoxy>
	printf("%c",220);
 8003888:	20dc      	movs	r0, #220	; 0xdc
 800388a:	f002 f955 	bl	8005b38 <putchar>
	gotoxy(X-1,Y+1);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	1e5a      	subs	r2, r3, #1
 8003892:	79bb      	ldrb	r3, [r7, #6]
 8003894:	3301      	adds	r3, #1
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f7fd fe19 	bl	80014d0 <gotoxy>
	printf("%c",223);
 800389e:	20df      	movs	r0, #223	; 0xdf
 80038a0:	f002 f94a 	bl	8005b38 <putchar>
	gotoxy(X+1,Y+1);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	79bb      	ldrb	r3, [r7, #6]
 80038aa:	3301      	adds	r3, #1
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fd fe0e 	bl	80014d0 <gotoxy>
	printf("%c",223);
 80038b4:	20df      	movs	r0, #223	; 0xdf
 80038b6:	f002 f93f 	bl	8005b38 <putchar>

	gotoxy(X,Y-1);
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	79bb      	ldrb	r3, [r7, #6]
 80038be:	3b01      	subs	r3, #1
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f7fd fe04 	bl	80014d0 <gotoxy>
	printf("%c",179);
 80038c8:	20b3      	movs	r0, #179	; 0xb3
 80038ca:	f002 f935 	bl	8005b38 <putchar>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	460a      	mov	r2, r1
 80038e0:	71fb      	strb	r3, [r7, #7]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	79ba      	ldrb	r2, [r7, #6]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd fdef 	bl	80014d0 <gotoxy>
	printf(" ");
 80038f2:	2020      	movs	r0, #32
 80038f4:	f002 f920 	bl	8005b38 <putchar>
	gotoxy(X-1,Y);
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	79ba      	ldrb	r2, [r7, #6]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fde5 	bl	80014d0 <gotoxy>
	printf(" ");
 8003906:	2020      	movs	r0, #32
 8003908:	f002 f916 	bl	8005b38 <putchar>
	gotoxy(X+1,Y);
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	3301      	adds	r3, #1
 8003910:	79ba      	ldrb	r2, [r7, #6]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fddb 	bl	80014d0 <gotoxy>
	printf(" ");
 800391a:	2020      	movs	r0, #32
 800391c:	f002 f90c 	bl	8005b38 <putchar>
	gotoxy(X-1,Y+1);
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	3301      	adds	r3, #1
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f7fd fdd0 	bl	80014d0 <gotoxy>
	printf(" ");
 8003930:	2020      	movs	r0, #32
 8003932:	f002 f901 	bl	8005b38 <putchar>
	gotoxy(X+1,Y+1);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	79bb      	ldrb	r3, [r7, #6]
 800393c:	3301      	adds	r3, #1
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fd fdc5 	bl	80014d0 <gotoxy>
	printf(" ");
 8003946:	2020      	movs	r0, #32
 8003948:	f002 f8f6 	bl	8005b38 <putchar>

	gotoxy(X,Y-1);
 800394c:	79fa      	ldrb	r2, [r7, #7]
 800394e:	79bb      	ldrb	r3, [r7, #6]
 8003950:	3b01      	subs	r3, #1
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7fd fdbb 	bl	80014d0 <gotoxy>
	printf(" ");
 800395a:	2020      	movs	r0, #32
 800395c:	f002 f8ec 	bl	8005b38 <putchar>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	460a      	mov	r2, r1
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	4613      	mov	r3, r2
 8003976:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	3302      	adds	r3, #2
 800397c:	79ba      	ldrb	r2, [r7, #6]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd fda5 	bl	80014d0 <gotoxy>
	printf("____");
 8003986:	4808      	ldr	r0, [pc, #32]	; (80039a8 <drawAttachmentRods+0x40>)
 8003988:	f002 f8be 	bl	8005b08 <iprintf>
	gotoxy(x-5, y);
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	3b05      	subs	r3, #5
 8003990:	79ba      	ldrb	r2, [r7, #6]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fd9b 	bl	80014d0 <gotoxy>
	printf("____");
 800399a:	4803      	ldr	r0, [pc, #12]	; (80039a8 <drawAttachmentRods+0x40>)
 800399c:	f002 f8b4 	bl	8005b08 <iprintf>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08006e28 	.word	0x08006e28

080039ac <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	460a      	mov	r2, r1
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	3302      	adds	r3, #2
 80039c0:	79ba      	ldrb	r2, [r7, #6]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fd83 	bl	80014d0 <gotoxy>
	printf("    ");
 80039ca:	4808      	ldr	r0, [pc, #32]	; (80039ec <deleteAttachmentRods+0x40>)
 80039cc:	f002 f89c 	bl	8005b08 <iprintf>
	gotoxy(x-5, y);
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	3b05      	subs	r3, #5
 80039d4:	79ba      	ldrb	r2, [r7, #6]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fd79 	bl	80014d0 <gotoxy>
	printf("    ");
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <deleteAttachmentRods+0x40>)
 80039e0:	f002 f892 	bl	8005b08 <iprintf>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	08006e30 	.word	0x08006e30

080039f0 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	460a      	mov	r2, r1
 80039fa:	71fb      	strb	r3, [r7, #7]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	79ba      	ldrb	r2, [r7, #6]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fd62 	bl	80014d0 <gotoxy>
	printf("     ");
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <deletePowerupGraphics+0x54>)
 8003a0e:	f002 f87b 	bl	8005b08 <iprintf>
	gotoxy(x, y+1);
 8003a12:	79fa      	ldrb	r2, [r7, #7]
 8003a14:	79bb      	ldrb	r3, [r7, #6]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f7fd fd58 	bl	80014d0 <gotoxy>
	printf("     ");
 8003a20:	4808      	ldr	r0, [pc, #32]	; (8003a44 <deletePowerupGraphics+0x54>)
 8003a22:	f002 f871 	bl	8005b08 <iprintf>
	gotoxy(x, y+2);
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	79bb      	ldrb	r3, [r7, #6]
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7fd fd4e 	bl	80014d0 <gotoxy>
	printf("     ");
 8003a34:	4803      	ldr	r0, [pc, #12]	; (8003a44 <deletePowerupGraphics+0x54>)
 8003a36:	f002 f867 	bl	8005b08 <iprintf>

}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08006e38 	.word	0x08006e38

08003a48 <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460a      	mov	r2, r1
 8003a52:	71fb      	strb	r3, [r7, #7]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 8003a58:	79f8      	ldrb	r0, [r7, #7]
 8003a5a:	79b9      	ldrb	r1, [r7, #6]
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	1d1a      	adds	r2, r3, #4
 8003a60:	79bb      	ldrb	r3, [r7, #6]
 8003a62:	3302      	adds	r3, #2
 8003a64:	2401      	movs	r4, #1
 8003a66:	9400      	str	r4, [sp, #0]
 8003a68:	f7fd fd44 	bl	80014f4 <drawBox>
 gotoxy(x+2, y+1);
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	1c9a      	adds	r2, r3, #2
 8003a70:	79bb      	ldrb	r3, [r7, #6]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fd fd2a 	bl	80014d0 <gotoxy>
 printf("$");
 8003a7c:	2024      	movs	r0, #36	; 0x24
 8003a7e:	f002 f85b 	bl	8005b38 <putchar>
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}
	...

08003a8c <drawNuke>:

void drawNuke(gameState_t* gameState){
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	7e1b      	ldrb	r3, [r3, #24]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 809e 	bne.w	8003bdc <drawNuke+0x150>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe ffe8 	bl	8002a7c <fpToInt>
 8003aac:	4604      	mov	r4, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ffe1 	bl	8002a7c <fpToInt>
 8003aba:	4603      	mov	r3, r0
 8003abc:	0fda      	lsrs	r2, r3, #31
 8003abe:	4413      	add	r3, r2
 8003ac0:	105b      	asrs	r3, r3, #1
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fd fd03 	bl	80014d0 <gotoxy>
		printf("     ");
 8003aca:	4846      	ldr	r0, [pc, #280]	; (8003be4 <drawNuke+0x158>)
 8003acc:	f002 f81c 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ffd0 	bl	8002a7c <fpToInt>
 8003adc:	4604      	mov	r4, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ffc9 	bl	8002a7c <fpToInt>
 8003aea:	4603      	mov	r3, r0
 8003aec:	3302      	adds	r3, #2
 8003aee:	0fda      	lsrs	r2, r3, #31
 8003af0:	4413      	add	r3, r2
 8003af2:	105b      	asrs	r3, r3, #1
 8003af4:	4619      	mov	r1, r3
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7fd fcea 	bl	80014d0 <gotoxy>
		printf("     ");
 8003afc:	4839      	ldr	r0, [pc, #228]	; (8003be4 <drawNuke+0x158>)
 8003afe:	f002 f803 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe ffb7 	bl	8002a7c <fpToInt>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe ffb0 	bl	8002a7c <fpToInt>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	3304      	adds	r3, #4
 8003b20:	0fda      	lsrs	r2, r3, #31
 8003b22:	4413      	add	r3, r2
 8003b24:	105b      	asrs	r3, r3, #1
 8003b26:	4619      	mov	r1, r3
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7fd fcd1 	bl	80014d0 <gotoxy>
		printf("     ");
 8003b2e:	482d      	ldr	r0, [pc, #180]	; (8003be4 <drawNuke+0x158>)
 8003b30:	f001 ffea 	bl	8005b08 <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe ff9e 	bl	8002a7c <fpToInt>
 8003b40:	4604      	mov	r4, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe ff97 	bl	8002a7c <fpToInt>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	0fda      	lsrs	r2, r3, #31
 8003b52:	4413      	add	r3, r2
 8003b54:	105b      	asrs	r3, r3, #1
 8003b56:	4619      	mov	r1, r3
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7fd fcb9 	bl	80014d0 <gotoxy>
		printf("  |  ");
 8003b5e:	4822      	ldr	r0, [pc, #136]	; (8003be8 <drawNuke+0x15c>)
 8003b60:	f001 ffd2 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe ff86 	bl	8002a7c <fpToInt>
 8003b70:	4604      	mov	r4, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe ff7f 	bl	8002a7c <fpToInt>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	3302      	adds	r3, #2
 8003b82:	0fda      	lsrs	r2, r3, #31
 8003b84:	4413      	add	r3, r2
 8003b86:	105b      	asrs	r3, r3, #1
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7fd fca0 	bl	80014d0 <gotoxy>
		printf("- o -");
 8003b90:	4816      	ldr	r0, [pc, #88]	; (8003bec <drawNuke+0x160>)
 8003b92:	f001 ffb9 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ff6d 	bl	8002a7c <fpToInt>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe ff66 	bl	8002a7c <fpToInt>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	0fda      	lsrs	r2, r3, #31
 8003bb6:	4413      	add	r3, r2
 8003bb8:	105b      	asrs	r3, r3, #1
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7fd fc87 	bl	80014d0 <gotoxy>
		printf(" / %c ", 92);
 8003bc2:	215c      	movs	r1, #92	; 0x5c
 8003bc4:	480a      	ldr	r0, [pc, #40]	; (8003bf0 <drawNuke+0x164>)
 8003bc6:	f001 ff9f 	bl	8005b08 <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bd8:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	08006e38 	.word	0x08006e38
 8003be8:	08006e40 	.word	0x08006e40
 8003bec:	08006e48 	.word	0x08006e48
 8003bf0:	08006e50 	.word	0x08006e50

08003bf4 <drawNukeCircle>:

void drawNukeCircle(gameState_t* gameState){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe ff3a 	bl	8002a7c <fpToInt>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe ff32 	bl	8002a7c <fpToInt>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	0fda      	lsrs	r2, r3, #31
 8003c1c:	4413      	add	r3, r2
 8003c1e:	105b      	asrs	r3, r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b0f      	subs	r3, #15
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3b07      	subs	r3, #7
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fd fc4e 	bl	80014d0 <gotoxy>
	printf("              ___-------___               \n");
 8003c34:	4874      	ldr	r0, [pc, #464]	; (8003e08 <drawNukeCircle+0x214>)
 8003c36:	f002 f803 	bl	8005c40 <puts>
	gotoxy(x-15, y-6);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b0f      	subs	r3, #15
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3b06      	subs	r3, #6
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7fd fc42 	bl	80014d0 <gotoxy>
	printf("           __-             -__            \n");
 8003c4c:	486f      	ldr	r0, [pc, #444]	; (8003e0c <drawNukeCircle+0x218>)
 8003c4e:	f001 fff7 	bl	8005c40 <puts>
	gotoxy(x-15, y-5);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b0f      	subs	r3, #15
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	3b05      	subs	r3, #5
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fd fc36 	bl	80014d0 <gotoxy>
	printf("         _-                   -_          \n");
 8003c64:	486a      	ldr	r0, [pc, #424]	; (8003e10 <drawNukeCircle+0x21c>)
 8003c66:	f001 ffeb 	bl	8005c40 <puts>
	gotoxy(x-15, y-4);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b0f      	subs	r3, #15
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3b04      	subs	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fd fc2a 	bl	80014d0 <gotoxy>
	printf("       _-                       -_        \n");
 8003c7c:	4865      	ldr	r0, [pc, #404]	; (8003e14 <drawNukeCircle+0x220>)
 8003c7e:	f001 ffdf 	bl	8005c40 <puts>
	gotoxy(x-15, y-3);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b0f      	subs	r3, #15
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3b03      	subs	r3, #3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fd fc1e 	bl	80014d0 <gotoxy>
	printf("     _-                            -_     \n");
 8003c94:	4860      	ldr	r0, [pc, #384]	; (8003e18 <drawNukeCircle+0x224>)
 8003c96:	f001 ffd3 	bl	8005c40 <puts>
	gotoxy(x-15, y-2);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b0f      	subs	r3, #15
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3b02      	subs	r3, #2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fd fc12 	bl	80014d0 <gotoxy>
	printf("   _-                                -_   \n");
 8003cac:	485b      	ldr	r0, [pc, #364]	; (8003e1c <drawNukeCircle+0x228>)
 8003cae:	f001 ffc7 	bl	8005c40 <puts>
	gotoxy(x-15, y-1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b0f      	subs	r3, #15
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fd fc06 	bl	80014d0 <gotoxy>
	printf("  =                                    =  \n");
 8003cc4:	4856      	ldr	r0, [pc, #344]	; (8003e20 <drawNukeCircle+0x22c>)
 8003cc6:	f001 ffbb 	bl	8005c40 <puts>
	gotoxy(x-15, y);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b0f      	subs	r3, #15
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fd fbfb 	bl	80014d0 <gotoxy>
	printf("_-                                      -_\n");
 8003cda:	4852      	ldr	r0, [pc, #328]	; (8003e24 <drawNukeCircle+0x230>)
 8003cdc:	f001 ffb0 	bl	8005c40 <puts>
	gotoxy(x-15, y+1);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b0f      	subs	r3, #15
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fd fbef 	bl	80014d0 <gotoxy>
	printf("=                                        =\n");
 8003cf2:	484d      	ldr	r0, [pc, #308]	; (8003e28 <drawNukeCircle+0x234>)
 8003cf4:	f001 ffa4 	bl	8005c40 <puts>
	gotoxy(x-15, y+2);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b0f      	subs	r3, #15
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3302      	adds	r3, #2
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fd fbe3 	bl	80014d0 <gotoxy>
	printf("=                                        =\n");
 8003d0a:	4847      	ldr	r0, [pc, #284]	; (8003e28 <drawNukeCircle+0x234>)
 8003d0c:	f001 ff98 	bl	8005c40 <puts>
	gotoxy(x-15, y+3);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b0f      	subs	r3, #15
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fd fbd7 	bl	80014d0 <gotoxy>
	printf("=                                        =\n");
 8003d22:	4841      	ldr	r0, [pc, #260]	; (8003e28 <drawNukeCircle+0x234>)
 8003d24:	f001 ff8c 	bl	8005c40 <puts>
	gotoxy(x-15, y+4);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b0f      	subs	r3, #15
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7fd fbcb 	bl	80014d0 <gotoxy>
	printf("=                                        =\n");
 8003d3a:	483b      	ldr	r0, [pc, #236]	; (8003e28 <drawNukeCircle+0x234>)
 8003d3c:	f001 ff80 	bl	8005c40 <puts>
	gotoxy(x-15, y+5);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3b0f      	subs	r3, #15
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3305      	adds	r3, #5
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f7fd fbbf 	bl	80014d0 <gotoxy>
	printf("-_                                      _-\n");
 8003d52:	4836      	ldr	r0, [pc, #216]	; (8003e2c <drawNukeCircle+0x238>)
 8003d54:	f001 ff74 	bl	8005c40 <puts>
	gotoxy(x-15, y+6);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3b0f      	subs	r3, #15
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3306      	adds	r3, #6
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f7fd fbb3 	bl	80014d0 <gotoxy>
	printf("  =                                    =  \n");
 8003d6a:	482d      	ldr	r0, [pc, #180]	; (8003e20 <drawNukeCircle+0x22c>)
 8003d6c:	f001 ff68 	bl	8005c40 <puts>
	gotoxy(x-15, y+7);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3b0f      	subs	r3, #15
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3307      	adds	r3, #7
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fd fba7 	bl	80014d0 <gotoxy>
	printf("   -_                                _-   \n");
 8003d82:	482b      	ldr	r0, [pc, #172]	; (8003e30 <drawNukeCircle+0x23c>)
 8003d84:	f001 ff5c 	bl	8005c40 <puts>
	gotoxy(x-15, y+8);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b0f      	subs	r3, #15
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3308      	adds	r3, #8
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fd fb9b 	bl	80014d0 <gotoxy>
	printf("     -_                            _-     \n");
 8003d9a:	4826      	ldr	r0, [pc, #152]	; (8003e34 <drawNukeCircle+0x240>)
 8003d9c:	f001 ff50 	bl	8005c40 <puts>
	gotoxy(x-15, y+9);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b0f      	subs	r3, #15
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3309      	adds	r3, #9
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fd fb8f 	bl	80014d0 <gotoxy>
	printf("       -_                       _-        \n");
 8003db2:	4821      	ldr	r0, [pc, #132]	; (8003e38 <drawNukeCircle+0x244>)
 8003db4:	f001 ff44 	bl	8005c40 <puts>
	gotoxy(x-15, y+10);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b0f      	subs	r3, #15
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	330a      	adds	r3, #10
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fd fb83 	bl	80014d0 <gotoxy>
	printf("         -_                   _-          \n");
 8003dca:	481c      	ldr	r0, [pc, #112]	; (8003e3c <drawNukeCircle+0x248>)
 8003dcc:	f001 ff38 	bl	8005c40 <puts>
	gotoxy(x-15, y+11);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b0f      	subs	r3, #15
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	330b      	adds	r3, #11
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fd fb77 	bl	80014d0 <gotoxy>
	printf("           -__             _--            \n");
 8003de2:	4817      	ldr	r0, [pc, #92]	; (8003e40 <drawNukeCircle+0x24c>)
 8003de4:	f001 ff2c 	bl	8005c40 <puts>
	gotoxy(x-15, y+12);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b0f      	subs	r3, #15
 8003dec:	461a      	mov	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	330c      	adds	r3, #12
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fd fb6b 	bl	80014d0 <gotoxy>
	printf("              ---_______---               \n");
 8003dfa:	4812      	ldr	r0, [pc, #72]	; (8003e44 <drawNukeCircle+0x250>)
 8003dfc:	f001 ff20 	bl	8005c40 <puts>
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	08006e58 	.word	0x08006e58
 8003e0c:	08006e84 	.word	0x08006e84
 8003e10:	08006eb0 	.word	0x08006eb0
 8003e14:	08006edc 	.word	0x08006edc
 8003e18:	08006f08 	.word	0x08006f08
 8003e1c:	08006f34 	.word	0x08006f34
 8003e20:	08006f60 	.word	0x08006f60
 8003e24:	08006f8c 	.word	0x08006f8c
 8003e28:	08006fb8 	.word	0x08006fb8
 8003e2c:	08006fe4 	.word	0x08006fe4
 8003e30:	08007010 	.word	0x08007010
 8003e34:	0800703c 	.word	0x0800703c
 8003e38:	08007068 	.word	0x08007068
 8003e3c:	08007094 	.word	0x08007094
 8003e40:	080070c0 	.word	0x080070c0
 8003e44:	080070ec 	.word	0x080070ec

08003e48 <clearNukeCircle>:

void clearNukeCircle(gameState_t* gameState){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fe10 	bl	8002a7c <fpToInt>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fe08 	bl	8002a7c <fpToInt>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	0fda      	lsrs	r2, r3, #31
 8003e70:	4413      	add	r3, r2
 8003e72:	105b      	asrs	r3, r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b0f      	subs	r3, #15
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3b07      	subs	r3, #7
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f7fd fb24 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003e88:	4874      	ldr	r0, [pc, #464]	; (800405c <clearNukeCircle+0x214>)
 8003e8a:	f001 fed9 	bl	8005c40 <puts>
	gotoxy(x-15, y-6);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b0f      	subs	r3, #15
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3b06      	subs	r3, #6
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fd fb18 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003ea0:	486e      	ldr	r0, [pc, #440]	; (800405c <clearNukeCircle+0x214>)
 8003ea2:	f001 fecd 	bl	8005c40 <puts>
	gotoxy(x-15, y-5);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b0f      	subs	r3, #15
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3b05      	subs	r3, #5
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fd fb0c 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003eb8:	4868      	ldr	r0, [pc, #416]	; (800405c <clearNukeCircle+0x214>)
 8003eba:	f001 fec1 	bl	8005c40 <puts>
	gotoxy(x-15, y-4);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b0f      	subs	r3, #15
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3b04      	subs	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7fd fb00 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003ed0:	4862      	ldr	r0, [pc, #392]	; (800405c <clearNukeCircle+0x214>)
 8003ed2:	f001 feb5 	bl	8005c40 <puts>
	gotoxy(x-15, y-3);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b0f      	subs	r3, #15
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3b03      	subs	r3, #3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7fd faf4 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003ee8:	485c      	ldr	r0, [pc, #368]	; (800405c <clearNukeCircle+0x214>)
 8003eea:	f001 fea9 	bl	8005c40 <puts>
	gotoxy(x-15, y-2);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b0f      	subs	r3, #15
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3b02      	subs	r3, #2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fd fae8 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f00:	4856      	ldr	r0, [pc, #344]	; (800405c <clearNukeCircle+0x214>)
 8003f02:	f001 fe9d 	bl	8005c40 <puts>
	gotoxy(x-15, y-1);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3b0f      	subs	r3, #15
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7fd fadc 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f18:	4850      	ldr	r0, [pc, #320]	; (800405c <clearNukeCircle+0x214>)
 8003f1a:	f001 fe91 	bl	8005c40 <puts>
	gotoxy(x-15, y);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b0f      	subs	r3, #15
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fd fad1 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f2e:	484b      	ldr	r0, [pc, #300]	; (800405c <clearNukeCircle+0x214>)
 8003f30:	f001 fe86 	bl	8005c40 <puts>
	gotoxy(x-15, y+1);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3b0f      	subs	r3, #15
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fd fac5 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f46:	4845      	ldr	r0, [pc, #276]	; (800405c <clearNukeCircle+0x214>)
 8003f48:	f001 fe7a 	bl	8005c40 <puts>
	gotoxy(x-15, y+2);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b0f      	subs	r3, #15
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3302      	adds	r3, #2
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fd fab9 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f5e:	483f      	ldr	r0, [pc, #252]	; (800405c <clearNukeCircle+0x214>)
 8003f60:	f001 fe6e 	bl	8005c40 <puts>
	gotoxy(x-15, y+3);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3b0f      	subs	r3, #15
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7fd faad 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f76:	4839      	ldr	r0, [pc, #228]	; (800405c <clearNukeCircle+0x214>)
 8003f78:	f001 fe62 	bl	8005c40 <puts>
	gotoxy(x-15, y+4);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b0f      	subs	r3, #15
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7fd faa1 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003f8e:	4833      	ldr	r0, [pc, #204]	; (800405c <clearNukeCircle+0x214>)
 8003f90:	f001 fe56 	bl	8005c40 <puts>
	gotoxy(x-15, y+5);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b0f      	subs	r3, #15
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fd fa95 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003fa6:	482d      	ldr	r0, [pc, #180]	; (800405c <clearNukeCircle+0x214>)
 8003fa8:	f001 fe4a 	bl	8005c40 <puts>
	gotoxy(x-15, y+6);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3b0f      	subs	r3, #15
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3306      	adds	r3, #6
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fd fa89 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003fbe:	4827      	ldr	r0, [pc, #156]	; (800405c <clearNukeCircle+0x214>)
 8003fc0:	f001 fe3e 	bl	8005c40 <puts>
	gotoxy(x-15, y+7);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b0f      	subs	r3, #15
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3307      	adds	r3, #7
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fd fa7d 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003fd6:	4821      	ldr	r0, [pc, #132]	; (800405c <clearNukeCircle+0x214>)
 8003fd8:	f001 fe32 	bl	8005c40 <puts>
	gotoxy(x-15, y+8);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3b0f      	subs	r3, #15
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f7fd fa71 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8003fee:	481b      	ldr	r0, [pc, #108]	; (800405c <clearNukeCircle+0x214>)
 8003ff0:	f001 fe26 	bl	8005c40 <puts>
	gotoxy(x-15, y+9);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b0f      	subs	r3, #15
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3309      	adds	r3, #9
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fd fa65 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8004006:	4815      	ldr	r0, [pc, #84]	; (800405c <clearNukeCircle+0x214>)
 8004008:	f001 fe1a 	bl	8005c40 <puts>
	gotoxy(x-15, y+10);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3b0f      	subs	r3, #15
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	330a      	adds	r3, #10
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7fd fa59 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 800401e:	480f      	ldr	r0, [pc, #60]	; (800405c <clearNukeCircle+0x214>)
 8004020:	f001 fe0e 	bl	8005c40 <puts>
	gotoxy(x-15, y+11);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3b0f      	subs	r3, #15
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	330b      	adds	r3, #11
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7fd fa4d 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 8004036:	4809      	ldr	r0, [pc, #36]	; (800405c <clearNukeCircle+0x214>)
 8004038:	f001 fe02 	bl	8005c40 <puts>
	gotoxy(x-15, y+12);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b0f      	subs	r3, #15
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	330c      	adds	r3, #12
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f7fd fa41 	bl	80014d0 <gotoxy>
	printf("                                          \n");
 800404e:	4803      	ldr	r0, [pc, #12]	; (800405c <clearNukeCircle+0x214>)
 8004050:	f001 fdf6 	bl	8005c40 <puts>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	08007118 	.word	0x08007118

08004060 <drawBossKey>:

void drawBossKey(){
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 8004064:	481e      	ldr	r0, [pc, #120]	; (80040e0 <drawBossKey+0x80>)
 8004066:	f001 fdeb 	bl	8005c40 <puts>
	printf("	char c = uart_get_char();\n");
 800406a:	481e      	ldr	r0, [pc, #120]	; (80040e4 <drawBossKey+0x84>)
 800406c:	f001 fde8 	bl	8005c40 <puts>
	printf("	if(c == 'f'){\n");
 8004070:	481d      	ldr	r0, [pc, #116]	; (80040e8 <drawBossKey+0x88>)
 8004072:	f001 fde5 	bl	8005c40 <puts>
	printf("		if(gameState->bossMode == 0){\n");
 8004076:	481d      	ldr	r0, [pc, #116]	; (80040ec <drawBossKey+0x8c>)
 8004078:	f001 fde2 	bl	8005c40 <puts>
	printf("			clrscr();\n");
 800407c:	481c      	ldr	r0, [pc, #112]	; (80040f0 <drawBossKey+0x90>)
 800407e:	f001 fddf 	bl	8005c40 <puts>
	printf("			gameState->bossMode = 1;\n");
 8004082:	481c      	ldr	r0, [pc, #112]	; (80040f4 <drawBossKey+0x94>)
 8004084:	f001 fddc 	bl	8005c40 <puts>
	printf("		}else{\n");
 8004088:	481b      	ldr	r0, [pc, #108]	; (80040f8 <drawBossKey+0x98>)
 800408a:	f001 fdd9 	bl	8005c40 <puts>
	printf("			gameState->bossMode = 0;\n");
 800408e:	481b      	ldr	r0, [pc, #108]	; (80040fc <drawBossKey+0x9c>)
 8004090:	f001 fdd6 	bl	8005c40 <puts>
	printf("			return 2;\n");
 8004094:	481a      	ldr	r0, [pc, #104]	; (8004100 <drawBossKey+0xa0>)
 8004096:	f001 fdd3 	bl	8005c40 <puts>
	printf("	f	}\n");
 800409a:	481a      	ldr	r0, [pc, #104]	; (8004104 <drawBossKey+0xa4>)
 800409c:	f001 fdd0 	bl	8005c40 <puts>
	printf("	}\n");
 80040a0:	4819      	ldr	r0, [pc, #100]	; (8004108 <drawBossKey+0xa8>)
 80040a2:	f001 fdcd 	bl	8005c40 <puts>
	printf("\n");
 80040a6:	200a      	movs	r0, #10
 80040a8:	f001 fd46 	bl	8005b38 <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 80040ac:	4817      	ldr	r0, [pc, #92]	; (800410c <drawBossKey+0xac>)
 80040ae:	f001 fdc7 	bl	8005c40 <puts>
	printf("		gotoxy(0,0);\n");
 80040b2:	4817      	ldr	r0, [pc, #92]	; (8004110 <drawBossKey+0xb0>)
 80040b4:	f001 fdc4 	bl	8005c40 <puts>
	printf("		drawBossKey();\n");
 80040b8:	4816      	ldr	r0, [pc, #88]	; (8004114 <drawBossKey+0xb4>)
 80040ba:	f001 fdc1 	bl	8005c40 <puts>
	printf("		return 1;\n");
 80040be:	4816      	ldr	r0, [pc, #88]	; (8004118 <drawBossKey+0xb8>)
 80040c0:	f001 fdbe 	bl	8005c40 <puts>
	printf("	}\n");
 80040c4:	4810      	ldr	r0, [pc, #64]	; (8004108 <drawBossKey+0xa8>)
 80040c6:	f001 fdbb 	bl	8005c40 <puts>
	printf("	return 0;\n");
 80040ca:	4814      	ldr	r0, [pc, #80]	; (800411c <drawBossKey+0xbc>)
 80040cc:	f001 fdb8 	bl	8005c40 <puts>
	printf("	uart_clear();\n");
 80040d0:	4813      	ldr	r0, [pc, #76]	; (8004120 <drawBossKey+0xc0>)
 80040d2:	f001 fdb5 	bl	8005c40 <puts>
	printf("}\n");
 80040d6:	4813      	ldr	r0, [pc, #76]	; (8004124 <drawBossKey+0xc4>)
 80040d8:	f001 fdb2 	bl	8005c40 <puts>
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	08007144 	.word	0x08007144
 80040e4:	0800716c 	.word	0x0800716c
 80040e8:	08007188 	.word	0x08007188
 80040ec:	08007198 	.word	0x08007198
 80040f0:	080071b8 	.word	0x080071b8
 80040f4:	080071c8 	.word	0x080071c8
 80040f8:	080071e4 	.word	0x080071e4
 80040fc:	080071f0 	.word	0x080071f0
 8004100:	0800720c 	.word	0x0800720c
 8004104:	0800721c 	.word	0x0800721c
 8004108:	08007224 	.word	0x08007224
 800410c:	08007228 	.word	0x08007228
 8004110:	08007248 	.word	0x08007248
 8004114:	08007258 	.word	0x08007258
 8004118:	0800726c 	.word	0x0800726c
 800411c:	08007278 	.word	0x08007278
 8004120:	08007284 	.word	0x08007284
 8004124:	08007294 	.word	0x08007294

08004128 <createBulletNode>:
>>>>>>> Stashed changes
=======
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	gotoxy(14,44);
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	200e      	movs	r0, #14
 8003b58:	f7fe f8a8 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003b5c:	20db      	movs	r0, #219	; 0xdb
 8003b5e:	f002 fd05 	bl	800656c <putchar>

	gotoxy(16,44);
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	2010      	movs	r0, #16
 8003b66:	f7fe f8a1 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003b6a:	20db      	movs	r0, #219	; 0xdb
 8003b6c:	f002 fcfe 	bl	800656c <putchar>

	gotoxy(17,44);
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	2011      	movs	r0, #17
 8003b74:	f7fe f89a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003b78:	20db      	movs	r0, #219	; 0xdb
 8003b7a:	f002 fcf7 	bl	800656c <putchar>
	gotoxy(17,43);
 8003b7e:	212b      	movs	r1, #43	; 0x2b
 8003b80:	2011      	movs	r0, #17
 8003b82:	f7fe f893 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003b86:	20db      	movs	r0, #219	; 0xdb
 8003b88:	f002 fcf0 	bl	800656c <putchar>

	gotoxy(19,44);
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	2013      	movs	r0, #19
 8003b90:	f7fe f88c 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003b94:	20dc      	movs	r0, #220	; 0xdc
 8003b96:	f002 fce9 	bl	800656c <putchar>

	gotoxy(21,44);
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	2015      	movs	r0, #21
 8003b9e:	f7fe f885 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ba2:	20db      	movs	r0, #219	; 0xdb
 8003ba4:	f002 fce2 	bl	800656c <putchar>

	gotoxy(23,44);
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	2017      	movs	r0, #23
 8003bac:	f7fe f87e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bb0:	20db      	movs	r0, #219	; 0xdb
 8003bb2:	f002 fcdb 	bl	800656c <putchar>
	gotoxy(23,43);
 8003bb6:	212b      	movs	r1, #43	; 0x2b
 8003bb8:	2017      	movs	r0, #23
 8003bba:	f7fe f877 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003bbe:	20dc      	movs	r0, #220	; 0xdc
 8003bc0:	f002 fcd4 	bl	800656c <putchar>

	gotoxy(25,44);
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	2019      	movs	r0, #25
 8003bc8:	f7fe f870 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bcc:	20db      	movs	r0, #219	; 0xdb
 8003bce:	f002 fccd 	bl	800656c <putchar>
	gotoxy(25,43);
 8003bd2:	212b      	movs	r1, #43	; 0x2b
 8003bd4:	2019      	movs	r0, #25
 8003bd6:	f7fe f869 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bda:	20db      	movs	r0, #219	; 0xdb
 8003bdc:	f002 fcc6 	bl	800656c <putchar>
	gotoxy(25,42);
 8003be0:	212a      	movs	r1, #42	; 0x2a
 8003be2:	2019      	movs	r0, #25
 8003be4:	f7fe f862 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003be8:	20db      	movs	r0, #219	; 0xdb
 8003bea:	f002 fcbf 	bl	800656c <putchar>

	gotoxy(27,44);
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	201b      	movs	r0, #27
 8003bf2:	f7fe f85b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003bf6:	20db      	movs	r0, #219	; 0xdb
 8003bf8:	f002 fcb8 	bl	800656c <putchar>
	gotoxy(27,43);
 8003bfc:	212b      	movs	r1, #43	; 0x2b
 8003bfe:	201b      	movs	r0, #27
 8003c00:	f7fe f854 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003c04:	20dc      	movs	r0, #220	; 0xdc
 8003c06:	f002 fcb1 	bl	800656c <putchar>

	gotoxy(28,44);
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	201c      	movs	r0, #28
 8003c0e:	f7fe f84d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c12:	20db      	movs	r0, #219	; 0xdb
 8003c14:	f002 fcaa 	bl	800656c <putchar>

	gotoxy(36,44);
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	2024      	movs	r0, #36	; 0x24
 8003c1c:	f7fe f846 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c20:	20db      	movs	r0, #219	; 0xdb
 8003c22:	f002 fca3 	bl	800656c <putchar>
	gotoxy(36,43);
 8003c26:	212b      	movs	r1, #43	; 0x2b
 8003c28:	2024      	movs	r0, #36	; 0x24
 8003c2a:	f7fe f83f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c2e:	20db      	movs	r0, #219	; 0xdb
 8003c30:	f002 fc9c 	bl	800656c <putchar>

	gotoxy(37,44);
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	2025      	movs	r0, #37	; 0x25
 8003c38:	f7fe f838 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c3c:	20db      	movs	r0, #219	; 0xdb
 8003c3e:	f002 fc95 	bl	800656c <putchar>

	gotoxy(38,44);
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	2026      	movs	r0, #38	; 0x26
 8003c46:	f7fe f831 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003c4a:	20dc      	movs	r0, #220	; 0xdc
 8003c4c:	f002 fc8e 	bl	800656c <putchar>

	gotoxy(40,44);
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	2028      	movs	r0, #40	; 0x28
 8003c54:	f7fe f82a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c58:	20db      	movs	r0, #219	; 0xdb
 8003c5a:	f002 fc87 	bl	800656c <putchar>
	gotoxy(40,43);
 8003c5e:	212b      	movs	r1, #43	; 0x2b
 8003c60:	2028      	movs	r0, #40	; 0x28
 8003c62:	f7fe f823 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c66:	20db      	movs	r0, #219	; 0xdb
 8003c68:	f002 fc80 	bl	800656c <putchar>

	gotoxy(41,43);
 8003c6c:	212b      	movs	r1, #43	; 0x2b
 8003c6e:	2029      	movs	r0, #41	; 0x29
 8003c70:	f7fe f81c 	bl	8001cac <gotoxy>
	printf("%c",205);
 8003c74:	20cd      	movs	r0, #205	; 0xcd
 8003c76:	f002 fc79 	bl	800656c <putchar>

	gotoxy(42,44);
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	202a      	movs	r0, #42	; 0x2a
 8003c7e:	f7fe f815 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c82:	20db      	movs	r0, #219	; 0xdb
 8003c84:	f002 fc72 	bl	800656c <putchar>
	gotoxy(42,43);
 8003c88:	212b      	movs	r1, #43	; 0x2b
 8003c8a:	202a      	movs	r0, #42	; 0x2a
 8003c8c:	f7fe f80e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003c90:	20db      	movs	r0, #219	; 0xdb
 8003c92:	f002 fc6b 	bl	800656c <putchar>

	gotoxy(45,44);
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	202d      	movs	r0, #45	; 0x2d
 8003c9a:	f7fe f807 	bl	8001cac <gotoxy>
	printf("%c",186);
 8003c9e:	20ba      	movs	r0, #186	; 0xba
 8003ca0:	f002 fc64 	bl	800656c <putchar>

	gotoxy(47,44);
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	202f      	movs	r0, #47	; 0x2f
 8003ca8:	f7fe f800 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003cac:	20dc      	movs	r0, #220	; 0xdc
 8003cae:	f002 fc5d 	bl	800656c <putchar>

	gotoxy(55,44);
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	2037      	movs	r0, #55	; 0x37
 8003cb6:	f7fd fff9 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003cba:	20db      	movs	r0, #219	; 0xdb
 8003cbc:	f002 fc56 	bl	800656c <putchar>
	gotoxy(55,43);
 8003cc0:	212b      	movs	r1, #43	; 0x2b
 8003cc2:	2037      	movs	r0, #55	; 0x37
 8003cc4:	f7fd fff2 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003cc8:	20dc      	movs	r0, #220	; 0xdc
 8003cca:	f002 fc4f 	bl	800656c <putchar>

	gotoxy(58,44);
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	203a      	movs	r0, #58	; 0x3a
 8003cd2:	f7fd ffeb 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003cd6:	20db      	movs	r0, #219	; 0xdb
 8003cd8:	f002 fc48 	bl	800656c <putchar>
	gotoxy(58,43);
 8003cdc:	212b      	movs	r1, #43	; 0x2b
 8003cde:	203a      	movs	r0, #58	; 0x3a
 8003ce0:	f7fd ffe4 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ce4:	20db      	movs	r0, #219	; 0xdb
 8003ce6:	f002 fc41 	bl	800656c <putchar>
	gotoxy(58,42);
 8003cea:	212a      	movs	r1, #42	; 0x2a
 8003cec:	203a      	movs	r0, #58	; 0x3a
 8003cee:	f7fd ffdd 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003cf2:	20dc      	movs	r0, #220	; 0xdc
 8003cf4:	f002 fc3a 	bl	800656c <putchar>

	gotoxy(59,44);
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	203b      	movs	r0, #59	; 0x3b
 8003cfc:	f7fd ffd6 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d00:	20db      	movs	r0, #219	; 0xdb
 8003d02:	f002 fc33 	bl	800656c <putchar>
	gotoxy(59,43);
 8003d06:	212b      	movs	r1, #43	; 0x2b
 8003d08:	203b      	movs	r0, #59	; 0x3b
 8003d0a:	f7fd ffcf 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d0e:	20dc      	movs	r0, #220	; 0xdc
 8003d10:	f002 fc2c 	bl	800656c <putchar>

	gotoxy(60,44);
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	203c      	movs	r0, #60	; 0x3c
 8003d18:	f7fd ffc8 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d1c:	20db      	movs	r0, #219	; 0xdb
 8003d1e:	f002 fc25 	bl	800656c <putchar>

	gotoxy(61,44);
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	203d      	movs	r0, #61	; 0x3d
 8003d26:	f7fd ffc1 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d2a:	20db      	movs	r0, #219	; 0xdb
 8003d2c:	f002 fc1e 	bl	800656c <putchar>
	gotoxy(61,43);
 8003d30:	212b      	movs	r1, #43	; 0x2b
 8003d32:	203d      	movs	r0, #61	; 0x3d
 8003d34:	f7fd ffba 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d38:	20db      	movs	r0, #219	; 0xdb
 8003d3a:	f002 fc17 	bl	800656c <putchar>

	gotoxy(63,44);
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	203f      	movs	r0, #63	; 0x3f
 8003d42:	f7fd ffb3 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d46:	20db      	movs	r0, #219	; 0xdb
 8003d48:	f002 fc10 	bl	800656c <putchar>

	gotoxy(64,44);
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	2040      	movs	r0, #64	; 0x40
 8003d50:	f7fd ffac 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003d54:	20dc      	movs	r0, #220	; 0xdc
 8003d56:	f002 fc09 	bl	800656c <putchar>

	gotoxy(65,44);
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	2041      	movs	r0, #65	; 0x41
 8003d5e:	f7fd ffa5 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d62:	20db      	movs	r0, #219	; 0xdb
 8003d64:	f002 fc02 	bl	800656c <putchar>

	gotoxy(67,44);
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	2043      	movs	r0, #67	; 0x43
 8003d6c:	f7fd ff9e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d70:	20db      	movs	r0, #219	; 0xdb
 8003d72:	f002 fbfb 	bl	800656c <putchar>
	gotoxy(67,43);
 8003d76:	212b      	movs	r1, #43	; 0x2b
 8003d78:	2043      	movs	r0, #67	; 0x43
 8003d7a:	f7fd ff97 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d7e:	20db      	movs	r0, #219	; 0xdb
 8003d80:	f002 fbf4 	bl	800656c <putchar>
	gotoxy(67,42);
 8003d84:	212a      	movs	r1, #42	; 0x2a
 8003d86:	2043      	movs	r0, #67	; 0x43
 8003d88:	f7fd ff90 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d8c:	20db      	movs	r0, #219	; 0xdb
 8003d8e:	f002 fbed 	bl	800656c <putchar>

	gotoxy(69,44);
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	2045      	movs	r0, #69	; 0x45
 8003d96:	f7fd ff89 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003d9a:	20db      	movs	r0, #219	; 0xdb
 8003d9c:	f002 fbe6 	bl	800656c <putchar>
	gotoxy(69,43);
 8003da0:	212b      	movs	r1, #43	; 0x2b
 8003da2:	2045      	movs	r0, #69	; 0x45
 8003da4:	f7fd ff82 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003da8:	20db      	movs	r0, #219	; 0xdb
 8003daa:	f002 fbdf 	bl	800656c <putchar>
	gotoxy(69,42);
 8003dae:	212a      	movs	r1, #42	; 0x2a
 8003db0:	2045      	movs	r0, #69	; 0x45
 8003db2:	f7fd ff7b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003db6:	20db      	movs	r0, #219	; 0xdb
 8003db8:	f002 fbd8 	bl	800656c <putchar>

	gotoxy(71,44);
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	2047      	movs	r0, #71	; 0x47
 8003dc0:	f7fd ff74 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dc4:	20db      	movs	r0, #219	; 0xdb
 8003dc6:	f002 fbd1 	bl	800656c <putchar>
	gotoxy(71,43);
 8003dca:	212b      	movs	r1, #43	; 0x2b
 8003dcc:	2047      	movs	r0, #71	; 0x47
 8003dce:	f7fd ff6d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dd2:	20db      	movs	r0, #219	; 0xdb
 8003dd4:	f002 fbca 	bl	800656c <putchar>
	gotoxy(71,42);
 8003dd8:	212a      	movs	r1, #42	; 0x2a
 8003dda:	2047      	movs	r0, #71	; 0x47
 8003ddc:	f7fd ff66 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003de0:	20db      	movs	r0, #219	; 0xdb
 8003de2:	f002 fbc3 	bl	800656c <putchar>

	gotoxy(73,44);
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	2049      	movs	r0, #73	; 0x49
 8003dea:	f7fd ff5f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dee:	20db      	movs	r0, #219	; 0xdb
 8003df0:	f002 fbbc 	bl	800656c <putchar>
	gotoxy(73,43);
 8003df4:	212b      	movs	r1, #43	; 0x2b
 8003df6:	2049      	movs	r0, #73	; 0x49
 8003df8:	f7fd ff58 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003dfc:	20db      	movs	r0, #219	; 0xdb
 8003dfe:	f002 fbb5 	bl	800656c <putchar>

	gotoxy(74,44);
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	204a      	movs	r0, #74	; 0x4a
 8003e06:	f7fd ff51 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e0a:	20db      	movs	r0, #219	; 0xdb
 8003e0c:	f002 fbae 	bl	800656c <putchar>

	gotoxy(76,44);
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	204c      	movs	r0, #76	; 0x4c
 8003e14:	f7fd ff4a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e18:	20db      	movs	r0, #219	; 0xdb
 8003e1a:	f002 fba7 	bl	800656c <putchar>

	gotoxy(77,44);
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	204d      	movs	r0, #77	; 0x4d
 8003e22:	f7fd ff43 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e26:	20db      	movs	r0, #219	; 0xdb
 8003e28:	f002 fba0 	bl	800656c <putchar>
	gotoxy(77,43);
 8003e2c:	212b      	movs	r1, #43	; 0x2b
 8003e2e:	204d      	movs	r0, #77	; 0x4d
 8003e30:	f7fd ff3c 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e34:	20db      	movs	r0, #219	; 0xdb
 8003e36:	f002 fb99 	bl	800656c <putchar>

	gotoxy(79,44);
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	204f      	movs	r0, #79	; 0x4f
 8003e3e:	f7fd ff35 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e42:	20db      	movs	r0, #219	; 0xdb
 8003e44:	f002 fb92 	bl	800656c <putchar>
	gotoxy(79,44);
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	204f      	movs	r0, #79	; 0x4f
 8003e4c:	f7fd ff2e 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003e50:	20dc      	movs	r0, #220	; 0xdc
 8003e52:	f002 fb8b 	bl	800656c <putchar>

	gotoxy(81,44);
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	2051      	movs	r0, #81	; 0x51
 8003e5a:	f7fd ff27 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e5e:	20db      	movs	r0, #219	; 0xdb
 8003e60:	f002 fb84 	bl	800656c <putchar>
	gotoxy(81,43);
 8003e64:	212b      	movs	r1, #43	; 0x2b
 8003e66:	2051      	movs	r0, #81	; 0x51
 8003e68:	f7fd ff20 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e6c:	20db      	movs	r0, #219	; 0xdb
 8003e6e:	f002 fb7d 	bl	800656c <putchar>

	gotoxy(82,44);
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	2052      	movs	r0, #82	; 0x52
 8003e76:	f7fd ff19 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e7a:	20db      	movs	r0, #219	; 0xdb
 8003e7c:	f002 fb76 	bl	800656c <putchar>

	gotoxy(85,44);
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	2055      	movs	r0, #85	; 0x55
 8003e84:	f7fd ff12 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e88:	20db      	movs	r0, #219	; 0xdb
 8003e8a:	f002 fb6f 	bl	800656c <putchar>
	gotoxy(85,43);
 8003e8e:	212b      	movs	r1, #43	; 0x2b
 8003e90:	2055      	movs	r0, #85	; 0x55
 8003e92:	f7fd ff0b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003e96:	20db      	movs	r0, #219	; 0xdb
 8003e98:	f002 fb68 	bl	800656c <putchar>
	gotoxy(85,42);
 8003e9c:	212a      	movs	r1, #42	; 0x2a
 8003e9e:	2055      	movs	r0, #85	; 0x55
 8003ea0:	f7fd ff04 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003ea4:	20dc      	movs	r0, #220	; 0xdc
 8003ea6:	f002 fb61 	bl	800656c <putchar>

	gotoxy(86,44);
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	2056      	movs	r0, #86	; 0x56
 8003eae:	f7fd fefd 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003eb2:	20db      	movs	r0, #219	; 0xdb
 8003eb4:	f002 fb5a 	bl	800656c <putchar>

	gotoxy(87,44);
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	2057      	movs	r0, #87	; 0x57
 8003ebc:	f7fd fef6 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003ec0:	20dc      	movs	r0, #220	; 0xdc
 8003ec2:	f002 fb53 	bl	800656c <putchar>

	gotoxy(88,44);
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	2058      	movs	r0, #88	; 0x58
 8003eca:	f7fd feef 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ece:	20db      	movs	r0, #219	; 0xdb
 8003ed0:	f002 fb4c 	bl	800656c <putchar>
	gotoxy(88,43);
 8003ed4:	212b      	movs	r1, #43	; 0x2b
 8003ed6:	2058      	movs	r0, #88	; 0x58
 8003ed8:	f7fd fee8 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003edc:	20dc      	movs	r0, #220	; 0xdc
 8003ede:	f002 fb45 	bl	800656c <putchar>

	gotoxy(93,44);
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	205d      	movs	r0, #93	; 0x5d
 8003ee6:	f7fd fee1 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003eea:	20db      	movs	r0, #219	; 0xdb
 8003eec:	f002 fb3e 	bl	800656c <putchar>

	gotoxy(94,44);
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	205e      	movs	r0, #94	; 0x5e
 8003ef4:	f7fd feda 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003ef8:	20db      	movs	r0, #219	; 0xdb
 8003efa:	f002 fb37 	bl	800656c <putchar>
	gotoxy(94,43);
 8003efe:	212b      	movs	r1, #43	; 0x2b
 8003f00:	205e      	movs	r0, #94	; 0x5e
 8003f02:	f7fd fed3 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f06:	20dc      	movs	r0, #220	; 0xdc
 8003f08:	f002 fb30 	bl	800656c <putchar>

	gotoxy(95,44);
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	205f      	movs	r0, #95	; 0x5f
 8003f10:	f7fd fecc 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f14:	20dc      	movs	r0, #220	; 0xdc
 8003f16:	f002 fb29 	bl	800656c <putchar>

	gotoxy(96,44);
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	2060      	movs	r0, #96	; 0x60
 8003f1e:	f7fd fec5 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f22:	20db      	movs	r0, #219	; 0xdb
 8003f24:	f002 fb22 	bl	800656c <putchar>

	gotoxy(98,44);
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	2062      	movs	r0, #98	; 0x62
 8003f2c:	f7fd febe 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f30:	20db      	movs	r0, #219	; 0xdb
 8003f32:	f002 fb1b 	bl	800656c <putchar>
	gotoxy(98,43);
 8003f36:	212b      	movs	r1, #43	; 0x2b
 8003f38:	2062      	movs	r0, #98	; 0x62
 8003f3a:	f7fd feb7 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f3e:	20dc      	movs	r0, #220	; 0xdc
 8003f40:	f002 fb14 	bl	800656c <putchar>

	gotoxy(99,44);
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	2063      	movs	r0, #99	; 0x63
 8003f48:	f7fd feb0 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f4c:	20db      	movs	r0, #219	; 0xdb
 8003f4e:	f002 fb0d 	bl	800656c <putchar>

	gotoxy(103,44);
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	2067      	movs	r0, #103	; 0x67
 8003f56:	f7fd fea9 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f5a:	20db      	movs	r0, #219	; 0xdb
 8003f5c:	f002 fb06 	bl	800656c <putchar>

	gotoxy(104,44);
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	2068      	movs	r0, #104	; 0x68
 8003f64:	f7fd fea2 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003f68:	20dc      	movs	r0, #220	; 0xdc
 8003f6a:	f002 faff 	bl	800656c <putchar>

	gotoxy(107,44);
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	206b      	movs	r0, #107	; 0x6b
 8003f72:	f7fd fe9b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f76:	20db      	movs	r0, #219	; 0xdb
 8003f78:	f002 faf8 	bl	800656c <putchar>

	gotoxy(108,44);
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	206c      	movs	r0, #108	; 0x6c
 8003f80:	f7fd fe94 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f84:	20db      	movs	r0, #219	; 0xdb
 8003f86:	f002 faf1 	bl	800656c <putchar>
	gotoxy(108,43);
 8003f8a:	212b      	movs	r1, #43	; 0x2b
 8003f8c:	206c      	movs	r0, #108	; 0x6c
 8003f8e:	f7fd fe8d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003f92:	20db      	movs	r0, #219	; 0xdb
 8003f94:	f002 faea 	bl	800656c <putchar>

	gotoxy(109,44);
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	206d      	movs	r0, #109	; 0x6d
 8003f9c:	f7fd fe86 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003fa0:	20dc      	movs	r0, #220	; 0xdc
 8003fa2:	f002 fae3 	bl	800656c <putchar>

	gotoxy(112,44);
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	2070      	movs	r0, #112	; 0x70
 8003faa:	f7fd fe7f 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fae:	20db      	movs	r0, #219	; 0xdb
 8003fb0:	f002 fadc 	bl	800656c <putchar>

	gotoxy(113,44);
 8003fb4:	212c      	movs	r1, #44	; 0x2c
 8003fb6:	2071      	movs	r0, #113	; 0x71
 8003fb8:	f7fd fe78 	bl	8001cac <gotoxy>
	printf("%c",220);
 8003fbc:	20dc      	movs	r0, #220	; 0xdc
 8003fbe:	f002 fad5 	bl	800656c <putchar>

	gotoxy(114,44);
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	2072      	movs	r0, #114	; 0x72
 8003fc6:	f7fd fe71 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fca:	20db      	movs	r0, #219	; 0xdb
 8003fcc:	f002 face 	bl	800656c <putchar>
	gotoxy(114,43);
 8003fd0:	212b      	movs	r1, #43	; 0x2b
 8003fd2:	2072      	movs	r0, #114	; 0x72
 8003fd4:	f7fd fe6a 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fd8:	20db      	movs	r0, #219	; 0xdb
 8003fda:	f002 fac7 	bl	800656c <putchar>

	gotoxy(115,44);
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	2073      	movs	r0, #115	; 0x73
 8003fe2:	f7fd fe63 	bl	8001cac <gotoxy>
	printf("%c",219);
 8003fe6:	20db      	movs	r0, #219	; 0xdb
 8003fe8:	f002 fac0 	bl	800656c <putchar>

	gotoxy(120,44);
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	2078      	movs	r0, #120	; 0x78
 8003ff0:	f7fd fe5c 	bl	8001cac <gotoxy>
	printf("%c",47);
 8003ff4:	202f      	movs	r0, #47	; 0x2f
 8003ff6:	f002 fab9 	bl	800656c <putchar>
	gotoxy(121,43);
 8003ffa:	212b      	movs	r1, #43	; 0x2b
 8003ffc:	2079      	movs	r0, #121	; 0x79
 8003ffe:	f7fd fe55 	bl	8001cac <gotoxy>
	printf("%c",47);
 8004002:	202f      	movs	r0, #47	; 0x2f
 8004004:	f002 fab2 	bl	800656c <putchar>
	gotoxy(122,43);
 8004008:	212b      	movs	r1, #43	; 0x2b
 800400a:	207a      	movs	r0, #122	; 0x7a
 800400c:	f7fd fe4e 	bl	8001cac <gotoxy>
	printf("%c",223);
 8004010:	20df      	movs	r0, #223	; 0xdf
 8004012:	f002 faab 	bl	800656c <putchar>
	gotoxy(122,42);
 8004016:	212a      	movs	r1, #42	; 0x2a
 8004018:	207a      	movs	r0, #122	; 0x7a
 800401a:	f7fd fe47 	bl	8001cac <gotoxy>
	printf("%c",168);
 800401e:	20a8      	movs	r0, #168	; 0xa8
 8004020:	f002 faa4 	bl	800656c <putchar>
	gotoxy(123,43);
 8004024:	212b      	movs	r1, #43	; 0x2b
 8004026:	207b      	movs	r0, #123	; 0x7b
 8004028:	f7fd fe40 	bl	8001cac <gotoxy>
	printf("%c",92);
 800402c:	205c      	movs	r0, #92	; 0x5c
 800402e:	f002 fa9d 	bl	800656c <putchar>
	gotoxy(124,44);
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	207c      	movs	r0, #124	; 0x7c
 8004036:	f7fd fe39 	bl	8001cac <gotoxy>
	printf("%c",92);
 800403a:	205c      	movs	r0, #92	; 0x5c
 800403c:	f002 fa96 	bl	800656c <putchar>

	gotoxy(127,44);
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	207f      	movs	r0, #127	; 0x7f
 8004044:	f7fd fe32 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004048:	20db      	movs	r0, #219	; 0xdb
 800404a:	f002 fa8f 	bl	800656c <putchar>
	gotoxy(127,43);
 800404e:	212b      	movs	r1, #43	; 0x2b
 8004050:	207f      	movs	r0, #127	; 0x7f
 8004052:	f7fd fe2b 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004056:	20db      	movs	r0, #219	; 0xdb
 8004058:	f002 fa88 	bl	800656c <putchar>
	gotoxy(127,42);
 800405c:	212a      	movs	r1, #42	; 0x2a
 800405e:	207f      	movs	r0, #127	; 0x7f
 8004060:	f7fd fe24 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004064:	20db      	movs	r0, #219	; 0xdb
 8004066:	f002 fa81 	bl	800656c <putchar>

	gotoxy(129,44);
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	2081      	movs	r0, #129	; 0x81
 800406e:	f7fd fe1d 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004072:	20db      	movs	r0, #219	; 0xdb
 8004074:	f002 fa7a 	bl	800656c <putchar>
	gotoxy(129,43);
 8004078:	212b      	movs	r1, #43	; 0x2b
 800407a:	2081      	movs	r0, #129	; 0x81
 800407c:	f7fd fe16 	bl	8001cac <gotoxy>
	printf("%c",220);
 8004080:	20dc      	movs	r0, #220	; 0xdc
 8004082:	f002 fa73 	bl	800656c <putchar>

	gotoxy(130,44);
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	2082      	movs	r0, #130	; 0x82
 800408a:	f7fd fe0f 	bl	8001cac <gotoxy>
	printf("%c",219);
 800408e:	20db      	movs	r0, #219	; 0xdb
 8004090:	f002 fa6c 	bl	800656c <putchar>

	gotoxy(131,44);
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	2083      	movs	r0, #131	; 0x83
 8004098:	f7fd fe08 	bl	8001cac <gotoxy>
	printf("%c",220);
 800409c:	20dc      	movs	r0, #220	; 0xdc
 800409e:	f002 fa65 	bl	800656c <putchar>

	gotoxy(132,44);
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	2084      	movs	r0, #132	; 0x84
 80040a6:	f7fd fe01 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040aa:	20db      	movs	r0, #219	; 0xdb
 80040ac:	f002 fa5e 	bl	800656c <putchar>

	gotoxy(133,44);
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	2085      	movs	r0, #133	; 0x85
 80040b4:	f7fd fdfa 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040b8:	20db      	movs	r0, #219	; 0xdb
 80040ba:	f002 fa57 	bl	800656c <putchar>
	gotoxy(133,43);
 80040be:	212b      	movs	r1, #43	; 0x2b
 80040c0:	2085      	movs	r0, #133	; 0x85
 80040c2:	f7fd fdf3 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040c6:	20db      	movs	r0, #219	; 0xdb
 80040c8:	f002 fa50 	bl	800656c <putchar>

	gotoxy(134,44);
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	2086      	movs	r0, #134	; 0x86
 80040d0:	f7fd fdec 	bl	8001cac <gotoxy>
	printf("%c",219);
 80040d4:	20db      	movs	r0, #219	; 0xdb
 80040d6:	f002 fa49 	bl	800656c <putchar>

	gotoxy(135,44);
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	2087      	movs	r0, #135	; 0x87
 80040de:	f7fd fde5 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040e2:	20dc      	movs	r0, #220	; 0xdc
 80040e4:	f002 fa42 	bl	800656c <putchar>

	gotoxy(137,44);
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	2089      	movs	r0, #137	; 0x89
 80040ec:	f7fd fdde 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040f0:	20dc      	movs	r0, #220	; 0xdc
 80040f2:	f002 fa3b 	bl	800656c <putchar>

	gotoxy(139,44);
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	208b      	movs	r0, #139	; 0x8b
 80040fa:	f7fd fdd7 	bl	8001cac <gotoxy>
	printf("%c",220);
 80040fe:	20dc      	movs	r0, #220	; 0xdc
 8004100:	f002 fa34 	bl	800656c <putchar>

	gotoxy(141,44);
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	208d      	movs	r0, #141	; 0x8d
 8004108:	f7fd fdd0 	bl	8001cac <gotoxy>
	printf("%c",219);
 800410c:	20db      	movs	r0, #219	; 0xdb
 800410e:	f002 fa2d 	bl	800656c <putchar>

	gotoxy(142,44);
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	208e      	movs	r0, #142	; 0x8e
 8004116:	f7fd fdc9 	bl	8001cac <gotoxy>
	printf("%c",220);
 800411a:	20dc      	movs	r0, #220	; 0xdc
 800411c:	f002 fa26 	bl	800656c <putchar>
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}

08004124 <drawScore>:

void drawScore(gameState_t* gameState){
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	gotoxy(140, 0);
 800412c:	2100      	movs	r1, #0
 800412e:	208c      	movs	r0, #140	; 0x8c
 8004130:	f7fd fdbc 	bl	8001cac <gotoxy>
	printf("Your score is: %d", gameState->score);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004138:	4619      	mov	r1, r3
 800413a:	480b      	ldr	r0, [pc, #44]	; (8004168 <drawScore+0x44>)
 800413c:	f002 f9fe 	bl	800653c <iprintf>
	gotoxy(140,1*yScale);
 8004140:	2102      	movs	r1, #2
 8004142:	208c      	movs	r0, #140	; 0x8c
 8004144:	f7fd fdb2 	bl	8001cac <gotoxy>
	printf("Level: %d", gameState->score/100);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <drawScore+0x48>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	b29b      	uxth	r3, r3
 8004156:	4619      	mov	r1, r3
 8004158:	4805      	ldr	r0, [pc, #20]	; (8004170 <drawScore+0x4c>)
 800415a:	f002 f9ef 	bl	800653c <iprintf>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	08007848 	.word	0x08007848
 800416c:	51eb851f 	.word	0x51eb851f
 8004170:	0800785c 	.word	0x0800785c

08004174 <drawMe>:

void drawMe(uint8_t X, uint8_t Y){
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	460a      	mov	r2, r1
 800417e:	71fb      	strb	r3, [r7, #7]
 8004180:	4613      	mov	r3, r2
 8004182:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	79ba      	ldrb	r2, [r7, #6]
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd fd8e 	bl	8001cac <gotoxy>
	printf("%c",219);
 8004190:	20db      	movs	r0, #219	; 0xdb
 8004192:	f002 f9eb 	bl	800656c <putchar>
	gotoxy(X-1,Y);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	3b01      	subs	r3, #1
 800419a:	79ba      	ldrb	r2, [r7, #6]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd fd84 	bl	8001cac <gotoxy>
	printf("%c",220);
 80041a4:	20dc      	movs	r0, #220	; 0xdc
 80041a6:	f002 f9e1 	bl	800656c <putchar>
	gotoxy(X+1,Y);
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	3301      	adds	r3, #1
 80041ae:	79ba      	ldrb	r2, [r7, #6]
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fd7a 	bl	8001cac <gotoxy>
	printf("%c",220);
 80041b8:	20dc      	movs	r0, #220	; 0xdc
 80041ba:	f002 f9d7 	bl	800656c <putchar>
	gotoxy(X-1,Y+1);
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	79bb      	ldrb	r3, [r7, #6]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fd fd6f 	bl	8001cac <gotoxy>
	printf("%c",223);
 80041ce:	20df      	movs	r0, #223	; 0xdf
 80041d0:	f002 f9cc 	bl	800656c <putchar>
	gotoxy(X+1,Y+1);
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	79bb      	ldrb	r3, [r7, #6]
 80041da:	3301      	adds	r3, #1
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f7fd fd64 	bl	8001cac <gotoxy>
	printf("%c",223);
 80041e4:	20df      	movs	r0, #223	; 0xdf
 80041e6:	f002 f9c1 	bl	800656c <putchar>

	gotoxy(X,Y-1);
 80041ea:	79fa      	ldrb	r2, [r7, #7]
 80041ec:	79bb      	ldrb	r3, [r7, #6]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f7fd fd5a 	bl	8001cac <gotoxy>
	printf("%c",179);
 80041f8:	20b3      	movs	r0, #179	; 0xb3
 80041fa:	f002 f9b7 	bl	800656c <putchar>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <deleteMe>:

void deleteMe(uint8_t X, uint8_t Y){
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	460a      	mov	r2, r1
 8004210:	71fb      	strb	r3, [r7, #7]
 8004212:	4613      	mov	r3, r2
 8004214:	71bb      	strb	r3, [r7, #6]
	gotoxy(X,Y);
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	79ba      	ldrb	r2, [r7, #6]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7fd fd45 	bl	8001cac <gotoxy>
	printf(" ");
 8004222:	2020      	movs	r0, #32
 8004224:	f002 f9a2 	bl	800656c <putchar>
	gotoxy(X-1,Y);
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	3b01      	subs	r3, #1
 800422c:	79ba      	ldrb	r2, [r7, #6]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fd3b 	bl	8001cac <gotoxy>
	printf(" ");
 8004236:	2020      	movs	r0, #32
 8004238:	f002 f998 	bl	800656c <putchar>
	gotoxy(X+1,Y);
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	3301      	adds	r3, #1
 8004240:	79ba      	ldrb	r2, [r7, #6]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fd31 	bl	8001cac <gotoxy>
	printf(" ");
 800424a:	2020      	movs	r0, #32
 800424c:	f002 f98e 	bl	800656c <putchar>
	gotoxy(X-1,Y+1);
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	3301      	adds	r3, #1
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fd fd26 	bl	8001cac <gotoxy>
	printf(" ");
 8004260:	2020      	movs	r0, #32
 8004262:	f002 f983 	bl	800656c <putchar>
	gotoxy(X+1,Y+1);
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	79bb      	ldrb	r3, [r7, #6]
 800426c:	3301      	adds	r3, #1
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fd fd1b 	bl	8001cac <gotoxy>
	printf(" ");
 8004276:	2020      	movs	r0, #32
 8004278:	f002 f978 	bl	800656c <putchar>

	gotoxy(X,Y-1);
 800427c:	79fa      	ldrb	r2, [r7, #7]
 800427e:	79bb      	ldrb	r3, [r7, #6]
 8004280:	3b01      	subs	r3, #1
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fd fd11 	bl	8001cac <gotoxy>
	printf(" ");
 800428a:	2020      	movs	r0, #32
 800428c:	f002 f96e 	bl	800656c <putchar>
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <drawAttachmentRods>:

void drawAttachmentRods(uint8_t x, uint8_t y){
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	460a      	mov	r2, r1
 80042a2:	71fb      	strb	r3, [r7, #7]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	3302      	adds	r3, #2
 80042ac:	79ba      	ldrb	r2, [r7, #6]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd fcfb 	bl	8001cac <gotoxy>
	printf("____");
 80042b6:	4808      	ldr	r0, [pc, #32]	; (80042d8 <drawAttachmentRods+0x40>)
 80042b8:	f002 f940 	bl	800653c <iprintf>
	gotoxy(x-5, y);
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	3b05      	subs	r3, #5
 80042c0:	79ba      	ldrb	r2, [r7, #6]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fcf1 	bl	8001cac <gotoxy>
	printf("____");
 80042ca:	4803      	ldr	r0, [pc, #12]	; (80042d8 <drawAttachmentRods+0x40>)
 80042cc:	f002 f936 	bl	800653c <iprintf>
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	08007868 	.word	0x08007868

080042dc <deleteAttachmentRods>:

void deleteAttachmentRods(uint8_t x, uint8_t y){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	460a      	mov	r2, r1
 80042e6:	71fb      	strb	r3, [r7, #7]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71bb      	strb	r3, [r7, #6]
	gotoxy(x+2, y);
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	3302      	adds	r3, #2
 80042f0:	79ba      	ldrb	r2, [r7, #6]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fcd9 	bl	8001cac <gotoxy>
	printf("    ");
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <deleteAttachmentRods+0x40>)
 80042fc:	f002 f91e 	bl	800653c <iprintf>
	gotoxy(x-5, y);
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	3b05      	subs	r3, #5
 8004304:	79ba      	ldrb	r2, [r7, #6]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd fccf 	bl	8001cac <gotoxy>
	printf("    ");
 800430e:	4803      	ldr	r0, [pc, #12]	; (800431c <deleteAttachmentRods+0x40>)
 8004310:	f002 f914 	bl	800653c <iprintf>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08007870 	.word	0x08007870

08004320 <deletePowerupGraphics>:

void deletePowerupGraphics(uint8_t x, uint8_t y){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	460a      	mov	r2, r1
 800432a:	71fb      	strb	r3, [r7, #7]
 800432c:	4613      	mov	r3, r2
 800432e:	71bb      	strb	r3, [r7, #6]
	gotoxy(x, y);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	79ba      	ldrb	r2, [r7, #6]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fcb8 	bl	8001cac <gotoxy>
	printf("     ");
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <deletePowerupGraphics+0x54>)
 800433e:	f002 f8fd 	bl	800653c <iprintf>
	gotoxy(x, y+1);
 8004342:	79fa      	ldrb	r2, [r7, #7]
 8004344:	79bb      	ldrb	r3, [r7, #6]
 8004346:	3301      	adds	r3, #1
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7fd fcae 	bl	8001cac <gotoxy>
	printf("     ");
 8004350:	4808      	ldr	r0, [pc, #32]	; (8004374 <deletePowerupGraphics+0x54>)
 8004352:	f002 f8f3 	bl	800653c <iprintf>
	gotoxy(x, y+2);
 8004356:	79fa      	ldrb	r2, [r7, #7]
 8004358:	79bb      	ldrb	r3, [r7, #6]
 800435a:	3302      	adds	r3, #2
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7fd fca4 	bl	8001cac <gotoxy>
	printf("     ");
 8004364:	4803      	ldr	r0, [pc, #12]	; (8004374 <deletePowerupGraphics+0x54>)
 8004366:	f002 f8e9 	bl	800653c <iprintf>

}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08007878 	.word	0x08007878

08004378 <drawPowerupGraphics>:

void drawPowerupGraphics(uint8_t x, uint8_t y){
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	af02      	add	r7, sp, #8
 800437e:	4603      	mov	r3, r0
 8004380:	460a      	mov	r2, r1
 8004382:	71fb      	strb	r3, [r7, #7]
 8004384:	4613      	mov	r3, r2
 8004386:	71bb      	strb	r3, [r7, #6]
 drawBox(x, y, x+4, y+2, 1);
 8004388:	79f8      	ldrb	r0, [r7, #7]
 800438a:	79b9      	ldrb	r1, [r7, #6]
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	79bb      	ldrb	r3, [r7, #6]
 8004392:	3302      	adds	r3, #2
 8004394:	2401      	movs	r4, #1
 8004396:	9400      	str	r4, [sp, #0]
 8004398:	f7fd fc9a 	bl	8001cd0 <drawBox>
 gotoxy(x+2, y+1);
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	1c9a      	adds	r2, r3, #2
 80043a0:	79bb      	ldrb	r3, [r7, #6]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7fd fc80 	bl	8001cac <gotoxy>
 printf("$");
 80043ac:	2024      	movs	r0, #36	; 0x24
 80043ae:	f002 f8dd 	bl	800656c <putchar>
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
	...

080043bc <drawNuke>:

void drawNuke(gameState_t* gameState){
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	if(gameState->nuke->isDeployed == 1){
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	7e1b      	ldrb	r3, [r3, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f040 809e 	bne.w	800450c <drawNuke+0x150>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe ffd4 	bl	8003384 <fpToInt>
 80043dc:	4604      	mov	r4, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe ffcd 	bl	8003384 <fpToInt>
 80043ea:	4603      	mov	r3, r0
 80043ec:	0fda      	lsrs	r2, r3, #31
 80043ee:	4413      	add	r3, r2
 80043f0:	105b      	asrs	r3, r3, #1
 80043f2:	4619      	mov	r1, r3
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7fd fc59 	bl	8001cac <gotoxy>
		printf("     ");
 80043fa:	4846      	ldr	r0, [pc, #280]	; (8004514 <drawNuke+0x158>)
 80043fc:	f002 f89e 	bl	800653c <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe ffbc 	bl	8003384 <fpToInt>
 800440c:	4604      	mov	r4, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe ffb5 	bl	8003384 <fpToInt>
 800441a:	4603      	mov	r3, r0
 800441c:	3302      	adds	r3, #2
 800441e:	0fda      	lsrs	r2, r3, #31
 8004420:	4413      	add	r3, r2
 8004422:	105b      	asrs	r3, r3, #1
 8004424:	4619      	mov	r1, r3
 8004426:	4620      	mov	r0, r4
 8004428:	f7fd fc40 	bl	8001cac <gotoxy>
		printf("     ");
 800442c:	4839      	ldr	r0, [pc, #228]	; (8004514 <drawNuke+0x158>)
 800442e:	f002 f885 	bl	800653c <iprintf>
		gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe ffa3 	bl	8003384 <fpToInt>
 800443e:	4604      	mov	r4, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe ff9c 	bl	8003384 <fpToInt>
 800444c:	4603      	mov	r3, r0
 800444e:	3304      	adds	r3, #4
 8004450:	0fda      	lsrs	r2, r3, #31
 8004452:	4413      	add	r3, r2
 8004454:	105b      	asrs	r3, r3, #1
 8004456:	4619      	mov	r1, r3
 8004458:	4620      	mov	r0, r4
 800445a:	f7fd fc27 	bl	8001cac <gotoxy>
		printf("     ");
 800445e:	482d      	ldr	r0, [pc, #180]	; (8004514 <drawNuke+0x158>)
 8004460:	f002 f86c 	bl	800653c <iprintf>

		gotoxy(fpToInt(gameState->nuke->nextPosition.x),fpToInt(gameState->nuke->nextPosition.y) / yScale);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe ff8a 	bl	8003384 <fpToInt>
 8004470:	4604      	mov	r4, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe ff83 	bl	8003384 <fpToInt>
 800447e:	4603      	mov	r3, r0
 8004480:	0fda      	lsrs	r2, r3, #31
 8004482:	4413      	add	r3, r2
 8004484:	105b      	asrs	r3, r3, #1
 8004486:	4619      	mov	r1, r3
 8004488:	4620      	mov	r0, r4
 800448a:	f7fd fc0f 	bl	8001cac <gotoxy>
		printf("  |  ");
 800448e:	4822      	ldr	r0, [pc, #136]	; (8004518 <drawNuke+0x15c>)
 8004490:	f002 f854 	bl	800653c <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 1 * yScale) / yScale);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe ff72 	bl	8003384 <fpToInt>
 80044a0:	4604      	mov	r4, r0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe ff6b 	bl	8003384 <fpToInt>
 80044ae:	4603      	mov	r3, r0
 80044b0:	3302      	adds	r3, #2
 80044b2:	0fda      	lsrs	r2, r3, #31
 80044b4:	4413      	add	r3, r2
 80044b6:	105b      	asrs	r3, r3, #1
 80044b8:	4619      	mov	r1, r3
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7fd fbf6 	bl	8001cac <gotoxy>
		printf("- o -");
 80044c0:	4816      	ldr	r0, [pc, #88]	; (800451c <drawNuke+0x160>)
 80044c2:	f002 f83b 	bl	800653c <iprintf>
		gotoxy(fpToInt(gameState->nuke->nextPosition.x),(fpToInt(gameState->nuke->nextPosition.y) + 2 * yScale) / yScale);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe ff59 	bl	8003384 <fpToInt>
 80044d2:	4604      	mov	r4, r0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe ff52 	bl	8003384 <fpToInt>
 80044e0:	4603      	mov	r3, r0
 80044e2:	3304      	adds	r3, #4
 80044e4:	0fda      	lsrs	r2, r3, #31
 80044e6:	4413      	add	r3, r2
 80044e8:	105b      	asrs	r3, r3, #1
 80044ea:	4619      	mov	r1, r3
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fd fbdd 	bl	8001cac <gotoxy>
		printf(" / %c ", 92);
 80044f2:	215c      	movs	r1, #92	; 0x5c
 80044f4:	480a      	ldr	r0, [pc, #40]	; (8004520 <drawNuke+0x164>)
 80044f6:	f002 f821 	bl	800653c <iprintf>

		gameState->nuke->position = gameState->nuke->nextPosition;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004502:	3308      	adds	r3, #8
 8004504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004508:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	08007878 	.word	0x08007878
 8004518:	08007880 	.word	0x08007880
 800451c:	08007888 	.word	0x08007888
 8004520:	08007890 	.word	0x08007890

08004524 <drawNukeCircle>:

void drawNukeCircle(gameState_t* gameState){
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe ff26 	bl	8003384 <fpToInt>
 8004538:	4603      	mov	r3, r0
 800453a:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe ff1e 	bl	8003384 <fpToInt>
 8004548:	4603      	mov	r3, r0
 800454a:	0fda      	lsrs	r2, r3, #31
 800454c:	4413      	add	r3, r2
 800454e:	105b      	asrs	r3, r3, #1
 8004550:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3b0f      	subs	r3, #15
 8004556:	461a      	mov	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3b07      	subs	r3, #7
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7fd fba4 	bl	8001cac <gotoxy>
	printf("              ___-------___               \n");
 8004564:	4874      	ldr	r0, [pc, #464]	; (8004738 <drawNukeCircle+0x214>)
 8004566:	f002 f885 	bl	8006674 <puts>
	gotoxy(x-15, y-6);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b0f      	subs	r3, #15
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3b06      	subs	r3, #6
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7fd fb98 	bl	8001cac <gotoxy>
	printf("           __-             -__            \n");
 800457c:	486f      	ldr	r0, [pc, #444]	; (800473c <drawNukeCircle+0x218>)
 800457e:	f002 f879 	bl	8006674 <puts>
	gotoxy(x-15, y-5);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b0f      	subs	r3, #15
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b05      	subs	r3, #5
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7fd fb8c 	bl	8001cac <gotoxy>
	printf("         _-                   -_          \n");
 8004594:	486a      	ldr	r0, [pc, #424]	; (8004740 <drawNukeCircle+0x21c>)
 8004596:	f002 f86d 	bl	8006674 <puts>
	gotoxy(x-15, y-4);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b0f      	subs	r3, #15
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3b04      	subs	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fd fb80 	bl	8001cac <gotoxy>
	printf("       _-                       -_        \n");
 80045ac:	4865      	ldr	r0, [pc, #404]	; (8004744 <drawNukeCircle+0x220>)
 80045ae:	f002 f861 	bl	8006674 <puts>
	gotoxy(x-15, y-3);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b0f      	subs	r3, #15
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3b03      	subs	r3, #3
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fd fb74 	bl	8001cac <gotoxy>
	printf("     _-                            -_     \n");
 80045c4:	4860      	ldr	r0, [pc, #384]	; (8004748 <drawNukeCircle+0x224>)
 80045c6:	f002 f855 	bl	8006674 <puts>
	gotoxy(x-15, y-2);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b0f      	subs	r3, #15
 80045ce:	461a      	mov	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3b02      	subs	r3, #2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fd fb68 	bl	8001cac <gotoxy>
	printf("   _-                                -_   \n");
 80045dc:	485b      	ldr	r0, [pc, #364]	; (800474c <drawNukeCircle+0x228>)
 80045de:	f002 f849 	bl	8006674 <puts>
	gotoxy(x-15, y-1);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b0f      	subs	r3, #15
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fd fb5c 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 80045f4:	4856      	ldr	r0, [pc, #344]	; (8004750 <drawNukeCircle+0x22c>)
 80045f6:	f002 f83d 	bl	8006674 <puts>
	gotoxy(x-15, y);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b0f      	subs	r3, #15
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7fd fb51 	bl	8001cac <gotoxy>
	printf("_-                                      -_\n");
 800460a:	4852      	ldr	r0, [pc, #328]	; (8004754 <drawNukeCircle+0x230>)
 800460c:	f002 f832 	bl	8006674 <puts>
	gotoxy(x-15, y+1);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b0f      	subs	r3, #15
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3301      	adds	r3, #1
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f7fd fb45 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 8004622:	484d      	ldr	r0, [pc, #308]	; (8004758 <drawNukeCircle+0x234>)
 8004624:	f002 f826 	bl	8006674 <puts>
	gotoxy(x-15, y+2);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b0f      	subs	r3, #15
 800462c:	461a      	mov	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3302      	adds	r3, #2
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fd fb39 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 800463a:	4847      	ldr	r0, [pc, #284]	; (8004758 <drawNukeCircle+0x234>)
 800463c:	f002 f81a 	bl	8006674 <puts>
	gotoxy(x-15, y+3);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b0f      	subs	r3, #15
 8004644:	461a      	mov	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3303      	adds	r3, #3
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7fd fb2d 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 8004652:	4841      	ldr	r0, [pc, #260]	; (8004758 <drawNukeCircle+0x234>)
 8004654:	f002 f80e 	bl	8006674 <puts>
	gotoxy(x-15, y+4);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b0f      	subs	r3, #15
 800465c:	461a      	mov	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fd fb21 	bl	8001cac <gotoxy>
	printf("=                                        =\n");
 800466a:	483b      	ldr	r0, [pc, #236]	; (8004758 <drawNukeCircle+0x234>)
 800466c:	f002 f802 	bl	8006674 <puts>
	gotoxy(x-15, y+5);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b0f      	subs	r3, #15
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	3305      	adds	r3, #5
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7fd fb15 	bl	8001cac <gotoxy>
	printf("-_                                      _-\n");
 8004682:	4836      	ldr	r0, [pc, #216]	; (800475c <drawNukeCircle+0x238>)
 8004684:	f001 fff6 	bl	8006674 <puts>
	gotoxy(x-15, y+6);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b0f      	subs	r3, #15
 800468c:	461a      	mov	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3306      	adds	r3, #6
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f7fd fb09 	bl	8001cac <gotoxy>
	printf("  =                                    =  \n");
 800469a:	482d      	ldr	r0, [pc, #180]	; (8004750 <drawNukeCircle+0x22c>)
 800469c:	f001 ffea 	bl	8006674 <puts>
	gotoxy(x-15, y+7);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3b0f      	subs	r3, #15
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3307      	adds	r3, #7
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7fd fafd 	bl	8001cac <gotoxy>
	printf("   -_                                _-   \n");
 80046b2:	482b      	ldr	r0, [pc, #172]	; (8004760 <drawNukeCircle+0x23c>)
 80046b4:	f001 ffde 	bl	8006674 <puts>
	gotoxy(x-15, y+8);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b0f      	subs	r3, #15
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3308      	adds	r3, #8
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f7fd faf1 	bl	8001cac <gotoxy>
	printf("     -_                            _-     \n");
 80046ca:	4826      	ldr	r0, [pc, #152]	; (8004764 <drawNukeCircle+0x240>)
 80046cc:	f001 ffd2 	bl	8006674 <puts>
	gotoxy(x-15, y+9);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b0f      	subs	r3, #15
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	3309      	adds	r3, #9
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f7fd fae5 	bl	8001cac <gotoxy>
	printf("       -_                       _-        \n");
 80046e2:	4821      	ldr	r0, [pc, #132]	; (8004768 <drawNukeCircle+0x244>)
 80046e4:	f001 ffc6 	bl	8006674 <puts>
	gotoxy(x-15, y+10);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b0f      	subs	r3, #15
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	330a      	adds	r3, #10
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fd fad9 	bl	8001cac <gotoxy>
	printf("         -_                   _-          \n");
 80046fa:	481c      	ldr	r0, [pc, #112]	; (800476c <drawNukeCircle+0x248>)
 80046fc:	f001 ffba 	bl	8006674 <puts>
	gotoxy(x-15, y+11);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b0f      	subs	r3, #15
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	330b      	adds	r3, #11
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fd facd 	bl	8001cac <gotoxy>
	printf("           -__             _--            \n");
 8004712:	4817      	ldr	r0, [pc, #92]	; (8004770 <drawNukeCircle+0x24c>)
 8004714:	f001 ffae 	bl	8006674 <puts>
	gotoxy(x-15, y+12);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b0f      	subs	r3, #15
 800471c:	461a      	mov	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	330c      	adds	r3, #12
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fd fac1 	bl	8001cac <gotoxy>
	printf("              ---_______---               \n");
 800472a:	4812      	ldr	r0, [pc, #72]	; (8004774 <drawNukeCircle+0x250>)
 800472c:	f001 ffa2 	bl	8006674 <puts>
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08007898 	.word	0x08007898
 800473c:	080078c4 	.word	0x080078c4
 8004740:	080078f0 	.word	0x080078f0
 8004744:	0800791c 	.word	0x0800791c
 8004748:	08007948 	.word	0x08007948
 800474c:	08007974 	.word	0x08007974
 8004750:	080079a0 	.word	0x080079a0
 8004754:	080079cc 	.word	0x080079cc
 8004758:	080079f8 	.word	0x080079f8
 800475c:	08007a24 	.word	0x08007a24
 8004760:	08007a50 	.word	0x08007a50
 8004764:	08007a7c 	.word	0x08007a7c
 8004768:	08007aa8 	.word	0x08007aa8
 800476c:	08007ad4 	.word	0x08007ad4
 8004770:	08007b00 	.word	0x08007b00
 8004774:	08007b2c 	.word	0x08007b2c

08004778 <clearNukeCircle>:

void clearNukeCircle(gameState_t* gameState){
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	uint32_t x = fpToInt(gameState->nuke->position.x);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fdfc 	bl	8003384 <fpToInt>
 800478c:	4603      	mov	r3, r0
 800478e:	60fb      	str	r3, [r7, #12]
	uint32_t y = fpToInt(gameState->nuke->position.y)/yScale;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fdf4 	bl	8003384 <fpToInt>
 800479c:	4603      	mov	r3, r0
 800479e:	0fda      	lsrs	r2, r3, #31
 80047a0:	4413      	add	r3, r2
 80047a2:	105b      	asrs	r3, r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]

	gotoxy(x-15, y-7);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b0f      	subs	r3, #15
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3b07      	subs	r3, #7
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fd fa7a 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80047b8:	4874      	ldr	r0, [pc, #464]	; (800498c <clearNukeCircle+0x214>)
 80047ba:	f001 ff5b 	bl	8006674 <puts>
	gotoxy(x-15, y-6);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b0f      	subs	r3, #15
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3b06      	subs	r3, #6
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fd fa6e 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80047d0:	486e      	ldr	r0, [pc, #440]	; (800498c <clearNukeCircle+0x214>)
 80047d2:	f001 ff4f 	bl	8006674 <puts>
	gotoxy(x-15, y-5);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b0f      	subs	r3, #15
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	3b05      	subs	r3, #5
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fd fa62 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80047e8:	4868      	ldr	r0, [pc, #416]	; (800498c <clearNukeCircle+0x214>)
 80047ea:	f001 ff43 	bl	8006674 <puts>
	gotoxy(x-15, y-4);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3b0f      	subs	r3, #15
 80047f2:	461a      	mov	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3b04      	subs	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fd fa56 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004800:	4862      	ldr	r0, [pc, #392]	; (800498c <clearNukeCircle+0x214>)
 8004802:	f001 ff37 	bl	8006674 <puts>
	gotoxy(x-15, y-3);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b0f      	subs	r3, #15
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	3b03      	subs	r3, #3
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fd fa4a 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004818:	485c      	ldr	r0, [pc, #368]	; (800498c <clearNukeCircle+0x214>)
 800481a:	f001 ff2b 	bl	8006674 <puts>
	gotoxy(x-15, y-2);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b0f      	subs	r3, #15
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3b02      	subs	r3, #2
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fd fa3e 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004830:	4856      	ldr	r0, [pc, #344]	; (800498c <clearNukeCircle+0x214>)
 8004832:	f001 ff1f 	bl	8006674 <puts>
	gotoxy(x-15, y-1);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b0f      	subs	r3, #15
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fd fa32 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004848:	4850      	ldr	r0, [pc, #320]	; (800498c <clearNukeCircle+0x214>)
 800484a:	f001 ff13 	bl	8006674 <puts>
	gotoxy(x-15, y);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b0f      	subs	r3, #15
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fd fa27 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800485e:	484b      	ldr	r0, [pc, #300]	; (800498c <clearNukeCircle+0x214>)
 8004860:	f001 ff08 	bl	8006674 <puts>
	gotoxy(x-15, y+1);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b0f      	subs	r3, #15
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	3301      	adds	r3, #1
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7fd fa1b 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004876:	4845      	ldr	r0, [pc, #276]	; (800498c <clearNukeCircle+0x214>)
 8004878:	f001 fefc 	bl	8006674 <puts>
	gotoxy(x-15, y+2);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3b0f      	subs	r3, #15
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3302      	adds	r3, #2
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7fd fa0f 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800488e:	483f      	ldr	r0, [pc, #252]	; (800498c <clearNukeCircle+0x214>)
 8004890:	f001 fef0 	bl	8006674 <puts>
	gotoxy(x-15, y+3);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3b0f      	subs	r3, #15
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3303      	adds	r3, #3
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fd fa03 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048a6:	4839      	ldr	r0, [pc, #228]	; (800498c <clearNukeCircle+0x214>)
 80048a8:	f001 fee4 	bl	8006674 <puts>
	gotoxy(x-15, y+4);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b0f      	subs	r3, #15
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f7fd f9f7 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048be:	4833      	ldr	r0, [pc, #204]	; (800498c <clearNukeCircle+0x214>)
 80048c0:	f001 fed8 	bl	8006674 <puts>
	gotoxy(x-15, y+5);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b0f      	subs	r3, #15
 80048c8:	461a      	mov	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3305      	adds	r3, #5
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fd f9eb 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048d6:	482d      	ldr	r0, [pc, #180]	; (800498c <clearNukeCircle+0x214>)
 80048d8:	f001 fecc 	bl	8006674 <puts>
	gotoxy(x-15, y+6);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b0f      	subs	r3, #15
 80048e0:	461a      	mov	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3306      	adds	r3, #6
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fd f9df 	bl	8001cac <gotoxy>
	printf("                                          \n");
 80048ee:	4827      	ldr	r0, [pc, #156]	; (800498c <clearNukeCircle+0x214>)
 80048f0:	f001 fec0 	bl	8006674 <puts>
	gotoxy(x-15, y+7);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b0f      	subs	r3, #15
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3307      	adds	r3, #7
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fd f9d3 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004906:	4821      	ldr	r0, [pc, #132]	; (800498c <clearNukeCircle+0x214>)
 8004908:	f001 feb4 	bl	8006674 <puts>
	gotoxy(x-15, y+8);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b0f      	subs	r3, #15
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3308      	adds	r3, #8
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7fd f9c7 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800491e:	481b      	ldr	r0, [pc, #108]	; (800498c <clearNukeCircle+0x214>)
 8004920:	f001 fea8 	bl	8006674 <puts>
	gotoxy(x-15, y+9);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b0f      	subs	r3, #15
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3309      	adds	r3, #9
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fd f9bb 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004936:	4815      	ldr	r0, [pc, #84]	; (800498c <clearNukeCircle+0x214>)
 8004938:	f001 fe9c 	bl	8006674 <puts>
	gotoxy(x-15, y+10);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3b0f      	subs	r3, #15
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	330a      	adds	r3, #10
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7fd f9af 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800494e:	480f      	ldr	r0, [pc, #60]	; (800498c <clearNukeCircle+0x214>)
 8004950:	f001 fe90 	bl	8006674 <puts>
	gotoxy(x-15, y+11);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b0f      	subs	r3, #15
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	330b      	adds	r3, #11
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7fd f9a3 	bl	8001cac <gotoxy>
	printf("                                          \n");
 8004966:	4809      	ldr	r0, [pc, #36]	; (800498c <clearNukeCircle+0x214>)
 8004968:	f001 fe84 	bl	8006674 <puts>
	gotoxy(x-15, y+12);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b0f      	subs	r3, #15
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	330c      	adds	r3, #12
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fd f997 	bl	8001cac <gotoxy>
	printf("                                          \n");
 800497e:	4803      	ldr	r0, [pc, #12]	; (800498c <clearNukeCircle+0x214>)
 8004980:	f001 fe78 	bl	8006674 <puts>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08007b58 	.word	0x08007b58

08004990 <drawBossKey>:

void drawBossKey(){
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	printf("int8_t bossKey(gameState_t* gameState){\n");
 8004994:	481e      	ldr	r0, [pc, #120]	; (8004a10 <drawBossKey+0x80>)
 8004996:	f001 fe6d 	bl	8006674 <puts>
	printf("	char c = uart_get_char();\n");
 800499a:	481e      	ldr	r0, [pc, #120]	; (8004a14 <drawBossKey+0x84>)
 800499c:	f001 fe6a 	bl	8006674 <puts>
	printf("	if(c == 'f'){\n");
 80049a0:	481d      	ldr	r0, [pc, #116]	; (8004a18 <drawBossKey+0x88>)
 80049a2:	f001 fe67 	bl	8006674 <puts>
	printf("		if(gameState->bossMode == 0){\n");
 80049a6:	481d      	ldr	r0, [pc, #116]	; (8004a1c <drawBossKey+0x8c>)
 80049a8:	f001 fe64 	bl	8006674 <puts>
	printf("			clrscr();\n");
 80049ac:	481c      	ldr	r0, [pc, #112]	; (8004a20 <drawBossKey+0x90>)
 80049ae:	f001 fe61 	bl	8006674 <puts>
	printf("			gameState->bossMode = 1;\n");
 80049b2:	481c      	ldr	r0, [pc, #112]	; (8004a24 <drawBossKey+0x94>)
 80049b4:	f001 fe5e 	bl	8006674 <puts>
	printf("		}else{\n");
 80049b8:	481b      	ldr	r0, [pc, #108]	; (8004a28 <drawBossKey+0x98>)
 80049ba:	f001 fe5b 	bl	8006674 <puts>
	printf("			gameState->bossMode = 0;\n");
 80049be:	481b      	ldr	r0, [pc, #108]	; (8004a2c <drawBossKey+0x9c>)
 80049c0:	f001 fe58 	bl	8006674 <puts>
	printf("			return 2;\n");
 80049c4:	481a      	ldr	r0, [pc, #104]	; (8004a30 <drawBossKey+0xa0>)
 80049c6:	f001 fe55 	bl	8006674 <puts>
	printf("	f	}\n");
 80049ca:	481a      	ldr	r0, [pc, #104]	; (8004a34 <drawBossKey+0xa4>)
 80049cc:	f001 fe52 	bl	8006674 <puts>
	printf("	}\n");
 80049d0:	4819      	ldr	r0, [pc, #100]	; (8004a38 <drawBossKey+0xa8>)
 80049d2:	f001 fe4f 	bl	8006674 <puts>
	printf("\n");
 80049d6:	200a      	movs	r0, #10
 80049d8:	f001 fdc8 	bl	800656c <putchar>
	printf("	if(gameState->bossMode == 1){\n");
 80049dc:	4817      	ldr	r0, [pc, #92]	; (8004a3c <drawBossKey+0xac>)
 80049de:	f001 fe49 	bl	8006674 <puts>
	printf("		gotoxy(0,0);\n");
 80049e2:	4817      	ldr	r0, [pc, #92]	; (8004a40 <drawBossKey+0xb0>)
 80049e4:	f001 fe46 	bl	8006674 <puts>
	printf("		drawBossKey();\n");
 80049e8:	4816      	ldr	r0, [pc, #88]	; (8004a44 <drawBossKey+0xb4>)
 80049ea:	f001 fe43 	bl	8006674 <puts>
	printf("		return 1;\n");
 80049ee:	4816      	ldr	r0, [pc, #88]	; (8004a48 <drawBossKey+0xb8>)
 80049f0:	f001 fe40 	bl	8006674 <puts>
	printf("	}\n");
 80049f4:	4810      	ldr	r0, [pc, #64]	; (8004a38 <drawBossKey+0xa8>)
 80049f6:	f001 fe3d 	bl	8006674 <puts>
	printf("	return 0;\n");
 80049fa:	4814      	ldr	r0, [pc, #80]	; (8004a4c <drawBossKey+0xbc>)
 80049fc:	f001 fe3a 	bl	8006674 <puts>
	printf("	uart_clear();\n");
 8004a00:	4813      	ldr	r0, [pc, #76]	; (8004a50 <drawBossKey+0xc0>)
 8004a02:	f001 fe37 	bl	8006674 <puts>
	printf("}\n");
 8004a06:	4813      	ldr	r0, [pc, #76]	; (8004a54 <drawBossKey+0xc4>)
 8004a08:	f001 fe34 	bl	8006674 <puts>
}
 8004a0c:	bf00      	nop
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	08007b84 	.word	0x08007b84
 8004a14:	08007bac 	.word	0x08007bac
 8004a18:	08007bc8 	.word	0x08007bc8
 8004a1c:	08007bd8 	.word	0x08007bd8
 8004a20:	08007bf8 	.word	0x08007bf8
 8004a24:	08007c08 	.word	0x08007c08
 8004a28:	08007c24 	.word	0x08007c24
 8004a2c:	08007c30 	.word	0x08007c30
 8004a30:	08007c4c 	.word	0x08007c4c
 8004a34:	08007c5c 	.word	0x08007c5c
 8004a38:	08007c64 	.word	0x08007c64
 8004a3c:	08007c68 	.word	0x08007c68
 8004a40:	08007c88 	.word	0x08007c88
 8004a44:	08007c98 	.word	0x08007c98
 8004a48:	08007cac 	.word	0x08007cac
 8004a4c:	08007cb8 	.word	0x08007cb8
 8004a50:	08007cc4 	.word	0x08007cc4
 8004a54:	08007cd4 	.word	0x08007cd4

08004a58 <createBulletNode>:
>>>>>>> Stashed changes

#include "linkedList.h"



bulletNode_t* createBulletNode(bullet_t bullet) {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004438:	b084      	sub	sp, #16
 800443a:	b5b0      	push	{r4, r5, r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	f107 0418 	add.w	r4, r7, #24
 8004444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8004448:	201c      	movs	r0, #28
 800444a:	f001 f921 	bl	8005690 <malloc>
 800444e:	4603      	mov	r3, r0
 8004450:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	461d      	mov	r5, r3
 8004456:	f107 0418 	add.w	r4, r7, #24
 800445a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800445c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004462:	e885 0003 	stmia.w	r5, {r0, r1}
    newNode->nextBulletAddress = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
    return newNode;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004478:	b004      	add	sp, #16
 800447a:	4770      	bx	lr

0800447c <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 800447c:	b084      	sub	sp, #16
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af02      	add	r7, sp, #8
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	f107 001c 	add.w	r0, r7, #28
 800448a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 800448e:	466a      	mov	r2, sp
 8004490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004494:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004498:	e882 0003 	stmia.w	r2, {r0, r1}
 800449c:	f107 031c 	add.w	r3, r7, #28
 80044a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a2:	f7ff ffc9 	bl	8004438 <createBulletNode>
 80044a6:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <appendBullet+0x3c>
        *head = newNode;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	601a      	str	r2, [r3, #0]
=======
 8004128:	b084      	sub	sp, #16
 800412a:	b5b0      	push	{r4, r5, r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	f107 0418 	add.w	r4, r7, #24
 8004134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8004138:	2020      	movs	r0, #32
 800413a:	f001 fc23 	bl	8005984 <malloc>
 800413e:	4603      	mov	r3, r0
 8004140:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	461d      	mov	r5, r3
 8004146:	f107 0418 	add.w	r4, r7, #24
 800414a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800414c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004152:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	61da      	str	r2, [r3, #28]
    return newNode;
 800415c:	687b      	ldr	r3, [r7, #4]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004168:	b004      	add	sp, #16
 800416a:	4770      	bx	lr

0800416c <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 800416c:	b084      	sub	sp, #16
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b089      	sub	sp, #36	; 0x24
 8004172:	af04      	add	r7, sp, #16
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800417a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 800417e:	466c      	mov	r4, sp
 8004180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004184:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800418c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004192:	f7ff ffc9 	bl	8004128 <createBulletNode>
 8004196:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d103      	bne.n	80041a8 <appendBullet+0x3c>
        *head = newNode;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8004a58:	b084      	sub	sp, #16
 8004a5a:	b5b0      	push	{r4, r5, r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	f107 0418 	add.w	r4, r7, #24
 8004a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bulletNode_t* newNode = (bulletNode_t*)malloc(sizeof(bulletNode_t));
 8004a68:	2020      	movs	r0, #32
 8004a6a:	f001 fca5 	bl	80063b8 <malloc>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	607b      	str	r3, [r7, #4]
    newNode->bullet = bullet;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	461d      	mov	r5, r3
 8004a76:	f107 0418 	add.w	r4, r7, #24
 8004a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    newNode->nextBulletAddress = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	61da      	str	r2, [r3, #28]
    return newNode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004a98:	b004      	add	sp, #16
 8004a9a:	4770      	bx	lr

08004a9c <appendBullet>:


void appendBullet(bulletNode_t** head, bullet_t bullet) {
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	b590      	push	{r4, r7, lr}
 8004aa0:	b089      	sub	sp, #36	; 0x24
 8004aa2:	af04      	add	r7, sp, #16
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    bulletNode_t* newNode = createBulletNode(bullet);
 8004aae:	466c      	mov	r4, sp
 8004ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ab4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ac2:	f7ff ffc9 	bl	8004a58 <createBulletNode>
 8004ac6:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <appendBullet+0x3c>
        *head = newNode;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        while (current->nextBulletAddress != NULL) {
            current = current->nextBulletAddress;
        }
        current->nextBulletAddress = newNode;
    }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80044b6:	e00d      	b.n	80044d4 <appendBullet+0x58>
        bulletNode_t* current = *head;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80044be:	e002      	b.n	80044c6 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f8      	bne.n	80044c0 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	619a      	str	r2, [r3, #24]
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044de:	b004      	add	sp, #16
 80044e0:	4770      	bx	lr

080044e2 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 80044ec:	2008      	movs	r0, #8
 80044ee:	f001 f8cf 	bl	8005690 <malloc>
 80044f2:	4603      	mov	r3, r0
 80044f4:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 8004516:	e00a      	b.n	800452e <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	605a      	str	r2, [r3, #4]
			break;
 8004526:	e006      	b.n	8004536 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f1      	bne.n	8004518 <appendEnemy+0x36>
	}
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	f040 809b 	bne.w	8004696 <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fd32 	bl	8002fd2 <fpToInt>
 800456e:	4604      	mov	r4, r0
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fd2a 	bl	8002fd2 <fpToInt>
 800457e:	4603      	mov	r3, r0
 8004580:	0fda      	lsrs	r2, r3, #31
 8004582:	4413      	add	r3, r2
 8004584:	105b      	asrs	r3, r3, #1
 8004586:	4619      	mov	r1, r3
 8004588:	4620      	mov	r0, r4
 800458a:	f7fd fbeb 	bl	8001d64 <gotoxy>
		printf("       ");
 800458e:	4845      	ldr	r0, [pc, #276]	; (80046a4 <deleteEnemyNode+0x164>)
 8004590:	f001 f940 	bl	8005814 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fd18 	bl	8002fd2 <fpToInt>
 80045a2:	4604      	mov	r4, r0
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fd10 	bl	8002fd2 <fpToInt>
 80045b2:	4603      	mov	r3, r0
 80045b4:	3302      	adds	r3, #2
 80045b6:	0fda      	lsrs	r2, r3, #31
 80045b8:	4413      	add	r3, r2
 80045ba:	105b      	asrs	r3, r3, #1
 80045bc:	4619      	mov	r1, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fd fbd0 	bl	8001d64 <gotoxy>
		printf("       ");
 80045c4:	4837      	ldr	r0, [pc, #220]	; (80046a4 <deleteEnemyNode+0x164>)
 80045c6:	f001 f925 	bl	8005814 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]
		free(enemy);
 80045d4:	6838      	ldr	r0, [r7, #0]
 80045d6:	f001 f863 	bl	80056a0 <free>
		return;
 80045da:	e05f      	b.n	800469c <deleteEnemyNode+0x15c>
=======
 80041a6:	e00d      	b.n	80041c4 <appendBullet+0x58>
        bulletNode_t* current = *head;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80041ae:	e002      	b.n	80041b6 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f8      	bne.n	80041b0 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	61da      	str	r2, [r3, #28]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80041ce:	b004      	add	sp, #16
 80041d0:	4770      	bx	lr

080041d2 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 80041dc:	2008      	movs	r0, #8
 80041de:	f001 fbd1 	bl	8005984 <malloc>
 80041e2:	4603      	mov	r3, r0
 80041e4:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 8004206:	e00a      	b.n	800421e <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	605a      	str	r2, [r3, #4]
			break;
 8004216:	e006      	b.n	8004226 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <appendEnemy+0x36>
	}
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	f040 809b 	bne.w	8004386 <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fc0f 	bl	8002a7c <fpToInt>
 800425e:	4604      	mov	r4, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fc07 	bl	8002a7c <fpToInt>
 800426e:	4603      	mov	r3, r0
 8004270:	0fda      	lsrs	r2, r3, #31
 8004272:	4413      	add	r3, r2
 8004274:	105b      	asrs	r3, r3, #1
 8004276:	4619      	mov	r1, r3
 8004278:	4620      	mov	r0, r4
 800427a:	f7fd f929 	bl	80014d0 <gotoxy>
		printf("       ");
 800427e:	4845      	ldr	r0, [pc, #276]	; (8004394 <deleteEnemyNode+0x164>)
 8004280:	f001 fc42 	bl	8005b08 <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fbf5 	bl	8002a7c <fpToInt>
 8004292:	4604      	mov	r4, r0
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fbed 	bl	8002a7c <fpToInt>
 80042a2:	4603      	mov	r3, r0
 80042a4:	3302      	adds	r3, #2
 80042a6:	0fda      	lsrs	r2, r3, #31
 80042a8:	4413      	add	r3, r2
 80042aa:	105b      	asrs	r3, r3, #1
 80042ac:	4619      	mov	r1, r3
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7fd f90e 	bl	80014d0 <gotoxy>
		printf("       ");
 80042b4:	4837      	ldr	r0, [pc, #220]	; (8004394 <deleteEnemyNode+0x164>)
 80042b6:	f001 fc27 	bl	8005b08 <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	605a      	str	r2, [r3, #4]
		free(enemy);
 80042c4:	6838      	ldr	r0, [r7, #0]
 80042c6:	f001 fb65 	bl	8005994 <free>
		return;
 80042ca:	e05f      	b.n	800438c <deleteEnemyNode+0x15c>
>>>>>>> Stashed changes
=======
 8004ad6:	e00d      	b.n	8004af4 <appendBullet+0x58>
        bulletNode_t* current = *head;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004ade:	e002      	b.n	8004ae6 <appendBullet+0x4a>
            current = current->nextBulletAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	60fb      	str	r3, [r7, #12]
        while (current->nextBulletAddress != NULL) {
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f8      	bne.n	8004ae0 <appendBullet+0x44>
        current->nextBulletAddress = newNode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	61da      	str	r2, [r3, #28]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004afe:	b004      	add	sp, #16
 8004b00:	4770      	bx	lr

08004b02 <appendEnemy>:

void appendEnemy(gameState_t* gameState, enemy_t* enemy){
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
	enemyNode_t* newEnemy = malloc(sizeof(enemyNode_t));
 8004b0c:	2008      	movs	r0, #8
 8004b0e:	f001 fc53 	bl	80063b8 <malloc>
 8004b12:	4603      	mov	r3, r0
 8004b14:	60bb      	str	r3, [r7, #8]
	newEnemy->enemy = enemy;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	601a      	str	r2, [r3, #0]
	newEnemy->nextEnemyNode = 0;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]

	enemyNode_t* thisNode = gameState->enemyLL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]
	if(gameState->enemyLL == NULL){
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10e      	bne.n	8004b4e <appendEnemy+0x4c>
		gameState->enemyLL = newEnemy;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	605a      	str	r2, [r3, #4]
	}
	while(thisNode != NULL){
 8004b36:	e00a      	b.n	8004b4e <appendEnemy+0x4c>
		if(thisNode->nextEnemyNode == NULL){
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <appendEnemy+0x46>
			thisNode->nextEnemyNode = newEnemy;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	605a      	str	r2, [r3, #4]
			break;
 8004b46:	e006      	b.n	8004b56 <appendEnemy+0x54>
		}
		thisNode = thisNode->nextEnemyNode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
	while(thisNode != NULL){
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f1      	bne.n	8004b38 <appendEnemy+0x36>
	}
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <deleteEnemyNode>:

void deleteEnemyNode(gameState_t* gameState, enemyNode_t* enemy){
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	enemyNode_t* preNode = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
	enemyNode_t* thisNode = gameState->enemyLL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60bb      	str	r3, [r7, #8]

	if(gameState->enemyLL == enemy){
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	f040 809b 	bne.w	8004cb6 <deleteEnemyNode+0x156>
		gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fbfb 	bl	8003384 <fpToInt>
 8004b8e:	4604      	mov	r4, r0
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fbf3 	bl	8003384 <fpToInt>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	0fda      	lsrs	r2, r3, #31
 8004ba2:	4413      	add	r3, r2
 8004ba4:	105b      	asrs	r3, r3, #1
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fd f87f 	bl	8001cac <gotoxy>
		printf("       ");
 8004bae:	4845      	ldr	r0, [pc, #276]	; (8004cc4 <deleteEnemyNode+0x164>)
 8004bb0:	f001 fcc4 	bl	800653c <iprintf>
		gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fbe1 	bl	8003384 <fpToInt>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe fbd9 	bl	8003384 <fpToInt>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	0fda      	lsrs	r2, r3, #31
 8004bd8:	4413      	add	r3, r2
 8004bda:	105b      	asrs	r3, r3, #1
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7fd f864 	bl	8001cac <gotoxy>
		printf("       ");
 8004be4:	4837      	ldr	r0, [pc, #220]	; (8004cc4 <deleteEnemyNode+0x164>)
 8004be6:	f001 fca9 	bl	800653c <iprintf>
		gameState->enemyLL = gameState->enemyLL->nextEnemyNode;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	605a      	str	r2, [r3, #4]
		free(enemy);
 8004bf4:	6838      	ldr	r0, [r7, #0]
 8004bf6:	f001 fbe7 	bl	80063c8 <free>
		return;
 8004bfa:	e05f      	b.n	8004cbc <deleteEnemyNode+0x15c>
>>>>>>> Stashed changes
	}

	while(thisNode != NULL){
		if(thisNode == enemy){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d153      	bne.n	800468c <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fcf0 	bl	8002fd2 <fpToInt>
 80045f2:	4604      	mov	r4, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fce8 	bl	8002fd2 <fpToInt>
 8004602:	4603      	mov	r3, r0
 8004604:	0fda      	lsrs	r2, r3, #31
 8004606:	4413      	add	r3, r2
 8004608:	105b      	asrs	r3, r3, #1
 800460a:	4619      	mov	r1, r3
 800460c:	4620      	mov	r0, r4
 800460e:	f7fd fba9 	bl	8001d64 <gotoxy>
			printf("       ");
 8004612:	4824      	ldr	r0, [pc, #144]	; (80046a4 <deleteEnemyNode+0x164>)
 8004614:	f001 f8fe 	bl	8005814 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fcd6 	bl	8002fd2 <fpToInt>
 8004626:	4604      	mov	r4, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fcce 	bl	8002fd2 <fpToInt>
 8004636:	4603      	mov	r3, r0
 8004638:	3302      	adds	r3, #2
 800463a:	0fda      	lsrs	r2, r3, #31
 800463c:	4413      	add	r3, r2
 800463e:	105b      	asrs	r3, r3, #1
 8004640:	4619      	mov	r1, r3
 8004642:	4620      	mov	r0, r4
 8004644:	f7fd fb8e 	bl	8001d64 <gotoxy>
			printf("       ");
 8004648:	4816      	ldr	r0, [pc, #88]	; (80046a4 <deleteEnemyNode+0x164>)
 800464a:	f001 f8e3 	bl	8005814 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f81f 	bl	80056a0 <free>
			free(thisNode->enemy->position);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 f819 	bl	80056a0 <free>
			free(thisNode->enemy->velocity);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f001 f813 	bl	80056a0 <free>
			free(thisNode->enemy);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f80e 	bl	80056a0 <free>
			free(thisNode);
 8004684:	68b8      	ldr	r0, [r7, #8]
 8004686:	f001 f80b 	bl	80056a0 <free>
			return;
 800468a:	e007      	b.n	800469c <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d19f      	bne.n	80045dc <deleteEnemyNode+0x9c>
	}
}
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	08007170 	.word	0x08007170

080046a8 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d03c      	beq.n	8004734 <deleteBulletNode+0x8c>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d039      	beq.n	8004734 <deleteBulletNode+0x8c>
=======
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d153      	bne.n	800437c <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fbcd 	bl	8002a7c <fpToInt>
 80042e2:	4604      	mov	r4, r0
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fbc5 	bl	8002a7c <fpToInt>
 80042f2:	4603      	mov	r3, r0
 80042f4:	0fda      	lsrs	r2, r3, #31
 80042f6:	4413      	add	r3, r2
 80042f8:	105b      	asrs	r3, r3, #1
 80042fa:	4619      	mov	r1, r3
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7fd f8e7 	bl	80014d0 <gotoxy>
			printf("       ");
 8004302:	4824      	ldr	r0, [pc, #144]	; (8004394 <deleteEnemyNode+0x164>)
 8004304:	f001 fc00 	bl	8005b08 <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fbb3 	bl	8002a7c <fpToInt>
 8004316:	4604      	mov	r4, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fbab 	bl	8002a7c <fpToInt>
 8004326:	4603      	mov	r3, r0
 8004328:	3302      	adds	r3, #2
 800432a:	0fda      	lsrs	r2, r3, #31
 800432c:	4413      	add	r3, r2
 800432e:	105b      	asrs	r3, r3, #1
 8004330:	4619      	mov	r1, r3
 8004332:	4620      	mov	r0, r4
 8004334:	f7fd f8cc 	bl	80014d0 <gotoxy>
			printf("       ");
 8004338:	4816      	ldr	r0, [pc, #88]	; (8004394 <deleteEnemyNode+0x164>)
 800433a:	f001 fbe5 	bl	8005b08 <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fb21 	bl	8005994 <free>
			free(thisNode->enemy->position);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fb1b 	bl	8005994 <free>
			free(thisNode->enemy->velocity);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fb15 	bl	8005994 <free>
			free(thisNode->enemy);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f001 fb10 	bl	8005994 <free>
			free(thisNode);
 8004374:	68b8      	ldr	r0, [r7, #8]
 8004376:	f001 fb0d 	bl	8005994 <free>
			return;
 800437a:	e007      	b.n	800438c <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d19f      	bne.n	80042cc <deleteEnemyNode+0x9c>
	}
}
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}
 8004392:	bf00      	nop
 8004394:	08007298 	.word	0x08007298

08004398 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03c      	beq.n	8004424 <deleteBulletNode+0x8c>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d039      	beq.n	8004424 <deleteBulletNode+0x8c>
>>>>>>> Stashed changes
=======
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d153      	bne.n	8004cac <deleteEnemyNode+0x14c>
			gotoxy(fpToInt(enemy->enemy->position->x), fpToInt(enemy->enemy->position->y)/yScale);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fbb9 	bl	8003384 <fpToInt>
 8004c12:	4604      	mov	r4, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fbb1 	bl	8003384 <fpToInt>
 8004c22:	4603      	mov	r3, r0
 8004c24:	0fda      	lsrs	r2, r3, #31
 8004c26:	4413      	add	r3, r2
 8004c28:	105b      	asrs	r3, r3, #1
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7fd f83d 	bl	8001cac <gotoxy>
			printf("       ");
 8004c32:	4824      	ldr	r0, [pc, #144]	; (8004cc4 <deleteEnemyNode+0x164>)
 8004c34:	f001 fc82 	bl	800653c <iprintf>
			gotoxy(fpToInt(enemy->enemy->position->x), (fpToInt(enemy->enemy->position->y) + 1 * yScale)/yScale);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fb9f 	bl	8003384 <fpToInt>
 8004c46:	4604      	mov	r4, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe fb97 	bl	8003384 <fpToInt>
 8004c56:	4603      	mov	r3, r0
 8004c58:	3302      	adds	r3, #2
 8004c5a:	0fda      	lsrs	r2, r3, #31
 8004c5c:	4413      	add	r3, r2
 8004c5e:	105b      	asrs	r3, r3, #1
 8004c60:	4619      	mov	r1, r3
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7fd f822 	bl	8001cac <gotoxy>
			printf("       ");
 8004c68:	4816      	ldr	r0, [pc, #88]	; (8004cc4 <deleteEnemyNode+0x164>)
 8004c6a:	f001 fc67 	bl	800653c <iprintf>
			preNode->nextEnemyNode = thisNode->nextEnemyNode;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]
			free(thisNode->enemy->nextPosition);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fba3 	bl	80063c8 <free>
			free(thisNode->enemy->position);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fb9d 	bl	80063c8 <free>
			free(thisNode->enemy->velocity);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fb97 	bl	80063c8 <free>
			free(thisNode->enemy);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fb92 	bl	80063c8 <free>
			free(thisNode);
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	f001 fb8f 	bl	80063c8 <free>
			return;
 8004caa:	e007      	b.n	8004cbc <deleteEnemyNode+0x15c>
		}
		preNode = thisNode;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
		thisNode = thisNode->nextEnemyNode;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60bb      	str	r3, [r7, #8]
	while(thisNode != NULL){
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d19f      	bne.n	8004bfc <deleteEnemyNode+0x9c>
	}
}
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08007cd8 	.word	0x08007cd8

08004cc8 <deleteBulletNode>:

void deleteBulletNode(bulletNode_t** head, bulletNode_t* nodeToDelete) {
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]

    if (*head == NULL || nodeToDelete == NULL) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d03c      	beq.n	8004d54 <deleteBulletNode+0x8c>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d039      	beq.n	8004d54 <deleteBulletNode+0x8c>
>>>>>>> Stashed changes
        return;
    }

    gotoxy(fpToInt(nodeToDelete->bullet.position.x), fpToInt(nodeToDelete->bullet.position.y)/yScale);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fc84 	bl	8002fd2 <fpToInt>
 80046ca:	4604      	mov	r4, r0
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fc7e 	bl	8002fd2 <fpToInt>
 80046d6:	4603      	mov	r3, r0
 80046d8:	0fda      	lsrs	r2, r3, #31
 80046da:	4413      	add	r3, r2
 80046dc:	105b      	asrs	r3, r3, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7fd fb3f 	bl	8001d64 <gotoxy>
    printf(" ");
 80046e6:	2020      	movs	r0, #32
 80046e8:	f001 f8ac 	bl	8005844 <putchar>

    if (*head == nodeToDelete) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 80046fe:	6838      	ldr	r0, [r7, #0]
 8004700:	f000 ffce 	bl	80056a0 <free>
        return;
 8004704:	e017      	b.n	8004736 <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 800470c:	e002      	b.n	8004714 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <deleteBulletNode+0x7c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d1f4      	bne.n	800470e <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	619a      	str	r2, [r3, #24]
    free(nodeToDelete);
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f000 ffb7 	bl	80056a0 <free>
 8004732:	e000      	b.n	8004736 <deleteBulletNode+0x8e>
        return;
 8004734:	bf00      	nop
}
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bd90      	pop	{r4, r7, pc}

0800473c <initVariables>:
#include "graphics.h"
#include "MoonGravity.h"
=======
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fb4d 	bl	8003384 <fpToInt>
 8004cea:	4604      	mov	r4, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fb47 	bl	8003384 <fpToInt>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	0fda      	lsrs	r2, r3, #31
 8004cfa:	4413      	add	r3, r2
 8004cfc:	105b      	asrs	r3, r3, #1
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fc ffd3 	bl	8001cac <gotoxy>
    printf(" ");
 8004d06:	2020      	movs	r0, #32
 8004d08:	f001 fc30 	bl	800656c <putchar>

    if (*head == nodeToDelete) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d107      	bne.n	8004d26 <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 8004d1e:	6838      	ldr	r0, [r7, #0]
 8004d20:	f001 fb52 	bl	80063c8 <free>
        return;
 8004d24:	e017      	b.n	8004d56 <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004d2c:	e002      	b.n	8004d34 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <deleteBulletNode+0x7c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1f4      	bne.n	8004d2e <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f001 fb3b 	bl	80063c8 <free>
 8004d52:	e000      	b.n	8004d56 <deleteBulletNode+0x8e>
        return;
 8004d54:	bf00      	nop
}
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}

08004d5c <initVariables>:
#include "powerup.h"
#include "sound.h"
>>>>>>> Stashed changes

#define framePeriod 4 //time in centiseconds deciding how often game frame is redrawn. 4 results in 25 fps

void initVariables(gameState_t* gameState){
<<<<<<< Updated upstream
 800473c:	b5b0      	push	{r4, r5, r7, lr}
 800473e:	b08c      	sub	sp, #48	; 0x30
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(2), intToFp(42*yScale)}, {intToFp(2), intToFp(42*yScale)}, 1, 20, 0};
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
 8004754:	615a      	str	r2, [r3, #20]
 8004756:	2002      	movs	r0, #2
 8004758:	f7fe fc26 	bl	8002fa8 <intToFp>
 800475c:	4603      	mov	r3, r0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	2054      	movs	r0, #84	; 0x54
 8004762:	f7fe fc21 	bl	8002fa8 <intToFp>
 8004766:	4603      	mov	r3, r0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	2002      	movs	r0, #2
 800476c:	f7fe fc1c 	bl	8002fa8 <intToFp>
 8004770:	4603      	mov	r3, r0
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	2054      	movs	r0, #84	; 0x54
 8004776:	f7fe fc17 	bl	8002fa8 <intToFp>
 800477a:	4603      	mov	r3, r0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004784:	2314      	movs	r3, #20
 8004786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 800478a:	4a37      	ldr	r2, [pc, #220]	; (8004868 <initVariables+0x12c>)
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	4611      	mov	r1, r2
 8004794:	8019      	strh	r1, [r3, #0]
 8004796:	3302      	adds	r3, #2
 8004798:	0c12      	lsrs	r2, r2, #16
 800479a:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 80047a8:	2028      	movs	r0, #40	; 0x28
 80047aa:	f000 ff71 	bl	8005690 <malloc>
 80047ae:	4603      	mov	r3, r0
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	position_t pos = {0,0};
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
	nuke->position = pos;
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	461a      	mov	r2, r3
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047c6:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	3308      	adds	r3, #8
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d6:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	2200      	movs	r2, #0
 80047de:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2200      	movs	r2, #0
 80047e4:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f4:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f103 040c 	add.w	r4, r3, #12
 8004834:	f107 0514 	add.w	r5, r7, #20
 8004838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800483a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800483c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004840:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3308      	adds	r3, #8
 8004850:	f107 0210 	add.w	r2, r7, #16
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	4611      	mov	r1, r2
 8004858:	8019      	strh	r1, [r3, #0]
 800485a:	3302      	adds	r3, #2
 800485c:	0c12      	lsrs	r2, r2, #16
 800485e:	701a      	strb	r2, [r3, #0]
	//TODO: continue to initialize everything
}
 8004860:	bf00      	nop
 8004862:	3730      	adds	r7, #48	; 0x30
 8004864:	46bd      	mov	sp, r7
 8004866:	bdb0      	pop	{r4, r5, r7, pc}
 8004868:	08007178 	.word	0x08007178

0800486c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	gotoxy(fpToInt(gameState->spaceship.position.x),fpToInt(gameState->spaceship.position.y)/yScale); //TODO
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe fbaa 	bl	8002fd2 <fpToInt>
 800487e:	4604      	mov	r4, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fba4 	bl	8002fd2 <fpToInt>
 800488a:	4603      	mov	r3, r0
 800488c:	0fda      	lsrs	r2, r3, #31
 800488e:	4413      	add	r3, r2
 8004890:	105b      	asrs	r3, r3, #1
 8004892:	4619      	mov	r1, r3
 8004894:	4620      	mov	r0, r4
 8004896:	f7fd fa65 	bl	8001d64 <gotoxy>
	printf(" ");
 800489a:	2020      	movs	r0, #32
 800489c:	f000 ffd2 	bl	8005844 <putchar>
	gotoxy(fpToInt(gameState->spaceship.nextPosition.x),fpToInt(gameState->spaceship.nextPosition.y)/yScale); //TODO
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fb94 	bl	8002fd2 <fpToInt>
 80048aa:	4604      	mov	r4, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe fb8e 	bl	8002fd2 <fpToInt>
 80048b6:	4603      	mov	r3, r0
 80048b8:	0fda      	lsrs	r2, r3, #31
 80048ba:	4413      	add	r3, r2
 80048bc:	105b      	asrs	r3, r3, #1
 80048be:	4619      	mov	r1, r3
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7fd fa4f 	bl	8001d64 <gotoxy>
	printf("A");
 80048c6:	2041      	movs	r0, #65	; 0x41
 80048c8:	f000 ffbc 	bl	8005844 <putchar>
	gameState->spaceship.position=gameState->spaceship.nextPosition;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	330c      	adds	r3, #12
 80048d2:	3214      	adds	r2, #20
 80048d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048d8:	e883 0003 	stmia.w	r3, {r0, r1}
	drawEnemy(gameState);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fe febf 	bl	8003660 <drawEnemy>
	drawBullets(gameState);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd fc90 	bl	8002208 <drawBullets>
	drawMoon(gameState->moon.x, gameState->moon.y);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7a1a      	ldrb	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7a5b      	ldrb	r3, [r3, #9]
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe fcfe 	bl	80032f4 <drawMoon>
	drawNuke(gameState);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fa4f 	bl	8003d9c <drawNuke>
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}
	...

08004908 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d113      	bne.n	8004942 <checkIfDead+0x3a>
		gameState->activeScreen = 3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		uint16_t oldScore = readFromFlash(0x0800F800);
 8004922:	480a      	ldr	r0, [pc, #40]	; (800494c <checkIfDead+0x44>)
 8004924:	f7fe f9fb 	bl	8002d1e <readFromFlash>
 8004928:	4603      	mov	r3, r0
 800492a:	81fb      	strh	r3, [r7, #14]
		if(gameState->score > oldScore){
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	89fa      	ldrh	r2, [r7, #14]
 8004932:	429a      	cmp	r2, r3
 8004934:	d205      	bcs.n	8004942 <checkIfDead+0x3a>
			writeToFlash(gameState->score, 0x0800F800);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	4904      	ldr	r1, [pc, #16]	; (800494c <checkIfDead+0x44>)
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe f9d5 	bl	8002cec <writeToFlash>
		}
	}
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	0800f800 	.word	0x0800f800

08004950 <readInput>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8004958:	f7fd f81a 	bl	8001990 <uart_get_char>
 800495c:	4603      	mov	r3, r0
 800495e:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d107      	bne.n	8004976 <readInput+0x26>
		gameState->direction = 1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <readInput+0x90>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b61      	cmp	r3, #97	; 0x61
 800497a:	d107      	bne.n	800498c <readInput+0x3c>
		gameState->direction = -1;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <readInput+0x90>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b66      	cmp	r3, #102	; 0x66
 8004990:	d117      	bne.n	80049c2 <readInput+0x72>
		if(gameState->activeScreen != 4){
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004998:	2b04      	cmp	r3, #4
 800499a:	d00c      	beq.n	80049b6 <readInput+0x66>
			clrscr();
 800499c:	f7fd f9d2 	bl	8001d44 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80049b4:	e005      	b.n	80049c2 <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <readInput+0x90>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d903      	bls.n	80049d8 <readInput+0x88>
		gameState->direction = 0;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200001cc 	.word	0x200001cc

080049e4 <main>:

int main(void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b098      	sub	sp, #96	; 0x60
 80049e8:	af00      	add	r7, sp, #0
=======
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fb61 	bl	8002a7c <fpToInt>
 80043ba:	4604      	mov	r4, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fb5b 	bl	8002a7c <fpToInt>
 80043c6:	4603      	mov	r3, r0
 80043c8:	0fda      	lsrs	r2, r3, #31
 80043ca:	4413      	add	r3, r2
 80043cc:	105b      	asrs	r3, r3, #1
 80043ce:	4619      	mov	r1, r3
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7fd f87d 	bl	80014d0 <gotoxy>
    printf(" ");
 80043d6:	2020      	movs	r0, #32
 80043d8:	f001 fbae 	bl	8005b38 <putchar>

    if (*head == nodeToDelete) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d107      	bne.n	80043f6 <deleteBulletNode+0x5e>
        *head = nodeToDelete->nextBulletAddress;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
        free(nodeToDelete);
 80043ee:	6838      	ldr	r0, [r7, #0]
 80043f0:	f001 fad0 	bl	8005994 <free>
        return;
 80043f4:	e017      	b.n	8004426 <deleteBulletNode+0x8e>
    }

    bulletNode_t* current = *head;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 80043fc:	e002      	b.n	8004404 <deleteBulletNode+0x6c>
        current = current->nextBulletAddress;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	60fb      	str	r3, [r7, #12]
    while (current != NULL && current->nextBulletAddress != nodeToDelete) {
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <deleteBulletNode+0x7c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d1f4      	bne.n	80043fe <deleteBulletNode+0x66>
    }
    current->nextBulletAddress = nodeToDelete->nextBulletAddress;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	61da      	str	r2, [r3, #28]
    free(nodeToDelete);
 800441c:	6838      	ldr	r0, [r7, #0]
 800441e:	f001 fab9 	bl	8005994 <free>
 8004422:	e000      	b.n	8004426 <deleteBulletNode+0x8e>
        return;
 8004424:	bf00      	nop
}
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}

0800442c <initVariables>:
const sound_t sounds[][10] = {
		{{500, 50}, {1000,50}},
		{{500,50}, {1000,50}, {1500, 50}}
};

void initVariables(gameState_t* gameState){
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, {intToFp(3), intToFp(40*yScale)}, 1, 20, 0};
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
 8004444:	615a      	str	r2, [r3, #20]
 8004446:	2003      	movs	r0, #3
 8004448:	f7fe fb03 	bl	8002a52 <intToFp>
 800444c:	4603      	mov	r3, r0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	2050      	movs	r0, #80	; 0x50
 8004452:	f7fe fafe 	bl	8002a52 <intToFp>
 8004456:	4603      	mov	r3, r0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	2003      	movs	r0, #3
 800445c:	f7fe faf9 	bl	8002a52 <intToFp>
 8004460:	4603      	mov	r3, r0
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	2050      	movs	r0, #80	; 0x50
 8004466:	f7fe faf4 	bl	8002a52 <intToFp>
 800446a:	4603      	mov	r3, r0
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004474:	2314      	movs	r3, #20
 8004476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 800447a:	4a3b      	ldr	r2, [pc, #236]	; (8004568 <initVariables+0x13c>)
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	4611      	mov	r1, r2
 8004484:	8019      	strh	r1, [r3, #0]
 8004486:	3302      	adds	r3, #2
 8004488:	0c12      	lsrs	r2, r2, #16
 800448a:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 8004498:	2028      	movs	r0, #40	; 0x28
 800449a:	f001 fa73 	bl	8005984 <malloc>
 800449e:	4603      	mov	r3, r0
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	position_t pos = {0,0};
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
	nuke->position = pos;
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	461a      	mov	r2, r3
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044b6:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	3308      	adds	r3, #8
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044c6:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2200      	movs	r2, #0
 80044ce:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	2200      	movs	r2, #0
 80044d4:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e4:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->btnSelected=0; //start game
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gameState->isDead=0;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gameState->score=0;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a
	gameState->cityLives=3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gameState->spaceship= initSpaceship;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 040c 	add.w	r4, r3, #12
 8004524:	f107 0514 	add.w	r5, r7, #20
 8004528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004530:	e884 0003 	stmia.w	r4, {r0, r1}
	gameState->bossMode = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	gameState->moon = moon;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3308      	adds	r3, #8
 8004540:	f107 0210 	add.w	r2, r7, #16
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	4611      	mov	r1, r2
 8004548:	8019      	strh	r1, [r3, #0]
 800454a:	3302      	adds	r3, #2
 800454c:	0c12      	lsrs	r2, r2, #16
 800454e:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	659a      	str	r2, [r3, #88]	; 0x58
	gameState->powerup.isVisible=0;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//TODO: continue to initialize everything
}
 800455e:	bf00      	nop
 8004560:	3730      	adds	r7, #48	; 0x30
 8004562:	46bd      	mov	sp, r7
 8004564:	bdb0      	pop	{r4, r5, r7, pc}
 8004566:	bf00      	nop
 8004568:	080072a0 	.word	0x080072a0

0800456c <drawScreen>:


void drawScreen(gameState_t* gameState) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 ffcb 	bl	8005510 <drawSpaceship>
	drawEnemy(gameState);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe fdc4 	bl	8003108 <drawEnemy>
	drawBullets(gameState);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fd faac 	bl	8001ade <drawBullets>
	drawPowerup(gameState);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fe60 	bl	800524c <drawPowerup>
	drawhearth(gameState);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fe fd39 	bl	8003004 <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7a1a      	ldrb	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7a5b      	ldrb	r3, [r3, #9]
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7fe fbfe 	bl	8002d9e <drawMoon>
	drawNuke(gameState);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fa72 	bl	8003a8c <drawNuke>
}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <checkIfDead>:
	}
	return 0;
	uart_clear();
}

void checkIfDead(gameState_t* gameState){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d113      	bne.n	80045ea <checkIfDead+0x3a>
		gameState->activeScreen = 3;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		uint16_t oldScore = readFromFlash(0x0800F800);
 80045ca:	480a      	ldr	r0, [pc, #40]	; (80045f4 <checkIfDead+0x44>)
 80045cc:	f7fe f8a1 	bl	8002712 <readFromFlash>
 80045d0:	4603      	mov	r3, r0
 80045d2:	81fb      	strh	r3, [r7, #14]
		if(gameState->score > oldScore){
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	89fa      	ldrh	r2, [r7, #14]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d205      	bcs.n	80045ea <checkIfDead+0x3a>
			writeToFlash(gameState->score, 0x0800F800);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	4904      	ldr	r1, [pc, #16]	; (80045f4 <checkIfDead+0x44>)
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe f87b 	bl	80026e0 <writeToFlash>
		}
	}
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	0800f800 	.word	0x0800f800

080045f8 <readInput>:

//TODO: Måske find på noget bedre her??? Det lagger lidt
void readInput(gameState_t* gameState){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8004600:	f7fc fd7c 	bl	80010fc <uart_get_char>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
	if(c == 'd'){
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d107      	bne.n	800461e <readInput+0x26>
		gameState->direction = 1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <readInput+0x90>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'a'){
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b61      	cmp	r3, #97	; 0x61
 8004622:	d107      	bne.n	8004634 <readInput+0x3c>
		gameState->direction = -1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gameState->lastKeyPressTime = runtime;
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <readInput+0x90>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(c == 'f'){
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b66      	cmp	r3, #102	; 0x66
 8004638:	d117      	bne.n	800466a <readInput+0x72>
		if(gameState->activeScreen != 4){
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004640:	2b04      	cmp	r3, #4
 8004642:	d00c      	beq.n	800465e <readInput+0x66>
			clrscr();
 8004644:	f7fc ff34 	bl	80014b0 <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			gameState->activeScreen = 4;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2204      	movs	r2, #4
 8004658:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800465c:	e005      	b.n	800466a <readInput+0x72>
		}else{
			gameState->activeScreen = gameState->lastScreen;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	}
	if(runtime - gameState->lastKeyPressTime > 5){
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <readInput+0x90>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b05      	cmp	r3, #5
 8004676:	d903      	bls.n	8004680 <readInput+0x88>
		gameState->direction = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200001c8 	.word	0x200001c8

0800468c <main>:

int main(void) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b0a0      	sub	sp, #128	; 0x80
 8004690:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8004d5c:	b5b0      	push	{r4, r5, r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d64:	2003      	movs	r0, #3
 8004d66:	f7fe faf8 	bl	800335a <intToFp>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	2050      	movs	r0, #80	; 0x50
 8004d70:	f7fe faf3 	bl	800335a <intToFp>
 8004d74:	4603      	mov	r3, r0
 8004d76:	61fb      	str	r3, [r7, #28]
			{intToFp(3), intToFp(40*yScale)}, //position
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f7fe faee 	bl	800335a <intToFp>
 8004d7e:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d80:	623b      	str	r3, [r7, #32]
			{intToFp(3), intToFp(40*yScale)}, //position
 8004d82:	2050      	movs	r0, #80	; 0x50
 8004d84:	f7fe fae9 	bl	800335a <intToFp>
 8004d88:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
			{intToFp(3), intToFp(40*yScale)}, //next Position
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	f7fe fae4 	bl	800335a <intToFp>
 8004d92:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
			{intToFp(3), intToFp(40*yScale)}, //next Position
 8004d96:	2050      	movs	r0, #80	; 0x50
 8004d98:	f7fe fadf 	bl	800335a <intToFp>
 8004d9c:	4603      	mov	r3, r0
	spaceship_t initSpaceship = {{intToFp(3), intToFp(40*yScale)}, //previous position
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			1, 0}; //Number of parts, powerups
	moon_t moon = {70,20*yScale,100};// (x, y, mass)
 8004dac:	4a40      	ldr	r2, [pc, #256]	; (8004eb0 <initVariables+0x154>)
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	4611      	mov	r1, r2
 8004db6:	8019      	strh	r1, [r3, #0]
 8004db8:	3302      	adds	r3, #2
 8004dba:	0c12      	lsrs	r2, r2, #16
 8004dbc:	701a      	strb	r2, [r3, #0]
	
	gameState->enemyLL = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
	gameState->bulletLL = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

	nuke_t* nuke = malloc(sizeof(nuke_t));
 8004dca:	2028      	movs	r0, #40	; 0x28
 8004dcc:	f001 faf4 	bl	80063b8 <malloc>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
	position_t pos = {0,0};
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
	nuke->position = pos;
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	461a      	mov	r2, r3
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004de8:	e882 0003 	stmia.w	r2, {r0, r1}
	nuke->nextPosition = pos;
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	3308      	adds	r3, #8
 8004df0:	f107 020c 	add.w	r2, r7, #12
 8004df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004df8:	e883 0003 	stmia.w	r3, {r0, r1}
	//nuke->velocity = {0,0};
	nuke->isDeployed = 0;
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	2200      	movs	r2, #0
 8004e00:	761a      	strb	r2, [r3, #24]
	nuke->readyState = 0;
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	2200      	movs	r2, #0
 8004e06:	765a      	strb	r2, [r3, #25]
	gameState->nuke = nuke;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
	gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e16:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 1;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2020 	strb.w	r2, [r3, #32]


	gameState->activeScreen=0; //menu screen
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gameState->difficulty=1;   // medium (if changed here, update also definition of diffBtn)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	gameState->btnSelected=0; //start game
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	gameState->isDead=0;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	gameState->score=0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	85da      	strh	r2, [r3, #46]	; 0x2e
	gameState->cityLives=3;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gameState->spaceship= initSpaceship;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f103 040c 	add.w	r4, r3, #12
 8004e56:	f107 0518 	add.w	r5, r7, #24
 8004e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gameState->bossMode = 0;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	gameState->moon = moon;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3308      	adds	r3, #8
 8004e72:	f107 0214 	add.w	r2, r7, #20
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	0c12      	lsrs	r2, r2, #16
 8004e80:	701a      	strb	r2, [r3, #0]
	gameState->powerup.lastUseTime=0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
	gameState->powerup.isVisible=0;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	gameState->soundIndex = 0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	gameState->soundTime = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	665a      	str	r2, [r3, #100]	; 0x64
	gameState->soundToPlay = 0;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	//TODO: continue to initialize everything
}
 8004ea6:	bf00      	nop
 8004ea8:	3738      	adds	r7, #56	; 0x38
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	08007ce0 	.word	0x08007ce0

08004eb4 <drawScreen>:


void drawScreen(gameState_t* gameState) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	drawSpaceship(gameState);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 f841 	bl	8005f44 <drawSpaceship>
	drawEnemy(gameState);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fe fda4 	bl	8003a10 <drawEnemy>
	drawBullets(gameState);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fd f9ff 	bl	80022cc <drawBullets>
	drawPowerup(gameState);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fe3d 	bl	8005b4e <drawPowerup>
	drawhearth(gameState);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fe fd19 	bl	800390c <drawhearth>
	drawMoon(gameState->moon.x, gameState->moon.y);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7a1a      	ldrb	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7a5b      	ldrb	r3, [r3, #9]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fe fbde 	bl	80036a6 <drawMoon>
	drawNuke(gameState);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fa66 	bl	80043bc <drawNuke>
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <checkIfDead>:

void checkIfDead(gameState_t* gameState){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

	if(gameState->cityLives == 0){
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <checkIfDead+0x3a>
		gameState->activeScreen = 3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		uint16_t oldScore = readFromFlash(0x0800F800);
 8004f12:	480a      	ldr	r0, [pc, #40]	; (8004f3c <checkIfDead+0x44>)
 8004f14:	f7fd fff5 	bl	8002f02 <readFromFlash>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	81fb      	strh	r3, [r7, #14]
		if(gameState->score > oldScore){
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f20:	89fa      	ldrh	r2, [r7, #14]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d205      	bcs.n	8004f32 <checkIfDead+0x3a>
			writeToFlash(gameState->score, 0x0800F800);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2a:	4904      	ldr	r1, [pc, #16]	; (8004f3c <checkIfDead+0x44>)
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fd ffcf 	bl	8002ed0 <writeToFlash>
		}
	}
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800f800 	.word	0x0800f800

08004f40 <readInput>:

void readInput(gameState_t* gameState){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	char c = uart_get_char();
 8004f48:	f7fc fcc6 	bl	80018d8 <uart_get_char>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]
	if(c == 'f'){
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b66      	cmp	r3, #102	; 0x66
 8004f54:	d117      	bne.n	8004f86 <readInput+0x46>
		if(gameState->activeScreen != 4){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d00c      	beq.n	8004f7a <readInput+0x3a>
			clrscr();
 8004f60:	f7fc fe94 	bl	8001c8c <clrscr>
			gameState->lastScreen = gameState->activeScreen;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			gameState->activeScreen = 4;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		}else{
			gameState->activeScreen = gameState->lastScreen;
		}
	}
}
 8004f78:	e005      	b.n	8004f86 <readInput+0x46>
			gameState->activeScreen = gameState->lastScreen;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <main>:

int main(void) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0a2      	sub	sp, #136	; 0x88
 8004f94:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	gameState_t gameState;
	const button_t startBtn = {75,15,"START"};
	const button_t diffBtn = {68,20,"DIFFICULTY: MEDIUM"};
	const button_t helpBtn = {75,25,"HELP"};
	button_t btnList[] = {startBtn, diffBtn, helpBtn}; //always only 3 buttons!
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80049ea:	4ad5      	ldr	r2, [pc, #852]	; (8004d40 <main+0x35c>)
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80049f8:	4ad2      	ldr	r2, [pc, #840]	; (8004d44 <main+0x360>)
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a02:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a06:	4ad0      	ldr	r2, [pc, #832]	; (8004d48 <main+0x364>)
 8004a08:	f107 0318 	add.w	r3, r7, #24
 8004a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a10:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8004a14:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8004a18:	f7fd f85e 	bl	8001ad8 <uart_init>
	initVariables(&gameState);
 8004a1c:	f107 0320 	add.w	r3, r7, #32
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fe8b 	bl	800473c <initVariables>
	initTimer();
 8004a26:	f7fd fd9b 	bl	8002560 <initTimer>
	initJoystick();
 8004a2a:	f7fd fc79 	bl	8002320 <initJoystick>
	initRGB();
 8004a2e:	f7fe f82d 	bl	8002a8c <initRGB>
	I2C_init();
 8004a32:	f7fd fead 	bl	8002790 <I2C_init>
	analogConfigPorts();
 8004a36:	f7fd ff63 	bl	8002900 <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 8004a3a:	4ac4      	ldr	r2, [pc, #784]	; (8004d4c <main+0x368>)
 8004a3c:	1d3b      	adds	r3, r7, #4
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	4611      	mov	r1, r2
 8004a42:	8019      	strh	r1, [r3, #0]
 8004a44:	3302      	adds	r3, #2
 8004a46:	0c12      	lsrs	r2, r2, #16
 8004a48:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe f905 	bl	8002c5c <RGBColor>
	srand(readPotentiometer());   //RNG
 8004a52:	f7fd fff9 	bl	8002a48 <readPotentiometer>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ff7f 	bl	800595c <srand>

	while(1){
		switch(gameState.activeScreen){
 8004a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d8fb      	bhi.n	8004a5e <main+0x7a>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <main+0x88>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a81 	.word	0x08004a81
 8004a70:	08004bff 	.word	0x08004bff
 8004a74:	08004ce7 	.word	0x08004ce7
 8004a78:	08004d1d 	.word	0x08004d1d
 8004a7c:	08004da3 	.word	0x08004da3
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8004a80:	f7fd f960 	bl	8001d44 <clrscr>
			drawWindow();
 8004a84:	f000 fa42 	bl	8004f0c <drawWindow>
			drawbackground(); // stars in background
 8004a88:	f7fe fb42 	bl	8003110 <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8004a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a90:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fc2c 	bl	80032f4 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 8004a9c:	f107 0220 	add.w	r2, r7, #32
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f9f6 	bl	8004e98 <drawMenuScreen>

			while(gameState.activeScreen==0){
 8004aac:	e0a1      	b.n	8004bf2 <main+0x20e>
				readInput(&gameState);
 8004aae:	f107 0320 	add.w	r3, r7, #32
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff4c 	bl	8004950 <readInput>
				if(downIsPressed()){
 8004ab8:	f7fd fd24 	bl	8002504 <downIsPressed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d025      	beq.n	8004b0e <main+0x12a>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8004ac2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004acc:	4413      	add	r3, r2
 8004ace:	3b58      	subs	r3, #88	; 0x58
 8004ad0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ad4:	f000 f9c0 	bl	8004e58 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8004ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	4b9c      	ldr	r3, [pc, #624]	; (8004d50 <main+0x36c>)
 8004ae0:	fb83 3102 	smull	r3, r1, r3, r2
 8004ae4:	17d3      	asrs	r3, r2, #31
 8004ae6:	1ac9      	subs	r1, r1, r3
 8004ae8:	460b      	mov	r3, r1
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	440b      	add	r3, r1
 8004aee:	1ad1      	subs	r1, r2, r3
 8004af0:	b2cb      	uxtb	r3, r1
 8004af2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8004af6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b00:	4413      	add	r3, r2
 8004b02:	3b58      	subs	r3, #88	; 0x58
 8004b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b08:	f000 f986 	bl	8004e18 <drawBtnAsSelected>
 8004b0c:	e028      	b.n	8004b60 <main+0x17c>
				}
				else if(upIsPressed()){
 8004b0e:	f7fd fccb 	bl	80024a8 <upIsPressed>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d023      	beq.n	8004b60 <main+0x17c>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8004b18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b22:	4413      	add	r3, r2
 8004b24:	3b58      	subs	r3, #88	; 0x58
 8004b26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b2a:	f000 f995 	bl	8004e58 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 8004b2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <main+0x15a>
 8004b36:	2302      	movs	r3, #2
 8004b38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004b3c:	e005      	b.n	8004b4a <main+0x166>
					else gameState.btnSelected=gameState.btnSelected-1;
 8004b3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 8004b4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b54:	4413      	add	r3, r2
 8004b56:	3b58      	subs	r3, #88	; 0x58
 8004b58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b5c:	f000 f95c 	bl	8004e18 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8004b60:	f7fd fc74 	bl	800244c <centerIsPressed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d043      	beq.n	8004bf2 <main+0x20e>
					if(gameState.btnSelected==0){ //START BUTTON
 8004b6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <main+0x196>
						gameState.activeScreen=1; //Game screen
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8004b78:	e03b      	b.n	8004bf2 <main+0x20e>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8004b7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d130      	bne.n	8004be4 <main+0x200>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8004b82:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	4b71      	ldr	r3, [pc, #452]	; (8004d50 <main+0x36c>)
 8004b8a:	fb83 3102 	smull	r3, r1, r3, r2
 8004b8e:	17d3      	asrs	r3, r2, #31
 8004b90:	1ac9      	subs	r1, r1, r3
 8004b92:	460b      	mov	r3, r1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	440b      	add	r3, r1
 8004b98:	1ad1      	subs	r1, r2, r3
 8004b9a:	b2cb      	uxtb	r3, r1
 8004b9c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8004ba0:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <main+0x360>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	330f      	adds	r3, #15
 8004ba6:	4a67      	ldr	r2, [pc, #412]	; (8004d44 <main+0x360>)
 8004ba8:	7852      	ldrb	r2, [r2, #1]
 8004baa:	3201      	adds	r2, #1
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd f8d8 	bl	8001d64 <gotoxy>
						if(gameState.difficulty==0){
 8004bb4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <main+0x1e0>
							printf("EASY  ");
 8004bbc:	4865      	ldr	r0, [pc, #404]	; (8004d54 <main+0x370>)
 8004bbe:	f000 fe29 	bl	8005814 <iprintf>
 8004bc2:	e016      	b.n	8004bf2 <main+0x20e>
						} else if(gameState.difficulty==1){
 8004bc4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d103      	bne.n	8004bd4 <main+0x1f0>
							printf("MEDIUM");
 8004bcc:	4862      	ldr	r0, [pc, #392]	; (8004d58 <main+0x374>)
 8004bce:	f000 fe21 	bl	8005814 <iprintf>
 8004bd2:	e00e      	b.n	8004bf2 <main+0x20e>
						} else if(gameState.difficulty==2){
 8004bd4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d10a      	bne.n	8004bf2 <main+0x20e>
							printf("HARD  ");
 8004bdc:	485f      	ldr	r0, [pc, #380]	; (8004d5c <main+0x378>)
 8004bde:	f000 fe19 	bl	8005814 <iprintf>
 8004be2:	e006      	b.n	8004bf2 <main+0x20e>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8004be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d102      	bne.n	8004bf2 <main+0x20e>
						gameState.activeScreen=2;// help screen
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 8004bf2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f43f af59 	beq.w	8004aae <main+0xca>
=======
 8004692:	4ad7      	ldr	r2, [pc, #860]	; (80049f0 <main+0x364>)
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800469c:	e883 0003 	stmia.w	r3, {r0, r1}
 80046a0:	4ad4      	ldr	r2, [pc, #848]	; (80049f4 <main+0x368>)
 80046a2:	f107 0310 	add.w	r3, r7, #16
 80046a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80046ae:	4ad2      	ldr	r2, [pc, #840]	; (80049f8 <main+0x36c>)
 80046b0:	f107 0318 	add.w	r3, r7, #24
 80046b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046b8:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 80046bc:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 80046c0:	f7fc fdc0 	bl	8001244 <uart_init>
	initVariables(&gameState);
 80046c4:	f107 0320 	add.w	r3, r7, #32
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff feaf 	bl	800442c <initVariables>
	initJoystick();
 80046ce:	f7fd fa91 	bl	8001bf4 <initJoystick>
	initTimer();
 80046d2:	f7fd fbaf 	bl	8001e34 <initTimer>
	initBuzzerPin();
 80046d6:	f7fd fc4f 	bl	8001f78 <initBuzzerPin>
	initRGB();
 80046da:	f7fd fed1 	bl	8002480 <initRGB>
	I2C_init();
 80046de:	f7fd fd51 	bl	8002184 <I2C_init>
	analogConfigPorts();
 80046e2:	f7fd fe07 	bl	80022f4 <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 80046e6:	4ac5      	ldr	r2, [pc, #788]	; (80049fc <main+0x370>)
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4611      	mov	r1, r2
 80046ee:	8019      	strh	r1, [r3, #0]
 80046f0:	3302      	adds	r3, #2
 80046f2:	0c12      	lsrs	r2, r2, #16
 80046f4:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd ffa9 	bl	8002650 <RGBColor>
	srand(readPotentiometer());   //RNG
 80046fe:	f7fd fe9d 	bl	800243c <readPotentiometer>
 8004702:	4603      	mov	r3, r0
 8004704:	4618      	mov	r0, r3
 8004706:	f001 faa3 	bl	8005c50 <srand>

	while(1){
		switch(gameState.activeScreen){
 800470a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800470e:	2b04      	cmp	r3, #4
 8004710:	d8fb      	bhi.n	800470a <main+0x7e>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <main+0x8c>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800472d 	.word	0x0800472d
 800471c:	080048ad 	.word	0x080048ad
 8004720:	080049b7 	.word	0x080049b7
 8004724:	08004a19 	.word	0x08004a19
 8004728:	08004a69 	.word	0x08004a69
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 800472c:	f7fc fec0 	bl	80014b0 <clrscr>
			drawWindow(0);
 8004730:	2000      	movs	r0, #0
 8004732:	f000 fa55 	bl	8004be0 <drawWindow>
			drawbackground(); // stars in background
 8004736:	f7fe fa40 	bl	8002bba <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800473a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800473e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fb2a 	bl	8002d9e <drawMoon>
			drawMenuScreen(btnList, &gameState);
 800474a:	f107 0220 	add.w	r2, r7, #32
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fa09 	bl	8004b6c <drawMenuScreen>

			while(gameState.activeScreen==0){
 800475a:	e0a1      	b.n	80048a0 <main+0x214>
				readInput(&gameState);
 800475c:	f107 0320 	add.w	r3, r7, #32
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff49 	bl	80045f8 <readInput>
				if(downIsPressed()){
 8004766:	f7fd fb37 	bl	8001dd8 <downIsPressed>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d025      	beq.n	80047bc <main+0x130>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8004770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800477a:	4413      	add	r3, r2
 800477c:	3b78      	subs	r3, #120	; 0x78
 800477e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004782:	f000 f9d3 	bl	8004b2c <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8004786:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <main+0x374>)
 800478e:	fb83 3102 	smull	r3, r1, r3, r2
 8004792:	17d3      	asrs	r3, r2, #31
 8004794:	1ac9      	subs	r1, r1, r3
 8004796:	460b      	mov	r3, r1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	440b      	add	r3, r1
 800479c:	1ad1      	subs	r1, r2, r3
 800479e:	b2cb      	uxtb	r3, r1
 80047a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80047a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80047ae:	4413      	add	r3, r2
 80047b0:	3b78      	subs	r3, #120	; 0x78
 80047b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047b6:	f000 f999 	bl	8004aec <drawBtnAsSelected>
 80047ba:	e028      	b.n	800480e <main+0x182>
				}
				else if(upIsPressed()){
 80047bc:	f7fd fade 	bl	8001d7c <upIsPressed>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d023      	beq.n	800480e <main+0x182>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80047c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80047d0:	4413      	add	r3, r2
 80047d2:	3b78      	subs	r3, #120	; 0x78
 80047d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047d8:	f000 f9a8 	bl	8004b2c <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80047dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <main+0x160>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80047ea:	e005      	b.n	80047f8 <main+0x16c>
					else gameState.btnSelected=gameState.btnSelected-1;
 80047ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80047f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004802:	4413      	add	r3, r2
 8004804:	3b78      	subs	r3, #120	; 0x78
 8004806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800480a:	f000 f96f 	bl	8004aec <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 800480e:	f7fd fa87 	bl	8001d20 <centerIsPressed>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d043      	beq.n	80048a0 <main+0x214>
					if(gameState.btnSelected==0){ //START BUTTON
 8004818:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <main+0x19c>
						gameState.activeScreen=1; //Game screen
 8004820:	2301      	movs	r3, #1
 8004822:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8004826:	e03b      	b.n	80048a0 <main+0x214>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 8004828:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800482c:	2b01      	cmp	r3, #1
 800482e:	d130      	bne.n	8004892 <main+0x206>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8004830:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <main+0x374>)
 8004838:	fb83 3102 	smull	r3, r1, r3, r2
 800483c:	17d3      	asrs	r3, r2, #31
 800483e:	1ac9      	subs	r1, r1, r3
 8004840:	460b      	mov	r3, r1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	440b      	add	r3, r1
 8004846:	1ad1      	subs	r1, r2, r3
 8004848:	b2cb      	uxtb	r3, r1
 800484a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 800484e:	4b69      	ldr	r3, [pc, #420]	; (80049f4 <main+0x368>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	330f      	adds	r3, #15
 8004854:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <main+0x368>)
 8004856:	7852      	ldrb	r2, [r2, #1]
 8004858:	3201      	adds	r2, #1
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc fe37 	bl	80014d0 <gotoxy>
						if(gameState.difficulty==0){
 8004862:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <main+0x1e6>
							printf("EASY  ");
 800486a:	4866      	ldr	r0, [pc, #408]	; (8004a04 <main+0x378>)
 800486c:	f001 f94c 	bl	8005b08 <iprintf>
 8004870:	e016      	b.n	80048a0 <main+0x214>
						} else if(gameState.difficulty==1){
 8004872:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004876:	2b01      	cmp	r3, #1
 8004878:	d103      	bne.n	8004882 <main+0x1f6>
							printf("MEDIUM");
 800487a:	4863      	ldr	r0, [pc, #396]	; (8004a08 <main+0x37c>)
 800487c:	f001 f944 	bl	8005b08 <iprintf>
 8004880:	e00e      	b.n	80048a0 <main+0x214>
						} else if(gameState.difficulty==2){
 8004882:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004886:	2b02      	cmp	r3, #2
 8004888:	d10a      	bne.n	80048a0 <main+0x214>
							printf("HARD  ");
 800488a:	4860      	ldr	r0, [pc, #384]	; (8004a0c <main+0x380>)
 800488c:	f001 f93c 	bl	8005b08 <iprintf>
 8004890:	e006      	b.n	80048a0 <main+0x214>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8004892:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004896:	2b02      	cmp	r3, #2
 8004898:	d102      	bne.n	80048a0 <main+0x214>
						gameState.activeScreen=2;// help screen
 800489a:	2302      	movs	r3, #2
 800489c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 80048a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f43f af59 	beq.w	800475c <main+0xd0>
>>>>>>> Stashed changes
=======
 8004f96:	4adb      	ldr	r2, [pc, #876]	; (8005304 <main+0x374>)
 8004f98:	1d3b      	adds	r3, r7, #4
 8004f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fa2:	4ad9      	ldr	r2, [pc, #868]	; (8005308 <main+0x378>)
 8004fa4:	f107 030c 	add.w	r3, r7, #12
 8004fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fac:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fb0:	4ad6      	ldr	r2, [pc, #856]	; (800530c <main+0x37c>)
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fba:	e883 0003 	stmia.w	r3, {r0, r1}

	uart_init(512000);
 8004fbe:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8004fc2:	f7fc fd2d 	bl	8001a20 <uart_init>
	initVariables(&gameState);
 8004fc6:	f107 031c 	add.w	r3, r7, #28
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fec6 	bl	8004d5c <initVariables>
	initJoystick();
 8004fd0:	f7fd fa08 	bl	80023e4 <initJoystick>
	initTimer();
 8004fd4:	f7fd fb26 	bl	8002624 <initTimer>
	initBuzzerPin();
 8004fd8:	f7fd fbc6 	bl	8002768 <initBuzzerPin>
	initRGB();
 8004fdc:	f7fd fe48 	bl	8002c70 <initRGB>
	I2C_init();
 8004fe0:	f7fd fcc8 	bl	8002974 <I2C_init>
	analogConfigPorts();
 8004fe4:	f7fd fd7e 	bl	8002ae4 <analogConfigPorts>
	uint8_t color[] = {1,0,0};
 8004fe8:	4ac9      	ldr	r2, [pc, #804]	; (8005310 <main+0x380>)
 8004fea:	463b      	mov	r3, r7
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	4611      	mov	r1, r2
 8004ff0:	8019      	strh	r1, [r3, #0]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	0c12      	lsrs	r2, r2, #16
 8004ff6:	701a      	strb	r2, [r3, #0]
	RGBColor(color);
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd ff20 	bl	8002e40 <RGBColor>
	srand(readPotentiometer());   //RNG
 8005000:	f7fd fe14 	bl	8002c2c <readPotentiometer>
 8005004:	4603      	mov	r3, r0
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fb3c 	bl	8006684 <srand>

	while(1){
		switch(gameState.activeScreen){
 800500c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005010:	2b04      	cmp	r3, #4
 8005012:	d8fb      	bhi.n	800500c <main+0x7c>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <main+0x8c>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005031 	.word	0x08005031
 8005020:	080051af 	.word	0x080051af
 8005024:	080052cb 	.word	0x080052cb
 8005028:	0800532d 	.word	0x0800532d
 800502c:	08005371 	.word	0x08005371
		case 0: //MENU SCREEN ---------------------------------------------------------------------
			clrscr();
 8005030:	f7fc fe2c 	bl	8001c8c <clrscr>
			drawWindow(0);
 8005034:	2000      	movs	r0, #0
 8005036:	f000 fa55 	bl	80054e4 <drawWindow>
			drawbackground(); // stars in background
 800503a:	f7fe fa42 	bl	80034c2 <drawbackground>
			drawMoon(gameState.moon.x, gameState.moon.y);
 800503e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005042:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fb2c 	bl	80036a6 <drawMoon>
			drawMenuScreen(btnList, &gameState);
 800504e:	f107 021c 	add.w	r2, r7, #28
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa0a 	bl	8005470 <drawMenuScreen>

			while(gameState.activeScreen==0){
 800505c:	e0a1      	b.n	80051a2 <main+0x212>
				readInput(&gameState);
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ff6c 	bl	8004f40 <readInput>
				if(downIsPressed()){
 8005068:	f7fd faae 	bl	80025c8 <downIsPressed>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d025      	beq.n	80050be <main+0x12e>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 8005072:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800507c:	4413      	add	r3, r2
 800507e:	3b84      	subs	r3, #132	; 0x84
 8005080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005084:	f000 f9d4 	bl	8005430 <drawBtnAsDeselected>
					gameState.btnSelected=(gameState.btnSelected+1)%3;
 8005088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	4ba1      	ldr	r3, [pc, #644]	; (8005314 <main+0x384>)
 8005090:	fb83 3102 	smull	r3, r1, r3, r2
 8005094:	17d3      	asrs	r3, r2, #31
 8005096:	1ac9      	subs	r1, r1, r3
 8005098:	460b      	mov	r3, r1
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	440b      	add	r3, r1
 800509e:	1ad1      	subs	r1, r2, r3
 80050a0:	b2cb      	uxtb	r3, r1
 80050a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80050a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050b0:	4413      	add	r3, r2
 80050b2:	3b84      	subs	r3, #132	; 0x84
 80050b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050b8:	f000 f99a 	bl	80053f0 <drawBtnAsSelected>
 80050bc:	e028      	b.n	8005110 <main+0x180>
				}
				else if(upIsPressed()){
 80050be:	f7fd fa55 	bl	800256c <upIsPressed>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d023      	beq.n	8005110 <main+0x180>
					drawBtnAsDeselected(btnList[gameState.btnSelected]);
 80050c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050d2:	4413      	add	r3, r2
 80050d4:	3b84      	subs	r3, #132	; 0x84
 80050d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050da:	f000 f9a9 	bl	8005430 <drawBtnAsDeselected>
					if(gameState.btnSelected==0) gameState.btnSelected=2;
 80050de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <main+0x15e>
 80050e6:	2302      	movs	r3, #2
 80050e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80050ec:	e005      	b.n	80050fa <main+0x16a>
					else gameState.btnSelected=gameState.btnSelected-1;
 80050ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					drawBtnAsSelected(btnList[gameState.btnSelected]);
 80050fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005104:	4413      	add	r3, r2
 8005106:	3b84      	subs	r3, #132	; 0x84
 8005108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800510c:	f000 f970 	bl	80053f0 <drawBtnAsSelected>
				}
				if(centerIsPressed()){
 8005110:	f7fd f9fe 	bl	8002510 <centerIsPressed>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d043      	beq.n	80051a2 <main+0x212>
					if(gameState.btnSelected==0){ //START BUTTON
 800511a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <main+0x19a>
						gameState.activeScreen=1; //Game screen
 8005122:	2301      	movs	r3, #1
 8005124:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8005128:	e03b      	b.n	80051a2 <main+0x212>
					}
					else if(gameState.btnSelected==1){ // DIFFICULTY BUTTON
 800512a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800512e:	2b01      	cmp	r3, #1
 8005130:	d130      	bne.n	8005194 <main+0x204>
						gameState.difficulty=(gameState.difficulty+1)%3;
 8005132:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	4b76      	ldr	r3, [pc, #472]	; (8005314 <main+0x384>)
 800513a:	fb83 3102 	smull	r3, r1, r3, r2
 800513e:	17d3      	asrs	r3, r2, #31
 8005140:	1ac9      	subs	r1, r1, r3
 8005142:	460b      	mov	r3, r1
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	440b      	add	r3, r1
 8005148:	1ad1      	subs	r1, r2, r3
 800514a:	b2cb      	uxtb	r3, r1
 800514c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						gotoxy(diffBtn.x+15, diffBtn.y+1);
 8005150:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <main+0x378>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	330f      	adds	r3, #15
 8005156:	4a6c      	ldr	r2, [pc, #432]	; (8005308 <main+0x378>)
 8005158:	7852      	ldrb	r2, [r2, #1]
 800515a:	3201      	adds	r2, #1
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fda4 	bl	8001cac <gotoxy>
						if(gameState.difficulty==0){
 8005164:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <main+0x1e4>
							printf("EASY  ");
 800516c:	486a      	ldr	r0, [pc, #424]	; (8005318 <main+0x388>)
 800516e:	f001 f9e5 	bl	800653c <iprintf>
 8005172:	e016      	b.n	80051a2 <main+0x212>
						} else if(gameState.difficulty==1){
 8005174:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005178:	2b01      	cmp	r3, #1
 800517a:	d103      	bne.n	8005184 <main+0x1f4>
							printf("MEDIUM");
 800517c:	4867      	ldr	r0, [pc, #412]	; (800531c <main+0x38c>)
 800517e:	f001 f9dd 	bl	800653c <iprintf>
 8005182:	e00e      	b.n	80051a2 <main+0x212>
						} else if(gameState.difficulty==2){
 8005184:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005188:	2b02      	cmp	r3, #2
 800518a:	d10a      	bne.n	80051a2 <main+0x212>
							printf("HARD  ");
 800518c:	4864      	ldr	r0, [pc, #400]	; (8005320 <main+0x390>)
 800518e:	f001 f9d5 	bl	800653c <iprintf>
 8005192:	e006      	b.n	80051a2 <main+0x212>
						}
					}
					else if(gameState.btnSelected==2){ // HELP BUTTON
 8005194:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005198:	2b02      	cmp	r3, #2
 800519a:	d102      	bne.n	80051a2 <main+0x212>
						gameState.activeScreen=2;// help screen
 800519c:	2302      	movs	r3, #2
 800519e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==0){
 80051a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f43f af59 	beq.w	800505e <main+0xce>
>>>>>>> Stashed changes
					}
				}
			}
			break;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004bfc:	e0df      	b.n	8004dbe <main+0x3da>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 8004bfe:	f7fd f8a1 	bl	8001d44 <clrscr>
			printf("GAME SCREEN");
 8004c02:	4857      	ldr	r0, [pc, #348]	; (8004d60 <main+0x37c>)
 8004c04:	f000 fe06 	bl	8005814 <iprintf>
			uint32_t frameLastUpdated=0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
			gameState.spaceship.lastShotTime=runtime;
 8004c0c:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <main+0x380>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	643b      	str	r3, [r7, #64]	; 0x40
			drawWindow();
 8004c12:	f000 f97b 	bl	8004f0c <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 8004c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fb67 	bl	80032f4 <drawMoon>
			drawhearth(&gameState);
 8004c26:	f107 0320 	add.w	r3, r7, #32
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fc96 	bl	800355c <drawhearth>
			//drawWindow();
			//gameState.powerUp.lastUseTime = runtime;
			drawCity();
 8004c30:	f7fe fdb6 	bl	80037a0 <drawCity>
			drawScore(&gameState);
 8004c34:	f107 0320 	add.w	r3, r7, #32
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f89b 	bl	8003d74 <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	4a48      	ldr	r2, [pc, #288]	; (8004d64 <main+0x380>)
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
			while(gameState.activeScreen==1){
 8004c46:	e049      	b.n	8004cdc <main+0x2f8>
				readInput(&gameState);
 8004c48:	f107 0320 	add.w	r3, r7, #32
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fe7f 	bl	8004950 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 8004c52:	4b44      	ldr	r3, [pc, #272]	; (8004d64 <main+0x380>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d93e      	bls.n	8004cdc <main+0x2f8>
					readInput(&gameState);
 8004c5e:	f107 0320 	add.w	r3, r7, #32
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fe74 	bl	8004950 <readInput>
					updateSpaceship(&gameState);
 8004c68:	f107 0320 	add.w	r3, r7, #32
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fb07 	bl	8005280 <updateSpaceship>
					spawnEnemy(&gameState);
 8004c72:	f107 0320 	add.w	r3, r7, #32
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe f85e 	bl	8002d38 <spawnEnemy>
					updateEnemy(&gameState);
 8004c7c:	f107 0320 	add.w	r3, r7, #32
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe f8d1 	bl	8002e28 <updateEnemy>
					shootSpaceship(&gameState);
 8004c86:	f107 0320 	add.w	r3, r7, #32
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb2a 	bl	80052e4 <shootSpaceship>
					shootEnemy(&gameState);
 8004c90:	f107 0320 	add.w	r3, r7, #32
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe f8f7 	bl	8002e88 <shootEnemy>
					updateBullets(&gameState);
 8004c9a:	f107 0320 	add.w	r3, r7, #32
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd f93d 	bl	8001f1e <updateBullets>
					detectBulletHit(&gameState);
 8004ca4:	f107 0320 	add.w	r3, r7, #32
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd f9b4 	bl	8002016 <detectBulletHit>
					detectCityHit(&gameState);
 8004cae:	f107 0320 	add.w	r3, r7, #32
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe f94c 	bl	8002f50 <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 8004cb8:	f107 0320 	add.w	r3, r7, #32
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fa9b 	bl	80051f8 <updateNuke>
					checkIfDead(&gameState);
 8004cc2:	f107 0320 	add.w	r3, r7, #32
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fe1e 	bl	8004908 <checkIfDead>
					drawScreen(&gameState);
 8004ccc:	f107 0320 	add.w	r3, r7, #32
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fdcb 	bl	800486c <drawScreen>
					frameLastUpdated=runtime;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <main+0x380>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	65fb      	str	r3, [r7, #92]	; 0x5c
			while(gameState.activeScreen==1){
 8004cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d0b1      	beq.n	8004c48 <main+0x264>
				}
		}
			break;
 8004ce4:	e06b      	b.n	8004dbe <main+0x3da>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 8004ce6:	f7fd f82d 	bl	8001d44 <clrscr>
			drawWindow();
 8004cea:	f000 f90f 	bl	8004f0c <drawWindow>
			drawbackground(); // stars in background
 8004cee:	f7fe fa0f 	bl	8003110 <drawbackground>
			drawHelpScreen();
 8004cf2:	f000 f8f5 	bl	8004ee0 <drawHelpScreen>
			while(gameState.activeScreen==2){
 8004cf6:	e00c      	b.n	8004d12 <main+0x32e>
				readInput(&gameState);
 8004cf8:	f107 0320 	add.w	r3, r7, #32
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fe27 	bl	8004950 <readInput>
				if(centerIsPressed()){
 8004d02:	f7fd fba3 	bl	800244c <centerIsPressed>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <main+0x32e>
					gameState.activeScreen=0;//MENU SCREEN
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 8004d12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d0ee      	beq.n	8004cf8 <main+0x314>
				}
			}
			break;
 8004d1a:	e050      	b.n	8004dbe <main+0x3da>
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8004d1c:	f7fd f812 	bl	8001d44 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d\n", gameState.score);
 8004d20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d24:	4619      	mov	r1, r3
 8004d26:	4810      	ldr	r0, [pc, #64]	; (8004d68 <main+0x384>)
 8004d28:	f000 fd74 	bl	8005814 <iprintf>
			printf("Your highscore is %d", readFromFlash(0x0800F800));
 8004d2c:	480f      	ldr	r0, [pc, #60]	; (8004d6c <main+0x388>)
 8004d2e:	f7fd fff6 	bl	8002d1e <readFromFlash>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4619      	mov	r1, r3
 8004d36:	480e      	ldr	r0, [pc, #56]	; (8004d70 <main+0x38c>)
 8004d38:	f000 fd6c 	bl	8005814 <iprintf>
			while(gameState.activeScreen==3){
 8004d3c:	e02c      	b.n	8004d98 <main+0x3b4>
 8004d3e:	bf00      	nop
 8004d40:	08007240 	.word	0x08007240
 8004d44:	08007248 	.word	0x08007248
 8004d48:	08007250 	.word	0x08007250
 8004d4c:	080071e4 	.word	0x080071e4
 8004d50:	55555556 	.word	0x55555556
 8004d54:	0800717c 	.word	0x0800717c
 8004d58:	08007184 	.word	0x08007184
 8004d5c:	0800718c 	.word	0x0800718c
 8004d60:	08007194 	.word	0x08007194
 8004d64:	200001cc 	.word	0x200001cc
 8004d68:	080071a0 	.word	0x080071a0
 8004d6c:	0800f800 	.word	0x0800f800
 8004d70:	080071cc 	.word	0x080071cc
				readInput(&gameState);
 8004d74:	f107 0320 	add.w	r3, r7, #32
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fde9 	bl	8004950 <readInput>
				if(centerIsPressed()){
 8004d7e:	f7fd fb65 	bl	800244c <centerIsPressed>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <main+0x3b4>
					initVariables(&gameState);
 8004d88:	f107 0320 	add.w	r3, r7, #32
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fcd5 	bl	800473c <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8004d98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d0e9      	beq.n	8004d74 <main+0x390>
				}
			}
			break;
 8004da0:	e00d      	b.n	8004dbe <main+0x3da>
		case 4:
			drawBossKey();
 8004da2:	f7ff fae5 	bl	8004370 <drawBossKey>
			while(1){
				readInput(&gameState);
 8004da6:	f107 0320 	add.w	r3, r7, #32
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fdd0 	bl	8004950 <readInput>
				if(gameState.activeScreen !=4){
 8004db0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d100      	bne.n	8004dba <main+0x3d6>
				readInput(&gameState);
 8004db8:	e7f5      	b.n	8004da6 <main+0x3c2>
					break;
 8004dba:	bf00      	nop
				}
			}
			break;
 8004dbc:	bf00      	nop
		switch(gameState.activeScreen){
 8004dbe:	e64e      	b.n	8004a5e <main+0x7a>

08004dc0 <drawButton>:
=======
 80048aa:	e0eb      	b.n	8004a84 <main+0x3f8>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 80048ac:	f7fc fe00 	bl	80014b0 <clrscr>
			printf("GAME SCREEN");
 80048b0:	4857      	ldr	r0, [pc, #348]	; (8004a10 <main+0x384>)
 80048b2:	f001 f929 	bl	8005b08 <iprintf>
			uint32_t frameLastUpdated=0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	67fb      	str	r3, [r7, #124]	; 0x7c
			gameState.spaceship.lastShotTime=runtime;
 80048ba:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <main+0x388>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	643b      	str	r3, [r7, #64]	; 0x40
			gameState.powerup.lastUseTime = runtime;
 80048c0:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <main+0x388>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	67bb      	str	r3, [r7, #120]	; 0x78
			drawWindow(1);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f000 f98a 	bl	8004be0 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80048cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048d0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fa61 	bl	8002d9e <drawMoon>
			drawhearth(&gameState);
 80048dc:	f107 0320 	add.w	r3, r7, #32
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fb8f 	bl	8003004 <drawhearth>
			//drawWindow();
			gameState.powerup.lastUseTime = runtime;
 80048e6:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <main+0x388>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	67bb      	str	r3, [r7, #120]	; 0x78
			drawCity();
 80048ec:	f7fe fcac 	bl	8003248 <drawCity>
			drawScore(&gameState);
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe ff91 	bl	800381c <drawScore>
//			applyGravity(bullet *bullet, drawMoon *drawMoon);
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 80048fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fc:	4a45      	ldr	r2, [pc, #276]	; (8004a14 <main+0x388>)
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
			while(gameState.activeScreen==1){
 8004902:	e053      	b.n	80049ac <main+0x320>
				readInput(&gameState);
 8004904:	f107 0320 	add.w	r3, r7, #32
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fe75 	bl	80045f8 <readInput>
				if(runtime-frameLastUpdated>=framePeriod){//
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <main+0x388>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d948      	bls.n	80049ac <main+0x320>
					readInput(&gameState);
 800491a:	f107 0320 	add.w	r3, r7, #32
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe6a 	bl	80045f8 <readInput>
					
					spawnEnemy(&gameState);
 8004924:	f107 0320 	add.w	r3, r7, #32
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd ff1f 	bl	800276c <spawnEnemy>
					spawnPowerup(&gameState);
 800492e:	f107 0320 	add.w	r3, r7, #32
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb4e 	bl	8004fd4 <spawnPowerup>

					updateSpaceship(&gameState);
 8004938:	f107 0320 	add.w	r3, r7, #32
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fcc4 	bl	80052ca <updateSpaceship>
					updateEnemy(&gameState);
 8004942:	f107 0320 	add.w	r3, r7, #32
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd ff92 	bl	8002870 <updateEnemy>
					updatePowerup(&gameState);
 800494c:	f107 0320 	add.w	r3, r7, #32
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fba1 	bl	8005098 <updatePowerup>
					shootSpaceship(&gameState);
 8004956:	f107 0320 	add.w	r3, r7, #32
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fd1c 	bl	8005398 <shootSpaceship>
					updateBullets(&gameState);
 8004960:	f107 0320 	add.w	r3, r7, #32
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc fe90 	bl	800168a <updateBullets>

					shootEnemy(&gameState);
 800496a:	f107 0320 	add.w	r3, r7, #32
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd ffae 	bl	80028d0 <shootEnemy>

					detectBulletHit(&gameState);
 8004974:	f107 0320 	add.w	r3, r7, #32
 8004978:	4618      	mov	r0, r3
 800497a:	f7fc ff0a 	bl	8001792 <detectBulletHit>
					detectCityHit(&gameState);
 800497e:	f107 0320 	add.w	r3, r7, #32
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f812 	bl	80029ac <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 8004988:	f107 0320 	add.w	r3, r7, #32
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fadd 	bl	8004f4c <updateNuke>
					checkIfDead(&gameState);
 8004992:	f107 0320 	add.w	r3, r7, #32
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fe0a 	bl	80045b0 <checkIfDead>
					drawScreen(&gameState);
 800499c:	f107 0320 	add.w	r3, r7, #32
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fde3 	bl	800456c <drawScreen>
					frameLastUpdated=runtime;
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <main+0x388>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(gameState.activeScreen==1){
 80049ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d0a7      	beq.n	8004904 <main+0x278>
				}
		}
			break;
 80049b4:	e066      	b.n	8004a84 <main+0x3f8>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80049b6:	f7fc fd7b 	bl	80014b0 <clrscr>
			drawWindow(0);
 80049ba:	2000      	movs	r0, #0
 80049bc:	f000 f910 	bl	8004be0 <drawWindow>
			drawbackground(); // stars in background
 80049c0:	f7fe f8fb 	bl	8002bba <drawbackground>
			drawHelpScreen();
 80049c4:	f000 f8f6 	bl	8004bb4 <drawHelpScreen>
			while(gameState.activeScreen==2){
 80049c8:	e00c      	b.n	80049e4 <main+0x358>
				readInput(&gameState);
 80049ca:	f107 0320 	add.w	r3, r7, #32
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fe12 	bl	80045f8 <readInput>
				if(centerIsPressed()){
 80049d4:	f7fd f9a4 	bl	8001d20 <centerIsPressed>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <main+0x358>
					gameState.activeScreen=0;//MENU SCREEN
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 80049e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d0ee      	beq.n	80049ca <main+0x33e>
				}
			}
			break;
 80049ec:	e04a      	b.n	8004a84 <main+0x3f8>
 80049ee:	bf00      	nop
 80049f0:	08007380 	.word	0x08007380
 80049f4:	08007388 	.word	0x08007388
 80049f8:	08007390 	.word	0x08007390
 80049fc:	08007324 	.word	0x08007324
 8004a00:	55555556 	.word	0x55555556
 8004a04:	080072bc 	.word	0x080072bc
 8004a08:	080072c4 	.word	0x080072c4
 8004a0c:	080072cc 	.word	0x080072cc
 8004a10:	080072d4 	.word	0x080072d4
 8004a14:	200001c8 	.word	0x200001c8
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 8004a18:	f7fc fd4a 	bl	80014b0 <clrscr>
			printf("YOU HELLA DEAD!\n YOU SUCK Your score is %d\n", gameState.score);
 8004a1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a20:	4619      	mov	r1, r3
 8004a22:	4819      	ldr	r0, [pc, #100]	; (8004a88 <main+0x3fc>)
 8004a24:	f001 f870 	bl	8005b08 <iprintf>
			printf("Your highscore is %d", readFromFlash(0x0800F800));
 8004a28:	4818      	ldr	r0, [pc, #96]	; (8004a8c <main+0x400>)
 8004a2a:	f7fd fe72 	bl	8002712 <readFromFlash>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4619      	mov	r1, r3
 8004a32:	4817      	ldr	r0, [pc, #92]	; (8004a90 <main+0x404>)
 8004a34:	f001 f868 	bl	8005b08 <iprintf>
			while(gameState.activeScreen==3){
 8004a38:	e011      	b.n	8004a5e <main+0x3d2>
				readInput(&gameState);
 8004a3a:	f107 0320 	add.w	r3, r7, #32
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fdda 	bl	80045f8 <readInput>
				if(centerIsPressed()){
 8004a44:	f7fd f96c 	bl	8001d20 <centerIsPressed>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <main+0x3d2>
					initVariables(&gameState);
 8004a4e:	f107 0320 	add.w	r3, r7, #32
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fcea 	bl	800442c <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8004a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d0e9      	beq.n	8004a3a <main+0x3ae>
				}
			}
			break;
 8004a66:	e00d      	b.n	8004a84 <main+0x3f8>
		case 4:
			drawBossKey();
 8004a68:	f7ff fafa 	bl	8004060 <drawBossKey>
			while(1){
				readInput(&gameState);
 8004a6c:	f107 0320 	add.w	r3, r7, #32
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fdc1 	bl	80045f8 <readInput>
				if(gameState.activeScreen !=4){
 8004a76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d100      	bne.n	8004a80 <main+0x3f4>
				readInput(&gameState);
 8004a7e:	e7f5      	b.n	8004a6c <main+0x3e0>
					break;
 8004a80:	bf00      	nop
				}
			}
			break;
 8004a82:	bf00      	nop
		switch(gameState.activeScreen){
 8004a84:	e641      	b.n	800470a <main+0x7e>
 8004a86:	bf00      	nop
 8004a88:	080072e0 	.word	0x080072e0
 8004a8c:	0800f800 	.word	0x0800f800
 8004a90:	0800730c 	.word	0x0800730c

08004a94 <drawButton>:
>>>>>>> Stashed changes
=======
 80051ac:	e0ee      	b.n	800538c <main+0x3fc>
		case 1: // GAME SCREEN -----------------------------------------------------------------------
			clrscr();
 80051ae:	f7fc fd6d 	bl	8001c8c <clrscr>
			printf("GAME SCREEN");
 80051b2:	485c      	ldr	r0, [pc, #368]	; (8005324 <main+0x394>)
 80051b4:	f001 f9c2 	bl	800653c <iprintf>
			uint32_t frameLastUpdated=0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			gameState.powerup.lastUseTime = runtime;
 80051be:	4b5a      	ldr	r3, [pc, #360]	; (8005328 <main+0x398>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	67bb      	str	r3, [r7, #120]	; 0x78
			drawWindow(1);
 80051c4:	2001      	movs	r0, #1
 80051c6:	f000 f98d 	bl	80054e4 <drawWindow>
			drawMoon(gameState.moon.x, gameState.moon.y);
 80051ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051ce:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe fa66 	bl	80036a6 <drawMoon>
			drawhearth(&gameState);
 80051da:	f107 031c 	add.w	r3, r7, #28
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fb94 	bl	800390c <drawhearth>
			drawCity();
 80051e4:	f7fe fcb4 	bl	8003b50 <drawCity>

			gameState.powerup.lastUseTime = runtime;
 80051e8:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <main+0x398>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	67bb      	str	r3, [r7, #120]	; 0x78
			drawScore(&gameState);
 80051ee:	f107 031c 	add.w	r3, r7, #28
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe ff96 	bl	8004124 <drawScore>
			gameState.nuke->lastActivationTime = runtime; //Start charing of nuke
 80051f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fa:	4a4b      	ldr	r2, [pc, #300]	; (8005328 <main+0x398>)
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
			gameState.soundTime = runtime;
 8005200:	4b49      	ldr	r3, [pc, #292]	; (8005328 <main+0x398>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(gameState.activeScreen==1){
 8005208:	e05a      	b.n	80052c0 <main+0x330>
				readInput(&gameState);
 800520a:	f107 031c 	add.w	r3, r7, #28
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fe96 	bl	8004f40 <readInput>
				playSound(&gameState);
 8005214:	f107 031c 	add.w	r3, r7, #28
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fcd7 	bl	8005bcc <playSound>
				if(runtime-frameLastUpdated>=framePeriod){//
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <main+0x398>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b03      	cmp	r3, #3
 800522a:	d949      	bls.n	80052c0 <main+0x330>
					readInput(&gameState);
 800522c:	f107 031c 	add.w	r3, r7, #28
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fe85 	bl	8004f40 <readInput>
					
					spawnEnemy(&gameState);
 8005236:	f107 031c 	add.w	r3, r7, #28
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fefc 	bl	8003038 <spawnEnemy>
					spawnPowerup(&gameState);
 8005240:	f107 031c 	add.w	r3, r7, #28
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb41 	bl	80058cc <spawnPowerup>

					updateSpaceship(&gameState);
 800524a:	f107 031c 	add.w	r3, r7, #28
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fd40 	bl	8005cd4 <updateSpaceship>
					updateEnemy(&gameState);
 8005254:	f107 031c 	add.w	r3, r7, #28
 8005258:	4618      	mov	r0, r3
 800525a:	f7fd ff8d 	bl	8003178 <updateEnemy>
					updatePowerup(&gameState);
 800525e:	f107 031c 	add.w	r3, r7, #28
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fb94 	bl	8005990 <updatePowerup>
					shootSpaceship(&gameState);
 8005268:	f107 031c 	add.w	r3, r7, #28
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fdaf 	bl	8005dd0 <shootSpaceship>
					shootEnemy(&gameState);
 8005272:	f107 031c 	add.w	r3, r7, #28
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd ffae 	bl	80031d8 <shootEnemy>
					updateBullets(&gameState);
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	4618      	mov	r0, r3
 8005282:	f7fc fdf0 	bl	8001e66 <updateBullets>


					detectBulletHit(&gameState);
 8005286:	f107 031c 	add.w	r3, r7, #28
 800528a:	4618      	mov	r0, r3
 800528c:	f7fc fe6f 	bl	8001f6e <detectBulletHit>
					detectCityHit(&gameState);
 8005290:	f107 031c 	add.w	r3, r7, #28
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe f80d 	bl	80032b4 <detectCityHit>
//					powerUp(&gameState);
					updateNuke(&gameState);
 800529a:	f107 031c 	add.w	r3, r7, #28
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fad0 	bl	8005844 <updateNuke>
					checkIfDead(&gameState);
 80052a4:	f107 031c 	add.w	r3, r7, #28
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe25 	bl	8004ef8 <checkIfDead>

					drawScreen(&gameState);
 80052ae:	f107 031c 	add.w	r3, r7, #28
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fdfe 	bl	8004eb4 <drawScreen>
					frameLastUpdated=runtime;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <main+0x398>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(gameState.activeScreen==1){
 80052c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d0a0      	beq.n	800520a <main+0x27a>
				}
		}
			break;
 80052c8:	e060      	b.n	800538c <main+0x3fc>
		case 2:// HELP SCREEN ------------------------------------------------------------------------
			clrscr();
 80052ca:	f7fc fcdf 	bl	8001c8c <clrscr>
			drawWindow(0);
 80052ce:	2000      	movs	r0, #0
 80052d0:	f000 f908 	bl	80054e4 <drawWindow>
			drawbackground(); // stars in background
 80052d4:	f7fe f8f5 	bl	80034c2 <drawbackground>
			drawHelpScreen();
 80052d8:	f000 f8ee 	bl	80054b8 <drawHelpScreen>
			while(gameState.activeScreen==2){
 80052dc:	e00c      	b.n	80052f8 <main+0x368>
				readInput(&gameState);
 80052de:	f107 031c 	add.w	r3, r7, #28
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fe2c 	bl	8004f40 <readInput>
				if(centerIsPressed()){
 80052e8:	f7fd f912 	bl	8002510 <centerIsPressed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <main+0x368>
					gameState.activeScreen=0;//MENU SCREEN
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==2){
 80052f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d0ee      	beq.n	80052de <main+0x34e>
				}
			}
			break;
 8005300:	e044      	b.n	800538c <main+0x3fc>
 8005302:	bf00      	nop
 8005304:	08007d7c 	.word	0x08007d7c
 8005308:	08007d84 	.word	0x08007d84
 800530c:	08007d8c 	.word	0x08007d8c
 8005310:	08007d20 	.word	0x08007d20
 8005314:	55555556 	.word	0x55555556
 8005318:	08007ce4 	.word	0x08007ce4
 800531c:	08007cec 	.word	0x08007cec
 8005320:	08007cf4 	.word	0x08007cf4
 8005324:	08007cfc 	.word	0x08007cfc
 8005328:	200001c8 	.word	0x200001c8
		case 3:// GAME OVER SCREEN -------------------------------------------------------------------
			clrscr();
 800532c:	f7fc fcae 	bl	8001c8c <clrscr>
			printf("Your highscore is %d", readFromFlash(0x0800F800));
 8005330:	4817      	ldr	r0, [pc, #92]	; (8005390 <main+0x400>)
 8005332:	f7fd fde6 	bl	8002f02 <readFromFlash>
 8005336:	4603      	mov	r3, r0
 8005338:	4619      	mov	r1, r3
 800533a:	4816      	ldr	r0, [pc, #88]	; (8005394 <main+0x404>)
 800533c:	f001 f8fe 	bl	800653c <iprintf>
			while(gameState.activeScreen==3){
 8005340:	e011      	b.n	8005366 <main+0x3d6>
				readInput(&gameState);
 8005342:	f107 031c 	add.w	r3, r7, #28
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fdfa 	bl	8004f40 <readInput>
				if(centerIsPressed()){
 800534c:	f7fd f8e0 	bl	8002510 <centerIsPressed>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <main+0x3d6>
					initVariables(&gameState);
 8005356:	f107 031c 	add.w	r3, r7, #28
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fcfe 	bl	8004d5c <initVariables>
					gameState.activeScreen=0;//MENU SCREEN
 8005360:	2300      	movs	r3, #0
 8005362:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			while(gameState.activeScreen==3){
 8005366:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800536a:	2b03      	cmp	r3, #3
 800536c:	d0e9      	beq.n	8005342 <main+0x3b2>
				}
			}
			break;
 800536e:	e00d      	b.n	800538c <main+0x3fc>
		case 4:
			drawBossKey();
 8005370:	f7ff fb0e 	bl	8004990 <drawBossKey>
			while(1){
				readInput(&gameState);
 8005374:	f107 031c 	add.w	r3, r7, #28
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fde1 	bl	8004f40 <readInput>
				if(gameState.activeScreen !=4){
 800537e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005382:	2b04      	cmp	r3, #4
 8005384:	d100      	bne.n	8005388 <main+0x3f8>
				readInput(&gameState);
 8005386:	e7f5      	b.n	8005374 <main+0x3e4>
					break;
 8005388:	bf00      	nop
				}
			}
			break;
 800538a:	bf00      	nop
		switch(gameState.activeScreen){
 800538c:	e63e      	b.n	800500c <main+0x7c>
 800538e:	bf00      	nop
 8005390:	0800f800 	.word	0x0800f800
 8005394:	08007d08 	.word	0x08007d08

08005398 <drawButton>:
>>>>>>> Stashed changes
#include "menu.h"




void drawButton(button_t btn){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb f9fe 	bl	80001d0 <strlen>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8004dd8:	783b      	ldrb	r3, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	461c      	mov	r4, r3
 8004de0:	783b      	ldrb	r3, [r7, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	1d5a      	adds	r2, r3, #5
 8004dea:	787b      	ldrb	r3, [r7, #1]
 8004dec:	3302      	adds	r3, #2
 8004dee:	2100      	movs	r1, #0
 8004df0:	9100      	str	r1, [sp, #0]
 8004df2:	4621      	mov	r1, r4
 8004df4:	f7fc ffc8 	bl	8001d88 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8004df8:	783b      	ldrb	r3, [r7, #0]
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	787a      	ldrb	r2, [r7, #1]
 8004dfe:	3201      	adds	r2, #1
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fc ffae 	bl	8001d64 <gotoxy>
	printf(btn.text);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fd02 	bl	8005814 <iprintf>
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}

08004e18 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	463b      	mov	r3, r7
 8004e20:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fb f9d2 	bl	80001d0 <strlen>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8004e30:	783b      	ldrb	r3, [r7, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	461c      	mov	r4, r3
 8004e38:	783b      	ldrb	r3, [r7, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	1d5a      	adds	r2, r3, #5
 8004e42:	787b      	ldrb	r3, [r7, #1]
 8004e44:	3302      	adds	r3, #2
 8004e46:	2101      	movs	r1, #1
 8004e48:	9100      	str	r1, [sp, #0]
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	f7fc ff9c 	bl	8001d88 <drawBox>
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}

08004e58 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	463b      	mov	r3, r7
 8004e60:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb f9b2 	bl	80001d0 <strlen>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8004e70:	783b      	ldrb	r3, [r7, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	787b      	ldrb	r3, [r7, #1]
 8004e76:	461c      	mov	r4, r3
 8004e78:	783b      	ldrb	r3, [r7, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	1d5a      	adds	r2, r3, #5
 8004e82:	787b      	ldrb	r3, [r7, #1]
 8004e84:	3302      	adds	r3, #2
 8004e86:	2100      	movs	r1, #0
 8004e88:	9100      	str	r1, [sp, #0]
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	f7fc ff7c 	bl	8001d88 <drawBox>
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd90      	pop	{r4, r7, pc}

08004e98 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ea8:	f7ff ff8a 	bl	8004dc0 <drawButton>
	drawButton(btnList[1]);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004eb4:	f7ff ff84 	bl	8004dc0 <drawButton>
	drawButton(btnList[2]);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3310      	adds	r3, #16
 8004ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ec0:	f7ff ff7e 	bl	8004dc0 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4413      	add	r3, r2
 8004ed0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ed4:	f7ff ffa0 	bl	8004e18 <drawBtnAsSelected>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <drawHelpScreen>:


void drawHelpScreen(){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8004ee4:	2105      	movs	r1, #5
 8004ee6:	2046      	movs	r0, #70	; 0x46
 8004ee8:	f7fc ff3c 	bl	8001d64 <gotoxy>
	printf("HELP SCREEN");
 8004eec:	4805      	ldr	r0, [pc, #20]	; (8004f04 <drawHelpScreen+0x24>)
 8004eee:	f000 fc91 	bl	8005814 <iprintf>
	gotoxy(60,7);
 8004ef2:	2107      	movs	r1, #7
 8004ef4:	203c      	movs	r0, #60	; 0x3c
 8004ef6:	f7fc ff35 	bl	8001d64 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8004efa:	4803      	ldr	r0, [pc, #12]	; (8004f08 <drawHelpScreen+0x28>)
 8004efc:	f000 fc8a 	bl	8005814 <iprintf>

}
 8004f00:	bf00      	nop
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	0800720c 	.word	0x0800720c
 8004f08:	08007218 	.word	0x08007218

08004f0c <drawWindow>:

void drawWindow(){
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af02      	add	r7, sp, #8
	drawBox(1,1,screenWidth, screenHeight,0);
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	232b      	movs	r3, #43	; 0x2b
 8004f18:	229c      	movs	r2, #156	; 0x9c
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7fc ff33 	bl	8001d88 <drawBox>
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <chargeNuke>:
=======
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fb fb94 	bl	80001d0 <strlen>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8004aac:	783b      	ldrb	r3, [r7, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	787b      	ldrb	r3, [r7, #1]
 8004ab2:	461c      	mov	r4, r3
 8004ab4:	783b      	ldrb	r3, [r7, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	1d5a      	adds	r2, r3, #5
 8004abe:	787b      	ldrb	r3, [r7, #1]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	9100      	str	r1, [sp, #0]
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	f7fc fd14 	bl	80014f4 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 8004acc:	783b      	ldrb	r3, [r7, #0]
 8004ace:	3303      	adds	r3, #3
 8004ad0:	787a      	ldrb	r2, [r7, #1]
 8004ad2:	3201      	adds	r2, #1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc fcfa 	bl	80014d0 <gotoxy>
	printf(btn.text);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f812 	bl	8005b08 <iprintf>
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	463b      	mov	r3, r7
 8004af4:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fb68 	bl	80001d0 <strlen>
 8004b00:	4603      	mov	r3, r0
 8004b02:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8004b04:	783b      	ldrb	r3, [r7, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	787b      	ldrb	r3, [r7, #1]
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	783b      	ldrb	r3, [r7, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	1d5a      	adds	r2, r3, #5
 8004b16:	787b      	ldrb	r3, [r7, #1]
 8004b18:	3302      	adds	r3, #2
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	9100      	str	r1, [sp, #0]
 8004b1e:	4621      	mov	r1, r4
 8004b20:	f7fc fce8 	bl	80014f4 <drawBox>
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	463b      	mov	r3, r7
 8004b34:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fb48 	bl	80001d0 <strlen>
 8004b40:	4603      	mov	r3, r0
 8004b42:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8004b44:	783b      	ldrb	r3, [r7, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	783b      	ldrb	r3, [r7, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	1d5a      	adds	r2, r3, #5
 8004b56:	787b      	ldrb	r3, [r7, #1]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	9100      	str	r1, [sp, #0]
 8004b5e:	4621      	mov	r1, r4
 8004b60:	f7fc fcc8 	bl	80014f4 <drawBox>
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}

08004b6c <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b7c:	f7ff ff8a 	bl	8004a94 <drawButton>
	drawButton(btnList[1]);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3308      	adds	r3, #8
 8004b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b88:	f7ff ff84 	bl	8004a94 <drawButton>
	drawButton(btnList[2]);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3310      	adds	r3, #16
 8004b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b94:	f7ff ff7e 	bl	8004a94 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ba8:	f7ff ffa0 	bl	8004aec <drawBtnAsSelected>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <drawHelpScreen>:


void drawHelpScreen(){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 8004bb8:	2105      	movs	r1, #5
 8004bba:	2046      	movs	r0, #70	; 0x46
 8004bbc:	f7fc fc88 	bl	80014d0 <gotoxy>
	printf("HELP SCREEN");
 8004bc0:	4805      	ldr	r0, [pc, #20]	; (8004bd8 <drawHelpScreen+0x24>)
 8004bc2:	f000 ffa1 	bl	8005b08 <iprintf>
	gotoxy(60,7);
 8004bc6:	2107      	movs	r1, #7
 8004bc8:	203c      	movs	r0, #60	; 0x3c
 8004bca:	f7fc fc81 	bl	80014d0 <gotoxy>
	printf("Tag dig dog sammen mand!");
 8004bce:	4803      	ldr	r0, [pc, #12]	; (8004bdc <drawHelpScreen+0x28>)
 8004bd0:	f000 ff9a 	bl	8005b08 <iprintf>

}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	0800734c 	.word	0x0800734c
 8004bdc:	08007358 	.word	0x08007358

08004be0 <drawWindow>:

void drawWindow(uint8_t isGameWindow){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
	drawBox(1,1,screenWidth, screenHeight,0);
 8004bea:	2300      	movs	r3, #0
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	232b      	movs	r3, #43	; 0x2b
 8004bf0:	229c      	movs	r2, #156	; 0x9c
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f7fc fc7d 	bl	80014f4 <drawBox>
	if(isGameWindow){//bottom line is deleted
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d039      	beq.n	8004c74 <drawWindow+0x94>
		gotoxy(1,screenHeight-1);
 8004c00:	212a      	movs	r1, #42	; 0x2a
 8004c02:	2001      	movs	r0, #1
 8004c04:	f7fc fc64 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c08:	2020      	movs	r0, #32
 8004c0a:	f000 ff95 	bl	8005b38 <putchar>
		gotoxy(1,screenHeight-2);
 8004c0e:	2129      	movs	r1, #41	; 0x29
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fc fc5d 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c16:	2020      	movs	r0, #32
 8004c18:	f000 ff8e 	bl	8005b38 <putchar>
		gotoxy(1,screenHeight-3);
 8004c1c:	2128      	movs	r1, #40	; 0x28
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f7fc fc56 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c24:	2020      	movs	r0, #32
 8004c26:	f000 ff87 	bl	8005b38 <putchar>
		gotoxy(screenWidth,screenHeight-1);
 8004c2a:	212a      	movs	r1, #42	; 0x2a
 8004c2c:	209c      	movs	r0, #156	; 0x9c
 8004c2e:	f7fc fc4f 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c32:	2020      	movs	r0, #32
 8004c34:	f000 ff80 	bl	8005b38 <putchar>
		gotoxy(screenWidth,screenHeight-2);
 8004c38:	2129      	movs	r1, #41	; 0x29
 8004c3a:	209c      	movs	r0, #156	; 0x9c
 8004c3c:	f7fc fc48 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c40:	2020      	movs	r0, #32
 8004c42:	f000 ff79 	bl	8005b38 <putchar>
		gotoxy(screenWidth,screenHeight-3);
 8004c46:	2128      	movs	r1, #40	; 0x28
 8004c48:	209c      	movs	r0, #156	; 0x9c
 8004c4a:	f7fc fc41 	bl	80014d0 <gotoxy>
		printf(" ");
 8004c4e:	2020      	movs	r0, #32
 8004c50:	f000 ff72 	bl	8005b38 <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8004c54:	2301      	movs	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e009      	b.n	8004c6e <drawWindow+0x8e>
			gotoxy(x, screenHeight);
 8004c5a:	212b      	movs	r1, #43	; 0x2b
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7fc fc37 	bl	80014d0 <gotoxy>
			printf(" ");
 8004c62:	2020      	movs	r0, #32
 8004c64:	f000 ff68 	bl	8005b38 <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b9c      	cmp	r3, #156	; 0x9c
 8004c72:	ddf2      	ble.n	8004c5a <drawWindow+0x7a>
=======
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b087      	sub	sp, #28
 800539c:	af02      	add	r7, sp, #8
 800539e:	463b      	mov	r3, r7
 80053a0:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fa ff12 	bl	80001d0 <strlen>
 80053ac:	4603      	mov	r3, r0
 80053ae:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 80053b0:	783b      	ldrb	r3, [r7, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	787b      	ldrb	r3, [r7, #1]
 80053b6:	461c      	mov	r4, r3
 80053b8:	783b      	ldrb	r3, [r7, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	1d5a      	adds	r2, r3, #5
 80053c2:	787b      	ldrb	r3, [r7, #1]
 80053c4:	3302      	adds	r3, #2
 80053c6:	2100      	movs	r1, #0
 80053c8:	9100      	str	r1, [sp, #0]
 80053ca:	4621      	mov	r1, r4
 80053cc:	f7fc fc80 	bl	8001cd0 <drawBox>
	gotoxy(btn.x+3, btn.y+1);
 80053d0:	783b      	ldrb	r3, [r7, #0]
 80053d2:	3303      	adds	r3, #3
 80053d4:	787a      	ldrb	r2, [r7, #1]
 80053d6:	3201      	adds	r2, #1
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fc fc66 	bl	8001cac <gotoxy>
	printf(btn.text);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 f8aa 	bl	800653c <iprintf>
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd90      	pop	{r4, r7, pc}

080053f0 <drawBtnAsSelected>:

void drawBtnAsSelected(button_t btn){
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	463b      	mov	r3, r7
 80053f8:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fa fee6 	bl	80001d0 <strlen>
 8005404:	4603      	mov	r3, r0
 8005406:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 1);
 8005408:	783b      	ldrb	r3, [r7, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	787b      	ldrb	r3, [r7, #1]
 800540e:	461c      	mov	r4, r3
 8005410:	783b      	ldrb	r3, [r7, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	1d5a      	adds	r2, r3, #5
 800541a:	787b      	ldrb	r3, [r7, #1]
 800541c:	3302      	adds	r3, #2
 800541e:	2101      	movs	r1, #1
 8005420:	9100      	str	r1, [sp, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	f7fc fc54 	bl	8001cd0 <drawBox>
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}

08005430 <drawBtnAsDeselected>:

void drawBtnAsDeselected(button_t btn){
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af02      	add	r7, sp, #8
 8005436:	463b      	mov	r3, r7
 8005438:	e883 0003 	stmia.w	r3, {r0, r1}
	int strLength = (int)strlen(btn.text);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fa fec6 	bl	80001d0 <strlen>
 8005444:	4603      	mov	r3, r0
 8005446:	60fb      	str	r3, [r7, #12]
	drawBox(btn.x, btn.y, btn.x+strLength+5, btn.y+2, 0);
 8005448:	783b      	ldrb	r3, [r7, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	787b      	ldrb	r3, [r7, #1]
 800544e:	461c      	mov	r4, r3
 8005450:	783b      	ldrb	r3, [r7, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	1d5a      	adds	r2, r3, #5
 800545a:	787b      	ldrb	r3, [r7, #1]
 800545c:	3302      	adds	r3, #2
 800545e:	2100      	movs	r1, #0
 8005460:	9100      	str	r1, [sp, #0]
 8005462:	4621      	mov	r1, r4
 8005464:	f7fc fc34 	bl	8001cd0 <drawBox>
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <drawMenuScreen>:

void drawMenuScreen(button_t btnList[], gameState_t* gameState){
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	drawButton(btnList[0]);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005480:	f7ff ff8a 	bl	8005398 <drawButton>
	drawButton(btnList[1]);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3308      	adds	r3, #8
 8005488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800548c:	f7ff ff84 	bl	8005398 <drawButton>
	drawButton(btnList[2]);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3310      	adds	r3, #16
 8005494:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005498:	f7ff ff7e 	bl	8005398 <drawButton>
	drawBtnAsSelected(btnList[gameState->btnSelected]);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054ac:	f7ff ffa0 	bl	80053f0 <drawBtnAsSelected>
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <drawHelpScreen>:


void drawHelpScreen(){
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
	gotoxy(70,5);
 80054bc:	2105      	movs	r1, #5
 80054be:	2046      	movs	r0, #70	; 0x46
 80054c0:	f7fc fbf4 	bl	8001cac <gotoxy>
	printf("HELP SCREEN");
 80054c4:	4805      	ldr	r0, [pc, #20]	; (80054dc <drawHelpScreen+0x24>)
 80054c6:	f001 f839 	bl	800653c <iprintf>
	gotoxy(60,7);
 80054ca:	2107      	movs	r1, #7
 80054cc:	203c      	movs	r0, #60	; 0x3c
 80054ce:	f7fc fbed 	bl	8001cac <gotoxy>
	printf("Tag dig dog sammen mand!");
 80054d2:	4803      	ldr	r0, [pc, #12]	; (80054e0 <drawHelpScreen+0x28>)
 80054d4:	f001 f832 	bl	800653c <iprintf>

}
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	08007d48 	.word	0x08007d48
 80054e0:	08007d54 	.word	0x08007d54

080054e4 <drawWindow>:

void drawWindow(uint8_t isGameWindow){
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
	drawBox(1,1,screenWidth, screenHeight,0);
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	232b      	movs	r3, #43	; 0x2b
 80054f4:	229c      	movs	r2, #156	; 0x9c
 80054f6:	2101      	movs	r1, #1
 80054f8:	2001      	movs	r0, #1
 80054fa:	f7fc fbe9 	bl	8001cd0 <drawBox>
	if(isGameWindow){//bottom line is deleted
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d039      	beq.n	8005578 <drawWindow+0x94>
		gotoxy(1,screenHeight-1);
 8005504:	212a      	movs	r1, #42	; 0x2a
 8005506:	2001      	movs	r0, #1
 8005508:	f7fc fbd0 	bl	8001cac <gotoxy>
		printf(" ");
 800550c:	2020      	movs	r0, #32
 800550e:	f001 f82d 	bl	800656c <putchar>
		gotoxy(1,screenHeight-2);
 8005512:	2129      	movs	r1, #41	; 0x29
 8005514:	2001      	movs	r0, #1
 8005516:	f7fc fbc9 	bl	8001cac <gotoxy>
		printf(" ");
 800551a:	2020      	movs	r0, #32
 800551c:	f001 f826 	bl	800656c <putchar>
		gotoxy(1,screenHeight-3);
 8005520:	2128      	movs	r1, #40	; 0x28
 8005522:	2001      	movs	r0, #1
 8005524:	f7fc fbc2 	bl	8001cac <gotoxy>
		printf(" ");
 8005528:	2020      	movs	r0, #32
 800552a:	f001 f81f 	bl	800656c <putchar>
		gotoxy(screenWidth,screenHeight-1);
 800552e:	212a      	movs	r1, #42	; 0x2a
 8005530:	209c      	movs	r0, #156	; 0x9c
 8005532:	f7fc fbbb 	bl	8001cac <gotoxy>
		printf(" ");
 8005536:	2020      	movs	r0, #32
 8005538:	f001 f818 	bl	800656c <putchar>
		gotoxy(screenWidth,screenHeight-2);
 800553c:	2129      	movs	r1, #41	; 0x29
 800553e:	209c      	movs	r0, #156	; 0x9c
 8005540:	f7fc fbb4 	bl	8001cac <gotoxy>
		printf(" ");
 8005544:	2020      	movs	r0, #32
 8005546:	f001 f811 	bl	800656c <putchar>
		gotoxy(screenWidth,screenHeight-3);
 800554a:	2128      	movs	r1, #40	; 0x28
 800554c:	209c      	movs	r0, #156	; 0x9c
 800554e:	f7fc fbad 	bl	8001cac <gotoxy>
		printf(" ");
 8005552:	2020      	movs	r0, #32
 8005554:	f001 f80a 	bl	800656c <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e009      	b.n	8005572 <drawWindow+0x8e>
			gotoxy(x, screenHeight);
 800555e:	212b      	movs	r1, #43	; 0x2b
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7fc fba3 	bl	8001cac <gotoxy>
			printf(" ");
 8005566:	2020      	movs	r0, #32
 8005568:	f001 f800 	bl	800656c <putchar>
		for(int x = 1; x<screenWidth+1;x++){
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b9c      	cmp	r3, #156	; 0x9c
 8005576:	ddf2      	ble.n	800555e <drawWindow+0x7a>
>>>>>>> Stashed changes

		}
	}
}
<<<<<<< Updated upstream
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <chargeNuke>:
>>>>>>> Stashed changes
=======
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <chargeNuke>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include"nuke.h"

void chargeNuke(gameState_t* gameState){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 8004f30:	4a30      	ldr	r2, [pc, #192]	; (8004ff4 <chargeNuke+0xcc>)
 8004f32:	f107 030c 	add.w	r3, r7, #12
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	8019      	strh	r1, [r3, #0]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	0c12      	lsrs	r2, r2, #16
 8004f40:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime < 500){
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <chargeNuke+0xd0>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f52:	d205      	bcs.n	8004f60 <chargeNuke+0x38>
		color[0] = 1;
 8004f54:	2301      	movs	r3, #1
 8004f56:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <chargeNuke+0xd0>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f70:	d905      	bls.n	8004f7e <chargeNuke+0x56>
		color[0] = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <chargeNuke+0xd0>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f8e:	d905      	bls.n	8004f9c <chargeNuke+0x74>
		color[0] = 1;
 8004f90:	2301      	movs	r3, #1
 8004f92:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004f94:	2301      	movs	r3, #1
 8004f96:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <chargeNuke+0xd0>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d909      	bls.n	8004fc4 <chargeNuke+0x9c>
		color[0] = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73bb      	strb	r3, [r7, #14]
		gameState->nuke->readyState = 1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	765a      	strb	r2, [r3, #25]
=======
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 8005588:	4a2d      	ldr	r2, [pc, #180]	; (8005640 <chargeNuke+0xc0>)
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	4611      	mov	r1, r2
 8005592:	8019      	strh	r1, [r3, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	0c12      	lsrs	r2, r2, #16
 8005598:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime < 500){
 800559a:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <chargeNuke+0xc4>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80055aa:	d205      	bcs.n	80055b8 <chargeNuke+0x38>
		color[0] = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 80055b8:	4b22      	ldr	r3, [pc, #136]	; (8005644 <chargeNuke+0xc4>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80055c8:	d905      	bls.n	80055d6 <chargeNuke+0x56>
		color[0] = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <chargeNuke+0xc4>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e6:	d905      	bls.n	80055f4 <chargeNuke+0x74>
		color[0] = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 80055ec:	2301      	movs	r3, #1
 80055ee:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <chargeNuke+0xc4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005604:	4293      	cmp	r3, r2
 8005606:	d912      	bls.n	800562e <chargeNuke+0xae>
		color[0] = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 800560c:	2301      	movs	r3, #1
 800560e:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	73bb      	strb	r3, [r7, #14]
		if(gameState->nuke->readyState == 0) gameState->soundToPlay = 2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	7e5b      	ldrb	r3, [r3, #25]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <chargeNuke+0xa6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		gameState->nuke->readyState = 1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	2201      	movs	r2, #1
 800562c:	765a      	strb	r2, [r3, #25]
>>>>>>> Stashed changes
	}
	uint8_t nullColor[] = {0,0,0};
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	; (8004ff4 <chargeNuke+0xcc>)
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	8019      	strh	r1, [r3, #0]
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	0c12      	lsrs	r2, r2, #16
 8004fd4:	701a      	strb	r2, [r3, #0]
	RGBColor(nullColor);
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fd fe3e 	bl	8002c5c <RGBColor>
	RGBColor(color);
<<<<<<< Updated upstream
 8004fe0:	f107 030c 	add.w	r3, r7, #12
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd fe39 	bl	8002c5c <RGBColor>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	08007234 	.word	0x08007234
 8004ff8:	200001cc 	.word	0x200001cc

08004ffc <detonateNuke>:

void detonateNuke(gameState_t* gameState){
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	gameState->nuke->isDeployed = 0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2200      	movs	r2, #0
 800500a:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2200      	movs	r2, #0
 8005012:	765a      	strb	r2, [r3, #25]

	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd ffd9 	bl	8002fd2 <fpToInt>
 8005020:	4604      	mov	r4, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fd ffd2 	bl	8002fd2 <fpToInt>
 800502e:	4603      	mov	r3, r0
 8005030:	0fda      	lsrs	r2, r3, #31
 8005032:	4413      	add	r3, r2
 8005034:	105b      	asrs	r3, r3, #1
 8005036:	4619      	mov	r1, r3
 8005038:	4620      	mov	r0, r4
 800503a:	f7fc fe93 	bl	8001d64 <gotoxy>
	printf("     ");
 800503e:	483d      	ldr	r0, [pc, #244]	; (8005134 <detonateNuke+0x138>)
 8005040:	f000 fbe8 	bl	8005814 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd ffc1 	bl	8002fd2 <fpToInt>
 8005050:	4604      	mov	r4, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4618      	mov	r0, r3
 800505a:	f7fd ffba 	bl	8002fd2 <fpToInt>
 800505e:	4603      	mov	r3, r0
 8005060:	3302      	adds	r3, #2
 8005062:	0fda      	lsrs	r2, r3, #31
 8005064:	4413      	add	r3, r2
 8005066:	105b      	asrs	r3, r3, #1
 8005068:	4619      	mov	r1, r3
 800506a:	4620      	mov	r0, r4
 800506c:	f7fc fe7a 	bl	8001d64 <gotoxy>
	printf("     ");
 8005070:	4830      	ldr	r0, [pc, #192]	; (8005134 <detonateNuke+0x138>)
 8005072:	f000 fbcf 	bl	8005814 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd ffa8 	bl	8002fd2 <fpToInt>
 8005082:	4604      	mov	r4, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd ffa1 	bl	8002fd2 <fpToInt>
 8005090:	4603      	mov	r3, r0
 8005092:	3304      	adds	r3, #4
 8005094:	0fda      	lsrs	r2, r3, #31
 8005096:	4413      	add	r3, r2
 8005098:	105b      	asrs	r3, r3, #1
 800509a:	4619      	mov	r1, r3
 800509c:	4620      	mov	r0, r4
 800509e:	f7fc fe61 	bl	8001d64 <gotoxy>
	printf("     ");
 80050a2:	4824      	ldr	r0, [pc, #144]	; (8005134 <detonateNuke+0x138>)
 80050a4:	f000 fbb6 	bl	8005814 <iprintf>
	enemyNode_t* current = gameState->enemyLL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
	drawNukeCircle(gameState);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fe ff28 	bl	8003f04 <drawNukeCircle>
	gameState->nuke->lastDetonationTime = runtime;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <detonateNuke+0x13c>)
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2020 	strb.w	r2, [r3, #32]
	while(current != NULL){
 80050c8:	e02c      	b.n	8005124 <detonateNuke+0x128>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fd fffd 	bl	80030ea <fpAbs>
 80050f0:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 80050f2:	4423      	add	r3, r4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fd fff8 	bl	80030ea <fpAbs>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd ff87 	bl	8003014 <fpMultiply>
 8005106:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 8005108:	2023      	movs	r0, #35	; 0x23
 800510a:	f7fd ff4d 	bl	8002fa8 <intToFp>
 800510e:	4602      	mov	r2, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4293      	cmp	r3, r2
 8005114:	d203      	bcs.n	800511e <detonateNuke+0x122>
			deleteEnemyNode(gameState, current);
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fa11 	bl	8004540 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1cf      	bne.n	80050ca <detonateNuke+0xce>
	}
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	08007238 	.word	0x08007238
 8005138:	200001cc 	.word	0x200001cc

0800513c <shootNuke>:

void shootNuke(gameState_t* gameState){
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register
 8005144:	2301      	movs	r3, #1
 8005146:	2200      	movs	r2, #0
 8005148:	2103      	movs	r1, #3
 800514a:	2098      	movs	r0, #152	; 0x98
 800514c:	f7fd faac 	bl	80026a8 <I2C_Read>
 8005150:	4603      	mov	r3, r0
 8005152:	77fb      	strb	r3, [r7, #31]
	if(x > 128 && gameState->nuke->readyState){
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d947      	bls.n	80051ea <shootNuke+0xae>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	7e5b      	ldrb	r3, [r3, #25]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d042      	beq.n	80051ea <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	7e1b      	ldrb	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d132      	bne.n	80051d4 <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005182:	f7fd ff11 	bl	8002fa8 <intToFp>
 8005186:	4603      	mov	r3, r0
 8005188:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	461a      	mov	r2, r3
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005198:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	3308      	adds	r3, #8
 80051a2:	f107 0214 	add.w	r2, r7, #20
 80051a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051aa:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	3310      	adds	r3, #16
 80051b4:	f107 020c 	add.w	r2, r7, #12
 80051b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051bc:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2201      	movs	r2, #1
 80051c6:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <shootNuke+0xb8>)
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	uint8_t color[] = {0,0,0};
 8004c84:	4a30      	ldr	r2, [pc, #192]	; (8004d48 <chargeNuke+0xcc>)
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	3302      	adds	r3, #2
 8004c92:	0c12      	lsrs	r2, r2, #16
 8004c94:	701a      	strb	r2, [r3, #0]
	if(runtime - gameState->nuke->lastActivationTime < 500){
 8004c96:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <chargeNuke+0xd0>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ca6:	d205      	bcs.n	8004cb4 <chargeNuke+0x38>
		color[0] = 1;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 500){
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <chargeNuke+0xd0>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cc4:	d905      	bls.n	8004cd2 <chargeNuke+0x56>
		color[0] = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	733b      	strb	r3, [r7, #12]
		color[1] = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	737b      	strb	r3, [r7, #13]
		color[2] = 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1000){
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <chargeNuke+0xd0>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce2:	d905      	bls.n	8004cf0 <chargeNuke+0x74>
		color[0] = 1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73bb      	strb	r3, [r7, #14]
	}
	if(runtime - gameState->nuke->lastActivationTime > 1500){
 8004cf0:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <chargeNuke+0xd0>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d909      	bls.n	8004d18 <chargeNuke+0x9c>
		color[0] = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	733b      	strb	r3, [r7, #12]
		color[1] = 1;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	737b      	strb	r3, [r7, #13]
		color[2] = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73bb      	strb	r3, [r7, #14]
		gameState->nuke->readyState = 1;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2201      	movs	r2, #1
 8004d16:	765a      	strb	r2, [r3, #25]
	}
	int8_t nullColor[] = {0,0,0};
 8004d18:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <chargeNuke+0xcc>)
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4611      	mov	r1, r2
 8004d22:	8019      	strh	r1, [r3, #0]
 8004d24:	3302      	adds	r3, #2
 8004d26:	0c12      	lsrs	r2, r2, #16
 8004d28:	701a      	strb	r2, [r3, #0]
	RGBColor(nullColor);
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fc8e 	bl	8002650 <RGBColor>
	RGBColor(color);
 8004d34:	f107 030c 	add.w	r3, r7, #12
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fd fc89 	bl	8002650 <RGBColor>
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	08007374 	.word	0x08007374
 8004d4c:	200001c8 	.word	0x200001c8

08004d50 <detonateNuke>:

void detonateNuke(gameState_t* gameState){
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	gameState->nuke->isDeployed = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2200      	movs	r2, #0
 8004d66:	765a      	strb	r2, [r3, #25]

	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fe84 	bl	8002a7c <fpToInt>
 8004d74:	4604      	mov	r4, r0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fe7d 	bl	8002a7c <fpToInt>
 8004d82:	4603      	mov	r3, r0
 8004d84:	0fda      	lsrs	r2, r3, #31
 8004d86:	4413      	add	r3, r2
 8004d88:	105b      	asrs	r3, r3, #1
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7fc fb9f 	bl	80014d0 <gotoxy>
	printf("     ");
 8004d92:	483d      	ldr	r0, [pc, #244]	; (8004e88 <detonateNuke+0x138>)
 8004d94:	f000 feb8 	bl	8005b08 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fe6c 	bl	8002a7c <fpToInt>
 8004da4:	4604      	mov	r4, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fd fe65 	bl	8002a7c <fpToInt>
 8004db2:	4603      	mov	r3, r0
 8004db4:	3302      	adds	r3, #2
 8004db6:	0fda      	lsrs	r2, r3, #31
 8004db8:	4413      	add	r3, r2
 8004dba:	105b      	asrs	r3, r3, #1
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7fc fb86 	bl	80014d0 <gotoxy>
	printf("     ");
 8004dc4:	4830      	ldr	r0, [pc, #192]	; (8004e88 <detonateNuke+0x138>)
 8004dc6:	f000 fe9f 	bl	8005b08 <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fd fe53 	bl	8002a7c <fpToInt>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fe4c 	bl	8002a7c <fpToInt>
 8004de4:	4603      	mov	r3, r0
 8004de6:	3304      	adds	r3, #4
 8004de8:	0fda      	lsrs	r2, r3, #31
 8004dea:	4413      	add	r3, r2
 8004dec:	105b      	asrs	r3, r3, #1
 8004dee:	4619      	mov	r1, r3
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7fc fb6d 	bl	80014d0 <gotoxy>
	printf("     ");
 8004df6:	4824      	ldr	r0, [pc, #144]	; (8004e88 <detonateNuke+0x138>)
 8004df8:	f000 fe86 	bl	8005b08 <iprintf>
	enemyNode_t* current = gameState->enemyLL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	60fb      	str	r3, [r7, #12]
	drawNukeCircle(gameState);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe fef6 	bl	8003bf4 <drawNukeCircle>
	gameState->nuke->lastDetonationTime = runtime;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <detonateNuke+0x13c>)
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2020 	strb.w	r2, [r3, #32]
	while(current != NULL){
 8004e1c:	e02c      	b.n	8004e78 <detonateNuke+0x128>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fea8 	bl	8002b94 <fpAbs>
 8004e44:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 8004e46:	4423      	add	r3, r4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd fea3 	bl	8002b94 <fpAbs>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd fe32 	bl	8002abe <fpMultiply>
 8004e5a:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 8004e5c:	2023      	movs	r0, #35	; 0x23
 8004e5e:	f7fd fdf8 	bl	8002a52 <intToFp>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d203      	bcs.n	8004e72 <detonateNuke+0x122>
			deleteEnemyNode(gameState, current);
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff f9df 	bl	8004230 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1cf      	bne.n	8004e1e <detonateNuke+0xce>
	}
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}
 8004e88:	08007378 	.word	0x08007378
 8004e8c:	200001c8 	.word	0x200001c8

08004e90 <shootNuke>:

void shootNuke(gameState_t* gameState){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register
 8004e98:	2301      	movs	r3, #1
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	2098      	movs	r0, #152	; 0x98
 8004ea0:	f7fd f8fc 	bl	800209c <I2C_Read>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	77fb      	strb	r3, [r7, #31]
	if(x > 128 && gameState->nuke->readyState){
 8004ea8:	7ffb      	ldrb	r3, [r7, #31]
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d947      	bls.n	8004f3e <shootNuke+0xae>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	7e5b      	ldrb	r3, [r3, #25]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d042      	beq.n	8004f3e <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	7e1b      	ldrb	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d132      	bne.n	8004f28 <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004ed6:	f7fd fdbc 	bl	8002a52 <intToFp>
 8004eda:	4603      	mov	r3, r0
 8004edc:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004eec:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	f107 0214 	add.w	r2, r7, #20
 8004efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004efe:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	3310      	adds	r3, #16
 8004f08:	f107 020c 	add.w	r2, r7, #12
 8004f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f10:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2201      	movs	r2, #1
 8004f1a:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <shootNuke+0xb8>)
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
=======
 800562e:	f107 030c 	add.w	r3, r7, #12
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd fc04 	bl	8002e40 <RGBColor>
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	08007d70 	.word	0x08007d70
 8005644:	200001c8 	.word	0x200001c8

08005648 <detonateNuke>:

void detonateNuke(gameState_t* gameState){
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	gameState->nuke->isDeployed = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	2200      	movs	r2, #0
 8005656:	761a      	strb	r2, [r3, #24]
	gameState->nuke->readyState = 0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	2200      	movs	r2, #0
 800565e:	765a      	strb	r2, [r3, #25]

	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y)) / yScale);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fe8c 	bl	8003384 <fpToInt>
 800566c:	4604      	mov	r4, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd fe85 	bl	8003384 <fpToInt>
 800567a:	4603      	mov	r3, r0
 800567c:	0fda      	lsrs	r2, r3, #31
 800567e:	4413      	add	r3, r2
 8005680:	105b      	asrs	r3, r3, #1
 8005682:	4619      	mov	r1, r3
 8005684:	4620      	mov	r0, r4
 8005686:	f7fc fb11 	bl	8001cac <gotoxy>
	printf("     ");
 800568a:	483d      	ldr	r0, [pc, #244]	; (8005780 <detonateNuke+0x138>)
 800568c:	f000 ff56 	bl	800653c <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 1 * yScale) / yScale);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd fe74 	bl	8003384 <fpToInt>
 800569c:	4604      	mov	r4, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd fe6d 	bl	8003384 <fpToInt>
 80056aa:	4603      	mov	r3, r0
 80056ac:	3302      	adds	r3, #2
 80056ae:	0fda      	lsrs	r2, r3, #31
 80056b0:	4413      	add	r3, r2
 80056b2:	105b      	asrs	r3, r3, #1
 80056b4:	4619      	mov	r1, r3
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7fc faf8 	bl	8001cac <gotoxy>
	printf("     ");
 80056bc:	4830      	ldr	r0, [pc, #192]	; (8005780 <detonateNuke+0x138>)
 80056be:	f000 ff3d 	bl	800653c <iprintf>
	gotoxy(fpToInt(gameState->nuke->position.x),(fpToInt(gameState->nuke->position.y) + 2 * yScale) / yScale);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fe5b 	bl	8003384 <fpToInt>
 80056ce:	4604      	mov	r4, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd fe54 	bl	8003384 <fpToInt>
 80056dc:	4603      	mov	r3, r0
 80056de:	3304      	adds	r3, #4
 80056e0:	0fda      	lsrs	r2, r3, #31
 80056e2:	4413      	add	r3, r2
 80056e4:	105b      	asrs	r3, r3, #1
 80056e6:	4619      	mov	r1, r3
 80056e8:	4620      	mov	r0, r4
 80056ea:	f7fc fadf 	bl	8001cac <gotoxy>
	printf("     ");
 80056ee:	4824      	ldr	r0, [pc, #144]	; (8005780 <detonateNuke+0x138>)
 80056f0:	f000 ff24 	bl	800653c <iprintf>
	enemyNode_t* current = gameState->enemyLL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
	drawNukeCircle(gameState);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fe ff12 	bl	8004524 <drawNukeCircle>
	gameState->nuke->lastDetonationTime = runtime;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <detonateNuke+0x13c>)
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	61da      	str	r2, [r3, #28]
	gameState->nuke->circleClear = 0;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2020 	strb.w	r2, [r3, #32]
	while(current != NULL){
 8005714:	e02c      	b.n	8005770 <detonateNuke+0x128>
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1ad4      	subs	r4, r2, r3
								fpAbs(gameState->nuke->position.y - current->enemy->position->y)),
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd feb0 	bl	800349c <fpAbs>
 800573c:	4603      	mov	r3, r0
		uint32_t distToEnemy= fpMultiply(fpAbs(gameState->nuke->position.x - current->enemy->position->x +
 800573e:	4423      	add	r3, r4
 8005740:	4618      	mov	r0, r3
 8005742:	f7fd feab 	bl	800349c <fpAbs>
 8005746:	4603      	mov	r3, r0
 8005748:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 800574c:	4618      	mov	r0, r3
 800574e:	f7fd fe3a 	bl	80033c6 <fpMultiply>
 8005752:	60b8      	str	r0, [r7, #8]
				0x0000b400); //Aprox of pythagoras where (x+y) * (sqrt(2)/2)
		if(distToEnemy < intToFp(35)){
 8005754:	2023      	movs	r0, #35	; 0x23
 8005756:	f7fd fe00 	bl	800335a <intToFp>
 800575a:	4602      	mov	r2, r0
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4293      	cmp	r3, r2
 8005760:	d203      	bcs.n	800576a <detonateNuke+0x122>
			deleteEnemyNode(gameState, current);
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff f9fb 	bl	8004b60 <deleteEnemyNode>
		}
		current = current->nextEnemyNode;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
	while(current != NULL){
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1cf      	bne.n	8005716 <detonateNuke+0xce>
	}
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}
 8005780:	08007d74 	.word	0x08007d74
 8005784:	200001c8 	.word	0x200001c8

08005788 <shootNuke>:

void shootNuke(gameState_t* gameState){
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	uint8_t x = I2C_Read(0x98, 0x03, 0, 1); //Read output register
 8005790:	2301      	movs	r3, #1
 8005792:	2200      	movs	r2, #0
 8005794:	2103      	movs	r1, #3
 8005796:	2098      	movs	r0, #152	; 0x98
 8005798:	f7fd f878 	bl	800288c <I2C_Read>
 800579c:	4603      	mov	r3, r0
 800579e:	77fb      	strb	r3, [r7, #31]
	if(x > 128 && gameState->nuke->readyState){
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d947      	bls.n	8005836 <shootNuke+0xae>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	7e5b      	ldrb	r3, [r3, #25]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d042      	beq.n	8005836 <shootNuke+0xae>
		if(gameState->nuke->isDeployed == 0){
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	7e1b      	ldrb	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d132      	bne.n	8005820 <shootNuke+0x98>
			position_t pos= {gameState->spaceship.position.x, gameState->spaceship.position.y};
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	61bb      	str	r3, [r7, #24]
			vector_t vec = {0, intToFp(-1)};
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80057ce:	f7fd fdc4 	bl	800335a <intToFp>
 80057d2:	4603      	mov	r3, r0
 80057d4:	613b      	str	r3, [r7, #16]
			gameState->nuke->position = pos;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	461a      	mov	r2, r3
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057e4:	e882 0003 	stmia.w	r2, {r0, r1}
			gameState->nuke->nextPosition = pos;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	3308      	adds	r3, #8
 80057ee:	f107 0214 	add.w	r2, r7, #20
 80057f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057f6:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->velocity = vec;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	3310      	adds	r3, #16
 8005800:	f107 020c 	add.w	r2, r7, #12
 8005804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005808:	e883 0003 	stmia.w	r3, {r0, r1}
			gameState->nuke->isDeployed = 1;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	2201      	movs	r2, #1
 8005812:	761a      	strb	r2, [r3, #24]
			gameState->nuke->lastActivationTime = runtime;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	4a09      	ldr	r2, [pc, #36]	; (8005840 <shootNuke+0xb8>)
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
		}else{
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
		}
	}
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80051d2:	e00a      	b.n	80051ea <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <shootNuke+0xb8>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b64      	cmp	r3, #100	; 0x64
 80051e2:	d902      	bls.n	80051ea <shootNuke+0xae>
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ff09 	bl	8004ffc <detonateNuke>
}
 80051ea:	bf00      	nop
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200001cc 	.word	0x200001cc

080051f8 <updateNuke>:

void updateNuke(gameState_t* gameState){
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fe91 	bl	8004f28 <chargeNuke>
	shootNuke(gameState);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ff98 	bl	800513c <shootNuke>
	if(gameState->nuke->isDeployed == 1){
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	7e1b      	ldrb	r3, [r3, #24]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d113      	bne.n	800523e <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	6819      	ldr	r1, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	440a      	add	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	440a      	add	r2, r1
 800523c:	60da      	str	r2, [r3, #12]
	}
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <updateNuke+0x84>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d912      	bls.n	8005274 <updateNuke+0x7c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <updateNuke+0x7c>
		clearNukeCircle(gameState);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe ff7c 	bl	8004158 <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005268:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200001cc 	.word	0x200001cc

08005280 <updateSpaceship>:
=======
 8004f26:	e00a      	b.n	8004f3e <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <shootNuke+0xb8>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	; 0x64
 8004f36:	d902      	bls.n	8004f3e <shootNuke+0xae>
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff09 	bl	8004d50 <detonateNuke>
}
 8004f3e:	bf00      	nop
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200001c8 	.word	0x200001c8

08004f4c <updateNuke>:

void updateNuke(gameState_t* gameState){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fe91 	bl	8004c7c <chargeNuke>
	shootNuke(gameState);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff98 	bl	8004e90 <shootNuke>
	if(gameState->nuke->isDeployed == 1){
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	7e1b      	ldrb	r3, [r3, #24]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d113      	bne.n	8004f92 <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	440a      	add	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	440a      	add	r2, r1
 8004f90:	60da      	str	r2, [r3, #12]
	}
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <updateNuke+0x84>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d912      	bls.n	8004fc8 <updateNuke+0x7c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <updateNuke+0x7c>
		clearNukeCircle(gameState);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fe ff4a 	bl	8003e48 <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fbc:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200001c8 	.word	0x200001c8

08004fd4 <spawnPowerup>:
=======
 800581e:	e00a      	b.n	8005836 <shootNuke+0xae>
			if(runtime - gameState->nuke->lastActivationTime > 100) detonateNuke(gameState);
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <shootNuke+0xb8>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b64      	cmp	r3, #100	; 0x64
 800582e:	d902      	bls.n	8005836 <shootNuke+0xae>
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff09 	bl	8005648 <detonateNuke>
}
 8005836:	bf00      	nop
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200001c8 	.word	0x200001c8

08005844 <updateNuke>:

void updateNuke(gameState_t* gameState){
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	chargeNuke(gameState);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fe97 	bl	8005580 <chargeNuke>
	shootNuke(gameState);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff98 	bl	8005788 <shootNuke>
	if(gameState->nuke->isDeployed == 1){
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	7e1b      	ldrb	r3, [r3, #24]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d113      	bne.n	800588a <updateNuke+0x46>
		gameState->nuke->nextPosition.x = gameState->nuke->position.x + gameState->nuke->velocity.x;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	440a      	add	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
		gameState->nuke->nextPosition.y = gameState->nuke->position.y + gameState->nuke->velocity.y;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	440a      	add	r2, r1
 8005888:	60da      	str	r2, [r3, #12]
	}
	if(runtime - gameState->nuke->lastDetonationTime > 100 && gameState->nuke->circleClear == 0){
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <updateNuke+0x84>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d912      	bls.n	80058c0 <updateNuke+0x7c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10c      	bne.n	80058c0 <updateNuke+0x7c>
		clearNukeCircle(gameState);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe ff66 	bl	8004778 <clearNukeCircle>
		gameState->nuke->lastDetonationTime = 0xFFFFFFFF;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058b4:	61da      	str	r2, [r3, #28]
		gameState->nuke->circleClear = 1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200001c8 	.word	0x200001c8

080058cc <spawnPowerup>:
>>>>>>> Stashed changes
 *      Author: david
 */
#include "powerup.h"
#define spawnPeriod 600

void spawnPowerup(gameState_t* gameState){
<<<<<<< Updated upstream
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <spawnPowerup+0xbc>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004fea:	d34d      	bcc.n	8005088 <spawnPowerup+0xb4>
=======
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	if(runtime-gameState->powerup.lastUseTime>=spawnPeriod){
 80058d4:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <spawnPowerup+0xbc>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80058e2:	d34d      	bcc.n	8005980 <spawnPowerup+0xb4>
>>>>>>> Stashed changes



		gameState->powerup.lastUseTime=runtime;
<<<<<<< Updated upstream
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <spawnPowerup+0xbc>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	659a      	str	r2, [r3, #88]	; 0x58
		gameState->powerup.isVisible=1;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		uint8_t randomX;
				while(!xValIsValid(randomX, 5)){
 8004ffc:	e00f      	b.n	800501e <spawnPowerup+0x4a>
					randomX = (rand() % 147) + 1;
 8004ffe:	f000 fe55 	bl	8005cac <rand>
 8005002:	4603      	mov	r3, r0
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <spawnPowerup+0xc0>)
 8005006:	fb82 1203 	smull	r1, r2, r2, r3
 800500a:	1191      	asrs	r1, r2, #6
 800500c:	17da      	asrs	r2, r3, #31
 800500e:	1a8a      	subs	r2, r1, r2
 8005010:	2193      	movs	r1, #147	; 0x93
 8005012:	fb01 f202 	mul.w	r2, r1, r2
 8005016:	1a9a      	subs	r2, r3, r2
 8005018:	b2d3      	uxtb	r3, r2
 800501a:	3301      	adds	r3, #1
 800501c:	77fb      	strb	r3, [r7, #31]
				while(!xValIsValid(randomX, 5)){
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2105      	movs	r1, #5
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fb81 	bl	800272a <xValIsValid>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0e7      	beq.n	8004ffe <spawnPowerup+0x2a>
				}

		position_t spawnPos = {intToFp(randomX), intToFp(2)*yScale};
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fd0d 	bl	8002a52 <intToFp>
 8005038:	4603      	mov	r3, r0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	2002      	movs	r0, #2
 800503e:	f7fd fd08 	bl	8002a52 <intToFp>
 8005042:	4603      	mov	r3, r0
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 8005048:	2000      	movs	r0, #0
 800504a:	f7fd fd02 	bl	8002a52 <intToFp>
 800504e:	4603      	mov	r3, r0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005056:	613b      	str	r3, [r7, #16]
		gameState->powerup.position=spawnPos;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3340      	adds	r3, #64	; 0x40
 800505c:	f107 0214 	add.w	r2, r7, #20
 8005060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005064:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3348      	adds	r3, #72	; 0x48
 800506c:	f107 0214 	add.w	r2, r7, #20
 8005070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005074:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3350      	adds	r3, #80	; 0x50
 800507c:	f107 020c 	add.w	r2, r7, #12
 8005080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005084:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8005088:	bf00      	nop
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200001c8 	.word	0x200001c8
 8005094:	6f74ae27 	.word	0x6f74ae27

08005098 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80cc 	beq.w	8005244 <updatePowerup+0x1ac>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	649a      	str	r2, [r3, #72]	; 0x48
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	441a      	add	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	64da      	str	r2, [r3, #76]	; 0x4c


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale-3){
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd fcd5 	bl	8002a7c <fpToInt>
 80050d2:	4603      	mov	r3, r0
 80050d4:	0fda      	lsrs	r2, r3, #31
 80050d6:	4413      	add	r3, r2
 80050d8:	105b      	asrs	r3, r3, #1
 80050da:	461c      	mov	r4, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd fccb 	bl	8002a7c <fpToInt>
 80050e6:	4603      	mov	r3, r0
 80050e8:	0fda      	lsrs	r2, r3, #31
 80050ea:	4413      	add	r3, r2
 80050ec:	105b      	asrs	r3, r3, #1
 80050ee:	3b03      	subs	r3, #3
 80050f0:	429c      	cmp	r4, r3
 80050f2:	db79      	blt.n	80051e8 <updatePowerup+0x150>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	7f1b      	ldrb	r3, [r3, #28]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d125      	bne.n	8005148 <updatePowerup+0xb0>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd fcbb 	bl	8002a7c <fpToInt>
 8005106:	4603      	mov	r3, r0
 8005108:	f103 0408 	add.w	r4, r3, #8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4618      	mov	r0, r3
 8005112:	f7fd fcb3 	bl	8002a7c <fpToInt>
 8005116:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8005118:	429c      	cmp	r4, r3
 800511a:	db12      	blt.n	8005142 <updatePowerup+0xaa>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd fcab 	bl	8002a7c <fpToInt>
 8005126:	4603      	mov	r3, r0
 8005128:	f1a3 0408 	sub.w	r4, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd fca3 	bl	8002a7c <fpToInt>
 8005136:	4603      	mov	r3, r0
 8005138:	3304      	adds	r3, #4
 800513a:	429c      	cmp	r4, r3
 800513c:	dc01      	bgt.n	8005142 <updatePowerup+0xaa>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <updatePowerup+0xac>
 8005142:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	e029      	b.n	800519c <updatePowerup+0x104>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	4618      	mov	r0, r3
 800514e:	f7fd fc95 	bl	8002a7c <fpToInt>
 8005152:	4603      	mov	r3, r0
 8005154:	1c59      	adds	r1, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7f1b      	ldrb	r3, [r3, #28]
 800515a:	1e5a      	subs	r2, r3, #1
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	18cc      	adds	r4, r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	4618      	mov	r0, r3
 800516a:	f7fd fc87 	bl	8002a7c <fpToInt>
 800516e:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8005170:	429c      	cmp	r4, r3
 8005172:	db11      	blt.n	8005198 <updatePowerup+0x100>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd fc7f 	bl	8002a7c <fpToInt>
 800517e:	4603      	mov	r3, r0
 8005180:	1e5c      	subs	r4, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd fc78 	bl	8002a7c <fpToInt>
 800518c:	4603      	mov	r3, r0
 800518e:	3304      	adds	r3, #4
 8005190:	429c      	cmp	r4, r3
 8005192:	dc01      	bgt.n	8005198 <updatePowerup+0x100>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <updatePowerup+0x102>
 8005198:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 800519a:	73fb      	strb	r3, [r7, #15]
=======
 80058e4:	4b28      	ldr	r3, [pc, #160]	; (8005988 <spawnPowerup+0xbc>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	65da      	str	r2, [r3, #92]	; 0x5c
		gameState->powerup.isVisible=1;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		uint8_t randomX;
				while(!xValIsValid(randomX, 5)){
 80058f4:	e00f      	b.n	8005916 <spawnPowerup+0x4a>
					randomX = (rand() % 147) + 1;
 80058f6:	f000 fef3 	bl	80066e0 <rand>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4a23      	ldr	r2, [pc, #140]	; (800598c <spawnPowerup+0xc0>)
 80058fe:	fb82 1203 	smull	r1, r2, r2, r3
 8005902:	1191      	asrs	r1, r2, #6
 8005904:	17da      	asrs	r2, r3, #31
 8005906:	1a8a      	subs	r2, r1, r2
 8005908:	2193      	movs	r1, #147	; 0x93
 800590a:	fb01 f202 	mul.w	r2, r1, r2
 800590e:	1a9a      	subs	r2, r3, r2
 8005910:	b2d3      	uxtb	r3, r2
 8005912:	3301      	adds	r3, #1
 8005914:	77fb      	strb	r3, [r7, #31]
				while(!xValIsValid(randomX, 5)){
 8005916:	7ffb      	ldrb	r3, [r7, #31]
 8005918:	2105      	movs	r1, #5
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fb6b 	bl	8002ff6 <xValIsValid>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0e7      	beq.n	80058f6 <spawnPowerup+0x2a>
				}

		position_t spawnPos = {intToFp(randomX), intToFp(2)*yScale};
 8005926:	7ffb      	ldrb	r3, [r7, #31]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fd15 	bl	800335a <intToFp>
 8005930:	4603      	mov	r3, r0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	2002      	movs	r0, #2
 8005936:	f7fd fd10 	bl	800335a <intToFp>
 800593a:	4603      	mov	r3, r0
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	61bb      	str	r3, [r7, #24]
		vector_t vel = {intToFp(0), 0x00008000*yScale};
 8005940:	2000      	movs	r0, #0
 8005942:	f7fd fd0a 	bl	800335a <intToFp>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800594e:	613b      	str	r3, [r7, #16]
		gameState->powerup.position=spawnPos;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3344      	adds	r3, #68	; 0x44
 8005954:	f107 0214 	add.w	r2, r7, #20
 8005958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800595c:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.nextPosition=spawnPos;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	334c      	adds	r3, #76	; 0x4c
 8005964:	f107 0214 	add.w	r2, r7, #20
 8005968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800596c:	e883 0003 	stmia.w	r3, {r0, r1}
		gameState->powerup.velocity=vel;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3354      	adds	r3, #84	; 0x54
 8005974:	f107 020c 	add.w	r2, r7, #12
 8005978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800597c:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8005980:	bf00      	nop
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	200001c8 	.word	0x200001c8
 800598c:	6f74ae27 	.word	0x6f74ae27

08005990 <updatePowerup>:

void updatePowerup(gameState_t* gameState){
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80d1 	beq.w	8005b46 <updatePowerup+0x1b6>

		gameState->powerup.nextPosition.x=gameState->powerup.position.x+gameState->powerup.velocity.x;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	64da      	str	r2, [r3, #76]	; 0x4c
		gameState->powerup.nextPosition.y=gameState->powerup.position.y+gameState->powerup.velocity.y;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	441a      	add	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	651a      	str	r2, [r3, #80]	; 0x50


		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale-3){
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fcdd 	bl	8003384 <fpToInt>
 80059ca:	4603      	mov	r3, r0
 80059cc:	0fda      	lsrs	r2, r3, #31
 80059ce:	4413      	add	r3, r2
 80059d0:	105b      	asrs	r3, r3, #1
 80059d2:	461c      	mov	r4, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd fcd3 	bl	8003384 <fpToInt>
 80059de:	4603      	mov	r3, r0
 80059e0:	0fda      	lsrs	r2, r3, #31
 80059e2:	4413      	add	r3, r2
 80059e4:	105b      	asrs	r3, r3, #1
 80059e6:	3b03      	subs	r3, #3
 80059e8:	429c      	cmp	r4, r3
 80059ea:	db7e      	blt.n	8005aea <updatePowerup+0x15a>

			uint8_t powerupIsTaken;
			if(gameState->spaceship.numberOfParts==3){
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d125      	bne.n	8005a42 <updatePowerup+0xb2>
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fd fcc2 	bl	8003384 <fpToInt>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f103 0408 	add.w	r4, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fcba 	bl	8003384 <fpToInt>
 8005a10:	4603      	mov	r3, r0
				&& fpToInt(gameState->spaceship.nextPosition.x)-1-spaceshipWidth<=fpToInt(gameState->powerup.position.x)+4;
 8005a12:	429c      	cmp	r4, r3
 8005a14:	db12      	blt.n	8005a3c <updatePowerup+0xac>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fd fcb2 	bl	8003384 <fpToInt>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f1a3 0408 	sub.w	r4, r3, #8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fd fcaa 	bl	8003384 <fpToInt>
 8005a30:	4603      	mov	r3, r0
 8005a32:	3304      	adds	r3, #4
 8005a34:	429c      	cmp	r4, r3
 8005a36:	dc01      	bgt.n	8005a3c <updatePowerup+0xac>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <updatePowerup+0xae>
 8005a3c:	2300      	movs	r3, #0
				powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+spaceshipWidth  >= fpToInt(gameState->powerup.position.x)
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e02a      	b.n	8005a98 <updatePowerup+0x108>
			} else {
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd fc9c 	bl	8003384 <fpToInt>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	18cc      	adds	r4, r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fd fc8d 	bl	8003384 <fpToInt>
 8005a6a:	4603      	mov	r3, r0
			&& fpToInt(gameState->spaceship.nextPosition.x)-1<=fpToInt(gameState->powerup.position.x)+4;
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	db11      	blt.n	8005a94 <updatePowerup+0x104>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd fc85 	bl	8003384 <fpToInt>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	1e5c      	subs	r4, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd fc7e 	bl	8003384 <fpToInt>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	dc01      	bgt.n	8005a94 <updatePowerup+0x104>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <updatePowerup+0x106>
 8005a94:	2300      	movs	r3, #0
			 powerupIsTaken = fpToInt(gameState->spaceship.nextPosition.x)+1+(gameState->spaceship.numberOfParts-1)*spaceshipWidth>=fpToInt(gameState->powerup.position.x)
 8005a96:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

			}


			if(powerupIsTaken){
<<<<<<< Updated upstream
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d022      	beq.n	80051e8 <updatePowerup+0x150>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fc68 	bl	8002a7c <fpToInt>
 80051ac:	4603      	mov	r3, r0
 80051ae:	b2dc      	uxtb	r4, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd fc61 	bl	8002a7c <fpToInt>
 80051ba:	4603      	mov	r3, r0
 80051bc:	0fda      	lsrs	r2, r3, #31
 80051be:	4413      	add	r3, r2
 80051c0:	105b      	asrs	r3, r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	4619      	mov	r1, r3
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7fe fc12 	bl	80039f0 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7f1b      	ldrb	r3, [r3, #28]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d805      	bhi.n	80051e8 <updatePowerup+0x150>
					gameState->spaceship.numberOfParts++;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7f1b      	ldrb	r3, [r3, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	771a      	strb	r2, [r3, #28]
=======
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d025      	beq.n	8005aea <updatePowerup+0x15a>
				deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fd fc6e 	bl	8003384 <fpToInt>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	b2dc      	uxtb	r4, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fd fc67 	bl	8003384 <fpToInt>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	0fda      	lsrs	r2, r3, #31
 8005aba:	4413      	add	r3, r2
 8005abc:	105b      	asrs	r3, r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7fe fc2c 	bl	8004320 <deletePowerupGraphics>
				gameState->powerup.isVisible=0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				//TODO: spil lyd her
				if(gameState->spaceship.numberOfParts<3){
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d807      	bhi.n	8005aea <updatePowerup+0x15a>
					gameState->spaceship.numberOfParts++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
				} else {
					//TODO: tilføj point??
				}
			}
		}
		if(fpToInt(gameState->powerup.nextPosition.y)/yScale>=fpToInt(gameState->spaceship.position.y)/yScale+1){
<<<<<<< Updated upstream
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fd fc45 	bl	8002a7c <fpToInt>
 80051f2:	4603      	mov	r3, r0
 80051f4:	0fda      	lsrs	r2, r3, #31
 80051f6:	4413      	add	r3, r2
 80051f8:	105b      	asrs	r3, r3, #1
 80051fa:	461c      	mov	r4, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd fc3b 	bl	8002a7c <fpToInt>
 8005206:	4603      	mov	r3, r0
 8005208:	0fda      	lsrs	r2, r3, #31
 800520a:	4413      	add	r3, r2
 800520c:	105b      	asrs	r3, r3, #1
 800520e:	429c      	cmp	r4, r3
 8005210:	da18      	bge.n	8005244 <updatePowerup+0x1ac>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd fc30 	bl	8002a7c <fpToInt>
 800521c:	4603      	mov	r3, r0
 800521e:	b2dc      	uxtb	r4, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd fc29 	bl	8002a7c <fpToInt>
 800522a:	4603      	mov	r3, r0
 800522c:	0fda      	lsrs	r2, r3, #31
 800522e:	4413      	add	r3, r2
 8005230:	105b      	asrs	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	4620      	mov	r0, r4
 8005238:	f7fe fbda 	bl	80039f0 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
	}
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d031      	beq.n	80052c2 <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fc0a 	bl	8002a7c <fpToInt>
 8005268:	4603      	mov	r3, r0
 800526a:	b2dc      	uxtb	r4, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd fc03 	bl	8002a7c <fpToInt>
 8005276:	4603      	mov	r3, r0
 8005278:	0fda      	lsrs	r2, r3, #31
 800527a:	4413      	add	r3, r2
 800527c:	105b      	asrs	r3, r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	4620      	mov	r0, r4
 8005284:	f7fe fbb4 	bl	80039f0 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd fbf5 	bl	8002a7c <fpToInt>
 8005292:	4603      	mov	r3, r0
 8005294:	b2dc      	uxtb	r4, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fbee 	bl	8002a7c <fpToInt>
 80052a0:	4603      	mov	r3, r0
 80052a2:	0fda      	lsrs	r2, r3, #31
 80052a4:	4413      	add	r3, r2
 80052a6:	105b      	asrs	r3, r3, #1
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	4619      	mov	r1, r3
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7fe fbcb 	bl	8003a48 <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	3340      	adds	r3, #64	; 0x40
 80052b8:	3248      	adds	r2, #72	; 0x48
 80052ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052be:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}

080052ca <updateSpaceship>:
>>>>>>> Stashed changes
=======
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd fc48 	bl	8003384 <fpToInt>
 8005af4:	4603      	mov	r3, r0
 8005af6:	0fda      	lsrs	r2, r3, #31
 8005af8:	4413      	add	r3, r2
 8005afa:	105b      	asrs	r3, r3, #1
 8005afc:	461c      	mov	r4, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fc3e 	bl	8003384 <fpToInt>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	0fda      	lsrs	r2, r3, #31
 8005b0c:	4413      	add	r3, r2
 8005b0e:	105b      	asrs	r3, r3, #1
 8005b10:	429c      	cmp	r4, r3
 8005b12:	da18      	bge.n	8005b46 <updatePowerup+0x1b6>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fd fc33 	bl	8003384 <fpToInt>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	b2dc      	uxtb	r4, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fc2c 	bl	8003384 <fpToInt>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	0fda      	lsrs	r2, r3, #31
 8005b30:	4413      	add	r3, r2
 8005b32:	105b      	asrs	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7fe fbf1 	bl	8004320 <deletePowerupGraphics>
			gameState->powerup.isVisible=0;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
	}
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}

08005b4e <drawPowerup>:

void drawPowerup(gameState_t* gameState){
 8005b4e:	b590      	push	{r4, r7, lr}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
	if(gameState->powerup.isVisible){
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d031      	beq.n	8005bc4 <drawPowerup+0x76>
			deletePowerupGraphics(fpToInt(gameState->powerup.position.x),fpToInt(gameState->powerup.position.y)/yScale);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fd fc0d 	bl	8003384 <fpToInt>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	b2dc      	uxtb	r4, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd fc06 	bl	8003384 <fpToInt>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	0fda      	lsrs	r2, r3, #31
 8005b7c:	4413      	add	r3, r2
 8005b7e:	105b      	asrs	r3, r3, #1
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7fe fbcb 	bl	8004320 <deletePowerupGraphics>
			drawPowerupGraphics(fpToInt(gameState->powerup.nextPosition.x),fpToInt(gameState->powerup.nextPosition.y)/yScale);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fbf8 	bl	8003384 <fpToInt>
 8005b94:	4603      	mov	r3, r0
 8005b96:	b2dc      	uxtb	r4, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fd fbf1 	bl	8003384 <fpToInt>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	0fda      	lsrs	r2, r3, #31
 8005ba6:	4413      	add	r3, r2
 8005ba8:	105b      	asrs	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7fe fbe2 	bl	8004378 <drawPowerupGraphics>

			gameState->powerup.position=gameState->powerup.nextPosition;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	3344      	adds	r3, #68	; 0x44
 8005bba:	324c      	adds	r2, #76	; 0x4c
 8005bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bc0:	e883 0003 	stmia.w	r3, {r0, r1}

		}
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}

08005bcc <playSound>:
		{},
		{{1000,1},{0,0}}, //Bullet shot
		{{400,5},{0,5},{400,5},{0,0}} //Nuke ready
};

void playSound(gameState_t* gameState){
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	//Checks if a sound should play
	if(gameState->soundToPlay == 0) return;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d071      	beq.n	8005cc2 <playSound+0xf6>

	//Checks if the sound has changed
	if(gameState->soundToPlay != gameState->lastSoundToPlay){
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d003      	beq.n	8005bf6 <playSound+0x2a>
		gameState->soundIndex = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	//Checks if the current tone has completed
	if(runtime - gameState->soundTime > sounds[gameState->soundToPlay][gameState->soundIndex-1].duration){
 8005bf6:	4b35      	ldr	r3, [pc, #212]	; (8005ccc <playSound+0x100>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c06:	4619      	mov	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	482f      	ldr	r0, [pc, #188]	; (8005cd0 <playSound+0x104>)
 8005c12:	0089      	lsls	r1, r1, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d949      	bls.n	8005cb4 <playSound+0xe8>
		toggleBuzzer(1);
 8005c20:	2001      	movs	r0, #1
 8005c22:	f7fd f9c5 	bl	8002fb0 <toggleBuzzer>
		setFreq(sounds[gameState->soundToPlay][gameState->soundIndex].frequency);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c34:	4619      	mov	r1, r3
 8005c36:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <playSound+0x104>)
 8005c38:	0083      	lsls	r3, r0, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fd f96d 	bl	8002f20 <setFreq>


		//If it reaches {0,0} stop playing any sound
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c54:	4619      	mov	r1, r3
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <playSound+0x104>)
 8005c58:	0083      	lsls	r3, r0, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11a      	bne.n	8005c9c <playSound+0xd0>
				sounds[gameState->soundToPlay][gameState->soundIndex].frequency == 0){
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c74:	4619      	mov	r1, r3
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <playSound+0x104>)
 8005c78:	0083      	lsls	r3, r0, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
		if(sounds[gameState->soundToPlay][gameState->soundIndex].duration == 0 &&
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <playSound+0xd0>
			toggleBuzzer(0);
 8005c84:	2000      	movs	r0, #0
 8005c86:	f7fd f993 	bl	8002fb0 <toggleBuzzer>
			gameState->soundToPlay = 0;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			gameState->soundIndex = 0;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8005c9a:	e00b      	b.n	8005cb4 <playSound+0xe8>
		}else{
			gameState->soundIndex++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			gameState->soundTime = runtime;
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <playSound+0x100>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	665a      	str	r2, [r3, #100]	; 0x64
		}
	}
	gameState->lastSoundToPlay = gameState->soundToPlay;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8005cc0:	e000      	b.n	8005cc4 <playSound+0xf8>
	if(gameState->soundToPlay == 0) return;
 8005cc2:	bf00      	nop
}
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200001c8 	.word	0x200001c8
 8005cd0:	08007d94 	.word	0x08007d94

08005cd4 <updateSpaceship>:
>>>>>>> Stashed changes
 *  Created on: 6. jan. 2024
 *      Author: david
 */
#include "spaceship.h"

void updateSpaceship(gameState_t* gameState){
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 8005288:	f7fd fbde 	bl	8002a48 <readPotentiometer>
 800528c:	4603      	mov	r3, r0
 800528e:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fe88 	bl	8002fa8 <intToFp>
 8005298:	4604      	mov	r4, r0
 800529a:	200d      	movs	r0, #13
 800529c:	f7fd fe84 	bl	8002fa8 <intToFp>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4619      	mov	r1, r3
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7fd fed6 	bl	8003056 <fpDivide>
 80052aa:	60f8      	str	r0, [r7, #12]
	if(fpToInt(x) <= 1){
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7fd fe90 	bl	8002fd2 <fpToInt>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	dc03      	bgt.n	80052c0 <updateSpaceship+0x40>
		x = intToFp(2);
 80052b8:	2002      	movs	r0, #2
 80052ba:	f7fd fe75 	bl	8002fa8 <intToFp>
 80052be:	60f8      	str	r0, [r7, #12]
	}
	if(fpToInt(x) >= 156){
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7fd fe86 	bl	8002fd2 <fpToInt>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b9b      	cmp	r3, #155	; 0x9b
 80052ca:	dd03      	ble.n	80052d4 <updateSpaceship+0x54>
		x = intToFp(155);
 80052cc:	209b      	movs	r0, #155	; 0x9b
 80052ce:	f7fd fe6b 	bl	8002fa8 <intToFp>
 80052d2:	60f8      	str	r0, [r7, #12]
	}
	gameState->spaceship.nextPosition.x = x;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	615a      	str	r2, [r3, #20]

}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}
	...

080052e4 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 80052e4:	b5b0      	push	{r4, r5, r7, lr}
 80052e6:	b090      	sub	sp, #64	; 0x40
 80052e8:	af04      	add	r7, sp, #16
 80052ea:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 80052ec:	f7fd f8ae 	bl	800244c <centerIsPressed>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d03b      	beq.n	800536e <shootSpaceship+0x8a>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 80052f6:	4b20      	ldr	r3, [pc, #128]	; (8005378 <shootSpaceship+0x94>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]
=======
 80052ca:	b590      	push	{r4, r7, lr}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 80052d2:	f7fd f8b3 	bl	800243c <readPotentiometer>
 80052d6:	4603      	mov	r3, r0
 80052d8:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13)) ;
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd fbb8 	bl	8002a52 <intToFp>
 80052e2:	4604      	mov	r4, r0
 80052e4:	200d      	movs	r0, #13
 80052e6:	f7fd fbb4 	bl	8002a52 <intToFp>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4619      	mov	r1, r3
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7fd fc06 	bl	8002b00 <fpDivide>
 80052f4:	60f8      	str	r0, [r7, #12]


	if(gameState->spaceship.numberOfParts==1){
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7f1b      	ldrb	r3, [r3, #28]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d114      	bne.n	8005328 <updateSpaceship+0x5e>
		if(fpToInt(x) <= 2){
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7fd fbbc 	bl	8002a7c <fpToInt>
 8005304:	4603      	mov	r3, r0
 8005306:	2b02      	cmp	r3, #2
 8005308:	dc03      	bgt.n	8005312 <updateSpaceship+0x48>
			x = intToFp(3);
 800530a:	2003      	movs	r0, #3
 800530c:	f7fd fba1 	bl	8002a52 <intToFp>
 8005310:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155){
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7fd fbb2 	bl	8002a7c <fpToInt>
 8005318:	4603      	mov	r3, r0
 800531a:	2b9a      	cmp	r3, #154	; 0x9a
 800531c:	dd35      	ble.n	800538a <updateSpaceship+0xc0>
			x = intToFp(154);
 800531e:	209a      	movs	r0, #154	; 0x9a
 8005320:	f7fd fb97 	bl	8002a52 <intToFp>
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	e030      	b.n	800538a <updateSpaceship+0xc0>
=======
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	uint16_t potVal = readPotentiometer();
 8005cdc:	f7fc ffa6 	bl	8002c2c <readPotentiometer>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	817b      	strh	r3, [r7, #10]
	uint32_t x = fpDivide(intToFp(potVal), intToFp(13));
 8005ce4:	897b      	ldrh	r3, [r7, #10]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fb37 	bl	800335a <intToFp>
 8005cec:	4604      	mov	r4, r0
 8005cee:	200d      	movs	r0, #13
 8005cf0:	f7fd fb33 	bl	800335a <intToFp>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7fd fb85 	bl	8003408 <fpDivide>
 8005cfe:	60f8      	str	r0, [r7, #12]
	if(fpToInt(fpAbs(gameState->spaceship.prePosition.x - x)) < 5){
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd fbc7 	bl	800349c <fpAbs>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fd fb37 	bl	8003384 <fpToInt>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	dd54      	ble.n	8005dc6 <updateSpaceship+0xf2>
		return;
	}

	if(gameState->spaceship.numberOfParts==1){
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d114      	bne.n	8005d50 <updateSpaceship+0x7c>
		if(fpToInt(x) <= 2){
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7fd fb2c 	bl	8003384 <fpToInt>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	dc03      	bgt.n	8005d3a <updateSpaceship+0x66>
			x = intToFp(3);
 8005d32:	2003      	movs	r0, #3
 8005d34:	f7fd fb11 	bl	800335a <intToFp>
 8005d38:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155){
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7fd fb22 	bl	8003384 <fpToInt>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b9a      	cmp	r3, #154	; 0x9a
 8005d44:	dd37      	ble.n	8005db6 <updateSpaceship+0xe2>
			x = intToFp(154);
 8005d46:	209a      	movs	r0, #154	; 0x9a
 8005d48:	f7fd fb07 	bl	800335a <intToFp>
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	e032      	b.n	8005db6 <updateSpaceship+0xe2>
>>>>>>> Stashed changes
		}
	}

	else if(gameState->spaceship.numberOfParts==2){
<<<<<<< Updated upstream
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7f1b      	ldrb	r3, [r3, #28]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d114      	bne.n	800535a <updateSpaceship+0x90>
			if(fpToInt(x) <= 2){
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7fd fba3 	bl	8002a7c <fpToInt>
 8005336:	4603      	mov	r3, r0
 8005338:	2b02      	cmp	r3, #2
 800533a:	dc03      	bgt.n	8005344 <updateSpaceship+0x7a>
				x = intToFp(3);
 800533c:	2003      	movs	r0, #3
 800533e:	f7fd fb88 	bl	8002a52 <intToFp>
 8005342:	60f8      	str	r0, [r7, #12]
			}
			if(fpToInt(x) >= 155-7){
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7fd fb99 	bl	8002a7c <fpToInt>
 800534a:	4603      	mov	r3, r0
 800534c:	2b93      	cmp	r3, #147	; 0x93
 800534e:	dd1c      	ble.n	800538a <updateSpaceship+0xc0>
				x = intToFp(154-7);
 8005350:	2093      	movs	r0, #147	; 0x93
 8005352:	f7fd fb7e 	bl	8002a52 <intToFp>
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	e017      	b.n	800538a <updateSpaceship+0xc0>
			}
		}
	else if(gameState->spaceship.numberOfParts==3){
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7f1b      	ldrb	r3, [r3, #28]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d113      	bne.n	800538a <updateSpaceship+0xc0>
				if(fpToInt(x) <= 2+7){
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7fd fb8a 	bl	8002a7c <fpToInt>
 8005368:	4603      	mov	r3, r0
 800536a:	2b09      	cmp	r3, #9
 800536c:	dc03      	bgt.n	8005376 <updateSpaceship+0xac>
					x = intToFp(3+7);
 800536e:	200a      	movs	r0, #10
 8005370:	f7fd fb6f 	bl	8002a52 <intToFp>
 8005374:	60f8      	str	r0, [r7, #12]
				}
				if(fpToInt(x) >= 155-7){
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7fd fb80 	bl	8002a7c <fpToInt>
 800537c:	4603      	mov	r3, r0
 800537e:	2b93      	cmp	r3, #147	; 0x93
 8005380:	dd03      	ble.n	800538a <updateSpaceship+0xc0>
					x = intToFp(154-7);
 8005382:	2093      	movs	r0, #147	; 0x93
 8005384:	f7fd fb65 	bl	8002a52 <intToFp>
 8005388:	60f8      	str	r0, [r7, #12]
				}
			}


	gameState->spaceship.nextPosition.x = x;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	615a      	str	r2, [r3, #20]

}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	bd90      	pop	{r4, r7, pc}

08005398 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b09e      	sub	sp, #120	; 0x78
 800539c:	af04      	add	r7, sp, #16
 800539e:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 80053a0:	f7fc fcbe 	bl	8001d20 <centerIsPressed>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80a9 	beq.w	80054fe <shootSpaceship+0x166>
	//if(runtime-gameState->spaceship.lastShotTime>=gameState->spaceship.firingPeriod){

		gameState->spaceship.lastShotTime = runtime;
 80053ac:	4b56      	ldr	r3, [pc, #344]	; (8005508 <shootSpaceship+0x170>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	621a      	str	r2, [r3, #32]

		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80053b4:	2300      	movs	r3, #0
 80053b6:	667b      	str	r3, [r7, #100]	; 0x64
 80053b8:	e09a      	b.n	80054f0 <shootSpaceship+0x158>
			if(i ==2){
 80053ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d147      	bne.n	8005450 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fd fb46 	bl	8002a52 <intToFp>
 80053c6:	4603      	mov	r3, r0
 80053c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ca:	4b50      	ldr	r3, [pc, #320]	; (800550c <shootSpaceship+0x174>)
 80053cc:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68dc      	ldr	r4, [r3, #12]
 80053d2:	2007      	movs	r0, #7
 80053d4:	f7fd fb3d 	bl	8002a52 <intToFp>
 80053d8:	4603      	mov	r3, r0
 80053da:	1ae3      	subs	r3, r4, r3
 80053dc:	657b      	str	r3, [r7, #84]	; 0x54
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691c      	ldr	r4, [r3, #16]
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7fd fb35 	bl	8002a52 <intToFp>
 80053e8:	4603      	mov	r3, r0
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	1ae3      	subs	r3, r4, r3
 80053ee:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 80053f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
 8005400:	615a      	str	r2, [r3, #20]
 8005402:	619a      	str	r2, [r3, #24]
 8005404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005408:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800540c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005410:	e883 0003 	stmia.w	r3, {r0, r1}
 8005414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005418:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800541c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005420:	e883 0003 	stmia.w	r3, {r0, r1}
 8005424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005428:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800542c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005430:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8005434:	687d      	ldr	r5, [r7, #4]
 8005436:	466c      	mov	r4, sp
 8005438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800543c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800543e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005448:	4628      	mov	r0, r5
 800544a:	f7fe fe8f 	bl	800416c <appendBullet>
 800544e:	e04c      	b.n	80054ea <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8005450:	2000      	movs	r0, #0
 8005452:	f7fd fafe 	bl	8002a52 <intToFp>
 8005456:	4603      	mov	r3, r0
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
 800545a:	4b2c      	ldr	r3, [pc, #176]	; (800550c <shootSpaceship+0x174>)
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68dc      	ldr	r4, [r3, #12]
 8005462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	00d2      	lsls	r2, r2, #3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	b29b      	uxth	r3, r3
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd faef 	bl	8002a52 <intToFp>
 8005474:	4603      	mov	r3, r0
 8005476:	4423      	add	r3, r4
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691c      	ldr	r4, [r3, #16]
 800547e:	2001      	movs	r0, #1
 8005480:	f7fd fae7 	bl	8002a52 <intToFp>
 8005484:	4603      	mov	r3, r0
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	1ae3      	subs	r3, r4, r3
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	611a      	str	r2, [r3, #16]
 800549c:	615a      	str	r2, [r3, #20]
 800549e:	619a      	str	r2, [r3, #24]
 80054a0:	f107 030c 	add.w	r3, r7, #12
 80054a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054cc:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 80054d0:	687d      	ldr	r5, [r7, #4]
 80054d2:	466c      	mov	r4, sp
 80054d4:	f107 0318 	add.w	r3, r7, #24
 80054d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7fe fe41 	bl	800416c <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 80054ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ec:	3301      	adds	r3, #1
 80054ee:	667b      	str	r3, [r7, #100]	; 0x64
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	7f1b      	ldrb	r3, [r3, #28]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f8:	4293      	cmp	r3, r2
 80054fa:	f6ff af5e 	blt.w	80053ba <shootSpaceship+0x22>
=======
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d114      	bne.n	8005d84 <updateSpaceship+0xb0>
		if(fpToInt(x) <= 2){
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7fd fb12 	bl	8003384 <fpToInt>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	dc03      	bgt.n	8005d6e <updateSpaceship+0x9a>
			x = intToFp(3);
 8005d66:	2003      	movs	r0, #3
 8005d68:	f7fd faf7 	bl	800335a <intToFp>
 8005d6c:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7fd fb08 	bl	8003384 <fpToInt>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b93      	cmp	r3, #147	; 0x93
 8005d78:	dd1d      	ble.n	8005db6 <updateSpaceship+0xe2>
			x = intToFp(154-7);
 8005d7a:	2093      	movs	r0, #147	; 0x93
 8005d7c:	f7fd faed 	bl	800335a <intToFp>
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	e018      	b.n	8005db6 <updateSpaceship+0xe2>
		}
	}
	else if(gameState->spaceship.numberOfParts==3){
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d113      	bne.n	8005db6 <updateSpaceship+0xe2>
		if(fpToInt(x) <= 2+7){
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7fd faf8 	bl	8003384 <fpToInt>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b09      	cmp	r3, #9
 8005d98:	dc03      	bgt.n	8005da2 <updateSpaceship+0xce>
			x = intToFp(3+7);
 8005d9a:	200a      	movs	r0, #10
 8005d9c:	f7fd fadd 	bl	800335a <intToFp>
 8005da0:	60f8      	str	r0, [r7, #12]
		}
		if(fpToInt(x) >= 155-7){
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7fd faee 	bl	8003384 <fpToInt>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b93      	cmp	r3, #147	; 0x93
 8005dac:	dd03      	ble.n	8005db6 <updateSpaceship+0xe2>
			x = intToFp(154-7);
 8005dae:	2093      	movs	r0, #147	; 0x93
 8005db0:	f7fd fad3 	bl	800335a <intToFp>
 8005db4:	60f8      	str	r0, [r7, #12]
		}
	}
	gameState->spaceship.prePosition.x = gameState->spaceship.position.x;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60da      	str	r2, [r3, #12]
	gameState->spaceship.nextPosition.x = x;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	61da      	str	r2, [r3, #28]
 8005dc4:	e000      	b.n	8005dc8 <updateSpaceship+0xf4>
		return;
 8005dc6:	bf00      	nop
}
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd90      	pop	{r4, r7, pc}
	...

08005dd0 <shootSpaceship>:


void shootSpaceship(gameState_t* gameState){
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b09e      	sub	sp, #120	; 0x78
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	6078      	str	r0, [r7, #4]

	if(centerIsPressed()){
 8005dd8:	f7fc fb9a 	bl	8002510 <centerIsPressed>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80aa 	beq.w	8005f38 <shootSpaceship+0x168>
		gameState->soundToPlay = 1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8005dec:	2300      	movs	r3, #0
 8005dee:	667b      	str	r3, [r7, #100]	; 0x64
 8005df0:	e09a      	b.n	8005f28 <shootSpaceship+0x158>
			if(i ==2){
 8005df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d147      	bne.n	8005e88 <shootSpaceship+0xb8>
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f7fd faae 	bl	800335a <intToFp>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e02:	4b4f      	ldr	r3, [pc, #316]	; (8005f40 <shootSpaceship+0x170>)
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
				position_t bulletPos = {gameState->spaceship.position.x-intToFp(spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695c      	ldr	r4, [r3, #20]
 8005e0a:	2007      	movs	r0, #7
 8005e0c:	f7fd faa5 	bl	800335a <intToFp>
 8005e10:	4603      	mov	r3, r0
 8005e12:	1ae3      	subs	r3, r4, r3
 8005e14:	657b      	str	r3, [r7, #84]	; 0x54
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699c      	ldr	r4, [r3, #24]
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f7fd fa9d 	bl	800335a <intToFp>
 8005e20:	4603      	mov	r3, r0
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	1ae3      	subs	r3, r4, r3
 8005e26:	65bb      	str	r3, [r7, #88]	; 0x58
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8005e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	611a      	str	r2, [r3, #16]
 8005e38:	615a      	str	r2, [r3, #20]
 8005e3a:	619a      	str	r2, [r3, #24]
 8005e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e48:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e60:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e68:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8005e6c:	687d      	ldr	r5, [r7, #4]
 8005e6e:	466c      	mov	r4, sp
 8005e70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e80:	4628      	mov	r0, r5
 8005e82:	f7fe fe0b 	bl	8004a9c <appendBullet>
 8005e86:	e04c      	b.n	8005f22 <shootSpaceship+0x152>
			} else {
				vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f7fd fa66 	bl	800335a <intToFp>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30
 8005e92:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <shootSpaceship+0x170>)
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
				position_t bulletPos = {gameState->spaceship.position.x+intToFp(i*spaceshipWidth), gameState->spaceship.position.y-intToFp(1)*yScale};
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695c      	ldr	r4, [r3, #20]
 8005e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	00d2      	lsls	r2, r2, #3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fd fa57 	bl	800335a <intToFp>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4423      	add	r3, r4
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699c      	ldr	r4, [r3, #24]
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f7fd fa4f 	bl	800335a <intToFp>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	1ae3      	subs	r3, r4, r3
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
				bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	609a      	str	r2, [r3, #8]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	611a      	str	r2, [r3, #16]
 8005ed4:	615a      	str	r2, [r3, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
 8005ed8:	f107 030c 	add.w	r3, r7, #12
 8005edc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ef4:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ef8:	f107 031c 	add.w	r3, r7, #28
 8005efc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f04:	e883 0003 	stmia.w	r3, {r0, r1}
				appendBullet(&(gameState->bulletLL), bullet);
 8005f08:	687d      	ldr	r5, [r7, #4]
 8005f0a:	466c      	mov	r4, sp
 8005f0c:	f107 0318 	add.w	r3, r7, #24
 8005f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005f16:	f107 030c 	add.w	r3, r7, #12
 8005f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f7fe fdbd 	bl	8004a9c <appendBullet>
		for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8005f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f24:	3301      	adds	r3, #1
 8005f26:	667b      	str	r3, [r7, #100]	; 0x64
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f6ff af5d 	blt.w	8005df2 <shootSpaceship+0x22>
>>>>>>> Stashed changes
		}
>>>>>>> Stashed changes


		vector_t bulletVelocity = {intToFp(0),0xffff8000*yScale}; //0xffff8000 is -0,5
 80052fe:	2000      	movs	r0, #0
 8005300:	f7fd fe52 	bl	8002fa8 <intToFp>
 8005304:	4603      	mov	r3, r0
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <shootSpaceship+0x98>)
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
		position_t bulletPos = {gameState->spaceship.position.x, gameState->spaceship.position.y-intToFp(1)};
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691c      	ldr	r4, [r3, #16]
 8005316:	2001      	movs	r0, #1
 8005318:	f7fd fe46 	bl	8002fa8 <intToFp>
 800531c:	4603      	mov	r3, r0
 800531e:	1ae3      	subs	r3, r4, r3
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
		bullet_t bullet = {bulletPos, bulletPos, bulletVelocity};
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	f107 0220 	add.w	r2, r7, #32
 800532a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800532e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005332:	f107 0310 	add.w	r3, r7, #16
 8005336:	f107 0220 	add.w	r2, r7, #32
 800533a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800533e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005342:	f107 0318 	add.w	r3, r7, #24
 8005346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800534a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800534e:	e883 0003 	stmia.w	r3, {r0, r1}

		appendBullet(&(gameState->bulletLL), bullet);
 8005352:	687d      	ldr	r5, [r7, #4]
 8005354:	466c      	mov	r4, sp
 8005356:	f107 0314 	add.w	r3, r7, #20
 800535a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800535e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005368:	4628      	mov	r0, r5
 800536a:	f7ff f887 	bl	800447c <appendBullet>
	}
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800536e:	bf00      	nop
 8005370:	3730      	adds	r7, #48	; 0x30
 8005372:	46bd      	mov	sp, r7
 8005374:	bdb0      	pop	{r4, r5, r7, pc}
 8005376:	bf00      	nop
 8005378:	200001cc 	.word	0x200001cc
 800537c:	ffff0000 	.word	0xffff0000

08005380 <_getpid>:
=======
 80054fe:	bf00      	nop
 8005500:	3768      	adds	r7, #104	; 0x68
 8005502:	46bd      	mov	sp, r7
 8005504:	bdb0      	pop	{r4, r5, r7, pc}
 8005506:	bf00      	nop
 8005508:	200001c8 	.word	0x200001c8
 800550c:	ffff0000 	.word	0xffff0000

08005510 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fd faad 	bl	8002a7c <fpToInt>
 8005522:	4603      	mov	r3, r0
 8005524:	b2dc      	uxtb	r4, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fd faa6 	bl	8002a7c <fpToInt>
 8005530:	4603      	mov	r3, r0
 8005532:	0fda      	lsrs	r2, r3, #31
 8005534:	4413      	add	r3, r2
 8005536:	105b      	asrs	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	4619      	mov	r1, r3
 800553c:	4620      	mov	r0, r4
 800553e:	f7fe fa35 	bl	80039ac <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd fa98 	bl	8002a7c <fpToInt>
 800554c:	4603      	mov	r3, r0
 800554e:	b2dc      	uxtb	r4, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fd fa91 	bl	8002a7c <fpToInt>
 800555a:	4603      	mov	r3, r0
 800555c:	0fda      	lsrs	r2, r3, #31
 800555e:	4413      	add	r3, r2
 8005560:	105b      	asrs	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	4620      	mov	r0, r4
 8005568:	f7fe f9fe 	bl	8003968 <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e06e      	b.n	8005650 <drawSpaceship+0x140>

		if(i == 2){
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d12e      	bne.n	80055d6 <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fd fa7d 	bl	8002a7c <fpToInt>
 8005582:	4603      	mov	r3, r0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	3b07      	subs	r3, #7
 8005588:	b2dc      	uxtb	r4, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fa74 	bl	8002a7c <fpToInt>
 8005594:	4603      	mov	r3, r0
 8005596:	0fda      	lsrs	r2, r3, #31
 8005598:	4413      	add	r3, r2
 800559a:	105b      	asrs	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7fe f998 	bl	80038d6 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd fa66 	bl	8002a7c <fpToInt>
 80055b0:	4603      	mov	r3, r0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	3b07      	subs	r3, #7
 80055b6:	b2dc      	uxtb	r4, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd fa5d 	bl	8002a7c <fpToInt>
 80055c2:	4603      	mov	r3, r0
 80055c4:	0fda      	lsrs	r2, r3, #31
 80055c6:	4413      	add	r3, r2
 80055c8:	105b      	asrs	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fe f938 	bl	8003844 <drawMe>
 80055d4:	e039      	b.n	800564a <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd fa4e 	bl	8002a7c <fpToInt>
 80055e0:	4603      	mov	r3, r0
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	00c9      	lsls	r1, r1, #3
 80055ec:	1acb      	subs	r3, r1, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	b2dc      	uxtb	r4, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fa3f 	bl	8002a7c <fpToInt>
 80055fe:	4603      	mov	r3, r0
 8005600:	0fda      	lsrs	r2, r3, #31
 8005602:	4413      	add	r3, r2
 8005604:	105b      	asrs	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	4620      	mov	r0, r4
 800560c:	f7fe f963 	bl	80038d6 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fa31 	bl	8002a7c <fpToInt>
 800561a:	4603      	mov	r3, r0
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4619      	mov	r1, r3
 8005624:	00c9      	lsls	r1, r1, #3
 8005626:	1acb      	subs	r3, r1, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4413      	add	r3, r2
 800562c:	b2dc      	uxtb	r4, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd fa22 	bl	8002a7c <fpToInt>
 8005638:	4603      	mov	r3, r0
 800563a:	0fda      	lsrs	r2, r3, #31
 800563c:	4413      	add	r3, r2
 800563e:	105b      	asrs	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	4620      	mov	r0, r4
 8005646:	f7fe f8fd 	bl	8003844 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7f1b      	ldrb	r3, [r3, #28]
 8005654:	461a      	mov	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4293      	cmp	r3, r2
 800565a:	db8a      	blt.n	8005572 <drawSpaceship+0x62>
=======
 8005f38:	bf00      	nop
 8005f3a:	3768      	adds	r7, #104	; 0x68
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f40:	ffff0000 	.word	0xffff0000

08005f44 <drawSpaceship>:

void drawSpaceship(gameState_t* gameState){
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

	deleteAttachmentRods(fpToInt(gameState->spaceship.position.x), fpToInt(gameState->spaceship.position.y)/yScale);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fd fa17 	bl	8003384 <fpToInt>
 8005f56:	4603      	mov	r3, r0
 8005f58:	b2dc      	uxtb	r4, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fa10 	bl	8003384 <fpToInt>
 8005f64:	4603      	mov	r3, r0
 8005f66:	0fda      	lsrs	r2, r3, #31
 8005f68:	4413      	add	r3, r2
 8005f6a:	105b      	asrs	r3, r3, #1
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4620      	mov	r0, r4
 8005f72:	f7fe f9b3 	bl	80042dc <deleteAttachmentRods>
	drawAttachmentRods(fpToInt(gameState->spaceship.nextPosition.x), fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fd fa02 	bl	8003384 <fpToInt>
 8005f80:	4603      	mov	r3, r0
 8005f82:	b2dc      	uxtb	r4, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd f9fb 	bl	8003384 <fpToInt>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	0fda      	lsrs	r2, r3, #31
 8005f92:	4413      	add	r3, r2
 8005f94:	105b      	asrs	r3, r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7fe f97c 	bl	8004298 <drawAttachmentRods>

	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e06e      	b.n	8006084 <drawSpaceship+0x140>

		if(i == 2){
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d12e      	bne.n	800600a <drawSpaceship+0xc6>
			deleteMe(fpToInt(gameState->spaceship.position.x)-spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fd f9e7 	bl	8003384 <fpToInt>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	3b07      	subs	r3, #7
 8005fbc:	b2dc      	uxtb	r4, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd f9de 	bl	8003384 <fpToInt>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	0fda      	lsrs	r2, r3, #31
 8005fcc:	4413      	add	r3, r2
 8005fce:	105b      	asrs	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7fe f916 	bl	8004206 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)-spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd f9d0 	bl	8003384 <fpToInt>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	3b07      	subs	r3, #7
 8005fea:	b2dc      	uxtb	r4, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd f9c7 	bl	8003384 <fpToInt>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	0fda      	lsrs	r2, r3, #31
 8005ffa:	4413      	add	r3, r2
 8005ffc:	105b      	asrs	r3, r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	4620      	mov	r0, r4
 8006004:	f7fe f8b6 	bl	8004174 <drawMe>
 8006008:	e039      	b.n	800607e <drawSpaceship+0x13a>
		} else {
			deleteMe(fpToInt(gameState->spaceship.position.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.position.y)/yScale);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f9b8 	bl	8003384 <fpToInt>
 8006014:	4603      	mov	r3, r0
 8006016:	b2da      	uxtb	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	00c9      	lsls	r1, r1, #3
 8006020:	1acb      	subs	r3, r1, r3
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4413      	add	r3, r2
 8006026:	b2dc      	uxtb	r4, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fd f9a9 	bl	8003384 <fpToInt>
 8006032:	4603      	mov	r3, r0
 8006034:	0fda      	lsrs	r2, r3, #31
 8006036:	4413      	add	r3, r2
 8006038:	105b      	asrs	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	4620      	mov	r0, r4
 8006040:	f7fe f8e1 	bl	8004206 <deleteMe>
			drawMe(fpToInt(gameState->spaceship.nextPosition.x)+i*spaceshipWidth, fpToInt(gameState->spaceship.nextPosition.y)/yScale);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4618      	mov	r0, r3
 800604a:	f7fd f99b 	bl	8003384 <fpToInt>
 800604e:	4603      	mov	r3, r0
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	00c9      	lsls	r1, r1, #3
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	b2db      	uxtb	r3, r3
 800605e:	4413      	add	r3, r2
 8006060:	b2dc      	uxtb	r4, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd f98c 	bl	8003384 <fpToInt>
 800606c:	4603      	mov	r3, r0
 800606e:	0fda      	lsrs	r2, r3, #31
 8006070:	4413      	add	r3, r2
 8006072:	105b      	asrs	r3, r3, #1
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	4620      	mov	r0, r4
 800607a:	f7fe f87b 	bl	8004174 <drawMe>
	for (int i = 0; i<gameState->spaceship.numberOfParts; i++){
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800608a:	461a      	mov	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4293      	cmp	r3, r2
 8006090:	db89      	blt.n	8005fa6 <drawSpaceship+0x62>
>>>>>>> Stashed changes

	}



	gameState->spaceship.position=gameState->spaceship.nextPosition;
<<<<<<< Updated upstream
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	330c      	adds	r3, #12
 8005662:	3214      	adds	r2, #20
 8005664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005668:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}

08005674 <_getpid>:
>>>>>>> Stashed changes
=======
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	3314      	adds	r3, #20
 8006098:	321c      	adds	r2, #28
 800609a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800609e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}

080060aa <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
	return 1;
 8005384:	2301      	movs	r3, #1
}
 8005386:	4618      	mov	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_kill>:

int _kill(int pid, int sig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800539a:	f000 f94f 	bl	800563c <__errno>
 800539e:	4603      	mov	r3, r0
 80053a0:	2216      	movs	r2, #22
 80053a2:	601a      	str	r2, [r3, #0]
	return -1;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <_exit>:

void _exit (int status)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80053b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ffe7 	bl	8005390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80053c2:	e7fe      	b.n	80053c2 <_exit+0x12>

080053c4 <_read>:
=======
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
	return 1;
 8005678:	2301      	movs	r3, #1
}
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_kill>:

int _kill(int pid, int sig)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800568e:	f000 f94f 	bl	8005930 <__errno>
 8005692:	4603      	mov	r3, r0
 8005694:	2216      	movs	r2, #22
 8005696:	601a      	str	r2, [r3, #0]
	return -1;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <_exit>:

void _exit (int status)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ffe7 	bl	8005684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056b6:	e7fe      	b.n	80056b6 <_exit+0x12>

080056b8 <_read>:
>>>>>>> Stashed changes
=======
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0
	return 1;
 80060ae:	2301      	movs	r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <_kill>:

int _kill(int pid, int sig)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060c4:	f000 f94e 	bl	8006364 <__errno>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2216      	movs	r2, #22
 80060cc:	601a      	str	r2, [r3, #0]
	return -1;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_exit>:

void _exit (int status)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff ffe7 	bl	80060ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80060ec:	e7fe      	b.n	80060ec <_exit+0x12>

080060ee <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e00a      	b.n	80053ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053d6:	f3af 8000 	nop.w
 80053da:	4601      	mov	r1, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	60ba      	str	r2, [r7, #8]
 80053e2:	b2ca      	uxtb	r2, r1
 80053e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	3301      	adds	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	dbf0      	blt.n	80053d6 <_read+0x12>
	}

return len;
 80053f4:	687b      	ldr	r3, [r7, #4]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_close>:
=======
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e00a      	b.n	80056e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056ca:	f3af 8000 	nop.w
 80056ce:	4601      	mov	r1, r0
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	60ba      	str	r2, [r7, #8]
 80056d6:	b2ca      	uxtb	r2, r1
 80056d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	3301      	adds	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	dbf0      	blt.n	80056ca <_read+0x12>
	}

return len;
 80056e8:	687b      	ldr	r3, [r7, #4]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <_close>:
>>>>>>> Stashed changes
=======
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e00a      	b.n	8006116 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006100:	f3af 8000 	nop.w
 8006104:	4601      	mov	r1, r0
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	60ba      	str	r2, [r7, #8]
 800610c:	b2ca      	uxtb	r2, r1
 800610e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3301      	adds	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	dbf0      	blt.n	8006100 <_read+0x12>
	}

return len;
 800611e:	687b      	ldr	r3, [r7, #4]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_close>:
>>>>>>> Stashed changes
	}
	return len;
}

int _close(int file)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	return -1;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <_fstat>:
=======
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
	return -1;
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <_fstat>:
>>>>>>> Stashed changes
=======
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	return -1;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005426:	605a      	str	r2, [r3, #4]
	return 0;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <_isatty>:

int _isatty(int file)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
	return 1;
 800543e:	2301      	movs	r3, #1
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	return 0;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <_sbrk>:
=======
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800571a:	605a      	str	r2, [r3, #4]
	return 0;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <_isatty>:

int _isatty(int file)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
	return 1;
 8005732:	2301      	movs	r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	return 0;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <_sbrk>:
>>>>>>> Stashed changes
=======
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006150:	605a      	str	r2, [r3, #4]
	return 0;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <_isatty>:

int _isatty(int file)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	return 1;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
	return 0;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_sbrk>:
>>>>>>> Stashed changes
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
=======
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <_sbrk+0x50>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <_sbrk+0x16>
		heap_end = &end;
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <_sbrk+0x50>)
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <_sbrk+0x54>)
 800547c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <_sbrk+0x50>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <_sbrk+0x50>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	466a      	mov	r2, sp
 800548e:	4293      	cmp	r3, r2
 8005490:	d907      	bls.n	80054a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005492:	f000 f8d3 	bl	800563c <__errno>
 8005496:	4603      	mov	r3, r0
 8005498:	220c      	movs	r2, #12
 800549a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a0:	e006      	b.n	80054b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <_sbrk+0x50>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	4a03      	ldr	r2, [pc, #12]	; (80054b8 <_sbrk+0x50>)
 80054ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200001c0 	.word	0x200001c0
 80054bc:	200001e0 	.word	0x200001e0

080054c0 <SystemInit>:
=======
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <_sbrk+0x50>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <_sbrk+0x16>
		heap_end = &end;
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <_sbrk+0x50>)
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <_sbrk+0x54>)
 8005770:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <_sbrk+0x50>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <_sbrk+0x50>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	466a      	mov	r2, sp
 8005782:	4293      	cmp	r3, r2
 8005784:	d907      	bls.n	8005796 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005786:	f000 f8d3 	bl	8005930 <__errno>
 800578a:	4603      	mov	r3, r0
 800578c:	220c      	movs	r2, #12
 800578e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005794:	e006      	b.n	80057a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <_sbrk+0x50>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	4a03      	ldr	r2, [pc, #12]	; (80057ac <_sbrk+0x50>)
 80057a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200001bc 	.word	0x200001bc
 80057b0:	200001e0 	.word	0x200001e0

080057b4 <SystemInit>:
>>>>>>> Stashed changes
=======
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <_sbrk+0x50>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <_sbrk+0x16>
		heap_end = &end;
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <_sbrk+0x50>)
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <_sbrk+0x54>)
 80061a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <_sbrk+0x50>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <_sbrk+0x50>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	466a      	mov	r2, sp
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d907      	bls.n	80061ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80061ba:	f000 f8d3 	bl	8006364 <__errno>
 80061be:	4603      	mov	r3, r0
 80061c0:	220c      	movs	r2, #12
 80061c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c8:	e006      	b.n	80061d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <_sbrk+0x50>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	4a03      	ldr	r2, [pc, #12]	; (80061e0 <_sbrk+0x50>)
 80061d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	200001bc 	.word	0x200001bc
 80061e4:	200001e0 	.word	0x200001e0

080061e8 <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <SystemInit+0x84>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <SystemInit+0x84>)
 80054cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <SystemInit+0x84>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <SystemInit+0x84>)
 80057c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
=======
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <SystemInit+0x84>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <SystemInit+0x84>)
 80061f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80054d4:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <SystemInit+0x88>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <SystemInit+0x88>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <SystemInit+0x88>)
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4918      	ldr	r1, [pc, #96]	; (8005548 <SystemInit+0x88>)
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <SystemInit+0x8c>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80054ec:	4b16      	ldr	r3, [pc, #88]	; (8005548 <SystemInit+0x88>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <SystemInit+0x88>)
 80054f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80054fc:	4b12      	ldr	r3, [pc, #72]	; (8005548 <SystemInit+0x88>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a11      	ldr	r2, [pc, #68]	; (8005548 <SystemInit+0x88>)
 8005502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005506:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <SystemInit+0x88>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <SystemInit+0x88>)
 800550e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005512:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <SystemInit+0x88>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a0b      	ldr	r2, [pc, #44]	; (8005548 <SystemInit+0x88>)
 800551a:	f023 030f 	bic.w	r3, r3, #15
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <SystemInit+0x88>)
 8005522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005524:	4908      	ldr	r1, [pc, #32]	; (8005548 <SystemInit+0x88>)
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <SystemInit+0x90>)
 8005528:	4013      	ands	r3, r2
 800552a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <SystemInit+0x88>)
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
=======
 80057c8:	4b1c      	ldr	r3, [pc, #112]	; (800583c <SystemInit+0x88>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <SystemInit+0x88>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <SystemInit+0x88>)
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4918      	ldr	r1, [pc, #96]	; (800583c <SystemInit+0x88>)
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <SystemInit+0x8c>)
 80057dc:	4013      	ands	r3, r2
 80057de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <SystemInit+0x88>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <SystemInit+0x88>)
 80057e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80057ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80057f0:	4b12      	ldr	r3, [pc, #72]	; (800583c <SystemInit+0x88>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a11      	ldr	r2, [pc, #68]	; (800583c <SystemInit+0x88>)
 80057f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <SystemInit+0x88>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4a0e      	ldr	r2, [pc, #56]	; (800583c <SystemInit+0x88>)
 8005802:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005806:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <SystemInit+0x88>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a0b      	ldr	r2, [pc, #44]	; (800583c <SystemInit+0x88>)
 800580e:	f023 030f 	bic.w	r3, r3, #15
 8005812:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <SystemInit+0x88>)
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	4908      	ldr	r1, [pc, #32]	; (800583c <SystemInit+0x88>)
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <SystemInit+0x90>)
 800581c:	4013      	ands	r3, r2
 800581e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <SystemInit+0x88>)
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <SystemInit+0x88>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <SystemInit+0x88>)
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8006208:	4b19      	ldr	r3, [pc, #100]	; (8006270 <SystemInit+0x88>)
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4918      	ldr	r1, [pc, #96]	; (8006270 <SystemInit+0x88>)
 800620e:	4b19      	ldr	r3, [pc, #100]	; (8006274 <SystemInit+0x8c>)
 8006210:	4013      	ands	r3, r2
 8006212:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <SystemInit+0x88>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <SystemInit+0x88>)
 800621a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800621e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006222:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <SystemInit+0x88>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <SystemInit+0x88>)
 800622a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <SystemInit+0x88>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4a0e      	ldr	r2, [pc, #56]	; (8006270 <SystemInit+0x88>)
 8006236:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800623a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <SystemInit+0x88>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a0b      	ldr	r2, [pc, #44]	; (8006270 <SystemInit+0x88>)
 8006242:	f023 030f 	bic.w	r3, r3, #15
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <SystemInit+0x88>)
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	4908      	ldr	r1, [pc, #32]	; (8006270 <SystemInit+0x88>)
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <SystemInit+0x90>)
 8006250:	4013      	ands	r3, r2
 8006252:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <SystemInit+0x88>)
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005532:	f000 f80f 	bl	8005554 <SetSysClock>
=======
 8005826:	f000 f80f 	bl	8005848 <SetSysClock>
>>>>>>> Stashed changes
=======
 800625a:	f000 f80f 	bl	800627c <SetSysClock>
>>>>>>> Stashed changes
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005536:	4b03      	ldr	r3, [pc, #12]	; (8005544 <SystemInit+0x84>)
 8005538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800553c:	609a      	str	r2, [r3, #8]
#endif  
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000ed00 	.word	0xe000ed00
 8005548:	40021000 	.word	0x40021000
 800554c:	f87fc00c 	.word	0xf87fc00c
 8005550:	ff00fccc 	.word	0xff00fccc

08005554 <SetSysClock>:
=======
 800582a:	4b03      	ldr	r3, [pc, #12]	; (8005838 <SystemInit+0x84>)
 800582c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005830:	609a      	str	r2, [r3, #8]
#endif  
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	e000ed00 	.word	0xe000ed00
 800583c:	40021000 	.word	0x40021000
 8005840:	f87fc00c 	.word	0xf87fc00c
 8005844:	ff00fccc 	.word	0xff00fccc

08005848 <SetSysClock>:
>>>>>>> Stashed changes
=======
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <SystemInit+0x84>)
 8006260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006264:	609a      	str	r2, [r3, #8]
#endif  
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	e000ed00 	.word	0xe000ed00
 8006270:	40021000 	.word	0x40021000
 8006274:	f87fc00c 	.word	0xf87fc00c
 8006278:	ff00fccc 	.word	0xff00fccc

0800627c <SetSysClock>:
>>>>>>> Stashed changes
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
=======
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <SetSysClock+0x8c>)
 800555a:	2212      	movs	r2, #18
 800555c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800555e:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <SetSysClock+0x90>)
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <SetSysClock+0x90>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <SetSysClock+0x90>)
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <SetSysClock+0x90>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800556e:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <SetSysClock+0x90>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <SetSysClock+0x90>)
 8005574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005578:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <SetSysClock+0x90>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <SetSysClock+0x90>)
 8005580:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005584:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <SetSysClock+0x90>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <SetSysClock+0x90>)
 800558c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8005590:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <SetSysClock+0x90>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <SetSysClock+0x90>)
 8005598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800559e:	bf00      	nop
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <SetSysClock+0x90>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f9      	beq.n	80055a0 <SetSysClock+0x4c>
=======
 800584c:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <SetSysClock+0x8c>)
 800584e:	2212      	movs	r2, #18
 8005850:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <SetSysClock+0x90>)
 8005854:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <SetSysClock+0x90>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <SetSysClock+0x90>)
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <SetSysClock+0x90>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005862:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <SetSysClock+0x90>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <SetSysClock+0x90>)
 8005868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800586c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800586e:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <SetSysClock+0x90>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <SetSysClock+0x90>)
 8005874:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005878:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800587a:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <SetSysClock+0x90>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <SetSysClock+0x90>)
 8005880:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8005884:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <SetSysClock+0x90>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <SetSysClock+0x90>)
 800588c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005892:	bf00      	nop
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <SetSysClock+0x90>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f9      	beq.n	8005894 <SetSysClock+0x4c>
>>>>>>> Stashed changes
=======
 8006280:	4b21      	ldr	r3, [pc, #132]	; (8006308 <SetSysClock+0x8c>)
 8006282:	2212      	movs	r2, #18
 8006284:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8006286:	4b21      	ldr	r3, [pc, #132]	; (800630c <SetSysClock+0x90>)
 8006288:	4a20      	ldr	r2, [pc, #128]	; (800630c <SetSysClock+0x90>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800628e:	4b1f      	ldr	r3, [pc, #124]	; (800630c <SetSysClock+0x90>)
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <SetSysClock+0x90>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <SetSysClock+0x90>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4a1c      	ldr	r2, [pc, #112]	; (800630c <SetSysClock+0x90>)
 800629c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062a0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80062a2:	4b1a      	ldr	r3, [pc, #104]	; (800630c <SetSysClock+0x90>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4a19      	ldr	r2, [pc, #100]	; (800630c <SetSysClock+0x90>)
 80062a8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80062ac:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80062ae:	4b17      	ldr	r3, [pc, #92]	; (800630c <SetSysClock+0x90>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4a16      	ldr	r2, [pc, #88]	; (800630c <SetSysClock+0x90>)
 80062b4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80062b8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <SetSysClock+0x90>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a13      	ldr	r2, [pc, #76]	; (800630c <SetSysClock+0x90>)
 80062c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062c4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80062c6:	bf00      	nop
 80062c8:	4b10      	ldr	r3, [pc, #64]	; (800630c <SetSysClock+0x90>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f9      	beq.n	80062c8 <SetSysClock+0x4c>
>>>>>>> Stashed changes
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <SetSysClock+0x90>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <SetSysClock+0x90>)
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <SetSysClock+0x90>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <SetSysClock+0x90>)
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80055c4:	bf00      	nop
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <SetSysClock+0x90>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d1f9      	bne.n	80055c6 <SetSysClock+0x72>
  {
  }
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40022000 	.word	0x40022000
 80055e4:	40021000 	.word	0x40021000

080055e8 <Reset_Handler>:
=======
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <SetSysClock+0x90>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <SetSysClock+0x90>)
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <SetSysClock+0x90>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <SetSysClock+0x90>)
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80058b8:	bf00      	nop
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <SetSysClock+0x90>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d1f9      	bne.n	80058ba <SetSysClock+0x72>
  {
  }
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40022000 	.word	0x40022000
 80058d8:	40021000 	.word	0x40021000

080058dc <Reset_Handler>:
>>>>>>> Stashed changes
=======
 80062d4:	4b0d      	ldr	r3, [pc, #52]	; (800630c <SetSysClock+0x90>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <SetSysClock+0x90>)
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <SetSysClock+0x90>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a09      	ldr	r2, [pc, #36]	; (800630c <SetSysClock+0x90>)
 80062e6:	f043 0302 	orr.w	r3, r3, #2
 80062ea:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80062ec:	bf00      	nop
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <SetSysClock+0x90>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d1f9      	bne.n	80062ee <SetSysClock+0x72>
  {
  }
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40022000 	.word	0x40022000
 800630c:	40021000 	.word	0x40021000

08006310 <Reset_Handler>:
>>>>>>> Stashed changes

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80055e8:	480d      	ldr	r0, [pc, #52]	; (8005620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055ec:	480d      	ldr	r0, [pc, #52]	; (8005624 <LoopForever+0x6>)
  ldr r1, =_edata
 80055ee:	490e      	ldr	r1, [pc, #56]	; (8005628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055f0:	4a0e      	ldr	r2, [pc, #56]	; (800562c <LoopForever+0xe>)
  movs r3, #0
 80055f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f4:	e002      	b.n	80055fc <LoopCopyDataInit>

080055f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055fa:	3304      	adds	r3, #4

080055fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005600:	d3f9      	bcc.n	80055f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005602:	4a0b      	ldr	r2, [pc, #44]	; (8005630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005604:	4c0b      	ldr	r4, [pc, #44]	; (8005634 <LoopForever+0x16>)
  movs r3, #0
 8005606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005608:	e001      	b.n	800560e <LoopFillZerobss>

0800560a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800560a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800560c:	3204      	adds	r2, #4

0800560e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800560e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005610:	d3fb      	bcc.n	800560a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005612:	f7ff ff55 	bl	80054c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005616:	f000 f817 	bl	8005648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800561a:	f7ff f9e3 	bl	80049e4 <main>

0800561e <LoopForever>:

LoopForever:
    b LoopForever
 800561e:	e7fe      	b.n	800561e <LoopForever>
  ldr   r0, =_estack
 8005620:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005628:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800562c:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8005630:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8005634:	200001e0 	.word	0x200001e0

08005638 <ADC1_2_IRQHandler>:
=======
 80058dc:	480d      	ldr	r0, [pc, #52]	; (8005914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058e0:	480d      	ldr	r0, [pc, #52]	; (8005918 <LoopForever+0x6>)
  ldr r1, =_edata
 80058e2:	490e      	ldr	r1, [pc, #56]	; (800591c <LoopForever+0xa>)
  ldr r2, =_sidata
 80058e4:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <LoopForever+0xe>)
  movs r3, #0
 80058e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058e8:	e002      	b.n	80058f0 <LoopCopyDataInit>

080058ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ee:	3304      	adds	r3, #4

080058f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058f4:	d3f9      	bcc.n	80058ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058f6:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058f8:	4c0b      	ldr	r4, [pc, #44]	; (8005928 <LoopForever+0x16>)
  movs r3, #0
 80058fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058fc:	e001      	b.n	8005902 <LoopFillZerobss>

080058fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005900:	3204      	adds	r2, #4

08005902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005904:	d3fb      	bcc.n	80058fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005906:	f7ff ff55 	bl	80057b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800590a:	f000 f817 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800590e:	f7fe febd 	bl	800468c <main>

08005912 <LoopForever>:

LoopForever:
    b LoopForever
 8005912:	e7fe      	b.n	8005912 <LoopForever>
  ldr   r0, =_estack
 8005914:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800591c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8005920:	080074f4 	.word	0x080074f4
  ldr r2, =_sbss
 8005924:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005928:	200001dc 	.word	0x200001dc

0800592c <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
=======
 8006310:	480d      	ldr	r0, [pc, #52]	; (8006348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006314:	480d      	ldr	r0, [pc, #52]	; (800634c <LoopForever+0x6>)
  ldr r1, =_edata
 8006316:	490e      	ldr	r1, [pc, #56]	; (8006350 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006318:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <LoopForever+0xe>)
  movs r3, #0
 800631a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800631c:	e002      	b.n	8006324 <LoopCopyDataInit>

0800631e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800631e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006322:	3304      	adds	r3, #4

08006324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006328:	d3f9      	bcc.n	800631e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800632a:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <LoopForever+0x12>)
  ldr r4, =_ebss
 800632c:	4c0b      	ldr	r4, [pc, #44]	; (800635c <LoopForever+0x16>)
  movs r3, #0
 800632e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006330:	e001      	b.n	8006336 <LoopFillZerobss>

08006332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006334:	3204      	adds	r2, #4

08006336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006338:	d3fb      	bcc.n	8006332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800633a:	f7ff ff55 	bl	80061e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800633e:	f000 f817 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006342:	f7fe fe25 	bl	8004f90 <main>

08006346 <LoopForever>:

LoopForever:
    b LoopForever
 8006346:	e7fe      	b.n	8006346 <LoopForever>
  ldr   r0, =_estack
 8006348:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800634c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006350:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8006354:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 8006358:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800635c:	200001dc 	.word	0x200001dc

08006360 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005638:	e7fe      	b.n	8005638 <ADC1_2_IRQHandler>
	...

0800563c <__errno>:
 800563c:	4b01      	ldr	r3, [pc, #4]	; (8005644 <__errno+0x8>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000002c 	.word	0x2000002c

08005648 <__libc_init_array>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4d0d      	ldr	r5, [pc, #52]	; (8005680 <__libc_init_array+0x38>)
 800564c:	4c0d      	ldr	r4, [pc, #52]	; (8005684 <__libc_init_array+0x3c>)
 800564e:	1b64      	subs	r4, r4, r5
 8005650:	10a4      	asrs	r4, r4, #2
 8005652:	2600      	movs	r6, #0
 8005654:	42a6      	cmp	r6, r4
 8005656:	d109      	bne.n	800566c <__libc_init_array+0x24>
 8005658:	4d0b      	ldr	r5, [pc, #44]	; (8005688 <__libc_init_array+0x40>)
 800565a:	4c0c      	ldr	r4, [pc, #48]	; (800568c <__libc_init_array+0x44>)
 800565c:	f001 fae6 	bl	8006c2c <_init>
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	2600      	movs	r6, #0
 8005666:	42a6      	cmp	r6, r4
 8005668:	d105      	bne.n	8005676 <__libc_init_array+0x2e>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005670:	4798      	blx	r3
 8005672:	3601      	adds	r6, #1
 8005674:	e7ee      	b.n	8005654 <__libc_init_array+0xc>
 8005676:	f855 3b04 	ldr.w	r3, [r5], #4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
 800567e:	e7f2      	b.n	8005666 <__libc_init_array+0x1e>
 8005680:	080073ac 	.word	0x080073ac
 8005684:	080073ac 	.word	0x080073ac
 8005688:	080073ac 	.word	0x080073ac
 800568c:	080073b0 	.word	0x080073b0

08005690 <malloc>:
 8005690:	4b02      	ldr	r3, [pc, #8]	; (800569c <malloc+0xc>)
 8005692:	4601      	mov	r1, r0
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f000 b863 	b.w	8005760 <_malloc_r>
 800569a:	bf00      	nop
 800569c:	2000002c 	.word	0x2000002c

080056a0 <free>:
 80056a0:	4b02      	ldr	r3, [pc, #8]	; (80056ac <free+0xc>)
 80056a2:	4601      	mov	r1, r0
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	f000 b80b 	b.w	80056c0 <_free_r>
 80056aa:	bf00      	nop
 80056ac:	2000002c 	.word	0x2000002c

080056b0 <memset>:
 80056b0:	4402      	add	r2, r0
 80056b2:	4603      	mov	r3, r0
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d100      	bne.n	80056ba <memset+0xa>
 80056b8:	4770      	bx	lr
 80056ba:	f803 1b01 	strb.w	r1, [r3], #1
 80056be:	e7f9      	b.n	80056b4 <memset+0x4>

080056c0 <_free_r>:
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d048      	beq.n	8005758 <_free_r+0x98>
 80056c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ca:	9001      	str	r0, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f1a1 0404 	sub.w	r4, r1, #4
 80056d2:	bfb8      	it	lt
 80056d4:	18e4      	addlt	r4, r4, r3
 80056d6:	f000 fd9b 	bl	8006210 <__malloc_lock>
 80056da:	4a20      	ldr	r2, [pc, #128]	; (800575c <_free_r+0x9c>)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	4615      	mov	r5, r2
 80056e2:	b933      	cbnz	r3, 80056f2 <_free_r+0x32>
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	6014      	str	r4, [r2, #0]
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ee:	f000 bd95 	b.w	800621c <__malloc_unlock>
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	d90b      	bls.n	800570e <_free_r+0x4e>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	1862      	adds	r2, r4, r1
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bf04      	itt	eq
 80056fe:	681a      	ldreq	r2, [r3, #0]
 8005700:	685b      	ldreq	r3, [r3, #4]
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	bf04      	itt	eq
 8005706:	1852      	addeq	r2, r2, r1
 8005708:	6022      	streq	r2, [r4, #0]
 800570a:	602c      	str	r4, [r5, #0]
 800570c:	e7ec      	b.n	80056e8 <_free_r+0x28>
 800570e:	461a      	mov	r2, r3
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	b10b      	cbz	r3, 8005718 <_free_r+0x58>
 8005714:	42a3      	cmp	r3, r4
 8005716:	d9fa      	bls.n	800570e <_free_r+0x4e>
 8005718:	6811      	ldr	r1, [r2, #0]
 800571a:	1855      	adds	r5, r2, r1
 800571c:	42a5      	cmp	r5, r4
 800571e:	d10b      	bne.n	8005738 <_free_r+0x78>
 8005720:	6824      	ldr	r4, [r4, #0]
 8005722:	4421      	add	r1, r4
 8005724:	1854      	adds	r4, r2, r1
 8005726:	42a3      	cmp	r3, r4
 8005728:	6011      	str	r1, [r2, #0]
 800572a:	d1dd      	bne.n	80056e8 <_free_r+0x28>
 800572c:	681c      	ldr	r4, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	6053      	str	r3, [r2, #4]
 8005732:	4421      	add	r1, r4
 8005734:	6011      	str	r1, [r2, #0]
 8005736:	e7d7      	b.n	80056e8 <_free_r+0x28>
 8005738:	d902      	bls.n	8005740 <_free_r+0x80>
 800573a:	230c      	movs	r3, #12
 800573c:	6003      	str	r3, [r0, #0]
 800573e:	e7d3      	b.n	80056e8 <_free_r+0x28>
 8005740:	6825      	ldr	r5, [r4, #0]
 8005742:	1961      	adds	r1, r4, r5
 8005744:	428b      	cmp	r3, r1
 8005746:	bf04      	itt	eq
 8005748:	6819      	ldreq	r1, [r3, #0]
 800574a:	685b      	ldreq	r3, [r3, #4]
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	bf04      	itt	eq
 8005750:	1949      	addeq	r1, r1, r5
 8005752:	6021      	streq	r1, [r4, #0]
 8005754:	6054      	str	r4, [r2, #4]
 8005756:	e7c7      	b.n	80056e8 <_free_r+0x28>
 8005758:	b003      	add	sp, #12
 800575a:	bd30      	pop	{r4, r5, pc}
 800575c:	200001c4 	.word	0x200001c4

08005760 <_malloc_r>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	1ccd      	adds	r5, r1, #3
 8005764:	f025 0503 	bic.w	r5, r5, #3
 8005768:	3508      	adds	r5, #8
 800576a:	2d0c      	cmp	r5, #12
 800576c:	bf38      	it	cc
 800576e:	250c      	movcc	r5, #12
 8005770:	2d00      	cmp	r5, #0
 8005772:	4606      	mov	r6, r0
 8005774:	db01      	blt.n	800577a <_malloc_r+0x1a>
 8005776:	42a9      	cmp	r1, r5
 8005778:	d903      	bls.n	8005782 <_malloc_r+0x22>
 800577a:	230c      	movs	r3, #12
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	2000      	movs	r0, #0
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005782:	f000 fd45 	bl	8006210 <__malloc_lock>
 8005786:	4921      	ldr	r1, [pc, #132]	; (800580c <_malloc_r+0xac>)
 8005788:	680a      	ldr	r2, [r1, #0]
 800578a:	4614      	mov	r4, r2
 800578c:	b99c      	cbnz	r4, 80057b6 <_malloc_r+0x56>
 800578e:	4f20      	ldr	r7, [pc, #128]	; (8005810 <_malloc_r+0xb0>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b923      	cbnz	r3, 800579e <_malloc_r+0x3e>
 8005794:	4621      	mov	r1, r4
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f94e 	bl	8005a38 <_sbrk_r>
 800579c:	6038      	str	r0, [r7, #0]
 800579e:	4629      	mov	r1, r5
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f949 	bl	8005a38 <_sbrk_r>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	d123      	bne.n	80057f2 <_malloc_r+0x92>
 80057aa:	230c      	movs	r3, #12
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 fd34 	bl	800621c <__malloc_unlock>
 80057b4:	e7e3      	b.n	800577e <_malloc_r+0x1e>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	1b5b      	subs	r3, r3, r5
 80057ba:	d417      	bmi.n	80057ec <_malloc_r+0x8c>
 80057bc:	2b0b      	cmp	r3, #11
 80057be:	d903      	bls.n	80057c8 <_malloc_r+0x68>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	441c      	add	r4, r3
 80057c4:	6025      	str	r5, [r4, #0]
 80057c6:	e004      	b.n	80057d2 <_malloc_r+0x72>
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	42a2      	cmp	r2, r4
 80057cc:	bf0c      	ite	eq
 80057ce:	600b      	streq	r3, [r1, #0]
 80057d0:	6053      	strne	r3, [r2, #4]
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 fd22 	bl	800621c <__malloc_unlock>
 80057d8:	f104 000b 	add.w	r0, r4, #11
 80057dc:	1d23      	adds	r3, r4, #4
 80057de:	f020 0007 	bic.w	r0, r0, #7
 80057e2:	1ac2      	subs	r2, r0, r3
 80057e4:	d0cc      	beq.n	8005780 <_malloc_r+0x20>
 80057e6:	1a1b      	subs	r3, r3, r0
 80057e8:	50a3      	str	r3, [r4, r2]
 80057ea:	e7c9      	b.n	8005780 <_malloc_r+0x20>
 80057ec:	4622      	mov	r2, r4
 80057ee:	6864      	ldr	r4, [r4, #4]
 80057f0:	e7cc      	b.n	800578c <_malloc_r+0x2c>
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d0e3      	beq.n	80057c4 <_malloc_r+0x64>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 f91a 	bl	8005a38 <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d1dd      	bne.n	80057c4 <_malloc_r+0x64>
 8005808:	e7cf      	b.n	80057aa <_malloc_r+0x4a>
 800580a:	bf00      	nop
 800580c:	200001c4 	.word	0x200001c4
 8005810:	200001c8 	.word	0x200001c8

08005814 <iprintf>:
 8005814:	b40f      	push	{r0, r1, r2, r3}
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <iprintf+0x2c>)
 8005818:	b513      	push	{r0, r1, r4, lr}
 800581a:	681c      	ldr	r4, [r3, #0]
 800581c:	b124      	cbz	r4, 8005828 <iprintf+0x14>
 800581e:	69a3      	ldr	r3, [r4, #24]
 8005820:	b913      	cbnz	r3, 8005828 <iprintf+0x14>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fbde 	bl	8005fe4 <__sinit>
 8005828:	ab05      	add	r3, sp, #20
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	68a1      	ldr	r1, [r4, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fd23 	bl	800627c <_vfiprintf_r>
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	2000002c 	.word	0x2000002c

08005844 <putchar>:
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <putchar+0x28>)
 8005846:	b513      	push	{r0, r1, r4, lr}
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	4601      	mov	r1, r0
 800584c:	b134      	cbz	r4, 800585c <putchar+0x18>
 800584e:	69a3      	ldr	r3, [r4, #24]
 8005850:	b923      	cbnz	r3, 800585c <putchar+0x18>
 8005852:	9001      	str	r0, [sp, #4]
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fbc5 	bl	8005fe4 <__sinit>
 800585a:	9901      	ldr	r1, [sp, #4]
 800585c:	68a2      	ldr	r2, [r4, #8]
 800585e:	4620      	mov	r0, r4
 8005860:	b002      	add	sp, #8
 8005862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005866:	f000 bfcd 	b.w	8006804 <_putc_r>
 800586a:	bf00      	nop
 800586c:	2000002c 	.word	0x2000002c

08005870 <_puts_r>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4605      	mov	r5, r0
 8005876:	b118      	cbz	r0, 8005880 <_puts_r+0x10>
 8005878:	6983      	ldr	r3, [r0, #24]
 800587a:	b90b      	cbnz	r3, 8005880 <_puts_r+0x10>
 800587c:	f000 fbb2 	bl	8005fe4 <__sinit>
 8005880:	69ab      	ldr	r3, [r5, #24]
 8005882:	68ac      	ldr	r4, [r5, #8]
 8005884:	b913      	cbnz	r3, 800588c <_puts_r+0x1c>
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fbac 	bl	8005fe4 <__sinit>
 800588c:	4b2c      	ldr	r3, [pc, #176]	; (8005940 <_puts_r+0xd0>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d120      	bne.n	80058d4 <_puts_r+0x64>
 8005892:	686c      	ldr	r4, [r5, #4]
 8005894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005896:	07db      	lsls	r3, r3, #31
 8005898:	d405      	bmi.n	80058a6 <_puts_r+0x36>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	0598      	lsls	r0, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_puts_r+0x36>
 80058a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a2:	f000 fc4f 	bl	8006144 <__retarget_lock_acquire_recursive>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	0719      	lsls	r1, r3, #28
 80058aa:	d51d      	bpl.n	80058e8 <_puts_r+0x78>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b1db      	cbz	r3, 80058e8 <_puts_r+0x78>
 80058b0:	3e01      	subs	r6, #1
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60a3      	str	r3, [r4, #8]
 80058bc:	bb39      	cbnz	r1, 800590e <_puts_r+0x9e>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da38      	bge.n	8005934 <_puts_r+0xc4>
 80058c2:	4622      	mov	r2, r4
 80058c4:	210a      	movs	r1, #10
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f994 	bl	8005bf4 <__swbuf_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d011      	beq.n	80058f4 <_puts_r+0x84>
 80058d0:	250a      	movs	r5, #10
 80058d2:	e011      	b.n	80058f8 <_puts_r+0x88>
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <_puts_r+0xd4>)
 80058d6:	429c      	cmp	r4, r3
 80058d8:	d101      	bne.n	80058de <_puts_r+0x6e>
 80058da:	68ac      	ldr	r4, [r5, #8]
 80058dc:	e7da      	b.n	8005894 <_puts_r+0x24>
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <_puts_r+0xd8>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	bf08      	it	eq
 80058e4:	68ec      	ldreq	r4, [r5, #12]
 80058e6:	e7d5      	b.n	8005894 <_puts_r+0x24>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f9d4 	bl	8005c98 <__swsetup_r>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0dd      	beq.n	80058b0 <_puts_r+0x40>
 80058f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80058f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058fa:	07da      	lsls	r2, r3, #31
 80058fc:	d405      	bmi.n	800590a <_puts_r+0x9a>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	d402      	bmi.n	800590a <_puts_r+0x9a>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 fc1e 	bl	8006146 <__retarget_lock_release_recursive>
 800590a:	4628      	mov	r0, r5
 800590c:	bd70      	pop	{r4, r5, r6, pc}
 800590e:	2b00      	cmp	r3, #0
 8005910:	da04      	bge.n	800591c <_puts_r+0xac>
 8005912:	69a2      	ldr	r2, [r4, #24]
 8005914:	429a      	cmp	r2, r3
 8005916:	dc06      	bgt.n	8005926 <_puts_r+0xb6>
 8005918:	290a      	cmp	r1, #10
 800591a:	d004      	beq.n	8005926 <_puts_r+0xb6>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	6022      	str	r2, [r4, #0]
 8005922:	7019      	strb	r1, [r3, #0]
 8005924:	e7c5      	b.n	80058b2 <_puts_r+0x42>
 8005926:	4622      	mov	r2, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 f963 	bl	8005bf4 <__swbuf_r>
 800592e:	3001      	adds	r0, #1
 8005930:	d1bf      	bne.n	80058b2 <_puts_r+0x42>
 8005932:	e7df      	b.n	80058f4 <_puts_r+0x84>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	250a      	movs	r5, #10
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	6022      	str	r2, [r4, #0]
 800593c:	701d      	strb	r5, [r3, #0]
 800593e:	e7db      	b.n	80058f8 <_puts_r+0x88>
 8005940:	08007330 	.word	0x08007330
 8005944:	08007350 	.word	0x08007350
 8005948:	08007310 	.word	0x08007310

0800594c <puts>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <puts+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7ff bf8d 	b.w	8005870 <_puts_r>
 8005956:	bf00      	nop
 8005958:	2000002c 	.word	0x2000002c

0800595c <srand>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <srand+0x44>)
 8005960:	681d      	ldr	r5, [r3, #0]
 8005962:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005964:	4604      	mov	r4, r0
 8005966:	b9b3      	cbnz	r3, 8005996 <srand+0x3a>
 8005968:	2018      	movs	r0, #24
 800596a:	f7ff fe91 	bl	8005690 <malloc>
 800596e:	4602      	mov	r2, r0
 8005970:	63a8      	str	r0, [r5, #56]	; 0x38
 8005972:	b920      	cbnz	r0, 800597e <srand+0x22>
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <srand+0x48>)
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <srand+0x4c>)
 8005978:	2142      	movs	r1, #66	; 0x42
 800597a:	f000 f9fb 	bl	8005d74 <__assert_func>
 800597e:	490b      	ldr	r1, [pc, #44]	; (80059ac <srand+0x50>)
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <srand+0x54>)
 8005982:	e9c0 1300 	strd	r1, r3, [r0]
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <srand+0x58>)
 8005988:	6083      	str	r3, [r0, #8]
 800598a:	230b      	movs	r3, #11
 800598c:	8183      	strh	r3, [r0, #12]
 800598e:	2100      	movs	r1, #0
 8005990:	2001      	movs	r0, #1
 8005992:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005996:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005998:	2200      	movs	r2, #0
 800599a:	611c      	str	r4, [r3, #16]
 800599c:	615a      	str	r2, [r3, #20]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	2000002c 	.word	0x2000002c
 80059a4:	0800725c 	.word	0x0800725c
 80059a8:	08007273 	.word	0x08007273
 80059ac:	abcd330e 	.word	0xabcd330e
 80059b0:	e66d1234 	.word	0xe66d1234
 80059b4:	0005deec 	.word	0x0005deec

080059b8 <rand>:
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <rand+0x60>)
 80059ba:	b510      	push	{r4, lr}
 80059bc:	681c      	ldr	r4, [r3, #0]
 80059be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059c0:	b9b3      	cbnz	r3, 80059f0 <rand+0x38>
 80059c2:	2018      	movs	r0, #24
 80059c4:	f7ff fe64 	bl	8005690 <malloc>
 80059c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80059ca:	b928      	cbnz	r0, 80059d8 <rand+0x20>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <rand+0x64>)
 80059d0:	4813      	ldr	r0, [pc, #76]	; (8005a20 <rand+0x68>)
 80059d2:	214e      	movs	r1, #78	; 0x4e
 80059d4:	f000 f9ce 	bl	8005d74 <__assert_func>
 80059d8:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <rand+0x6c>)
 80059da:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <rand+0x70>)
 80059dc:	e9c0 2300 	strd	r2, r3, [r0]
 80059e0:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <rand+0x74>)
 80059e2:	6083      	str	r3, [r0, #8]
 80059e4:	230b      	movs	r3, #11
 80059e6:	8183      	strh	r3, [r0, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	2300      	movs	r3, #0
 80059ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80059f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059f2:	480f      	ldr	r0, [pc, #60]	; (8005a30 <rand+0x78>)
 80059f4:	690a      	ldr	r2, [r1, #16]
 80059f6:	694b      	ldr	r3, [r1, #20]
 80059f8:	4c0e      	ldr	r4, [pc, #56]	; (8005a34 <rand+0x7c>)
 80059fa:	4350      	muls	r0, r2
 80059fc:	fb04 0003 	mla	r0, r4, r3, r0
 8005a00:	fba2 3404 	umull	r3, r4, r2, r4
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	4404      	add	r4, r0
 8005a08:	f144 0000 	adc.w	r0, r4, #0
 8005a0c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005a10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	bf00      	nop
 8005a18:	2000002c 	.word	0x2000002c
 8005a1c:	0800725c 	.word	0x0800725c
 8005a20:	08007273 	.word	0x08007273
 8005a24:	abcd330e 	.word	0xabcd330e
 8005a28:	e66d1234 	.word	0xe66d1234
 8005a2c:	0005deec 	.word	0x0005deec
 8005a30:	5851f42d 	.word	0x5851f42d
 8005a34:	4c957f2d 	.word	0x4c957f2d

08005a38 <_sbrk_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_sbrk_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7ff fd10 	bl	8005468 <_sbrk>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_sbrk_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_sbrk_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200001dc 	.word	0x200001dc

08005a58 <setbuf>:
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5e:	bf0c      	ite	eq
 8005a60:	2202      	moveq	r2, #2
 8005a62:	2200      	movne	r2, #0
 8005a64:	f000 b800 	b.w	8005a68 <setvbuf>

08005a68 <setvbuf>:
 8005a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <setvbuf+0x17c>)
 8005a70:	681f      	ldr	r7, [r3, #0]
 8005a72:	4604      	mov	r4, r0
 8005a74:	460e      	mov	r6, r1
 8005a76:	4690      	mov	r8, r2
 8005a78:	b127      	cbz	r7, 8005a84 <setvbuf+0x1c>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	b913      	cbnz	r3, 8005a84 <setvbuf+0x1c>
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f000 fab0 	bl	8005fe4 <__sinit>
 8005a84:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <setvbuf+0x180>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d167      	bne.n	8005b5a <setvbuf+0xf2>
 8005a8a:	687c      	ldr	r4, [r7, #4]
 8005a8c:	f1b8 0f02 	cmp.w	r8, #2
 8005a90:	d006      	beq.n	8005aa0 <setvbuf+0x38>
 8005a92:	f1b8 0f01 	cmp.w	r8, #1
 8005a96:	f200 809f 	bhi.w	8005bd8 <setvbuf+0x170>
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	f2c0 809c 	blt.w	8005bd8 <setvbuf+0x170>
 8005aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa2:	07db      	lsls	r3, r3, #31
 8005aa4:	d405      	bmi.n	8005ab2 <setvbuf+0x4a>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	0598      	lsls	r0, r3, #22
 8005aaa:	d402      	bmi.n	8005ab2 <setvbuf+0x4a>
 8005aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aae:	f000 fb49 	bl	8006144 <__retarget_lock_acquire_recursive>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f000 fa01 	bl	8005ebc <_fflush_r>
 8005aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005abc:	b141      	cbz	r1, 8005ad0 <setvbuf+0x68>
 8005abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	d002      	beq.n	8005acc <setvbuf+0x64>
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff fdfa 	bl	80056c0 <_free_r>
 8005acc:	2300      	movs	r3, #0
 8005ace:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61a3      	str	r3, [r4, #24]
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	0619      	lsls	r1, r3, #24
 8005ada:	d503      	bpl.n	8005ae4 <setvbuf+0x7c>
 8005adc:	6921      	ldr	r1, [r4, #16]
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7ff fdee 	bl	80056c0 <_free_r>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	f1b8 0f02 	cmp.w	r8, #2
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	d06c      	beq.n	8005bd0 <setvbuf+0x168>
 8005af6:	ab01      	add	r3, sp, #4
 8005af8:	466a      	mov	r2, sp
 8005afa:	4621      	mov	r1, r4
 8005afc:	4638      	mov	r0, r7
 8005afe:	f000 fb23 	bl	8006148 <__swhatbuf_r>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	4318      	orrs	r0, r3
 8005b06:	81a0      	strh	r0, [r4, #12]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	d130      	bne.n	8005b6e <setvbuf+0x106>
 8005b0c:	9d00      	ldr	r5, [sp, #0]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7ff fdbe 	bl	8005690 <malloc>
 8005b14:	4606      	mov	r6, r0
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d155      	bne.n	8005bc6 <setvbuf+0x15e>
 8005b1a:	f8dd 9000 	ldr.w	r9, [sp]
 8005b1e:	45a9      	cmp	r9, r5
 8005b20:	d14a      	bne.n	8005bb8 <setvbuf+0x150>
 8005b22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b26:	2200      	movs	r2, #0
 8005b28:	60a2      	str	r2, [r4, #8]
 8005b2a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	6122      	str	r2, [r4, #16]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b38:	6162      	str	r2, [r4, #20]
 8005b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	07d2      	lsls	r2, r2, #31
 8005b42:	81a3      	strh	r3, [r4, #12]
 8005b44:	d405      	bmi.n	8005b52 <setvbuf+0xea>
 8005b46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005b4a:	d102      	bne.n	8005b52 <setvbuf+0xea>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4e:	f000 fafa 	bl	8006146 <__retarget_lock_release_recursive>
 8005b52:	4628      	mov	r0, r5
 8005b54:	b003      	add	sp, #12
 8005b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	4b24      	ldr	r3, [pc, #144]	; (8005bec <setvbuf+0x184>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	d101      	bne.n	8005b64 <setvbuf+0xfc>
 8005b60:	68bc      	ldr	r4, [r7, #8]
 8005b62:	e793      	b.n	8005a8c <setvbuf+0x24>
 8005b64:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <setvbuf+0x188>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	bf08      	it	eq
 8005b6a:	68fc      	ldreq	r4, [r7, #12]
 8005b6c:	e78e      	b.n	8005a8c <setvbuf+0x24>
 8005b6e:	2e00      	cmp	r6, #0
 8005b70:	d0cd      	beq.n	8005b0e <setvbuf+0xa6>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	b913      	cbnz	r3, 8005b7c <setvbuf+0x114>
 8005b76:	4638      	mov	r0, r7
 8005b78:	f000 fa34 	bl	8005fe4 <__sinit>
 8005b7c:	f1b8 0f01 	cmp.w	r8, #1
 8005b80:	bf08      	it	eq
 8005b82:	89a3      	ldrheq	r3, [r4, #12]
 8005b84:	6026      	str	r6, [r4, #0]
 8005b86:	bf04      	itt	eq
 8005b88:	f043 0301 	orreq.w	r3, r3, #1
 8005b8c:	81a3      	strheq	r3, [r4, #12]
 8005b8e:	89a2      	ldrh	r2, [r4, #12]
 8005b90:	f012 0308 	ands.w	r3, r2, #8
 8005b94:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b98:	d01c      	beq.n	8005bd4 <setvbuf+0x16c>
 8005b9a:	07d3      	lsls	r3, r2, #31
 8005b9c:	bf41      	itttt	mi
 8005b9e:	2300      	movmi	r3, #0
 8005ba0:	426d      	negmi	r5, r5
 8005ba2:	60a3      	strmi	r3, [r4, #8]
 8005ba4:	61a5      	strmi	r5, [r4, #24]
 8005ba6:	bf58      	it	pl
 8005ba8:	60a5      	strpl	r5, [r4, #8]
 8005baa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005bac:	f015 0501 	ands.w	r5, r5, #1
 8005bb0:	d115      	bne.n	8005bde <setvbuf+0x176>
 8005bb2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005bb6:	e7c8      	b.n	8005b4a <setvbuf+0xe2>
 8005bb8:	4648      	mov	r0, r9
 8005bba:	f7ff fd69 	bl	8005690 <malloc>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d0ae      	beq.n	8005b22 <setvbuf+0xba>
 8005bc4:	464d      	mov	r5, r9
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7d0      	b.n	8005b72 <setvbuf+0x10a>
 8005bd0:	2500      	movs	r5, #0
 8005bd2:	e7a8      	b.n	8005b26 <setvbuf+0xbe>
 8005bd4:	60a3      	str	r3, [r4, #8]
 8005bd6:	e7e8      	b.n	8005baa <setvbuf+0x142>
 8005bd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005bdc:	e7b9      	b.n	8005b52 <setvbuf+0xea>
 8005bde:	2500      	movs	r5, #0
 8005be0:	e7b7      	b.n	8005b52 <setvbuf+0xea>
 8005be2:	bf00      	nop
 8005be4:	2000002c 	.word	0x2000002c
 8005be8:	08007330 	.word	0x08007330
 8005bec:	08007350 	.word	0x08007350
 8005bf0:	08007310 	.word	0x08007310

08005bf4 <__swbuf_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	b118      	cbz	r0, 8005c06 <__swbuf_r+0x12>
 8005bfe:	6983      	ldr	r3, [r0, #24]
 8005c00:	b90b      	cbnz	r3, 8005c06 <__swbuf_r+0x12>
 8005c02:	f000 f9ef 	bl	8005fe4 <__sinit>
 8005c06:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <__swbuf_r+0x98>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	d12b      	bne.n	8005c64 <__swbuf_r+0x70>
 8005c0c:	686c      	ldr	r4, [r5, #4]
 8005c0e:	69a3      	ldr	r3, [r4, #24]
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	071a      	lsls	r2, r3, #28
 8005c16:	d52f      	bpl.n	8005c78 <__swbuf_r+0x84>
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	b36b      	cbz	r3, 8005c78 <__swbuf_r+0x84>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	b2f6      	uxtb	r6, r6
 8005c26:	4283      	cmp	r3, r0
 8005c28:	4637      	mov	r7, r6
 8005c2a:	dc04      	bgt.n	8005c36 <__swbuf_r+0x42>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 f944 	bl	8005ebc <_fflush_r>
 8005c34:	bb30      	cbnz	r0, 8005c84 <__swbuf_r+0x90>
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	701e      	strb	r6, [r3, #0]
 8005c44:	6963      	ldr	r3, [r4, #20]
 8005c46:	3001      	adds	r0, #1
 8005c48:	4283      	cmp	r3, r0
 8005c4a:	d004      	beq.n	8005c56 <__swbuf_r+0x62>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	07db      	lsls	r3, r3, #31
 8005c50:	d506      	bpl.n	8005c60 <__swbuf_r+0x6c>
 8005c52:	2e0a      	cmp	r6, #10
 8005c54:	d104      	bne.n	8005c60 <__swbuf_r+0x6c>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f92f 	bl	8005ebc <_fflush_r>
 8005c5e:	b988      	cbnz	r0, 8005c84 <__swbuf_r+0x90>
 8005c60:	4638      	mov	r0, r7
 8005c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <__swbuf_r+0x9c>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <__swbuf_r+0x7a>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7cf      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <__swbuf_r+0xa0>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7ca      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f80c 	bl	8005c98 <__swsetup_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d0cb      	beq.n	8005c1c <__swbuf_r+0x28>
 8005c84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c88:	e7ea      	b.n	8005c60 <__swbuf_r+0x6c>
 8005c8a:	bf00      	nop
 8005c8c:	08007330 	.word	0x08007330
 8005c90:	08007350 	.word	0x08007350
 8005c94:	08007310 	.word	0x08007310

08005c98 <__swsetup_r>:
 8005c98:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <__swsetup_r+0xcc>)
 8005c9a:	b570      	push	{r4, r5, r6, lr}
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	b125      	cbz	r5, 8005cae <__swsetup_r+0x16>
 8005ca4:	69ab      	ldr	r3, [r5, #24]
 8005ca6:	b913      	cbnz	r3, 8005cae <__swsetup_r+0x16>
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f99b 	bl	8005fe4 <__sinit>
 8005cae:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <__swsetup_r+0xd0>)
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d10f      	bne.n	8005cd4 <__swsetup_r+0x3c>
 8005cb4:	686c      	ldr	r4, [r5, #4]
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cbc:	0719      	lsls	r1, r3, #28
 8005cbe:	d42c      	bmi.n	8005d1a <__swsetup_r+0x82>
 8005cc0:	06dd      	lsls	r5, r3, #27
 8005cc2:	d411      	bmi.n	8005ce8 <__swsetup_r+0x50>
 8005cc4:	2309      	movs	r3, #9
 8005cc6:	6033      	str	r3, [r6, #0]
 8005cc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd2:	e03e      	b.n	8005d52 <__swsetup_r+0xba>
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <__swsetup_r+0xd4>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d101      	bne.n	8005cde <__swsetup_r+0x46>
 8005cda:	68ac      	ldr	r4, [r5, #8]
 8005cdc:	e7eb      	b.n	8005cb6 <__swsetup_r+0x1e>
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <__swsetup_r+0xd8>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	bf08      	it	eq
 8005ce4:	68ec      	ldreq	r4, [r5, #12]
 8005ce6:	e7e6      	b.n	8005cb6 <__swsetup_r+0x1e>
 8005ce8:	0758      	lsls	r0, r3, #29
 8005cea:	d512      	bpl.n	8005d12 <__swsetup_r+0x7a>
 8005cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cee:	b141      	cbz	r1, 8005d02 <__swsetup_r+0x6a>
 8005cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d002      	beq.n	8005cfe <__swsetup_r+0x66>
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f7ff fce1 	bl	80056c0 <_free_r>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6363      	str	r3, [r4, #52]	; 0x34
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	b94b      	cbnz	r3, 8005d32 <__swsetup_r+0x9a>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d003      	beq.n	8005d32 <__swsetup_r+0x9a>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 fa2f 	bl	8006190 <__smakebuf_r>
 8005d32:	89a0      	ldrh	r0, [r4, #12]
 8005d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d38:	f010 0301 	ands.w	r3, r0, #1
 8005d3c:	d00a      	beq.n	8005d54 <__swsetup_r+0xbc>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60a3      	str	r3, [r4, #8]
 8005d42:	6963      	ldr	r3, [r4, #20]
 8005d44:	425b      	negs	r3, r3
 8005d46:	61a3      	str	r3, [r4, #24]
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	b943      	cbnz	r3, 8005d5e <__swsetup_r+0xc6>
 8005d4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d50:	d1ba      	bne.n	8005cc8 <__swsetup_r+0x30>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	0781      	lsls	r1, r0, #30
 8005d56:	bf58      	it	pl
 8005d58:	6963      	ldrpl	r3, [r4, #20]
 8005d5a:	60a3      	str	r3, [r4, #8]
 8005d5c:	e7f4      	b.n	8005d48 <__swsetup_r+0xb0>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e7f7      	b.n	8005d52 <__swsetup_r+0xba>
 8005d62:	bf00      	nop
 8005d64:	2000002c 	.word	0x2000002c
 8005d68:	08007330 	.word	0x08007330
 8005d6c:	08007350 	.word	0x08007350
 8005d70:	08007310 	.word	0x08007310

08005d74 <__assert_func>:
 8005d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d76:	4614      	mov	r4, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <__assert_func+0x2c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4605      	mov	r5, r0
 8005d80:	68d8      	ldr	r0, [r3, #12]
 8005d82:	b14c      	cbz	r4, 8005d98 <__assert_func+0x24>
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <__assert_func+0x30>)
 8005d86:	9100      	str	r1, [sp, #0]
 8005d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d8c:	4906      	ldr	r1, [pc, #24]	; (8005da8 <__assert_func+0x34>)
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f000 f9a6 	bl	80060e0 <fiprintf>
 8005d94:	f000 fdc1 	bl	800691a <abort>
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <__assert_func+0x38>)
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	e7f3      	b.n	8005d86 <__assert_func+0x12>
 8005d9e:	bf00      	nop
 8005da0:	2000002c 	.word	0x2000002c
 8005da4:	080072d2 	.word	0x080072d2
 8005da8:	080072df 	.word	0x080072df
 8005dac:	0800730d 	.word	0x0800730d

08005db0 <__sflush_r>:
 8005db0:	898a      	ldrh	r2, [r1, #12]
 8005db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db6:	4605      	mov	r5, r0
 8005db8:	0710      	lsls	r0, r2, #28
 8005dba:	460c      	mov	r4, r1
 8005dbc:	d458      	bmi.n	8005e70 <__sflush_r+0xc0>
 8005dbe:	684b      	ldr	r3, [r1, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dc05      	bgt.n	8005dd0 <__sflush_r+0x20>
 8005dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dc02      	bgt.n	8005dd0 <__sflush_r+0x20>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0f9      	beq.n	8005dca <__sflush_r+0x1a>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ddc:	682f      	ldr	r7, [r5, #0]
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	d032      	beq.n	8005e48 <__sflush_r+0x98>
 8005de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	075a      	lsls	r2, r3, #29
 8005de8:	d505      	bpl.n	8005df6 <__sflush_r+0x46>
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	1ac0      	subs	r0, r0, r3
 8005dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005df0:	b10b      	cbz	r3, 8005df6 <__sflush_r+0x46>
 8005df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005df4:	1ac0      	subs	r0, r0, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dfc:	6a21      	ldr	r1, [r4, #32]
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b0      	blx	r6
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	d106      	bne.n	8005e16 <__sflush_r+0x66>
 8005e08:	6829      	ldr	r1, [r5, #0]
 8005e0a:	291d      	cmp	r1, #29
 8005e0c:	d82c      	bhi.n	8005e68 <__sflush_r+0xb8>
 8005e0e:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <__sflush_r+0x108>)
 8005e10:	40ca      	lsrs	r2, r1
 8005e12:	07d6      	lsls	r6, r2, #31
 8005e14:	d528      	bpl.n	8005e68 <__sflush_r+0xb8>
 8005e16:	2200      	movs	r2, #0
 8005e18:	6062      	str	r2, [r4, #4]
 8005e1a:	04d9      	lsls	r1, r3, #19
 8005e1c:	6922      	ldr	r2, [r4, #16]
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	d504      	bpl.n	8005e2c <__sflush_r+0x7c>
 8005e22:	1c42      	adds	r2, r0, #1
 8005e24:	d101      	bne.n	8005e2a <__sflush_r+0x7a>
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	b903      	cbnz	r3, 8005e2c <__sflush_r+0x7c>
 8005e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2e:	602f      	str	r7, [r5, #0]
 8005e30:	2900      	cmp	r1, #0
 8005e32:	d0ca      	beq.n	8005dca <__sflush_r+0x1a>
 8005e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	d002      	beq.n	8005e42 <__sflush_r+0x92>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f7ff fc3f 	bl	80056c0 <_free_r>
 8005e42:	2000      	movs	r0, #0
 8005e44:	6360      	str	r0, [r4, #52]	; 0x34
 8005e46:	e7c1      	b.n	8005dcc <__sflush_r+0x1c>
 8005e48:	6a21      	ldr	r1, [r4, #32]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b0      	blx	r6
 8005e50:	1c41      	adds	r1, r0, #1
 8005e52:	d1c7      	bne.n	8005de4 <__sflush_r+0x34>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0c4      	beq.n	8005de4 <__sflush_r+0x34>
 8005e5a:	2b1d      	cmp	r3, #29
 8005e5c:	d001      	beq.n	8005e62 <__sflush_r+0xb2>
 8005e5e:	2b16      	cmp	r3, #22
 8005e60:	d101      	bne.n	8005e66 <__sflush_r+0xb6>
 8005e62:	602f      	str	r7, [r5, #0]
 8005e64:	e7b1      	b.n	8005dca <__sflush_r+0x1a>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	e7ad      	b.n	8005dcc <__sflush_r+0x1c>
 8005e70:	690f      	ldr	r7, [r1, #16]
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	d0a9      	beq.n	8005dca <__sflush_r+0x1a>
 8005e76:	0793      	lsls	r3, r2, #30
 8005e78:	680e      	ldr	r6, [r1, #0]
 8005e7a:	bf08      	it	eq
 8005e7c:	694b      	ldreq	r3, [r1, #20]
 8005e7e:	600f      	str	r7, [r1, #0]
 8005e80:	bf18      	it	ne
 8005e82:	2300      	movne	r3, #0
 8005e84:	eba6 0807 	sub.w	r8, r6, r7
 8005e88:	608b      	str	r3, [r1, #8]
 8005e8a:	f1b8 0f00 	cmp.w	r8, #0
 8005e8e:	dd9c      	ble.n	8005dca <__sflush_r+0x1a>
 8005e90:	6a21      	ldr	r1, [r4, #32]
 8005e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e94:	4643      	mov	r3, r8
 8005e96:	463a      	mov	r2, r7
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b0      	blx	r6
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dc06      	bgt.n	8005eae <__sflush_r+0xfe>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eac:	e78e      	b.n	8005dcc <__sflush_r+0x1c>
 8005eae:	4407      	add	r7, r0
 8005eb0:	eba8 0800 	sub.w	r8, r8, r0
 8005eb4:	e7e9      	b.n	8005e8a <__sflush_r+0xda>
 8005eb6:	bf00      	nop
 8005eb8:	20400001 	.word	0x20400001

08005ebc <_fflush_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	690b      	ldr	r3, [r1, #16]
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	b913      	cbnz	r3, 8005ecc <_fflush_r+0x10>
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	4628      	mov	r0, r5
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	b118      	cbz	r0, 8005ed6 <_fflush_r+0x1a>
 8005ece:	6983      	ldr	r3, [r0, #24]
 8005ed0:	b90b      	cbnz	r3, 8005ed6 <_fflush_r+0x1a>
 8005ed2:	f000 f887 	bl	8005fe4 <__sinit>
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <_fflush_r+0x6c>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d11b      	bne.n	8005f14 <_fflush_r+0x58>
 8005edc:	686c      	ldr	r4, [r5, #4]
 8005ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0ef      	beq.n	8005ec6 <_fflush_r+0xa>
 8005ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ee8:	07d0      	lsls	r0, r2, #31
 8005eea:	d404      	bmi.n	8005ef6 <_fflush_r+0x3a>
 8005eec:	0599      	lsls	r1, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <_fflush_r+0x3a>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef2:	f000 f927 	bl	8006144 <__retarget_lock_acquire_recursive>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f7ff ff59 	bl	8005db0 <__sflush_r>
 8005efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f00:	07da      	lsls	r2, r3, #31
 8005f02:	4605      	mov	r5, r0
 8005f04:	d4e0      	bmi.n	8005ec8 <_fflush_r+0xc>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	059b      	lsls	r3, r3, #22
 8005f0a:	d4dd      	bmi.n	8005ec8 <_fflush_r+0xc>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f000 f91a 	bl	8006146 <__retarget_lock_release_recursive>
 8005f12:	e7d9      	b.n	8005ec8 <_fflush_r+0xc>
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <_fflush_r+0x70>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d101      	bne.n	8005f1e <_fflush_r+0x62>
 8005f1a:	68ac      	ldr	r4, [r5, #8]
 8005f1c:	e7df      	b.n	8005ede <_fflush_r+0x22>
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <_fflush_r+0x74>)
 8005f20:	429c      	cmp	r4, r3
 8005f22:	bf08      	it	eq
 8005f24:	68ec      	ldreq	r4, [r5, #12]
 8005f26:	e7da      	b.n	8005ede <_fflush_r+0x22>
 8005f28:	08007330 	.word	0x08007330
 8005f2c:	08007350 	.word	0x08007350
 8005f30:	08007310 	.word	0x08007310

08005f34 <std>:
 8005f34:	2300      	movs	r3, #0
 8005f36:	b510      	push	{r4, lr}
 8005f38:	4604      	mov	r4, r0
 8005f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f42:	6083      	str	r3, [r0, #8]
 8005f44:	8181      	strh	r1, [r0, #12]
 8005f46:	6643      	str	r3, [r0, #100]	; 0x64
 8005f48:	81c2      	strh	r2, [r0, #14]
 8005f4a:	6183      	str	r3, [r0, #24]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	2208      	movs	r2, #8
 8005f50:	305c      	adds	r0, #92	; 0x5c
 8005f52:	f7ff fbad 	bl	80056b0 <memset>
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <std+0x38>)
 8005f58:	6263      	str	r3, [r4, #36]	; 0x24
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <std+0x3c>)
 8005f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <std+0x40>)
 8005f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f62:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <std+0x44>)
 8005f64:	6224      	str	r4, [r4, #32]
 8005f66:	6323      	str	r3, [r4, #48]	; 0x30
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08006895 	.word	0x08006895
 8005f70:	080068b7 	.word	0x080068b7
 8005f74:	080068ef 	.word	0x080068ef
 8005f78:	08006913 	.word	0x08006913

08005f7c <_cleanup_r>:
 8005f7c:	4901      	ldr	r1, [pc, #4]	; (8005f84 <_cleanup_r+0x8>)
 8005f7e:	f000 b8c1 	b.w	8006104 <_fwalk_reent>
 8005f82:	bf00      	nop
 8005f84:	08005ebd 	.word	0x08005ebd

08005f88 <__sfmoreglue>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	1e4a      	subs	r2, r1, #1
 8005f8c:	2568      	movs	r5, #104	; 0x68
 8005f8e:	4355      	muls	r5, r2
 8005f90:	460e      	mov	r6, r1
 8005f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f96:	f7ff fbe3 	bl	8005760 <_malloc_r>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b140      	cbz	r0, 8005fb0 <__sfmoreglue+0x28>
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8005fa4:	300c      	adds	r0, #12
 8005fa6:	60a0      	str	r0, [r4, #8]
 8005fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fac:	f7ff fb80 	bl	80056b0 <memset>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}

08005fb4 <__sfp_lock_acquire>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__sfp_lock_acquire+0x8>)
 8005fb6:	f000 b8c5 	b.w	8006144 <__retarget_lock_acquire_recursive>
 8005fba:	bf00      	nop
 8005fbc:	200001d8 	.word	0x200001d8

08005fc0 <__sfp_lock_release>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	; (8005fc8 <__sfp_lock_release+0x8>)
 8005fc2:	f000 b8c0 	b.w	8006146 <__retarget_lock_release_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	200001d8 	.word	0x200001d8

08005fcc <__sinit_lock_acquire>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	; (8005fd4 <__sinit_lock_acquire+0x8>)
 8005fce:	f000 b8b9 	b.w	8006144 <__retarget_lock_acquire_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	200001d3 	.word	0x200001d3

08005fd8 <__sinit_lock_release>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	; (8005fe0 <__sinit_lock_release+0x8>)
 8005fda:	f000 b8b4 	b.w	8006146 <__retarget_lock_release_recursive>
 8005fde:	bf00      	nop
 8005fe0:	200001d3 	.word	0x200001d3

08005fe4 <__sinit>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7ff fff0 	bl	8005fcc <__sinit_lock_acquire>
 8005fec:	69a3      	ldr	r3, [r4, #24]
 8005fee:	b11b      	cbz	r3, 8005ff8 <__sinit+0x14>
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	f7ff bff0 	b.w	8005fd8 <__sinit_lock_release>
 8005ff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <__sinit+0x68>)
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <__sinit+0x6c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	62a2      	str	r2, [r4, #40]	; 0x28
 8006006:	42a3      	cmp	r3, r4
 8006008:	bf04      	itt	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	61a3      	streq	r3, [r4, #24]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f820 	bl	8006054 <__sfp>
 8006014:	6060      	str	r0, [r4, #4]
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f81c 	bl	8006054 <__sfp>
 800601c:	60a0      	str	r0, [r4, #8]
 800601e:	4620      	mov	r0, r4
 8006020:	f000 f818 	bl	8006054 <__sfp>
 8006024:	2200      	movs	r2, #0
 8006026:	60e0      	str	r0, [r4, #12]
 8006028:	2104      	movs	r1, #4
 800602a:	6860      	ldr	r0, [r4, #4]
 800602c:	f7ff ff82 	bl	8005f34 <std>
 8006030:	68a0      	ldr	r0, [r4, #8]
 8006032:	2201      	movs	r2, #1
 8006034:	2109      	movs	r1, #9
 8006036:	f7ff ff7d 	bl	8005f34 <std>
 800603a:	68e0      	ldr	r0, [r4, #12]
 800603c:	2202      	movs	r2, #2
 800603e:	2112      	movs	r1, #18
 8006040:	f7ff ff78 	bl	8005f34 <std>
 8006044:	2301      	movs	r3, #1
 8006046:	61a3      	str	r3, [r4, #24]
 8006048:	e7d2      	b.n	8005ff0 <__sinit+0xc>
 800604a:	bf00      	nop
 800604c:	08007258 	.word	0x08007258
 8006050:	08005f7d 	.word	0x08005f7d

08006054 <__sfp>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	4607      	mov	r7, r0
 8006058:	f7ff ffac 	bl	8005fb4 <__sfp_lock_acquire>
 800605c:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <__sfp+0x84>)
 800605e:	681e      	ldr	r6, [r3, #0]
 8006060:	69b3      	ldr	r3, [r6, #24]
 8006062:	b913      	cbnz	r3, 800606a <__sfp+0x16>
 8006064:	4630      	mov	r0, r6
 8006066:	f7ff ffbd 	bl	8005fe4 <__sinit>
 800606a:	3648      	adds	r6, #72	; 0x48
 800606c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006070:	3b01      	subs	r3, #1
 8006072:	d503      	bpl.n	800607c <__sfp+0x28>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	b30b      	cbz	r3, 80060bc <__sfp+0x68>
 8006078:	6836      	ldr	r6, [r6, #0]
 800607a:	e7f7      	b.n	800606c <__sfp+0x18>
 800607c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006080:	b9d5      	cbnz	r5, 80060b8 <__sfp+0x64>
 8006082:	4b16      	ldr	r3, [pc, #88]	; (80060dc <__sfp+0x88>)
 8006084:	60e3      	str	r3, [r4, #12]
 8006086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800608a:	6665      	str	r5, [r4, #100]	; 0x64
 800608c:	f000 f859 	bl	8006142 <__retarget_lock_init_recursive>
 8006090:	f7ff ff96 	bl	8005fc0 <__sfp_lock_release>
 8006094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800609c:	6025      	str	r5, [r4, #0]
 800609e:	61a5      	str	r5, [r4, #24]
 80060a0:	2208      	movs	r2, #8
 80060a2:	4629      	mov	r1, r5
 80060a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060a8:	f7ff fb02 	bl	80056b0 <memset>
 80060ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060b4:	4620      	mov	r0, r4
 80060b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b8:	3468      	adds	r4, #104	; 0x68
 80060ba:	e7d9      	b.n	8006070 <__sfp+0x1c>
 80060bc:	2104      	movs	r1, #4
 80060be:	4638      	mov	r0, r7
 80060c0:	f7ff ff62 	bl	8005f88 <__sfmoreglue>
 80060c4:	4604      	mov	r4, r0
 80060c6:	6030      	str	r0, [r6, #0]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d1d5      	bne.n	8006078 <__sfp+0x24>
 80060cc:	f7ff ff78 	bl	8005fc0 <__sfp_lock_release>
 80060d0:	230c      	movs	r3, #12
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	e7ee      	b.n	80060b4 <__sfp+0x60>
 80060d6:	bf00      	nop
 80060d8:	08007258 	.word	0x08007258
 80060dc:	ffff0001 	.word	0xffff0001

080060e0 <fiprintf>:
 80060e0:	b40e      	push	{r1, r2, r3}
 80060e2:	b503      	push	{r0, r1, lr}
 80060e4:	4601      	mov	r1, r0
 80060e6:	ab03      	add	r3, sp, #12
 80060e8:	4805      	ldr	r0, [pc, #20]	; (8006100 <fiprintf+0x20>)
 80060ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ee:	6800      	ldr	r0, [r0, #0]
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	f000 f8c3 	bl	800627c <_vfiprintf_r>
 80060f6:	b002      	add	sp, #8
 80060f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060fc:	b003      	add	sp, #12
 80060fe:	4770      	bx	lr
 8006100:	2000002c 	.word	0x2000002c

08006104 <_fwalk_reent>:
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	4606      	mov	r6, r0
 800610a:	4688      	mov	r8, r1
 800610c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006110:	2700      	movs	r7, #0
 8006112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006116:	f1b9 0901 	subs.w	r9, r9, #1
 800611a:	d505      	bpl.n	8006128 <_fwalk_reent+0x24>
 800611c:	6824      	ldr	r4, [r4, #0]
 800611e:	2c00      	cmp	r4, #0
 8006120:	d1f7      	bne.n	8006112 <_fwalk_reent+0xe>
 8006122:	4638      	mov	r0, r7
 8006124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006128:	89ab      	ldrh	r3, [r5, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d907      	bls.n	800613e <_fwalk_reent+0x3a>
 800612e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006132:	3301      	adds	r3, #1
 8006134:	d003      	beq.n	800613e <_fwalk_reent+0x3a>
 8006136:	4629      	mov	r1, r5
 8006138:	4630      	mov	r0, r6
 800613a:	47c0      	blx	r8
 800613c:	4307      	orrs	r7, r0
 800613e:	3568      	adds	r5, #104	; 0x68
 8006140:	e7e9      	b.n	8006116 <_fwalk_reent+0x12>

08006142 <__retarget_lock_init_recursive>:
 8006142:	4770      	bx	lr

08006144 <__retarget_lock_acquire_recursive>:
 8006144:	4770      	bx	lr

08006146 <__retarget_lock_release_recursive>:
 8006146:	4770      	bx	lr

08006148 <__swhatbuf_r>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	2900      	cmp	r1, #0
 8006152:	b096      	sub	sp, #88	; 0x58
 8006154:	4614      	mov	r4, r2
 8006156:	461d      	mov	r5, r3
 8006158:	da07      	bge.n	800616a <__swhatbuf_r+0x22>
 800615a:	2300      	movs	r3, #0
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	89b3      	ldrh	r3, [r6, #12]
 8006160:	061a      	lsls	r2, r3, #24
 8006162:	d410      	bmi.n	8006186 <__swhatbuf_r+0x3e>
 8006164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006168:	e00e      	b.n	8006188 <__swhatbuf_r+0x40>
 800616a:	466a      	mov	r2, sp
 800616c:	f000 fbec 	bl	8006948 <_fstat_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	dbf2      	blt.n	800615a <__swhatbuf_r+0x12>
 8006174:	9a01      	ldr	r2, [sp, #4]
 8006176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800617a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800617e:	425a      	negs	r2, r3
 8006180:	415a      	adcs	r2, r3
 8006182:	602a      	str	r2, [r5, #0]
 8006184:	e7ee      	b.n	8006164 <__swhatbuf_r+0x1c>
 8006186:	2340      	movs	r3, #64	; 0x40
 8006188:	2000      	movs	r0, #0
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	b016      	add	sp, #88	; 0x58
 800618e:	bd70      	pop	{r4, r5, r6, pc}

08006190 <__smakebuf_r>:
 8006190:	898b      	ldrh	r3, [r1, #12]
 8006192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006194:	079d      	lsls	r5, r3, #30
 8006196:	4606      	mov	r6, r0
 8006198:	460c      	mov	r4, r1
 800619a:	d507      	bpl.n	80061ac <__smakebuf_r+0x1c>
 800619c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	2301      	movs	r3, #1
 80061a6:	6163      	str	r3, [r4, #20]
 80061a8:	b002      	add	sp, #8
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	ab01      	add	r3, sp, #4
 80061ae:	466a      	mov	r2, sp
 80061b0:	f7ff ffca 	bl	8006148 <__swhatbuf_r>
 80061b4:	9900      	ldr	r1, [sp, #0]
 80061b6:	4605      	mov	r5, r0
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff fad1 	bl	8005760 <_malloc_r>
 80061be:	b948      	cbnz	r0, 80061d4 <__smakebuf_r+0x44>
 80061c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c4:	059a      	lsls	r2, r3, #22
 80061c6:	d4ef      	bmi.n	80061a8 <__smakebuf_r+0x18>
 80061c8:	f023 0303 	bic.w	r3, r3, #3
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	e7e3      	b.n	800619c <__smakebuf_r+0xc>
 80061d4:	4b0d      	ldr	r3, [pc, #52]	; (800620c <__smakebuf_r+0x7c>)
 80061d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	9b00      	ldr	r3, [sp, #0]
 80061e4:	6163      	str	r3, [r4, #20]
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	6120      	str	r0, [r4, #16]
 80061ea:	b15b      	cbz	r3, 8006204 <__smakebuf_r+0x74>
 80061ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f0:	4630      	mov	r0, r6
 80061f2:	f000 fbbb 	bl	800696c <_isatty_r>
 80061f6:	b128      	cbz	r0, 8006204 <__smakebuf_r+0x74>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	89a0      	ldrh	r0, [r4, #12]
 8006206:	4305      	orrs	r5, r0
 8006208:	81a5      	strh	r5, [r4, #12]
 800620a:	e7cd      	b.n	80061a8 <__smakebuf_r+0x18>
 800620c:	08005f7d 	.word	0x08005f7d

08006210 <__malloc_lock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_lock+0x8>)
 8006212:	f7ff bf97 	b.w	8006144 <__retarget_lock_acquire_recursive>
 8006216:	bf00      	nop
 8006218:	200001d4 	.word	0x200001d4

0800621c <__malloc_unlock>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__malloc_unlock+0x8>)
 800621e:	f7ff bf92 	b.w	8006146 <__retarget_lock_release_recursive>
 8006222:	bf00      	nop
 8006224:	200001d4 	.word	0x200001d4

08006228 <__sfputc_r>:
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	3b01      	subs	r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	b410      	push	{r4}
 8006230:	6093      	str	r3, [r2, #8]
 8006232:	da08      	bge.n	8006246 <__sfputc_r+0x1e>
 8006234:	6994      	ldr	r4, [r2, #24]
 8006236:	42a3      	cmp	r3, r4
 8006238:	db01      	blt.n	800623e <__sfputc_r+0x16>
 800623a:	290a      	cmp	r1, #10
 800623c:	d103      	bne.n	8006246 <__sfputc_r+0x1e>
 800623e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006242:	f7ff bcd7 	b.w	8005bf4 <__swbuf_r>
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	1c58      	adds	r0, r3, #1
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	7019      	strb	r1, [r3, #0]
 800624e:	4608      	mov	r0, r1
 8006250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006254:	4770      	bx	lr

08006256 <__sfputs_r>:
 8006256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	4614      	mov	r4, r2
 800625e:	18d5      	adds	r5, r2, r3
 8006260:	42ac      	cmp	r4, r5
 8006262:	d101      	bne.n	8006268 <__sfputs_r+0x12>
 8006264:	2000      	movs	r0, #0
 8006266:	e007      	b.n	8006278 <__sfputs_r+0x22>
 8006268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626c:	463a      	mov	r2, r7
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff ffda 	bl	8006228 <__sfputc_r>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d1f3      	bne.n	8006260 <__sfputs_r+0xa>
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800627c <_vfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460d      	mov	r5, r1
 8006282:	b09d      	sub	sp, #116	; 0x74
 8006284:	4614      	mov	r4, r2
 8006286:	4698      	mov	r8, r3
 8006288:	4606      	mov	r6, r0
 800628a:	b118      	cbz	r0, 8006294 <_vfiprintf_r+0x18>
 800628c:	6983      	ldr	r3, [r0, #24]
 800628e:	b90b      	cbnz	r3, 8006294 <_vfiprintf_r+0x18>
 8006290:	f7ff fea8 	bl	8005fe4 <__sinit>
 8006294:	4b89      	ldr	r3, [pc, #548]	; (80064bc <_vfiprintf_r+0x240>)
 8006296:	429d      	cmp	r5, r3
 8006298:	d11b      	bne.n	80062d2 <_vfiprintf_r+0x56>
 800629a:	6875      	ldr	r5, [r6, #4]
 800629c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_vfiprintf_r+0x32>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_vfiprintf_r+0x32>
 80062a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062aa:	f7ff ff4b 	bl	8006144 <__retarget_lock_acquire_recursive>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	071b      	lsls	r3, r3, #28
 80062b2:	d501      	bpl.n	80062b8 <_vfiprintf_r+0x3c>
 80062b4:	692b      	ldr	r3, [r5, #16]
 80062b6:	b9eb      	cbnz	r3, 80062f4 <_vfiprintf_r+0x78>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff fcec 	bl	8005c98 <__swsetup_r>
 80062c0:	b1c0      	cbz	r0, 80062f4 <_vfiprintf_r+0x78>
 80062c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c4:	07dc      	lsls	r4, r3, #31
 80062c6:	d50e      	bpl.n	80062e6 <_vfiprintf_r+0x6a>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062cc:	b01d      	add	sp, #116	; 0x74
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	4b7b      	ldr	r3, [pc, #492]	; (80064c0 <_vfiprintf_r+0x244>)
 80062d4:	429d      	cmp	r5, r3
 80062d6:	d101      	bne.n	80062dc <_vfiprintf_r+0x60>
 80062d8:	68b5      	ldr	r5, [r6, #8]
 80062da:	e7df      	b.n	800629c <_vfiprintf_r+0x20>
 80062dc:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <_vfiprintf_r+0x248>)
 80062de:	429d      	cmp	r5, r3
 80062e0:	bf08      	it	eq
 80062e2:	68f5      	ldreq	r5, [r6, #12]
 80062e4:	e7da      	b.n	800629c <_vfiprintf_r+0x20>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	0598      	lsls	r0, r3, #22
 80062ea:	d4ed      	bmi.n	80062c8 <_vfiprintf_r+0x4c>
 80062ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ee:	f7ff ff2a 	bl	8006146 <__retarget_lock_release_recursive>
 80062f2:	e7e9      	b.n	80062c8 <_vfiprintf_r+0x4c>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
 80062f8:	2320      	movs	r3, #32
 80062fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006302:	2330      	movs	r3, #48	; 0x30
 8006304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064c8 <_vfiprintf_r+0x24c>
 8006308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800630c:	f04f 0901 	mov.w	r9, #1
 8006310:	4623      	mov	r3, r4
 8006312:	469a      	mov	sl, r3
 8006314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006318:	b10a      	cbz	r2, 800631e <_vfiprintf_r+0xa2>
 800631a:	2a25      	cmp	r2, #37	; 0x25
 800631c:	d1f9      	bne.n	8006312 <_vfiprintf_r+0x96>
 800631e:	ebba 0b04 	subs.w	fp, sl, r4
 8006322:	d00b      	beq.n	800633c <_vfiprintf_r+0xc0>
 8006324:	465b      	mov	r3, fp
 8006326:	4622      	mov	r2, r4
 8006328:	4629      	mov	r1, r5
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ff93 	bl	8006256 <__sfputs_r>
 8006330:	3001      	adds	r0, #1
 8006332:	f000 80aa 	beq.w	800648a <_vfiprintf_r+0x20e>
 8006336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006338:	445a      	add	r2, fp
 800633a:	9209      	str	r2, [sp, #36]	; 0x24
 800633c:	f89a 3000 	ldrb.w	r3, [sl]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a2 	beq.w	800648a <_vfiprintf_r+0x20e>
 8006346:	2300      	movs	r3, #0
 8006348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800634c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006350:	f10a 0a01 	add.w	sl, sl, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800635c:	931a      	str	r3, [sp, #104]	; 0x68
 800635e:	4654      	mov	r4, sl
 8006360:	2205      	movs	r2, #5
 8006362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006366:	4858      	ldr	r0, [pc, #352]	; (80064c8 <_vfiprintf_r+0x24c>)
 8006368:	f7f9 ff3a 	bl	80001e0 <memchr>
 800636c:	9a04      	ldr	r2, [sp, #16]
 800636e:	b9d8      	cbnz	r0, 80063a8 <_vfiprintf_r+0x12c>
 8006370:	06d1      	lsls	r1, r2, #27
 8006372:	bf44      	itt	mi
 8006374:	2320      	movmi	r3, #32
 8006376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800637a:	0713      	lsls	r3, r2, #28
 800637c:	bf44      	itt	mi
 800637e:	232b      	movmi	r3, #43	; 0x2b
 8006380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006384:	f89a 3000 	ldrb.w	r3, [sl]
 8006388:	2b2a      	cmp	r3, #42	; 0x2a
 800638a:	d015      	beq.n	80063b8 <_vfiprintf_r+0x13c>
 800638c:	9a07      	ldr	r2, [sp, #28]
 800638e:	4654      	mov	r4, sl
 8006390:	2000      	movs	r0, #0
 8006392:	f04f 0c0a 	mov.w	ip, #10
 8006396:	4621      	mov	r1, r4
 8006398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800639c:	3b30      	subs	r3, #48	; 0x30
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d94e      	bls.n	8006440 <_vfiprintf_r+0x1c4>
 80063a2:	b1b0      	cbz	r0, 80063d2 <_vfiprintf_r+0x156>
 80063a4:	9207      	str	r2, [sp, #28]
 80063a6:	e014      	b.n	80063d2 <_vfiprintf_r+0x156>
 80063a8:	eba0 0308 	sub.w	r3, r0, r8
 80063ac:	fa09 f303 	lsl.w	r3, r9, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	46a2      	mov	sl, r4
 80063b6:	e7d2      	b.n	800635e <_vfiprintf_r+0xe2>
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	1d19      	adds	r1, r3, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	9103      	str	r1, [sp, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bfbb      	ittet	lt
 80063c4:	425b      	neglt	r3, r3
 80063c6:	f042 0202 	orrlt.w	r2, r2, #2
 80063ca:	9307      	strge	r3, [sp, #28]
 80063cc:	9307      	strlt	r3, [sp, #28]
 80063ce:	bfb8      	it	lt
 80063d0:	9204      	strlt	r2, [sp, #16]
 80063d2:	7823      	ldrb	r3, [r4, #0]
 80063d4:	2b2e      	cmp	r3, #46	; 0x2e
 80063d6:	d10c      	bne.n	80063f2 <_vfiprintf_r+0x176>
 80063d8:	7863      	ldrb	r3, [r4, #1]
 80063da:	2b2a      	cmp	r3, #42	; 0x2a
 80063dc:	d135      	bne.n	800644a <_vfiprintf_r+0x1ce>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	9203      	str	r2, [sp, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063ee:	3402      	adds	r4, #2
 80063f0:	9305      	str	r3, [sp, #20]
 80063f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064d8 <_vfiprintf_r+0x25c>
 80063f6:	7821      	ldrb	r1, [r4, #0]
 80063f8:	2203      	movs	r2, #3
 80063fa:	4650      	mov	r0, sl
 80063fc:	f7f9 fef0 	bl	80001e0 <memchr>
 8006400:	b140      	cbz	r0, 8006414 <_vfiprintf_r+0x198>
 8006402:	2340      	movs	r3, #64	; 0x40
 8006404:	eba0 000a 	sub.w	r0, r0, sl
 8006408:	fa03 f000 	lsl.w	r0, r3, r0
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	4303      	orrs	r3, r0
 8006410:	3401      	adds	r4, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006418:	482c      	ldr	r0, [pc, #176]	; (80064cc <_vfiprintf_r+0x250>)
 800641a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641e:	2206      	movs	r2, #6
 8006420:	f7f9 fede 	bl	80001e0 <memchr>
 8006424:	2800      	cmp	r0, #0
 8006426:	d03f      	beq.n	80064a8 <_vfiprintf_r+0x22c>
 8006428:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <_vfiprintf_r+0x254>)
 800642a:	bb1b      	cbnz	r3, 8006474 <_vfiprintf_r+0x1f8>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	3307      	adds	r3, #7
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	3308      	adds	r3, #8
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643a:	443b      	add	r3, r7
 800643c:	9309      	str	r3, [sp, #36]	; 0x24
 800643e:	e767      	b.n	8006310 <_vfiprintf_r+0x94>
 8006440:	fb0c 3202 	mla	r2, ip, r2, r3
 8006444:	460c      	mov	r4, r1
 8006446:	2001      	movs	r0, #1
 8006448:	e7a5      	b.n	8006396 <_vfiprintf_r+0x11a>
 800644a:	2300      	movs	r3, #0
 800644c:	3401      	adds	r4, #1
 800644e:	9305      	str	r3, [sp, #20]
 8006450:	4619      	mov	r1, r3
 8006452:	f04f 0c0a 	mov.w	ip, #10
 8006456:	4620      	mov	r0, r4
 8006458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645c:	3a30      	subs	r2, #48	; 0x30
 800645e:	2a09      	cmp	r2, #9
 8006460:	d903      	bls.n	800646a <_vfiprintf_r+0x1ee>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0c5      	beq.n	80063f2 <_vfiprintf_r+0x176>
 8006466:	9105      	str	r1, [sp, #20]
 8006468:	e7c3      	b.n	80063f2 <_vfiprintf_r+0x176>
 800646a:	fb0c 2101 	mla	r1, ip, r1, r2
 800646e:	4604      	mov	r4, r0
 8006470:	2301      	movs	r3, #1
 8006472:	e7f0      	b.n	8006456 <_vfiprintf_r+0x1da>
 8006474:	ab03      	add	r3, sp, #12
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	462a      	mov	r2, r5
 800647a:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <_vfiprintf_r+0x258>)
 800647c:	a904      	add	r1, sp, #16
 800647e:	4630      	mov	r0, r6
 8006480:	f3af 8000 	nop.w
 8006484:	4607      	mov	r7, r0
 8006486:	1c78      	adds	r0, r7, #1
 8006488:	d1d6      	bne.n	8006438 <_vfiprintf_r+0x1bc>
 800648a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800648c:	07d9      	lsls	r1, r3, #31
 800648e:	d405      	bmi.n	800649c <_vfiprintf_r+0x220>
 8006490:	89ab      	ldrh	r3, [r5, #12]
 8006492:	059a      	lsls	r2, r3, #22
 8006494:	d402      	bmi.n	800649c <_vfiprintf_r+0x220>
 8006496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006498:	f7ff fe55 	bl	8006146 <__retarget_lock_release_recursive>
 800649c:	89ab      	ldrh	r3, [r5, #12]
 800649e:	065b      	lsls	r3, r3, #25
 80064a0:	f53f af12 	bmi.w	80062c8 <_vfiprintf_r+0x4c>
 80064a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a6:	e711      	b.n	80062cc <_vfiprintf_r+0x50>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <_vfiprintf_r+0x258>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f000 f880 	bl	80065b8 <_printf_i>
 80064b8:	e7e4      	b.n	8006484 <_vfiprintf_r+0x208>
 80064ba:	bf00      	nop
 80064bc:	08007330 	.word	0x08007330
 80064c0:	08007350 	.word	0x08007350
 80064c4:	08007310 	.word	0x08007310
 80064c8:	08007370 	.word	0x08007370
 80064cc:	0800737a 	.word	0x0800737a
 80064d0:	00000000 	.word	0x00000000
 80064d4:	08006257 	.word	0x08006257
 80064d8:	08007376 	.word	0x08007376

080064dc <_printf_common>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	4616      	mov	r6, r2
 80064e2:	4699      	mov	r9, r3
 80064e4:	688a      	ldr	r2, [r1, #8]
 80064e6:	690b      	ldr	r3, [r1, #16]
 80064e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfb8      	it	lt
 80064f0:	4613      	movlt	r3, r2
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f8:	4607      	mov	r7, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b10a      	cbz	r2, 8006502 <_printf_common+0x26>
 80064fe:	3301      	adds	r3, #1
 8006500:	6033      	str	r3, [r6, #0]
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	0699      	lsls	r1, r3, #26
 8006506:	bf42      	ittt	mi
 8006508:	6833      	ldrmi	r3, [r6, #0]
 800650a:	3302      	addmi	r3, #2
 800650c:	6033      	strmi	r3, [r6, #0]
 800650e:	6825      	ldr	r5, [r4, #0]
 8006510:	f015 0506 	ands.w	r5, r5, #6
 8006514:	d106      	bne.n	8006524 <_printf_common+0x48>
 8006516:	f104 0a19 	add.w	sl, r4, #25
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	6832      	ldr	r2, [r6, #0]
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	42ab      	cmp	r3, r5
 8006522:	dc26      	bgt.n	8006572 <_printf_common+0x96>
 8006524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006528:	1e13      	subs	r3, r2, #0
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	bf18      	it	ne
 800652e:	2301      	movne	r3, #1
 8006530:	0692      	lsls	r2, r2, #26
 8006532:	d42b      	bmi.n	800658c <_printf_common+0xb0>
 8006534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006538:	4649      	mov	r1, r9
 800653a:	4638      	mov	r0, r7
 800653c:	47c0      	blx	r8
 800653e:	3001      	adds	r0, #1
 8006540:	d01e      	beq.n	8006580 <_printf_common+0xa4>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	68e5      	ldr	r5, [r4, #12]
 8006546:	6832      	ldr	r2, [r6, #0]
 8006548:	f003 0306 	and.w	r3, r3, #6
 800654c:	2b04      	cmp	r3, #4
 800654e:	bf08      	it	eq
 8006550:	1aad      	subeq	r5, r5, r2
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	bf0c      	ite	eq
 8006558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800655c:	2500      	movne	r5, #0
 800655e:	4293      	cmp	r3, r2
 8006560:	bfc4      	itt	gt
 8006562:	1a9b      	subgt	r3, r3, r2
 8006564:	18ed      	addgt	r5, r5, r3
 8006566:	2600      	movs	r6, #0
 8006568:	341a      	adds	r4, #26
 800656a:	42b5      	cmp	r5, r6
 800656c:	d11a      	bne.n	80065a4 <_printf_common+0xc8>
 800656e:	2000      	movs	r0, #0
 8006570:	e008      	b.n	8006584 <_printf_common+0xa8>
 8006572:	2301      	movs	r3, #1
 8006574:	4652      	mov	r2, sl
 8006576:	4649      	mov	r1, r9
 8006578:	4638      	mov	r0, r7
 800657a:	47c0      	blx	r8
 800657c:	3001      	adds	r0, #1
 800657e:	d103      	bne.n	8006588 <_printf_common+0xac>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	3501      	adds	r5, #1
 800658a:	e7c6      	b.n	800651a <_printf_common+0x3e>
 800658c:	18e1      	adds	r1, r4, r3
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	2030      	movs	r0, #48	; 0x30
 8006592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006596:	4422      	add	r2, r4
 8006598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800659c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a0:	3302      	adds	r3, #2
 80065a2:	e7c7      	b.n	8006534 <_printf_common+0x58>
 80065a4:	2301      	movs	r3, #1
 80065a6:	4622      	mov	r2, r4
 80065a8:	4649      	mov	r1, r9
 80065aa:	4638      	mov	r0, r7
 80065ac:	47c0      	blx	r8
 80065ae:	3001      	adds	r0, #1
 80065b0:	d0e6      	beq.n	8006580 <_printf_common+0xa4>
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7d9      	b.n	800656a <_printf_common+0x8e>
	...

080065b8 <_printf_i>:
 80065b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	460c      	mov	r4, r1
 80065be:	4691      	mov	r9, r2
 80065c0:	7e27      	ldrb	r7, [r4, #24]
 80065c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065c4:	2f78      	cmp	r7, #120	; 0x78
 80065c6:	4680      	mov	r8, r0
 80065c8:	469a      	mov	sl, r3
 80065ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ce:	d807      	bhi.n	80065e0 <_printf_i+0x28>
 80065d0:	2f62      	cmp	r7, #98	; 0x62
 80065d2:	d80a      	bhi.n	80065ea <_printf_i+0x32>
 80065d4:	2f00      	cmp	r7, #0
 80065d6:	f000 80d8 	beq.w	800678a <_printf_i+0x1d2>
 80065da:	2f58      	cmp	r7, #88	; 0x58
 80065dc:	f000 80a3 	beq.w	8006726 <_printf_i+0x16e>
 80065e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065e8:	e03a      	b.n	8006660 <_printf_i+0xa8>
 80065ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ee:	2b15      	cmp	r3, #21
 80065f0:	d8f6      	bhi.n	80065e0 <_printf_i+0x28>
 80065f2:	a001      	add	r0, pc, #4	; (adr r0, 80065f8 <_printf_i+0x40>)
 80065f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065f8:	08006651 	.word	0x08006651
 80065fc:	08006665 	.word	0x08006665
 8006600:	080065e1 	.word	0x080065e1
 8006604:	080065e1 	.word	0x080065e1
 8006608:	080065e1 	.word	0x080065e1
 800660c:	080065e1 	.word	0x080065e1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065e1 	.word	0x080065e1
 8006618:	080065e1 	.word	0x080065e1
 800661c:	080065e1 	.word	0x080065e1
 8006620:	080065e1 	.word	0x080065e1
 8006624:	08006771 	.word	0x08006771
 8006628:	08006695 	.word	0x08006695
 800662c:	08006753 	.word	0x08006753
 8006630:	080065e1 	.word	0x080065e1
 8006634:	080065e1 	.word	0x080065e1
 8006638:	08006793 	.word	0x08006793
 800663c:	080065e1 	.word	0x080065e1
 8006640:	08006695 	.word	0x08006695
 8006644:	080065e1 	.word	0x080065e1
 8006648:	080065e1 	.word	0x080065e1
 800664c:	0800675b 	.word	0x0800675b
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	600a      	str	r2, [r1, #0]
 8006658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800665c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006660:	2301      	movs	r3, #1
 8006662:	e0a3      	b.n	80067ac <_printf_i+0x1f4>
 8006664:	6825      	ldr	r5, [r4, #0]
 8006666:	6808      	ldr	r0, [r1, #0]
 8006668:	062e      	lsls	r6, r5, #24
 800666a:	f100 0304 	add.w	r3, r0, #4
 800666e:	d50a      	bpl.n	8006686 <_printf_i+0xce>
 8006670:	6805      	ldr	r5, [r0, #0]
 8006672:	600b      	str	r3, [r1, #0]
 8006674:	2d00      	cmp	r5, #0
 8006676:	da03      	bge.n	8006680 <_printf_i+0xc8>
 8006678:	232d      	movs	r3, #45	; 0x2d
 800667a:	426d      	negs	r5, r5
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006680:	485e      	ldr	r0, [pc, #376]	; (80067fc <_printf_i+0x244>)
 8006682:	230a      	movs	r3, #10
 8006684:	e019      	b.n	80066ba <_printf_i+0x102>
 8006686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800668a:	6805      	ldr	r5, [r0, #0]
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	bf18      	it	ne
 8006690:	b22d      	sxthne	r5, r5
 8006692:	e7ef      	b.n	8006674 <_printf_i+0xbc>
 8006694:	680b      	ldr	r3, [r1, #0]
 8006696:	6825      	ldr	r5, [r4, #0]
 8006698:	1d18      	adds	r0, r3, #4
 800669a:	6008      	str	r0, [r1, #0]
 800669c:	0628      	lsls	r0, r5, #24
 800669e:	d501      	bpl.n	80066a4 <_printf_i+0xec>
 80066a0:	681d      	ldr	r5, [r3, #0]
 80066a2:	e002      	b.n	80066aa <_printf_i+0xf2>
 80066a4:	0669      	lsls	r1, r5, #25
 80066a6:	d5fb      	bpl.n	80066a0 <_printf_i+0xe8>
 80066a8:	881d      	ldrh	r5, [r3, #0]
 80066aa:	4854      	ldr	r0, [pc, #336]	; (80067fc <_printf_i+0x244>)
 80066ac:	2f6f      	cmp	r7, #111	; 0x6f
 80066ae:	bf0c      	ite	eq
 80066b0:	2308      	moveq	r3, #8
 80066b2:	230a      	movne	r3, #10
 80066b4:	2100      	movs	r1, #0
 80066b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ba:	6866      	ldr	r6, [r4, #4]
 80066bc:	60a6      	str	r6, [r4, #8]
 80066be:	2e00      	cmp	r6, #0
 80066c0:	bfa2      	ittt	ge
 80066c2:	6821      	ldrge	r1, [r4, #0]
 80066c4:	f021 0104 	bicge.w	r1, r1, #4
 80066c8:	6021      	strge	r1, [r4, #0]
 80066ca:	b90d      	cbnz	r5, 80066d0 <_printf_i+0x118>
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	d04d      	beq.n	800676c <_printf_i+0x1b4>
 80066d0:	4616      	mov	r6, r2
 80066d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066d6:	fb03 5711 	mls	r7, r3, r1, r5
 80066da:	5dc7      	ldrb	r7, [r0, r7]
 80066dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066e0:	462f      	mov	r7, r5
 80066e2:	42bb      	cmp	r3, r7
 80066e4:	460d      	mov	r5, r1
 80066e6:	d9f4      	bls.n	80066d2 <_printf_i+0x11a>
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d10b      	bne.n	8006704 <_printf_i+0x14c>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	07df      	lsls	r7, r3, #31
 80066f0:	d508      	bpl.n	8006704 <_printf_i+0x14c>
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	6861      	ldr	r1, [r4, #4]
 80066f6:	4299      	cmp	r1, r3
 80066f8:	bfde      	ittt	le
 80066fa:	2330      	movle	r3, #48	; 0x30
 80066fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006700:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006704:	1b92      	subs	r2, r2, r6
 8006706:	6122      	str	r2, [r4, #16]
 8006708:	f8cd a000 	str.w	sl, [sp]
 800670c:	464b      	mov	r3, r9
 800670e:	aa03      	add	r2, sp, #12
 8006710:	4621      	mov	r1, r4
 8006712:	4640      	mov	r0, r8
 8006714:	f7ff fee2 	bl	80064dc <_printf_common>
 8006718:	3001      	adds	r0, #1
 800671a:	d14c      	bne.n	80067b6 <_printf_i+0x1fe>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006720:	b004      	add	sp, #16
 8006722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006726:	4835      	ldr	r0, [pc, #212]	; (80067fc <_printf_i+0x244>)
 8006728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	680e      	ldr	r6, [r1, #0]
 8006730:	061f      	lsls	r7, r3, #24
 8006732:	f856 5b04 	ldr.w	r5, [r6], #4
 8006736:	600e      	str	r6, [r1, #0]
 8006738:	d514      	bpl.n	8006764 <_printf_i+0x1ac>
 800673a:	07d9      	lsls	r1, r3, #31
 800673c:	bf44      	itt	mi
 800673e:	f043 0320 	orrmi.w	r3, r3, #32
 8006742:	6023      	strmi	r3, [r4, #0]
 8006744:	b91d      	cbnz	r5, 800674e <_printf_i+0x196>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f023 0320 	bic.w	r3, r3, #32
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	2310      	movs	r3, #16
 8006750:	e7b0      	b.n	80066b4 <_printf_i+0xfc>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f043 0320 	orr.w	r3, r3, #32
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	2378      	movs	r3, #120	; 0x78
 800675c:	4828      	ldr	r0, [pc, #160]	; (8006800 <_printf_i+0x248>)
 800675e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006762:	e7e3      	b.n	800672c <_printf_i+0x174>
 8006764:	065e      	lsls	r6, r3, #25
 8006766:	bf48      	it	mi
 8006768:	b2ad      	uxthmi	r5, r5
 800676a:	e7e6      	b.n	800673a <_printf_i+0x182>
 800676c:	4616      	mov	r6, r2
 800676e:	e7bb      	b.n	80066e8 <_printf_i+0x130>
 8006770:	680b      	ldr	r3, [r1, #0]
 8006772:	6826      	ldr	r6, [r4, #0]
 8006774:	6960      	ldr	r0, [r4, #20]
 8006776:	1d1d      	adds	r5, r3, #4
 8006778:	600d      	str	r5, [r1, #0]
 800677a:	0635      	lsls	r5, r6, #24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	d501      	bpl.n	8006784 <_printf_i+0x1cc>
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	e002      	b.n	800678a <_printf_i+0x1d2>
 8006784:	0671      	lsls	r1, r6, #25
 8006786:	d5fb      	bpl.n	8006780 <_printf_i+0x1c8>
 8006788:	8018      	strh	r0, [r3, #0]
 800678a:	2300      	movs	r3, #0
 800678c:	6123      	str	r3, [r4, #16]
 800678e:	4616      	mov	r6, r2
 8006790:	e7ba      	b.n	8006708 <_printf_i+0x150>
 8006792:	680b      	ldr	r3, [r1, #0]
 8006794:	1d1a      	adds	r2, r3, #4
 8006796:	600a      	str	r2, [r1, #0]
 8006798:	681e      	ldr	r6, [r3, #0]
 800679a:	6862      	ldr	r2, [r4, #4]
 800679c:	2100      	movs	r1, #0
 800679e:	4630      	mov	r0, r6
 80067a0:	f7f9 fd1e 	bl	80001e0 <memchr>
 80067a4:	b108      	cbz	r0, 80067aa <_printf_i+0x1f2>
 80067a6:	1b80      	subs	r0, r0, r6
 80067a8:	6060      	str	r0, [r4, #4]
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	2300      	movs	r3, #0
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b4:	e7a8      	b.n	8006708 <_printf_i+0x150>
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	4632      	mov	r2, r6
 80067ba:	4649      	mov	r1, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	47d0      	blx	sl
 80067c0:	3001      	adds	r0, #1
 80067c2:	d0ab      	beq.n	800671c <_printf_i+0x164>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	079b      	lsls	r3, r3, #30
 80067c8:	d413      	bmi.n	80067f2 <_printf_i+0x23a>
 80067ca:	68e0      	ldr	r0, [r4, #12]
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	4298      	cmp	r0, r3
 80067d0:	bfb8      	it	lt
 80067d2:	4618      	movlt	r0, r3
 80067d4:	e7a4      	b.n	8006720 <_printf_i+0x168>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4632      	mov	r2, r6
 80067da:	4649      	mov	r1, r9
 80067dc:	4640      	mov	r0, r8
 80067de:	47d0      	blx	sl
 80067e0:	3001      	adds	r0, #1
 80067e2:	d09b      	beq.n	800671c <_printf_i+0x164>
 80067e4:	3501      	adds	r5, #1
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	9903      	ldr	r1, [sp, #12]
 80067ea:	1a5b      	subs	r3, r3, r1
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	dcf2      	bgt.n	80067d6 <_printf_i+0x21e>
 80067f0:	e7eb      	b.n	80067ca <_printf_i+0x212>
 80067f2:	2500      	movs	r5, #0
 80067f4:	f104 0619 	add.w	r6, r4, #25
 80067f8:	e7f5      	b.n	80067e6 <_printf_i+0x22e>
 80067fa:	bf00      	nop
 80067fc:	08007381 	.word	0x08007381
 8006800:	08007392 	.word	0x08007392

08006804 <_putc_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	460d      	mov	r5, r1
 8006808:	4614      	mov	r4, r2
 800680a:	4606      	mov	r6, r0
 800680c:	b118      	cbz	r0, 8006816 <_putc_r+0x12>
 800680e:	6983      	ldr	r3, [r0, #24]
 8006810:	b90b      	cbnz	r3, 8006816 <_putc_r+0x12>
 8006812:	f7ff fbe7 	bl	8005fe4 <__sinit>
 8006816:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <_putc_r+0x84>)
 8006818:	429c      	cmp	r4, r3
 800681a:	d124      	bne.n	8006866 <_putc_r+0x62>
 800681c:	6874      	ldr	r4, [r6, #4]
 800681e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006820:	07d8      	lsls	r0, r3, #31
 8006822:	d405      	bmi.n	8006830 <_putc_r+0x2c>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	0599      	lsls	r1, r3, #22
 8006828:	d402      	bmi.n	8006830 <_putc_r+0x2c>
 800682a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800682c:	f7ff fc8a 	bl	8006144 <__retarget_lock_acquire_recursive>
 8006830:	68a3      	ldr	r3, [r4, #8]
 8006832:	3b01      	subs	r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	60a3      	str	r3, [r4, #8]
 8006838:	da05      	bge.n	8006846 <_putc_r+0x42>
 800683a:	69a2      	ldr	r2, [r4, #24]
 800683c:	4293      	cmp	r3, r2
 800683e:	db1c      	blt.n	800687a <_putc_r+0x76>
 8006840:	b2eb      	uxtb	r3, r5
 8006842:	2b0a      	cmp	r3, #10
 8006844:	d019      	beq.n	800687a <_putc_r+0x76>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	701d      	strb	r5, [r3, #0]
 800684e:	b2ed      	uxtb	r5, r5
 8006850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006852:	07da      	lsls	r2, r3, #31
 8006854:	d405      	bmi.n	8006862 <_putc_r+0x5e>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	d402      	bmi.n	8006862 <_putc_r+0x5e>
 800685c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685e:	f7ff fc72 	bl	8006146 <__retarget_lock_release_recursive>
 8006862:	4628      	mov	r0, r5
 8006864:	bd70      	pop	{r4, r5, r6, pc}
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <_putc_r+0x88>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d101      	bne.n	8006870 <_putc_r+0x6c>
 800686c:	68b4      	ldr	r4, [r6, #8]
 800686e:	e7d6      	b.n	800681e <_putc_r+0x1a>
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <_putc_r+0x8c>)
 8006872:	429c      	cmp	r4, r3
 8006874:	bf08      	it	eq
 8006876:	68f4      	ldreq	r4, [r6, #12]
 8006878:	e7d1      	b.n	800681e <_putc_r+0x1a>
 800687a:	4629      	mov	r1, r5
 800687c:	4622      	mov	r2, r4
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff f9b8 	bl	8005bf4 <__swbuf_r>
 8006884:	4605      	mov	r5, r0
 8006886:	e7e3      	b.n	8006850 <_putc_r+0x4c>
 8006888:	08007330 	.word	0x08007330
 800688c:	08007350 	.word	0x08007350
 8006890:	08007310 	.word	0x08007310

08006894 <__sread>:
 8006894:	b510      	push	{r4, lr}
 8006896:	460c      	mov	r4, r1
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	f000 f888 	bl	80069b0 <_read_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	bfab      	itete	ge
 80068a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068a6:	89a3      	ldrhlt	r3, [r4, #12]
 80068a8:	181b      	addge	r3, r3, r0
 80068aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ae:	bfac      	ite	ge
 80068b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80068b2:	81a3      	strhlt	r3, [r4, #12]
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <__swrite>:
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	461f      	mov	r7, r3
 80068bc:	898b      	ldrh	r3, [r1, #12]
 80068be:	05db      	lsls	r3, r3, #23
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	d505      	bpl.n	80068d4 <__swrite+0x1e>
 80068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068cc:	2302      	movs	r3, #2
 80068ce:	2200      	movs	r2, #0
 80068d0:	f000 f85c 	bl	800698c <_lseek_r>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	f7fb b895 	b.w	8001a18 <_write_r>

080068ee <__sseek>:
 80068ee:	b510      	push	{r4, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f6:	f000 f849 	bl	800698c <_lseek_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	bf15      	itete	ne
 8006900:	6560      	strne	r0, [r4, #84]	; 0x54
 8006902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800690a:	81a3      	strheq	r3, [r4, #12]
 800690c:	bf18      	it	ne
 800690e:	81a3      	strhne	r3, [r4, #12]
 8006910:	bd10      	pop	{r4, pc}

08006912 <__sclose>:
 8006912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006916:	f000 b807 	b.w	8006928 <_close_r>

0800691a <abort>:
 800691a:	b508      	push	{r3, lr}
 800691c:	2006      	movs	r0, #6
 800691e:	f000 f881 	bl	8006a24 <raise>
 8006922:	2001      	movs	r0, #1
 8006924:	f7fe fd44 	bl	80053b0 <_exit>

08006928 <_close_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d06      	ldr	r5, [pc, #24]	; (8006944 <_close_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fe fd63 	bl	80053fe <_close>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_close_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_close_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	200001dc 	.word	0x200001dc

08006948 <_fstat_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	; (8006968 <_fstat_r+0x20>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	f7fe fd5e 	bl	8005416 <_fstat>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d102      	bne.n	8006964 <_fstat_r+0x1c>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	b103      	cbz	r3, 8006964 <_fstat_r+0x1c>
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	200001dc 	.word	0x200001dc

0800696c <_isatty_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_isatty_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7fe fd5d 	bl	8005436 <_isatty>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_isatty_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_isatty_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	200001dc 	.word	0x200001dc

0800698c <_lseek_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_lseek_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fe fd56 	bl	800544c <_lseek>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_lseek_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_lseek_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	200001dc 	.word	0x200001dc

080069b0 <_read_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	; (80069d0 <_read_r+0x20>)
 80069b4:	4604      	mov	r4, r0
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7fe fd00 	bl	80053c4 <_read>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_read_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_read_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	200001dc 	.word	0x200001dc

080069d4 <_raise_r>:
 80069d4:	291f      	cmp	r1, #31
 80069d6:	b538      	push	{r3, r4, r5, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	d904      	bls.n	80069e8 <_raise_r+0x14>
 80069de:	2316      	movs	r3, #22
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069ea:	b112      	cbz	r2, 80069f2 <_raise_r+0x1e>
 80069ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069f0:	b94b      	cbnz	r3, 8006a06 <_raise_r+0x32>
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f830 	bl	8006a58 <_getpid_r>
 80069f8:	462a      	mov	r2, r5
 80069fa:	4601      	mov	r1, r0
 80069fc:	4620      	mov	r0, r4
 80069fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a02:	f000 b817 	b.w	8006a34 <_kill_r>
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d00a      	beq.n	8006a20 <_raise_r+0x4c>
 8006a0a:	1c59      	adds	r1, r3, #1
 8006a0c:	d103      	bne.n	8006a16 <_raise_r+0x42>
 8006a0e:	2316      	movs	r3, #22
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	2001      	movs	r0, #1
 8006a14:	e7e7      	b.n	80069e6 <_raise_r+0x12>
 8006a16:	2400      	movs	r4, #0
 8006a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	4798      	blx	r3
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7e0      	b.n	80069e6 <_raise_r+0x12>

08006a24 <raise>:
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <raise+0xc>)
 8006a26:	4601      	mov	r1, r0
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f7ff bfd3 	b.w	80069d4 <_raise_r>
 8006a2e:	bf00      	nop
 8006a30:	2000002c 	.word	0x2000002c

08006a34 <_kill_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	; (8006a54 <_kill_r+0x20>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	f7fe fca5 	bl	8005390 <_kill>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d102      	bne.n	8006a50 <_kill_r+0x1c>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b103      	cbz	r3, 8006a50 <_kill_r+0x1c>
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	200001dc 	.word	0x200001dc

08006a58 <_getpid_r>:
 8006a58:	f7fe bc92 	b.w	8005380 <_getpid>

08006a5c <sqrt>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	ed2d 8b02 	vpush	{d8}
 8006a62:	ec55 4b10 	vmov	r4, r5, d0
 8006a66:	f000 f82d 	bl	8006ac4 <__ieee754_sqrt>
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <sqrt+0x64>)
 8006a6c:	eeb0 8a40 	vmov.f32	s16, s0
 8006a70:	eef0 8a60 	vmov.f32	s17, s1
 8006a74:	f993 3000 	ldrsb.w	r3, [r3]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	d019      	beq.n	8006ab0 <sqrt+0x54>
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	462b      	mov	r3, r5
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7fa f852 	bl	8000b2c <__aeabi_dcmpun>
 8006a88:	b990      	cbnz	r0, 8006ab0 <sqrt+0x54>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7fa f823 	bl	8000adc <__aeabi_dcmplt>
 8006a96:	b158      	cbz	r0, 8006ab0 <sqrt+0x54>
 8006a98:	f7fe fdd0 	bl	800563c <__errno>
 8006a9c:	2321      	movs	r3, #33	; 0x21
 8006a9e:	6003      	str	r3, [r0, #0]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f7f9 fed0 	bl	800084c <__aeabi_ddiv>
 8006aac:	ec41 0b18 	vmov	d8, r0, r1
 8006ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ab4:	eef0 0a68 	vmov.f32	s1, s17
 8006ab8:	ecbd 8b02 	vpop	{d8}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000090 	.word	0x20000090

08006ac4 <__ieee754_sqrt>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	ec55 4b10 	vmov	r4, r5, d0
 8006acc:	4e56      	ldr	r6, [pc, #344]	; (8006c28 <__ieee754_sqrt+0x164>)
 8006ace:	43ae      	bics	r6, r5
 8006ad0:	ee10 0a10 	vmov	r0, s0
 8006ad4:	ee10 3a10 	vmov	r3, s0
 8006ad8:	4629      	mov	r1, r5
 8006ada:	462a      	mov	r2, r5
 8006adc:	d110      	bne.n	8006b00 <__ieee754_sqrt+0x3c>
 8006ade:	ee10 2a10 	vmov	r2, s0
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	f7f9 fd88 	bl	80005f8 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fbcc 	bl	800028c <__adddf3>
 8006af4:	4604      	mov	r4, r0
 8006af6:	460d      	mov	r5, r1
 8006af8:	ec45 4b10 	vmov	d0, r4, r5
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	dc10      	bgt.n	8006b26 <__ieee754_sqrt+0x62>
 8006b04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b08:	4330      	orrs	r0, r6
 8006b0a:	d0f5      	beq.n	8006af8 <__ieee754_sqrt+0x34>
 8006b0c:	b15d      	cbz	r5, 8006b26 <__ieee754_sqrt+0x62>
 8006b0e:	ee10 2a10 	vmov	r2, s0
 8006b12:	462b      	mov	r3, r5
 8006b14:	ee10 0a10 	vmov	r0, s0
 8006b18:	f7f9 fbb6 	bl	8000288 <__aeabi_dsub>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	f7f9 fe94 	bl	800084c <__aeabi_ddiv>
 8006b24:	e7e6      	b.n	8006af4 <__ieee754_sqrt+0x30>
 8006b26:	1509      	asrs	r1, r1, #20
 8006b28:	d076      	beq.n	8006c18 <__ieee754_sqrt+0x154>
 8006b2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006b2e:	07ce      	lsls	r6, r1, #31
 8006b30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006b34:	bf5e      	ittt	pl
 8006b36:	0fda      	lsrpl	r2, r3, #31
 8006b38:	005b      	lslpl	r3, r3, #1
 8006b3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006b3e:	0fda      	lsrs	r2, r3, #31
 8006b40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006b44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006b48:	2000      	movs	r0, #0
 8006b4a:	106d      	asrs	r5, r5, #1
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	f04f 0e16 	mov.w	lr, #22
 8006b52:	4684      	mov	ip, r0
 8006b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b58:	eb0c 0401 	add.w	r4, ip, r1
 8006b5c:	4294      	cmp	r4, r2
 8006b5e:	bfde      	ittt	le
 8006b60:	1b12      	suble	r2, r2, r4
 8006b62:	eb04 0c01 	addle.w	ip, r4, r1
 8006b66:	1840      	addle	r0, r0, r1
 8006b68:	0052      	lsls	r2, r2, #1
 8006b6a:	f1be 0e01 	subs.w	lr, lr, #1
 8006b6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006b72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b7a:	d1ed      	bne.n	8006b58 <__ieee754_sqrt+0x94>
 8006b7c:	4671      	mov	r1, lr
 8006b7e:	2720      	movs	r7, #32
 8006b80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006b84:	4562      	cmp	r2, ip
 8006b86:	eb04 060e 	add.w	r6, r4, lr
 8006b8a:	dc02      	bgt.n	8006b92 <__ieee754_sqrt+0xce>
 8006b8c:	d113      	bne.n	8006bb6 <__ieee754_sqrt+0xf2>
 8006b8e:	429e      	cmp	r6, r3
 8006b90:	d811      	bhi.n	8006bb6 <__ieee754_sqrt+0xf2>
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	eb06 0e04 	add.w	lr, r6, r4
 8006b98:	da43      	bge.n	8006c22 <__ieee754_sqrt+0x15e>
 8006b9a:	f1be 0f00 	cmp.w	lr, #0
 8006b9e:	db40      	blt.n	8006c22 <__ieee754_sqrt+0x15e>
 8006ba0:	f10c 0801 	add.w	r8, ip, #1
 8006ba4:	eba2 020c 	sub.w	r2, r2, ip
 8006ba8:	429e      	cmp	r6, r3
 8006baa:	bf88      	it	hi
 8006bac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006bb0:	1b9b      	subs	r3, r3, r6
 8006bb2:	4421      	add	r1, r4
 8006bb4:	46c4      	mov	ip, r8
 8006bb6:	0052      	lsls	r2, r2, #1
 8006bb8:	3f01      	subs	r7, #1
 8006bba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006bbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006bc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bc6:	d1dd      	bne.n	8006b84 <__ieee754_sqrt+0xc0>
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d006      	beq.n	8006bda <__ieee754_sqrt+0x116>
 8006bcc:	1c4c      	adds	r4, r1, #1
 8006bce:	bf13      	iteet	ne
 8006bd0:	3101      	addne	r1, #1
 8006bd2:	3001      	addeq	r0, #1
 8006bd4:	4639      	moveq	r1, r7
 8006bd6:	f021 0101 	bicne.w	r1, r1, #1
 8006bda:	1043      	asrs	r3, r0, #1
 8006bdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006be0:	0849      	lsrs	r1, r1, #1
 8006be2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006be6:	07c2      	lsls	r2, r0, #31
 8006be8:	bf48      	it	mi
 8006bea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006bee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	463d      	mov	r5, r7
 8006bf6:	e77f      	b.n	8006af8 <__ieee754_sqrt+0x34>
 8006bf8:	0ada      	lsrs	r2, r3, #11
 8006bfa:	3815      	subs	r0, #21
 8006bfc:	055b      	lsls	r3, r3, #21
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	d0fa      	beq.n	8006bf8 <__ieee754_sqrt+0x134>
 8006c02:	02d7      	lsls	r7, r2, #11
 8006c04:	d50a      	bpl.n	8006c1c <__ieee754_sqrt+0x158>
 8006c06:	f1c1 0420 	rsb	r4, r1, #32
 8006c0a:	fa23 f404 	lsr.w	r4, r3, r4
 8006c0e:	1e4d      	subs	r5, r1, #1
 8006c10:	408b      	lsls	r3, r1
 8006c12:	4322      	orrs	r2, r4
 8006c14:	1b41      	subs	r1, r0, r5
 8006c16:	e788      	b.n	8006b2a <__ieee754_sqrt+0x66>
 8006c18:	4608      	mov	r0, r1
 8006c1a:	e7f0      	b.n	8006bfe <__ieee754_sqrt+0x13a>
 8006c1c:	0052      	lsls	r2, r2, #1
 8006c1e:	3101      	adds	r1, #1
 8006c20:	e7ef      	b.n	8006c02 <__ieee754_sqrt+0x13e>
 8006c22:	46e0      	mov	r8, ip
 8006c24:	e7be      	b.n	8006ba4 <__ieee754_sqrt+0xe0>
 8006c26:	bf00      	nop
 8006c28:	7ff00000 	.word	0x7ff00000

08006c2c <_init>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr

08006c38 <_fini>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr
=======
 800592c:	e7fe      	b.n	800592c <ADC1_2_IRQHandler>
	...

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2000002c 	.word	0x2000002c

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	; (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	; (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	; (8005980 <__libc_init_array+0x44>)
 8005950:	f001 f9fe 	bl	8006d50 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	080074ec 	.word	0x080074ec
 8005978:	080074ec 	.word	0x080074ec
 800597c:	080074ec 	.word	0x080074ec
 8005980:	080074f0 	.word	0x080074f0

08005984 <malloc>:
 8005984:	4b02      	ldr	r3, [pc, #8]	; (8005990 <malloc+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 b863 	b.w	8005a54 <_malloc_r>
 800598e:	bf00      	nop
 8005990:	2000002c 	.word	0x2000002c

08005994 <free>:
 8005994:	4b02      	ldr	r3, [pc, #8]	; (80059a0 <free+0xc>)
 8005996:	4601      	mov	r1, r0
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	f000 b80b 	b.w	80059b4 <_free_r>
 800599e:	bf00      	nop
 80059a0:	2000002c 	.word	0x2000002c

080059a4 <memset>:
 80059a4:	4402      	add	r2, r0
 80059a6:	4603      	mov	r3, r0
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d100      	bne.n	80059ae <memset+0xa>
 80059ac:	4770      	bx	lr
 80059ae:	f803 1b01 	strb.w	r1, [r3], #1
 80059b2:	e7f9      	b.n	80059a8 <memset+0x4>

080059b4 <_free_r>:
 80059b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b6:	2900      	cmp	r1, #0
 80059b8:	d048      	beq.n	8005a4c <_free_r+0x98>
 80059ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059be:	9001      	str	r0, [sp, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f1a1 0404 	sub.w	r4, r1, #4
 80059c6:	bfb8      	it	lt
 80059c8:	18e4      	addlt	r4, r4, r3
 80059ca:	f000 fd9b 	bl	8006504 <__malloc_lock>
 80059ce:	4a20      	ldr	r2, [pc, #128]	; (8005a50 <_free_r+0x9c>)
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	4615      	mov	r5, r2
 80059d6:	b933      	cbnz	r3, 80059e6 <_free_r+0x32>
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6014      	str	r4, [r2, #0]
 80059dc:	b003      	add	sp, #12
 80059de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e2:	f000 bd95 	b.w	8006510 <__malloc_unlock>
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	d90b      	bls.n	8005a02 <_free_r+0x4e>
 80059ea:	6821      	ldr	r1, [r4, #0]
 80059ec:	1862      	adds	r2, r4, r1
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bf04      	itt	eq
 80059f2:	681a      	ldreq	r2, [r3, #0]
 80059f4:	685b      	ldreq	r3, [r3, #4]
 80059f6:	6063      	str	r3, [r4, #4]
 80059f8:	bf04      	itt	eq
 80059fa:	1852      	addeq	r2, r2, r1
 80059fc:	6022      	streq	r2, [r4, #0]
 80059fe:	602c      	str	r4, [r5, #0]
 8005a00:	e7ec      	b.n	80059dc <_free_r+0x28>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x58>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x4e>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1855      	adds	r5, r2, r1
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x78>
 8005a14:	6824      	ldr	r4, [r4, #0]
 8005a16:	4421      	add	r1, r4
 8005a18:	1854      	adds	r4, r2, r1
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1dd      	bne.n	80059dc <_free_r+0x28>
 8005a20:	681c      	ldr	r4, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	4421      	add	r1, r4
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	e7d7      	b.n	80059dc <_free_r+0x28>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x80>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	6003      	str	r3, [r0, #0]
 8005a32:	e7d3      	b.n	80059dc <_free_r+0x28>
 8005a34:	6825      	ldr	r5, [r4, #0]
 8005a36:	1961      	adds	r1, r4, r5
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1949      	addeq	r1, r1, r5
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7c7      	b.n	80059dc <_free_r+0x28>
 8005a4c:	b003      	add	sp, #12
 8005a4e:	bd30      	pop	{r4, r5, pc}
 8005a50:	200001c0 	.word	0x200001c0

08005a54 <_malloc_r>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	1ccd      	adds	r5, r1, #3
 8005a58:	f025 0503 	bic.w	r5, r5, #3
 8005a5c:	3508      	adds	r5, #8
 8005a5e:	2d0c      	cmp	r5, #12
 8005a60:	bf38      	it	cc
 8005a62:	250c      	movcc	r5, #12
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	4606      	mov	r6, r0
 8005a68:	db01      	blt.n	8005a6e <_malloc_r+0x1a>
 8005a6a:	42a9      	cmp	r1, r5
 8005a6c:	d903      	bls.n	8005a76 <_malloc_r+0x22>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	2000      	movs	r0, #0
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a76:	f000 fd45 	bl	8006504 <__malloc_lock>
 8005a7a:	4921      	ldr	r1, [pc, #132]	; (8005b00 <_malloc_r+0xac>)
 8005a7c:	680a      	ldr	r2, [r1, #0]
 8005a7e:	4614      	mov	r4, r2
 8005a80:	b99c      	cbnz	r4, 8005aaa <_malloc_r+0x56>
 8005a82:	4f20      	ldr	r7, [pc, #128]	; (8005b04 <_malloc_r+0xb0>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	b923      	cbnz	r3, 8005a92 <_malloc_r+0x3e>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f000 f94e 	bl	8005d2c <_sbrk_r>
 8005a90:	6038      	str	r0, [r7, #0]
 8005a92:	4629      	mov	r1, r5
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f949 	bl	8005d2c <_sbrk_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d123      	bne.n	8005ae6 <_malloc_r+0x92>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f000 fd34 	bl	8006510 <__malloc_unlock>
 8005aa8:	e7e3      	b.n	8005a72 <_malloc_r+0x1e>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	1b5b      	subs	r3, r3, r5
 8005aae:	d417      	bmi.n	8005ae0 <_malloc_r+0x8c>
 8005ab0:	2b0b      	cmp	r3, #11
 8005ab2:	d903      	bls.n	8005abc <_malloc_r+0x68>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	441c      	add	r4, r3
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	e004      	b.n	8005ac6 <_malloc_r+0x72>
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	42a2      	cmp	r2, r4
 8005ac0:	bf0c      	ite	eq
 8005ac2:	600b      	streq	r3, [r1, #0]
 8005ac4:	6053      	strne	r3, [r2, #4]
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 fd22 	bl	8006510 <__malloc_unlock>
 8005acc:	f104 000b 	add.w	r0, r4, #11
 8005ad0:	1d23      	adds	r3, r4, #4
 8005ad2:	f020 0007 	bic.w	r0, r0, #7
 8005ad6:	1ac2      	subs	r2, r0, r3
 8005ad8:	d0cc      	beq.n	8005a74 <_malloc_r+0x20>
 8005ada:	1a1b      	subs	r3, r3, r0
 8005adc:	50a3      	str	r3, [r4, r2]
 8005ade:	e7c9      	b.n	8005a74 <_malloc_r+0x20>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	6864      	ldr	r4, [r4, #4]
 8005ae4:	e7cc      	b.n	8005a80 <_malloc_r+0x2c>
 8005ae6:	1cc4      	adds	r4, r0, #3
 8005ae8:	f024 0403 	bic.w	r4, r4, #3
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d0e3      	beq.n	8005ab8 <_malloc_r+0x64>
 8005af0:	1a21      	subs	r1, r4, r0
 8005af2:	4630      	mov	r0, r6
 8005af4:	f000 f91a 	bl	8005d2c <_sbrk_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d1dd      	bne.n	8005ab8 <_malloc_r+0x64>
 8005afc:	e7cf      	b.n	8005a9e <_malloc_r+0x4a>
 8005afe:	bf00      	nop
 8005b00:	200001c0 	.word	0x200001c0
 8005b04:	200001c4 	.word	0x200001c4

08005b08 <iprintf>:
 8005b08:	b40f      	push	{r0, r1, r2, r3}
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <iprintf+0x2c>)
 8005b0c:	b513      	push	{r0, r1, r4, lr}
 8005b0e:	681c      	ldr	r4, [r3, #0]
 8005b10:	b124      	cbz	r4, 8005b1c <iprintf+0x14>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	b913      	cbnz	r3, 8005b1c <iprintf+0x14>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 fbde 	bl	80062d8 <__sinit>
 8005b1c:	ab05      	add	r3, sp, #20
 8005b1e:	9a04      	ldr	r2, [sp, #16]
 8005b20:	68a1      	ldr	r1, [r4, #8]
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 fd23 	bl	8006570 <_vfiprintf_r>
 8005b2a:	b002      	add	sp, #8
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	b004      	add	sp, #16
 8005b32:	4770      	bx	lr
 8005b34:	2000002c 	.word	0x2000002c

08005b38 <putchar>:
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <putchar+0x28>)
 8005b3a:	b513      	push	{r0, r1, r4, lr}
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	4601      	mov	r1, r0
 8005b40:	b134      	cbz	r4, 8005b50 <putchar+0x18>
 8005b42:	69a3      	ldr	r3, [r4, #24]
 8005b44:	b923      	cbnz	r3, 8005b50 <putchar+0x18>
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fbc5 	bl	80062d8 <__sinit>
 8005b4e:	9901      	ldr	r1, [sp, #4]
 8005b50:	68a2      	ldr	r2, [r4, #8]
 8005b52:	4620      	mov	r0, r4
 8005b54:	b002      	add	sp, #8
 8005b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5a:	f000 bfcd 	b.w	8006af8 <_putc_r>
 8005b5e:	bf00      	nop
 8005b60:	2000002c 	.word	0x2000002c

08005b64 <_puts_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	4605      	mov	r5, r0
 8005b6a:	b118      	cbz	r0, 8005b74 <_puts_r+0x10>
 8005b6c:	6983      	ldr	r3, [r0, #24]
 8005b6e:	b90b      	cbnz	r3, 8005b74 <_puts_r+0x10>
 8005b70:	f000 fbb2 	bl	80062d8 <__sinit>
 8005b74:	69ab      	ldr	r3, [r5, #24]
 8005b76:	68ac      	ldr	r4, [r5, #8]
 8005b78:	b913      	cbnz	r3, 8005b80 <_puts_r+0x1c>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 fbac 	bl	80062d8 <__sinit>
 8005b80:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <_puts_r+0xd0>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d120      	bne.n	8005bc8 <_puts_r+0x64>
 8005b86:	686c      	ldr	r4, [r5, #4]
 8005b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d405      	bmi.n	8005b9a <_puts_r+0x36>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	0598      	lsls	r0, r3, #22
 8005b92:	d402      	bmi.n	8005b9a <_puts_r+0x36>
 8005b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b96:	f000 fc4f 	bl	8006438 <__retarget_lock_acquire_recursive>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	0719      	lsls	r1, r3, #28
 8005b9e:	d51d      	bpl.n	8005bdc <_puts_r+0x78>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	b1db      	cbz	r3, 8005bdc <_puts_r+0x78>
 8005ba4:	3e01      	subs	r6, #1
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60a3      	str	r3, [r4, #8]
 8005bb0:	bb39      	cbnz	r1, 8005c02 <_puts_r+0x9e>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da38      	bge.n	8005c28 <_puts_r+0xc4>
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	210a      	movs	r1, #10
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f994 	bl	8005ee8 <__swbuf_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d011      	beq.n	8005be8 <_puts_r+0x84>
 8005bc4:	250a      	movs	r5, #10
 8005bc6:	e011      	b.n	8005bec <_puts_r+0x88>
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <_puts_r+0xd4>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d101      	bne.n	8005bd2 <_puts_r+0x6e>
 8005bce:	68ac      	ldr	r4, [r5, #8]
 8005bd0:	e7da      	b.n	8005b88 <_puts_r+0x24>
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <_puts_r+0xd8>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	bf08      	it	eq
 8005bd8:	68ec      	ldreq	r4, [r5, #12]
 8005bda:	e7d5      	b.n	8005b88 <_puts_r+0x24>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f9d4 	bl	8005f8c <__swsetup_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0dd      	beq.n	8005ba4 <_puts_r+0x40>
 8005be8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bee:	07da      	lsls	r2, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_puts_r+0x9a>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	059b      	lsls	r3, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_puts_r+0x9a>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f000 fc1e 	bl	800643a <__retarget_lock_release_recursive>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da04      	bge.n	8005c10 <_puts_r+0xac>
 8005c06:	69a2      	ldr	r2, [r4, #24]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	dc06      	bgt.n	8005c1a <_puts_r+0xb6>
 8005c0c:	290a      	cmp	r1, #10
 8005c0e:	d004      	beq.n	8005c1a <_puts_r+0xb6>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	7019      	strb	r1, [r3, #0]
 8005c18:	e7c5      	b.n	8005ba6 <_puts_r+0x42>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f963 	bl	8005ee8 <__swbuf_r>
 8005c22:	3001      	adds	r0, #1
 8005c24:	d1bf      	bne.n	8005ba6 <_puts_r+0x42>
 8005c26:	e7df      	b.n	8005be8 <_puts_r+0x84>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	250a      	movs	r5, #10
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	701d      	strb	r5, [r3, #0]
 8005c32:	e7db      	b.n	8005bec <_puts_r+0x88>
 8005c34:	08007470 	.word	0x08007470
 8005c38:	08007490 	.word	0x08007490
 8005c3c:	08007450 	.word	0x08007450

08005c40 <puts>:
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <puts+0xc>)
 8005c42:	4601      	mov	r1, r0
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	f7ff bf8d 	b.w	8005b64 <_puts_r>
 8005c4a:	bf00      	nop
 8005c4c:	2000002c 	.word	0x2000002c

08005c50 <srand>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <srand+0x44>)
 8005c54:	681d      	ldr	r5, [r3, #0]
 8005c56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c58:	4604      	mov	r4, r0
 8005c5a:	b9b3      	cbnz	r3, 8005c8a <srand+0x3a>
 8005c5c:	2018      	movs	r0, #24
 8005c5e:	f7ff fe91 	bl	8005984 <malloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c66:	b920      	cbnz	r0, 8005c72 <srand+0x22>
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <srand+0x48>)
 8005c6a:	480c      	ldr	r0, [pc, #48]	; (8005c9c <srand+0x4c>)
 8005c6c:	2142      	movs	r1, #66	; 0x42
 8005c6e:	f000 f9fb 	bl	8006068 <__assert_func>
 8005c72:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <srand+0x50>)
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <srand+0x54>)
 8005c76:	e9c0 1300 	strd	r1, r3, [r0]
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <srand+0x58>)
 8005c7c:	6083      	str	r3, [r0, #8]
 8005c7e:	230b      	movs	r3, #11
 8005c80:	8183      	strh	r3, [r0, #12]
 8005c82:	2100      	movs	r1, #0
 8005c84:	2001      	movs	r0, #1
 8005c86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	611c      	str	r4, [r3, #16]
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	2000002c 	.word	0x2000002c
 8005c98:	0800739c 	.word	0x0800739c
 8005c9c:	080073b3 	.word	0x080073b3
 8005ca0:	abcd330e 	.word	0xabcd330e
 8005ca4:	e66d1234 	.word	0xe66d1234
 8005ca8:	0005deec 	.word	0x0005deec

08005cac <rand>:
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <rand+0x60>)
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	681c      	ldr	r4, [r3, #0]
 8005cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cb4:	b9b3      	cbnz	r3, 8005ce4 <rand+0x38>
 8005cb6:	2018      	movs	r0, #24
 8005cb8:	f7ff fe64 	bl	8005984 <malloc>
 8005cbc:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cbe:	b928      	cbnz	r0, 8005ccc <rand+0x20>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <rand+0x64>)
 8005cc4:	4813      	ldr	r0, [pc, #76]	; (8005d14 <rand+0x68>)
 8005cc6:	214e      	movs	r1, #78	; 0x4e
 8005cc8:	f000 f9ce 	bl	8006068 <__assert_func>
 8005ccc:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <rand+0x6c>)
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <rand+0x70>)
 8005cd0:	e9c0 2300 	strd	r2, r3, [r0]
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <rand+0x74>)
 8005cd6:	6083      	str	r3, [r0, #8]
 8005cd8:	230b      	movs	r3, #11
 8005cda:	8183      	strh	r3, [r0, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005ce4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ce6:	480f      	ldr	r0, [pc, #60]	; (8005d24 <rand+0x78>)
 8005ce8:	690a      	ldr	r2, [r1, #16]
 8005cea:	694b      	ldr	r3, [r1, #20]
 8005cec:	4c0e      	ldr	r4, [pc, #56]	; (8005d28 <rand+0x7c>)
 8005cee:	4350      	muls	r0, r2
 8005cf0:	fb04 0003 	mla	r0, r4, r3, r0
 8005cf4:	fba2 3404 	umull	r3, r4, r2, r4
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	4404      	add	r4, r0
 8005cfc:	f144 0000 	adc.w	r0, r4, #0
 8005d00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005d04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000002c 	.word	0x2000002c
 8005d10:	0800739c 	.word	0x0800739c
 8005d14:	080073b3 	.word	0x080073b3
 8005d18:	abcd330e 	.word	0xabcd330e
 8005d1c:	e66d1234 	.word	0xe66d1234
 8005d20:	0005deec 	.word	0x0005deec
 8005d24:	5851f42d 	.word	0x5851f42d
 8005d28:	4c957f2d 	.word	0x4c957f2d

08005d2c <_sbrk_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d06      	ldr	r5, [pc, #24]	; (8005d48 <_sbrk_r+0x1c>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	f7ff fd10 	bl	800575c <_sbrk>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_sbrk_r+0x1a>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_sbrk_r+0x1a>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	200001d8 	.word	0x200001d8

08005d4c <setbuf>:
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d52:	bf0c      	ite	eq
 8005d54:	2202      	moveq	r2, #2
 8005d56:	2200      	movne	r2, #0
 8005d58:	f000 b800 	b.w	8005d5c <setvbuf>

08005d5c <setvbuf>:
 8005d5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d60:	461d      	mov	r5, r3
 8005d62:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <setvbuf+0x17c>)
 8005d64:	681f      	ldr	r7, [r3, #0]
 8005d66:	4604      	mov	r4, r0
 8005d68:	460e      	mov	r6, r1
 8005d6a:	4690      	mov	r8, r2
 8005d6c:	b127      	cbz	r7, 8005d78 <setvbuf+0x1c>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	b913      	cbnz	r3, 8005d78 <setvbuf+0x1c>
 8005d72:	4638      	mov	r0, r7
 8005d74:	f000 fab0 	bl	80062d8 <__sinit>
 8005d78:	4b58      	ldr	r3, [pc, #352]	; (8005edc <setvbuf+0x180>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d167      	bne.n	8005e4e <setvbuf+0xf2>
 8005d7e:	687c      	ldr	r4, [r7, #4]
 8005d80:	f1b8 0f02 	cmp.w	r8, #2
 8005d84:	d006      	beq.n	8005d94 <setvbuf+0x38>
 8005d86:	f1b8 0f01 	cmp.w	r8, #1
 8005d8a:	f200 809f 	bhi.w	8005ecc <setvbuf+0x170>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f2c0 809c 	blt.w	8005ecc <setvbuf+0x170>
 8005d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d96:	07db      	lsls	r3, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <setvbuf+0x4a>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	0598      	lsls	r0, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <setvbuf+0x4a>
 8005da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da2:	f000 fb49 	bl	8006438 <__retarget_lock_acquire_recursive>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4638      	mov	r0, r7
 8005daa:	f000 fa01 	bl	80061b0 <_fflush_r>
 8005dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db0:	b141      	cbz	r1, 8005dc4 <setvbuf+0x68>
 8005db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <setvbuf+0x64>
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f7ff fdfa 	bl	80059b4 <_free_r>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61a3      	str	r3, [r4, #24]
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	0619      	lsls	r1, r3, #24
 8005dce:	d503      	bpl.n	8005dd8 <setvbuf+0x7c>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff fdee 	bl	80059b4 <_free_r>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	f1b8 0f02 	cmp.w	r8, #2
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	d06c      	beq.n	8005ec4 <setvbuf+0x168>
 8005dea:	ab01      	add	r3, sp, #4
 8005dec:	466a      	mov	r2, sp
 8005dee:	4621      	mov	r1, r4
 8005df0:	4638      	mov	r0, r7
 8005df2:	f000 fb23 	bl	800643c <__swhatbuf_r>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	4318      	orrs	r0, r3
 8005dfa:	81a0      	strh	r0, [r4, #12]
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	d130      	bne.n	8005e62 <setvbuf+0x106>
 8005e00:	9d00      	ldr	r5, [sp, #0]
 8005e02:	4628      	mov	r0, r5
 8005e04:	f7ff fdbe 	bl	8005984 <malloc>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d155      	bne.n	8005eba <setvbuf+0x15e>
 8005e0e:	f8dd 9000 	ldr.w	r9, [sp]
 8005e12:	45a9      	cmp	r9, r5
 8005e14:	d14a      	bne.n	8005eac <setvbuf+0x150>
 8005e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	60a2      	str	r2, [r4, #8]
 8005e1e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	6122      	str	r2, [r4, #16]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e2c:	6162      	str	r2, [r4, #20]
 8005e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	07d2      	lsls	r2, r2, #31
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	d405      	bmi.n	8005e46 <setvbuf+0xea>
 8005e3a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005e3e:	d102      	bne.n	8005e46 <setvbuf+0xea>
 8005e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e42:	f000 fafa 	bl	800643a <__retarget_lock_release_recursive>
 8005e46:	4628      	mov	r0, r5
 8005e48:	b003      	add	sp, #12
 8005e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <setvbuf+0x184>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d101      	bne.n	8005e58 <setvbuf+0xfc>
 8005e54:	68bc      	ldr	r4, [r7, #8]
 8005e56:	e793      	b.n	8005d80 <setvbuf+0x24>
 8005e58:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <setvbuf+0x188>)
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	bf08      	it	eq
 8005e5e:	68fc      	ldreq	r4, [r7, #12]
 8005e60:	e78e      	b.n	8005d80 <setvbuf+0x24>
 8005e62:	2e00      	cmp	r6, #0
 8005e64:	d0cd      	beq.n	8005e02 <setvbuf+0xa6>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	b913      	cbnz	r3, 8005e70 <setvbuf+0x114>
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f000 fa34 	bl	80062d8 <__sinit>
 8005e70:	f1b8 0f01 	cmp.w	r8, #1
 8005e74:	bf08      	it	eq
 8005e76:	89a3      	ldrheq	r3, [r4, #12]
 8005e78:	6026      	str	r6, [r4, #0]
 8005e7a:	bf04      	itt	eq
 8005e7c:	f043 0301 	orreq.w	r3, r3, #1
 8005e80:	81a3      	strheq	r3, [r4, #12]
 8005e82:	89a2      	ldrh	r2, [r4, #12]
 8005e84:	f012 0308 	ands.w	r3, r2, #8
 8005e88:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e8c:	d01c      	beq.n	8005ec8 <setvbuf+0x16c>
 8005e8e:	07d3      	lsls	r3, r2, #31
 8005e90:	bf41      	itttt	mi
 8005e92:	2300      	movmi	r3, #0
 8005e94:	426d      	negmi	r5, r5
 8005e96:	60a3      	strmi	r3, [r4, #8]
 8005e98:	61a5      	strmi	r5, [r4, #24]
 8005e9a:	bf58      	it	pl
 8005e9c:	60a5      	strpl	r5, [r4, #8]
 8005e9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005ea0:	f015 0501 	ands.w	r5, r5, #1
 8005ea4:	d115      	bne.n	8005ed2 <setvbuf+0x176>
 8005ea6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005eaa:	e7c8      	b.n	8005e3e <setvbuf+0xe2>
 8005eac:	4648      	mov	r0, r9
 8005eae:	f7ff fd69 	bl	8005984 <malloc>
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0ae      	beq.n	8005e16 <setvbuf+0xba>
 8005eb8:	464d      	mov	r5, r9
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e7d0      	b.n	8005e66 <setvbuf+0x10a>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	e7a8      	b.n	8005e1a <setvbuf+0xbe>
 8005ec8:	60a3      	str	r3, [r4, #8]
 8005eca:	e7e8      	b.n	8005e9e <setvbuf+0x142>
 8005ecc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ed0:	e7b9      	b.n	8005e46 <setvbuf+0xea>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	e7b7      	b.n	8005e46 <setvbuf+0xea>
 8005ed6:	bf00      	nop
 8005ed8:	2000002c 	.word	0x2000002c
 8005edc:	08007470 	.word	0x08007470
 8005ee0:	08007490 	.word	0x08007490
 8005ee4:	08007450 	.word	0x08007450

08005ee8 <__swbuf_r>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	460e      	mov	r6, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	4605      	mov	r5, r0
 8005ef0:	b118      	cbz	r0, 8005efa <__swbuf_r+0x12>
 8005ef2:	6983      	ldr	r3, [r0, #24]
 8005ef4:	b90b      	cbnz	r3, 8005efa <__swbuf_r+0x12>
 8005ef6:	f000 f9ef 	bl	80062d8 <__sinit>
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <__swbuf_r+0x98>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d12b      	bne.n	8005f58 <__swbuf_r+0x70>
 8005f00:	686c      	ldr	r4, [r5, #4]
 8005f02:	69a3      	ldr	r3, [r4, #24]
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	071a      	lsls	r2, r3, #28
 8005f0a:	d52f      	bpl.n	8005f6c <__swbuf_r+0x84>
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	b36b      	cbz	r3, 8005f6c <__swbuf_r+0x84>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	6820      	ldr	r0, [r4, #0]
 8005f14:	1ac0      	subs	r0, r0, r3
 8005f16:	6963      	ldr	r3, [r4, #20]
 8005f18:	b2f6      	uxtb	r6, r6
 8005f1a:	4283      	cmp	r3, r0
 8005f1c:	4637      	mov	r7, r6
 8005f1e:	dc04      	bgt.n	8005f2a <__swbuf_r+0x42>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f944 	bl	80061b0 <_fflush_r>
 8005f28:	bb30      	cbnz	r0, 8005f78 <__swbuf_r+0x90>
 8005f2a:	68a3      	ldr	r3, [r4, #8]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	6022      	str	r2, [r4, #0]
 8005f36:	701e      	strb	r6, [r3, #0]
 8005f38:	6963      	ldr	r3, [r4, #20]
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	4283      	cmp	r3, r0
 8005f3e:	d004      	beq.n	8005f4a <__swbuf_r+0x62>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	07db      	lsls	r3, r3, #31
 8005f44:	d506      	bpl.n	8005f54 <__swbuf_r+0x6c>
 8005f46:	2e0a      	cmp	r6, #10
 8005f48:	d104      	bne.n	8005f54 <__swbuf_r+0x6c>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 f92f 	bl	80061b0 <_fflush_r>
 8005f52:	b988      	cbnz	r0, 8005f78 <__swbuf_r+0x90>
 8005f54:	4638      	mov	r0, r7
 8005f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f58:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <__swbuf_r+0x9c>)
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d101      	bne.n	8005f62 <__swbuf_r+0x7a>
 8005f5e:	68ac      	ldr	r4, [r5, #8]
 8005f60:	e7cf      	b.n	8005f02 <__swbuf_r+0x1a>
 8005f62:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <__swbuf_r+0xa0>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	bf08      	it	eq
 8005f68:	68ec      	ldreq	r4, [r5, #12]
 8005f6a:	e7ca      	b.n	8005f02 <__swbuf_r+0x1a>
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 f80c 	bl	8005f8c <__swsetup_r>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d0cb      	beq.n	8005f10 <__swbuf_r+0x28>
 8005f78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f7c:	e7ea      	b.n	8005f54 <__swbuf_r+0x6c>
 8005f7e:	bf00      	nop
 8005f80:	08007470 	.word	0x08007470
 8005f84:	08007490 	.word	0x08007490
 8005f88:	08007450 	.word	0x08007450

08005f8c <__swsetup_r>:
 8005f8c:	4b32      	ldr	r3, [pc, #200]	; (8006058 <__swsetup_r+0xcc>)
 8005f8e:	b570      	push	{r4, r5, r6, lr}
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	4606      	mov	r6, r0
 8005f94:	460c      	mov	r4, r1
 8005f96:	b125      	cbz	r5, 8005fa2 <__swsetup_r+0x16>
 8005f98:	69ab      	ldr	r3, [r5, #24]
 8005f9a:	b913      	cbnz	r3, 8005fa2 <__swsetup_r+0x16>
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f000 f99b 	bl	80062d8 <__sinit>
 8005fa2:	4b2e      	ldr	r3, [pc, #184]	; (800605c <__swsetup_r+0xd0>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	d10f      	bne.n	8005fc8 <__swsetup_r+0x3c>
 8005fa8:	686c      	ldr	r4, [r5, #4]
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fb0:	0719      	lsls	r1, r3, #28
 8005fb2:	d42c      	bmi.n	800600e <__swsetup_r+0x82>
 8005fb4:	06dd      	lsls	r5, r3, #27
 8005fb6:	d411      	bmi.n	8005fdc <__swsetup_r+0x50>
 8005fb8:	2309      	movs	r3, #9
 8005fba:	6033      	str	r3, [r6, #0]
 8005fbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc6:	e03e      	b.n	8006046 <__swsetup_r+0xba>
 8005fc8:	4b25      	ldr	r3, [pc, #148]	; (8006060 <__swsetup_r+0xd4>)
 8005fca:	429c      	cmp	r4, r3
 8005fcc:	d101      	bne.n	8005fd2 <__swsetup_r+0x46>
 8005fce:	68ac      	ldr	r4, [r5, #8]
 8005fd0:	e7eb      	b.n	8005faa <__swsetup_r+0x1e>
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <__swsetup_r+0xd8>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	bf08      	it	eq
 8005fd8:	68ec      	ldreq	r4, [r5, #12]
 8005fda:	e7e6      	b.n	8005faa <__swsetup_r+0x1e>
 8005fdc:	0758      	lsls	r0, r3, #29
 8005fde:	d512      	bpl.n	8006006 <__swsetup_r+0x7a>
 8005fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fe2:	b141      	cbz	r1, 8005ff6 <__swsetup_r+0x6a>
 8005fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	d002      	beq.n	8005ff2 <__swsetup_r+0x66>
 8005fec:	4630      	mov	r0, r6
 8005fee:	f7ff fce1 	bl	80059b4 <_free_r>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	2300      	movs	r3, #0
 8006000:	6063      	str	r3, [r4, #4]
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	b94b      	cbnz	r3, 8006026 <__swsetup_r+0x9a>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601c:	d003      	beq.n	8006026 <__swsetup_r+0x9a>
 800601e:	4621      	mov	r1, r4
 8006020:	4630      	mov	r0, r6
 8006022:	f000 fa2f 	bl	8006484 <__smakebuf_r>
 8006026:	89a0      	ldrh	r0, [r4, #12]
 8006028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800602c:	f010 0301 	ands.w	r3, r0, #1
 8006030:	d00a      	beq.n	8006048 <__swsetup_r+0xbc>
 8006032:	2300      	movs	r3, #0
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	6963      	ldr	r3, [r4, #20]
 8006038:	425b      	negs	r3, r3
 800603a:	61a3      	str	r3, [r4, #24]
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	b943      	cbnz	r3, 8006052 <__swsetup_r+0xc6>
 8006040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006044:	d1ba      	bne.n	8005fbc <__swsetup_r+0x30>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	0781      	lsls	r1, r0, #30
 800604a:	bf58      	it	pl
 800604c:	6963      	ldrpl	r3, [r4, #20]
 800604e:	60a3      	str	r3, [r4, #8]
 8006050:	e7f4      	b.n	800603c <__swsetup_r+0xb0>
 8006052:	2000      	movs	r0, #0
 8006054:	e7f7      	b.n	8006046 <__swsetup_r+0xba>
 8006056:	bf00      	nop
 8006058:	2000002c 	.word	0x2000002c
 800605c:	08007470 	.word	0x08007470
 8006060:	08007490 	.word	0x08007490
 8006064:	08007450 	.word	0x08007450

08006068 <__assert_func>:
 8006068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800606a:	4614      	mov	r4, r2
 800606c:	461a      	mov	r2, r3
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <__assert_func+0x2c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4605      	mov	r5, r0
 8006074:	68d8      	ldr	r0, [r3, #12]
 8006076:	b14c      	cbz	r4, 800608c <__assert_func+0x24>
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <__assert_func+0x30>)
 800607a:	9100      	str	r1, [sp, #0]
 800607c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006080:	4906      	ldr	r1, [pc, #24]	; (800609c <__assert_func+0x34>)
 8006082:	462b      	mov	r3, r5
 8006084:	f000 f9a6 	bl	80063d4 <fiprintf>
 8006088:	f000 fdc1 	bl	8006c0e <abort>
 800608c:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <__assert_func+0x38>)
 800608e:	461c      	mov	r4, r3
 8006090:	e7f3      	b.n	800607a <__assert_func+0x12>
 8006092:	bf00      	nop
 8006094:	2000002c 	.word	0x2000002c
 8006098:	08007412 	.word	0x08007412
 800609c:	0800741f 	.word	0x0800741f
 80060a0:	0800744d 	.word	0x0800744d

080060a4 <__sflush_r>:
 80060a4:	898a      	ldrh	r2, [r1, #12]
 80060a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	4605      	mov	r5, r0
 80060ac:	0710      	lsls	r0, r2, #28
 80060ae:	460c      	mov	r4, r1
 80060b0:	d458      	bmi.n	8006164 <__sflush_r+0xc0>
 80060b2:	684b      	ldr	r3, [r1, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dc05      	bgt.n	80060c4 <__sflush_r+0x20>
 80060b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dc02      	bgt.n	80060c4 <__sflush_r+0x20>
 80060be:	2000      	movs	r0, #0
 80060c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	d0f9      	beq.n	80060be <__sflush_r+0x1a>
 80060ca:	2300      	movs	r3, #0
 80060cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060d0:	682f      	ldr	r7, [r5, #0]
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	d032      	beq.n	800613c <__sflush_r+0x98>
 80060d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	075a      	lsls	r2, r3, #29
 80060dc:	d505      	bpl.n	80060ea <__sflush_r+0x46>
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	1ac0      	subs	r0, r0, r3
 80060e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060e4:	b10b      	cbz	r3, 80060ea <__sflush_r+0x46>
 80060e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060e8:	1ac0      	subs	r0, r0, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	4602      	mov	r2, r0
 80060ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060f0:	6a21      	ldr	r1, [r4, #32]
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b0      	blx	r6
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	d106      	bne.n	800610a <__sflush_r+0x66>
 80060fc:	6829      	ldr	r1, [r5, #0]
 80060fe:	291d      	cmp	r1, #29
 8006100:	d82c      	bhi.n	800615c <__sflush_r+0xb8>
 8006102:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <__sflush_r+0x108>)
 8006104:	40ca      	lsrs	r2, r1
 8006106:	07d6      	lsls	r6, r2, #31
 8006108:	d528      	bpl.n	800615c <__sflush_r+0xb8>
 800610a:	2200      	movs	r2, #0
 800610c:	6062      	str	r2, [r4, #4]
 800610e:	04d9      	lsls	r1, r3, #19
 8006110:	6922      	ldr	r2, [r4, #16]
 8006112:	6022      	str	r2, [r4, #0]
 8006114:	d504      	bpl.n	8006120 <__sflush_r+0x7c>
 8006116:	1c42      	adds	r2, r0, #1
 8006118:	d101      	bne.n	800611e <__sflush_r+0x7a>
 800611a:	682b      	ldr	r3, [r5, #0]
 800611c:	b903      	cbnz	r3, 8006120 <__sflush_r+0x7c>
 800611e:	6560      	str	r0, [r4, #84]	; 0x54
 8006120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006122:	602f      	str	r7, [r5, #0]
 8006124:	2900      	cmp	r1, #0
 8006126:	d0ca      	beq.n	80060be <__sflush_r+0x1a>
 8006128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800612c:	4299      	cmp	r1, r3
 800612e:	d002      	beq.n	8006136 <__sflush_r+0x92>
 8006130:	4628      	mov	r0, r5
 8006132:	f7ff fc3f 	bl	80059b4 <_free_r>
 8006136:	2000      	movs	r0, #0
 8006138:	6360      	str	r0, [r4, #52]	; 0x34
 800613a:	e7c1      	b.n	80060c0 <__sflush_r+0x1c>
 800613c:	6a21      	ldr	r1, [r4, #32]
 800613e:	2301      	movs	r3, #1
 8006140:	4628      	mov	r0, r5
 8006142:	47b0      	blx	r6
 8006144:	1c41      	adds	r1, r0, #1
 8006146:	d1c7      	bne.n	80060d8 <__sflush_r+0x34>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0c4      	beq.n	80060d8 <__sflush_r+0x34>
 800614e:	2b1d      	cmp	r3, #29
 8006150:	d001      	beq.n	8006156 <__sflush_r+0xb2>
 8006152:	2b16      	cmp	r3, #22
 8006154:	d101      	bne.n	800615a <__sflush_r+0xb6>
 8006156:	602f      	str	r7, [r5, #0]
 8006158:	e7b1      	b.n	80060be <__sflush_r+0x1a>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	e7ad      	b.n	80060c0 <__sflush_r+0x1c>
 8006164:	690f      	ldr	r7, [r1, #16]
 8006166:	2f00      	cmp	r7, #0
 8006168:	d0a9      	beq.n	80060be <__sflush_r+0x1a>
 800616a:	0793      	lsls	r3, r2, #30
 800616c:	680e      	ldr	r6, [r1, #0]
 800616e:	bf08      	it	eq
 8006170:	694b      	ldreq	r3, [r1, #20]
 8006172:	600f      	str	r7, [r1, #0]
 8006174:	bf18      	it	ne
 8006176:	2300      	movne	r3, #0
 8006178:	eba6 0807 	sub.w	r8, r6, r7
 800617c:	608b      	str	r3, [r1, #8]
 800617e:	f1b8 0f00 	cmp.w	r8, #0
 8006182:	dd9c      	ble.n	80060be <__sflush_r+0x1a>
 8006184:	6a21      	ldr	r1, [r4, #32]
 8006186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006188:	4643      	mov	r3, r8
 800618a:	463a      	mov	r2, r7
 800618c:	4628      	mov	r0, r5
 800618e:	47b0      	blx	r6
 8006190:	2800      	cmp	r0, #0
 8006192:	dc06      	bgt.n	80061a2 <__sflush_r+0xfe>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a0:	e78e      	b.n	80060c0 <__sflush_r+0x1c>
 80061a2:	4407      	add	r7, r0
 80061a4:	eba8 0800 	sub.w	r8, r8, r0
 80061a8:	e7e9      	b.n	800617e <__sflush_r+0xda>
 80061aa:	bf00      	nop
 80061ac:	20400001 	.word	0x20400001

080061b0 <_fflush_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	4605      	mov	r5, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	b913      	cbnz	r3, 80061c0 <_fflush_r+0x10>
 80061ba:	2500      	movs	r5, #0
 80061bc:	4628      	mov	r0, r5
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	b118      	cbz	r0, 80061ca <_fflush_r+0x1a>
 80061c2:	6983      	ldr	r3, [r0, #24]
 80061c4:	b90b      	cbnz	r3, 80061ca <_fflush_r+0x1a>
 80061c6:	f000 f887 	bl	80062d8 <__sinit>
 80061ca:	4b14      	ldr	r3, [pc, #80]	; (800621c <_fflush_r+0x6c>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d11b      	bne.n	8006208 <_fflush_r+0x58>
 80061d0:	686c      	ldr	r4, [r5, #4]
 80061d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <_fflush_r+0xa>
 80061da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061dc:	07d0      	lsls	r0, r2, #31
 80061de:	d404      	bmi.n	80061ea <_fflush_r+0x3a>
 80061e0:	0599      	lsls	r1, r3, #22
 80061e2:	d402      	bmi.n	80061ea <_fflush_r+0x3a>
 80061e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e6:	f000 f927 	bl	8006438 <__retarget_lock_acquire_recursive>
 80061ea:	4628      	mov	r0, r5
 80061ec:	4621      	mov	r1, r4
 80061ee:	f7ff ff59 	bl	80060a4 <__sflush_r>
 80061f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061f4:	07da      	lsls	r2, r3, #31
 80061f6:	4605      	mov	r5, r0
 80061f8:	d4e0      	bmi.n	80061bc <_fflush_r+0xc>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	059b      	lsls	r3, r3, #22
 80061fe:	d4dd      	bmi.n	80061bc <_fflush_r+0xc>
 8006200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006202:	f000 f91a 	bl	800643a <__retarget_lock_release_recursive>
 8006206:	e7d9      	b.n	80061bc <_fflush_r+0xc>
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <_fflush_r+0x70>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d101      	bne.n	8006212 <_fflush_r+0x62>
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	e7df      	b.n	80061d2 <_fflush_r+0x22>
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <_fflush_r+0x74>)
 8006214:	429c      	cmp	r4, r3
 8006216:	bf08      	it	eq
 8006218:	68ec      	ldreq	r4, [r5, #12]
 800621a:	e7da      	b.n	80061d2 <_fflush_r+0x22>
 800621c:	08007470 	.word	0x08007470
 8006220:	08007490 	.word	0x08007490
 8006224:	08007450 	.word	0x08007450

08006228 <std>:
 8006228:	2300      	movs	r3, #0
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	e9c0 3300 	strd	r3, r3, [r0]
 8006232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006236:	6083      	str	r3, [r0, #8]
 8006238:	8181      	strh	r1, [r0, #12]
 800623a:	6643      	str	r3, [r0, #100]	; 0x64
 800623c:	81c2      	strh	r2, [r0, #14]
 800623e:	6183      	str	r3, [r0, #24]
 8006240:	4619      	mov	r1, r3
 8006242:	2208      	movs	r2, #8
 8006244:	305c      	adds	r0, #92	; 0x5c
 8006246:	f7ff fbad 	bl	80059a4 <memset>
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <std+0x38>)
 800624c:	6263      	str	r3, [r4, #36]	; 0x24
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <std+0x3c>)
 8006250:	62a3      	str	r3, [r4, #40]	; 0x28
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <std+0x40>)
 8006254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std+0x44>)
 8006258:	6224      	str	r4, [r4, #32]
 800625a:	6323      	str	r3, [r4, #48]	; 0x30
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	08006b89 	.word	0x08006b89
 8006264:	08006bab 	.word	0x08006bab
 8006268:	08006be3 	.word	0x08006be3
 800626c:	08006c07 	.word	0x08006c07

08006270 <_cleanup_r>:
 8006270:	4901      	ldr	r1, [pc, #4]	; (8006278 <_cleanup_r+0x8>)
 8006272:	f000 b8c1 	b.w	80063f8 <_fwalk_reent>
 8006276:	bf00      	nop
 8006278:	080061b1 	.word	0x080061b1

0800627c <__sfmoreglue>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	1e4a      	subs	r2, r1, #1
 8006280:	2568      	movs	r5, #104	; 0x68
 8006282:	4355      	muls	r5, r2
 8006284:	460e      	mov	r6, r1
 8006286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800628a:	f7ff fbe3 	bl	8005a54 <_malloc_r>
 800628e:	4604      	mov	r4, r0
 8006290:	b140      	cbz	r0, 80062a4 <__sfmoreglue+0x28>
 8006292:	2100      	movs	r1, #0
 8006294:	e9c0 1600 	strd	r1, r6, [r0]
 8006298:	300c      	adds	r0, #12
 800629a:	60a0      	str	r0, [r4, #8]
 800629c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062a0:	f7ff fb80 	bl	80059a4 <memset>
 80062a4:	4620      	mov	r0, r4
 80062a6:	bd70      	pop	{r4, r5, r6, pc}

080062a8 <__sfp_lock_acquire>:
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <__sfp_lock_acquire+0x8>)
 80062aa:	f000 b8c5 	b.w	8006438 <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	200001d4 	.word	0x200001d4

080062b4 <__sfp_lock_release>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__sfp_lock_release+0x8>)
 80062b6:	f000 b8c0 	b.w	800643a <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	200001d4 	.word	0x200001d4

080062c0 <__sinit_lock_acquire>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__sinit_lock_acquire+0x8>)
 80062c2:	f000 b8b9 	b.w	8006438 <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	200001cf 	.word	0x200001cf

080062cc <__sinit_lock_release>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__sinit_lock_release+0x8>)
 80062ce:	f000 b8b4 	b.w	800643a <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	200001cf 	.word	0x200001cf

080062d8 <__sinit>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	f7ff fff0 	bl	80062c0 <__sinit_lock_acquire>
 80062e0:	69a3      	ldr	r3, [r4, #24]
 80062e2:	b11b      	cbz	r3, 80062ec <__sinit+0x14>
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f7ff bff0 	b.w	80062cc <__sinit_lock_release>
 80062ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062f0:	6523      	str	r3, [r4, #80]	; 0x50
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <__sinit+0x68>)
 80062f4:	4a13      	ldr	r2, [pc, #76]	; (8006344 <__sinit+0x6c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	bf04      	itt	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	61a3      	streq	r3, [r4, #24]
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f820 	bl	8006348 <__sfp>
 8006308:	6060      	str	r0, [r4, #4]
 800630a:	4620      	mov	r0, r4
 800630c:	f000 f81c 	bl	8006348 <__sfp>
 8006310:	60a0      	str	r0, [r4, #8]
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f818 	bl	8006348 <__sfp>
 8006318:	2200      	movs	r2, #0
 800631a:	60e0      	str	r0, [r4, #12]
 800631c:	2104      	movs	r1, #4
 800631e:	6860      	ldr	r0, [r4, #4]
 8006320:	f7ff ff82 	bl	8006228 <std>
 8006324:	68a0      	ldr	r0, [r4, #8]
 8006326:	2201      	movs	r2, #1
 8006328:	2109      	movs	r1, #9
 800632a:	f7ff ff7d 	bl	8006228 <std>
 800632e:	68e0      	ldr	r0, [r4, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	2112      	movs	r1, #18
 8006334:	f7ff ff78 	bl	8006228 <std>
 8006338:	2301      	movs	r3, #1
 800633a:	61a3      	str	r3, [r4, #24]
 800633c:	e7d2      	b.n	80062e4 <__sinit+0xc>
 800633e:	bf00      	nop
 8006340:	08007398 	.word	0x08007398
 8006344:	08006271 	.word	0x08006271

08006348 <__sfp>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	4607      	mov	r7, r0
 800634c:	f7ff ffac 	bl	80062a8 <__sfp_lock_acquire>
 8006350:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <__sfp+0x84>)
 8006352:	681e      	ldr	r6, [r3, #0]
 8006354:	69b3      	ldr	r3, [r6, #24]
 8006356:	b913      	cbnz	r3, 800635e <__sfp+0x16>
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff ffbd 	bl	80062d8 <__sinit>
 800635e:	3648      	adds	r6, #72	; 0x48
 8006360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	d503      	bpl.n	8006370 <__sfp+0x28>
 8006368:	6833      	ldr	r3, [r6, #0]
 800636a:	b30b      	cbz	r3, 80063b0 <__sfp+0x68>
 800636c:	6836      	ldr	r6, [r6, #0]
 800636e:	e7f7      	b.n	8006360 <__sfp+0x18>
 8006370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006374:	b9d5      	cbnz	r5, 80063ac <__sfp+0x64>
 8006376:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <__sfp+0x88>)
 8006378:	60e3      	str	r3, [r4, #12]
 800637a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800637e:	6665      	str	r5, [r4, #100]	; 0x64
 8006380:	f000 f859 	bl	8006436 <__retarget_lock_init_recursive>
 8006384:	f7ff ff96 	bl	80062b4 <__sfp_lock_release>
 8006388:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800638c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006390:	6025      	str	r5, [r4, #0]
 8006392:	61a5      	str	r5, [r4, #24]
 8006394:	2208      	movs	r2, #8
 8006396:	4629      	mov	r1, r5
 8006398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800639c:	f7ff fb02 	bl	80059a4 <memset>
 80063a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063a8:	4620      	mov	r0, r4
 80063aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ac:	3468      	adds	r4, #104	; 0x68
 80063ae:	e7d9      	b.n	8006364 <__sfp+0x1c>
 80063b0:	2104      	movs	r1, #4
 80063b2:	4638      	mov	r0, r7
 80063b4:	f7ff ff62 	bl	800627c <__sfmoreglue>
 80063b8:	4604      	mov	r4, r0
 80063ba:	6030      	str	r0, [r6, #0]
 80063bc:	2800      	cmp	r0, #0
 80063be:	d1d5      	bne.n	800636c <__sfp+0x24>
 80063c0:	f7ff ff78 	bl	80062b4 <__sfp_lock_release>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	e7ee      	b.n	80063a8 <__sfp+0x60>
 80063ca:	bf00      	nop
 80063cc:	08007398 	.word	0x08007398
 80063d0:	ffff0001 	.word	0xffff0001

080063d4 <fiprintf>:
 80063d4:	b40e      	push	{r1, r2, r3}
 80063d6:	b503      	push	{r0, r1, lr}
 80063d8:	4601      	mov	r1, r0
 80063da:	ab03      	add	r3, sp, #12
 80063dc:	4805      	ldr	r0, [pc, #20]	; (80063f4 <fiprintf+0x20>)
 80063de:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e2:	6800      	ldr	r0, [r0, #0]
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	f000 f8c3 	bl	8006570 <_vfiprintf_r>
 80063ea:	b002      	add	sp, #8
 80063ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f0:	b003      	add	sp, #12
 80063f2:	4770      	bx	lr
 80063f4:	2000002c 	.word	0x2000002c

080063f8 <_fwalk_reent>:
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fc:	4606      	mov	r6, r0
 80063fe:	4688      	mov	r8, r1
 8006400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006404:	2700      	movs	r7, #0
 8006406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800640a:	f1b9 0901 	subs.w	r9, r9, #1
 800640e:	d505      	bpl.n	800641c <_fwalk_reent+0x24>
 8006410:	6824      	ldr	r4, [r4, #0]
 8006412:	2c00      	cmp	r4, #0
 8006414:	d1f7      	bne.n	8006406 <_fwalk_reent+0xe>
 8006416:	4638      	mov	r0, r7
 8006418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641c:	89ab      	ldrh	r3, [r5, #12]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d907      	bls.n	8006432 <_fwalk_reent+0x3a>
 8006422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006426:	3301      	adds	r3, #1
 8006428:	d003      	beq.n	8006432 <_fwalk_reent+0x3a>
 800642a:	4629      	mov	r1, r5
 800642c:	4630      	mov	r0, r6
 800642e:	47c0      	blx	r8
 8006430:	4307      	orrs	r7, r0
 8006432:	3568      	adds	r5, #104	; 0x68
 8006434:	e7e9      	b.n	800640a <_fwalk_reent+0x12>

08006436 <__retarget_lock_init_recursive>:
 8006436:	4770      	bx	lr

08006438 <__retarget_lock_acquire_recursive>:
 8006438:	4770      	bx	lr

0800643a <__retarget_lock_release_recursive>:
 800643a:	4770      	bx	lr

0800643c <__swhatbuf_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	460e      	mov	r6, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2900      	cmp	r1, #0
 8006446:	b096      	sub	sp, #88	; 0x58
 8006448:	4614      	mov	r4, r2
 800644a:	461d      	mov	r5, r3
 800644c:	da07      	bge.n	800645e <__swhatbuf_r+0x22>
 800644e:	2300      	movs	r3, #0
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	89b3      	ldrh	r3, [r6, #12]
 8006454:	061a      	lsls	r2, r3, #24
 8006456:	d410      	bmi.n	800647a <__swhatbuf_r+0x3e>
 8006458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645c:	e00e      	b.n	800647c <__swhatbuf_r+0x40>
 800645e:	466a      	mov	r2, sp
 8006460:	f000 fbec 	bl	8006c3c <_fstat_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	dbf2      	blt.n	800644e <__swhatbuf_r+0x12>
 8006468:	9a01      	ldr	r2, [sp, #4]
 800646a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800646e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006472:	425a      	negs	r2, r3
 8006474:	415a      	adcs	r2, r3
 8006476:	602a      	str	r2, [r5, #0]
 8006478:	e7ee      	b.n	8006458 <__swhatbuf_r+0x1c>
 800647a:	2340      	movs	r3, #64	; 0x40
 800647c:	2000      	movs	r0, #0
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	b016      	add	sp, #88	; 0x58
 8006482:	bd70      	pop	{r4, r5, r6, pc}

08006484 <__smakebuf_r>:
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006488:	079d      	lsls	r5, r3, #30
 800648a:	4606      	mov	r6, r0
 800648c:	460c      	mov	r4, r1
 800648e:	d507      	bpl.n	80064a0 <__smakebuf_r+0x1c>
 8006490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2301      	movs	r3, #1
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	b002      	add	sp, #8
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	ab01      	add	r3, sp, #4
 80064a2:	466a      	mov	r2, sp
 80064a4:	f7ff ffca 	bl	800643c <__swhatbuf_r>
 80064a8:	9900      	ldr	r1, [sp, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff fad1 	bl	8005a54 <_malloc_r>
 80064b2:	b948      	cbnz	r0, 80064c8 <__smakebuf_r+0x44>
 80064b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b8:	059a      	lsls	r2, r3, #22
 80064ba:	d4ef      	bmi.n	800649c <__smakebuf_r+0x18>
 80064bc:	f023 0303 	bic.w	r3, r3, #3
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	e7e3      	b.n	8006490 <__smakebuf_r+0xc>
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <__smakebuf_r+0x7c>)
 80064ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	6163      	str	r3, [r4, #20]
 80064da:	9b01      	ldr	r3, [sp, #4]
 80064dc:	6120      	str	r0, [r4, #16]
 80064de:	b15b      	cbz	r3, 80064f8 <__smakebuf_r+0x74>
 80064e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 fbbb 	bl	8006c60 <_isatty_r>
 80064ea:	b128      	cbz	r0, 80064f8 <__smakebuf_r+0x74>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	89a0      	ldrh	r0, [r4, #12]
 80064fa:	4305      	orrs	r5, r0
 80064fc:	81a5      	strh	r5, [r4, #12]
 80064fe:	e7cd      	b.n	800649c <__smakebuf_r+0x18>
 8006500:	08006271 	.word	0x08006271

08006504 <__malloc_lock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_lock+0x8>)
 8006506:	f7ff bf97 	b.w	8006438 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	200001d0 	.word	0x200001d0

08006510 <__malloc_unlock>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__malloc_unlock+0x8>)
 8006512:	f7ff bf92 	b.w	800643a <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	200001d0 	.word	0x200001d0

0800651c <__sfputc_r>:
 800651c:	6893      	ldr	r3, [r2, #8]
 800651e:	3b01      	subs	r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	b410      	push	{r4}
 8006524:	6093      	str	r3, [r2, #8]
 8006526:	da08      	bge.n	800653a <__sfputc_r+0x1e>
 8006528:	6994      	ldr	r4, [r2, #24]
 800652a:	42a3      	cmp	r3, r4
 800652c:	db01      	blt.n	8006532 <__sfputc_r+0x16>
 800652e:	290a      	cmp	r1, #10
 8006530:	d103      	bne.n	800653a <__sfputc_r+0x1e>
 8006532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006536:	f7ff bcd7 	b.w	8005ee8 <__swbuf_r>
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	1c58      	adds	r0, r3, #1
 800653e:	6010      	str	r0, [r2, #0]
 8006540:	7019      	strb	r1, [r3, #0]
 8006542:	4608      	mov	r0, r1
 8006544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006548:	4770      	bx	lr

0800654a <__sfputs_r>:
 800654a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654c:	4606      	mov	r6, r0
 800654e:	460f      	mov	r7, r1
 8006550:	4614      	mov	r4, r2
 8006552:	18d5      	adds	r5, r2, r3
 8006554:	42ac      	cmp	r4, r5
 8006556:	d101      	bne.n	800655c <__sfputs_r+0x12>
 8006558:	2000      	movs	r0, #0
 800655a:	e007      	b.n	800656c <__sfputs_r+0x22>
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	463a      	mov	r2, r7
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff ffda 	bl	800651c <__sfputc_r>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d1f3      	bne.n	8006554 <__sfputs_r+0xa>
 800656c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006570 <_vfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	460d      	mov	r5, r1
 8006576:	b09d      	sub	sp, #116	; 0x74
 8006578:	4614      	mov	r4, r2
 800657a:	4698      	mov	r8, r3
 800657c:	4606      	mov	r6, r0
 800657e:	b118      	cbz	r0, 8006588 <_vfiprintf_r+0x18>
 8006580:	6983      	ldr	r3, [r0, #24]
 8006582:	b90b      	cbnz	r3, 8006588 <_vfiprintf_r+0x18>
 8006584:	f7ff fea8 	bl	80062d8 <__sinit>
 8006588:	4b89      	ldr	r3, [pc, #548]	; (80067b0 <_vfiprintf_r+0x240>)
 800658a:	429d      	cmp	r5, r3
 800658c:	d11b      	bne.n	80065c6 <_vfiprintf_r+0x56>
 800658e:	6875      	ldr	r5, [r6, #4]
 8006590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006592:	07d9      	lsls	r1, r3, #31
 8006594:	d405      	bmi.n	80065a2 <_vfiprintf_r+0x32>
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	059a      	lsls	r2, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_vfiprintf_r+0x32>
 800659c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800659e:	f7ff ff4b 	bl	8006438 <__retarget_lock_acquire_recursive>
 80065a2:	89ab      	ldrh	r3, [r5, #12]
 80065a4:	071b      	lsls	r3, r3, #28
 80065a6:	d501      	bpl.n	80065ac <_vfiprintf_r+0x3c>
 80065a8:	692b      	ldr	r3, [r5, #16]
 80065aa:	b9eb      	cbnz	r3, 80065e8 <_vfiprintf_r+0x78>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff fcec 	bl	8005f8c <__swsetup_r>
 80065b4:	b1c0      	cbz	r0, 80065e8 <_vfiprintf_r+0x78>
 80065b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b8:	07dc      	lsls	r4, r3, #31
 80065ba:	d50e      	bpl.n	80065da <_vfiprintf_r+0x6a>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065c0:	b01d      	add	sp, #116	; 0x74
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	4b7b      	ldr	r3, [pc, #492]	; (80067b4 <_vfiprintf_r+0x244>)
 80065c8:	429d      	cmp	r5, r3
 80065ca:	d101      	bne.n	80065d0 <_vfiprintf_r+0x60>
 80065cc:	68b5      	ldr	r5, [r6, #8]
 80065ce:	e7df      	b.n	8006590 <_vfiprintf_r+0x20>
 80065d0:	4b79      	ldr	r3, [pc, #484]	; (80067b8 <_vfiprintf_r+0x248>)
 80065d2:	429d      	cmp	r5, r3
 80065d4:	bf08      	it	eq
 80065d6:	68f5      	ldreq	r5, [r6, #12]
 80065d8:	e7da      	b.n	8006590 <_vfiprintf_r+0x20>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	0598      	lsls	r0, r3, #22
 80065de:	d4ed      	bmi.n	80065bc <_vfiprintf_r+0x4c>
 80065e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e2:	f7ff ff2a 	bl	800643a <__retarget_lock_release_recursive>
 80065e6:	e7e9      	b.n	80065bc <_vfiprintf_r+0x4c>
 80065e8:	2300      	movs	r3, #0
 80065ea:	9309      	str	r3, [sp, #36]	; 0x24
 80065ec:	2320      	movs	r3, #32
 80065ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f6:	2330      	movs	r3, #48	; 0x30
 80065f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067bc <_vfiprintf_r+0x24c>
 80065fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006600:	f04f 0901 	mov.w	r9, #1
 8006604:	4623      	mov	r3, r4
 8006606:	469a      	mov	sl, r3
 8006608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800660c:	b10a      	cbz	r2, 8006612 <_vfiprintf_r+0xa2>
 800660e:	2a25      	cmp	r2, #37	; 0x25
 8006610:	d1f9      	bne.n	8006606 <_vfiprintf_r+0x96>
 8006612:	ebba 0b04 	subs.w	fp, sl, r4
 8006616:	d00b      	beq.n	8006630 <_vfiprintf_r+0xc0>
 8006618:	465b      	mov	r3, fp
 800661a:	4622      	mov	r2, r4
 800661c:	4629      	mov	r1, r5
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ff93 	bl	800654a <__sfputs_r>
 8006624:	3001      	adds	r0, #1
 8006626:	f000 80aa 	beq.w	800677e <_vfiprintf_r+0x20e>
 800662a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662c:	445a      	add	r2, fp
 800662e:	9209      	str	r2, [sp, #36]	; 0x24
 8006630:	f89a 3000 	ldrb.w	r3, [sl]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80a2 	beq.w	800677e <_vfiprintf_r+0x20e>
 800663a:	2300      	movs	r3, #0
 800663c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006644:	f10a 0a01 	add.w	sl, sl, #1
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	9307      	str	r3, [sp, #28]
 800664c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006650:	931a      	str	r3, [sp, #104]	; 0x68
 8006652:	4654      	mov	r4, sl
 8006654:	2205      	movs	r2, #5
 8006656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665a:	4858      	ldr	r0, [pc, #352]	; (80067bc <_vfiprintf_r+0x24c>)
 800665c:	f7f9 fdc0 	bl	80001e0 <memchr>
 8006660:	9a04      	ldr	r2, [sp, #16]
 8006662:	b9d8      	cbnz	r0, 800669c <_vfiprintf_r+0x12c>
 8006664:	06d1      	lsls	r1, r2, #27
 8006666:	bf44      	itt	mi
 8006668:	2320      	movmi	r3, #32
 800666a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800666e:	0713      	lsls	r3, r2, #28
 8006670:	bf44      	itt	mi
 8006672:	232b      	movmi	r3, #43	; 0x2b
 8006674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006678:	f89a 3000 	ldrb.w	r3, [sl]
 800667c:	2b2a      	cmp	r3, #42	; 0x2a
 800667e:	d015      	beq.n	80066ac <_vfiprintf_r+0x13c>
 8006680:	9a07      	ldr	r2, [sp, #28]
 8006682:	4654      	mov	r4, sl
 8006684:	2000      	movs	r0, #0
 8006686:	f04f 0c0a 	mov.w	ip, #10
 800668a:	4621      	mov	r1, r4
 800668c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006690:	3b30      	subs	r3, #48	; 0x30
 8006692:	2b09      	cmp	r3, #9
 8006694:	d94e      	bls.n	8006734 <_vfiprintf_r+0x1c4>
 8006696:	b1b0      	cbz	r0, 80066c6 <_vfiprintf_r+0x156>
 8006698:	9207      	str	r2, [sp, #28]
 800669a:	e014      	b.n	80066c6 <_vfiprintf_r+0x156>
 800669c:	eba0 0308 	sub.w	r3, r0, r8
 80066a0:	fa09 f303 	lsl.w	r3, r9, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	46a2      	mov	sl, r4
 80066aa:	e7d2      	b.n	8006652 <_vfiprintf_r+0xe2>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	1d19      	adds	r1, r3, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	9103      	str	r1, [sp, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bfbb      	ittet	lt
 80066b8:	425b      	neglt	r3, r3
 80066ba:	f042 0202 	orrlt.w	r2, r2, #2
 80066be:	9307      	strge	r3, [sp, #28]
 80066c0:	9307      	strlt	r3, [sp, #28]
 80066c2:	bfb8      	it	lt
 80066c4:	9204      	strlt	r2, [sp, #16]
 80066c6:	7823      	ldrb	r3, [r4, #0]
 80066c8:	2b2e      	cmp	r3, #46	; 0x2e
 80066ca:	d10c      	bne.n	80066e6 <_vfiprintf_r+0x176>
 80066cc:	7863      	ldrb	r3, [r4, #1]
 80066ce:	2b2a      	cmp	r3, #42	; 0x2a
 80066d0:	d135      	bne.n	800673e <_vfiprintf_r+0x1ce>
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	1d1a      	adds	r2, r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	9203      	str	r2, [sp, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfb8      	it	lt
 80066de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80066e2:	3402      	adds	r4, #2
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067cc <_vfiprintf_r+0x25c>
 80066ea:	7821      	ldrb	r1, [r4, #0]
 80066ec:	2203      	movs	r2, #3
 80066ee:	4650      	mov	r0, sl
 80066f0:	f7f9 fd76 	bl	80001e0 <memchr>
 80066f4:	b140      	cbz	r0, 8006708 <_vfiprintf_r+0x198>
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	eba0 000a 	sub.w	r0, r0, sl
 80066fc:	fa03 f000 	lsl.w	r0, r3, r0
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	4303      	orrs	r3, r0
 8006704:	3401      	adds	r4, #1
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670c:	482c      	ldr	r0, [pc, #176]	; (80067c0 <_vfiprintf_r+0x250>)
 800670e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006712:	2206      	movs	r2, #6
 8006714:	f7f9 fd64 	bl	80001e0 <memchr>
 8006718:	2800      	cmp	r0, #0
 800671a:	d03f      	beq.n	800679c <_vfiprintf_r+0x22c>
 800671c:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <_vfiprintf_r+0x254>)
 800671e:	bb1b      	cbnz	r3, 8006768 <_vfiprintf_r+0x1f8>
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	3307      	adds	r3, #7
 8006724:	f023 0307 	bic.w	r3, r3, #7
 8006728:	3308      	adds	r3, #8
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672e:	443b      	add	r3, r7
 8006730:	9309      	str	r3, [sp, #36]	; 0x24
 8006732:	e767      	b.n	8006604 <_vfiprintf_r+0x94>
 8006734:	fb0c 3202 	mla	r2, ip, r2, r3
 8006738:	460c      	mov	r4, r1
 800673a:	2001      	movs	r0, #1
 800673c:	e7a5      	b.n	800668a <_vfiprintf_r+0x11a>
 800673e:	2300      	movs	r3, #0
 8006740:	3401      	adds	r4, #1
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	4619      	mov	r1, r3
 8006746:	f04f 0c0a 	mov.w	ip, #10
 800674a:	4620      	mov	r0, r4
 800674c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006750:	3a30      	subs	r2, #48	; 0x30
 8006752:	2a09      	cmp	r2, #9
 8006754:	d903      	bls.n	800675e <_vfiprintf_r+0x1ee>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0c5      	beq.n	80066e6 <_vfiprintf_r+0x176>
 800675a:	9105      	str	r1, [sp, #20]
 800675c:	e7c3      	b.n	80066e6 <_vfiprintf_r+0x176>
 800675e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006762:	4604      	mov	r4, r0
 8006764:	2301      	movs	r3, #1
 8006766:	e7f0      	b.n	800674a <_vfiprintf_r+0x1da>
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	462a      	mov	r2, r5
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <_vfiprintf_r+0x258>)
 8006770:	a904      	add	r1, sp, #16
 8006772:	4630      	mov	r0, r6
 8006774:	f3af 8000 	nop.w
 8006778:	4607      	mov	r7, r0
 800677a:	1c78      	adds	r0, r7, #1
 800677c:	d1d6      	bne.n	800672c <_vfiprintf_r+0x1bc>
 800677e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006780:	07d9      	lsls	r1, r3, #31
 8006782:	d405      	bmi.n	8006790 <_vfiprintf_r+0x220>
 8006784:	89ab      	ldrh	r3, [r5, #12]
 8006786:	059a      	lsls	r2, r3, #22
 8006788:	d402      	bmi.n	8006790 <_vfiprintf_r+0x220>
 800678a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800678c:	f7ff fe55 	bl	800643a <__retarget_lock_release_recursive>
 8006790:	89ab      	ldrh	r3, [r5, #12]
 8006792:	065b      	lsls	r3, r3, #25
 8006794:	f53f af12 	bmi.w	80065bc <_vfiprintf_r+0x4c>
 8006798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800679a:	e711      	b.n	80065c0 <_vfiprintf_r+0x50>
 800679c:	ab03      	add	r3, sp, #12
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	462a      	mov	r2, r5
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <_vfiprintf_r+0x258>)
 80067a4:	a904      	add	r1, sp, #16
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f880 	bl	80068ac <_printf_i>
 80067ac:	e7e4      	b.n	8006778 <_vfiprintf_r+0x208>
 80067ae:	bf00      	nop
 80067b0:	08007470 	.word	0x08007470
 80067b4:	08007490 	.word	0x08007490
 80067b8:	08007450 	.word	0x08007450
 80067bc:	080074b0 	.word	0x080074b0
 80067c0:	080074ba 	.word	0x080074ba
 80067c4:	00000000 	.word	0x00000000
 80067c8:	0800654b 	.word	0x0800654b
 80067cc:	080074b6 	.word	0x080074b6

080067d0 <_printf_common>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	4616      	mov	r6, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	688a      	ldr	r2, [r1, #8]
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	bfb8      	it	lt
 80067e4:	4613      	movlt	r3, r2
 80067e6:	6033      	str	r3, [r6, #0]
 80067e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ec:	4607      	mov	r7, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	b10a      	cbz	r2, 80067f6 <_printf_common+0x26>
 80067f2:	3301      	adds	r3, #1
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	0699      	lsls	r1, r3, #26
 80067fa:	bf42      	ittt	mi
 80067fc:	6833      	ldrmi	r3, [r6, #0]
 80067fe:	3302      	addmi	r3, #2
 8006800:	6033      	strmi	r3, [r6, #0]
 8006802:	6825      	ldr	r5, [r4, #0]
 8006804:	f015 0506 	ands.w	r5, r5, #6
 8006808:	d106      	bne.n	8006818 <_printf_common+0x48>
 800680a:	f104 0a19 	add.w	sl, r4, #25
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	6832      	ldr	r2, [r6, #0]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	42ab      	cmp	r3, r5
 8006816:	dc26      	bgt.n	8006866 <_printf_common+0x96>
 8006818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800681c:	1e13      	subs	r3, r2, #0
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	2301      	movne	r3, #1
 8006824:	0692      	lsls	r2, r2, #26
 8006826:	d42b      	bmi.n	8006880 <_printf_common+0xb0>
 8006828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800682c:	4649      	mov	r1, r9
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d01e      	beq.n	8006874 <_printf_common+0xa4>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	68e5      	ldr	r5, [r4, #12]
 800683a:	6832      	ldr	r2, [r6, #0]
 800683c:	f003 0306 	and.w	r3, r3, #6
 8006840:	2b04      	cmp	r3, #4
 8006842:	bf08      	it	eq
 8006844:	1aad      	subeq	r5, r5, r2
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	6922      	ldr	r2, [r4, #16]
 800684a:	bf0c      	ite	eq
 800684c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006850:	2500      	movne	r5, #0
 8006852:	4293      	cmp	r3, r2
 8006854:	bfc4      	itt	gt
 8006856:	1a9b      	subgt	r3, r3, r2
 8006858:	18ed      	addgt	r5, r5, r3
 800685a:	2600      	movs	r6, #0
 800685c:	341a      	adds	r4, #26
 800685e:	42b5      	cmp	r5, r6
 8006860:	d11a      	bne.n	8006898 <_printf_common+0xc8>
 8006862:	2000      	movs	r0, #0
 8006864:	e008      	b.n	8006878 <_printf_common+0xa8>
 8006866:	2301      	movs	r3, #1
 8006868:	4652      	mov	r2, sl
 800686a:	4649      	mov	r1, r9
 800686c:	4638      	mov	r0, r7
 800686e:	47c0      	blx	r8
 8006870:	3001      	adds	r0, #1
 8006872:	d103      	bne.n	800687c <_printf_common+0xac>
 8006874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	3501      	adds	r5, #1
 800687e:	e7c6      	b.n	800680e <_printf_common+0x3e>
 8006880:	18e1      	adds	r1, r4, r3
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	2030      	movs	r0, #48	; 0x30
 8006886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800688a:	4422      	add	r2, r4
 800688c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006894:	3302      	adds	r3, #2
 8006896:	e7c7      	b.n	8006828 <_printf_common+0x58>
 8006898:	2301      	movs	r3, #1
 800689a:	4622      	mov	r2, r4
 800689c:	4649      	mov	r1, r9
 800689e:	4638      	mov	r0, r7
 80068a0:	47c0      	blx	r8
 80068a2:	3001      	adds	r0, #1
 80068a4:	d0e6      	beq.n	8006874 <_printf_common+0xa4>
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7d9      	b.n	800685e <_printf_common+0x8e>
	...

080068ac <_printf_i>:
 80068ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	460c      	mov	r4, r1
 80068b2:	4691      	mov	r9, r2
 80068b4:	7e27      	ldrb	r7, [r4, #24]
 80068b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068b8:	2f78      	cmp	r7, #120	; 0x78
 80068ba:	4680      	mov	r8, r0
 80068bc:	469a      	mov	sl, r3
 80068be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c2:	d807      	bhi.n	80068d4 <_printf_i+0x28>
 80068c4:	2f62      	cmp	r7, #98	; 0x62
 80068c6:	d80a      	bhi.n	80068de <_printf_i+0x32>
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	f000 80d8 	beq.w	8006a7e <_printf_i+0x1d2>
 80068ce:	2f58      	cmp	r7, #88	; 0x58
 80068d0:	f000 80a3 	beq.w	8006a1a <_printf_i+0x16e>
 80068d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068dc:	e03a      	b.n	8006954 <_printf_i+0xa8>
 80068de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068e2:	2b15      	cmp	r3, #21
 80068e4:	d8f6      	bhi.n	80068d4 <_printf_i+0x28>
 80068e6:	a001      	add	r0, pc, #4	; (adr r0, 80068ec <_printf_i+0x40>)
 80068e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068ec:	08006945 	.word	0x08006945
 80068f0:	08006959 	.word	0x08006959
 80068f4:	080068d5 	.word	0x080068d5
 80068f8:	080068d5 	.word	0x080068d5
 80068fc:	080068d5 	.word	0x080068d5
 8006900:	080068d5 	.word	0x080068d5
 8006904:	08006959 	.word	0x08006959
 8006908:	080068d5 	.word	0x080068d5
 800690c:	080068d5 	.word	0x080068d5
 8006910:	080068d5 	.word	0x080068d5
 8006914:	080068d5 	.word	0x080068d5
 8006918:	08006a65 	.word	0x08006a65
 800691c:	08006989 	.word	0x08006989
 8006920:	08006a47 	.word	0x08006a47
 8006924:	080068d5 	.word	0x080068d5
 8006928:	080068d5 	.word	0x080068d5
 800692c:	08006a87 	.word	0x08006a87
 8006930:	080068d5 	.word	0x080068d5
 8006934:	08006989 	.word	0x08006989
 8006938:	080068d5 	.word	0x080068d5
 800693c:	080068d5 	.word	0x080068d5
 8006940:	08006a4f 	.word	0x08006a4f
 8006944:	680b      	ldr	r3, [r1, #0]
 8006946:	1d1a      	adds	r2, r3, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	600a      	str	r2, [r1, #0]
 800694c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006954:	2301      	movs	r3, #1
 8006956:	e0a3      	b.n	8006aa0 <_printf_i+0x1f4>
 8006958:	6825      	ldr	r5, [r4, #0]
 800695a:	6808      	ldr	r0, [r1, #0]
 800695c:	062e      	lsls	r6, r5, #24
 800695e:	f100 0304 	add.w	r3, r0, #4
 8006962:	d50a      	bpl.n	800697a <_printf_i+0xce>
 8006964:	6805      	ldr	r5, [r0, #0]
 8006966:	600b      	str	r3, [r1, #0]
 8006968:	2d00      	cmp	r5, #0
 800696a:	da03      	bge.n	8006974 <_printf_i+0xc8>
 800696c:	232d      	movs	r3, #45	; 0x2d
 800696e:	426d      	negs	r5, r5
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006974:	485e      	ldr	r0, [pc, #376]	; (8006af0 <_printf_i+0x244>)
 8006976:	230a      	movs	r3, #10
 8006978:	e019      	b.n	80069ae <_printf_i+0x102>
 800697a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800697e:	6805      	ldr	r5, [r0, #0]
 8006980:	600b      	str	r3, [r1, #0]
 8006982:	bf18      	it	ne
 8006984:	b22d      	sxthne	r5, r5
 8006986:	e7ef      	b.n	8006968 <_printf_i+0xbc>
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	6825      	ldr	r5, [r4, #0]
 800698c:	1d18      	adds	r0, r3, #4
 800698e:	6008      	str	r0, [r1, #0]
 8006990:	0628      	lsls	r0, r5, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xec>
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	e002      	b.n	800699e <_printf_i+0xf2>
 8006998:	0669      	lsls	r1, r5, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xe8>
 800699c:	881d      	ldrh	r5, [r3, #0]
 800699e:	4854      	ldr	r0, [pc, #336]	; (8006af0 <_printf_i+0x244>)
 80069a0:	2f6f      	cmp	r7, #111	; 0x6f
 80069a2:	bf0c      	ite	eq
 80069a4:	2308      	moveq	r3, #8
 80069a6:	230a      	movne	r3, #10
 80069a8:	2100      	movs	r1, #0
 80069aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ae:	6866      	ldr	r6, [r4, #4]
 80069b0:	60a6      	str	r6, [r4, #8]
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	bfa2      	ittt	ge
 80069b6:	6821      	ldrge	r1, [r4, #0]
 80069b8:	f021 0104 	bicge.w	r1, r1, #4
 80069bc:	6021      	strge	r1, [r4, #0]
 80069be:	b90d      	cbnz	r5, 80069c4 <_printf_i+0x118>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d04d      	beq.n	8006a60 <_printf_i+0x1b4>
 80069c4:	4616      	mov	r6, r2
 80069c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ca:	fb03 5711 	mls	r7, r3, r1, r5
 80069ce:	5dc7      	ldrb	r7, [r0, r7]
 80069d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d4:	462f      	mov	r7, r5
 80069d6:	42bb      	cmp	r3, r7
 80069d8:	460d      	mov	r5, r1
 80069da:	d9f4      	bls.n	80069c6 <_printf_i+0x11a>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d10b      	bne.n	80069f8 <_printf_i+0x14c>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07df      	lsls	r7, r3, #31
 80069e4:	d508      	bpl.n	80069f8 <_printf_i+0x14c>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6861      	ldr	r1, [r4, #4]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	bfde      	ittt	le
 80069ee:	2330      	movle	r3, #48	; 0x30
 80069f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80069f8:	1b92      	subs	r2, r2, r6
 80069fa:	6122      	str	r2, [r4, #16]
 80069fc:	f8cd a000 	str.w	sl, [sp]
 8006a00:	464b      	mov	r3, r9
 8006a02:	aa03      	add	r2, sp, #12
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7ff fee2 	bl	80067d0 <_printf_common>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d14c      	bne.n	8006aaa <_printf_i+0x1fe>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a14:	b004      	add	sp, #16
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	4835      	ldr	r0, [pc, #212]	; (8006af0 <_printf_i+0x244>)
 8006a1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	680e      	ldr	r6, [r1, #0]
 8006a24:	061f      	lsls	r7, r3, #24
 8006a26:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a2a:	600e      	str	r6, [r1, #0]
 8006a2c:	d514      	bpl.n	8006a58 <_printf_i+0x1ac>
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	bf44      	itt	mi
 8006a32:	f043 0320 	orrmi.w	r3, r3, #32
 8006a36:	6023      	strmi	r3, [r4, #0]
 8006a38:	b91d      	cbnz	r5, 8006a42 <_printf_i+0x196>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f023 0320 	bic.w	r3, r3, #32
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	2310      	movs	r3, #16
 8006a44:	e7b0      	b.n	80069a8 <_printf_i+0xfc>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f043 0320 	orr.w	r3, r3, #32
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	2378      	movs	r3, #120	; 0x78
 8006a50:	4828      	ldr	r0, [pc, #160]	; (8006af4 <_printf_i+0x248>)
 8006a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a56:	e7e3      	b.n	8006a20 <_printf_i+0x174>
 8006a58:	065e      	lsls	r6, r3, #25
 8006a5a:	bf48      	it	mi
 8006a5c:	b2ad      	uxthmi	r5, r5
 8006a5e:	e7e6      	b.n	8006a2e <_printf_i+0x182>
 8006a60:	4616      	mov	r6, r2
 8006a62:	e7bb      	b.n	80069dc <_printf_i+0x130>
 8006a64:	680b      	ldr	r3, [r1, #0]
 8006a66:	6826      	ldr	r6, [r4, #0]
 8006a68:	6960      	ldr	r0, [r4, #20]
 8006a6a:	1d1d      	adds	r5, r3, #4
 8006a6c:	600d      	str	r5, [r1, #0]
 8006a6e:	0635      	lsls	r5, r6, #24
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	d501      	bpl.n	8006a78 <_printf_i+0x1cc>
 8006a74:	6018      	str	r0, [r3, #0]
 8006a76:	e002      	b.n	8006a7e <_printf_i+0x1d2>
 8006a78:	0671      	lsls	r1, r6, #25
 8006a7a:	d5fb      	bpl.n	8006a74 <_printf_i+0x1c8>
 8006a7c:	8018      	strh	r0, [r3, #0]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6123      	str	r3, [r4, #16]
 8006a82:	4616      	mov	r6, r2
 8006a84:	e7ba      	b.n	80069fc <_printf_i+0x150>
 8006a86:	680b      	ldr	r3, [r1, #0]
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	600a      	str	r2, [r1, #0]
 8006a8c:	681e      	ldr	r6, [r3, #0]
 8006a8e:	6862      	ldr	r2, [r4, #4]
 8006a90:	2100      	movs	r1, #0
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7f9 fba4 	bl	80001e0 <memchr>
 8006a98:	b108      	cbz	r0, 8006a9e <_printf_i+0x1f2>
 8006a9a:	1b80      	subs	r0, r0, r6
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa8:	e7a8      	b.n	80069fc <_printf_i+0x150>
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	4632      	mov	r2, r6
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	47d0      	blx	sl
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d0ab      	beq.n	8006a10 <_printf_i+0x164>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	079b      	lsls	r3, r3, #30
 8006abc:	d413      	bmi.n	8006ae6 <_printf_i+0x23a>
 8006abe:	68e0      	ldr	r0, [r4, #12]
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	4298      	cmp	r0, r3
 8006ac4:	bfb8      	it	lt
 8006ac6:	4618      	movlt	r0, r3
 8006ac8:	e7a4      	b.n	8006a14 <_printf_i+0x168>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4632      	mov	r2, r6
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	47d0      	blx	sl
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d09b      	beq.n	8006a10 <_printf_i+0x164>
 8006ad8:	3501      	adds	r5, #1
 8006ada:	68e3      	ldr	r3, [r4, #12]
 8006adc:	9903      	ldr	r1, [sp, #12]
 8006ade:	1a5b      	subs	r3, r3, r1
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dcf2      	bgt.n	8006aca <_printf_i+0x21e>
 8006ae4:	e7eb      	b.n	8006abe <_printf_i+0x212>
 8006ae6:	2500      	movs	r5, #0
 8006ae8:	f104 0619 	add.w	r6, r4, #25
 8006aec:	e7f5      	b.n	8006ada <_printf_i+0x22e>
 8006aee:	bf00      	nop
 8006af0:	080074c1 	.word	0x080074c1
 8006af4:	080074d2 	.word	0x080074d2

08006af8 <_putc_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460d      	mov	r5, r1
 8006afc:	4614      	mov	r4, r2
 8006afe:	4606      	mov	r6, r0
 8006b00:	b118      	cbz	r0, 8006b0a <_putc_r+0x12>
 8006b02:	6983      	ldr	r3, [r0, #24]
 8006b04:	b90b      	cbnz	r3, 8006b0a <_putc_r+0x12>
 8006b06:	f7ff fbe7 	bl	80062d8 <__sinit>
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <_putc_r+0x84>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	d124      	bne.n	8006b5a <_putc_r+0x62>
 8006b10:	6874      	ldr	r4, [r6, #4]
 8006b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b14:	07d8      	lsls	r0, r3, #31
 8006b16:	d405      	bmi.n	8006b24 <_putc_r+0x2c>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	0599      	lsls	r1, r3, #22
 8006b1c:	d402      	bmi.n	8006b24 <_putc_r+0x2c>
 8006b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b20:	f7ff fc8a 	bl	8006438 <__retarget_lock_acquire_recursive>
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	60a3      	str	r3, [r4, #8]
 8006b2c:	da05      	bge.n	8006b3a <_putc_r+0x42>
 8006b2e:	69a2      	ldr	r2, [r4, #24]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	db1c      	blt.n	8006b6e <_putc_r+0x76>
 8006b34:	b2eb      	uxtb	r3, r5
 8006b36:	2b0a      	cmp	r3, #10
 8006b38:	d019      	beq.n	8006b6e <_putc_r+0x76>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	701d      	strb	r5, [r3, #0]
 8006b42:	b2ed      	uxtb	r5, r5
 8006b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b46:	07da      	lsls	r2, r3, #31
 8006b48:	d405      	bmi.n	8006b56 <_putc_r+0x5e>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d402      	bmi.n	8006b56 <_putc_r+0x5e>
 8006b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b52:	f7ff fc72 	bl	800643a <__retarget_lock_release_recursive>
 8006b56:	4628      	mov	r0, r5
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <_putc_r+0x88>)
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d101      	bne.n	8006b64 <_putc_r+0x6c>
 8006b60:	68b4      	ldr	r4, [r6, #8]
 8006b62:	e7d6      	b.n	8006b12 <_putc_r+0x1a>
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <_putc_r+0x8c>)
 8006b66:	429c      	cmp	r4, r3
 8006b68:	bf08      	it	eq
 8006b6a:	68f4      	ldreq	r4, [r6, #12]
 8006b6c:	e7d1      	b.n	8006b12 <_putc_r+0x1a>
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4622      	mov	r2, r4
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff f9b8 	bl	8005ee8 <__swbuf_r>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	e7e3      	b.n	8006b44 <_putc_r+0x4c>
 8006b7c:	08007470 	.word	0x08007470
 8006b80:	08007490 	.word	0x08007490
 8006b84:	08007450 	.word	0x08007450

08006b88 <__sread>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	f000 f888 	bl	8006ca4 <_read_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	bfab      	itete	ge
 8006b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b9c:	181b      	addge	r3, r3, r0
 8006b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ba2:	bfac      	ite	ge
 8006ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ba6:	81a3      	strhlt	r3, [r4, #12]
 8006ba8:	bd10      	pop	{r4, pc}

08006baa <__swrite>:
 8006baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	461f      	mov	r7, r3
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	05db      	lsls	r3, r3, #23
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	4616      	mov	r6, r2
 8006bba:	d505      	bpl.n	8006bc8 <__swrite+0x1e>
 8006bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f000 f85c 	bl	8006c80 <_lseek_r>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	4628      	mov	r0, r5
 8006bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bde:	f7fa bad1 	b.w	8001184 <_write_r>

08006be2 <__sseek>:
 8006be2:	b510      	push	{r4, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bea:	f000 f849 	bl	8006c80 <_lseek_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	bf15      	itete	ne
 8006bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bfe:	81a3      	strheq	r3, [r4, #12]
 8006c00:	bf18      	it	ne
 8006c02:	81a3      	strhne	r3, [r4, #12]
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <__sclose>:
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 b807 	b.w	8006c1c <_close_r>

08006c0e <abort>:
 8006c0e:	b508      	push	{r3, lr}
 8006c10:	2006      	movs	r0, #6
 8006c12:	f000 f881 	bl	8006d18 <raise>
 8006c16:	2001      	movs	r0, #1
 8006c18:	f7fe fd44 	bl	80056a4 <_exit>

08006c1c <_close_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	; (8006c38 <_close_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fe fd63 	bl	80056f2 <_close>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_close_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_close_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	200001d8 	.word	0x200001d8

08006c3c <_fstat_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	; (8006c5c <_fstat_r+0x20>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	f7fe fd5e 	bl	800570a <_fstat>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d102      	bne.n	8006c58 <_fstat_r+0x1c>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b103      	cbz	r3, 8006c58 <_fstat_r+0x1c>
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200001d8 	.word	0x200001d8

08006c60 <_isatty_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	; (8006c7c <_isatty_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fe fd5d 	bl	800572a <_isatty>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_isatty_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_isatty_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200001d8 	.word	0x200001d8

08006c80 <_lseek_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_lseek_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fe fd56 	bl	8005740 <_lseek>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_lseek_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_lseek_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200001d8 	.word	0x200001d8

08006ca4 <_read_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	; (8006cc4 <_read_r+0x20>)
 8006ca8:	4604      	mov	r4, r0
 8006caa:	4608      	mov	r0, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fe fd00 	bl	80056b8 <_read>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_read_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_read_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	200001d8 	.word	0x200001d8

08006cc8 <_raise_r>:
 8006cc8:	291f      	cmp	r1, #31
 8006cca:	b538      	push	{r3, r4, r5, lr}
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	d904      	bls.n	8006cdc <_raise_r+0x14>
 8006cd2:	2316      	movs	r3, #22
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cde:	b112      	cbz	r2, 8006ce6 <_raise_r+0x1e>
 8006ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ce4:	b94b      	cbnz	r3, 8006cfa <_raise_r+0x32>
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f830 	bl	8006d4c <_getpid_r>
 8006cec:	462a      	mov	r2, r5
 8006cee:	4601      	mov	r1, r0
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf6:	f000 b817 	b.w	8006d28 <_kill_r>
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d00a      	beq.n	8006d14 <_raise_r+0x4c>
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	d103      	bne.n	8006d0a <_raise_r+0x42>
 8006d02:	2316      	movs	r3, #22
 8006d04:	6003      	str	r3, [r0, #0]
 8006d06:	2001      	movs	r0, #1
 8006d08:	e7e7      	b.n	8006cda <_raise_r+0x12>
 8006d0a:	2400      	movs	r4, #0
 8006d0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d10:	4628      	mov	r0, r5
 8006d12:	4798      	blx	r3
 8006d14:	2000      	movs	r0, #0
 8006d16:	e7e0      	b.n	8006cda <_raise_r+0x12>

08006d18 <raise>:
 8006d18:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <raise+0xc>)
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	f7ff bfd3 	b.w	8006cc8 <_raise_r>
 8006d22:	bf00      	nop
 8006d24:	2000002c 	.word	0x2000002c

08006d28 <_kill_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	; (8006d48 <_kill_r+0x20>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f7fe fca5 	bl	8005684 <_kill>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d102      	bne.n	8006d44 <_kill_r+0x1c>
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b103      	cbz	r3, 8006d44 <_kill_r+0x1c>
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	bf00      	nop
 8006d48:	200001d8 	.word	0x200001d8

08006d4c <_getpid_r>:
 8006d4c:	f7fe bc92 	b.w	8005674 <_getpid>

08006d50 <_init>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr

08006d5c <_fini>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr
>>>>>>> Stashed changes
=======
 8006360:	e7fe      	b.n	8006360 <ADC1_2_IRQHandler>
	...

08006364 <__errno>:
 8006364:	4b01      	ldr	r3, [pc, #4]	; (800636c <__errno+0x8>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	2000002c 	.word	0x2000002c

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4d0d      	ldr	r5, [pc, #52]	; (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	; (80063ac <__libc_init_array+0x3c>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2600      	movs	r6, #0
 800637c:	42a6      	cmp	r6, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4d0b      	ldr	r5, [pc, #44]	; (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	; (80063b4 <__libc_init_array+0x44>)
 8006384:	f001 f9fe 	bl	8007784 <_init>
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2600      	movs	r6, #0
 800638e:	42a6      	cmp	r6, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f855 3b04 	ldr.w	r3, [r5], #4
 8006398:	4798      	blx	r3
 800639a:	3601      	adds	r6, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a2:	4798      	blx	r3
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	08007f18 	.word	0x08007f18
 80063ac:	08007f18 	.word	0x08007f18
 80063b0:	08007f18 	.word	0x08007f18
 80063b4:	08007f1c 	.word	0x08007f1c

080063b8 <malloc>:
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <malloc+0xc>)
 80063ba:	4601      	mov	r1, r0
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	f000 b863 	b.w	8006488 <_malloc_r>
 80063c2:	bf00      	nop
 80063c4:	2000002c 	.word	0x2000002c

080063c8 <free>:
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <free+0xc>)
 80063ca:	4601      	mov	r1, r0
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f000 b80b 	b.w	80063e8 <_free_r>
 80063d2:	bf00      	nop
 80063d4:	2000002c 	.word	0x2000002c

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <_free_r>:
 80063e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d048      	beq.n	8006480 <_free_r+0x98>
 80063ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f2:	9001      	str	r0, [sp, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f1a1 0404 	sub.w	r4, r1, #4
 80063fa:	bfb8      	it	lt
 80063fc:	18e4      	addlt	r4, r4, r3
 80063fe:	f000 fd9b 	bl	8006f38 <__malloc_lock>
 8006402:	4a20      	ldr	r2, [pc, #128]	; (8006484 <_free_r+0x9c>)
 8006404:	9801      	ldr	r0, [sp, #4]
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	4615      	mov	r5, r2
 800640a:	b933      	cbnz	r3, 800641a <_free_r+0x32>
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	6014      	str	r4, [r2, #0]
 8006410:	b003      	add	sp, #12
 8006412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006416:	f000 bd95 	b.w	8006f44 <__malloc_unlock>
 800641a:	42a3      	cmp	r3, r4
 800641c:	d90b      	bls.n	8006436 <_free_r+0x4e>
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	1862      	adds	r2, r4, r1
 8006422:	4293      	cmp	r3, r2
 8006424:	bf04      	itt	eq
 8006426:	681a      	ldreq	r2, [r3, #0]
 8006428:	685b      	ldreq	r3, [r3, #4]
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	bf04      	itt	eq
 800642e:	1852      	addeq	r2, r2, r1
 8006430:	6022      	streq	r2, [r4, #0]
 8006432:	602c      	str	r4, [r5, #0]
 8006434:	e7ec      	b.n	8006410 <_free_r+0x28>
 8006436:	461a      	mov	r2, r3
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b10b      	cbz	r3, 8006440 <_free_r+0x58>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d9fa      	bls.n	8006436 <_free_r+0x4e>
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	1855      	adds	r5, r2, r1
 8006444:	42a5      	cmp	r5, r4
 8006446:	d10b      	bne.n	8006460 <_free_r+0x78>
 8006448:	6824      	ldr	r4, [r4, #0]
 800644a:	4421      	add	r1, r4
 800644c:	1854      	adds	r4, r2, r1
 800644e:	42a3      	cmp	r3, r4
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	d1dd      	bne.n	8006410 <_free_r+0x28>
 8006454:	681c      	ldr	r4, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	4421      	add	r1, r4
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	e7d7      	b.n	8006410 <_free_r+0x28>
 8006460:	d902      	bls.n	8006468 <_free_r+0x80>
 8006462:	230c      	movs	r3, #12
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	e7d3      	b.n	8006410 <_free_r+0x28>
 8006468:	6825      	ldr	r5, [r4, #0]
 800646a:	1961      	adds	r1, r4, r5
 800646c:	428b      	cmp	r3, r1
 800646e:	bf04      	itt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	bf04      	itt	eq
 8006478:	1949      	addeq	r1, r1, r5
 800647a:	6021      	streq	r1, [r4, #0]
 800647c:	6054      	str	r4, [r2, #4]
 800647e:	e7c7      	b.n	8006410 <_free_r+0x28>
 8006480:	b003      	add	sp, #12
 8006482:	bd30      	pop	{r4, r5, pc}
 8006484:	200001c0 	.word	0x200001c0

08006488 <_malloc_r>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	1ccd      	adds	r5, r1, #3
 800648c:	f025 0503 	bic.w	r5, r5, #3
 8006490:	3508      	adds	r5, #8
 8006492:	2d0c      	cmp	r5, #12
 8006494:	bf38      	it	cc
 8006496:	250c      	movcc	r5, #12
 8006498:	2d00      	cmp	r5, #0
 800649a:	4606      	mov	r6, r0
 800649c:	db01      	blt.n	80064a2 <_malloc_r+0x1a>
 800649e:	42a9      	cmp	r1, r5
 80064a0:	d903      	bls.n	80064aa <_malloc_r+0x22>
 80064a2:	230c      	movs	r3, #12
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	2000      	movs	r0, #0
 80064a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064aa:	f000 fd45 	bl	8006f38 <__malloc_lock>
 80064ae:	4921      	ldr	r1, [pc, #132]	; (8006534 <_malloc_r+0xac>)
 80064b0:	680a      	ldr	r2, [r1, #0]
 80064b2:	4614      	mov	r4, r2
 80064b4:	b99c      	cbnz	r4, 80064de <_malloc_r+0x56>
 80064b6:	4f20      	ldr	r7, [pc, #128]	; (8006538 <_malloc_r+0xb0>)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	b923      	cbnz	r3, 80064c6 <_malloc_r+0x3e>
 80064bc:	4621      	mov	r1, r4
 80064be:	4630      	mov	r0, r6
 80064c0:	f000 f94e 	bl	8006760 <_sbrk_r>
 80064c4:	6038      	str	r0, [r7, #0]
 80064c6:	4629      	mov	r1, r5
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f949 	bl	8006760 <_sbrk_r>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d123      	bne.n	800651a <_malloc_r+0x92>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6033      	str	r3, [r6, #0]
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 fd34 	bl	8006f44 <__malloc_unlock>
 80064dc:	e7e3      	b.n	80064a6 <_malloc_r+0x1e>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	1b5b      	subs	r3, r3, r5
 80064e2:	d417      	bmi.n	8006514 <_malloc_r+0x8c>
 80064e4:	2b0b      	cmp	r3, #11
 80064e6:	d903      	bls.n	80064f0 <_malloc_r+0x68>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	441c      	add	r4, r3
 80064ec:	6025      	str	r5, [r4, #0]
 80064ee:	e004      	b.n	80064fa <_malloc_r+0x72>
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	42a2      	cmp	r2, r4
 80064f4:	bf0c      	ite	eq
 80064f6:	600b      	streq	r3, [r1, #0]
 80064f8:	6053      	strne	r3, [r2, #4]
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 fd22 	bl	8006f44 <__malloc_unlock>
 8006500:	f104 000b 	add.w	r0, r4, #11
 8006504:	1d23      	adds	r3, r4, #4
 8006506:	f020 0007 	bic.w	r0, r0, #7
 800650a:	1ac2      	subs	r2, r0, r3
 800650c:	d0cc      	beq.n	80064a8 <_malloc_r+0x20>
 800650e:	1a1b      	subs	r3, r3, r0
 8006510:	50a3      	str	r3, [r4, r2]
 8006512:	e7c9      	b.n	80064a8 <_malloc_r+0x20>
 8006514:	4622      	mov	r2, r4
 8006516:	6864      	ldr	r4, [r4, #4]
 8006518:	e7cc      	b.n	80064b4 <_malloc_r+0x2c>
 800651a:	1cc4      	adds	r4, r0, #3
 800651c:	f024 0403 	bic.w	r4, r4, #3
 8006520:	42a0      	cmp	r0, r4
 8006522:	d0e3      	beq.n	80064ec <_malloc_r+0x64>
 8006524:	1a21      	subs	r1, r4, r0
 8006526:	4630      	mov	r0, r6
 8006528:	f000 f91a 	bl	8006760 <_sbrk_r>
 800652c:	3001      	adds	r0, #1
 800652e:	d1dd      	bne.n	80064ec <_malloc_r+0x64>
 8006530:	e7cf      	b.n	80064d2 <_malloc_r+0x4a>
 8006532:	bf00      	nop
 8006534:	200001c0 	.word	0x200001c0
 8006538:	200001c4 	.word	0x200001c4

0800653c <iprintf>:
 800653c:	b40f      	push	{r0, r1, r2, r3}
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <iprintf+0x2c>)
 8006540:	b513      	push	{r0, r1, r4, lr}
 8006542:	681c      	ldr	r4, [r3, #0]
 8006544:	b124      	cbz	r4, 8006550 <iprintf+0x14>
 8006546:	69a3      	ldr	r3, [r4, #24]
 8006548:	b913      	cbnz	r3, 8006550 <iprintf+0x14>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fbde 	bl	8006d0c <__sinit>
 8006550:	ab05      	add	r3, sp, #20
 8006552:	9a04      	ldr	r2, [sp, #16]
 8006554:	68a1      	ldr	r1, [r4, #8]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fd23 	bl	8006fa4 <_vfiprintf_r>
 800655e:	b002      	add	sp, #8
 8006560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006564:	b004      	add	sp, #16
 8006566:	4770      	bx	lr
 8006568:	2000002c 	.word	0x2000002c

0800656c <putchar>:
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <putchar+0x28>)
 800656e:	b513      	push	{r0, r1, r4, lr}
 8006570:	681c      	ldr	r4, [r3, #0]
 8006572:	4601      	mov	r1, r0
 8006574:	b134      	cbz	r4, 8006584 <putchar+0x18>
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	b923      	cbnz	r3, 8006584 <putchar+0x18>
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 fbc5 	bl	8006d0c <__sinit>
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	68a2      	ldr	r2, [r4, #8]
 8006586:	4620      	mov	r0, r4
 8006588:	b002      	add	sp, #8
 800658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658e:	f000 bfcd 	b.w	800752c <_putc_r>
 8006592:	bf00      	nop
 8006594:	2000002c 	.word	0x2000002c

08006598 <_puts_r>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	460e      	mov	r6, r1
 800659c:	4605      	mov	r5, r0
 800659e:	b118      	cbz	r0, 80065a8 <_puts_r+0x10>
 80065a0:	6983      	ldr	r3, [r0, #24]
 80065a2:	b90b      	cbnz	r3, 80065a8 <_puts_r+0x10>
 80065a4:	f000 fbb2 	bl	8006d0c <__sinit>
 80065a8:	69ab      	ldr	r3, [r5, #24]
 80065aa:	68ac      	ldr	r4, [r5, #8]
 80065ac:	b913      	cbnz	r3, 80065b4 <_puts_r+0x1c>
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 fbac 	bl	8006d0c <__sinit>
 80065b4:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <_puts_r+0xd0>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d120      	bne.n	80065fc <_puts_r+0x64>
 80065ba:	686c      	ldr	r4, [r5, #4]
 80065bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065be:	07db      	lsls	r3, r3, #31
 80065c0:	d405      	bmi.n	80065ce <_puts_r+0x36>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	0598      	lsls	r0, r3, #22
 80065c6:	d402      	bmi.n	80065ce <_puts_r+0x36>
 80065c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ca:	f000 fc4f 	bl	8006e6c <__retarget_lock_acquire_recursive>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	0719      	lsls	r1, r3, #28
 80065d2:	d51d      	bpl.n	8006610 <_puts_r+0x78>
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	b1db      	cbz	r3, 8006610 <_puts_r+0x78>
 80065d8:	3e01      	subs	r6, #1
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60a3      	str	r3, [r4, #8]
 80065e4:	bb39      	cbnz	r1, 8006636 <_puts_r+0x9e>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da38      	bge.n	800665c <_puts_r+0xc4>
 80065ea:	4622      	mov	r2, r4
 80065ec:	210a      	movs	r1, #10
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 f994 	bl	800691c <__swbuf_r>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d011      	beq.n	800661c <_puts_r+0x84>
 80065f8:	250a      	movs	r5, #10
 80065fa:	e011      	b.n	8006620 <_puts_r+0x88>
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <_puts_r+0xd4>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <_puts_r+0x6e>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7da      	b.n	80065bc <_puts_r+0x24>
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <_puts_r+0xd8>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7d5      	b.n	80065bc <_puts_r+0x24>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f9d4 	bl	80069c0 <__swsetup_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0dd      	beq.n	80065d8 <_puts_r+0x40>
 800661c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006622:	07da      	lsls	r2, r3, #31
 8006624:	d405      	bmi.n	8006632 <_puts_r+0x9a>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	059b      	lsls	r3, r3, #22
 800662a:	d402      	bmi.n	8006632 <_puts_r+0x9a>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 fc1e 	bl	8006e6e <__retarget_lock_release_recursive>
 8006632:	4628      	mov	r0, r5
 8006634:	bd70      	pop	{r4, r5, r6, pc}
 8006636:	2b00      	cmp	r3, #0
 8006638:	da04      	bge.n	8006644 <_puts_r+0xac>
 800663a:	69a2      	ldr	r2, [r4, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	dc06      	bgt.n	800664e <_puts_r+0xb6>
 8006640:	290a      	cmp	r1, #10
 8006642:	d004      	beq.n	800664e <_puts_r+0xb6>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	7019      	strb	r1, [r3, #0]
 800664c:	e7c5      	b.n	80065da <_puts_r+0x42>
 800664e:	4622      	mov	r2, r4
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f963 	bl	800691c <__swbuf_r>
 8006656:	3001      	adds	r0, #1
 8006658:	d1bf      	bne.n	80065da <_puts_r+0x42>
 800665a:	e7df      	b.n	800661c <_puts_r+0x84>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	250a      	movs	r5, #10
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	701d      	strb	r5, [r3, #0]
 8006666:	e7db      	b.n	8006620 <_puts_r+0x88>
 8006668:	08007e9c 	.word	0x08007e9c
 800666c:	08007ebc 	.word	0x08007ebc
 8006670:	08007e7c 	.word	0x08007e7c

08006674 <puts>:
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <puts+0xc>)
 8006676:	4601      	mov	r1, r0
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	f7ff bf8d 	b.w	8006598 <_puts_r>
 800667e:	bf00      	nop
 8006680:	2000002c 	.word	0x2000002c

08006684 <srand>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <srand+0x44>)
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800668c:	4604      	mov	r4, r0
 800668e:	b9b3      	cbnz	r3, 80066be <srand+0x3a>
 8006690:	2018      	movs	r0, #24
 8006692:	f7ff fe91 	bl	80063b8 <malloc>
 8006696:	4602      	mov	r2, r0
 8006698:	63a8      	str	r0, [r5, #56]	; 0x38
 800669a:	b920      	cbnz	r0, 80066a6 <srand+0x22>
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <srand+0x48>)
 800669e:	480c      	ldr	r0, [pc, #48]	; (80066d0 <srand+0x4c>)
 80066a0:	2142      	movs	r1, #66	; 0x42
 80066a2:	f000 f9fb 	bl	8006a9c <__assert_func>
 80066a6:	490b      	ldr	r1, [pc, #44]	; (80066d4 <srand+0x50>)
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <srand+0x54>)
 80066aa:	e9c0 1300 	strd	r1, r3, [r0]
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <srand+0x58>)
 80066b0:	6083      	str	r3, [r0, #8]
 80066b2:	230b      	movs	r3, #11
 80066b4:	8183      	strh	r3, [r0, #12]
 80066b6:	2100      	movs	r1, #0
 80066b8:	2001      	movs	r0, #1
 80066ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80066be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80066c0:	2200      	movs	r2, #0
 80066c2:	611c      	str	r4, [r3, #16]
 80066c4:	615a      	str	r2, [r3, #20]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	2000002c 	.word	0x2000002c
 80066cc:	08007dc8 	.word	0x08007dc8
 80066d0:	08007ddf 	.word	0x08007ddf
 80066d4:	abcd330e 	.word	0xabcd330e
 80066d8:	e66d1234 	.word	0xe66d1234
 80066dc:	0005deec 	.word	0x0005deec

080066e0 <rand>:
 80066e0:	4b17      	ldr	r3, [pc, #92]	; (8006740 <rand+0x60>)
 80066e2:	b510      	push	{r4, lr}
 80066e4:	681c      	ldr	r4, [r3, #0]
 80066e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066e8:	b9b3      	cbnz	r3, 8006718 <rand+0x38>
 80066ea:	2018      	movs	r0, #24
 80066ec:	f7ff fe64 	bl	80063b8 <malloc>
 80066f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80066f2:	b928      	cbnz	r0, 8006700 <rand+0x20>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <rand+0x64>)
 80066f8:	4813      	ldr	r0, [pc, #76]	; (8006748 <rand+0x68>)
 80066fa:	214e      	movs	r1, #78	; 0x4e
 80066fc:	f000 f9ce 	bl	8006a9c <__assert_func>
 8006700:	4a12      	ldr	r2, [pc, #72]	; (800674c <rand+0x6c>)
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <rand+0x70>)
 8006704:	e9c0 2300 	strd	r2, r3, [r0]
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <rand+0x74>)
 800670a:	6083      	str	r3, [r0, #8]
 800670c:	230b      	movs	r3, #11
 800670e:	8183      	strh	r3, [r0, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	2300      	movs	r3, #0
 8006714:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800671a:	480f      	ldr	r0, [pc, #60]	; (8006758 <rand+0x78>)
 800671c:	690a      	ldr	r2, [r1, #16]
 800671e:	694b      	ldr	r3, [r1, #20]
 8006720:	4c0e      	ldr	r4, [pc, #56]	; (800675c <rand+0x7c>)
 8006722:	4350      	muls	r0, r2
 8006724:	fb04 0003 	mla	r0, r4, r3, r0
 8006728:	fba2 3404 	umull	r3, r4, r2, r4
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	4404      	add	r4, r0
 8006730:	f144 0000 	adc.w	r0, r4, #0
 8006734:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006738:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	2000002c 	.word	0x2000002c
 8006744:	08007dc8 	.word	0x08007dc8
 8006748:	08007ddf 	.word	0x08007ddf
 800674c:	abcd330e 	.word	0xabcd330e
 8006750:	e66d1234 	.word	0xe66d1234
 8006754:	0005deec 	.word	0x0005deec
 8006758:	5851f42d 	.word	0x5851f42d
 800675c:	4c957f2d 	.word	0x4c957f2d

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	; (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7ff fd10 	bl	8006190 <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	200001d8 	.word	0x200001d8

08006780 <setbuf>:
 8006780:	2900      	cmp	r1, #0
 8006782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006786:	bf0c      	ite	eq
 8006788:	2202      	moveq	r2, #2
 800678a:	2200      	movne	r2, #0
 800678c:	f000 b800 	b.w	8006790 <setvbuf>

08006790 <setvbuf>:
 8006790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006794:	461d      	mov	r5, r3
 8006796:	4b5d      	ldr	r3, [pc, #372]	; (800690c <setvbuf+0x17c>)
 8006798:	681f      	ldr	r7, [r3, #0]
 800679a:	4604      	mov	r4, r0
 800679c:	460e      	mov	r6, r1
 800679e:	4690      	mov	r8, r2
 80067a0:	b127      	cbz	r7, 80067ac <setvbuf+0x1c>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b913      	cbnz	r3, 80067ac <setvbuf+0x1c>
 80067a6:	4638      	mov	r0, r7
 80067a8:	f000 fab0 	bl	8006d0c <__sinit>
 80067ac:	4b58      	ldr	r3, [pc, #352]	; (8006910 <setvbuf+0x180>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d167      	bne.n	8006882 <setvbuf+0xf2>
 80067b2:	687c      	ldr	r4, [r7, #4]
 80067b4:	f1b8 0f02 	cmp.w	r8, #2
 80067b8:	d006      	beq.n	80067c8 <setvbuf+0x38>
 80067ba:	f1b8 0f01 	cmp.w	r8, #1
 80067be:	f200 809f 	bhi.w	8006900 <setvbuf+0x170>
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	f2c0 809c 	blt.w	8006900 <setvbuf+0x170>
 80067c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d405      	bmi.n	80067da <setvbuf+0x4a>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	0598      	lsls	r0, r3, #22
 80067d2:	d402      	bmi.n	80067da <setvbuf+0x4a>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f000 fb49 	bl	8006e6c <__retarget_lock_acquire_recursive>
 80067da:	4621      	mov	r1, r4
 80067dc:	4638      	mov	r0, r7
 80067de:	f000 fa01 	bl	8006be4 <_fflush_r>
 80067e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e4:	b141      	cbz	r1, 80067f8 <setvbuf+0x68>
 80067e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ea:	4299      	cmp	r1, r3
 80067ec:	d002      	beq.n	80067f4 <setvbuf+0x64>
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff fdfa 	bl	80063e8 <_free_r>
 80067f4:	2300      	movs	r3, #0
 80067f6:	6363      	str	r3, [r4, #52]	; 0x34
 80067f8:	2300      	movs	r3, #0
 80067fa:	61a3      	str	r3, [r4, #24]
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	0619      	lsls	r1, r3, #24
 8006802:	d503      	bpl.n	800680c <setvbuf+0x7c>
 8006804:	6921      	ldr	r1, [r4, #16]
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff fdee 	bl	80063e8 <_free_r>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	f1b8 0f02 	cmp.w	r8, #2
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	d06c      	beq.n	80068f8 <setvbuf+0x168>
 800681e:	ab01      	add	r3, sp, #4
 8006820:	466a      	mov	r2, sp
 8006822:	4621      	mov	r1, r4
 8006824:	4638      	mov	r0, r7
 8006826:	f000 fb23 	bl	8006e70 <__swhatbuf_r>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	4318      	orrs	r0, r3
 800682e:	81a0      	strh	r0, [r4, #12]
 8006830:	2d00      	cmp	r5, #0
 8006832:	d130      	bne.n	8006896 <setvbuf+0x106>
 8006834:	9d00      	ldr	r5, [sp, #0]
 8006836:	4628      	mov	r0, r5
 8006838:	f7ff fdbe 	bl	80063b8 <malloc>
 800683c:	4606      	mov	r6, r0
 800683e:	2800      	cmp	r0, #0
 8006840:	d155      	bne.n	80068ee <setvbuf+0x15e>
 8006842:	f8dd 9000 	ldr.w	r9, [sp]
 8006846:	45a9      	cmp	r9, r5
 8006848:	d14a      	bne.n	80068e0 <setvbuf+0x150>
 800684a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800684e:	2200      	movs	r2, #0
 8006850:	60a2      	str	r2, [r4, #8]
 8006852:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	6122      	str	r2, [r4, #16]
 800685a:	2201      	movs	r2, #1
 800685c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006860:	6162      	str	r2, [r4, #20]
 8006862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006864:	f043 0302 	orr.w	r3, r3, #2
 8006868:	07d2      	lsls	r2, r2, #31
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	d405      	bmi.n	800687a <setvbuf+0xea>
 800686e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006872:	d102      	bne.n	800687a <setvbuf+0xea>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f000 fafa 	bl	8006e6e <__retarget_lock_release_recursive>
 800687a:	4628      	mov	r0, r5
 800687c:	b003      	add	sp, #12
 800687e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006882:	4b24      	ldr	r3, [pc, #144]	; (8006914 <setvbuf+0x184>)
 8006884:	429c      	cmp	r4, r3
 8006886:	d101      	bne.n	800688c <setvbuf+0xfc>
 8006888:	68bc      	ldr	r4, [r7, #8]
 800688a:	e793      	b.n	80067b4 <setvbuf+0x24>
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <setvbuf+0x188>)
 800688e:	429c      	cmp	r4, r3
 8006890:	bf08      	it	eq
 8006892:	68fc      	ldreq	r4, [r7, #12]
 8006894:	e78e      	b.n	80067b4 <setvbuf+0x24>
 8006896:	2e00      	cmp	r6, #0
 8006898:	d0cd      	beq.n	8006836 <setvbuf+0xa6>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	b913      	cbnz	r3, 80068a4 <setvbuf+0x114>
 800689e:	4638      	mov	r0, r7
 80068a0:	f000 fa34 	bl	8006d0c <__sinit>
 80068a4:	f1b8 0f01 	cmp.w	r8, #1
 80068a8:	bf08      	it	eq
 80068aa:	89a3      	ldrheq	r3, [r4, #12]
 80068ac:	6026      	str	r6, [r4, #0]
 80068ae:	bf04      	itt	eq
 80068b0:	f043 0301 	orreq.w	r3, r3, #1
 80068b4:	81a3      	strheq	r3, [r4, #12]
 80068b6:	89a2      	ldrh	r2, [r4, #12]
 80068b8:	f012 0308 	ands.w	r3, r2, #8
 80068bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80068c0:	d01c      	beq.n	80068fc <setvbuf+0x16c>
 80068c2:	07d3      	lsls	r3, r2, #31
 80068c4:	bf41      	itttt	mi
 80068c6:	2300      	movmi	r3, #0
 80068c8:	426d      	negmi	r5, r5
 80068ca:	60a3      	strmi	r3, [r4, #8]
 80068cc:	61a5      	strmi	r5, [r4, #24]
 80068ce:	bf58      	it	pl
 80068d0:	60a5      	strpl	r5, [r4, #8]
 80068d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80068d4:	f015 0501 	ands.w	r5, r5, #1
 80068d8:	d115      	bne.n	8006906 <setvbuf+0x176>
 80068da:	f412 7f00 	tst.w	r2, #512	; 0x200
 80068de:	e7c8      	b.n	8006872 <setvbuf+0xe2>
 80068e0:	4648      	mov	r0, r9
 80068e2:	f7ff fd69 	bl	80063b8 <malloc>
 80068e6:	4606      	mov	r6, r0
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d0ae      	beq.n	800684a <setvbuf+0xba>
 80068ec:	464d      	mov	r5, r9
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	e7d0      	b.n	800689a <setvbuf+0x10a>
 80068f8:	2500      	movs	r5, #0
 80068fa:	e7a8      	b.n	800684e <setvbuf+0xbe>
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	e7e8      	b.n	80068d2 <setvbuf+0x142>
 8006900:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006904:	e7b9      	b.n	800687a <setvbuf+0xea>
 8006906:	2500      	movs	r5, #0
 8006908:	e7b7      	b.n	800687a <setvbuf+0xea>
 800690a:	bf00      	nop
 800690c:	2000002c 	.word	0x2000002c
 8006910:	08007e9c 	.word	0x08007e9c
 8006914:	08007ebc 	.word	0x08007ebc
 8006918:	08007e7c 	.word	0x08007e7c

0800691c <__swbuf_r>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	4614      	mov	r4, r2
 8006922:	4605      	mov	r5, r0
 8006924:	b118      	cbz	r0, 800692e <__swbuf_r+0x12>
 8006926:	6983      	ldr	r3, [r0, #24]
 8006928:	b90b      	cbnz	r3, 800692e <__swbuf_r+0x12>
 800692a:	f000 f9ef 	bl	8006d0c <__sinit>
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <__swbuf_r+0x98>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d12b      	bne.n	800698c <__swbuf_r+0x70>
 8006934:	686c      	ldr	r4, [r5, #4]
 8006936:	69a3      	ldr	r3, [r4, #24]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	071a      	lsls	r2, r3, #28
 800693e:	d52f      	bpl.n	80069a0 <__swbuf_r+0x84>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b36b      	cbz	r3, 80069a0 <__swbuf_r+0x84>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	6963      	ldr	r3, [r4, #20]
 800694c:	b2f6      	uxtb	r6, r6
 800694e:	4283      	cmp	r3, r0
 8006950:	4637      	mov	r7, r6
 8006952:	dc04      	bgt.n	800695e <__swbuf_r+0x42>
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f944 	bl	8006be4 <_fflush_r>
 800695c:	bb30      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	3b01      	subs	r3, #1
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	701e      	strb	r6, [r3, #0]
 800696c:	6963      	ldr	r3, [r4, #20]
 800696e:	3001      	adds	r0, #1
 8006970:	4283      	cmp	r3, r0
 8006972:	d004      	beq.n	800697e <__swbuf_r+0x62>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	07db      	lsls	r3, r3, #31
 8006978:	d506      	bpl.n	8006988 <__swbuf_r+0x6c>
 800697a:	2e0a      	cmp	r6, #10
 800697c:	d104      	bne.n	8006988 <__swbuf_r+0x6c>
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f92f 	bl	8006be4 <_fflush_r>
 8006986:	b988      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 8006988:	4638      	mov	r0, r7
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <__swbuf_r+0x9c>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swbuf_r+0x7a>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7cf      	b.n	8006936 <__swbuf_r+0x1a>
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <__swbuf_r+0xa0>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7ca      	b.n	8006936 <__swbuf_r+0x1a>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f80c 	bl	80069c0 <__swsetup_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0cb      	beq.n	8006944 <__swbuf_r+0x28>
 80069ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069b0:	e7ea      	b.n	8006988 <__swbuf_r+0x6c>
 80069b2:	bf00      	nop
 80069b4:	08007e9c 	.word	0x08007e9c
 80069b8:	08007ebc 	.word	0x08007ebc
 80069bc:	08007e7c 	.word	0x08007e7c

080069c0 <__swsetup_r>:
 80069c0:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <__swsetup_r+0xcc>)
 80069c2:	b570      	push	{r4, r5, r6, lr}
 80069c4:	681d      	ldr	r5, [r3, #0]
 80069c6:	4606      	mov	r6, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	b125      	cbz	r5, 80069d6 <__swsetup_r+0x16>
 80069cc:	69ab      	ldr	r3, [r5, #24]
 80069ce:	b913      	cbnz	r3, 80069d6 <__swsetup_r+0x16>
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 f99b 	bl	8006d0c <__sinit>
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <__swsetup_r+0xd0>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	d10f      	bne.n	80069fc <__swsetup_r+0x3c>
 80069dc:	686c      	ldr	r4, [r5, #4]
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e4:	0719      	lsls	r1, r3, #28
 80069e6:	d42c      	bmi.n	8006a42 <__swsetup_r+0x82>
 80069e8:	06dd      	lsls	r5, r3, #27
 80069ea:	d411      	bmi.n	8006a10 <__swsetup_r+0x50>
 80069ec:	2309      	movs	r3, #9
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069fa:	e03e      	b.n	8006a7a <__swsetup_r+0xba>
 80069fc:	4b25      	ldr	r3, [pc, #148]	; (8006a94 <__swsetup_r+0xd4>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <__swsetup_r+0x46>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7eb      	b.n	80069de <__swsetup_r+0x1e>
 8006a06:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <__swsetup_r+0xd8>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	bf08      	it	eq
 8006a0c:	68ec      	ldreq	r4, [r5, #12]
 8006a0e:	e7e6      	b.n	80069de <__swsetup_r+0x1e>
 8006a10:	0758      	lsls	r0, r3, #29
 8006a12:	d512      	bpl.n	8006a3a <__swsetup_r+0x7a>
 8006a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a16:	b141      	cbz	r1, 8006a2a <__swsetup_r+0x6a>
 8006a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d002      	beq.n	8006a26 <__swsetup_r+0x66>
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff fce1 	bl	80063e8 <_free_r>
 8006a26:	2300      	movs	r3, #0
 8006a28:	6363      	str	r3, [r4, #52]	; 0x34
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	2300      	movs	r3, #0
 8006a34:	6063      	str	r3, [r4, #4]
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f043 0308 	orr.w	r3, r3, #8
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	b94b      	cbnz	r3, 8006a5a <__swsetup_r+0x9a>
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a50:	d003      	beq.n	8006a5a <__swsetup_r+0x9a>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 fa2f 	bl	8006eb8 <__smakebuf_r>
 8006a5a:	89a0      	ldrh	r0, [r4, #12]
 8006a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a60:	f010 0301 	ands.w	r3, r0, #1
 8006a64:	d00a      	beq.n	8006a7c <__swsetup_r+0xbc>
 8006a66:	2300      	movs	r3, #0
 8006a68:	60a3      	str	r3, [r4, #8]
 8006a6a:	6963      	ldr	r3, [r4, #20]
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	61a3      	str	r3, [r4, #24]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	b943      	cbnz	r3, 8006a86 <__swsetup_r+0xc6>
 8006a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a78:	d1ba      	bne.n	80069f0 <__swsetup_r+0x30>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	0781      	lsls	r1, r0, #30
 8006a7e:	bf58      	it	pl
 8006a80:	6963      	ldrpl	r3, [r4, #20]
 8006a82:	60a3      	str	r3, [r4, #8]
 8006a84:	e7f4      	b.n	8006a70 <__swsetup_r+0xb0>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e7f7      	b.n	8006a7a <__swsetup_r+0xba>
 8006a8a:	bf00      	nop
 8006a8c:	2000002c 	.word	0x2000002c
 8006a90:	08007e9c 	.word	0x08007e9c
 8006a94:	08007ebc 	.word	0x08007ebc
 8006a98:	08007e7c 	.word	0x08007e7c

08006a9c <__assert_func>:
 8006a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <__assert_func+0x2c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	68d8      	ldr	r0, [r3, #12]
 8006aaa:	b14c      	cbz	r4, 8006ac0 <__assert_func+0x24>
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <__assert_func+0x30>)
 8006aae:	9100      	str	r1, [sp, #0]
 8006ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ab4:	4906      	ldr	r1, [pc, #24]	; (8006ad0 <__assert_func+0x34>)
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f000 f9a6 	bl	8006e08 <fiprintf>
 8006abc:	f000 fdc1 	bl	8007642 <abort>
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <__assert_func+0x38>)
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	e7f3      	b.n	8006aae <__assert_func+0x12>
 8006ac6:	bf00      	nop
 8006ac8:	2000002c 	.word	0x2000002c
 8006acc:	08007e3e 	.word	0x08007e3e
 8006ad0:	08007e4b 	.word	0x08007e4b
 8006ad4:	08007e79 	.word	0x08007e79

08006ad8 <__sflush_r>:
 8006ad8:	898a      	ldrh	r2, [r1, #12]
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	4605      	mov	r5, r0
 8006ae0:	0710      	lsls	r0, r2, #28
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	d458      	bmi.n	8006b98 <__sflush_r+0xc0>
 8006ae6:	684b      	ldr	r3, [r1, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dc05      	bgt.n	8006af8 <__sflush_r+0x20>
 8006aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dc02      	bgt.n	8006af8 <__sflush_r+0x20>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d0f9      	beq.n	8006af2 <__sflush_r+0x1a>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b04:	682f      	ldr	r7, [r5, #0]
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	d032      	beq.n	8006b70 <__sflush_r+0x98>
 8006b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	075a      	lsls	r2, r3, #29
 8006b10:	d505      	bpl.n	8006b1e <__sflush_r+0x46>
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	1ac0      	subs	r0, r0, r3
 8006b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b18:	b10b      	cbz	r3, 8006b1e <__sflush_r+0x46>
 8006b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b1c:	1ac0      	subs	r0, r0, r3
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4602      	mov	r2, r0
 8006b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b24:	6a21      	ldr	r1, [r4, #32]
 8006b26:	4628      	mov	r0, r5
 8006b28:	47b0      	blx	r6
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	d106      	bne.n	8006b3e <__sflush_r+0x66>
 8006b30:	6829      	ldr	r1, [r5, #0]
 8006b32:	291d      	cmp	r1, #29
 8006b34:	d82c      	bhi.n	8006b90 <__sflush_r+0xb8>
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <__sflush_r+0x108>)
 8006b38:	40ca      	lsrs	r2, r1
 8006b3a:	07d6      	lsls	r6, r2, #31
 8006b3c:	d528      	bpl.n	8006b90 <__sflush_r+0xb8>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	6062      	str	r2, [r4, #4]
 8006b42:	04d9      	lsls	r1, r3, #19
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	d504      	bpl.n	8006b54 <__sflush_r+0x7c>
 8006b4a:	1c42      	adds	r2, r0, #1
 8006b4c:	d101      	bne.n	8006b52 <__sflush_r+0x7a>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b903      	cbnz	r3, 8006b54 <__sflush_r+0x7c>
 8006b52:	6560      	str	r0, [r4, #84]	; 0x54
 8006b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b56:	602f      	str	r7, [r5, #0]
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d0ca      	beq.n	8006af2 <__sflush_r+0x1a>
 8006b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b60:	4299      	cmp	r1, r3
 8006b62:	d002      	beq.n	8006b6a <__sflush_r+0x92>
 8006b64:	4628      	mov	r0, r5
 8006b66:	f7ff fc3f 	bl	80063e8 <_free_r>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b6e:	e7c1      	b.n	8006af4 <__sflush_r+0x1c>
 8006b70:	6a21      	ldr	r1, [r4, #32]
 8006b72:	2301      	movs	r3, #1
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b0      	blx	r6
 8006b78:	1c41      	adds	r1, r0, #1
 8006b7a:	d1c7      	bne.n	8006b0c <__sflush_r+0x34>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0c4      	beq.n	8006b0c <__sflush_r+0x34>
 8006b82:	2b1d      	cmp	r3, #29
 8006b84:	d001      	beq.n	8006b8a <__sflush_r+0xb2>
 8006b86:	2b16      	cmp	r3, #22
 8006b88:	d101      	bne.n	8006b8e <__sflush_r+0xb6>
 8006b8a:	602f      	str	r7, [r5, #0]
 8006b8c:	e7b1      	b.n	8006af2 <__sflush_r+0x1a>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	e7ad      	b.n	8006af4 <__sflush_r+0x1c>
 8006b98:	690f      	ldr	r7, [r1, #16]
 8006b9a:	2f00      	cmp	r7, #0
 8006b9c:	d0a9      	beq.n	8006af2 <__sflush_r+0x1a>
 8006b9e:	0793      	lsls	r3, r2, #30
 8006ba0:	680e      	ldr	r6, [r1, #0]
 8006ba2:	bf08      	it	eq
 8006ba4:	694b      	ldreq	r3, [r1, #20]
 8006ba6:	600f      	str	r7, [r1, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	2300      	movne	r3, #0
 8006bac:	eba6 0807 	sub.w	r8, r6, r7
 8006bb0:	608b      	str	r3, [r1, #8]
 8006bb2:	f1b8 0f00 	cmp.w	r8, #0
 8006bb6:	dd9c      	ble.n	8006af2 <__sflush_r+0x1a>
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bbc:	4643      	mov	r3, r8
 8006bbe:	463a      	mov	r2, r7
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b0      	blx	r6
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	dc06      	bgt.n	8006bd6 <__sflush_r+0xfe>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd4:	e78e      	b.n	8006af4 <__sflush_r+0x1c>
 8006bd6:	4407      	add	r7, r0
 8006bd8:	eba8 0800 	sub.w	r8, r8, r0
 8006bdc:	e7e9      	b.n	8006bb2 <__sflush_r+0xda>
 8006bde:	bf00      	nop
 8006be0:	20400001 	.word	0x20400001

08006be4 <_fflush_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b913      	cbnz	r3, 8006bf4 <_fflush_r+0x10>
 8006bee:	2500      	movs	r5, #0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	b118      	cbz	r0, 8006bfe <_fflush_r+0x1a>
 8006bf6:	6983      	ldr	r3, [r0, #24]
 8006bf8:	b90b      	cbnz	r3, 8006bfe <_fflush_r+0x1a>
 8006bfa:	f000 f887 	bl	8006d0c <__sinit>
 8006bfe:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <_fflush_r+0x6c>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	d11b      	bne.n	8006c3c <_fflush_r+0x58>
 8006c04:	686c      	ldr	r4, [r5, #4]
 8006c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <_fflush_r+0xa>
 8006c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c10:	07d0      	lsls	r0, r2, #31
 8006c12:	d404      	bmi.n	8006c1e <_fflush_r+0x3a>
 8006c14:	0599      	lsls	r1, r3, #22
 8006c16:	d402      	bmi.n	8006c1e <_fflush_r+0x3a>
 8006c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c1a:	f000 f927 	bl	8006e6c <__retarget_lock_acquire_recursive>
 8006c1e:	4628      	mov	r0, r5
 8006c20:	4621      	mov	r1, r4
 8006c22:	f7ff ff59 	bl	8006ad8 <__sflush_r>
 8006c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c28:	07da      	lsls	r2, r3, #31
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	d4e0      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	059b      	lsls	r3, r3, #22
 8006c32:	d4dd      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c36:	f000 f91a 	bl	8006e6e <__retarget_lock_release_recursive>
 8006c3a:	e7d9      	b.n	8006bf0 <_fflush_r+0xc>
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <_fflush_r+0x70>)
 8006c3e:	429c      	cmp	r4, r3
 8006c40:	d101      	bne.n	8006c46 <_fflush_r+0x62>
 8006c42:	68ac      	ldr	r4, [r5, #8]
 8006c44:	e7df      	b.n	8006c06 <_fflush_r+0x22>
 8006c46:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <_fflush_r+0x74>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	bf08      	it	eq
 8006c4c:	68ec      	ldreq	r4, [r5, #12]
 8006c4e:	e7da      	b.n	8006c06 <_fflush_r+0x22>
 8006c50:	08007e9c 	.word	0x08007e9c
 8006c54:	08007ebc 	.word	0x08007ebc
 8006c58:	08007e7c 	.word	0x08007e7c

08006c5c <std>:
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	e9c0 3300 	strd	r3, r3, [r0]
 8006c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c6a:	6083      	str	r3, [r0, #8]
 8006c6c:	8181      	strh	r1, [r0, #12]
 8006c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c70:	81c2      	strh	r2, [r0, #14]
 8006c72:	6183      	str	r3, [r0, #24]
 8006c74:	4619      	mov	r1, r3
 8006c76:	2208      	movs	r2, #8
 8006c78:	305c      	adds	r0, #92	; 0x5c
 8006c7a:	f7ff fbad 	bl	80063d8 <memset>
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <std+0x38>)
 8006c80:	6263      	str	r3, [r4, #36]	; 0x24
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <std+0x3c>)
 8006c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <std+0x40>)
 8006c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <std+0x44>)
 8006c8c:	6224      	str	r4, [r4, #32]
 8006c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	bf00      	nop
 8006c94:	080075bd 	.word	0x080075bd
 8006c98:	080075df 	.word	0x080075df
 8006c9c:	08007617 	.word	0x08007617
 8006ca0:	0800763b 	.word	0x0800763b

08006ca4 <_cleanup_r>:
 8006ca4:	4901      	ldr	r1, [pc, #4]	; (8006cac <_cleanup_r+0x8>)
 8006ca6:	f000 b8c1 	b.w	8006e2c <_fwalk_reent>
 8006caa:	bf00      	nop
 8006cac:	08006be5 	.word	0x08006be5

08006cb0 <__sfmoreglue>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	1e4a      	subs	r2, r1, #1
 8006cb4:	2568      	movs	r5, #104	; 0x68
 8006cb6:	4355      	muls	r5, r2
 8006cb8:	460e      	mov	r6, r1
 8006cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cbe:	f7ff fbe3 	bl	8006488 <_malloc_r>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	b140      	cbz	r0, 8006cd8 <__sfmoreglue+0x28>
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8006ccc:	300c      	adds	r0, #12
 8006cce:	60a0      	str	r0, [r4, #8]
 8006cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cd4:	f7ff fb80 	bl	80063d8 <memset>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	bd70      	pop	{r4, r5, r6, pc}

08006cdc <__sfp_lock_acquire>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__sfp_lock_acquire+0x8>)
 8006cde:	f000 b8c5 	b.w	8006e6c <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	200001d4 	.word	0x200001d4

08006ce8 <__sfp_lock_release>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__sfp_lock_release+0x8>)
 8006cea:	f000 b8c0 	b.w	8006e6e <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	200001d4 	.word	0x200001d4

08006cf4 <__sinit_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sinit_lock_acquire+0x8>)
 8006cf6:	f000 b8b9 	b.w	8006e6c <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	200001cf 	.word	0x200001cf

08006d00 <__sinit_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sinit_lock_release+0x8>)
 8006d02:	f000 b8b4 	b.w	8006e6e <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	200001cf 	.word	0x200001cf

08006d0c <__sinit>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f7ff fff0 	bl	8006cf4 <__sinit_lock_acquire>
 8006d14:	69a3      	ldr	r3, [r4, #24]
 8006d16:	b11b      	cbz	r3, 8006d20 <__sinit+0x14>
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f7ff bff0 	b.w	8006d00 <__sinit_lock_release>
 8006d20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d24:	6523      	str	r3, [r4, #80]	; 0x50
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <__sinit+0x68>)
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <__sinit+0x6c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	bf04      	itt	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	61a3      	streq	r3, [r4, #24]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f820 	bl	8006d7c <__sfp>
 8006d3c:	6060      	str	r0, [r4, #4]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f81c 	bl	8006d7c <__sfp>
 8006d44:	60a0      	str	r0, [r4, #8]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f818 	bl	8006d7c <__sfp>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60e0      	str	r0, [r4, #12]
 8006d50:	2104      	movs	r1, #4
 8006d52:	6860      	ldr	r0, [r4, #4]
 8006d54:	f7ff ff82 	bl	8006c5c <std>
 8006d58:	68a0      	ldr	r0, [r4, #8]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	2109      	movs	r1, #9
 8006d5e:	f7ff ff7d 	bl	8006c5c <std>
 8006d62:	68e0      	ldr	r0, [r4, #12]
 8006d64:	2202      	movs	r2, #2
 8006d66:	2112      	movs	r1, #18
 8006d68:	f7ff ff78 	bl	8006c5c <std>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61a3      	str	r3, [r4, #24]
 8006d70:	e7d2      	b.n	8006d18 <__sinit+0xc>
 8006d72:	bf00      	nop
 8006d74:	08007dc4 	.word	0x08007dc4
 8006d78:	08006ca5 	.word	0x08006ca5

08006d7c <__sfp>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	4607      	mov	r7, r0
 8006d80:	f7ff ffac 	bl	8006cdc <__sfp_lock_acquire>
 8006d84:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <__sfp+0x84>)
 8006d86:	681e      	ldr	r6, [r3, #0]
 8006d88:	69b3      	ldr	r3, [r6, #24]
 8006d8a:	b913      	cbnz	r3, 8006d92 <__sfp+0x16>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff ffbd 	bl	8006d0c <__sinit>
 8006d92:	3648      	adds	r6, #72	; 0x48
 8006d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	d503      	bpl.n	8006da4 <__sfp+0x28>
 8006d9c:	6833      	ldr	r3, [r6, #0]
 8006d9e:	b30b      	cbz	r3, 8006de4 <__sfp+0x68>
 8006da0:	6836      	ldr	r6, [r6, #0]
 8006da2:	e7f7      	b.n	8006d94 <__sfp+0x18>
 8006da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006da8:	b9d5      	cbnz	r5, 8006de0 <__sfp+0x64>
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <__sfp+0x88>)
 8006dac:	60e3      	str	r3, [r4, #12]
 8006dae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006db2:	6665      	str	r5, [r4, #100]	; 0x64
 8006db4:	f000 f859 	bl	8006e6a <__retarget_lock_init_recursive>
 8006db8:	f7ff ff96 	bl	8006ce8 <__sfp_lock_release>
 8006dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dc4:	6025      	str	r5, [r4, #0]
 8006dc6:	61a5      	str	r5, [r4, #24]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dd0:	f7ff fb02 	bl	80063d8 <memset>
 8006dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de0:	3468      	adds	r4, #104	; 0x68
 8006de2:	e7d9      	b.n	8006d98 <__sfp+0x1c>
 8006de4:	2104      	movs	r1, #4
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7ff ff62 	bl	8006cb0 <__sfmoreglue>
 8006dec:	4604      	mov	r4, r0
 8006dee:	6030      	str	r0, [r6, #0]
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1d5      	bne.n	8006da0 <__sfp+0x24>
 8006df4:	f7ff ff78 	bl	8006ce8 <__sfp_lock_release>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	e7ee      	b.n	8006ddc <__sfp+0x60>
 8006dfe:	bf00      	nop
 8006e00:	08007dc4 	.word	0x08007dc4
 8006e04:	ffff0001 	.word	0xffff0001

08006e08 <fiprintf>:
 8006e08:	b40e      	push	{r1, r2, r3}
 8006e0a:	b503      	push	{r0, r1, lr}
 8006e0c:	4601      	mov	r1, r0
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	4805      	ldr	r0, [pc, #20]	; (8006e28 <fiprintf+0x20>)
 8006e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e16:	6800      	ldr	r0, [r0, #0]
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	f000 f8c3 	bl	8006fa4 <_vfiprintf_r>
 8006e1e:	b002      	add	sp, #8
 8006e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e24:	b003      	add	sp, #12
 8006e26:	4770      	bx	lr
 8006e28:	2000002c 	.word	0x2000002c

08006e2c <_fwalk_reent>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	4606      	mov	r6, r0
 8006e32:	4688      	mov	r8, r1
 8006e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e38:	2700      	movs	r7, #0
 8006e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e42:	d505      	bpl.n	8006e50 <_fwalk_reent+0x24>
 8006e44:	6824      	ldr	r4, [r4, #0]
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	d1f7      	bne.n	8006e3a <_fwalk_reent+0xe>
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e50:	89ab      	ldrh	r3, [r5, #12]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d907      	bls.n	8006e66 <_fwalk_reent+0x3a>
 8006e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	d003      	beq.n	8006e66 <_fwalk_reent+0x3a>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4630      	mov	r0, r6
 8006e62:	47c0      	blx	r8
 8006e64:	4307      	orrs	r7, r0
 8006e66:	3568      	adds	r5, #104	; 0x68
 8006e68:	e7e9      	b.n	8006e3e <_fwalk_reent+0x12>

08006e6a <__retarget_lock_init_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <__retarget_lock_acquire_recursive>:
 8006e6c:	4770      	bx	lr

08006e6e <__retarget_lock_release_recursive>:
 8006e6e:	4770      	bx	lr

08006e70 <__swhatbuf_r>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	460e      	mov	r6, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	b096      	sub	sp, #88	; 0x58
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	da07      	bge.n	8006e92 <__swhatbuf_r+0x22>
 8006e82:	2300      	movs	r3, #0
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	89b3      	ldrh	r3, [r6, #12]
 8006e88:	061a      	lsls	r2, r3, #24
 8006e8a:	d410      	bmi.n	8006eae <__swhatbuf_r+0x3e>
 8006e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e90:	e00e      	b.n	8006eb0 <__swhatbuf_r+0x40>
 8006e92:	466a      	mov	r2, sp
 8006e94:	f000 fbec 	bl	8007670 <_fstat_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	dbf2      	blt.n	8006e82 <__swhatbuf_r+0x12>
 8006e9c:	9a01      	ldr	r2, [sp, #4]
 8006e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ea6:	425a      	negs	r2, r3
 8006ea8:	415a      	adcs	r2, r3
 8006eaa:	602a      	str	r2, [r5, #0]
 8006eac:	e7ee      	b.n	8006e8c <__swhatbuf_r+0x1c>
 8006eae:	2340      	movs	r3, #64	; 0x40
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	b016      	add	sp, #88	; 0x58
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}

08006eb8 <__smakebuf_r>:
 8006eb8:	898b      	ldrh	r3, [r1, #12]
 8006eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ebc:	079d      	lsls	r5, r3, #30
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d507      	bpl.n	8006ed4 <__smakebuf_r+0x1c>
 8006ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	6123      	str	r3, [r4, #16]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	6163      	str	r3, [r4, #20]
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	ab01      	add	r3, sp, #4
 8006ed6:	466a      	mov	r2, sp
 8006ed8:	f7ff ffca 	bl	8006e70 <__swhatbuf_r>
 8006edc:	9900      	ldr	r1, [sp, #0]
 8006ede:	4605      	mov	r5, r0
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff fad1 	bl	8006488 <_malloc_r>
 8006ee6:	b948      	cbnz	r0, 8006efc <__smakebuf_r+0x44>
 8006ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d4ef      	bmi.n	8006ed0 <__smakebuf_r+0x18>
 8006ef0:	f023 0303 	bic.w	r3, r3, #3
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	e7e3      	b.n	8006ec4 <__smakebuf_r+0xc>
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <__smakebuf_r+0x7c>)
 8006efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	6020      	str	r0, [r4, #0]
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	6163      	str	r3, [r4, #20]
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	6120      	str	r0, [r4, #16]
 8006f12:	b15b      	cbz	r3, 8006f2c <__smakebuf_r+0x74>
 8006f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 fbbb 	bl	8007694 <_isatty_r>
 8006f1e:	b128      	cbz	r0, 8006f2c <__smakebuf_r+0x74>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	89a0      	ldrh	r0, [r4, #12]
 8006f2e:	4305      	orrs	r5, r0
 8006f30:	81a5      	strh	r5, [r4, #12]
 8006f32:	e7cd      	b.n	8006ed0 <__smakebuf_r+0x18>
 8006f34:	08006ca5 	.word	0x08006ca5

08006f38 <__malloc_lock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_lock+0x8>)
 8006f3a:	f7ff bf97 	b.w	8006e6c <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	200001d0 	.word	0x200001d0

08006f44 <__malloc_unlock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__malloc_unlock+0x8>)
 8006f46:	f7ff bf92 	b.w	8006e6e <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	200001d0 	.word	0x200001d0

08006f50 <__sfputc_r>:
 8006f50:	6893      	ldr	r3, [r2, #8]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	b410      	push	{r4}
 8006f58:	6093      	str	r3, [r2, #8]
 8006f5a:	da08      	bge.n	8006f6e <__sfputc_r+0x1e>
 8006f5c:	6994      	ldr	r4, [r2, #24]
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	db01      	blt.n	8006f66 <__sfputc_r+0x16>
 8006f62:	290a      	cmp	r1, #10
 8006f64:	d103      	bne.n	8006f6e <__sfputc_r+0x1e>
 8006f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f6a:	f7ff bcd7 	b.w	800691c <__swbuf_r>
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	1c58      	adds	r0, r3, #1
 8006f72:	6010      	str	r0, [r2, #0]
 8006f74:	7019      	strb	r1, [r3, #0]
 8006f76:	4608      	mov	r0, r1
 8006f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <__sfputs_r>:
 8006f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	18d5      	adds	r5, r2, r3
 8006f88:	42ac      	cmp	r4, r5
 8006f8a:	d101      	bne.n	8006f90 <__sfputs_r+0x12>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e007      	b.n	8006fa0 <__sfputs_r+0x22>
 8006f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f94:	463a      	mov	r2, r7
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ffda 	bl	8006f50 <__sfputc_r>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d1f3      	bne.n	8006f88 <__sfputs_r+0xa>
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fa4 <_vfiprintf_r>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460d      	mov	r5, r1
 8006faa:	b09d      	sub	sp, #116	; 0x74
 8006fac:	4614      	mov	r4, r2
 8006fae:	4698      	mov	r8, r3
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	b118      	cbz	r0, 8006fbc <_vfiprintf_r+0x18>
 8006fb4:	6983      	ldr	r3, [r0, #24]
 8006fb6:	b90b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x18>
 8006fb8:	f7ff fea8 	bl	8006d0c <__sinit>
 8006fbc:	4b89      	ldr	r3, [pc, #548]	; (80071e4 <_vfiprintf_r+0x240>)
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	d11b      	bne.n	8006ffa <_vfiprintf_r+0x56>
 8006fc2:	6875      	ldr	r5, [r6, #4]
 8006fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d405      	bmi.n	8006fd6 <_vfiprintf_r+0x32>
 8006fca:	89ab      	ldrh	r3, [r5, #12]
 8006fcc:	059a      	lsls	r2, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_vfiprintf_r+0x32>
 8006fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fd2:	f7ff ff4b 	bl	8006e6c <__retarget_lock_acquire_recursive>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	071b      	lsls	r3, r3, #28
 8006fda:	d501      	bpl.n	8006fe0 <_vfiprintf_r+0x3c>
 8006fdc:	692b      	ldr	r3, [r5, #16]
 8006fde:	b9eb      	cbnz	r3, 800701c <_vfiprintf_r+0x78>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7ff fcec 	bl	80069c0 <__swsetup_r>
 8006fe8:	b1c0      	cbz	r0, 800701c <_vfiprintf_r+0x78>
 8006fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fec:	07dc      	lsls	r4, r3, #31
 8006fee:	d50e      	bpl.n	800700e <_vfiprintf_r+0x6a>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff4:	b01d      	add	sp, #116	; 0x74
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <_vfiprintf_r+0x244>)
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	d101      	bne.n	8007004 <_vfiprintf_r+0x60>
 8007000:	68b5      	ldr	r5, [r6, #8]
 8007002:	e7df      	b.n	8006fc4 <_vfiprintf_r+0x20>
 8007004:	4b79      	ldr	r3, [pc, #484]	; (80071ec <_vfiprintf_r+0x248>)
 8007006:	429d      	cmp	r5, r3
 8007008:	bf08      	it	eq
 800700a:	68f5      	ldreq	r5, [r6, #12]
 800700c:	e7da      	b.n	8006fc4 <_vfiprintf_r+0x20>
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	0598      	lsls	r0, r3, #22
 8007012:	d4ed      	bmi.n	8006ff0 <_vfiprintf_r+0x4c>
 8007014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007016:	f7ff ff2a 	bl	8006e6e <__retarget_lock_release_recursive>
 800701a:	e7e9      	b.n	8006ff0 <_vfiprintf_r+0x4c>
 800701c:	2300      	movs	r3, #0
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	2320      	movs	r3, #32
 8007022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007026:	f8cd 800c 	str.w	r8, [sp, #12]
 800702a:	2330      	movs	r3, #48	; 0x30
 800702c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071f0 <_vfiprintf_r+0x24c>
 8007030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007034:	f04f 0901 	mov.w	r9, #1
 8007038:	4623      	mov	r3, r4
 800703a:	469a      	mov	sl, r3
 800703c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007040:	b10a      	cbz	r2, 8007046 <_vfiprintf_r+0xa2>
 8007042:	2a25      	cmp	r2, #37	; 0x25
 8007044:	d1f9      	bne.n	800703a <_vfiprintf_r+0x96>
 8007046:	ebba 0b04 	subs.w	fp, sl, r4
 800704a:	d00b      	beq.n	8007064 <_vfiprintf_r+0xc0>
 800704c:	465b      	mov	r3, fp
 800704e:	4622      	mov	r2, r4
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ff93 	bl	8006f7e <__sfputs_r>
 8007058:	3001      	adds	r0, #1
 800705a:	f000 80aa 	beq.w	80071b2 <_vfiprintf_r+0x20e>
 800705e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007060:	445a      	add	r2, fp
 8007062:	9209      	str	r2, [sp, #36]	; 0x24
 8007064:	f89a 3000 	ldrb.w	r3, [sl]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80a2 	beq.w	80071b2 <_vfiprintf_r+0x20e>
 800706e:	2300      	movs	r3, #0
 8007070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007078:	f10a 0a01 	add.w	sl, sl, #1
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	9307      	str	r3, [sp, #28]
 8007080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007084:	931a      	str	r3, [sp, #104]	; 0x68
 8007086:	4654      	mov	r4, sl
 8007088:	2205      	movs	r2, #5
 800708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708e:	4858      	ldr	r0, [pc, #352]	; (80071f0 <_vfiprintf_r+0x24c>)
 8007090:	f7f9 f8a6 	bl	80001e0 <memchr>
 8007094:	9a04      	ldr	r2, [sp, #16]
 8007096:	b9d8      	cbnz	r0, 80070d0 <_vfiprintf_r+0x12c>
 8007098:	06d1      	lsls	r1, r2, #27
 800709a:	bf44      	itt	mi
 800709c:	2320      	movmi	r3, #32
 800709e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a2:	0713      	lsls	r3, r2, #28
 80070a4:	bf44      	itt	mi
 80070a6:	232b      	movmi	r3, #43	; 0x2b
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b2a      	cmp	r3, #42	; 0x2a
 80070b2:	d015      	beq.n	80070e0 <_vfiprintf_r+0x13c>
 80070b4:	9a07      	ldr	r2, [sp, #28]
 80070b6:	4654      	mov	r4, sl
 80070b8:	2000      	movs	r0, #0
 80070ba:	f04f 0c0a 	mov.w	ip, #10
 80070be:	4621      	mov	r1, r4
 80070c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c4:	3b30      	subs	r3, #48	; 0x30
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d94e      	bls.n	8007168 <_vfiprintf_r+0x1c4>
 80070ca:	b1b0      	cbz	r0, 80070fa <_vfiprintf_r+0x156>
 80070cc:	9207      	str	r2, [sp, #28]
 80070ce:	e014      	b.n	80070fa <_vfiprintf_r+0x156>
 80070d0:	eba0 0308 	sub.w	r3, r0, r8
 80070d4:	fa09 f303 	lsl.w	r3, r9, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	46a2      	mov	sl, r4
 80070de:	e7d2      	b.n	8007086 <_vfiprintf_r+0xe2>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	1d19      	adds	r1, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfbb      	ittet	lt
 80070ec:	425b      	neglt	r3, r3
 80070ee:	f042 0202 	orrlt.w	r2, r2, #2
 80070f2:	9307      	strge	r3, [sp, #28]
 80070f4:	9307      	strlt	r3, [sp, #28]
 80070f6:	bfb8      	it	lt
 80070f8:	9204      	strlt	r2, [sp, #16]
 80070fa:	7823      	ldrb	r3, [r4, #0]
 80070fc:	2b2e      	cmp	r3, #46	; 0x2e
 80070fe:	d10c      	bne.n	800711a <_vfiprintf_r+0x176>
 8007100:	7863      	ldrb	r3, [r4, #1]
 8007102:	2b2a      	cmp	r3, #42	; 0x2a
 8007104:	d135      	bne.n	8007172 <_vfiprintf_r+0x1ce>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	1d1a      	adds	r2, r3, #4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	9203      	str	r2, [sp, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfb8      	it	lt
 8007112:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007116:	3402      	adds	r4, #2
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007200 <_vfiprintf_r+0x25c>
 800711e:	7821      	ldrb	r1, [r4, #0]
 8007120:	2203      	movs	r2, #3
 8007122:	4650      	mov	r0, sl
 8007124:	f7f9 f85c 	bl	80001e0 <memchr>
 8007128:	b140      	cbz	r0, 800713c <_vfiprintf_r+0x198>
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	eba0 000a 	sub.w	r0, r0, sl
 8007130:	fa03 f000 	lsl.w	r0, r3, r0
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	4303      	orrs	r3, r0
 8007138:	3401      	adds	r4, #1
 800713a:	9304      	str	r3, [sp, #16]
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	482c      	ldr	r0, [pc, #176]	; (80071f4 <_vfiprintf_r+0x250>)
 8007142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007146:	2206      	movs	r2, #6
 8007148:	f7f9 f84a 	bl	80001e0 <memchr>
 800714c:	2800      	cmp	r0, #0
 800714e:	d03f      	beq.n	80071d0 <_vfiprintf_r+0x22c>
 8007150:	4b29      	ldr	r3, [pc, #164]	; (80071f8 <_vfiprintf_r+0x254>)
 8007152:	bb1b      	cbnz	r3, 800719c <_vfiprintf_r+0x1f8>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3307      	adds	r3, #7
 8007158:	f023 0307 	bic.w	r3, r3, #7
 800715c:	3308      	adds	r3, #8
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	443b      	add	r3, r7
 8007164:	9309      	str	r3, [sp, #36]	; 0x24
 8007166:	e767      	b.n	8007038 <_vfiprintf_r+0x94>
 8007168:	fb0c 3202 	mla	r2, ip, r2, r3
 800716c:	460c      	mov	r4, r1
 800716e:	2001      	movs	r0, #1
 8007170:	e7a5      	b.n	80070be <_vfiprintf_r+0x11a>
 8007172:	2300      	movs	r3, #0
 8007174:	3401      	adds	r4, #1
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	4619      	mov	r1, r3
 800717a:	f04f 0c0a 	mov.w	ip, #10
 800717e:	4620      	mov	r0, r4
 8007180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007184:	3a30      	subs	r2, #48	; 0x30
 8007186:	2a09      	cmp	r2, #9
 8007188:	d903      	bls.n	8007192 <_vfiprintf_r+0x1ee>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c5      	beq.n	800711a <_vfiprintf_r+0x176>
 800718e:	9105      	str	r1, [sp, #20]
 8007190:	e7c3      	b.n	800711a <_vfiprintf_r+0x176>
 8007192:	fb0c 2101 	mla	r1, ip, r1, r2
 8007196:	4604      	mov	r4, r0
 8007198:	2301      	movs	r3, #1
 800719a:	e7f0      	b.n	800717e <_vfiprintf_r+0x1da>
 800719c:	ab03      	add	r3, sp, #12
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4b16      	ldr	r3, [pc, #88]	; (80071fc <_vfiprintf_r+0x258>)
 80071a4:	a904      	add	r1, sp, #16
 80071a6:	4630      	mov	r0, r6
 80071a8:	f3af 8000 	nop.w
 80071ac:	4607      	mov	r7, r0
 80071ae:	1c78      	adds	r0, r7, #1
 80071b0:	d1d6      	bne.n	8007160 <_vfiprintf_r+0x1bc>
 80071b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b4:	07d9      	lsls	r1, r3, #31
 80071b6:	d405      	bmi.n	80071c4 <_vfiprintf_r+0x220>
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	059a      	lsls	r2, r3, #22
 80071bc:	d402      	bmi.n	80071c4 <_vfiprintf_r+0x220>
 80071be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c0:	f7ff fe55 	bl	8006e6e <__retarget_lock_release_recursive>
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	065b      	lsls	r3, r3, #25
 80071c8:	f53f af12 	bmi.w	8006ff0 <_vfiprintf_r+0x4c>
 80071cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ce:	e711      	b.n	8006ff4 <_vfiprintf_r+0x50>
 80071d0:	ab03      	add	r3, sp, #12
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	462a      	mov	r2, r5
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <_vfiprintf_r+0x258>)
 80071d8:	a904      	add	r1, sp, #16
 80071da:	4630      	mov	r0, r6
 80071dc:	f000 f880 	bl	80072e0 <_printf_i>
 80071e0:	e7e4      	b.n	80071ac <_vfiprintf_r+0x208>
 80071e2:	bf00      	nop
 80071e4:	08007e9c 	.word	0x08007e9c
 80071e8:	08007ebc 	.word	0x08007ebc
 80071ec:	08007e7c 	.word	0x08007e7c
 80071f0:	08007edc 	.word	0x08007edc
 80071f4:	08007ee6 	.word	0x08007ee6
 80071f8:	00000000 	.word	0x00000000
 80071fc:	08006f7f 	.word	0x08006f7f
 8007200:	08007ee2 	.word	0x08007ee2

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007214:	4293      	cmp	r3, r2
 8007216:	bfb8      	it	lt
 8007218:	4613      	movlt	r3, r2
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007220:	4607      	mov	r7, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc26      	bgt.n	800729a <_printf_common+0x96>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42b      	bmi.n	80072b4 <_printf_common+0xb0>
 800725c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d01e      	beq.n	80072a8 <_printf_common+0xa4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	68e5      	ldr	r5, [r4, #12]
 800726e:	6832      	ldr	r2, [r6, #0]
 8007270:	f003 0306 	and.w	r3, r3, #6
 8007274:	2b04      	cmp	r3, #4
 8007276:	bf08      	it	eq
 8007278:	1aad      	subeq	r5, r5, r2
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	6922      	ldr	r2, [r4, #16]
 800727e:	bf0c      	ite	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	2500      	movne	r5, #0
 8007286:	4293      	cmp	r3, r2
 8007288:	bfc4      	itt	gt
 800728a:	1a9b      	subgt	r3, r3, r2
 800728c:	18ed      	addgt	r5, r5, r3
 800728e:	2600      	movs	r6, #0
 8007290:	341a      	adds	r4, #26
 8007292:	42b5      	cmp	r5, r6
 8007294:	d11a      	bne.n	80072cc <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e008      	b.n	80072ac <_printf_common+0xa8>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4649      	mov	r1, r9
 80072a0:	4638      	mov	r0, r7
 80072a2:	47c0      	blx	r8
 80072a4:	3001      	adds	r0, #1
 80072a6:	d103      	bne.n	80072b0 <_printf_common+0xac>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	3501      	adds	r5, #1
 80072b2:	e7c6      	b.n	8007242 <_printf_common+0x3e>
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072be:	4422      	add	r2, r4
 80072c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7c7      	b.n	800725c <_printf_common+0x58>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4622      	mov	r2, r4
 80072d0:	4649      	mov	r1, r9
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0e6      	beq.n	80072a8 <_printf_common+0xa4>
 80072da:	3601      	adds	r6, #1
 80072dc:	e7d9      	b.n	8007292 <_printf_common+0x8e>
	...

080072e0 <_printf_i>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	460c      	mov	r4, r1
 80072e6:	4691      	mov	r9, r2
 80072e8:	7e27      	ldrb	r7, [r4, #24]
 80072ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072ec:	2f78      	cmp	r7, #120	; 0x78
 80072ee:	4680      	mov	r8, r0
 80072f0:	469a      	mov	sl, r3
 80072f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f6:	d807      	bhi.n	8007308 <_printf_i+0x28>
 80072f8:	2f62      	cmp	r7, #98	; 0x62
 80072fa:	d80a      	bhi.n	8007312 <_printf_i+0x32>
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	f000 80d8 	beq.w	80074b2 <_printf_i+0x1d2>
 8007302:	2f58      	cmp	r7, #88	; 0x58
 8007304:	f000 80a3 	beq.w	800744e <_printf_i+0x16e>
 8007308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800730c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007310:	e03a      	b.n	8007388 <_printf_i+0xa8>
 8007312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007316:	2b15      	cmp	r3, #21
 8007318:	d8f6      	bhi.n	8007308 <_printf_i+0x28>
 800731a:	a001      	add	r0, pc, #4	; (adr r0, 8007320 <_printf_i+0x40>)
 800731c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007320:	08007379 	.word	0x08007379
 8007324:	0800738d 	.word	0x0800738d
 8007328:	08007309 	.word	0x08007309
 800732c:	08007309 	.word	0x08007309
 8007330:	08007309 	.word	0x08007309
 8007334:	08007309 	.word	0x08007309
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007309 	.word	0x08007309
 8007340:	08007309 	.word	0x08007309
 8007344:	08007309 	.word	0x08007309
 8007348:	08007309 	.word	0x08007309
 800734c:	08007499 	.word	0x08007499
 8007350:	080073bd 	.word	0x080073bd
 8007354:	0800747b 	.word	0x0800747b
 8007358:	08007309 	.word	0x08007309
 800735c:	08007309 	.word	0x08007309
 8007360:	080074bb 	.word	0x080074bb
 8007364:	08007309 	.word	0x08007309
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007309 	.word	0x08007309
 8007370:	08007309 	.word	0x08007309
 8007374:	08007483 	.word	0x08007483
 8007378:	680b      	ldr	r3, [r1, #0]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	600a      	str	r2, [r1, #0]
 8007380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e0a3      	b.n	80074d4 <_printf_i+0x1f4>
 800738c:	6825      	ldr	r5, [r4, #0]
 800738e:	6808      	ldr	r0, [r1, #0]
 8007390:	062e      	lsls	r6, r5, #24
 8007392:	f100 0304 	add.w	r3, r0, #4
 8007396:	d50a      	bpl.n	80073ae <_printf_i+0xce>
 8007398:	6805      	ldr	r5, [r0, #0]
 800739a:	600b      	str	r3, [r1, #0]
 800739c:	2d00      	cmp	r5, #0
 800739e:	da03      	bge.n	80073a8 <_printf_i+0xc8>
 80073a0:	232d      	movs	r3, #45	; 0x2d
 80073a2:	426d      	negs	r5, r5
 80073a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a8:	485e      	ldr	r0, [pc, #376]	; (8007524 <_printf_i+0x244>)
 80073aa:	230a      	movs	r3, #10
 80073ac:	e019      	b.n	80073e2 <_printf_i+0x102>
 80073ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073b2:	6805      	ldr	r5, [r0, #0]
 80073b4:	600b      	str	r3, [r1, #0]
 80073b6:	bf18      	it	ne
 80073b8:	b22d      	sxthne	r5, r5
 80073ba:	e7ef      	b.n	800739c <_printf_i+0xbc>
 80073bc:	680b      	ldr	r3, [r1, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	1d18      	adds	r0, r3, #4
 80073c2:	6008      	str	r0, [r1, #0]
 80073c4:	0628      	lsls	r0, r5, #24
 80073c6:	d501      	bpl.n	80073cc <_printf_i+0xec>
 80073c8:	681d      	ldr	r5, [r3, #0]
 80073ca:	e002      	b.n	80073d2 <_printf_i+0xf2>
 80073cc:	0669      	lsls	r1, r5, #25
 80073ce:	d5fb      	bpl.n	80073c8 <_printf_i+0xe8>
 80073d0:	881d      	ldrh	r5, [r3, #0]
 80073d2:	4854      	ldr	r0, [pc, #336]	; (8007524 <_printf_i+0x244>)
 80073d4:	2f6f      	cmp	r7, #111	; 0x6f
 80073d6:	bf0c      	ite	eq
 80073d8:	2308      	moveq	r3, #8
 80073da:	230a      	movne	r3, #10
 80073dc:	2100      	movs	r1, #0
 80073de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073e2:	6866      	ldr	r6, [r4, #4]
 80073e4:	60a6      	str	r6, [r4, #8]
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	bfa2      	ittt	ge
 80073ea:	6821      	ldrge	r1, [r4, #0]
 80073ec:	f021 0104 	bicge.w	r1, r1, #4
 80073f0:	6021      	strge	r1, [r4, #0]
 80073f2:	b90d      	cbnz	r5, 80073f8 <_printf_i+0x118>
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	d04d      	beq.n	8007494 <_printf_i+0x1b4>
 80073f8:	4616      	mov	r6, r2
 80073fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80073fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007402:	5dc7      	ldrb	r7, [r0, r7]
 8007404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007408:	462f      	mov	r7, r5
 800740a:	42bb      	cmp	r3, r7
 800740c:	460d      	mov	r5, r1
 800740e:	d9f4      	bls.n	80073fa <_printf_i+0x11a>
 8007410:	2b08      	cmp	r3, #8
 8007412:	d10b      	bne.n	800742c <_printf_i+0x14c>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	07df      	lsls	r7, r3, #31
 8007418:	d508      	bpl.n	800742c <_printf_i+0x14c>
 800741a:	6923      	ldr	r3, [r4, #16]
 800741c:	6861      	ldr	r1, [r4, #4]
 800741e:	4299      	cmp	r1, r3
 8007420:	bfde      	ittt	le
 8007422:	2330      	movle	r3, #48	; 0x30
 8007424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007428:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800742c:	1b92      	subs	r2, r2, r6
 800742e:	6122      	str	r2, [r4, #16]
 8007430:	f8cd a000 	str.w	sl, [sp]
 8007434:	464b      	mov	r3, r9
 8007436:	aa03      	add	r2, sp, #12
 8007438:	4621      	mov	r1, r4
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff fee2 	bl	8007204 <_printf_common>
 8007440:	3001      	adds	r0, #1
 8007442:	d14c      	bne.n	80074de <_printf_i+0x1fe>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007448:	b004      	add	sp, #16
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744e:	4835      	ldr	r0, [pc, #212]	; (8007524 <_printf_i+0x244>)
 8007450:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	680e      	ldr	r6, [r1, #0]
 8007458:	061f      	lsls	r7, r3, #24
 800745a:	f856 5b04 	ldr.w	r5, [r6], #4
 800745e:	600e      	str	r6, [r1, #0]
 8007460:	d514      	bpl.n	800748c <_printf_i+0x1ac>
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	bf44      	itt	mi
 8007466:	f043 0320 	orrmi.w	r3, r3, #32
 800746a:	6023      	strmi	r3, [r4, #0]
 800746c:	b91d      	cbnz	r5, 8007476 <_printf_i+0x196>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f023 0320 	bic.w	r3, r3, #32
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	2310      	movs	r3, #16
 8007478:	e7b0      	b.n	80073dc <_printf_i+0xfc>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	f043 0320 	orr.w	r3, r3, #32
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	2378      	movs	r3, #120	; 0x78
 8007484:	4828      	ldr	r0, [pc, #160]	; (8007528 <_printf_i+0x248>)
 8007486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800748a:	e7e3      	b.n	8007454 <_printf_i+0x174>
 800748c:	065e      	lsls	r6, r3, #25
 800748e:	bf48      	it	mi
 8007490:	b2ad      	uxthmi	r5, r5
 8007492:	e7e6      	b.n	8007462 <_printf_i+0x182>
 8007494:	4616      	mov	r6, r2
 8007496:	e7bb      	b.n	8007410 <_printf_i+0x130>
 8007498:	680b      	ldr	r3, [r1, #0]
 800749a:	6826      	ldr	r6, [r4, #0]
 800749c:	6960      	ldr	r0, [r4, #20]
 800749e:	1d1d      	adds	r5, r3, #4
 80074a0:	600d      	str	r5, [r1, #0]
 80074a2:	0635      	lsls	r5, r6, #24
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0x1cc>
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <_printf_i+0x1d2>
 80074ac:	0671      	lsls	r1, r6, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0x1c8>
 80074b0:	8018      	strh	r0, [r3, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	4616      	mov	r6, r2
 80074b8:	e7ba      	b.n	8007430 <_printf_i+0x150>
 80074ba:	680b      	ldr	r3, [r1, #0]
 80074bc:	1d1a      	adds	r2, r3, #4
 80074be:	600a      	str	r2, [r1, #0]
 80074c0:	681e      	ldr	r6, [r3, #0]
 80074c2:	6862      	ldr	r2, [r4, #4]
 80074c4:	2100      	movs	r1, #0
 80074c6:	4630      	mov	r0, r6
 80074c8:	f7f8 fe8a 	bl	80001e0 <memchr>
 80074cc:	b108      	cbz	r0, 80074d2 <_printf_i+0x1f2>
 80074ce:	1b80      	subs	r0, r0, r6
 80074d0:	6060      	str	r0, [r4, #4]
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	2300      	movs	r3, #0
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	e7a8      	b.n	8007430 <_printf_i+0x150>
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	4632      	mov	r2, r6
 80074e2:	4649      	mov	r1, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	47d0      	blx	sl
 80074e8:	3001      	adds	r0, #1
 80074ea:	d0ab      	beq.n	8007444 <_printf_i+0x164>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	079b      	lsls	r3, r3, #30
 80074f0:	d413      	bmi.n	800751a <_printf_i+0x23a>
 80074f2:	68e0      	ldr	r0, [r4, #12]
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	4298      	cmp	r0, r3
 80074f8:	bfb8      	it	lt
 80074fa:	4618      	movlt	r0, r3
 80074fc:	e7a4      	b.n	8007448 <_printf_i+0x168>
 80074fe:	2301      	movs	r3, #1
 8007500:	4632      	mov	r2, r6
 8007502:	4649      	mov	r1, r9
 8007504:	4640      	mov	r0, r8
 8007506:	47d0      	blx	sl
 8007508:	3001      	adds	r0, #1
 800750a:	d09b      	beq.n	8007444 <_printf_i+0x164>
 800750c:	3501      	adds	r5, #1
 800750e:	68e3      	ldr	r3, [r4, #12]
 8007510:	9903      	ldr	r1, [sp, #12]
 8007512:	1a5b      	subs	r3, r3, r1
 8007514:	42ab      	cmp	r3, r5
 8007516:	dcf2      	bgt.n	80074fe <_printf_i+0x21e>
 8007518:	e7eb      	b.n	80074f2 <_printf_i+0x212>
 800751a:	2500      	movs	r5, #0
 800751c:	f104 0619 	add.w	r6, r4, #25
 8007520:	e7f5      	b.n	800750e <_printf_i+0x22e>
 8007522:	bf00      	nop
 8007524:	08007eed 	.word	0x08007eed
 8007528:	08007efe 	.word	0x08007efe

0800752c <_putc_r>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	460d      	mov	r5, r1
 8007530:	4614      	mov	r4, r2
 8007532:	4606      	mov	r6, r0
 8007534:	b118      	cbz	r0, 800753e <_putc_r+0x12>
 8007536:	6983      	ldr	r3, [r0, #24]
 8007538:	b90b      	cbnz	r3, 800753e <_putc_r+0x12>
 800753a:	f7ff fbe7 	bl	8006d0c <__sinit>
 800753e:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <_putc_r+0x84>)
 8007540:	429c      	cmp	r4, r3
 8007542:	d124      	bne.n	800758e <_putc_r+0x62>
 8007544:	6874      	ldr	r4, [r6, #4]
 8007546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007548:	07d8      	lsls	r0, r3, #31
 800754a:	d405      	bmi.n	8007558 <_putc_r+0x2c>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	0599      	lsls	r1, r3, #22
 8007550:	d402      	bmi.n	8007558 <_putc_r+0x2c>
 8007552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007554:	f7ff fc8a 	bl	8006e6c <__retarget_lock_acquire_recursive>
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	da05      	bge.n	800756e <_putc_r+0x42>
 8007562:	69a2      	ldr	r2, [r4, #24]
 8007564:	4293      	cmp	r3, r2
 8007566:	db1c      	blt.n	80075a2 <_putc_r+0x76>
 8007568:	b2eb      	uxtb	r3, r5
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d019      	beq.n	80075a2 <_putc_r+0x76>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	701d      	strb	r5, [r3, #0]
 8007576:	b2ed      	uxtb	r5, r5
 8007578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757a:	07da      	lsls	r2, r3, #31
 800757c:	d405      	bmi.n	800758a <_putc_r+0x5e>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	059b      	lsls	r3, r3, #22
 8007582:	d402      	bmi.n	800758a <_putc_r+0x5e>
 8007584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007586:	f7ff fc72 	bl	8006e6e <__retarget_lock_release_recursive>
 800758a:	4628      	mov	r0, r5
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <_putc_r+0x88>)
 8007590:	429c      	cmp	r4, r3
 8007592:	d101      	bne.n	8007598 <_putc_r+0x6c>
 8007594:	68b4      	ldr	r4, [r6, #8]
 8007596:	e7d6      	b.n	8007546 <_putc_r+0x1a>
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <_putc_r+0x8c>)
 800759a:	429c      	cmp	r4, r3
 800759c:	bf08      	it	eq
 800759e:	68f4      	ldreq	r4, [r6, #12]
 80075a0:	e7d1      	b.n	8007546 <_putc_r+0x1a>
 80075a2:	4629      	mov	r1, r5
 80075a4:	4622      	mov	r2, r4
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff f9b8 	bl	800691c <__swbuf_r>
 80075ac:	4605      	mov	r5, r0
 80075ae:	e7e3      	b.n	8007578 <_putc_r+0x4c>
 80075b0:	08007e9c 	.word	0x08007e9c
 80075b4:	08007ebc 	.word	0x08007ebc
 80075b8:	08007e7c 	.word	0x08007e7c

080075bc <__sread>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	460c      	mov	r4, r1
 80075c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c4:	f000 f888 	bl	80076d8 <_read_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	bfab      	itete	ge
 80075cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ce:	89a3      	ldrhlt	r3, [r4, #12]
 80075d0:	181b      	addge	r3, r3, r0
 80075d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075d6:	bfac      	ite	ge
 80075d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80075da:	81a3      	strhlt	r3, [r4, #12]
 80075dc:	bd10      	pop	{r4, pc}

080075de <__swrite>:
 80075de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e2:	461f      	mov	r7, r3
 80075e4:	898b      	ldrh	r3, [r1, #12]
 80075e6:	05db      	lsls	r3, r3, #23
 80075e8:	4605      	mov	r5, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	4616      	mov	r6, r2
 80075ee:	d505      	bpl.n	80075fc <__swrite+0x1e>
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	2302      	movs	r3, #2
 80075f6:	2200      	movs	r2, #0
 80075f8:	f000 f85c 	bl	80076b4 <_lseek_r>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	4632      	mov	r2, r6
 800760a:	463b      	mov	r3, r7
 800760c:	4628      	mov	r0, r5
 800760e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	f7fa b9a5 	b.w	8001960 <_write_r>

08007616 <__sseek>:
 8007616:	b510      	push	{r4, lr}
 8007618:	460c      	mov	r4, r1
 800761a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761e:	f000 f849 	bl	80076b4 <_lseek_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	bf15      	itete	ne
 8007628:	6560      	strne	r0, [r4, #84]	; 0x54
 800762a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800762e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007632:	81a3      	strheq	r3, [r4, #12]
 8007634:	bf18      	it	ne
 8007636:	81a3      	strhne	r3, [r4, #12]
 8007638:	bd10      	pop	{r4, pc}

0800763a <__sclose>:
 800763a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763e:	f000 b807 	b.w	8007650 <_close_r>

08007642 <abort>:
 8007642:	b508      	push	{r3, lr}
 8007644:	2006      	movs	r0, #6
 8007646:	f000 f881 	bl	800774c <raise>
 800764a:	2001      	movs	r0, #1
 800764c:	f7fe fd45 	bl	80060da <_exit>

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_close_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fe fd64 	bl	8006128 <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	200001d8 	.word	0x200001d8

08007670 <_fstat_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_fstat_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7fe fd5f 	bl	8006140 <_fstat>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_fstat_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_fstat_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	200001d8 	.word	0x200001d8

08007694 <_isatty_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	; (80076b0 <_isatty_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fe fd5e 	bl	8006160 <_isatty>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_isatty_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_isatty_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	200001d8 	.word	0x200001d8

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_lseek_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7fe fd57 	bl	8006176 <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	200001d8 	.word	0x200001d8

080076d8 <_read_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_read_r+0x20>)
 80076dc:	4604      	mov	r4, r0
 80076de:	4608      	mov	r0, r1
 80076e0:	4611      	mov	r1, r2
 80076e2:	2200      	movs	r2, #0
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7fe fd01 	bl	80060ee <_read>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_read_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_read_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	200001d8 	.word	0x200001d8

080076fc <_raise_r>:
 80076fc:	291f      	cmp	r1, #31
 80076fe:	b538      	push	{r3, r4, r5, lr}
 8007700:	4604      	mov	r4, r0
 8007702:	460d      	mov	r5, r1
 8007704:	d904      	bls.n	8007710 <_raise_r+0x14>
 8007706:	2316      	movs	r3, #22
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007712:	b112      	cbz	r2, 800771a <_raise_r+0x1e>
 8007714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007718:	b94b      	cbnz	r3, 800772e <_raise_r+0x32>
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f830 	bl	8007780 <_getpid_r>
 8007720:	462a      	mov	r2, r5
 8007722:	4601      	mov	r1, r0
 8007724:	4620      	mov	r0, r4
 8007726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800772a:	f000 b817 	b.w	800775c <_kill_r>
 800772e:	2b01      	cmp	r3, #1
 8007730:	d00a      	beq.n	8007748 <_raise_r+0x4c>
 8007732:	1c59      	adds	r1, r3, #1
 8007734:	d103      	bne.n	800773e <_raise_r+0x42>
 8007736:	2316      	movs	r3, #22
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	2001      	movs	r0, #1
 800773c:	e7e7      	b.n	800770e <_raise_r+0x12>
 800773e:	2400      	movs	r4, #0
 8007740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007744:	4628      	mov	r0, r5
 8007746:	4798      	blx	r3
 8007748:	2000      	movs	r0, #0
 800774a:	e7e0      	b.n	800770e <_raise_r+0x12>

0800774c <raise>:
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <raise+0xc>)
 800774e:	4601      	mov	r1, r0
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	f7ff bfd3 	b.w	80076fc <_raise_r>
 8007756:	bf00      	nop
 8007758:	2000002c 	.word	0x2000002c

0800775c <_kill_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_kill_r+0x20>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f7fe fca6 	bl	80060ba <_kill>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d102      	bne.n	8007778 <_kill_r+0x1c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b103      	cbz	r3, 8007778 <_kill_r+0x1c>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	200001d8 	.word	0x200001d8

08007780 <_getpid_r>:
 8007780:	f7fe bc93 	b.w	80060aa <_getpid>

08007784 <_init>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr

08007790 <_fini>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr
>>>>>>> Stashed changes
